
addition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a78  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08010d10  08010d10  00020d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010d68  08010d68  00020d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010d70  08010d70  00020d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010d74  08010d74  00020d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  08010d78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005bc  240000c0  08010e30  000300c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400067c  08010e30  0003067c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024af0  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000038e7  00000000  00000000  00054bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c38  00000000  00000000  000584c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001ae0  00000000  00000000  0005a0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b66a  00000000  00000000  0005bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002592e  00000000  00000000  00097242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001809f3  00000000  00000000  000bcb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023d563  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007d58  00000000  00000000  0023d5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000c0 	.word	0x240000c0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010cf8 	.word	0x08010cf8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000c4 	.word	0x240000c4
 80002d4:	08010cf8 	.word	0x08010cf8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <poll_i2c_sensor>:
 * @brief function to poll individual i2c sensor
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8000612:	2300      	movs	r3, #0
 8000614:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b299      	uxth	r1, r3
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <poll_i2c_sensor+0x94>)
 8000628:	f007 f9e2 	bl	80079f0 <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <poll_i2c_sensor+0x42>
		strcpy((char*) buf, "Error Tx\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <poll_i2c_sensor+0x98>)
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e022      	b.n	8000690 <poll_i2c_sensor+0x88>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b299      	uxth	r1, r3
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <poll_i2c_sensor+0x94>)
 800065c:	f007 fae0 	bl	8007c20 <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <poll_i2c_sensor+0x76>
			strcpy((char*) buf, "Error Rx\r\n");
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <poll_i2c_sensor+0x9c>)
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	c303      	stmia	r3!, {r0, r1}
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	3302      	adds	r3, #2
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e008      	b.n	8000690 <poll_i2c_sensor+0x88>
		} else {
			output = (int16_t) (buf[0] << 8);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	7a7a      	ldrb	r2, [r7, #9]
 800068a:	4313      	orrs	r3, r2
 800068c:	10db      	asrs	r3, r3, #3
 800068e:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8000690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	24000320 	.word	0x24000320
 80006a0:	08010d10 	.word	0x08010d10
 80006a4:	08010d1c 	.word	0x08010d1c

080006a8 <i2c>:
/**
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t* i2c() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa9 	bl	8000608 <poll_i2c_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006ba:	2394      	movs	r3, #148	; 0x94
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa3 	bl	8000608 <poll_i2c_sensor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006c6:	2392      	movs	r3, #146	; 0x92
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9d 	bl	8000608 <poll_i2c_sensor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006d2:	2396      	movs	r3, #150	; 0x96
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff97 	bl	8000608 <poll_i2c_sensor>
 80006da:	4603      	mov	r3, r0
 80006dc:	813b      	strh	r3, [r7, #8]

	int16_t *results = malloc(4 * sizeof(int16_t));
 80006de:	2008      	movs	r0, #8
 80006e0:	f010 f9e6 	bl	8010ab0 <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
	results[0] = output1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	89fa      	ldrh	r2, [r7, #14]
 80006ec:	801a      	strh	r2, [r3, #0]
	results[1] = output2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3302      	adds	r3, #2
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	801a      	strh	r2, [r3, #0]
	results[2] = output3;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	897a      	ldrh	r2, [r7, #10]
 80006fc:	801a      	strh	r2, [r3, #0]
	results[3] = output4;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	893a      	ldrh	r2, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
	return results;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <spi>:
 * @brief polls respective spi sensor and returns uint16_t value
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi) {
 8000710:	b084      	sub	sp, #16
 8000712:	b580      	push	{r7, lr}
 8000714:	b084      	sub	sp, #16
 8000716:	af00      	add	r7, sp, #0
 8000718:	f107 0c18 	add.w	ip, r7, #24
 800071c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi, (uint8_t*) spiRxBuffer, 1, 1);
 8000720:	1d39      	adds	r1, r7, #4
 8000722:	2301      	movs	r3, #1
 8000724:	2201      	movs	r2, #1
 8000726:	f107 0018 	add.w	r0, r7, #24
 800072a:	f00b fd2b 	bl	800c184 <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 8000732:	797b      	ldrb	r3, [r7, #5]
 8000734:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1 << 10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000740:	601a      	str	r2, [r3, #0]
	uint8_t *results = malloc(2 * sizeof(uint8_t));
 8000742:	2002      	movs	r0, #2
 8000744:	f010 f9b4 	bl	8010ab0 <malloc>
 8000748:	4603      	mov	r3, r0
 800074a:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	7bba      	ldrb	r2, [r7, #14]
 8000750:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	3301      	adds	r3, #1
 8000756:	7bfa      	ldrb	r2, [r7, #15]
 8000758:	701a      	strb	r2, [r3, #0]
	return results;
 800075a:	68bb      	ldr	r3, [r7, #8]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
	...

0800076c <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

	uint16_t PC4 = ADC1Data[1]; 			// SWPmon --
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <erpa_adc+0x34>)
 8000774:	885b      	ldrh	r3, [r3, #2]
 8000776:	80fb      	strh	r3, [r7, #6]
	uint16_t PB0 = ADC1Data[5]; 	// TEMP1 -- verified doesn't need to change
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <erpa_adc+0x34>)
 800077a:	895b      	ldrh	r3, [r3, #10]
 800077c:	80bb      	strh	r3, [r7, #4]

	uint16_t *results = malloc(2 * sizeof(uint16_t));
 800077e:	2004      	movs	r0, #4
 8000780:	f010 f996 	bl	8010ab0 <malloc>
 8000784:	4603      	mov	r3, r0
 8000786:	603b      	str	r3, [r7, #0]
	results[0] = PC4;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	88fa      	ldrh	r2, [r7, #6]
 800078c:	801a      	strh	r2, [r3, #0]
	results[1] = PB0;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	3302      	adds	r3, #2
 8000792:	88ba      	ldrh	r2, [r7, #4]
 8000794:	801a      	strh	r2, [r3, #0]

	return results;
 8000796:	683b      	ldr	r3, [r7, #0]

}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	24000620 	.word	0x24000620

080007a4 <hk_adc1>:

uint16_t* hk_adc1() {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[10];// BUSVmon -- verified doesn't need to change
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <hk_adc1+0x98>)
 80007ac:	8a9b      	ldrh	r3, [r3, #20]
 80007ae:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[8];	// BUSImon -- verified doesn't need to change
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <hk_adc1+0x98>)
 80007b2:	8a1b      	ldrh	r3, [r3, #16]
 80007b4:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];		// 2v5mon -- verified doesn't need to change
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <hk_adc1+0x98>)
 80007b8:	899b      	ldrh	r3, [r3, #12]
 80007ba:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// n3v3mon --
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <hk_adc1+0x98>)
 80007be:	8a5b      	ldrh	r3, [r3, #18]
 80007c0:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[2];		// n200v -- verified doesn't need to change
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <hk_adc1+0x98>)
 80007c4:	889b      	ldrh	r3, [r3, #4]
 80007c6:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3];				// n800v --
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <hk_adc1+0x98>)
 80007ca:	88db      	ldrh	r3, [r3, #6]
 80007cc:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// 5vmon --
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <hk_adc1+0x98>)
 80007d0:	89db      	ldrh	r3, [r3, #14]
 80007d2:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];		// 15vmon -- verified doesn't need to change
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <hk_adc1+0x98>)
 80007d6:	891b      	ldrh	r3, [r3, #8]
 80007d8:	813b      	strh	r3, [r7, #8]
	uint16_t PA6 = ADC1Data[0];				// 5vrefmon --
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <hk_adc1+0x98>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	80fb      	strh	r3, [r7, #6]

	uint16_t *results = malloc(9 * sizeof(uint16_t));
 80007e0:	2012      	movs	r0, #18
 80007e2:	f010 f965 	bl	8010ab0 <malloc>
 80007e6:	4603      	mov	r3, r0
 80007e8:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	8afa      	ldrh	r2, [r7, #22]
 80007ee:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	3302      	adds	r3, #2
 80007f4:	8aba      	ldrh	r2, [r7, #20]
 80007f6:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	3304      	adds	r3, #4
 80007fc:	8a7a      	ldrh	r2, [r7, #18]
 80007fe:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	3306      	adds	r3, #6
 8000804:	8a3a      	ldrh	r2, [r7, #16]
 8000806:	801a      	strh	r2, [r3, #0]
	results[4] = PB1;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	3308      	adds	r3, #8
 800080c:	89fa      	ldrh	r2, [r7, #14]
 800080e:	801a      	strh	r2, [r3, #0]
	results[5] = PA7;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	330a      	adds	r3, #10
 8000814:	89ba      	ldrh	r2, [r7, #12]
 8000816:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	330c      	adds	r3, #12
 800081c:	897a      	ldrh	r2, [r7, #10]
 800081e:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	330e      	adds	r3, #14
 8000824:	893a      	ldrh	r2, [r7, #8]
 8000826:	801a      	strh	r2, [r3, #0]
	results[8] = PA6;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	3310      	adds	r3, #16
 800082c:	88fa      	ldrh	r2, [r7, #6]
 800082e:	801a      	strh	r2, [r3, #0]

	return results;
 8000830:	683b      	ldr	r3, [r7, #0]

}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	24000620 	.word	0x24000620

08000840 <hk_adc3>:

uint16_t* hk_adc3() {
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[0];
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <hk_adc3+0x50>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[1];
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <hk_adc3+0x50>)
 800084e:	885b      	ldrh	r3, [r3, #2]
 8000850:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3Data[2]; 		// n5vmon --
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <hk_adc3+0x50>)
 8000854:	889b      	ldrh	r3, [r3, #4]
 8000856:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3Data[3];			// 3v3mon --
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <hk_adc3+0x50>)
 800085a:	88db      	ldrh	r3, [r3, #6]
 800085c:	813b      	strh	r3, [r7, #8]

	uint16_t *results = malloc(4 * sizeof(uint16_t));
 800085e:	2008      	movs	r0, #8
 8000860:	f010 f926 	bl	8010ab0 <malloc>
 8000864:	4603      	mov	r3, r0
 8000866:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	89fa      	ldrh	r2, [r7, #14]
 800086c:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3302      	adds	r3, #2
 8000872:	89ba      	ldrh	r2, [r7, #12]
 8000874:	801a      	strh	r2, [r3, #0]
	results[2] = PC2;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3304      	adds	r3, #4
 800087a:	897a      	ldrh	r2, [r7, #10]
 800087c:	801a      	strh	r2, [r3, #0]
	results[3] = PC3;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3306      	adds	r3, #6
 8000882:	893a      	ldrh	r2, [r7, #8]
 8000884:	801a      	strh	r2, [r3, #0]

	return results;
 8000886:	687b      	ldr	r3, [r7, #4]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	24000640 	.word	0x24000640

08000894 <send_erpa_packet>:
 * @brief sends erpa packet via UART
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t *erpa_spi, uint16_t *erpa_adc_results) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  			// ERPA SYNC 0xAA MSB
 800089e:	23aa      	movs	r3, #170	; 0xaa
 80008a0:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  			// ERPA SYNC 0xAA LSB
 80008a2:	23aa      	movs	r3, #170	; 0xaa
 80008a4:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 				// ERPA SEQ # MSB
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <send_erpa_packet+0x90>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	0a1b      	lsrs	r3, r3, #8
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          				// ERPA SEQ # MSB
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <send_erpa_packet+0x90>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((0 & 0xFF00) >> 8); 	  						// ENDmon MSB
 80008ba:	2300      	movs	r3, #0
 80008bc:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (0 & 0xFF);               					// ENDmon LSB
 80008be:	2300      	movs	r3, #0
 80008c0:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[0] & 0xFF00) >> 8);    // SWP Monitored MSB
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[0] & 0xFF);             // SWP Monitored LSB
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[1] & 0xFF00) >> 8);    // TEMPURATURE 1 MSB
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	3302      	adds	r3, #2
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[1] & 0xFF);             // TEMPURATURE 1 LSB
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	3302      	adds	r3, #2
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     				// TEMPURATURE 2 MSB
 80008ee:	2300      	movs	r3, #0
 80008f0:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    			// TEMPURATURE 2 LSB
 80008f2:	2300      	movs	r3, #0
 80008f4:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];									// ERPA eADC MSB
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];									// ERPA eADC LSB
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	785b      	ldrb	r3, [r3, #1]
 8000900:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000902:	f107 0108 	add.w	r1, r7, #8
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	220e      	movs	r2, #14
 800090a:	4807      	ldr	r0, [pc, #28]	; (8000928 <send_erpa_packet+0x94>)
 800090c:	f00d fcc8 	bl	800e2a0 <HAL_UART_Transmit>
	erpa_seq++;
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <send_erpa_packet+0x90>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b02      	ldr	r3, [pc, #8]	; (8000924 <send_erpa_packet+0x90>)
 800091a:	801a      	strh	r2, [r3, #0]

}
 800091c:	bf00      	nop
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	24000658 	.word	0x24000658
 8000928:	2400051c 	.word	0x2400051c

0800092c <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results,
		uint16_t *hk_adc3_results) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];									// GUI Structure

	hk_buf[0] = hk_sync;                     			// HK SYNC 0xCC MSB
 8000938:	23cc      	movs	r3, #204	; 0xcc
 800093a:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     			// HK SYNC 0xCC LSB
 800093c:	23cc      	movs	r3, #204	; 0xcc
 800093e:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 8000940:	4b7d      	ldr	r3, [pc, #500]	; (8000b38 <send_hk_packet+0x20c>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 800094c:	4b7a      	ldr	r3, [pc, #488]	; (8000b38 <send_hk_packet+0x20c>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);	// HK vsense MSB
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3302      	adds	r3, #2
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	b29b      	uxth	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);			// HK vsense LSB
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3302      	adds	r3, #2
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);	// HK vrefint MSB
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	b29b      	uxth	r3, r3
 8000974:	b2db      	uxtb	r3, r3
 8000976:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);			// HK vrefint LSB
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);		// HK TEMP1 MSB
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000986:	121b      	asrs	r3, r3, #8
 8000988:	b2db      	uxtb	r3, r3
 800098a:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);					// HK TEMP1 LSB
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);		// HK TEMP2 MSB
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	3302      	adds	r3, #2
 800099a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800099e:	121b      	asrs	r3, r3, #8
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);				// HK TEMP2 LSB
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3302      	adds	r3, #2
 80009a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);		// HK TEMP3 MSB
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	3304      	adds	r3, #4
 80009b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b8:	121b      	asrs	r3, r3, #8
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);				// HK TEMP3 LSB
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3304      	adds	r3, #4
 80009c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);		// HK TEMP4 MSB
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	3306      	adds	r3, #6
 80009ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d2:	121b      	asrs	r3, r3, #8
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);				// HK TEMP4 LSB
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3306      	adds	r3, #6
 80009dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);			// HK BUSvmon LSB
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	3302      	adds	r3, #2
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);			// HK BUSimon LSB
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	3302      	adds	r3, #2
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);			// HK 2v5mon LSB
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc3_results[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3306      	adds	r3, #6
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc3_results[3] & 0xFF);			// HK 3v3mon LSB
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3306      	adds	r3, #6
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	330c      	adds	r3, #12
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	0a1b      	lsrs	r3, r3, #8
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[6] & 0xFF);			// HK 5vmon LSB
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	330c      	adds	r3, #12
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	3306      	adds	r3, #6
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	0a1b      	lsrs	r3, r3, #8
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[3] & 0xFF);			// HK n3v3mon LSB
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	3306      	adds	r3, #6
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc3_results[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc3_results[2] & 0xFF);			// HK n5vmon LSB
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	330e      	adds	r3, #14
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	0a1b      	lsrs	r3, r3, #8
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);			// HK 15vmon LSB
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	330e      	adds	r3, #14
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	3310      	adds	r3, #16
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	0a1b      	lsrs	r3, r3, #8
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);			// HK 5vrefmon LSB
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	3310      	adds	r3, #16
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	3308      	adds	r3, #8
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[4] & 0xFF);			// HK n150vmon LSB
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3308      	adds	r3, #8
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	330a      	adds	r3, #10
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc1_results[5] & 0xFF);			// HK n800vmon LSB
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	330a      	adds	r3, #10
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000b14:	f107 0110 	add.w	r1, r7, #16
 8000b18:	2364      	movs	r3, #100	; 0x64
 8000b1a:	2226      	movs	r2, #38	; 0x26
 8000b1c:	4807      	ldr	r0, [pc, #28]	; (8000b3c <send_hk_packet+0x210>)
 8000b1e:	f00d fbbf 	bl	800e2a0 <HAL_UART_Transmit>
	hk_seq++;
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <send_hk_packet+0x20c>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <send_hk_packet+0x20c>)
 8000b2c:	801a      	strh	r2, [r3, #0]

}
 8000b2e:	bf00      	nop
 8000b30:	3738      	adds	r7, #56	; 0x38
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2400065c 	.word	0x2400065c
 8000b3c:	2400051c 	.word	0x2400051c

08000b40 <send_pmt_packet>:
/**
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t *pmt_spi) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;						// PMT SYNC MSB 0xBB
 8000b48:	23bb      	movs	r3, #187	; 0xbb
 8000b4a:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;						// PMT SYNC LSB 0xBB
 8000b4c:	23bb      	movs	r3, #187	; 0xbb
 8000b4e:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);		// PMT SEQ # MSB
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <send_pmt_packet+0x54>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);				// PMT SEQ # LSB
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <send_pmt_packet+0x54>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];					// PMT eADC MSB
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];					// PMT eADC LSB
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	785b      	ldrb	r3, [r3, #1]
 8000b6e:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000b70:	f107 0108 	add.w	r1, r7, #8
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	2206      	movs	r2, #6
 8000b78:	4807      	ldr	r0, [pc, #28]	; (8000b98 <send_pmt_packet+0x58>)
 8000b7a:	f00d fb91 	bl	800e2a0 <HAL_UART_Transmit>
	pmt_seq++;
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <send_pmt_packet+0x54>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <send_pmt_packet+0x54>)
 8000b88:	801a      	strh	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2400065a 	.word	0x2400065a
 8000b98:	2400051c 	.word	0x2400051c

08000b9c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b0a7      	sub	sp, #156	; 0x9c
 8000ba0:	af1e      	add	r7, sp, #120	; 0x78
 8000ba2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a39      	ldr	r2, [pc, #228]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d147      	bne.n	8000c3c <HAL_TIM_OC_DelayElapsedCallback+0xa0>
		if (ERPA_ON) {
 8000bac:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d027      	beq.n	8000c04 <HAL_TIM_OC_DelayElapsedCallback+0x68>
			SWP_FACTOR_COUNTER++;
 8000bb4:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4a36      	ldr	r2, [pc, #216]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000bbc:	6013      	str	r3, [r2, #0]

			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8000bbe:	bf00      	nop
 8000bc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc4:	4834      	ldr	r0, [pc, #208]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000bc6:	f006 fe45 	bl	8007854 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1f7      	bne.n	8000bc0 <HAL_TIM_OC_DelayElapsedCallback+0x24>
			}

			uint8_t *spi2_results = spi(hspi2);
 8000bd0:	4c32      	ldr	r4, [pc, #200]	; (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000bd2:	4668      	mov	r0, sp
 8000bd4:	f104 0310 	add.w	r3, r4, #16
 8000bd8:	2278      	movs	r2, #120	; 0x78
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f00f ff78 	bl	8010ad0 <memcpy>
 8000be0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000be4:	f7ff fd94 	bl	8000710 <spi>
 8000be8:	61b8      	str	r0, [r7, #24]
			uint16_t *erpa_adc_results = erpa_adc();
 8000bea:	f7ff fdbf 	bl	800076c <erpa_adc>
 8000bee:	6178      	str	r0, [r7, #20]
//					set_erpa_sweep();
//				}
//				SWP_FACTOR_COUNTER = 0;
//			}

			send_erpa_packet(spi2_results, erpa_adc_results);
 8000bf0:	6979      	ldr	r1, [r7, #20]
 8000bf2:	69b8      	ldr	r0, [r7, #24]
 8000bf4:	f7ff fe4e 	bl	8000894 <send_erpa_packet>

			free(spi2_results);
 8000bf8:	69b8      	ldr	r0, [r7, #24]
 8000bfa:	f00f ff61 	bl	8010ac0 <free>
			free(erpa_adc_results);
 8000bfe:	6978      	ldr	r0, [r7, #20]
 8000c00:	f00f ff5e 	bl	8010ac0 <free>
		}
		if (HK_ON) {
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d03b      	beq.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
			int16_t *i2c_values = i2c();
 8000c0c:	f7ff fd4c 	bl	80006a8 <i2c>
 8000c10:	6138      	str	r0, [r7, #16]
			uint16_t *hk_adc1_results = hk_adc1();
 8000c12:	f7ff fdc7 	bl	80007a4 <hk_adc1>
 8000c16:	60f8      	str	r0, [r7, #12]
			uint16_t *hk_adc3_results = hk_adc3();
 8000c18:	f7ff fe12 	bl	8000840 <hk_adc3>
 8000c1c:	60b8      	str	r0, [r7, #8]

			send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	68f9      	ldr	r1, [r7, #12]
 8000c22:	6938      	ldr	r0, [r7, #16]
 8000c24:	f7ff fe82 	bl	800092c <send_hk_packet>

			free(i2c_values);
 8000c28:	6938      	ldr	r0, [r7, #16]
 8000c2a:	f00f ff49 	bl	8010ac0 <free>
			free(hk_adc1_results);
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f00f ff46 	bl	8010ac0 <free>
			free(hk_adc3_results);
 8000c34:	68b8      	ldr	r0, [r7, #8]
 8000c36:	f00f ff43 	bl	8010ac0 <free>
			send_pmt_packet(spi1_results);

			free(spi1_results);
		}
	}
}
 8000c3a:	e023      	b.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
	} else if (htim == &htim1) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d11f      	bne.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
		if (PMT_ON) {
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d01b      	beq.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
			while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000c4c:	bf00      	nop
 8000c4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c52:	4816      	ldr	r0, [pc, #88]	; (8000cac <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000c54:	f006 fdfe 	bl	8007854 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f7      	bne.n	8000c4e <HAL_TIM_OC_DelayElapsedCallback+0xb2>
			uint8_t *spi1_results = spi(hspi1);
 8000c5e:	4c14      	ldr	r4, [pc, #80]	; (8000cb0 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000c60:	4668      	mov	r0, sp
 8000c62:	f104 0310 	add.w	r3, r4, #16
 8000c66:	2278      	movs	r2, #120	; 0x78
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f00f ff31 	bl	8010ad0 <memcpy>
 8000c6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c72:	f7ff fd4d 	bl	8000710 <spi>
 8000c76:	61f8      	str	r0, [r7, #28]
			send_pmt_packet(spi1_results);
 8000c78:	69f8      	ldr	r0, [r7, #28]
 8000c7a:	f7ff ff61 	bl	8000b40 <send_pmt_packet>
			free(spi1_results);
 8000c7e:	69f8      	ldr	r0, [r7, #28]
 8000c80:	f00f ff1e 	bl	8010ac0 <free>
}
 8000c84:	bf00      	nop
 8000c86:	3724      	adds	r7, #36	; 0x24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	240004d0 	.word	0x240004d0
 8000c90:	2400065f 	.word	0x2400065f
 8000c94:	24000654 	.word	0x24000654
 8000c98:	58020400 	.word	0x58020400
 8000c9c:	240003fc 	.word	0x240003fc
 8000ca0:	24000660 	.word	0x24000660
 8000ca4:	24000484 	.word	0x24000484
 8000ca8:	2400065e 	.word	0x2400065e
 8000cac:	58020000 	.word	0x58020000
 8000cb0:	24000374 	.word	0x24000374

08000cb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	49b6      	ldr	r1, [pc, #728]	; (8000f98 <HAL_UART_RxCpltCallback+0x2e4>)
 8000cc0:	48b6      	ldr	r0, [pc, #728]	; (8000f9c <HAL_UART_RxCpltCallback+0x2e8>)
 8000cc2:	f00d fb7b 	bl	800e3bc <HAL_UART_Receive_IT>
	unsigned char key = rx_buf[0];
 8000cc6:	4bb4      	ldr	r3, [pc, #720]	; (8000f98 <HAL_UART_RxCpltCallback+0x2e4>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b25      	cmp	r3, #37	; 0x25
 8000cd0:	f200 815d 	bhi.w	8000f8e <HAL_UART_RxCpltCallback+0x2da>
 8000cd4:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <HAL_UART_RxCpltCallback+0x28>)
 8000cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cda:	bf00      	nop
 8000cdc:	08000e31 	.word	0x08000e31
 8000ce0:	08000e4d 	.word	0x08000e4d
 8000ce4:	08000e69 	.word	0x08000e69
 8000ce8:	08000e89 	.word	0x08000e89
 8000cec:	08000ea9 	.word	0x08000ea9
 8000cf0:	08000ec5 	.word	0x08000ec5
 8000cf4:	08000ee5 	.word	0x08000ee5
 8000cf8:	08000f05 	.word	0x08000f05
 8000cfc:	08000f8f 	.word	0x08000f8f
 8000d00:	08000f8f 	.word	0x08000f8f
 8000d04:	08000d83 	.word	0x08000d83
 8000d08:	08000d75 	.word	0x08000d75
 8000d0c:	08000f21 	.word	0x08000f21
 8000d10:	08000f31 	.word	0x08000f31
 8000d14:	08000f51 	.word	0x08000f51
 8000d18:	08000f71 	.word	0x08000f71
 8000d1c:	08000f41 	.word	0x08000f41
 8000d20:	08000f61 	.word	0x08000f61
 8000d24:	08000f79 	.word	0x08000f79
 8000d28:	08000e3f 	.word	0x08000e3f
 8000d2c:	08000e5b 	.word	0x08000e5b
 8000d30:	08000e79 	.word	0x08000e79
 8000d34:	08000e99 	.word	0x08000e99
 8000d38:	08000eb7 	.word	0x08000eb7
 8000d3c:	08000ed5 	.word	0x08000ed5
 8000d40:	08000ef5 	.word	0x08000ef5
 8000d44:	08000f13 	.word	0x08000f13
 8000d48:	08000d91 	.word	0x08000d91
 8000d4c:	08000da9 	.word	0x08000da9
 8000d50:	08000dc1 	.word	0x08000dc1
 8000d54:	08000f8f 	.word	0x08000f8f
 8000d58:	08000f8f 	.word	0x08000f8f
 8000d5c:	08000f8f 	.word	0x08000f8f
 8000d60:	08000f8f 	.word	0x08000f8f
 8000d64:	08000f8f 	.word	0x08000f8f
 8000d68:	08000f8f 	.word	0x08000f8f
 8000d6c:	08000de5 	.word	0x08000de5
 8000d70:	08000e07 	.word	0x08000e07
	case 0x0B: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000d74:	4b8a      	ldr	r3, [pc, #552]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000d76:	2104      	movs	r1, #4
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f006 fd82 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000d80:	e105      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x0A: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000d82:	4b87      	ldr	r3, [pc, #540]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000d84:	2104      	movs	r1, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f006 fd7b 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000d8e:	e0fe      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x1B: {
		if (step < 9) {
 8000d90:	4b84      	ldr	r3, [pc, #528]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	f200 80f3 	bhi.w	8000f80 <HAL_UART_RxCpltCallback+0x2cc>
			step++;
 8000d9a:	4b82      	ldr	r3, [pc, #520]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b80      	ldr	r3, [pc, #512]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000da4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000da6:	e0eb      	b.n	8000f80 <HAL_UART_RxCpltCallback+0x2cc>
	}
	case 0x1C: {
		if (step > 0) {
 8000da8:	4b7e      	ldr	r3, [pc, #504]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f000 80e9 	beq.w	8000f84 <HAL_UART_RxCpltCallback+0x2d0>
			step--;
 8000db2:	4b7c      	ldr	r3, [pc, #496]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b7a      	ldr	r3, [pc, #488]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000dbc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000dbe:	e0e1      	b.n	8000f84 <HAL_UART_RxCpltCallback+0x2d0>
	}
	case 0x1D: {
		if (!auto_sweep) {
 8000dc0:	4b79      	ldr	r3, [pc, #484]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2f4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d106      	bne.n	8000dd6 <HAL_UART_RxCpltCallback+0x122>
			auto_sweep = 1;
 8000dc8:	4b77      	ldr	r3, [pc, #476]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2f4>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]
			step = 0;
 8000dce:	4b75      	ldr	r3, [pc, #468]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
		} else {
			auto_sweep = 0;
			step = 0;
		}
		break;
 8000dd4:	e0db      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
			auto_sweep = 0;
 8000dd6:	4b74      	ldr	r3, [pc, #464]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2f4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
			step = 0;
 8000ddc:	4b71      	ldr	r3, [pc, #452]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
		break;
 8000de2:	e0d4      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x24: {
		if (SAMPLING_FACTOR < 32) {
 8000de4:	4b71      	ldr	r3, [pc, #452]	; (8000fac <HAL_UART_RxCpltCallback+0x2f8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b1f      	cmp	r3, #31
 8000dea:	f300 80cd 	bgt.w	8000f88 <HAL_UART_RxCpltCallback+0x2d4>
			SAMPLING_FACTOR *= 2;
 8000dee:	4b6f      	ldr	r3, [pc, #444]	; (8000fac <HAL_UART_RxCpltCallback+0x2f8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4a6d      	ldr	r2, [pc, #436]	; (8000fac <HAL_UART_RxCpltCallback+0x2f8>)
 8000df6:	6013      	str	r3, [r2, #0]
			FACTOR_COUNTER = 0;
 8000df8:	4b6d      	ldr	r3, [pc, #436]	; (8000fb0 <HAL_UART_RxCpltCallback+0x2fc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
			SWP_FACTOR_COUNTER = 0;
 8000dfe:	4b6d      	ldr	r3, [pc, #436]	; (8000fb4 <HAL_UART_RxCpltCallback+0x300>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e04:	e0c0      	b.n	8000f88 <HAL_UART_RxCpltCallback+0x2d4>
	}
	case 0x25: {
		if (SAMPLING_FACTOR > 1) {
 8000e06:	4b69      	ldr	r3, [pc, #420]	; (8000fac <HAL_UART_RxCpltCallback+0x2f8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	f340 80be 	ble.w	8000f8c <HAL_UART_RxCpltCallback+0x2d8>
			SAMPLING_FACTOR /= 2;
 8000e10:	4b66      	ldr	r3, [pc, #408]	; (8000fac <HAL_UART_RxCpltCallback+0x2f8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	da00      	bge.n	8000e1a <HAL_UART_RxCpltCallback+0x166>
 8000e18:	3301      	adds	r3, #1
 8000e1a:	105b      	asrs	r3, r3, #1
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b63      	ldr	r3, [pc, #396]	; (8000fac <HAL_UART_RxCpltCallback+0x2f8>)
 8000e20:	601a      	str	r2, [r3, #0]
			FACTOR_COUNTER = 0;
 8000e22:	4b63      	ldr	r3, [pc, #396]	; (8000fb0 <HAL_UART_RxCpltCallback+0x2fc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
			SWP_FACTOR_COUNTER = 0;
 8000e28:	4b62      	ldr	r3, [pc, #392]	; (8000fb4 <HAL_UART_RxCpltCallback+0x300>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e2e:	e0ad      	b.n	8000f8c <HAL_UART_RxCpltCallback+0x2d8>
	}
	case 0x00: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000e30:	4b5b      	ldr	r3, [pc, #364]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e32:	2120      	movs	r1, #32
 8000e34:	2201      	movs	r2, #1
 8000e36:	4618      	mov	r0, r3
 8000e38:	f006 fd24 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000e3c:	e0a7      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x13: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000e3e:	4b58      	ldr	r3, [pc, #352]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e40:	2120      	movs	r1, #32
 8000e42:	2200      	movs	r2, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f006 fd1d 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000e4a:	e0a0      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x01: {

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000e4c:	4b54      	ldr	r3, [pc, #336]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e4e:	2140      	movs	r1, #64	; 0x40
 8000e50:	2201      	movs	r2, #1
 8000e52:	4618      	mov	r0, r3
 8000e54:	f006 fd16 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000e58:	e099      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x14: {
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000e5a:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e5c:	2140      	movs	r1, #64	; 0x40
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f006 fd0f 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000e66:	e092      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x02: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000e68:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4618      	mov	r0, r3
 8000e72:	f006 fd07 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000e76:	e08a      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x15: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000e78:	4b4f      	ldr	r3, [pc, #316]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000e7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f006 fcff 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000e86:	e082      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x03: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000e88:	4b4b      	ldr	r3, [pc, #300]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4618      	mov	r0, r3
 8000e92:	f006 fcf7 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000e96:	e07a      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x16: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000e98:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 fcef 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000ea6:	e072      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x04: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ea8:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000eaa:	2180      	movs	r1, #128	; 0x80
 8000eac:	2201      	movs	r2, #1
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f006 fce8 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000eb4:	e06b      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x17: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000eb6:	4b40      	ldr	r3, [pc, #256]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f006 fce1 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000ec2:	e064      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x05: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000ec4:	4b3c      	ldr	r3, [pc, #240]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f006 fcd9 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000ed2:	e05c      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x18: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ed4:	4b38      	ldr	r3, [pc, #224]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eda:	2200      	movs	r2, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f006 fcd1 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000ee2:	e054      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x06: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ee4:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eea:	2201      	movs	r2, #1
 8000eec:	4618      	mov	r0, r3
 8000eee:	f006 fcc9 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000ef2:	e04c      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x19: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ef4:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efa:	2200      	movs	r2, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f006 fcc1 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000f02:	e044      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x07: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000f04:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000f06:	2140      	movs	r1, #64	; 0x40
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f006 fcba 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000f10:	e03d      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x1A: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000f14:	2140      	movs	r1, #64	; 0x40
 8000f16:	2200      	movs	r2, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f006 fcb3 	bl	8007884 <HAL_GPIO_WritePin>
		break;
 8000f1e:	e036      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x0C: {
		HAL_SuspendTick();
 8000f20:	f001 fc8a 	bl	8002838 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000f24:	2101      	movs	r1, #1
 8000f26:	2001      	movs	r0, #1
 8000f28:	f007 faae 	bl	8008488 <HAL_PWR_EnterSTOPMode>
		NVIC_SystemReset();
 8000f2c:	f7ff fb56 	bl	80005dc <__NVIC_SystemReset>
		break;
	}
	case 0x0D: {
		PMT_ON = 1;
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <HAL_UART_RxCpltCallback+0x308>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f36:	2100      	movs	r1, #0
 8000f38:	4821      	ldr	r0, [pc, #132]	; (8000fc0 <HAL_UART_RxCpltCallback+0x30c>)
 8000f3a:	f00b fd17 	bl	800c96c <HAL_TIM_OC_Start_IT>
		break;
 8000f3e:	e026      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x10: {
		PMT_ON = 0;
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <HAL_UART_RxCpltCallback+0x308>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000f46:	2100      	movs	r1, #0
 8000f48:	481d      	ldr	r0, [pc, #116]	; (8000fc0 <HAL_UART_RxCpltCallback+0x30c>)
 8000f4a:	f00b fe69 	bl	800cc20 <HAL_TIM_OC_Stop_IT>

		break;
 8000f4e:	e01e      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x0E: {
		ERPA_ON = 1;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_UART_RxCpltCallback+0x310>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000f56:	210c      	movs	r1, #12
 8000f58:	481b      	ldr	r0, [pc, #108]	; (8000fc8 <HAL_UART_RxCpltCallback+0x314>)
 8000f5a:	f00b fd07 	bl	800c96c <HAL_TIM_OC_Start_IT>
		break;
 8000f5e:	e016      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x11: {
		ERPA_ON = 0;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_UART_RxCpltCallback+0x310>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000f66:	210c      	movs	r1, #12
 8000f68:	4817      	ldr	r0, [pc, #92]	; (8000fc8 <HAL_UART_RxCpltCallback+0x314>)
 8000f6a:	f00b fe59 	bl	800cc20 <HAL_TIM_OC_Stop_IT>

		break;
 8000f6e:	e00e      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x0F: {
		HK_ON = 1;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_UART_RxCpltCallback+0x318>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
		break;
 8000f76:	e00a      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x12: {
		HK_ON = 0;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_UART_RxCpltCallback+0x318>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
		break;
 8000f7e:	e006      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
		break;
 8000f80:	bf00      	nop
 8000f82:	e004      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
		break;
 8000f84:	bf00      	nop
 8000f86:	e002      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
		break;
 8000f88:	bf00      	nop
 8000f8a:	e000      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x2da>
		break;
 8000f8c:	bf00      	nop
	}
	}
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	240005b0 	.word	0x240005b0
 8000f9c:	2400051c 	.word	0x2400051c
 8000fa0:	58020400 	.word	0x58020400
 8000fa4:	24000648 	.word	0x24000648
 8000fa8:	2400064c 	.word	0x2400064c
 8000fac:	24000040 	.word	0x24000040
 8000fb0:	24000650 	.word	0x24000650
 8000fb4:	24000654 	.word	0x24000654
 8000fb8:	58020800 	.word	0x58020800
 8000fbc:	2400065e 	.word	0x2400065e
 8000fc0:	24000484 	.word	0x24000484
 8000fc4:	2400065f 	.word	0x2400065f
 8000fc8:	240004d0 	.word	0x240004d0
 8000fcc:	24000660 	.word	0x24000660

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd6:	f001 fb9d 	bl	8002714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f899 	bl	8001110 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fde:	f000 f91b 	bl	8001218 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
	MX_GPIO_Init();
 8000fe2:	f000 fda1 	bl	8001b28 <MX_GPIO_Init>
	MX_DAC1_Init();
 8000fe6:	f000 fafb 	bl	80015e0 <MX_DAC1_Init>
	MX_TIM1_Init();
 8000fea:	f000 fc1b 	bl	8001824 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000fee:	f000 fca9 	bl	8001944 <MX_TIM2_Init>
	MX_I2C1_Init();
 8000ff2:	f000 fb27 	bl	8001644 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000ff6:	f000 fb65 	bl	80016c4 <MX_SPI1_Init>
	MX_DMA_Init();
 8000ffa:	f000 fd65 	bl	8001ac8 <MX_DMA_Init>
	MX_ADC1_Init();
 8000ffe:	f000 f93b 	bl	8001278 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8001002:	f000 fd15 	bl	8001a30 <MX_USART1_UART_Init>
	MX_ADC3_Init();
 8001006:	f000 fa59 	bl	80014bc <MX_ADC3_Init>
	MX_SPI2_Init();
 800100a:	f000 fbb3 	bl	8001774 <MX_SPI2_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100e:	f000 fd8b 	bl	8001b28 <MX_GPIO_Init>
  MX_DMA_Init();
 8001012:	f000 fd59 	bl	8001ac8 <MX_DMA_Init>
  MX_DAC1_Init();
 8001016:	f000 fae3 	bl	80015e0 <MX_DAC1_Init>
  MX_ADC1_Init();
 800101a:	f000 f92d 	bl	8001278 <MX_ADC1_Init>
  MX_ADC3_Init();
 800101e:	f000 fa4d 	bl	80014bc <MX_ADC3_Init>
  MX_TIM2_Init();
 8001022:	f000 fc8f 	bl	8001944 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001026:	f000 fbfd 	bl	8001824 <MX_TIM1_Init>
  MX_I2C1_Init();
 800102a:	f000 fb0b 	bl	8001644 <MX_I2C1_Init>
  MX_SPI1_Init();
 800102e:	f000 fb49 	bl	80016c4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001032:	f000 fb9f 	bl	8001774 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001036:	f000 fcfb 	bl	8001a30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TIM2->CCR4 = 312;
 800103a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800103e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001044:	210c      	movs	r1, #12
 8001046:	4829      	ldr	r0, [pc, #164]	; (80010ec <main+0x11c>)
 8001048:	f00b ff26 	bl	800ce98 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim2);
 800104c:	4827      	ldr	r0, [pc, #156]	; (80010ec <main+0x11c>)
 800104e:	f00b fc1d 	bl	800c88c <HAL_TIM_Base_Start>

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, SIZE, DAC_ALIGN_12B_R);
 8001052:	2300      	movs	r3, #0
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2310      	movs	r3, #16
 8001058:	4a25      	ldr	r2, [pc, #148]	; (80010f0 <main+0x120>)
 800105a:	2100      	movs	r1, #0
 800105c:	4825      	ldr	r0, [pc, #148]	; (80010f4 <main+0x124>)
 800105e:	f003 f963 	bl	8004328 <HAL_DAC_Start_DMA>


  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001062:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001066:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800106a:	4823      	ldr	r0, [pc, #140]	; (80010f8 <main+0x128>)
 800106c:	f002 fee8 	bl	8003e40 <HAL_ADCEx_Calibration_Start>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <main+0xaa>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 8001076:	f000 fdd1 	bl	8001c1c <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1Data,
 800107a:	220b      	movs	r2, #11
 800107c:	491f      	ldr	r1, [pc, #124]	; (80010fc <main+0x12c>)
 800107e:	481e      	ldr	r0, [pc, #120]	; (80010f8 <main+0x128>)
 8001080:	f001 ffbc 	bl	8002ffc <HAL_ADC_Start_DMA>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <main+0xbe>
  	ADC1NumChannels) != HAL_OK) {
  		Error_Handler();
 800108a:	f000 fdc7 	bl	8001c1c <Error_Handler>
  	}

  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800108e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001092:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001096:	481a      	ldr	r0, [pc, #104]	; (8001100 <main+0x130>)
 8001098:	f002 fed2 	bl	8003e40 <HAL_ADCEx_Calibration_Start>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <main+0xd6>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 80010a2:	f000 fdbb 	bl	8001c1c <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3Data,
 80010a6:	2204      	movs	r2, #4
 80010a8:	4916      	ldr	r1, [pc, #88]	; (8001104 <main+0x134>)
 80010aa:	4815      	ldr	r0, [pc, #84]	; (8001100 <main+0x130>)
 80010ac:	f001 ffa6 	bl	8002ffc <HAL_ADC_Start_DMA>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <main+0xea>
  	ADC3NumChannels) != HAL_OK) {
  		Error_Handler();
 80010b6:	f000 fdb1 	bl	8001c1c <Error_Handler>
  	}

  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET)
 80010ba:	bf00      	nop
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <main+0x138>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ca:	d0f7      	beq.n	80010bc <main+0xec>
  		;
  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET)
 80010cc:	bf00      	nop
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <main+0x138>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010dc:	d1f7      	bne.n	80010ce <main+0xfe>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80010de:	2201      	movs	r2, #1
 80010e0:	490a      	ldr	r1, [pc, #40]	; (800110c <main+0x13c>)
 80010e2:	4809      	ldr	r0, [pc, #36]	; (8001108 <main+0x138>)
 80010e4:	f00d f96a 	bl	800e3bc <HAL_UART_Receive_IT>
 80010e8:	e7f9      	b.n	80010de <main+0x10e>
 80010ea:	bf00      	nop
 80010ec:	240004d0 	.word	0x240004d0
 80010f0:	24000000 	.word	0x24000000
 80010f4:	24000294 	.word	0x24000294
 80010f8:	240000dc 	.word	0x240000dc
 80010fc:	24000620 	.word	0x24000620
 8001100:	24000140 	.word	0x24000140
 8001104:	24000640 	.word	0x24000640
 8001108:	2400051c 	.word	0x2400051c
 800110c:	240005b0 	.word	0x240005b0

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b09c      	sub	sp, #112	; 0x70
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	224c      	movs	r2, #76	; 0x4c
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f00f fce4 	bl	8010aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2220      	movs	r2, #32
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f00f fcde 	bl	8010aec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001130:	2002      	movs	r0, #2
 8001132:	f007 f9e5 	bl	8008500 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	4b34      	ldr	r3, [pc, #208]	; (800120c <SystemClock_Config+0xfc>)
 800113c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113e:	4a33      	ldr	r2, [pc, #204]	; (800120c <SystemClock_Config+0xfc>)
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001146:	4b31      	ldr	r3, [pc, #196]	; (800120c <SystemClock_Config+0xfc>)
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <SystemClock_Config+0x100>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001158:	4a2d      	ldr	r2, [pc, #180]	; (8001210 <SystemClock_Config+0x100>)
 800115a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <SystemClock_Config+0x100>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800116c:	bf00      	nop
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <SystemClock_Config+0x100>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800117a:	d1f8      	bne.n	800116e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <SystemClock_Config+0x104>)
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	4a24      	ldr	r2, [pc, #144]	; (8001214 <SystemClock_Config+0x104>)
 8001182:	f023 0303 	bic.w	r3, r3, #3
 8001186:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001188:	2302      	movs	r3, #2
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800118c:	2301      	movs	r3, #1
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001190:	2340      	movs	r3, #64	; 0x40
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001198:	2300      	movs	r3, #0
 800119a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800119c:	2304      	movs	r3, #4
 800119e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80011a0:	230c      	movs	r3, #12
 80011a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80011a4:	2304      	movs	r3, #4
 80011a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011b0:	230c      	movs	r3, #12
 80011b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	4618      	mov	r0, r3
 80011c2:	f007 f9d7 	bl	8008574 <HAL_RCC_OscConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011cc:	f000 fd26 	bl	8001c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d0:	233f      	movs	r3, #63	; 0x3f
 80011d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d4:	2303      	movs	r3, #3
 80011d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2101      	movs	r1, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f007 fe17 	bl	8008e28 <HAL_RCC_ClockConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001200:	f000 fd0c 	bl	8001c1c <Error_Handler>
  }
}
 8001204:	bf00      	nop
 8001206:	3770      	adds	r7, #112	; 0x70
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	58000400 	.word	0x58000400
 8001210:	58024800 	.word	0x58024800
 8001214:	58024400 	.word	0x58024400

08001218 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0b0      	sub	sp, #192	; 0xc0
 800121c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121e:	463b      	mov	r3, r7
 8001220:	22c0      	movs	r2, #192	; 0xc0
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f00f fc61 	bl	8010aec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800122a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001236:	2304      	movs	r3, #4
 8001238:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800123a:	2309      	movs	r3, #9
 800123c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800123e:	2304      	movs	r3, #4
 8001240:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001242:	2302      	movs	r3, #2
 8001244:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001246:	2302      	movs	r3, #2
 8001248:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800124a:	23c0      	movs	r3, #192	; 0xc0
 800124c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800124e:	2320      	movs	r3, #32
 8001250:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001252:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	4618      	mov	r0, r3
 8001262:	f008 f96d 	bl	8009540 <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 800126c:	f000 fcd6 	bl	8001c1c <Error_Handler>
  }
}
 8001270:	bf00      	nop
 8001272:	37c0      	adds	r7, #192	; 0xc0
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	463b      	mov	r3, r7
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	615a      	str	r2, [r3, #20]
 800129a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800129c:	4b7a      	ldr	r3, [pc, #488]	; (8001488 <MX_ADC1_Init+0x210>)
 800129e:	4a7b      	ldr	r2, [pc, #492]	; (800148c <MX_ADC1_Init+0x214>)
 80012a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012a2:	4b79      	ldr	r3, [pc, #484]	; (8001488 <MX_ADC1_Init+0x210>)
 80012a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012aa:	4b77      	ldr	r3, [pc, #476]	; (8001488 <MX_ADC1_Init+0x210>)
 80012ac:	2208      	movs	r2, #8
 80012ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012b0:	4b75      	ldr	r3, [pc, #468]	; (8001488 <MX_ADC1_Init+0x210>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b6:	4b74      	ldr	r3, [pc, #464]	; (8001488 <MX_ADC1_Init+0x210>)
 80012b8:	2204      	movs	r2, #4
 80012ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012bc:	4b72      	ldr	r3, [pc, #456]	; (8001488 <MX_ADC1_Init+0x210>)
 80012be:	2200      	movs	r2, #0
 80012c0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012c2:	4b71      	ldr	r3, [pc, #452]	; (8001488 <MX_ADC1_Init+0x210>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80012c8:	4b6f      	ldr	r3, [pc, #444]	; (8001488 <MX_ADC1_Init+0x210>)
 80012ca:	220b      	movs	r2, #11
 80012cc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ce:	4b6e      	ldr	r3, [pc, #440]	; (8001488 <MX_ADC1_Init+0x210>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d4:	4b6c      	ldr	r3, [pc, #432]	; (8001488 <MX_ADC1_Init+0x210>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012da:	4b6b      	ldr	r3, [pc, #428]	; (8001488 <MX_ADC1_Init+0x210>)
 80012dc:	2200      	movs	r2, #0
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012e0:	4b69      	ldr	r3, [pc, #420]	; (8001488 <MX_ADC1_Init+0x210>)
 80012e2:	2203      	movs	r2, #3
 80012e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012e6:	4b68      	ldr	r3, [pc, #416]	; (8001488 <MX_ADC1_Init+0x210>)
 80012e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012ee:	4b66      	ldr	r3, [pc, #408]	; (8001488 <MX_ADC1_Init+0x210>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012f4:	4b64      	ldr	r3, [pc, #400]	; (8001488 <MX_ADC1_Init+0x210>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012fc:	4862      	ldr	r0, [pc, #392]	; (8001488 <MX_ADC1_Init+0x210>)
 80012fe:	f001 fcdb 	bl	8002cb8 <HAL_ADC_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001308:	f000 fc88 	bl	8001c1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	485c      	ldr	r0, [pc, #368]	; (8001488 <MX_ADC1_Init+0x210>)
 8001318:	f002 fdf6 	bl	8003f08 <HAL_ADCEx_MultiModeConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001322:	f000 fc7b 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001326:	4b5a      	ldr	r3, [pc, #360]	; (8001490 <MX_ADC1_Init+0x218>)
 8001328:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800132a:	2306      	movs	r3, #6
 800132c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800132e:	2307      	movs	r3, #7
 8001330:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001332:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001336:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001338:	2304      	movs	r3, #4
 800133a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	484f      	ldr	r0, [pc, #316]	; (8001488 <MX_ADC1_Init+0x210>)
 800134a:	f001 ff39 	bl	80031c0 <HAL_ADC_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001354:	f000 fc62 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001358:	4b4e      	ldr	r3, [pc, #312]	; (8001494 <MX_ADC1_Init+0x21c>)
 800135a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800135c:	230c      	movs	r3, #12
 800135e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001360:	463b      	mov	r3, r7
 8001362:	4619      	mov	r1, r3
 8001364:	4848      	ldr	r0, [pc, #288]	; (8001488 <MX_ADC1_Init+0x210>)
 8001366:	f001 ff2b 	bl	80031c0 <HAL_ADC_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001370:	f000 fc54 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001374:	4b48      	ldr	r3, [pc, #288]	; (8001498 <MX_ADC1_Init+0x220>)
 8001376:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001378:	2312      	movs	r3, #18
 800137a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	4619      	mov	r1, r3
 8001380:	4841      	ldr	r0, [pc, #260]	; (8001488 <MX_ADC1_Init+0x210>)
 8001382:	f001 ff1d 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 800138c:	f000 fc46 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001390:	4b42      	ldr	r3, [pc, #264]	; (800149c <MX_ADC1_Init+0x224>)
 8001392:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001394:	2318      	movs	r3, #24
 8001396:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	483a      	ldr	r0, [pc, #232]	; (8001488 <MX_ADC1_Init+0x210>)
 800139e:	f001 ff0f 	bl	80031c0 <HAL_ADC_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80013a8:	f000 fc38 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013ac:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <MX_ADC1_Init+0x228>)
 80013ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b6:	463b      	mov	r3, r7
 80013b8:	4619      	mov	r1, r3
 80013ba:	4833      	ldr	r0, [pc, #204]	; (8001488 <MX_ADC1_Init+0x210>)
 80013bc:	f001 ff00 	bl	80031c0 <HAL_ADC_ConfigChannel>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80013c6:	f000 fc29 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013ca:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <MX_ADC1_Init+0x22c>)
 80013cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013ce:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	482b      	ldr	r0, [pc, #172]	; (8001488 <MX_ADC1_Init+0x210>)
 80013da:	f001 fef1 	bl	80031c0 <HAL_ADC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013e4:	f000 fc1a 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <MX_ADC1_Init+0x230>)
 80013ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013ec:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	4619      	mov	r1, r3
 80013f6:	4824      	ldr	r0, [pc, #144]	; (8001488 <MX_ADC1_Init+0x210>)
 80013f8:	f001 fee2 	bl	80031c0 <HAL_ADC_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001402:	f000 fc0b 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <MX_ADC1_Init+0x234>)
 8001408:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800140a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800140e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	481c      	ldr	r0, [pc, #112]	; (8001488 <MX_ADC1_Init+0x210>)
 8001416:	f001 fed3 	bl	80031c0 <HAL_ADC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001420:	f000 fbfc 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <MX_ADC1_Init+0x238>)
 8001426:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001428:	f44f 738c 	mov.w	r3, #280	; 0x118
 800142c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142e:	463b      	mov	r3, r7
 8001430:	4619      	mov	r1, r3
 8001432:	4815      	ldr	r0, [pc, #84]	; (8001488 <MX_ADC1_Init+0x210>)
 8001434:	f001 fec4 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800143e:	f000 fbed 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_ADC1_Init+0x23c>)
 8001444:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144c:	463b      	mov	r3, r7
 800144e:	4619      	mov	r1, r3
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_ADC1_Init+0x210>)
 8001452:	f001 feb5 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 800145c:	f000 fbde 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_ADC1_Init+0x240>)
 8001462:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001464:	f240 2306 	movw	r3, #518	; 0x206
 8001468:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_ADC1_Init+0x210>)
 8001470:	f001 fea6 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800147a:	f000 fbcf 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	240000dc 	.word	0x240000dc
 800148c:	40022000 	.word	0x40022000
 8001490:	0c900008 	.word	0x0c900008
 8001494:	10c00010 	.word	0x10c00010
 8001498:	14f00020 	.word	0x14f00020
 800149c:	1d500080 	.word	0x1d500080
 80014a0:	21800100 	.word	0x21800100
 80014a4:	25b00200 	.word	0x25b00200
 80014a8:	2a000400 	.word	0x2a000400
 80014ac:	2e300800 	.word	0x2e300800
 80014b0:	3ac04000 	.word	0x3ac04000
 80014b4:	3ef08000 	.word	0x3ef08000
 80014b8:	47520000 	.word	0x47520000

080014bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]
 80014d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014d4:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <MX_ADC3_Init+0x110>)
 80014d6:	4a3e      	ldr	r2, [pc, #248]	; (80015d0 <MX_ADC3_Init+0x114>)
 80014d8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014da:	4b3c      	ldr	r3, [pc, #240]	; (80015cc <MX_ADC3_Init+0x110>)
 80014dc:	2208      	movs	r2, #8
 80014de:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014e0:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <MX_ADC3_Init+0x110>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e6:	4b39      	ldr	r3, [pc, #228]	; (80015cc <MX_ADC3_Init+0x110>)
 80014e8:	2204      	movs	r2, #4
 80014ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014ec:	4b37      	ldr	r3, [pc, #220]	; (80015cc <MX_ADC3_Init+0x110>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014f2:	4b36      	ldr	r3, [pc, #216]	; (80015cc <MX_ADC3_Init+0x110>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014f8:	4b34      	ldr	r3, [pc, #208]	; (80015cc <MX_ADC3_Init+0x110>)
 80014fa:	2204      	movs	r2, #4
 80014fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014fe:	4b33      	ldr	r3, [pc, #204]	; (80015cc <MX_ADC3_Init+0x110>)
 8001500:	2200      	movs	r2, #0
 8001502:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001504:	4b31      	ldr	r3, [pc, #196]	; (80015cc <MX_ADC3_Init+0x110>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800150a:	4b30      	ldr	r3, [pc, #192]	; (80015cc <MX_ADC3_Init+0x110>)
 800150c:	2200      	movs	r2, #0
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001510:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <MX_ADC3_Init+0x110>)
 8001512:	2203      	movs	r2, #3
 8001514:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <MX_ADC3_Init+0x110>)
 8001518:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800151e:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <MX_ADC3_Init+0x110>)
 8001520:	2200      	movs	r2, #0
 8001522:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001524:	4b29      	ldr	r3, [pc, #164]	; (80015cc <MX_ADC3_Init+0x110>)
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800152c:	4827      	ldr	r0, [pc, #156]	; (80015cc <MX_ADC3_Init+0x110>)
 800152e:	f001 fbc3 	bl	8002cb8 <HAL_ADC_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001538:	f000 fb70 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <MX_ADC3_Init+0x118>)
 800153e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001540:	2306      	movs	r3, #6
 8001542:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001544:	2307      	movs	r3, #7
 8001546:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001548:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800154c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800154e:	2304      	movs	r3, #4
 8001550:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	481b      	ldr	r0, [pc, #108]	; (80015cc <MX_ADC3_Init+0x110>)
 8001560:	f001 fe2e 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800156a:	f000 fb57 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_ADC3_Init+0x11c>)
 8001570:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001572:	230c      	movs	r3, #12
 8001574:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	4814      	ldr	r0, [pc, #80]	; (80015cc <MX_ADC3_Init+0x110>)
 800157c:	f001 fe20 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001586:	f000 fb49 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800158a:	2301      	movs	r3, #1
 800158c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800158e:	2312      	movs	r3, #18
 8001590:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4619      	mov	r1, r3
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_ADC3_Init+0x110>)
 8001598:	f001 fe12 	bl	80031c0 <HAL_ADC_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015a2:	f000 fb3b 	bl	8001c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <MX_ADC3_Init+0x120>)
 80015a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015aa:	2318      	movs	r3, #24
 80015ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_ADC3_Init+0x110>)
 80015b4:	f001 fe04 	bl	80031c0 <HAL_ADC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80015be:	f000 fb2d 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	24000140 	.word	0x24000140
 80015d0:	58026000 	.word	0x58026000
 80015d4:	cb840000 	.word	0xcb840000
 80015d8:	cfb80000 	.word	0xcfb80000
 80015dc:	04300002 	.word	0x04300002

080015e0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2224      	movs	r2, #36	; 0x24
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00f fa7d 	bl	8010aec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_DAC1_Init+0x5c>)
 80015f4:	4a12      	ldr	r2, [pc, #72]	; (8001640 <MX_DAC1_Init+0x60>)
 80015f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015f8:	4810      	ldr	r0, [pc, #64]	; (800163c <MX_DAC1_Init+0x5c>)
 80015fa:	f002 fe72 	bl	80042e2 <HAL_DAC_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001604:	f000 fb0a 	bl	8001c1c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800160c:	230a      	movs	r3, #10
 800160e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001614:	2301      	movs	r3, #1
 8001616:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <MX_DAC1_Init+0x5c>)
 8001624:	f002 ff5e 	bl	80044e4 <HAL_DAC_ConfigChannel>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800162e:	f000 faf5 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	24000294 	.word	0x24000294
 8001640:	40007400 	.word	0x40007400

08001644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <MX_I2C1_Init+0x74>)
 800164a:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <MX_I2C1_Init+0x78>)
 800164c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_I2C1_Init+0x74>)
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <MX_I2C1_Init+0x7c>)
 8001652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <MX_I2C1_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_I2C1_Init+0x74>)
 800165c:	2201      	movs	r2, #1
 800165e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_I2C1_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_I2C1_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_I2C1_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_I2C1_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_I2C1_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800167e:	480e      	ldr	r0, [pc, #56]	; (80016b8 <MX_I2C1_Init+0x74>)
 8001680:	f006 f91a 	bl	80078b8 <HAL_I2C_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800168a:	f000 fac7 	bl	8001c1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800168e:	2100      	movs	r1, #0
 8001690:	4809      	ldr	r0, [pc, #36]	; (80016b8 <MX_I2C1_Init+0x74>)
 8001692:	f006 fe61 	bl	8008358 <HAL_I2CEx_ConfigAnalogFilter>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800169c:	f000 fabe 	bl	8001c1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016a0:	2100      	movs	r1, #0
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_I2C1_Init+0x74>)
 80016a4:	f006 fea3 	bl	80083ee <HAL_I2CEx_ConfigDigitalFilter>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016ae:	f000 fab5 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	24000320 	.word	0x24000320
 80016bc:	40005400 	.word	0x40005400
 80016c0:	20303e5d 	.word	0x20303e5d

080016c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016c8:	4b28      	ldr	r3, [pc, #160]	; (800176c <MX_SPI1_Init+0xa8>)
 80016ca:	4a29      	ldr	r2, [pc, #164]	; (8001770 <MX_SPI1_Init+0xac>)
 80016cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ce:	4b27      	ldr	r3, [pc, #156]	; (800176c <MX_SPI1_Init+0xa8>)
 80016d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <MX_SPI1_Init+0xa8>)
 80016d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016dc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <MX_SPI1_Init+0xa8>)
 80016e0:	220f      	movs	r2, #15
 80016e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <MX_SPI1_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <MX_SPI1_Init+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <MX_SPI1_Init+0xa8>)
 80016f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_SPI1_Init+0xa8>)
 80016fa:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <MX_SPI1_Init+0xa8>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <MX_SPI1_Init+0xa8>)
 8001708:	2200      	movs	r2, #0
 800170a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <MX_SPI1_Init+0xa8>)
 800170e:	2200      	movs	r2, #0
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_SPI1_Init+0xa8>)
 8001714:	2200      	movs	r2, #0
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_SPI1_Init+0xa8>)
 800171a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_SPI1_Init+0xa8>)
 8001722:	2200      	movs	r2, #0
 8001724:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_SPI1_Init+0xa8>)
 8001728:	2200      	movs	r2, #0
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_SPI1_Init+0xa8>)
 800172e:	2200      	movs	r2, #0
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_SPI1_Init+0xa8>)
 8001734:	2200      	movs	r2, #0
 8001736:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_SPI1_Init+0xa8>)
 800173a:	2200      	movs	r2, #0
 800173c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <MX_SPI1_Init+0xa8>)
 8001740:	2200      	movs	r2, #0
 8001742:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_SPI1_Init+0xa8>)
 8001746:	2200      	movs	r2, #0
 8001748:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <MX_SPI1_Init+0xa8>)
 800174c:	2200      	movs	r2, #0
 800174e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_SPI1_Init+0xa8>)
 8001752:	2200      	movs	r2, #0
 8001754:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_SPI1_Init+0xa8>)
 8001758:	f00a fbf0 	bl	800bf3c <HAL_SPI_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001762:	f000 fa5b 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	24000374 	.word	0x24000374
 8001770:	40013000 	.word	0x40013000

08001774 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001778:	4b28      	ldr	r3, [pc, #160]	; (800181c <MX_SPI2_Init+0xa8>)
 800177a:	4a29      	ldr	r2, [pc, #164]	; (8001820 <MX_SPI2_Init+0xac>)
 800177c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <MX_SPI2_Init+0xa8>)
 8001780:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001784:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <MX_SPI2_Init+0xa8>)
 8001788:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800178c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800178e:	4b23      	ldr	r3, [pc, #140]	; (800181c <MX_SPI2_Init+0xa8>)
 8001790:	220f      	movs	r2, #15
 8001792:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <MX_SPI2_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <MX_SPI2_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <MX_SPI2_Init+0xa8>)
 80017a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <MX_SPI2_Init+0xa8>)
 80017aa:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_SPI2_Init+0xa8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <MX_SPI2_Init+0xa8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_SPI2_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_SPI2_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_SPI2_Init+0xa8>)
 80017ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_SPI2_Init+0xa8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_SPI2_Init+0xa8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_SPI2_Init+0xa8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_SPI2_Init+0xa8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_SPI2_Init+0xa8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_SPI2_Init+0xa8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_SPI2_Init+0xa8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_SPI2_Init+0xa8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_SPI2_Init+0xa8>)
 8001802:	2200      	movs	r2, #0
 8001804:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_SPI2_Init+0xa8>)
 8001808:	f00a fb98 	bl	800bf3c <HAL_SPI_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001812:	f000 fa03 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	240003fc 	.word	0x240003fc
 8001820:	40003800 	.word	0x40003800

08001824 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b096      	sub	sp, #88	; 0x58
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001836:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
 8001846:	615a      	str	r2, [r3, #20]
 8001848:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	222c      	movs	r2, #44	; 0x2c
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f00f f94b 	bl	8010aec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001856:	4b39      	ldr	r3, [pc, #228]	; (800193c <MX_TIM1_Init+0x118>)
 8001858:	4a39      	ldr	r2, [pc, #228]	; (8001940 <MX_TIM1_Init+0x11c>)
 800185a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 800185c:	4b37      	ldr	r3, [pc, #220]	; (800193c <MX_TIM1_Init+0x118>)
 800185e:	2263      	movs	r2, #99	; 0x63
 8001860:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001862:	4b36      	ldr	r3, [pc, #216]	; (800193c <MX_TIM1_Init+0x118>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8001868:	4b34      	ldr	r3, [pc, #208]	; (800193c <MX_TIM1_Init+0x118>)
 800186a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800186e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001870:	4b32      	ldr	r3, [pc, #200]	; (800193c <MX_TIM1_Init+0x118>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001876:	4b31      	ldr	r3, [pc, #196]	; (800193c <MX_TIM1_Init+0x118>)
 8001878:	2200      	movs	r2, #0
 800187a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187c:	4b2f      	ldr	r3, [pc, #188]	; (800193c <MX_TIM1_Init+0x118>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001882:	482e      	ldr	r0, [pc, #184]	; (800193c <MX_TIM1_Init+0x118>)
 8001884:	f00b fab0 	bl	800cde8 <HAL_TIM_PWM_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800188e:	f000 f9c5 	bl	8001c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800189e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018a2:	4619      	mov	r1, r3
 80018a4:	4825      	ldr	r0, [pc, #148]	; (800193c <MX_TIM1_Init+0x118>)
 80018a6:	f00c fb81 	bl	800dfac <HAL_TIMEx_MasterConfigSynchronization>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018b0:	f000 f9b4 	bl	8001c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b4:	2360      	movs	r3, #96	; 0x60
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80018b8:	f240 13df 	movw	r3, #479	; 0x1df
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018be:	2300      	movs	r3, #0
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018c2:	2300      	movs	r3, #0
 80018c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018d6:	2200      	movs	r2, #0
 80018d8:	4619      	mov	r1, r3
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <MX_TIM1_Init+0x118>)
 80018dc:	f00b fcf2 	bl	800d2c4 <HAL_TIM_PWM_ConfigChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80018e6:	f000 f999 	bl	8001c1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001902:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800190c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4619      	mov	r1, r3
 800191e:	4807      	ldr	r0, [pc, #28]	; (800193c <MX_TIM1_Init+0x118>)
 8001920:	f00c fbd2 	bl	800e0c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800192a:	f000 f977 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800192e:	4803      	ldr	r0, [pc, #12]	; (800193c <MX_TIM1_Init+0x118>)
 8001930:	f000 fcae 	bl	8002290 <HAL_TIM_MspPostInit>

}
 8001934:	bf00      	nop
 8001936:	3758      	adds	r7, #88	; 0x58
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	24000484 	.word	0x24000484
 8001940:	40010000 	.word	0x40010000

08001944 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08e      	sub	sp, #56	; 0x38
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001964:	463b      	mov	r3, r7
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	615a      	str	r2, [r3, #20]
 8001974:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001976:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001978:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800197c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800197e:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001980:	222f      	movs	r2, #47	; 0x2f
 8001982:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800198a:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <MX_TIM2_Init+0xe8>)
 800198c:	f640 4234 	movw	r2, #3124	; 0xc34
 8001990:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <MX_TIM2_Init+0xe8>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800199e:	4823      	ldr	r0, [pc, #140]	; (8001a2c <MX_TIM2_Init+0xe8>)
 80019a0:	f00a ff1d 	bl	800c7de <HAL_TIM_Base_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019aa:	f000 f937 	bl	8001c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b8:	4619      	mov	r1, r3
 80019ba:	481c      	ldr	r0, [pc, #112]	; (8001a2c <MX_TIM2_Init+0xe8>)
 80019bc:	f00b fd96 	bl	800d4ec <HAL_TIM_ConfigClockSource>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019c6:	f000 f929 	bl	8001c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019ca:	4818      	ldr	r0, [pc, #96]	; (8001a2c <MX_TIM2_Init+0xe8>)
 80019cc:	f00b fa0c 	bl	800cde8 <HAL_TIM_PWM_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019d6:	f000 f921 	bl	8001c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019da:	2320      	movs	r3, #32
 80019dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	4810      	ldr	r0, [pc, #64]	; (8001a2c <MX_TIM2_Init+0xe8>)
 80019ea:	f00c fadf 	bl	800dfac <HAL_TIMEx_MasterConfigSynchronization>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019f4:	f000 f912 	bl	8001c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f8:	2360      	movs	r3, #96	; 0x60
 80019fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a08:	463b      	mov	r3, r7
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4807      	ldr	r0, [pc, #28]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001a10:	f00b fc58 	bl	800d2c4 <HAL_TIM_PWM_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a1a:	f000 f8ff 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a1e:	4803      	ldr	r0, [pc, #12]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001a20:	f000 fc36 	bl	8002290 <HAL_TIM_MspPostInit>

}
 8001a24:	bf00      	nop
 8001a26:	3738      	adds	r7, #56	; 0x38
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	240004d0 	.word	0x240004d0

08001a30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001a36:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <MX_USART1_UART_Init+0x94>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001a3c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a78:	4811      	ldr	r0, [pc, #68]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001a7a:	f00c fbc1 	bl	800e200 <HAL_UART_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a84:	f000 f8ca 	bl	8001c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a88:	2100      	movs	r1, #0
 8001a8a:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001a8c:	f00e ff1b 	bl	80108c6 <HAL_UARTEx_SetTxFifoThreshold>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a96:	f000 f8c1 	bl	8001c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4808      	ldr	r0, [pc, #32]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001a9e:	f00e ff50 	bl	8010942 <HAL_UARTEx_SetRxFifoThreshold>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001aa8:	f000 f8b8 	bl	8001c1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <MX_USART1_UART_Init+0x90>)
 8001aae:	f00e fed1 	bl	8010854 <HAL_UARTEx_DisableFifoMode>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ab8:	f000 f8b0 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	2400051c 	.word	0x2400051c
 8001ac4:	40011000 	.word	0x40011000

08001ac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <MX_DMA_Init+0x5c>)
 8001ad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ad4:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <MX_DMA_Init+0x5c>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_DMA_Init+0x5c>)
 8001ae0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2100      	movs	r1, #0
 8001af0:	200b      	movs	r0, #11
 8001af2:	f002 fbc2 	bl	800427a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001af6:	200b      	movs	r0, #11
 8001af8:	f002 fbd9 	bl	80042ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2100      	movs	r1, #0
 8001b00:	200c      	movs	r0, #12
 8001b02:	f002 fbba 	bl	800427a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b06:	200c      	movs	r0, #12
 8001b08:	f002 fbd1 	bl	80042ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2010      	movs	r0, #16
 8001b12:	f002 fbb2 	bl	800427a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b16:	2010      	movs	r0, #16
 8001b18:	f002 fbc9 	bl	80042ae <HAL_NVIC_EnableIRQ>

}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	58024400 	.word	0x58024400

08001b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	4b34      	ldr	r3, [pc, #208]	; (8001c10 <MX_GPIO_Init+0xe8>)
 8001b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b44:	4a32      	ldr	r2, [pc, #200]	; (8001c10 <MX_GPIO_Init+0xe8>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4e:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <MX_GPIO_Init+0xe8>)
 8001b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5c:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <MX_GPIO_Init+0xe8>)
 8001b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b62:	4a2b      	ldr	r2, [pc, #172]	; (8001c10 <MX_GPIO_Init+0xe8>)
 8001b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b6c:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <MX_GPIO_Init+0xe8>)
 8001b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <MX_GPIO_Init+0xe8>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b80:	4a23      	ldr	r2, [pc, #140]	; (8001c10 <MX_GPIO_Init+0xe8>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <MX_GPIO_Init+0xe8>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <MX_GPIO_Init+0xe8>)
 8001b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <MX_GPIO_Init+0xe8>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <MX_GPIO_Init+0xe8>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001bbc:	4815      	ldr	r0, [pc, #84]	; (8001c14 <MX_GPIO_Init+0xec>)
 8001bbe:	f005 fe61 	bl	8007884 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2164      	movs	r1, #100	; 0x64
 8001bc6:	4814      	ldr	r0, [pc, #80]	; (8001c18 <MX_GPIO_Init+0xf0>)
 8001bc8:	f005 fe5c 	bl	8007884 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001bcc:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001bd0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	480b      	ldr	r0, [pc, #44]	; (8001c14 <MX_GPIO_Init+0xec>)
 8001be6:	f005 fc85 	bl	80074f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001bea:	2364      	movs	r3, #100	; 0x64
 8001bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_GPIO_Init+0xf0>)
 8001c02:	f005 fc77 	bl	80074f4 <HAL_GPIO_Init>

}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	; 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	58024400 	.word	0x58024400
 8001c14:	58020800 	.word	0x58020800
 8001c18:	58020400 	.word	0x58020400

08001c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c20:	b672      	cpsid	i
}
 8001c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <Error_Handler+0x8>
	...

08001c28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_MspInit+0x30>)
 8001c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c34:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <HAL_MspInit+0x30>)
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_MspInit+0x30>)
 8001c40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	58024400 	.word	0x58024400

08001c5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08e      	sub	sp, #56	; 0x38
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a7b      	ldr	r2, [pc, #492]	; (8001e68 <HAL_ADC_MspInit+0x20c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	f040 8091 	bne.w	8001da2 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c80:	4b7a      	ldr	r3, [pc, #488]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001c82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c86:	4a79      	ldr	r2, [pc, #484]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001c88:	f043 0320 	orr.w	r3, r3, #32
 8001c8c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c90:	4b76      	ldr	r3, [pc, #472]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001c92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	623b      	str	r3, [r7, #32]
 8001c9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	4b73      	ldr	r3, [pc, #460]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca4:	4a71      	ldr	r2, [pc, #452]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cae:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	4b6b      	ldr	r3, [pc, #428]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc2:	4a6a      	ldr	r2, [pc, #424]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ccc:	4b67      	ldr	r3, [pc, #412]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	4b64      	ldr	r3, [pc, #400]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce0:	4a62      	ldr	r2, [pc, #392]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001ce2:	f043 0302 	orr.w	r3, r3, #2
 8001ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cea:	4b60      	ldr	r3, [pc, #384]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001cf8:	2333      	movs	r3, #51	; 0x33
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4859      	ldr	r0, [pc, #356]	; (8001e70 <HAL_ADC_MspInit+0x214>)
 8001d0c:	f005 fbf2 	bl	80074f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001d10:	23ce      	movs	r3, #206	; 0xce
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d14:	2303      	movs	r3, #3
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d20:	4619      	mov	r1, r3
 8001d22:	4854      	ldr	r0, [pc, #336]	; (8001e74 <HAL_ADC_MspInit+0x218>)
 8001d24:	f005 fbe6 	bl	80074f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	484f      	ldr	r0, [pc, #316]	; (8001e78 <HAL_ADC_MspInit+0x21c>)
 8001d3c:	f005 fbda 	bl	80074f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001d40:	4b4e      	ldr	r3, [pc, #312]	; (8001e7c <HAL_ADC_MspInit+0x220>)
 8001d42:	4a4f      	ldr	r2, [pc, #316]	; (8001e80 <HAL_ADC_MspInit+0x224>)
 8001d44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d46:	4b4d      	ldr	r3, [pc, #308]	; (8001e7c <HAL_ADC_MspInit+0x220>)
 8001d48:	2209      	movs	r2, #9
 8001d4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d4c:	4b4b      	ldr	r3, [pc, #300]	; (8001e7c <HAL_ADC_MspInit+0x220>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d52:	4b4a      	ldr	r3, [pc, #296]	; (8001e7c <HAL_ADC_MspInit+0x220>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d58:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <HAL_ADC_MspInit+0x220>)
 8001d5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d60:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <HAL_ADC_MspInit+0x220>)
 8001d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d68:	4b44      	ldr	r3, [pc, #272]	; (8001e7c <HAL_ADC_MspInit+0x220>)
 8001d6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d6e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d70:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <HAL_ADC_MspInit+0x220>)
 8001d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d76:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d78:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <HAL_ADC_MspInit+0x220>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d7e:	4b3f      	ldr	r3, [pc, #252]	; (8001e7c <HAL_ADC_MspInit+0x220>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d84:	483d      	ldr	r0, [pc, #244]	; (8001e7c <HAL_ADC_MspInit+0x220>)
 8001d86:	f002 fd79 	bl	800487c <HAL_DMA_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001d90:	f7ff ff44 	bl	8001c1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a39      	ldr	r2, [pc, #228]	; (8001e7c <HAL_ADC_MspInit+0x220>)
 8001d98:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d9a:	4a38      	ldr	r2, [pc, #224]	; (8001e7c <HAL_ADC_MspInit+0x220>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001da0:	e05e      	b.n	8001e60 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a37      	ldr	r2, [pc, #220]	; (8001e84 <HAL_ADC_MspInit+0x228>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d159      	bne.n	8001e60 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001dac:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db2:	4a2e      	ldr	r2, [pc, #184]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd0:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_ADC_MspInit+0x210>)
 8001ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001de8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001dec:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001df0:	f000 fd3e 	bl	8002870 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001df4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001df8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001dfc:	f000 fd38 	bl	8002870 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <HAL_ADC_MspInit+0x22c>)
 8001e02:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <HAL_ADC_MspInit+0x230>)
 8001e04:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_ADC_MspInit+0x22c>)
 8001e08:	2273      	movs	r2, #115	; 0x73
 8001e0a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <HAL_ADC_MspInit+0x22c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_ADC_MspInit+0x22c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_ADC_MspInit+0x22c>)
 8001e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e1e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_ADC_MspInit+0x22c>)
 8001e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e26:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <HAL_ADC_MspInit+0x22c>)
 8001e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e2e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_ADC_MspInit+0x22c>)
 8001e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e36:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_ADC_MspInit+0x22c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_ADC_MspInit+0x22c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001e44:	4810      	ldr	r0, [pc, #64]	; (8001e88 <HAL_ADC_MspInit+0x22c>)
 8001e46:	f002 fd19 	bl	800487c <HAL_DMA_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001e50:	f7ff fee4 	bl	8001c1c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a0c      	ldr	r2, [pc, #48]	; (8001e88 <HAL_ADC_MspInit+0x22c>)
 8001e58:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <HAL_ADC_MspInit+0x22c>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e60:	bf00      	nop
 8001e62:	3738      	adds	r7, #56	; 0x38
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	58024400 	.word	0x58024400
 8001e70:	58020800 	.word	0x58020800
 8001e74:	58020000 	.word	0x58020000
 8001e78:	58020400 	.word	0x58020400
 8001e7c:	240001a4 	.word	0x240001a4
 8001e80:	40020010 	.word	0x40020010
 8001e84:	58026000 	.word	0x58026000
 8001e88:	2400021c 	.word	0x2400021c
 8001e8c:	40020028 	.word	0x40020028

08001e90 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a30      	ldr	r2, [pc, #192]	; (8001f70 <HAL_DAC_MspInit+0xe0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d159      	bne.n	8001f66 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <HAL_DAC_MspInit+0xe4>)
 8001eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eb8:	4a2e      	ldr	r2, [pc, #184]	; (8001f74 <HAL_DAC_MspInit+0xe4>)
 8001eba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ebe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <HAL_DAC_MspInit+0xe4>)
 8001ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed0:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <HAL_DAC_MspInit+0xe4>)
 8001ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed6:	4a27      	ldr	r2, [pc, #156]	; (8001f74 <HAL_DAC_MspInit+0xe4>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee0:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_DAC_MspInit+0xe4>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eee:	2310      	movs	r3, #16
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	481d      	ldr	r0, [pc, #116]	; (8001f78 <HAL_DAC_MspInit+0xe8>)
 8001f02:	f005 faf7 	bl	80074f4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_DAC_MspInit+0xec>)
 8001f08:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <HAL_DAC_MspInit+0xf0>)
 8001f0a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_DAC_MspInit+0xec>)
 8001f0e:	2243      	movs	r2, #67	; 0x43
 8001f10:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <HAL_DAC_MspInit+0xec>)
 8001f14:	2240      	movs	r2, #64	; 0x40
 8001f16:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_DAC_MspInit+0xec>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_DAC_MspInit+0xec>)
 8001f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f24:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_DAC_MspInit+0xec>)
 8001f28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f2c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_DAC_MspInit+0xec>)
 8001f30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f34:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_DAC_MspInit+0xec>)
 8001f38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f3c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_DAC_MspInit+0xec>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f44:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_DAC_MspInit+0xec>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001f4a:	480c      	ldr	r0, [pc, #48]	; (8001f7c <HAL_DAC_MspInit+0xec>)
 8001f4c:	f002 fc96 	bl	800487c <HAL_DMA_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001f56:	f7ff fe61 	bl	8001c1c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_DAC_MspInit+0xec>)
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <HAL_DAC_MspInit+0xec>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	3728      	adds	r7, #40	; 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40007400 	.word	0x40007400
 8001f74:	58024400 	.word	0x58024400
 8001f78:	58020000 	.word	0x58020000
 8001f7c:	240002a8 	.word	0x240002a8
 8001f80:	40020088 	.word	0x40020088

08001f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b0ba      	sub	sp, #232	; 0xe8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	22c0      	movs	r2, #192	; 0xc0
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f00e fda1 	bl	8010aec <memset>
  if(hi2c->Instance==I2C1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a27      	ldr	r2, [pc, #156]	; (800204c <HAL_I2C_MspInit+0xc8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d146      	bne.n	8002042 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fb4:	f04f 0208 	mov.w	r2, #8
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc6:	f107 0310 	add.w	r3, r7, #16
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f007 fab8 	bl	8009540 <HAL_RCCEx_PeriphCLKConfig>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001fd6:	f7ff fe21 	bl	8001c1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_I2C_MspInit+0xcc>)
 8001fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe0:	4a1b      	ldr	r2, [pc, #108]	; (8002050 <HAL_I2C_MspInit+0xcc>)
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fea:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_I2C_MspInit+0xcc>)
 8001fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ff8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ffc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002000:	2312      	movs	r3, #18
 8002002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002012:	2304      	movs	r3, #4
 8002014:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002018:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800201c:	4619      	mov	r1, r3
 800201e:	480d      	ldr	r0, [pc, #52]	; (8002054 <HAL_I2C_MspInit+0xd0>)
 8002020:	f005 fa68 	bl	80074f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_I2C_MspInit+0xcc>)
 8002026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800202a:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_I2C_MspInit+0xcc>)
 800202c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002030:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_I2C_MspInit+0xcc>)
 8002036:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800203a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002042:	bf00      	nop
 8002044:	37e8      	adds	r7, #232	; 0xe8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40005400 	.word	0x40005400
 8002050:	58024400 	.word	0x58024400
 8002054:	58020400 	.word	0x58020400

08002058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b0bc      	sub	sp, #240	; 0xf0
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002070:	f107 0318 	add.w	r3, r7, #24
 8002074:	22c0      	movs	r2, #192	; 0xc0
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f00e fd37 	bl	8010aec <memset>
  if(hspi->Instance==SPI1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a4c      	ldr	r2, [pc, #304]	; (80021b4 <HAL_SPI_MspInit+0x15c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d145      	bne.n	8002114 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002094:	2300      	movs	r3, #0
 8002096:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002098:	f107 0318 	add.w	r3, r7, #24
 800209c:	4618      	mov	r0, r3
 800209e:	f007 fa4f 	bl	8009540 <HAL_RCCEx_PeriphCLKConfig>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80020a8:	f7ff fdb8 	bl	8001c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ac:	4b42      	ldr	r3, [pc, #264]	; (80021b8 <HAL_SPI_MspInit+0x160>)
 80020ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020b2:	4a41      	ldr	r2, [pc, #260]	; (80021b8 <HAL_SPI_MspInit+0x160>)
 80020b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020bc:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <HAL_SPI_MspInit+0x160>)
 80020be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_SPI_MspInit+0x160>)
 80020cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d0:	4a39      	ldr	r2, [pc, #228]	; (80021b8 <HAL_SPI_MspInit+0x160>)
 80020d2:	f043 0302 	orr.w	r3, r3, #2
 80020d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020da:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <HAL_SPI_MspInit+0x160>)
 80020dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80020e8:	2318      	movs	r3, #24
 80020ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002100:	2305      	movs	r3, #5
 8002102:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800210a:	4619      	mov	r1, r3
 800210c:	482b      	ldr	r0, [pc, #172]	; (80021bc <HAL_SPI_MspInit+0x164>)
 800210e:	f005 f9f1 	bl	80074f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002112:	e04a      	b.n	80021aa <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a29      	ldr	r2, [pc, #164]	; (80021c0 <HAL_SPI_MspInit+0x168>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d145      	bne.n	80021aa <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800211e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800212a:	2300      	movs	r3, #0
 800212c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212e:	f107 0318 	add.w	r3, r7, #24
 8002132:	4618      	mov	r0, r3
 8002134:	f007 fa04 	bl	8009540 <HAL_RCCEx_PeriphCLKConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800213e:	f7ff fd6d 	bl	8001c1c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <HAL_SPI_MspInit+0x160>)
 8002144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002148:	4a1b      	ldr	r2, [pc, #108]	; (80021b8 <HAL_SPI_MspInit+0x160>)
 800214a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800214e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_SPI_MspInit+0x160>)
 8002154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_SPI_MspInit+0x160>)
 8002162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002166:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <HAL_SPI_MspInit+0x160>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_SPI_MspInit+0x160>)
 8002172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800217e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002198:	2305      	movs	r3, #5
 800219a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <HAL_SPI_MspInit+0x164>)
 80021a6:	f005 f9a5 	bl	80074f4 <HAL_GPIO_Init>
}
 80021aa:	bf00      	nop
 80021ac:	37f0      	adds	r7, #240	; 0xf0
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40013000 	.word	0x40013000
 80021b8:	58024400 	.word	0x58024400
 80021bc:	58020400 	.word	0x58020400
 80021c0:	40003800 	.word	0x40003800

080021c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1a      	ldr	r2, [pc, #104]	; (800223c <HAL_TIM_PWM_MspInit+0x78>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d12e      	bne.n	8002234 <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_TIM_PWM_MspInit+0x7c>)
 80021d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021dc:	4a18      	ldr	r2, [pc, #96]	; (8002240 <HAL_TIM_PWM_MspInit+0x7c>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <HAL_TIM_PWM_MspInit+0x7c>)
 80021e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2100      	movs	r1, #0
 80021f8:	2018      	movs	r0, #24
 80021fa:	f002 f83e 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80021fe:	2018      	movs	r0, #24
 8002200:	f002 f855 	bl	80042ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2100      	movs	r1, #0
 8002208:	2019      	movs	r0, #25
 800220a:	f002 f836 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800220e:	2019      	movs	r0, #25
 8002210:	f002 f84d 	bl	80042ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	201a      	movs	r0, #26
 800221a:	f002 f82e 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800221e:	201a      	movs	r0, #26
 8002220:	f002 f845 	bl	80042ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	201b      	movs	r0, #27
 800222a:	f002 f826 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800222e:	201b      	movs	r0, #27
 8002230:	f002 f83d 	bl	80042ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40010000 	.word	0x40010000
 8002240:	58024400 	.word	0x58024400

08002244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002254:	d116      	bne.n	8002284 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002256:	4b0d      	ldr	r3, [pc, #52]	; (800228c <HAL_TIM_Base_MspInit+0x48>)
 8002258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800225c:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_TIM_Base_MspInit+0x48>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_TIM_Base_MspInit+0x48>)
 8002268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	201c      	movs	r0, #28
 800227a:	f001 fffe 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800227e:	201c      	movs	r0, #28
 8002280:	f002 f815 	bl	80042ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	58024400 	.word	0x58024400

08002290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a26      	ldr	r2, [pc, #152]	; (8002348 <HAL_TIM_MspPostInit+0xb8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d120      	bne.n	80022f4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <HAL_TIM_MspPostInit+0xbc>)
 80022b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b8:	4a24      	ldr	r2, [pc, #144]	; (800234c <HAL_TIM_MspPostInit+0xbc>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022c2:	4b22      	ldr	r3, [pc, #136]	; (800234c <HAL_TIM_MspPostInit+0xbc>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022e2:	2301      	movs	r3, #1
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	4818      	ldr	r0, [pc, #96]	; (8002350 <HAL_TIM_MspPostInit+0xc0>)
 80022ee:	f005 f901 	bl	80074f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022f2:	e024      	b.n	800233e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fc:	d11f      	bne.n	800233e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <HAL_TIM_MspPostInit+0xbc>)
 8002300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002304:	4a11      	ldr	r2, [pc, #68]	; (800234c <HAL_TIM_MspPostInit+0xbc>)
 8002306:	f043 0302 	orr.w	r3, r3, #2
 800230a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800230e:	4b0f      	ldr	r3, [pc, #60]	; (800234c <HAL_TIM_MspPostInit+0xbc>)
 8002310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800231c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800232e:	2301      	movs	r3, #1
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4806      	ldr	r0, [pc, #24]	; (8002354 <HAL_TIM_MspPostInit+0xc4>)
 800233a:	f005 f8db 	bl	80074f4 <HAL_GPIO_Init>
}
 800233e:	bf00      	nop
 8002340:	3728      	adds	r7, #40	; 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40010000 	.word	0x40010000
 800234c:	58024400 	.word	0x58024400
 8002350:	58020000 	.word	0x58020000
 8002354:	58020400 	.word	0x58020400

08002358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b0ba      	sub	sp, #232	; 0xe8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002370:	f107 0310 	add.w	r3, r7, #16
 8002374:	22c0      	movs	r2, #192	; 0xc0
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f00e fbb7 	bl	8010aec <memset>
  if(huart->Instance==USART1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a2b      	ldr	r2, [pc, #172]	; (8002430 <HAL_UART_MspInit+0xd8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d14e      	bne.n	8002426 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002388:	f04f 0201 	mov.w	r2, #1
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239a:	f107 0310 	add.w	r3, r7, #16
 800239e:	4618      	mov	r0, r3
 80023a0:	f007 f8ce 	bl	8009540 <HAL_RCCEx_PeriphCLKConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023aa:	f7ff fc37 	bl	8001c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ae:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_UART_MspInit+0xdc>)
 80023b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023b4:	4a1f      	ldr	r2, [pc, #124]	; (8002434 <HAL_UART_MspInit+0xdc>)
 80023b6:	f043 0310 	orr.w	r3, r3, #16
 80023ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_UART_MspInit+0xdc>)
 80023c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_UART_MspInit+0xdc>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d2:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_UART_MspInit+0xdc>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_UART_MspInit+0xdc>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002404:	2307      	movs	r3, #7
 8002406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800240e:	4619      	mov	r1, r3
 8002410:	4809      	ldr	r0, [pc, #36]	; (8002438 <HAL_UART_MspInit+0xe0>)
 8002412:	f005 f86f 	bl	80074f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	2025      	movs	r0, #37	; 0x25
 800241c:	f001 ff2d 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002420:	2025      	movs	r0, #37	; 0x25
 8002422:	f001 ff44 	bl	80042ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002426:	bf00      	nop
 8002428:	37e8      	adds	r7, #232	; 0xe8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40011000 	.word	0x40011000
 8002434:	58024400 	.word	0x58024400
 8002438:	58020000 	.word	0x58020000

0800243c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <NMI_Handler+0x4>

08002442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002446:	e7fe      	b.n	8002446 <HardFault_Handler+0x4>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244c:	e7fe      	b.n	800244c <MemManage_Handler+0x4>

0800244e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <BusFault_Handler+0x4>

08002454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <UsageFault_Handler+0x4>

0800245a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002488:	f000 f9b6 	bl	80027f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}

08002490 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <DMA1_Stream0_IRQHandler+0x10>)
 8002496:	f003 fd1b 	bl	8005ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	240001a4 	.word	0x240001a4

080024a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <DMA1_Stream1_IRQHandler+0x10>)
 80024aa:	f003 fd11 	bl	8005ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2400021c 	.word	0x2400021c

080024b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <DMA1_Stream5_IRQHandler+0x10>)
 80024be:	f003 fd07 	bl	8005ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	240002a8 	.word	0x240002a8

080024cc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <TIM1_BRK_IRQHandler+0x10>)
 80024d2:	f00a fdef 	bl	800d0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	24000484 	.word	0x24000484

080024e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <TIM1_UP_IRQHandler+0x10>)
 80024e6:	f00a fde5 	bl	800d0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	24000484 	.word	0x24000484

080024f4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <TIM1_TRG_COM_IRQHandler+0x10>)
 80024fa:	f00a fddb 	bl	800d0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	24000484 	.word	0x24000484

08002508 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <TIM1_CC_IRQHandler+0x10>)
 800250e:	f00a fdd1 	bl	800d0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	24000484 	.word	0x24000484

0800251c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <TIM2_IRQHandler+0x10>)
 8002522:	f00a fdc7 	bl	800d0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	240004d0 	.word	0x240004d0

08002530 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <USART1_IRQHandler+0x10>)
 8002536:	f00b ff8d 	bl	800e454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2400051c 	.word	0x2400051c

08002544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800254c:	4a14      	ldr	r2, [pc, #80]	; (80025a0 <_sbrk+0x5c>)
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <_sbrk+0x60>)
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002558:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d102      	bne.n	8002566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <_sbrk+0x64>)
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <_sbrk+0x68>)
 8002564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <_sbrk+0x64>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	429a      	cmp	r2, r3
 8002572:	d207      	bcs.n	8002584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002574:	f00e fa72 	bl	8010a5c <__errno>
 8002578:	4603      	mov	r3, r0
 800257a:	220c      	movs	r2, #12
 800257c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002582:	e009      	b.n	8002598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <_sbrk+0x64>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <_sbrk+0x64>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <_sbrk+0x64>)
 8002594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002596:	68fb      	ldr	r3, [r7, #12]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	24080000 	.word	0x24080000
 80025a4:	00000400 	.word	0x00000400
 80025a8:	24000664 	.word	0x24000664
 80025ac:	24000680 	.word	0x24000680

080025b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025b4:	4b37      	ldr	r3, [pc, #220]	; (8002694 <SystemInit+0xe4>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	4a36      	ldr	r2, [pc, #216]	; (8002694 <SystemInit+0xe4>)
 80025bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025c4:	4b34      	ldr	r3, [pc, #208]	; (8002698 <SystemInit+0xe8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	2b06      	cmp	r3, #6
 80025ce:	d807      	bhi.n	80025e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025d0:	4b31      	ldr	r3, [pc, #196]	; (8002698 <SystemInit+0xe8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 030f 	bic.w	r3, r3, #15
 80025d8:	4a2f      	ldr	r2, [pc, #188]	; (8002698 <SystemInit+0xe8>)
 80025da:	f043 0307 	orr.w	r3, r3, #7
 80025de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025e0:	4b2e      	ldr	r3, [pc, #184]	; (800269c <SystemInit+0xec>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2d      	ldr	r2, [pc, #180]	; (800269c <SystemInit+0xec>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025ec:	4b2b      	ldr	r3, [pc, #172]	; (800269c <SystemInit+0xec>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025f2:	4b2a      	ldr	r3, [pc, #168]	; (800269c <SystemInit+0xec>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4929      	ldr	r1, [pc, #164]	; (800269c <SystemInit+0xec>)
 80025f8:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <SystemInit+0xf0>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025fe:	4b26      	ldr	r3, [pc, #152]	; (8002698 <SystemInit+0xe8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800260a:	4b23      	ldr	r3, [pc, #140]	; (8002698 <SystemInit+0xe8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 030f 	bic.w	r3, r3, #15
 8002612:	4a21      	ldr	r2, [pc, #132]	; (8002698 <SystemInit+0xe8>)
 8002614:	f043 0307 	orr.w	r3, r3, #7
 8002618:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <SystemInit+0xec>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <SystemInit+0xec>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <SystemInit+0xec>)
 8002628:	2200      	movs	r2, #0
 800262a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <SystemInit+0xec>)
 800262e:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <SystemInit+0xf4>)
 8002630:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <SystemInit+0xec>)
 8002634:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <SystemInit+0xf8>)
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <SystemInit+0xec>)
 800263a:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <SystemInit+0xfc>)
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <SystemInit+0xec>)
 8002640:	2200      	movs	r2, #0
 8002642:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <SystemInit+0xec>)
 8002646:	4a19      	ldr	r2, [pc, #100]	; (80026ac <SystemInit+0xfc>)
 8002648:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <SystemInit+0xec>)
 800264c:	2200      	movs	r2, #0
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <SystemInit+0xec>)
 8002652:	4a16      	ldr	r2, [pc, #88]	; (80026ac <SystemInit+0xfc>)
 8002654:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <SystemInit+0xec>)
 8002658:	2200      	movs	r2, #0
 800265a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <SystemInit+0xec>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0e      	ldr	r2, [pc, #56]	; (800269c <SystemInit+0xec>)
 8002662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002666:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <SystemInit+0xec>)
 800266a:	2200      	movs	r2, #0
 800266c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <SystemInit+0x100>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <SystemInit+0x104>)
 8002674:	4013      	ands	r3, r2
 8002676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800267a:	d202      	bcs.n	8002682 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800267c:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <SystemInit+0x108>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <SystemInit+0x10c>)
 8002684:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002688:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800268a:	bf00      	nop
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00
 8002698:	52002000 	.word	0x52002000
 800269c:	58024400 	.word	0x58024400
 80026a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80026a4:	02020200 	.word	0x02020200
 80026a8:	01ff0000 	.word	0x01ff0000
 80026ac:	01010280 	.word	0x01010280
 80026b0:	5c001000 	.word	0x5c001000
 80026b4:	ffff0000 	.word	0xffff0000
 80026b8:	51008108 	.word	0x51008108
 80026bc:	52004000 	.word	0x52004000

080026c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026c4:	f7ff ff74 	bl	80025b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c8:	480c      	ldr	r0, [pc, #48]	; (80026fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ca:	490d      	ldr	r1, [pc, #52]	; (8002700 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026cc:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026e0:	4c0a      	ldr	r4, [pc, #40]	; (800270c <LoopFillZerobss+0x22>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ee:	f00e f9bb 	bl	8010a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f2:	f7fe fc6d 	bl	8000fd0 <main>
  bx  lr
 80026f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002700:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 8002704:	08010d78 	.word	0x08010d78
  ldr r2, =_sbss
 8002708:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 800270c:	2400067c 	.word	0x2400067c

08002710 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC3_IRQHandler>
	...

08002714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800271a:	2003      	movs	r0, #3
 800271c:	f001 fda2 	bl	8004264 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002720:	f006 fd38 	bl	8009194 <HAL_RCC_GetSysClockFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <HAL_Init+0x68>)
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	4913      	ldr	r1, [pc, #76]	; (8002780 <HAL_Init+0x6c>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
 800273c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <HAL_Init+0x68>)
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <HAL_Init+0x6c>)
 8002748:	5cd3      	ldrb	r3, [r2, r3]
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
 8002754:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <HAL_Init+0x70>)
 8002756:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002758:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <HAL_Init+0x74>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800275e:	200f      	movs	r0, #15
 8002760:	f000 f814 	bl	800278c <HAL_InitTick>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e002      	b.n	8002774 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800276e:	f7ff fa5b 	bl	8001c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	58024400 	.word	0x58024400
 8002780:	08010d28 	.word	0x08010d28
 8002784:	24000048 	.word	0x24000048
 8002788:	24000044 	.word	0x24000044

0800278c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_InitTick+0x60>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e021      	b.n	80027e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <HAL_InitTick+0x64>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_InitTick+0x60>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f001 fd87 	bl	80042ca <HAL_SYSTICK_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00e      	b.n	80027e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b0f      	cmp	r3, #15
 80027ca:	d80a      	bhi.n	80027e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027cc:	2200      	movs	r2, #0
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d4:	f001 fd51 	bl	800427a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <HAL_InitTick+0x68>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	24000050 	.word	0x24000050
 80027f0:	24000044 	.word	0x24000044
 80027f4:	2400004c 	.word	0x2400004c

080027f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_IncTick+0x20>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_IncTick+0x24>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_IncTick+0x24>)
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	24000050 	.word	0x24000050
 800281c:	24000668 	.word	0x24000668

08002820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return uwTick;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_GetTick+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	24000668 	.word	0x24000668

08002838 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_SuspendTick+0x1c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_SuspendTick+0x1c>)
 8002842:	f023 0302 	bic.w	r3, r3, #2
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000e010 	.word	0xe000e010

08002858 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_GetREVID+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0c1b      	lsrs	r3, r3, #16
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	5c001000 	.word	0x5c001000

08002870 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	43db      	mvns	r3, r3
 8002882:	401a      	ands	r2, r3
 8002884:	4904      	ldr	r1, [pc, #16]	; (8002898 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	58000400 	.word	0x58000400

0800289c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	609a      	str	r2, [r3, #8]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	609a      	str	r2, [r3, #8]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3360      	adds	r3, #96	; 0x60
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	430b      	orrs	r3, r1
 8002932:	431a      	orrs	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002938:	bf00      	nop
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	431a      	orrs	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	611a      	str	r2, [r3, #16]
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002976:	b480      	push	{r7}
 8002978:	b087      	sub	sp, #28
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3360      	adds	r3, #96	; 0x60
 8002986:	461a      	mov	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	431a      	orrs	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	601a      	str	r2, [r3, #0]
  }
}
 80029a0:	bf00      	nop
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b087      	sub	sp, #28
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3330      	adds	r3, #48	; 0x30
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	4413      	add	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	211f      	movs	r1, #31
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	401a      	ands	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	f003 011f 	and.w	r1, r3, #31
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f023 0203 	bic.w	r2, r3, #3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	60da      	str	r2, [r3, #12]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3314      	adds	r3, #20
 8002a60:	461a      	mov	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	0e5b      	lsrs	r3, r3, #25
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	4413      	add	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	0d1b      	lsrs	r3, r3, #20
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	2107      	movs	r1, #7
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	401a      	ands	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	0d1b      	lsrs	r3, r3, #20
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	431a      	orrs	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f003 0318 	and.w	r3, r3, #24
 8002aca:	4908      	ldr	r1, [pc, #32]	; (8002aec <LL_ADC_SetChannelSingleDiff+0x44>)
 8002acc:	40d9      	lsrs	r1, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	400b      	ands	r3, r1
 8002ad2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	000fffff 	.word	0x000fffff

08002af0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 031f 	and.w	r3, r3, #31
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6093      	str	r3, [r2, #8]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	5fffffc0 	.word	0x5fffffc0

08002b30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b44:	d101      	bne.n	8002b4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <LL_ADC_EnableInternalRegulator+0x24>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	6fffffc0 	.word	0x6fffffc0

08002b80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b94:	d101      	bne.n	8002b9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <LL_ADC_Enable+0x24>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	f043 0201 	orr.w	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	7fffffc0 	.word	0x7fffffc0

08002bd0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <LL_ADC_Disable+0x24>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	f043 0202 	orr.w	r2, r3, #2
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	7fffffc0 	.word	0x7fffffc0

08002bf8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <LL_ADC_IsEnabled+0x18>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <LL_ADC_IsEnabled+0x1a>
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d101      	bne.n	8002c36 <LL_ADC_IsDisableOngoing+0x18>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <LL_ADC_IsDisableOngoing+0x1a>
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <LL_ADC_REG_StartConversion+0x24>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	f043 0204 	orr.w	r2, r3, #4
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	7fffffc0 	.word	0x7fffffc0

08002c6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d101      	bne.n	8002c84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d101      	bne.n	8002caa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b089      	sub	sp, #36	; 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e18f      	b.n	8002ff2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7fe ffbb 	bl	8001c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff19 	bl	8002b30 <LL_ADC_IsDeepPowerDownEnabled>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff feff 	bl	8002b0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff34 	bl	8002b80 <LL_ADC_IsInternalRegulatorEnabled>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d114      	bne.n	8002d48 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ff18 	bl	8002b58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d28:	4b87      	ldr	r3, [pc, #540]	; (8002f48 <HAL_ADC_Init+0x290>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	4a87      	ldr	r2, [pc, #540]	; (8002f4c <HAL_ADC_Init+0x294>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	3301      	adds	r3, #1
 8002d38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d3a:	e002      	b.n	8002d42 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f9      	bne.n	8002d3c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff17 	bl	8002b80 <LL_ADC_IsInternalRegulatorEnabled>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	f043 0210 	orr.w	r2, r3, #16
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	f043 0201 	orr.w	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff77 	bl	8002c6c <LL_ADC_REG_IsConversionOngoing>
 8002d7e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f040 8129 	bne.w	8002fe0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f040 8125 	bne.w	8002fe0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d9e:	f043 0202 	orr.w	r2, r3, #2
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff24 	bl	8002bf8 <LL_ADC_IsEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d136      	bne.n	8002e24 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a65      	ldr	r2, [pc, #404]	; (8002f50 <HAL_ADC_Init+0x298>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_ADC_Init+0x112>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a63      	ldr	r2, [pc, #396]	; (8002f54 <HAL_ADC_Init+0x29c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d10e      	bne.n	8002de8 <HAL_ADC_Init+0x130>
 8002dca:	4861      	ldr	r0, [pc, #388]	; (8002f50 <HAL_ADC_Init+0x298>)
 8002dcc:	f7ff ff14 	bl	8002bf8 <LL_ADC_IsEnabled>
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	4860      	ldr	r0, [pc, #384]	; (8002f54 <HAL_ADC_Init+0x29c>)
 8002dd4:	f7ff ff10 	bl	8002bf8 <LL_ADC_IsEnabled>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4323      	orrs	r3, r4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e008      	b.n	8002dfa <HAL_ADC_Init+0x142>
 8002de8:	485b      	ldr	r0, [pc, #364]	; (8002f58 <HAL_ADC_Init+0x2a0>)
 8002dea:	f7ff ff05 	bl	8002bf8 <LL_ADC_IsEnabled>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d012      	beq.n	8002e24 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a53      	ldr	r2, [pc, #332]	; (8002f50 <HAL_ADC_Init+0x298>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_ADC_Init+0x15a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a51      	ldr	r2, [pc, #324]	; (8002f54 <HAL_ADC_Init+0x29c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_Init+0x15e>
 8002e12:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_ADC_Init+0x2a4>)
 8002e14:	e000      	b.n	8002e18 <HAL_ADC_Init+0x160>
 8002e16:	4a52      	ldr	r2, [pc, #328]	; (8002f60 <HAL_ADC_Init+0x2a8>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	f7ff fd3c 	bl	800289c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002e24:	f7ff fd18 	bl	8002858 <HAL_GetREVID>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d914      	bls.n	8002e5c <HAL_ADC_Init+0x1a4>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d110      	bne.n	8002e5c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7d5b      	ldrb	r3, [r3, #21]
 8002e3e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e44:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e4a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7f1b      	ldrb	r3, [r3, #28]
 8002e50:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e52:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e54:	f043 030c 	orr.w	r3, r3, #12
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	e00d      	b.n	8002e78 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7d5b      	ldrb	r3, [r3, #21]
 8002e60:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e66:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e6c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	7f1b      	ldrb	r3, [r3, #28]
 8002e72:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	7f1b      	ldrb	r3, [r3, #28]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	045b      	lsls	r3, r3, #17
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <HAL_ADC_Init+0x2ac>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	69b9      	ldr	r1, [r7, #24]
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fed2 	bl	8002c6c <LL_ADC_REG_IsConversionOngoing>
 8002ec8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fedf 	bl	8002c92 <LL_ADC_INJ_IsConversionOngoing>
 8002ed4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d15f      	bne.n	8002f9c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d15c      	bne.n	8002f9c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7d1b      	ldrb	r3, [r3, #20]
 8002ee6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_ADC_Init+0x2b0>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	430b      	orrs	r3, r1
 8002f02:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d130      	bne.n	8002f70 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <HAL_ADC_Init+0x2b4>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f22:	3a01      	subs	r2, #1
 8002f24:	0411      	lsls	r1, r2, #16
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f2a:	4311      	orrs	r1, r2
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f30:	4311      	orrs	r1, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f36:	430a      	orrs	r2, r1
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	611a      	str	r2, [r3, #16]
 8002f44:	e01c      	b.n	8002f80 <HAL_ADC_Init+0x2c8>
 8002f46:	bf00      	nop
 8002f48:	24000044 	.word	0x24000044
 8002f4c:	053e2d63 	.word	0x053e2d63
 8002f50:	40022000 	.word	0x40022000
 8002f54:	40022100 	.word	0x40022100
 8002f58:	58026000 	.word	0x58026000
 8002f5c:	40022300 	.word	0x40022300
 8002f60:	58026300 	.word	0x58026300
 8002f64:	fff0c003 	.word	0xfff0c003
 8002f68:	ffffbffc 	.word	0xffffbffc
 8002f6c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fdec 	bl	8003b74 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d10c      	bne.n	8002fbe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f023 010f 	bic.w	r1, r3, #15
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	1e5a      	subs	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
 8002fbc:	e007      	b.n	8002fce <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 020f 	bic.w	r2, r2, #15
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	f023 0303 	bic.w	r3, r3, #3
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54
 8002fde:	e007      	b.n	8002ff0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	f043 0210 	orr.w	r2, r3, #16
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3724      	adds	r7, #36	; 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}
 8002ffa:	bf00      	nop

08002ffc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a55      	ldr	r2, [pc, #340]	; (8003164 <HAL_ADC_Start_DMA+0x168>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <HAL_ADC_Start_DMA+0x20>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a54      	ldr	r2, [pc, #336]	; (8003168 <HAL_ADC_Start_DMA+0x16c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d101      	bne.n	8003020 <HAL_ADC_Start_DMA+0x24>
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_ADC_Start_DMA+0x170>)
 800301e:	e000      	b.n	8003022 <HAL_ADC_Start_DMA+0x26>
 8003020:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_ADC_Start_DMA+0x174>)
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fd64 	bl	8002af0 <LL_ADC_GetMultimode>
 8003028:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fe1c 	bl	8002c6c <LL_ADC_REG_IsConversionOngoing>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	f040 808c 	bne.w	8003154 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_ADC_Start_DMA+0x4e>
 8003046:	2302      	movs	r3, #2
 8003048:	e087      	b.n	800315a <HAL_ADC_Start_DMA+0x15e>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2b05      	cmp	r3, #5
 800305c:	d002      	beq.n	8003064 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b09      	cmp	r3, #9
 8003062:	d170      	bne.n	8003146 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fc07 	bl	8003878 <ADC_Enable>
 800306a:	4603      	mov	r3, r0
 800306c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d163      	bne.n	800313c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003078:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <HAL_ADC_Start_DMA+0x178>)
 800307a:	4013      	ands	r3, r2
 800307c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a37      	ldr	r2, [pc, #220]	; (8003168 <HAL_ADC_Start_DMA+0x16c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d002      	beq.n	8003094 <HAL_ADC_Start_DMA+0x98>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	e000      	b.n	8003096 <HAL_ADC_Start_DMA+0x9a>
 8003094:	4b33      	ldr	r3, [pc, #204]	; (8003164 <HAL_ADC_Start_DMA+0x168>)
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	4293      	cmp	r3, r2
 800309c:	d002      	beq.n	80030a4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d105      	bne.n	80030b0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d006      	beq.n	80030ca <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	f023 0206 	bic.w	r2, r3, #6
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	659a      	str	r2, [r3, #88]	; 0x58
 80030c8:	e002      	b.n	80030d0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d4:	4a28      	ldr	r2, [pc, #160]	; (8003178 <HAL_ADC_Start_DMA+0x17c>)
 80030d6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030dc:	4a27      	ldr	r2, [pc, #156]	; (800317c <HAL_ADC_Start_DMA+0x180>)
 80030de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e4:	4a26      	ldr	r2, [pc, #152]	; (8003180 <HAL_ADC_Start_DMA+0x184>)
 80030e6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	221c      	movs	r2, #28
 80030ee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0210 	orr.w	r2, r2, #16
 8003106:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f7ff fc89 	bl	8002a2a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3340      	adds	r3, #64	; 0x40
 8003122:	4619      	mov	r1, r3
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f001 ff04 	bl	8004f34 <HAL_DMA_Start_IT>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fd85 	bl	8002c44 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800313a:	e00d      	b.n	8003158 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003144:	e008      	b.n	8003158 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003152:	e001      	b.n	8003158 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003154:	2302      	movs	r3, #2
 8003156:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003158:	7dfb      	ldrb	r3, [r7, #23]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40022000 	.word	0x40022000
 8003168:	40022100 	.word	0x40022100
 800316c:	40022300 	.word	0x40022300
 8003170:	58026300 	.word	0x58026300
 8003174:	fffff0fe 	.word	0xfffff0fe
 8003178:	08003a4b 	.word	0x08003a4b
 800317c:	08003b23 	.word	0x08003b23
 8003180:	08003b3f 	.word	0x08003b3f

08003184 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b0a1      	sub	sp, #132	; 0x84
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a65      	ldr	r2, [pc, #404]	; (8003370 <HAL_ADC_ConfigChannel+0x1b0>)
 80031da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x2a>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e32e      	b.n	8003848 <HAL_ADC_ConfigChannel+0x688>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fd38 	bl	8002c6c <LL_ADC_REG_IsConversionOngoing>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 8313 	bne.w	800382a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	db2c      	blt.n	8003266 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003214:	2b00      	cmp	r3, #0
 8003216:	d108      	bne.n	800322a <HAL_ADC_ConfigChannel+0x6a>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0e9b      	lsrs	r3, r3, #26
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2201      	movs	r2, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	e016      	b.n	8003258 <HAL_ADC_ConfigChannel+0x98>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800323a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800323c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003242:	2320      	movs	r3, #32
 8003244:	e003      	b.n	800324e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	2201      	movs	r2, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	69d1      	ldr	r1, [r2, #28]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	430b      	orrs	r3, r1
 8003264:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	f7ff fbad 	bl	80029d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fcf5 	bl	8002c6c <LL_ADC_REG_IsConversionOngoing>
 8003282:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fd02 	bl	8002c92 <LL_ADC_INJ_IsConversionOngoing>
 800328e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003292:	2b00      	cmp	r3, #0
 8003294:	f040 80b8 	bne.w	8003408 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 80b4 	bne.w	8003408 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	461a      	mov	r2, r3
 80032ae:	f7ff fbcf 	bl	8002a50 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032b2:	4b30      	ldr	r3, [pc, #192]	; (8003374 <HAL_ADC_ConfigChannel+0x1b4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80032ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032be:	d10b      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x118>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	e01d      	b.n	8003314 <HAL_ADC_ConfigChannel+0x154>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10b      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x13e>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	e00a      	b.n	8003314 <HAL_ADC_ConfigChannel+0x154>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b04      	cmp	r3, #4
 800331c:	d02c      	beq.n	8003378 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6919      	ldr	r1, [r3, #16]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800332c:	f7ff faea 	bl	8002904 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	6919      	ldr	r1, [r3, #16]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	7e5b      	ldrb	r3, [r3, #25]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d102      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x186>
 8003340:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003344:	e000      	b.n	8003348 <HAL_ADC_ConfigChannel+0x188>
 8003346:	2300      	movs	r3, #0
 8003348:	461a      	mov	r2, r3
 800334a:	f7ff fb14 	bl	8002976 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6919      	ldr	r1, [r3, #16]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	7e1b      	ldrb	r3, [r3, #24]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d102      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x1a4>
 800335e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003362:	e000      	b.n	8003366 <HAL_ADC_ConfigChannel+0x1a6>
 8003364:	2300      	movs	r3, #0
 8003366:	461a      	mov	r2, r3
 8003368:	f7ff faec 	bl	8002944 <LL_ADC_SetDataRightShift>
 800336c:	e04c      	b.n	8003408 <HAL_ADC_ConfigChannel+0x248>
 800336e:	bf00      	nop
 8003370:	47ff0000 	.word	0x47ff0000
 8003374:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	069b      	lsls	r3, r3, #26
 8003388:	429a      	cmp	r2, r3
 800338a:	d107      	bne.n	800339c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800339a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	069b      	lsls	r3, r3, #26
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d107      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033be:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	069b      	lsls	r3, r3, #26
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d107      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033e2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	069b      	lsls	r3, r3, #26
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d107      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003406:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fbf3 	bl	8002bf8 <LL_ADC_IsEnabled>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 8211 	bne.w	800383c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	461a      	mov	r2, r3
 8003428:	f7ff fb3e 	bl	8002aa8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4aa1      	ldr	r2, [pc, #644]	; (80036b8 <HAL_ADC_ConfigChannel+0x4f8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	f040 812e 	bne.w	8003694 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x2a0>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0e9b      	lsrs	r3, r3, #26
 800344e:	3301      	adds	r3, #1
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	2b09      	cmp	r3, #9
 8003456:	bf94      	ite	ls
 8003458:	2301      	movls	r3, #1
 800345a:	2300      	movhi	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e019      	b.n	8003494 <HAL_ADC_ConfigChannel+0x2d4>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800346e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003470:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003478:	2320      	movs	r3, #32
 800347a:	e003      	b.n	8003484 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800347c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	3301      	adds	r3, #1
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	2b09      	cmp	r3, #9
 800348c:	bf94      	ite	ls
 800348e:	2301      	movls	r3, #1
 8003490:	2300      	movhi	r3, #0
 8003492:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003494:	2b00      	cmp	r3, #0
 8003496:	d079      	beq.n	800358c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x2f4>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	0e9b      	lsrs	r3, r3, #26
 80034aa:	3301      	adds	r3, #1
 80034ac:	069b      	lsls	r3, r3, #26
 80034ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b2:	e015      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x320>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80034c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80034c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80034cc:	2320      	movs	r3, #32
 80034ce:	e003      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80034d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	3301      	adds	r3, #1
 80034da:	069b      	lsls	r3, r3, #26
 80034dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x340>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	0e9b      	lsrs	r3, r3, #26
 80034f2:	3301      	adds	r3, #1
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	2101      	movs	r1, #1
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	e017      	b.n	8003530 <HAL_ADC_ConfigChannel+0x370>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003510:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003518:	2320      	movs	r3, #32
 800351a:	e003      	b.n	8003524 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800351c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3301      	adds	r3, #1
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	2101      	movs	r1, #1
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	ea42 0103 	orr.w	r1, r2, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x396>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0e9b      	lsrs	r3, r3, #26
 8003546:	3301      	adds	r3, #1
 8003548:	f003 021f 	and.w	r2, r3, #31
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	051b      	lsls	r3, r3, #20
 8003554:	e018      	b.n	8003588 <HAL_ADC_ConfigChannel+0x3c8>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800356e:	2320      	movs	r3, #32
 8003570:	e003      	b.n	800357a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	3301      	adds	r3, #1
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003588:	430b      	orrs	r3, r1
 800358a:	e07e      	b.n	800368a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003594:	2b00      	cmp	r3, #0
 8003596:	d107      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x3e8>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	0e9b      	lsrs	r3, r3, #26
 800359e:	3301      	adds	r3, #1
 80035a0:	069b      	lsls	r3, r3, #26
 80035a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a6:	e015      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x414>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e003      	b.n	80035cc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	069b      	lsls	r3, r3, #26
 80035d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x434>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	0e9b      	lsrs	r3, r3, #26
 80035e6:	3301      	adds	r3, #1
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	2101      	movs	r1, #1
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	e017      	b.n	8003624 <HAL_ADC_ConfigChannel+0x464>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	61bb      	str	r3, [r7, #24]
  return result;
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800360c:	2320      	movs	r3, #32
 800360e:	e003      	b.n	8003618 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2101      	movs	r1, #1
 8003620:	fa01 f303 	lsl.w	r3, r1, r3
 8003624:	ea42 0103 	orr.w	r1, r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10d      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x490>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	0e9b      	lsrs	r3, r3, #26
 800363a:	3301      	adds	r3, #1
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	3b1e      	subs	r3, #30
 8003648:	051b      	lsls	r3, r3, #20
 800364a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800364e:	e01b      	b.n	8003688 <HAL_ADC_ConfigChannel+0x4c8>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	60fb      	str	r3, [r7, #12]
  return result;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003668:	2320      	movs	r3, #32
 800366a:	e003      	b.n	8003674 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	3301      	adds	r3, #1
 8003676:	f003 021f 	and.w	r2, r3, #31
 800367a:	4613      	mov	r3, r2
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	4413      	add	r3, r2
 8003680:	3b1e      	subs	r3, #30
 8003682:	051b      	lsls	r3, r3, #20
 8003684:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003688:	430b      	orrs	r3, r1
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	6892      	ldr	r2, [r2, #8]
 800368e:	4619      	mov	r1, r3
 8003690:	f7ff f9de 	bl	8002a50 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f280 80cf 	bge.w	800383c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a06      	ldr	r2, [pc, #24]	; (80036bc <HAL_ADC_ConfigChannel+0x4fc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_ADC_ConfigChannel+0x4f2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <HAL_ADC_ConfigChannel+0x500>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10a      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x508>
 80036b2:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <HAL_ADC_ConfigChannel+0x504>)
 80036b4:	e009      	b.n	80036ca <HAL_ADC_ConfigChannel+0x50a>
 80036b6:	bf00      	nop
 80036b8:	47ff0000 	.word	0x47ff0000
 80036bc:	40022000 	.word	0x40022000
 80036c0:	40022100 	.word	0x40022100
 80036c4:	40022300 	.word	0x40022300
 80036c8:	4b61      	ldr	r3, [pc, #388]	; (8003850 <HAL_ADC_ConfigChannel+0x690>)
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff f90c 	bl	80028e8 <LL_ADC_GetCommonPathInternalCh>
 80036d0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a5f      	ldr	r2, [pc, #380]	; (8003854 <HAL_ADC_ConfigChannel+0x694>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_ADC_ConfigChannel+0x526>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a5d      	ldr	r2, [pc, #372]	; (8003858 <HAL_ADC_ConfigChannel+0x698>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d10e      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x544>
 80036e6:	485b      	ldr	r0, [pc, #364]	; (8003854 <HAL_ADC_ConfigChannel+0x694>)
 80036e8:	f7ff fa86 	bl	8002bf8 <LL_ADC_IsEnabled>
 80036ec:	4604      	mov	r4, r0
 80036ee:	485a      	ldr	r0, [pc, #360]	; (8003858 <HAL_ADC_ConfigChannel+0x698>)
 80036f0:	f7ff fa82 	bl	8002bf8 <LL_ADC_IsEnabled>
 80036f4:	4603      	mov	r3, r0
 80036f6:	4323      	orrs	r3, r4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e008      	b.n	8003716 <HAL_ADC_ConfigChannel+0x556>
 8003704:	4855      	ldr	r0, [pc, #340]	; (800385c <HAL_ADC_ConfigChannel+0x69c>)
 8003706:	f7ff fa77 	bl	8002bf8 <LL_ADC_IsEnabled>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d07d      	beq.n	8003816 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a50      	ldr	r2, [pc, #320]	; (8003860 <HAL_ADC_ConfigChannel+0x6a0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d130      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x5c6>
 8003724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003726:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d12b      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a4a      	ldr	r2, [pc, #296]	; (800385c <HAL_ADC_ConfigChannel+0x69c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	f040 8081 	bne.w	800383c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a45      	ldr	r2, [pc, #276]	; (8003854 <HAL_ADC_ConfigChannel+0x694>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d004      	beq.n	800374e <HAL_ADC_ConfigChannel+0x58e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a43      	ldr	r2, [pc, #268]	; (8003858 <HAL_ADC_ConfigChannel+0x698>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x592>
 800374e:	4a45      	ldr	r2, [pc, #276]	; (8003864 <HAL_ADC_ConfigChannel+0x6a4>)
 8003750:	e000      	b.n	8003754 <HAL_ADC_ConfigChannel+0x594>
 8003752:	4a3f      	ldr	r2, [pc, #252]	; (8003850 <HAL_ADC_ConfigChannel+0x690>)
 8003754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003756:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800375a:	4619      	mov	r1, r3
 800375c:	4610      	mov	r0, r2
 800375e:	f7ff f8b0 	bl	80028c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003762:	4b41      	ldr	r3, [pc, #260]	; (8003868 <HAL_ADC_ConfigChannel+0x6a8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	4a40      	ldr	r2, [pc, #256]	; (800386c <HAL_ADC_ConfigChannel+0x6ac>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	099b      	lsrs	r3, r3, #6
 8003770:	3301      	adds	r3, #1
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003776:	e002      	b.n	800377e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	3b01      	subs	r3, #1
 800377c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f9      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003784:	e05a      	b.n	800383c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a39      	ldr	r2, [pc, #228]	; (8003870 <HAL_ADC_ConfigChannel+0x6b0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d11e      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x60e>
 8003790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d119      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a2f      	ldr	r2, [pc, #188]	; (800385c <HAL_ADC_ConfigChannel+0x69c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d14b      	bne.n	800383c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <HAL_ADC_ConfigChannel+0x694>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <HAL_ADC_ConfigChannel+0x5f8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a29      	ldr	r2, [pc, #164]	; (8003858 <HAL_ADC_ConfigChannel+0x698>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x5fc>
 80037b8:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <HAL_ADC_ConfigChannel+0x6a4>)
 80037ba:	e000      	b.n	80037be <HAL_ADC_ConfigChannel+0x5fe>
 80037bc:	4a24      	ldr	r2, [pc, #144]	; (8003850 <HAL_ADC_ConfigChannel+0x690>)
 80037be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f7ff f87b 	bl	80028c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037cc:	e036      	b.n	800383c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a28      	ldr	r2, [pc, #160]	; (8003874 <HAL_ADC_ConfigChannel+0x6b4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d131      	bne.n	800383c <HAL_ADC_ConfigChannel+0x67c>
 80037d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d12c      	bne.n	800383c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_ADC_ConfigChannel+0x69c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d127      	bne.n	800383c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a18      	ldr	r2, [pc, #96]	; (8003854 <HAL_ADC_ConfigChannel+0x694>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_ADC_ConfigChannel+0x640>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a17      	ldr	r2, [pc, #92]	; (8003858 <HAL_ADC_ConfigChannel+0x698>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x644>
 8003800:	4a18      	ldr	r2, [pc, #96]	; (8003864 <HAL_ADC_ConfigChannel+0x6a4>)
 8003802:	e000      	b.n	8003806 <HAL_ADC_ConfigChannel+0x646>
 8003804:	4a12      	ldr	r2, [pc, #72]	; (8003850 <HAL_ADC_ConfigChannel+0x690>)
 8003806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003808:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800380c:	4619      	mov	r1, r3
 800380e:	4610      	mov	r0, r2
 8003810:	f7ff f857 	bl	80028c2 <LL_ADC_SetCommonPathInternalCh>
 8003814:	e012      	b.n	800383c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003828:	e008      	b.n	800383c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	f043 0220 	orr.w	r2, r3, #32
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003844:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003848:	4618      	mov	r0, r3
 800384a:	3784      	adds	r7, #132	; 0x84
 800384c:	46bd      	mov	sp, r7
 800384e:	bd90      	pop	{r4, r7, pc}
 8003850:	58026300 	.word	0x58026300
 8003854:	40022000 	.word	0x40022000
 8003858:	40022100 	.word	0x40022100
 800385c:	58026000 	.word	0x58026000
 8003860:	cb840000 	.word	0xcb840000
 8003864:	40022300 	.word	0x40022300
 8003868:	24000044 	.word	0x24000044
 800386c:	053e2d63 	.word	0x053e2d63
 8003870:	c7520000 	.word	0xc7520000
 8003874:	cfb80000 	.word	0xcfb80000

08003878 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff f9b7 	bl	8002bf8 <LL_ADC_IsEnabled>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d16e      	bne.n	800396e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	4b38      	ldr	r3, [pc, #224]	; (8003978 <ADC_Enable+0x100>)
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e05a      	b.n	8003970 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff f972 	bl	8002ba8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038c4:	f7fe ffac 	bl	8002820 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2b      	ldr	r2, [pc, #172]	; (800397c <ADC_Enable+0x104>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <ADC_Enable+0x66>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a29      	ldr	r2, [pc, #164]	; (8003980 <ADC_Enable+0x108>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <ADC_Enable+0x6a>
 80038de:	4b29      	ldr	r3, [pc, #164]	; (8003984 <ADC_Enable+0x10c>)
 80038e0:	e000      	b.n	80038e4 <ADC_Enable+0x6c>
 80038e2:	4b29      	ldr	r3, [pc, #164]	; (8003988 <ADC_Enable+0x110>)
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff f903 	bl	8002af0 <LL_ADC_GetMultimode>
 80038ea:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a23      	ldr	r2, [pc, #140]	; (8003980 <ADC_Enable+0x108>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d002      	beq.n	80038fc <ADC_Enable+0x84>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	e000      	b.n	80038fe <ADC_Enable+0x86>
 80038fc:	4b1f      	ldr	r3, [pc, #124]	; (800397c <ADC_Enable+0x104>)
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	4293      	cmp	r3, r2
 8003904:	d02c      	beq.n	8003960 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d130      	bne.n	800396e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800390c:	e028      	b.n	8003960 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff f970 	bl	8002bf8 <LL_ADC_IsEnabled>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff f940 	bl	8002ba8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003928:	f7fe ff7a 	bl	8002820 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d914      	bls.n	8003960 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d00d      	beq.n	8003960 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f043 0210 	orr.w	r2, r3, #16
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003954:	f043 0201 	orr.w	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e007      	b.n	8003970 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b01      	cmp	r3, #1
 800396c:	d1cf      	bne.n	800390e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	8000003f 	.word	0x8000003f
 800397c:	40022000 	.word	0x40022000
 8003980:	40022100 	.word	0x40022100
 8003984:	40022300 	.word	0x40022300
 8003988:	58026300 	.word	0x58026300

0800398c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff f940 	bl	8002c1e <LL_ADC_IsDisableOngoing>
 800399e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff f927 	bl	8002bf8 <LL_ADC_IsEnabled>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d047      	beq.n	8003a40 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d144      	bne.n	8003a40 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030d 	and.w	r3, r3, #13
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d10c      	bne.n	80039de <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff f901 	bl	8002bd0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2203      	movs	r2, #3
 80039d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039d6:	f7fe ff23 	bl	8002820 <HAL_GetTick>
 80039da:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039dc:	e029      	b.n	8003a32 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	f043 0210 	orr.w	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e023      	b.n	8003a42 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039fa:	f7fe ff11 	bl	8002820 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d914      	bls.n	8003a32 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1a:	f043 0210 	orr.w	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	f043 0201 	orr.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e007      	b.n	8003a42 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1dc      	bne.n	80039fa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d14b      	bne.n	8003afc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d021      	beq.n	8003ac2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe ff92 	bl	80029ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d032      	beq.n	8003af4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d12b      	bne.n	8003af4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d11f      	bne.n	8003af4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54
 8003ac0:	e018      	b.n	8003af4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d111      	bne.n	8003af4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d105      	bne.n	8003af4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	f043 0201 	orr.w	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7ff fb45 	bl	8003184 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003afa:	e00e      	b.n	8003b1a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f7ff fb4f 	bl	80031ac <HAL_ADC_ErrorCallback>
}
 8003b0e:	e004      	b.n	8003b1a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4798      	blx	r3
}
 8003b1a:	bf00      	nop
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f7ff fb31 	bl	8003198 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	f043 0204 	orr.w	r2, r3, #4
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f7ff fb21 	bl	80031ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a7a      	ldr	r2, [pc, #488]	; (8003d6c <ADC_ConfigureBoostMode+0x1f8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d004      	beq.n	8003b90 <ADC_ConfigureBoostMode+0x1c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a79      	ldr	r2, [pc, #484]	; (8003d70 <ADC_ConfigureBoostMode+0x1fc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d109      	bne.n	8003ba4 <ADC_ConfigureBoostMode+0x30>
 8003b90:	4b78      	ldr	r3, [pc, #480]	; (8003d74 <ADC_ConfigureBoostMode+0x200>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e008      	b.n	8003bb6 <ADC_ConfigureBoostMode+0x42>
 8003ba4:	4b74      	ldr	r3, [pc, #464]	; (8003d78 <ADC_ConfigureBoostMode+0x204>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01c      	beq.n	8003bf4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003bba:	f005 fc65 	bl	8009488 <HAL_RCC_GetHCLKFreq>
 8003bbe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bc8:	d010      	beq.n	8003bec <ADC_ConfigureBoostMode+0x78>
 8003bca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bce:	d873      	bhi.n	8003cb8 <ADC_ConfigureBoostMode+0x144>
 8003bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd4:	d002      	beq.n	8003bdc <ADC_ConfigureBoostMode+0x68>
 8003bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bda:	d16d      	bne.n	8003cb8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be8:	60fb      	str	r3, [r7, #12]
        break;
 8003bea:	e068      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	60fb      	str	r3, [r7, #12]
        break;
 8003bf2:	e064      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003bf4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003bf8:	f04f 0100 	mov.w	r1, #0
 8003bfc:	f006 feaa 	bl	800a954 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c00:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003c0a:	d051      	beq.n	8003cb0 <ADC_ConfigureBoostMode+0x13c>
 8003c0c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003c10:	d854      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c12:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003c16:	d047      	beq.n	8003ca8 <ADC_ConfigureBoostMode+0x134>
 8003c18:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003c1c:	d84e      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c1e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c22:	d03d      	beq.n	8003ca0 <ADC_ConfigureBoostMode+0x12c>
 8003c24:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c28:	d848      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c2e:	d033      	beq.n	8003c98 <ADC_ConfigureBoostMode+0x124>
 8003c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c34:	d842      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c36:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c3a:	d029      	beq.n	8003c90 <ADC_ConfigureBoostMode+0x11c>
 8003c3c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c40:	d83c      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c42:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c46:	d01a      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c48:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c4c:	d836      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c4e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c52:	d014      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c54:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c58:	d830      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c5e:	d00e      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c64:	d82a      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c6a:	d008      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c70:	d824      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c76:	d002      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c7c:	d11e      	bne.n	8003cbc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	0c9b      	lsrs	r3, r3, #18
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
        break;
 8003c8e:	e016      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	60fb      	str	r3, [r7, #12]
        break;
 8003c96:	e012      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	60fb      	str	r3, [r7, #12]
        break;
 8003c9e:	e00e      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	099b      	lsrs	r3, r3, #6
 8003ca4:	60fb      	str	r3, [r7, #12]
        break;
 8003ca6:	e00a      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	09db      	lsrs	r3, r3, #7
 8003cac:	60fb      	str	r3, [r7, #12]
        break;
 8003cae:	e006      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	60fb      	str	r3, [r7, #12]
        break;
 8003cb6:	e002      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
        break;
 8003cb8:	bf00      	nop
 8003cba:	e000      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003cbc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003cbe:	f7fe fdcb 	bl	8002858 <HAL_GetREVID>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d815      	bhi.n	8003cf8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4a2b      	ldr	r2, [pc, #172]	; (8003d7c <ADC_ConfigureBoostMode+0x208>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d908      	bls.n	8003ce6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ce4:	e03e      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cf4:	609a      	str	r2, [r3, #8]
}
 8003cf6:	e035      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <ADC_ConfigureBoostMode+0x20c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d808      	bhi.n	8003d18 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d14:	609a      	str	r2, [r3, #8]
}
 8003d16:	e025      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4a1a      	ldr	r2, [pc, #104]	; (8003d84 <ADC_ConfigureBoostMode+0x210>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d80a      	bhi.n	8003d36 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d32:	609a      	str	r2, [r3, #8]
}
 8003d34:	e016      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <ADC_ConfigureBoostMode+0x214>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d80a      	bhi.n	8003d54 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d50:	609a      	str	r2, [r3, #8]
}
 8003d52:	e007      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40022000 	.word	0x40022000
 8003d70:	40022100 	.word	0x40022100
 8003d74:	40022300 	.word	0x40022300
 8003d78:	58026300 	.word	0x58026300
 8003d7c:	01312d00 	.word	0x01312d00
 8003d80:	005f5e10 	.word	0x005f5e10
 8003d84:	00bebc20 	.word	0x00bebc20
 8003d88:	017d7840 	.word	0x017d7840

08003d8c <LL_ADC_IsEnabled>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <LL_ADC_IsEnabled+0x18>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <LL_ADC_IsEnabled+0x1a>
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <LL_ADC_StartCalibration>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	4b09      	ldr	r3, [pc, #36]	; (8003dec <LL_ADC_StartCalibration+0x38>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	609a      	str	r2, [r3, #8]
}
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	3ffeffc0 	.word	0x3ffeffc0

08003df0 <LL_ADC_IsCalibrationOnGoing>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e04:	d101      	bne.n	8003e0a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <LL_ADC_REG_IsConversionOngoing>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d101      	bne.n	8003e30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_ADCEx_Calibration_Start+0x1e>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e04c      	b.n	8003ef8 <HAL_ADCEx_Calibration_Start+0xb8>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff fd90 	bl	800398c <ADC_Disable>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d135      	bne.n	8003ee2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e7a:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	f043 0202 	orr.w	r2, r3, #2
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff ff90 	bl	8003db4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e94:	e014      	b.n	8003ec0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d30d      	bcc.n	8003ec0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	f023 0312 	bic.w	r3, r3, #18
 8003eac:	f043 0210 	orr.w	r2, r3, #16
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e01b      	b.n	8003ef8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff ff93 	bl	8003df0 <LL_ADC_IsCalibrationOnGoing>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e2      	bne.n	8003e96 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	f023 0303 	bic.w	r3, r3, #3
 8003ed8:	f043 0201 	orr.w	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	655a      	str	r2, [r3, #84]	; 0x54
 8003ee0:	e005      	b.n	8003eee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	f043 0210 	orr.w	r2, r3, #16
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	ffffeefd 	.word	0xffffeefd
 8003f04:	25c3f800 	.word	0x25c3f800

08003f08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b09f      	sub	sp, #124	; 0x7c
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e0be      	b.n	80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a5c      	ldr	r2, [pc, #368]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d102      	bne.n	8003f46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f40:	4b5b      	ldr	r3, [pc, #364]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	e001      	b.n	8003f4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f46:	2300      	movs	r3, #0
 8003f48:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e09d      	b.n	80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff ff54 	bl	8003e18 <LL_ADC_REG_IsConversionOngoing>
 8003f70:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff ff4e 	bl	8003e18 <LL_ADC_REG_IsConversionOngoing>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d17f      	bne.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d17c      	bne.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a47      	ldr	r2, [pc, #284]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d004      	beq.n	8003f9c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a46      	ldr	r2, [pc, #280]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d101      	bne.n	8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003f9c:	4b45      	ldr	r3, [pc, #276]	; (80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f9e:	e000      	b.n	8003fa2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003fa0:	4b45      	ldr	r3, [pc, #276]	; (80040b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fa2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d039      	beq.n	8004020 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fbc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a3a      	ldr	r2, [pc, #232]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003fd2:	4836      	ldr	r0, [pc, #216]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fd4:	f7ff feda 	bl	8003d8c <LL_ADC_IsEnabled>
 8003fd8:	4604      	mov	r4, r0
 8003fda:	4835      	ldr	r0, [pc, #212]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fdc:	f7ff fed6 	bl	8003d8c <LL_ADC_IsEnabled>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4323      	orrs	r3, r4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e008      	b.n	8004002 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003ff0:	4832      	ldr	r0, [pc, #200]	; (80040bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ff2:	f7ff fecb 	bl	8003d8c <LL_ADC_IsEnabled>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d047      	beq.n	8004096 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	4b2d      	ldr	r3, [pc, #180]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800400c:	4013      	ands	r3, r2
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	6811      	ldr	r1, [r2, #0]
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	6892      	ldr	r2, [r2, #8]
 8004016:	430a      	orrs	r2, r1
 8004018:	431a      	orrs	r2, r3
 800401a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800401e:	e03a      	b.n	8004096 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1e      	ldr	r2, [pc, #120]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1d      	ldr	r2, [pc, #116]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d10e      	bne.n	800405e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004040:	481a      	ldr	r0, [pc, #104]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004042:	f7ff fea3 	bl	8003d8c <LL_ADC_IsEnabled>
 8004046:	4604      	mov	r4, r0
 8004048:	4819      	ldr	r0, [pc, #100]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800404a:	f7ff fe9f 	bl	8003d8c <LL_ADC_IsEnabled>
 800404e:	4603      	mov	r3, r0
 8004050:	4323      	orrs	r3, r4
 8004052:	2b00      	cmp	r3, #0
 8004054:	bf0c      	ite	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	2300      	movne	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	e008      	b.n	8004070 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800405e:	4817      	ldr	r0, [pc, #92]	; (80040bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004060:	f7ff fe94 	bl	8003d8c <LL_ADC_IsEnabled>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf0c      	ite	eq
 800406a:	2301      	moveq	r3, #1
 800406c:	2300      	movne	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d010      	beq.n	8004096 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800407a:	4013      	ands	r3, r2
 800407c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800407e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004080:	e009      	b.n	8004096 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004094:	e000      	b.n	8004098 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004096:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	377c      	adds	r7, #124	; 0x7c
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd90      	pop	{r4, r7, pc}
 80040ac:	40022000 	.word	0x40022000
 80040b0:	40022100 	.word	0x40022100
 80040b4:	40022300 	.word	0x40022300
 80040b8:	58026300 	.word	0x58026300
 80040bc:	58026000 	.word	0x58026000
 80040c0:	fffff0e0 	.word	0xfffff0e0

080040c4 <__NVIC_SetPriorityGrouping>:
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <__NVIC_SetPriorityGrouping+0x40>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e0:	4013      	ands	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <__NVIC_SetPriorityGrouping+0x44>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040f2:	4a04      	ldr	r2, [pc, #16]	; (8004104 <__NVIC_SetPriorityGrouping+0x40>)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	60d3      	str	r3, [r2, #12]
}
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	e000ed00 	.word	0xe000ed00
 8004108:	05fa0000 	.word	0x05fa0000

0800410c <__NVIC_GetPriorityGrouping>:
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <__NVIC_GetPriorityGrouping+0x18>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	0a1b      	lsrs	r3, r3, #8
 8004116:	f003 0307 	and.w	r3, r3, #7
}
 800411a:	4618      	mov	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	e000ed00 	.word	0xe000ed00

08004128 <__NVIC_EnableIRQ>:
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004136:	2b00      	cmp	r3, #0
 8004138:	db0b      	blt.n	8004152 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	f003 021f 	and.w	r2, r3, #31
 8004140:	4907      	ldr	r1, [pc, #28]	; (8004160 <__NVIC_EnableIRQ+0x38>)
 8004142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2001      	movs	r0, #1
 800414a:	fa00 f202 	lsl.w	r2, r0, r2
 800414e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000e100 	.word	0xe000e100

08004164 <__NVIC_SetPriority>:
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	6039      	str	r1, [r7, #0]
 800416e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004174:	2b00      	cmp	r3, #0
 8004176:	db0a      	blt.n	800418e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	b2da      	uxtb	r2, r3
 800417c:	490c      	ldr	r1, [pc, #48]	; (80041b0 <__NVIC_SetPriority+0x4c>)
 800417e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004182:	0112      	lsls	r2, r2, #4
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	440b      	add	r3, r1
 8004188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800418c:	e00a      	b.n	80041a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4908      	ldr	r1, [pc, #32]	; (80041b4 <__NVIC_SetPriority+0x50>)
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	3b04      	subs	r3, #4
 800419c:	0112      	lsls	r2, r2, #4
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	440b      	add	r3, r1
 80041a2:	761a      	strb	r2, [r3, #24]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000e100 	.word	0xe000e100
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <NVIC_EncodePriority>:
{
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	; 0x24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f1c3 0307 	rsb	r3, r3, #7
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	bf28      	it	cs
 80041d6:	2304      	movcs	r3, #4
 80041d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3304      	adds	r3, #4
 80041de:	2b06      	cmp	r3, #6
 80041e0:	d902      	bls.n	80041e8 <NVIC_EncodePriority+0x30>
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3b03      	subs	r3, #3
 80041e6:	e000      	b.n	80041ea <NVIC_EncodePriority+0x32>
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43da      	mvns	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	401a      	ands	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	43d9      	mvns	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004210:	4313      	orrs	r3, r2
}
 8004212:	4618      	mov	r0, r3
 8004214:	3724      	adds	r7, #36	; 0x24
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3b01      	subs	r3, #1
 800422c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004230:	d301      	bcc.n	8004236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004232:	2301      	movs	r3, #1
 8004234:	e00f      	b.n	8004256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004236:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <SysTick_Config+0x40>)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3b01      	subs	r3, #1
 800423c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800423e:	210f      	movs	r1, #15
 8004240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004244:	f7ff ff8e 	bl	8004164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <SysTick_Config+0x40>)
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800424e:	4b04      	ldr	r3, [pc, #16]	; (8004260 <SysTick_Config+0x40>)
 8004250:	2207      	movs	r2, #7
 8004252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	e000e010 	.word	0xe000e010

08004264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff29 	bl	80040c4 <__NVIC_SetPriorityGrouping>
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b086      	sub	sp, #24
 800427e:	af00      	add	r7, sp, #0
 8004280:	4603      	mov	r3, r0
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004288:	f7ff ff40 	bl	800410c <__NVIC_GetPriorityGrouping>
 800428c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	6978      	ldr	r0, [r7, #20]
 8004294:	f7ff ff90 	bl	80041b8 <NVIC_EncodePriority>
 8004298:	4602      	mov	r2, r0
 800429a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800429e:	4611      	mov	r1, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ff5f 	bl	8004164 <__NVIC_SetPriority>
}
 80042a6:	bf00      	nop
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	4603      	mov	r3, r0
 80042b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff ff33 	bl	8004128 <__NVIC_EnableIRQ>
}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff ffa4 	bl	8004220 <SysTick_Config>
 80042d8:	4603      	mov	r3, r0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e014      	b.n	800431e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	791b      	ldrb	r3, [r3, #4]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d105      	bne.n	800430a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7fd fdc3 	bl	8001e90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2202      	movs	r2, #2
 800430e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e0a2      	b.n	8004486 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	795b      	ldrb	r3, [r3, #5]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_DAC_Start_DMA+0x24>
 8004348:	2302      	movs	r3, #2
 800434a:	e09c      	b.n	8004486 <HAL_DAC_Start_DMA+0x15e>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2201      	movs	r2, #1
 8004350:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2202      	movs	r2, #2
 8004356:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d129      	bne.n	80043b2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	4a4b      	ldr	r2, [pc, #300]	; (8004490 <HAL_DAC_Start_DMA+0x168>)
 8004364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	4a4a      	ldr	r2, [pc, #296]	; (8004494 <HAL_DAC_Start_DMA+0x16c>)
 800436c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	4a49      	ldr	r2, [pc, #292]	; (8004498 <HAL_DAC_Start_DMA+0x170>)
 8004374:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004384:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_DAC_Start_DMA+0x6c>
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	2b04      	cmp	r3, #4
 8004390:	d005      	beq.n	800439e <HAL_DAC_Start_DMA+0x76>
 8004392:	e009      	b.n	80043a8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3308      	adds	r3, #8
 800439a:	613b      	str	r3, [r7, #16]
        break;
 800439c:	e033      	b.n	8004406 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	613b      	str	r3, [r7, #16]
        break;
 80043a6:	e02e      	b.n	8004406 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3310      	adds	r3, #16
 80043ae:	613b      	str	r3, [r7, #16]
        break;
 80043b0:	e029      	b.n	8004406 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	4a39      	ldr	r2, [pc, #228]	; (800449c <HAL_DAC_Start_DMA+0x174>)
 80043b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	4a38      	ldr	r2, [pc, #224]	; (80044a0 <HAL_DAC_Start_DMA+0x178>)
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	4a37      	ldr	r2, [pc, #220]	; (80044a4 <HAL_DAC_Start_DMA+0x17c>)
 80043c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043d8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_DAC_Start_DMA+0xc0>
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d005      	beq.n	80043f2 <HAL_DAC_Start_DMA+0xca>
 80043e6:	e009      	b.n	80043fc <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3314      	adds	r3, #20
 80043ee:	613b      	str	r3, [r7, #16]
        break;
 80043f0:	e009      	b.n	8004406 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3318      	adds	r3, #24
 80043f8:	613b      	str	r3, [r7, #16]
        break;
 80043fa:	e004      	b.n	8004406 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	331c      	adds	r3, #28
 8004402:	613b      	str	r3, [r7, #16]
        break;
 8004404:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d111      	bne.n	8004430 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800441a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6898      	ldr	r0, [r3, #8]
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	f000 fd85 	bl	8004f34 <HAL_DMA_Start_IT>
 800442a:	4603      	mov	r3, r0
 800442c:	75fb      	strb	r3, [r7, #23]
 800442e:	e010      	b.n	8004452 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800443e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	68d8      	ldr	r0, [r3, #12]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	f000 fd73 	bl	8004f34 <HAL_DMA_Start_IT>
 800444e:	4603      	mov	r3, r0
 8004450:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004458:	7dfb      	ldrb	r3, [r7, #23]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2201      	movs	r2, #1
 800446c:	409a      	lsls	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e005      	b.n	8004484 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f043 0204 	orr.w	r2, r3, #4
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004484:	7dfb      	ldrb	r3, [r7, #23]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	08004769 	.word	0x08004769
 8004494:	0800478b 	.word	0x0800478b
 8004498:	080047a7 	.word	0x080047a7
 800449c:	08004811 	.word	0x08004811
 80044a0:	08004833 	.word	0x08004833
 80044a4:	0800484f 	.word	0x0800484f

080044a8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_DAC_ConfigChannel+0x1e>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e12a      	b.n	800475c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	795b      	ldrb	r3, [r3, #5]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_DAC_ConfigChannel+0x2e>
 800450e:	2302      	movs	r3, #2
 8004510:	e124      	b.n	800475c <HAL_DAC_ConfigChannel+0x278>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2202      	movs	r2, #2
 800451c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b04      	cmp	r3, #4
 8004524:	d17a      	bne.n	800461c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004526:	f7fe f97b 	bl	8002820 <HAL_GetTick>
 800452a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d13d      	bne.n	80045ae <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004532:	e018      	b.n	8004566 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004534:	f7fe f974 	bl	8002820 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d911      	bls.n	8004566 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004548:	4b86      	ldr	r3, [pc, #536]	; (8004764 <HAL_DAC_ConfigChannel+0x280>)
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f043 0208 	orr.w	r2, r3, #8
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2203      	movs	r2, #3
 8004560:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e0fa      	b.n	800475c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800456c:	4b7d      	ldr	r3, [pc, #500]	; (8004764 <HAL_DAC_ConfigChannel+0x280>)
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1df      	bne.n	8004534 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	6992      	ldr	r2, [r2, #24]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
 800457e:	e020      	b.n	80045c2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004580:	f7fe f94e 	bl	8002820 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d90f      	bls.n	80045ae <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004594:	2b00      	cmp	r3, #0
 8004596:	da0a      	bge.n	80045ae <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f043 0208 	orr.w	r2, r3, #8
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2203      	movs	r2, #3
 80045a8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e0d6      	b.n	800475c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	dbe3      	blt.n	8004580 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	6992      	ldr	r2, [r2, #24]
 80045c0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80045d2:	fa01 f303 	lsl.w	r3, r1, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	ea02 0103 	and.w	r1, r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	409a      	lsls	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	21ff      	movs	r1, #255	; 0xff
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	ea02 0103 	and.w	r1, r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	6a1a      	ldr	r2, [r3, #32]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	409a      	lsls	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d11d      	bne.n	8004660 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	221f      	movs	r2, #31
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004666:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2207      	movs	r2, #7
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d102      	bne.n	800468a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004684:	2300      	movs	r3, #0
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
 8004688:	e00f      	b.n	80046aa <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d102      	bne.n	8004698 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004692:	2301      	movs	r3, #1
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
 8004696:	e008      	b.n	80046aa <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80046a0:	2301      	movs	r3, #1
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
 80046a4:	e001      	b.n	80046aa <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43da      	mvns	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	400a      	ands	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6819      	ldr	r1, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	22c0      	movs	r2, #192	; 0xc0
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43da      	mvns	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	400a      	ands	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004758:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800475c:	4618      	mov	r0, r3
 800475e:	3728      	adds	r7, #40	; 0x28
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20008000 	.word	0x20008000

08004768 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f7ff fe96 	bl	80044a8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	711a      	strb	r2, [r3, #4]
}
 8004782:	bf00      	nop
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff fe8f 	bl	80044bc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800479e:	bf00      	nop
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b084      	sub	sp, #16
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f043 0204 	orr.w	r2, r3, #4
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f7ff fe85 	bl	80044d0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	711a      	strb	r2, [r3, #4]
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f7ff ffd8 	bl	80047d4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	711a      	strb	r2, [r3, #4]
}
 800482a:	bf00      	nop
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f7ff ffd1 	bl	80047e8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004846:	bf00      	nop
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f043 0204 	orr.w	r2, r3, #4
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f7ff ffc7 	bl	80047fc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	711a      	strb	r2, [r3, #4]
}
 8004874:	bf00      	nop
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004884:	f7fd ffcc 	bl	8002820 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e316      	b.n	8004ec2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a66      	ldr	r2, [pc, #408]	; (8004a34 <HAL_DMA_Init+0x1b8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d04a      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a65      	ldr	r2, [pc, #404]	; (8004a38 <HAL_DMA_Init+0x1bc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d045      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a63      	ldr	r2, [pc, #396]	; (8004a3c <HAL_DMA_Init+0x1c0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d040      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a62      	ldr	r2, [pc, #392]	; (8004a40 <HAL_DMA_Init+0x1c4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d03b      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a60      	ldr	r2, [pc, #384]	; (8004a44 <HAL_DMA_Init+0x1c8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d036      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a5f      	ldr	r2, [pc, #380]	; (8004a48 <HAL_DMA_Init+0x1cc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d031      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a5d      	ldr	r2, [pc, #372]	; (8004a4c <HAL_DMA_Init+0x1d0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02c      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a5c      	ldr	r2, [pc, #368]	; (8004a50 <HAL_DMA_Init+0x1d4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d027      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a5a      	ldr	r2, [pc, #360]	; (8004a54 <HAL_DMA_Init+0x1d8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d022      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a59      	ldr	r2, [pc, #356]	; (8004a58 <HAL_DMA_Init+0x1dc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d01d      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a57      	ldr	r2, [pc, #348]	; (8004a5c <HAL_DMA_Init+0x1e0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d018      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a56      	ldr	r2, [pc, #344]	; (8004a60 <HAL_DMA_Init+0x1e4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a54      	ldr	r2, [pc, #336]	; (8004a64 <HAL_DMA_Init+0x1e8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a53      	ldr	r2, [pc, #332]	; (8004a68 <HAL_DMA_Init+0x1ec>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a51      	ldr	r2, [pc, #324]	; (8004a6c <HAL_DMA_Init+0x1f0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_DMA_Init+0xb8>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a50      	ldr	r2, [pc, #320]	; (8004a70 <HAL_DMA_Init+0x1f4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d101      	bne.n	8004938 <HAL_DMA_Init+0xbc>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <HAL_DMA_Init+0xbe>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 813b 	beq.w	8004bb6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a37      	ldr	r2, [pc, #220]	; (8004a34 <HAL_DMA_Init+0x1b8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d04a      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a36      	ldr	r2, [pc, #216]	; (8004a38 <HAL_DMA_Init+0x1bc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d045      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a34      	ldr	r2, [pc, #208]	; (8004a3c <HAL_DMA_Init+0x1c0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d040      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a33      	ldr	r2, [pc, #204]	; (8004a40 <HAL_DMA_Init+0x1c4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d03b      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a31      	ldr	r2, [pc, #196]	; (8004a44 <HAL_DMA_Init+0x1c8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d036      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a30      	ldr	r2, [pc, #192]	; (8004a48 <HAL_DMA_Init+0x1cc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d031      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a2e      	ldr	r2, [pc, #184]	; (8004a4c <HAL_DMA_Init+0x1d0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d02c      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a2d      	ldr	r2, [pc, #180]	; (8004a50 <HAL_DMA_Init+0x1d4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d027      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a2b      	ldr	r2, [pc, #172]	; (8004a54 <HAL_DMA_Init+0x1d8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d022      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2a      	ldr	r2, [pc, #168]	; (8004a58 <HAL_DMA_Init+0x1dc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d01d      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a28      	ldr	r2, [pc, #160]	; (8004a5c <HAL_DMA_Init+0x1e0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d018      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a27      	ldr	r2, [pc, #156]	; (8004a60 <HAL_DMA_Init+0x1e4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a25      	ldr	r2, [pc, #148]	; (8004a64 <HAL_DMA_Init+0x1e8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00e      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a24      	ldr	r2, [pc, #144]	; (8004a68 <HAL_DMA_Init+0x1ec>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a22      	ldr	r2, [pc, #136]	; (8004a6c <HAL_DMA_Init+0x1f0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_DMA_Init+0x174>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a21      	ldr	r2, [pc, #132]	; (8004a70 <HAL_DMA_Init+0x1f4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d108      	bne.n	8004a02 <HAL_DMA_Init+0x186>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0201 	bic.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e007      	b.n	8004a12 <HAL_DMA_Init+0x196>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0201 	bic.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a12:	e02f      	b.n	8004a74 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a14:	f7fd ff04 	bl	8002820 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b05      	cmp	r3, #5
 8004a20:	d928      	bls.n	8004a74 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2203      	movs	r2, #3
 8004a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e246      	b.n	8004ec2 <HAL_DMA_Init+0x646>
 8004a34:	40020010 	.word	0x40020010
 8004a38:	40020028 	.word	0x40020028
 8004a3c:	40020040 	.word	0x40020040
 8004a40:	40020058 	.word	0x40020058
 8004a44:	40020070 	.word	0x40020070
 8004a48:	40020088 	.word	0x40020088
 8004a4c:	400200a0 	.word	0x400200a0
 8004a50:	400200b8 	.word	0x400200b8
 8004a54:	40020410 	.word	0x40020410
 8004a58:	40020428 	.word	0x40020428
 8004a5c:	40020440 	.word	0x40020440
 8004a60:	40020458 	.word	0x40020458
 8004a64:	40020470 	.word	0x40020470
 8004a68:	40020488 	.word	0x40020488
 8004a6c:	400204a0 	.word	0x400204a0
 8004a70:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1c8      	bne.n	8004a14 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4b83      	ldr	r3, [pc, #524]	; (8004c9c <HAL_DMA_Init+0x420>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004a9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d107      	bne.n	8004ad8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004ad8:	4b71      	ldr	r3, [pc, #452]	; (8004ca0 <HAL_DMA_Init+0x424>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4b71      	ldr	r3, [pc, #452]	; (8004ca4 <HAL_DMA_Init+0x428>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae4:	d328      	bcc.n	8004b38 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b28      	cmp	r3, #40	; 0x28
 8004aec:	d903      	bls.n	8004af6 <HAL_DMA_Init+0x27a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b2e      	cmp	r3, #46	; 0x2e
 8004af4:	d917      	bls.n	8004b26 <HAL_DMA_Init+0x2aa>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b3e      	cmp	r3, #62	; 0x3e
 8004afc:	d903      	bls.n	8004b06 <HAL_DMA_Init+0x28a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b42      	cmp	r3, #66	; 0x42
 8004b04:	d90f      	bls.n	8004b26 <HAL_DMA_Init+0x2aa>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b46      	cmp	r3, #70	; 0x46
 8004b0c:	d903      	bls.n	8004b16 <HAL_DMA_Init+0x29a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b48      	cmp	r3, #72	; 0x48
 8004b14:	d907      	bls.n	8004b26 <HAL_DMA_Init+0x2aa>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b4e      	cmp	r3, #78	; 0x4e
 8004b1c:	d905      	bls.n	8004b2a <HAL_DMA_Init+0x2ae>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b52      	cmp	r3, #82	; 0x52
 8004b24:	d801      	bhi.n	8004b2a <HAL_DMA_Init+0x2ae>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_DMA_Init+0x2b0>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b36:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f023 0307 	bic.w	r3, r3, #7
 8004b4e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d117      	bne.n	8004b92 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00e      	beq.n	8004b92 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f002 fb33 	bl	80071e0 <DMA_CheckFifoParam>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2240      	movs	r2, #64	; 0x40
 8004b84:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e197      	b.n	8004ec2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f002 fa6e 	bl	800707c <DMA_CalcBaseAndBitshift>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	223f      	movs	r2, #63	; 0x3f
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	609a      	str	r2, [r3, #8]
 8004bb4:	e0cd      	b.n	8004d52 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a3b      	ldr	r2, [pc, #236]	; (8004ca8 <HAL_DMA_Init+0x42c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d022      	beq.n	8004c06 <HAL_DMA_Init+0x38a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a39      	ldr	r2, [pc, #228]	; (8004cac <HAL_DMA_Init+0x430>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01d      	beq.n	8004c06 <HAL_DMA_Init+0x38a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a38      	ldr	r2, [pc, #224]	; (8004cb0 <HAL_DMA_Init+0x434>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d018      	beq.n	8004c06 <HAL_DMA_Init+0x38a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a36      	ldr	r2, [pc, #216]	; (8004cb4 <HAL_DMA_Init+0x438>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <HAL_DMA_Init+0x38a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a35      	ldr	r2, [pc, #212]	; (8004cb8 <HAL_DMA_Init+0x43c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <HAL_DMA_Init+0x38a>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a33      	ldr	r2, [pc, #204]	; (8004cbc <HAL_DMA_Init+0x440>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_DMA_Init+0x38a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a32      	ldr	r2, [pc, #200]	; (8004cc0 <HAL_DMA_Init+0x444>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_DMA_Init+0x38a>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a30      	ldr	r2, [pc, #192]	; (8004cc4 <HAL_DMA_Init+0x448>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d101      	bne.n	8004c0a <HAL_DMA_Init+0x38e>
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <HAL_DMA_Init+0x390>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8097 	beq.w	8004d40 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a24      	ldr	r2, [pc, #144]	; (8004ca8 <HAL_DMA_Init+0x42c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d021      	beq.n	8004c60 <HAL_DMA_Init+0x3e4>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a22      	ldr	r2, [pc, #136]	; (8004cac <HAL_DMA_Init+0x430>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01c      	beq.n	8004c60 <HAL_DMA_Init+0x3e4>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a21      	ldr	r2, [pc, #132]	; (8004cb0 <HAL_DMA_Init+0x434>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d017      	beq.n	8004c60 <HAL_DMA_Init+0x3e4>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1f      	ldr	r2, [pc, #124]	; (8004cb4 <HAL_DMA_Init+0x438>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d012      	beq.n	8004c60 <HAL_DMA_Init+0x3e4>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1e      	ldr	r2, [pc, #120]	; (8004cb8 <HAL_DMA_Init+0x43c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00d      	beq.n	8004c60 <HAL_DMA_Init+0x3e4>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1c      	ldr	r2, [pc, #112]	; (8004cbc <HAL_DMA_Init+0x440>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d008      	beq.n	8004c60 <HAL_DMA_Init+0x3e4>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1b      	ldr	r2, [pc, #108]	; (8004cc0 <HAL_DMA_Init+0x444>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <HAL_DMA_Init+0x3e4>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a19      	ldr	r2, [pc, #100]	; (8004cc4 <HAL_DMA_Init+0x448>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2202      	movs	r2, #2
 8004c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <HAL_DMA_Init+0x44c>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b40      	cmp	r3, #64	; 0x40
 8004c88:	d020      	beq.n	8004ccc <HAL_DMA_Init+0x450>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b80      	cmp	r3, #128	; 0x80
 8004c90:	d102      	bne.n	8004c98 <HAL_DMA_Init+0x41c>
 8004c92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c96:	e01a      	b.n	8004cce <HAL_DMA_Init+0x452>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e018      	b.n	8004cce <HAL_DMA_Init+0x452>
 8004c9c:	fe10803f 	.word	0xfe10803f
 8004ca0:	5c001000 	.word	0x5c001000
 8004ca4:	ffff0000 	.word	0xffff0000
 8004ca8:	58025408 	.word	0x58025408
 8004cac:	5802541c 	.word	0x5802541c
 8004cb0:	58025430 	.word	0x58025430
 8004cb4:	58025444 	.word	0x58025444
 8004cb8:	58025458 	.word	0x58025458
 8004cbc:	5802546c 	.word	0x5802546c
 8004cc0:	58025480 	.word	0x58025480
 8004cc4:	58025494 	.word	0x58025494
 8004cc8:	fffe000f 	.word	0xfffe000f
 8004ccc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68d2      	ldr	r2, [r2, #12]
 8004cd2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004cdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ce4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cfc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	461a      	mov	r2, r3
 8004d12:	4b6e      	ldr	r3, [pc, #440]	; (8004ecc <HAL_DMA_Init+0x650>)
 8004d14:	4413      	add	r3, r2
 8004d16:	4a6e      	ldr	r2, [pc, #440]	; (8004ed0 <HAL_DMA_Init+0x654>)
 8004d18:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	009a      	lsls	r2, r3, #2
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f002 f9a9 	bl	800707c <DMA_CalcBaseAndBitshift>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	2201      	movs	r2, #1
 8004d38:	409a      	lsls	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	e008      	b.n	8004d52 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2240      	movs	r2, #64	; 0x40
 8004d44:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2203      	movs	r2, #3
 8004d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e0b7      	b.n	8004ec2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a5f      	ldr	r2, [pc, #380]	; (8004ed4 <HAL_DMA_Init+0x658>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d072      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a5d      	ldr	r2, [pc, #372]	; (8004ed8 <HAL_DMA_Init+0x65c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d06d      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a5c      	ldr	r2, [pc, #368]	; (8004edc <HAL_DMA_Init+0x660>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d068      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a5a      	ldr	r2, [pc, #360]	; (8004ee0 <HAL_DMA_Init+0x664>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d063      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a59      	ldr	r2, [pc, #356]	; (8004ee4 <HAL_DMA_Init+0x668>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d05e      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a57      	ldr	r2, [pc, #348]	; (8004ee8 <HAL_DMA_Init+0x66c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d059      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a56      	ldr	r2, [pc, #344]	; (8004eec <HAL_DMA_Init+0x670>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d054      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a54      	ldr	r2, [pc, #336]	; (8004ef0 <HAL_DMA_Init+0x674>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d04f      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a53      	ldr	r2, [pc, #332]	; (8004ef4 <HAL_DMA_Init+0x678>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d04a      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a51      	ldr	r2, [pc, #324]	; (8004ef8 <HAL_DMA_Init+0x67c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d045      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a50      	ldr	r2, [pc, #320]	; (8004efc <HAL_DMA_Init+0x680>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d040      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a4e      	ldr	r2, [pc, #312]	; (8004f00 <HAL_DMA_Init+0x684>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d03b      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a4d      	ldr	r2, [pc, #308]	; (8004f04 <HAL_DMA_Init+0x688>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d036      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a4b      	ldr	r2, [pc, #300]	; (8004f08 <HAL_DMA_Init+0x68c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d031      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a4a      	ldr	r2, [pc, #296]	; (8004f0c <HAL_DMA_Init+0x690>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d02c      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a48      	ldr	r2, [pc, #288]	; (8004f10 <HAL_DMA_Init+0x694>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d027      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a47      	ldr	r2, [pc, #284]	; (8004f14 <HAL_DMA_Init+0x698>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d022      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a45      	ldr	r2, [pc, #276]	; (8004f18 <HAL_DMA_Init+0x69c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01d      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a44      	ldr	r2, [pc, #272]	; (8004f1c <HAL_DMA_Init+0x6a0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d018      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a42      	ldr	r2, [pc, #264]	; (8004f20 <HAL_DMA_Init+0x6a4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a41      	ldr	r2, [pc, #260]	; (8004f24 <HAL_DMA_Init+0x6a8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <HAL_DMA_Init+0x6ac>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a3e      	ldr	r2, [pc, #248]	; (8004f2c <HAL_DMA_Init+0x6b0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_DMA_Init+0x5c6>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a3c      	ldr	r2, [pc, #240]	; (8004f30 <HAL_DMA_Init+0x6b4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d101      	bne.n	8004e46 <HAL_DMA_Init+0x5ca>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <HAL_DMA_Init+0x5cc>
 8004e46:	2300      	movs	r3, #0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d032      	beq.n	8004eb2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f002 fa43 	bl	80072d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b80      	cmp	r3, #128	; 0x80
 8004e58:	d102      	bne.n	8004e60 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e74:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d010      	beq.n	8004ea0 <HAL_DMA_Init+0x624>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d80c      	bhi.n	8004ea0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f002 fac0 	bl	800740c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e9c:	605a      	str	r2, [r3, #4]
 8004e9e:	e008      	b.n	8004eb2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	a7fdabf8 	.word	0xa7fdabf8
 8004ed0:	cccccccd 	.word	0xcccccccd
 8004ed4:	40020010 	.word	0x40020010
 8004ed8:	40020028 	.word	0x40020028
 8004edc:	40020040 	.word	0x40020040
 8004ee0:	40020058 	.word	0x40020058
 8004ee4:	40020070 	.word	0x40020070
 8004ee8:	40020088 	.word	0x40020088
 8004eec:	400200a0 	.word	0x400200a0
 8004ef0:	400200b8 	.word	0x400200b8
 8004ef4:	40020410 	.word	0x40020410
 8004ef8:	40020428 	.word	0x40020428
 8004efc:	40020440 	.word	0x40020440
 8004f00:	40020458 	.word	0x40020458
 8004f04:	40020470 	.word	0x40020470
 8004f08:	40020488 	.word	0x40020488
 8004f0c:	400204a0 	.word	0x400204a0
 8004f10:	400204b8 	.word	0x400204b8
 8004f14:	58025408 	.word	0x58025408
 8004f18:	5802541c 	.word	0x5802541c
 8004f1c:	58025430 	.word	0x58025430
 8004f20:	58025444 	.word	0x58025444
 8004f24:	58025458 	.word	0x58025458
 8004f28:	5802546c 	.word	0x5802546c
 8004f2c:	58025480 	.word	0x58025480
 8004f30:	58025494 	.word	0x58025494

08004f34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e226      	b.n	800539e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_DMA_Start_IT+0x2a>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e21f      	b.n	800539e <HAL_DMA_Start_IT+0x46a>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	f040 820a 	bne.w	8005388 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a68      	ldr	r2, [pc, #416]	; (8005128 <HAL_DMA_Start_IT+0x1f4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d04a      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a66      	ldr	r2, [pc, #408]	; (800512c <HAL_DMA_Start_IT+0x1f8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d045      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a65      	ldr	r2, [pc, #404]	; (8005130 <HAL_DMA_Start_IT+0x1fc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d040      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a63      	ldr	r2, [pc, #396]	; (8005134 <HAL_DMA_Start_IT+0x200>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d03b      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a62      	ldr	r2, [pc, #392]	; (8005138 <HAL_DMA_Start_IT+0x204>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d036      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a60      	ldr	r2, [pc, #384]	; (800513c <HAL_DMA_Start_IT+0x208>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d031      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a5f      	ldr	r2, [pc, #380]	; (8005140 <HAL_DMA_Start_IT+0x20c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d02c      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a5d      	ldr	r2, [pc, #372]	; (8005144 <HAL_DMA_Start_IT+0x210>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d027      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a5c      	ldr	r2, [pc, #368]	; (8005148 <HAL_DMA_Start_IT+0x214>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d022      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a5a      	ldr	r2, [pc, #360]	; (800514c <HAL_DMA_Start_IT+0x218>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01d      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a59      	ldr	r2, [pc, #356]	; (8005150 <HAL_DMA_Start_IT+0x21c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d018      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a57      	ldr	r2, [pc, #348]	; (8005154 <HAL_DMA_Start_IT+0x220>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a56      	ldr	r2, [pc, #344]	; (8005158 <HAL_DMA_Start_IT+0x224>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00e      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a54      	ldr	r2, [pc, #336]	; (800515c <HAL_DMA_Start_IT+0x228>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d009      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a53      	ldr	r2, [pc, #332]	; (8005160 <HAL_DMA_Start_IT+0x22c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d004      	beq.n	8005022 <HAL_DMA_Start_IT+0xee>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a51      	ldr	r2, [pc, #324]	; (8005164 <HAL_DMA_Start_IT+0x230>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d108      	bne.n	8005034 <HAL_DMA_Start_IT+0x100>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0201 	bic.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	e007      	b.n	8005044 <HAL_DMA_Start_IT+0x110>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f001 fe6a 	bl	8006d24 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a34      	ldr	r2, [pc, #208]	; (8005128 <HAL_DMA_Start_IT+0x1f4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d04a      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a33      	ldr	r2, [pc, #204]	; (800512c <HAL_DMA_Start_IT+0x1f8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d045      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a31      	ldr	r2, [pc, #196]	; (8005130 <HAL_DMA_Start_IT+0x1fc>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d040      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a30      	ldr	r2, [pc, #192]	; (8005134 <HAL_DMA_Start_IT+0x200>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d03b      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2e      	ldr	r2, [pc, #184]	; (8005138 <HAL_DMA_Start_IT+0x204>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d036      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a2d      	ldr	r2, [pc, #180]	; (800513c <HAL_DMA_Start_IT+0x208>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d031      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a2b      	ldr	r2, [pc, #172]	; (8005140 <HAL_DMA_Start_IT+0x20c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d02c      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a2a      	ldr	r2, [pc, #168]	; (8005144 <HAL_DMA_Start_IT+0x210>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d027      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a28      	ldr	r2, [pc, #160]	; (8005148 <HAL_DMA_Start_IT+0x214>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d022      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a27      	ldr	r2, [pc, #156]	; (800514c <HAL_DMA_Start_IT+0x218>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d01d      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a25      	ldr	r2, [pc, #148]	; (8005150 <HAL_DMA_Start_IT+0x21c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d018      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a24      	ldr	r2, [pc, #144]	; (8005154 <HAL_DMA_Start_IT+0x220>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d013      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a22      	ldr	r2, [pc, #136]	; (8005158 <HAL_DMA_Start_IT+0x224>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00e      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a21      	ldr	r2, [pc, #132]	; (800515c <HAL_DMA_Start_IT+0x228>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d009      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <HAL_DMA_Start_IT+0x22c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d004      	beq.n	80050f0 <HAL_DMA_Start_IT+0x1bc>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1e      	ldr	r2, [pc, #120]	; (8005164 <HAL_DMA_Start_IT+0x230>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d101      	bne.n	80050f4 <HAL_DMA_Start_IT+0x1c0>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <HAL_DMA_Start_IT+0x1c2>
 80050f4:	2300      	movs	r3, #0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d036      	beq.n	8005168 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f023 021e 	bic.w	r2, r3, #30
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0216 	orr.w	r2, r2, #22
 800510c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d03e      	beq.n	8005194 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 0208 	orr.w	r2, r2, #8
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	e035      	b.n	8005194 <HAL_DMA_Start_IT+0x260>
 8005128:	40020010 	.word	0x40020010
 800512c:	40020028 	.word	0x40020028
 8005130:	40020040 	.word	0x40020040
 8005134:	40020058 	.word	0x40020058
 8005138:	40020070 	.word	0x40020070
 800513c:	40020088 	.word	0x40020088
 8005140:	400200a0 	.word	0x400200a0
 8005144:	400200b8 	.word	0x400200b8
 8005148:	40020410 	.word	0x40020410
 800514c:	40020428 	.word	0x40020428
 8005150:	40020440 	.word	0x40020440
 8005154:	40020458 	.word	0x40020458
 8005158:	40020470 	.word	0x40020470
 800515c:	40020488 	.word	0x40020488
 8005160:	400204a0 	.word	0x400204a0
 8005164:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 020e 	bic.w	r2, r3, #14
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 020a 	orr.w	r2, r2, #10
 800517a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0204 	orr.w	r2, r2, #4
 8005192:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a83      	ldr	r2, [pc, #524]	; (80053a8 <HAL_DMA_Start_IT+0x474>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d072      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a82      	ldr	r2, [pc, #520]	; (80053ac <HAL_DMA_Start_IT+0x478>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d06d      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a80      	ldr	r2, [pc, #512]	; (80053b0 <HAL_DMA_Start_IT+0x47c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d068      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a7f      	ldr	r2, [pc, #508]	; (80053b4 <HAL_DMA_Start_IT+0x480>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d063      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a7d      	ldr	r2, [pc, #500]	; (80053b8 <HAL_DMA_Start_IT+0x484>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d05e      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a7c      	ldr	r2, [pc, #496]	; (80053bc <HAL_DMA_Start_IT+0x488>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d059      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a7a      	ldr	r2, [pc, #488]	; (80053c0 <HAL_DMA_Start_IT+0x48c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d054      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a79      	ldr	r2, [pc, #484]	; (80053c4 <HAL_DMA_Start_IT+0x490>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d04f      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a77      	ldr	r2, [pc, #476]	; (80053c8 <HAL_DMA_Start_IT+0x494>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d04a      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a76      	ldr	r2, [pc, #472]	; (80053cc <HAL_DMA_Start_IT+0x498>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d045      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a74      	ldr	r2, [pc, #464]	; (80053d0 <HAL_DMA_Start_IT+0x49c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d040      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a73      	ldr	r2, [pc, #460]	; (80053d4 <HAL_DMA_Start_IT+0x4a0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d03b      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a71      	ldr	r2, [pc, #452]	; (80053d8 <HAL_DMA_Start_IT+0x4a4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d036      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a70      	ldr	r2, [pc, #448]	; (80053dc <HAL_DMA_Start_IT+0x4a8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d031      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a6e      	ldr	r2, [pc, #440]	; (80053e0 <HAL_DMA_Start_IT+0x4ac>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d02c      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a6d      	ldr	r2, [pc, #436]	; (80053e4 <HAL_DMA_Start_IT+0x4b0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d027      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a6b      	ldr	r2, [pc, #428]	; (80053e8 <HAL_DMA_Start_IT+0x4b4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d022      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a6a      	ldr	r2, [pc, #424]	; (80053ec <HAL_DMA_Start_IT+0x4b8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d01d      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a68      	ldr	r2, [pc, #416]	; (80053f0 <HAL_DMA_Start_IT+0x4bc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d018      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a67      	ldr	r2, [pc, #412]	; (80053f4 <HAL_DMA_Start_IT+0x4c0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a65      	ldr	r2, [pc, #404]	; (80053f8 <HAL_DMA_Start_IT+0x4c4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a64      	ldr	r2, [pc, #400]	; (80053fc <HAL_DMA_Start_IT+0x4c8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a62      	ldr	r2, [pc, #392]	; (8005400 <HAL_DMA_Start_IT+0x4cc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_DMA_Start_IT+0x350>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a61      	ldr	r2, [pc, #388]	; (8005404 <HAL_DMA_Start_IT+0x4d0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d101      	bne.n	8005288 <HAL_DMA_Start_IT+0x354>
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <HAL_DMA_Start_IT+0x356>
 8005288:	2300      	movs	r3, #0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01a      	beq.n	80052c4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a37      	ldr	r2, [pc, #220]	; (80053a8 <HAL_DMA_Start_IT+0x474>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d04a      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a36      	ldr	r2, [pc, #216]	; (80053ac <HAL_DMA_Start_IT+0x478>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d045      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a34      	ldr	r2, [pc, #208]	; (80053b0 <HAL_DMA_Start_IT+0x47c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d040      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a33      	ldr	r2, [pc, #204]	; (80053b4 <HAL_DMA_Start_IT+0x480>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d03b      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a31      	ldr	r2, [pc, #196]	; (80053b8 <HAL_DMA_Start_IT+0x484>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d036      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a30      	ldr	r2, [pc, #192]	; (80053bc <HAL_DMA_Start_IT+0x488>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d031      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a2e      	ldr	r2, [pc, #184]	; (80053c0 <HAL_DMA_Start_IT+0x48c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d02c      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a2d      	ldr	r2, [pc, #180]	; (80053c4 <HAL_DMA_Start_IT+0x490>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d027      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2b      	ldr	r2, [pc, #172]	; (80053c8 <HAL_DMA_Start_IT+0x494>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d022      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a2a      	ldr	r2, [pc, #168]	; (80053cc <HAL_DMA_Start_IT+0x498>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d01d      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a28      	ldr	r2, [pc, #160]	; (80053d0 <HAL_DMA_Start_IT+0x49c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d018      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a27      	ldr	r2, [pc, #156]	; (80053d4 <HAL_DMA_Start_IT+0x4a0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d013      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <HAL_DMA_Start_IT+0x4a4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00e      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a24      	ldr	r2, [pc, #144]	; (80053dc <HAL_DMA_Start_IT+0x4a8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d009      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a22      	ldr	r2, [pc, #136]	; (80053e0 <HAL_DMA_Start_IT+0x4ac>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <HAL_DMA_Start_IT+0x430>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a21      	ldr	r2, [pc, #132]	; (80053e4 <HAL_DMA_Start_IT+0x4b0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d108      	bne.n	8005376 <HAL_DMA_Start_IT+0x442>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	e012      	b.n	800539c <HAL_DMA_Start_IT+0x468>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0201 	orr.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e009      	b.n	800539c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800538e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800539c:	7dfb      	ldrb	r3, [r7, #23]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	40020010 	.word	0x40020010
 80053ac:	40020028 	.word	0x40020028
 80053b0:	40020040 	.word	0x40020040
 80053b4:	40020058 	.word	0x40020058
 80053b8:	40020070 	.word	0x40020070
 80053bc:	40020088 	.word	0x40020088
 80053c0:	400200a0 	.word	0x400200a0
 80053c4:	400200b8 	.word	0x400200b8
 80053c8:	40020410 	.word	0x40020410
 80053cc:	40020428 	.word	0x40020428
 80053d0:	40020440 	.word	0x40020440
 80053d4:	40020458 	.word	0x40020458
 80053d8:	40020470 	.word	0x40020470
 80053dc:	40020488 	.word	0x40020488
 80053e0:	400204a0 	.word	0x400204a0
 80053e4:	400204b8 	.word	0x400204b8
 80053e8:	58025408 	.word	0x58025408
 80053ec:	5802541c 	.word	0x5802541c
 80053f0:	58025430 	.word	0x58025430
 80053f4:	58025444 	.word	0x58025444
 80053f8:	58025458 	.word	0x58025458
 80053fc:	5802546c 	.word	0x5802546c
 8005400:	58025480 	.word	0x58025480
 8005404:	58025494 	.word	0x58025494

08005408 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005410:	f7fd fa06 	bl	8002820 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e2dc      	b.n	80059da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d008      	beq.n	800543e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2280      	movs	r2, #128	; 0x80
 8005430:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e2cd      	b.n	80059da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a76      	ldr	r2, [pc, #472]	; (800561c <HAL_DMA_Abort+0x214>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d04a      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a74      	ldr	r2, [pc, #464]	; (8005620 <HAL_DMA_Abort+0x218>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d045      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a73      	ldr	r2, [pc, #460]	; (8005624 <HAL_DMA_Abort+0x21c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d040      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a71      	ldr	r2, [pc, #452]	; (8005628 <HAL_DMA_Abort+0x220>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d03b      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a70      	ldr	r2, [pc, #448]	; (800562c <HAL_DMA_Abort+0x224>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d036      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a6e      	ldr	r2, [pc, #440]	; (8005630 <HAL_DMA_Abort+0x228>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d031      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a6d      	ldr	r2, [pc, #436]	; (8005634 <HAL_DMA_Abort+0x22c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d02c      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a6b      	ldr	r2, [pc, #428]	; (8005638 <HAL_DMA_Abort+0x230>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d027      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a6a      	ldr	r2, [pc, #424]	; (800563c <HAL_DMA_Abort+0x234>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d022      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a68      	ldr	r2, [pc, #416]	; (8005640 <HAL_DMA_Abort+0x238>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01d      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a67      	ldr	r2, [pc, #412]	; (8005644 <HAL_DMA_Abort+0x23c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d018      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a65      	ldr	r2, [pc, #404]	; (8005648 <HAL_DMA_Abort+0x240>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a64      	ldr	r2, [pc, #400]	; (800564c <HAL_DMA_Abort+0x244>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00e      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a62      	ldr	r2, [pc, #392]	; (8005650 <HAL_DMA_Abort+0x248>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d009      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a61      	ldr	r2, [pc, #388]	; (8005654 <HAL_DMA_Abort+0x24c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d004      	beq.n	80054de <HAL_DMA_Abort+0xd6>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a5f      	ldr	r2, [pc, #380]	; (8005658 <HAL_DMA_Abort+0x250>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d101      	bne.n	80054e2 <HAL_DMA_Abort+0xda>
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <HAL_DMA_Abort+0xdc>
 80054e2:	2300      	movs	r3, #0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d013      	beq.n	8005510 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 021e 	bic.w	r2, r2, #30
 80054f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695a      	ldr	r2, [r3, #20]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005506:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e00a      	b.n	8005526 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 020e 	bic.w	r2, r2, #14
 800551e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a3c      	ldr	r2, [pc, #240]	; (800561c <HAL_DMA_Abort+0x214>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d072      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a3a      	ldr	r2, [pc, #232]	; (8005620 <HAL_DMA_Abort+0x218>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d06d      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a39      	ldr	r2, [pc, #228]	; (8005624 <HAL_DMA_Abort+0x21c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d068      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a37      	ldr	r2, [pc, #220]	; (8005628 <HAL_DMA_Abort+0x220>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d063      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a36      	ldr	r2, [pc, #216]	; (800562c <HAL_DMA_Abort+0x224>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d05e      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a34      	ldr	r2, [pc, #208]	; (8005630 <HAL_DMA_Abort+0x228>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d059      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a33      	ldr	r2, [pc, #204]	; (8005634 <HAL_DMA_Abort+0x22c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d054      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a31      	ldr	r2, [pc, #196]	; (8005638 <HAL_DMA_Abort+0x230>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d04f      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a30      	ldr	r2, [pc, #192]	; (800563c <HAL_DMA_Abort+0x234>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d04a      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a2e      	ldr	r2, [pc, #184]	; (8005640 <HAL_DMA_Abort+0x238>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d045      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a2d      	ldr	r2, [pc, #180]	; (8005644 <HAL_DMA_Abort+0x23c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d040      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a2b      	ldr	r2, [pc, #172]	; (8005648 <HAL_DMA_Abort+0x240>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d03b      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a2a      	ldr	r2, [pc, #168]	; (800564c <HAL_DMA_Abort+0x244>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d036      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a28      	ldr	r2, [pc, #160]	; (8005650 <HAL_DMA_Abort+0x248>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d031      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a27      	ldr	r2, [pc, #156]	; (8005654 <HAL_DMA_Abort+0x24c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d02c      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a25      	ldr	r2, [pc, #148]	; (8005658 <HAL_DMA_Abort+0x250>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d027      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a24      	ldr	r2, [pc, #144]	; (800565c <HAL_DMA_Abort+0x254>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d022      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a22      	ldr	r2, [pc, #136]	; (8005660 <HAL_DMA_Abort+0x258>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d01d      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a21      	ldr	r2, [pc, #132]	; (8005664 <HAL_DMA_Abort+0x25c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d018      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a1f      	ldr	r2, [pc, #124]	; (8005668 <HAL_DMA_Abort+0x260>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1e      	ldr	r2, [pc, #120]	; (800566c <HAL_DMA_Abort+0x264>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00e      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1c      	ldr	r2, [pc, #112]	; (8005670 <HAL_DMA_Abort+0x268>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d009      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a1b      	ldr	r2, [pc, #108]	; (8005674 <HAL_DMA_Abort+0x26c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d004      	beq.n	8005616 <HAL_DMA_Abort+0x20e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a19      	ldr	r2, [pc, #100]	; (8005678 <HAL_DMA_Abort+0x270>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d132      	bne.n	800567c <HAL_DMA_Abort+0x274>
 8005616:	2301      	movs	r3, #1
 8005618:	e031      	b.n	800567e <HAL_DMA_Abort+0x276>
 800561a:	bf00      	nop
 800561c:	40020010 	.word	0x40020010
 8005620:	40020028 	.word	0x40020028
 8005624:	40020040 	.word	0x40020040
 8005628:	40020058 	.word	0x40020058
 800562c:	40020070 	.word	0x40020070
 8005630:	40020088 	.word	0x40020088
 8005634:	400200a0 	.word	0x400200a0
 8005638:	400200b8 	.word	0x400200b8
 800563c:	40020410 	.word	0x40020410
 8005640:	40020428 	.word	0x40020428
 8005644:	40020440 	.word	0x40020440
 8005648:	40020458 	.word	0x40020458
 800564c:	40020470 	.word	0x40020470
 8005650:	40020488 	.word	0x40020488
 8005654:	400204a0 	.word	0x400204a0
 8005658:	400204b8 	.word	0x400204b8
 800565c:	58025408 	.word	0x58025408
 8005660:	5802541c 	.word	0x5802541c
 8005664:	58025430 	.word	0x58025430
 8005668:	58025444 	.word	0x58025444
 800566c:	58025458 	.word	0x58025458
 8005670:	5802546c 	.word	0x5802546c
 8005674:	58025480 	.word	0x58025480
 8005678:	58025494 	.word	0x58025494
 800567c:	2300      	movs	r3, #0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005690:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a6d      	ldr	r2, [pc, #436]	; (800584c <HAL_DMA_Abort+0x444>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d04a      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a6b      	ldr	r2, [pc, #428]	; (8005850 <HAL_DMA_Abort+0x448>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d045      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a6a      	ldr	r2, [pc, #424]	; (8005854 <HAL_DMA_Abort+0x44c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d040      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a68      	ldr	r2, [pc, #416]	; (8005858 <HAL_DMA_Abort+0x450>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d03b      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a67      	ldr	r2, [pc, #412]	; (800585c <HAL_DMA_Abort+0x454>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d036      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a65      	ldr	r2, [pc, #404]	; (8005860 <HAL_DMA_Abort+0x458>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d031      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a64      	ldr	r2, [pc, #400]	; (8005864 <HAL_DMA_Abort+0x45c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d02c      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a62      	ldr	r2, [pc, #392]	; (8005868 <HAL_DMA_Abort+0x460>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d027      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a61      	ldr	r2, [pc, #388]	; (800586c <HAL_DMA_Abort+0x464>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d022      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a5f      	ldr	r2, [pc, #380]	; (8005870 <HAL_DMA_Abort+0x468>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d01d      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a5e      	ldr	r2, [pc, #376]	; (8005874 <HAL_DMA_Abort+0x46c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d018      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a5c      	ldr	r2, [pc, #368]	; (8005878 <HAL_DMA_Abort+0x470>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a5b      	ldr	r2, [pc, #364]	; (800587c <HAL_DMA_Abort+0x474>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00e      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a59      	ldr	r2, [pc, #356]	; (8005880 <HAL_DMA_Abort+0x478>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a58      	ldr	r2, [pc, #352]	; (8005884 <HAL_DMA_Abort+0x47c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_DMA_Abort+0x32a>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a56      	ldr	r2, [pc, #344]	; (8005888 <HAL_DMA_Abort+0x480>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d108      	bne.n	8005744 <HAL_DMA_Abort+0x33c>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	e007      	b.n	8005754 <HAL_DMA_Abort+0x34c>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005754:	e013      	b.n	800577e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005756:	f7fd f863 	bl	8002820 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b05      	cmp	r3, #5
 8005762:	d90c      	bls.n	800577e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2203      	movs	r2, #3
 800576e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e12d      	b.n	80059da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e5      	bne.n	8005756 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a2f      	ldr	r2, [pc, #188]	; (800584c <HAL_DMA_Abort+0x444>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d04a      	beq.n	800582a <HAL_DMA_Abort+0x422>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a2d      	ldr	r2, [pc, #180]	; (8005850 <HAL_DMA_Abort+0x448>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d045      	beq.n	800582a <HAL_DMA_Abort+0x422>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a2c      	ldr	r2, [pc, #176]	; (8005854 <HAL_DMA_Abort+0x44c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d040      	beq.n	800582a <HAL_DMA_Abort+0x422>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a2a      	ldr	r2, [pc, #168]	; (8005858 <HAL_DMA_Abort+0x450>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d03b      	beq.n	800582a <HAL_DMA_Abort+0x422>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a29      	ldr	r2, [pc, #164]	; (800585c <HAL_DMA_Abort+0x454>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d036      	beq.n	800582a <HAL_DMA_Abort+0x422>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a27      	ldr	r2, [pc, #156]	; (8005860 <HAL_DMA_Abort+0x458>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d031      	beq.n	800582a <HAL_DMA_Abort+0x422>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a26      	ldr	r2, [pc, #152]	; (8005864 <HAL_DMA_Abort+0x45c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d02c      	beq.n	800582a <HAL_DMA_Abort+0x422>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a24      	ldr	r2, [pc, #144]	; (8005868 <HAL_DMA_Abort+0x460>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d027      	beq.n	800582a <HAL_DMA_Abort+0x422>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a23      	ldr	r2, [pc, #140]	; (800586c <HAL_DMA_Abort+0x464>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d022      	beq.n	800582a <HAL_DMA_Abort+0x422>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a21      	ldr	r2, [pc, #132]	; (8005870 <HAL_DMA_Abort+0x468>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d01d      	beq.n	800582a <HAL_DMA_Abort+0x422>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a20      	ldr	r2, [pc, #128]	; (8005874 <HAL_DMA_Abort+0x46c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d018      	beq.n	800582a <HAL_DMA_Abort+0x422>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <HAL_DMA_Abort+0x470>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_DMA_Abort+0x422>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1d      	ldr	r2, [pc, #116]	; (800587c <HAL_DMA_Abort+0x474>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_DMA_Abort+0x422>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1b      	ldr	r2, [pc, #108]	; (8005880 <HAL_DMA_Abort+0x478>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_DMA_Abort+0x422>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1a      	ldr	r2, [pc, #104]	; (8005884 <HAL_DMA_Abort+0x47c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_DMA_Abort+0x422>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a18      	ldr	r2, [pc, #96]	; (8005888 <HAL_DMA_Abort+0x480>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d101      	bne.n	800582e <HAL_DMA_Abort+0x426>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <HAL_DMA_Abort+0x428>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d02b      	beq.n	800588c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005838:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	223f      	movs	r2, #63	; 0x3f
 8005844:	409a      	lsls	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	609a      	str	r2, [r3, #8]
 800584a:	e02a      	b.n	80058a2 <HAL_DMA_Abort+0x49a>
 800584c:	40020010 	.word	0x40020010
 8005850:	40020028 	.word	0x40020028
 8005854:	40020040 	.word	0x40020040
 8005858:	40020058 	.word	0x40020058
 800585c:	40020070 	.word	0x40020070
 8005860:	40020088 	.word	0x40020088
 8005864:	400200a0 	.word	0x400200a0
 8005868:	400200b8 	.word	0x400200b8
 800586c:	40020410 	.word	0x40020410
 8005870:	40020428 	.word	0x40020428
 8005874:	40020440 	.word	0x40020440
 8005878:	40020458 	.word	0x40020458
 800587c:	40020470 	.word	0x40020470
 8005880:	40020488 	.word	0x40020488
 8005884:	400204a0 	.word	0x400204a0
 8005888:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005890:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	2201      	movs	r2, #1
 800589c:	409a      	lsls	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a4f      	ldr	r2, [pc, #316]	; (80059e4 <HAL_DMA_Abort+0x5dc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d072      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a4d      	ldr	r2, [pc, #308]	; (80059e8 <HAL_DMA_Abort+0x5e0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d06d      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a4c      	ldr	r2, [pc, #304]	; (80059ec <HAL_DMA_Abort+0x5e4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d068      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a4a      	ldr	r2, [pc, #296]	; (80059f0 <HAL_DMA_Abort+0x5e8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d063      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a49      	ldr	r2, [pc, #292]	; (80059f4 <HAL_DMA_Abort+0x5ec>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d05e      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a47      	ldr	r2, [pc, #284]	; (80059f8 <HAL_DMA_Abort+0x5f0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d059      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a46      	ldr	r2, [pc, #280]	; (80059fc <HAL_DMA_Abort+0x5f4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d054      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a44      	ldr	r2, [pc, #272]	; (8005a00 <HAL_DMA_Abort+0x5f8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d04f      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a43      	ldr	r2, [pc, #268]	; (8005a04 <HAL_DMA_Abort+0x5fc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d04a      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a41      	ldr	r2, [pc, #260]	; (8005a08 <HAL_DMA_Abort+0x600>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d045      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a40      	ldr	r2, [pc, #256]	; (8005a0c <HAL_DMA_Abort+0x604>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d040      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a3e      	ldr	r2, [pc, #248]	; (8005a10 <HAL_DMA_Abort+0x608>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d03b      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a3d      	ldr	r2, [pc, #244]	; (8005a14 <HAL_DMA_Abort+0x60c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d036      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a3b      	ldr	r2, [pc, #236]	; (8005a18 <HAL_DMA_Abort+0x610>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d031      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a3a      	ldr	r2, [pc, #232]	; (8005a1c <HAL_DMA_Abort+0x614>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d02c      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a38      	ldr	r2, [pc, #224]	; (8005a20 <HAL_DMA_Abort+0x618>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d027      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a37      	ldr	r2, [pc, #220]	; (8005a24 <HAL_DMA_Abort+0x61c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d022      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a35      	ldr	r2, [pc, #212]	; (8005a28 <HAL_DMA_Abort+0x620>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d01d      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a34      	ldr	r2, [pc, #208]	; (8005a2c <HAL_DMA_Abort+0x624>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d018      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a32      	ldr	r2, [pc, #200]	; (8005a30 <HAL_DMA_Abort+0x628>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d013      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a31      	ldr	r2, [pc, #196]	; (8005a34 <HAL_DMA_Abort+0x62c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00e      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a2f      	ldr	r2, [pc, #188]	; (8005a38 <HAL_DMA_Abort+0x630>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d009      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a2e      	ldr	r2, [pc, #184]	; (8005a3c <HAL_DMA_Abort+0x634>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d004      	beq.n	8005992 <HAL_DMA_Abort+0x58a>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a2c      	ldr	r2, [pc, #176]	; (8005a40 <HAL_DMA_Abort+0x638>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d101      	bne.n	8005996 <HAL_DMA_Abort+0x58e>
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <HAL_DMA_Abort+0x590>
 8005996:	2300      	movs	r3, #0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d015      	beq.n	80059c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80059a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00c      	beq.n	80059c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80059c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40020010 	.word	0x40020010
 80059e8:	40020028 	.word	0x40020028
 80059ec:	40020040 	.word	0x40020040
 80059f0:	40020058 	.word	0x40020058
 80059f4:	40020070 	.word	0x40020070
 80059f8:	40020088 	.word	0x40020088
 80059fc:	400200a0 	.word	0x400200a0
 8005a00:	400200b8 	.word	0x400200b8
 8005a04:	40020410 	.word	0x40020410
 8005a08:	40020428 	.word	0x40020428
 8005a0c:	40020440 	.word	0x40020440
 8005a10:	40020458 	.word	0x40020458
 8005a14:	40020470 	.word	0x40020470
 8005a18:	40020488 	.word	0x40020488
 8005a1c:	400204a0 	.word	0x400204a0
 8005a20:	400204b8 	.word	0x400204b8
 8005a24:	58025408 	.word	0x58025408
 8005a28:	5802541c 	.word	0x5802541c
 8005a2c:	58025430 	.word	0x58025430
 8005a30:	58025444 	.word	0x58025444
 8005a34:	58025458 	.word	0x58025458
 8005a38:	5802546c 	.word	0x5802546c
 8005a3c:	58025480 	.word	0x58025480
 8005a40:	58025494 	.word	0x58025494

08005a44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e237      	b.n	8005ec6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d004      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2280      	movs	r2, #128	; 0x80
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e22c      	b.n	8005ec6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a5c      	ldr	r2, [pc, #368]	; (8005be4 <HAL_DMA_Abort_IT+0x1a0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d04a      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a5b      	ldr	r2, [pc, #364]	; (8005be8 <HAL_DMA_Abort_IT+0x1a4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d045      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a59      	ldr	r2, [pc, #356]	; (8005bec <HAL_DMA_Abort_IT+0x1a8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d040      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a58      	ldr	r2, [pc, #352]	; (8005bf0 <HAL_DMA_Abort_IT+0x1ac>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d03b      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a56      	ldr	r2, [pc, #344]	; (8005bf4 <HAL_DMA_Abort_IT+0x1b0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d036      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a55      	ldr	r2, [pc, #340]	; (8005bf8 <HAL_DMA_Abort_IT+0x1b4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d031      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a53      	ldr	r2, [pc, #332]	; (8005bfc <HAL_DMA_Abort_IT+0x1b8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d02c      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a52      	ldr	r2, [pc, #328]	; (8005c00 <HAL_DMA_Abort_IT+0x1bc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d027      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a50      	ldr	r2, [pc, #320]	; (8005c04 <HAL_DMA_Abort_IT+0x1c0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d022      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a4f      	ldr	r2, [pc, #316]	; (8005c08 <HAL_DMA_Abort_IT+0x1c4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d01d      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a4d      	ldr	r2, [pc, #308]	; (8005c0c <HAL_DMA_Abort_IT+0x1c8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d018      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a4c      	ldr	r2, [pc, #304]	; (8005c10 <HAL_DMA_Abort_IT+0x1cc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d013      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a4a      	ldr	r2, [pc, #296]	; (8005c14 <HAL_DMA_Abort_IT+0x1d0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00e      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a49      	ldr	r2, [pc, #292]	; (8005c18 <HAL_DMA_Abort_IT+0x1d4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d009      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a47      	ldr	r2, [pc, #284]	; (8005c1c <HAL_DMA_Abort_IT+0x1d8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d004      	beq.n	8005b0c <HAL_DMA_Abort_IT+0xc8>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a46      	ldr	r2, [pc, #280]	; (8005c20 <HAL_DMA_Abort_IT+0x1dc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d101      	bne.n	8005b10 <HAL_DMA_Abort_IT+0xcc>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e000      	b.n	8005b12 <HAL_DMA_Abort_IT+0xce>
 8005b10:	2300      	movs	r3, #0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 8086 	beq.w	8005c24 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a2f      	ldr	r2, [pc, #188]	; (8005be4 <HAL_DMA_Abort_IT+0x1a0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d04a      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a2e      	ldr	r2, [pc, #184]	; (8005be8 <HAL_DMA_Abort_IT+0x1a4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d045      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a2c      	ldr	r2, [pc, #176]	; (8005bec <HAL_DMA_Abort_IT+0x1a8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d040      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a2b      	ldr	r2, [pc, #172]	; (8005bf0 <HAL_DMA_Abort_IT+0x1ac>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d03b      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a29      	ldr	r2, [pc, #164]	; (8005bf4 <HAL_DMA_Abort_IT+0x1b0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d036      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a28      	ldr	r2, [pc, #160]	; (8005bf8 <HAL_DMA_Abort_IT+0x1b4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d031      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a26      	ldr	r2, [pc, #152]	; (8005bfc <HAL_DMA_Abort_IT+0x1b8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d02c      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a25      	ldr	r2, [pc, #148]	; (8005c00 <HAL_DMA_Abort_IT+0x1bc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d027      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a23      	ldr	r2, [pc, #140]	; (8005c04 <HAL_DMA_Abort_IT+0x1c0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d022      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a22      	ldr	r2, [pc, #136]	; (8005c08 <HAL_DMA_Abort_IT+0x1c4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d01d      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a20      	ldr	r2, [pc, #128]	; (8005c0c <HAL_DMA_Abort_IT+0x1c8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d018      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1f      	ldr	r2, [pc, #124]	; (8005c10 <HAL_DMA_Abort_IT+0x1cc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d013      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1d      	ldr	r2, [pc, #116]	; (8005c14 <HAL_DMA_Abort_IT+0x1d0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00e      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <HAL_DMA_Abort_IT+0x1d4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d009      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1a      	ldr	r2, [pc, #104]	; (8005c1c <HAL_DMA_Abort_IT+0x1d8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d004      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x17c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a19      	ldr	r2, [pc, #100]	; (8005c20 <HAL_DMA_Abort_IT+0x1dc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d108      	bne.n	8005bd2 <HAL_DMA_Abort_IT+0x18e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0201 	bic.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	e178      	b.n	8005ec4 <HAL_DMA_Abort_IT+0x480>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0201 	bic.w	r2, r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	e16f      	b.n	8005ec4 <HAL_DMA_Abort_IT+0x480>
 8005be4:	40020010 	.word	0x40020010
 8005be8:	40020028 	.word	0x40020028
 8005bec:	40020040 	.word	0x40020040
 8005bf0:	40020058 	.word	0x40020058
 8005bf4:	40020070 	.word	0x40020070
 8005bf8:	40020088 	.word	0x40020088
 8005bfc:	400200a0 	.word	0x400200a0
 8005c00:	400200b8 	.word	0x400200b8
 8005c04:	40020410 	.word	0x40020410
 8005c08:	40020428 	.word	0x40020428
 8005c0c:	40020440 	.word	0x40020440
 8005c10:	40020458 	.word	0x40020458
 8005c14:	40020470 	.word	0x40020470
 8005c18:	40020488 	.word	0x40020488
 8005c1c:	400204a0 	.word	0x400204a0
 8005c20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 020e 	bic.w	r2, r2, #14
 8005c32:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a6c      	ldr	r2, [pc, #432]	; (8005dec <HAL_DMA_Abort_IT+0x3a8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d04a      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a6b      	ldr	r2, [pc, #428]	; (8005df0 <HAL_DMA_Abort_IT+0x3ac>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d045      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a69      	ldr	r2, [pc, #420]	; (8005df4 <HAL_DMA_Abort_IT+0x3b0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d040      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a68      	ldr	r2, [pc, #416]	; (8005df8 <HAL_DMA_Abort_IT+0x3b4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d03b      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a66      	ldr	r2, [pc, #408]	; (8005dfc <HAL_DMA_Abort_IT+0x3b8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d036      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a65      	ldr	r2, [pc, #404]	; (8005e00 <HAL_DMA_Abort_IT+0x3bc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d031      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a63      	ldr	r2, [pc, #396]	; (8005e04 <HAL_DMA_Abort_IT+0x3c0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d02c      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a62      	ldr	r2, [pc, #392]	; (8005e08 <HAL_DMA_Abort_IT+0x3c4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d027      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a60      	ldr	r2, [pc, #384]	; (8005e0c <HAL_DMA_Abort_IT+0x3c8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d022      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a5f      	ldr	r2, [pc, #380]	; (8005e10 <HAL_DMA_Abort_IT+0x3cc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d01d      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a5d      	ldr	r2, [pc, #372]	; (8005e14 <HAL_DMA_Abort_IT+0x3d0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d018      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a5c      	ldr	r2, [pc, #368]	; (8005e18 <HAL_DMA_Abort_IT+0x3d4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d013      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a5a      	ldr	r2, [pc, #360]	; (8005e1c <HAL_DMA_Abort_IT+0x3d8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00e      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a59      	ldr	r2, [pc, #356]	; (8005e20 <HAL_DMA_Abort_IT+0x3dc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d009      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a57      	ldr	r2, [pc, #348]	; (8005e24 <HAL_DMA_Abort_IT+0x3e0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d004      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x290>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a56      	ldr	r2, [pc, #344]	; (8005e28 <HAL_DMA_Abort_IT+0x3e4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d108      	bne.n	8005ce6 <HAL_DMA_Abort_IT+0x2a2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0201 	bic.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	e007      	b.n	8005cf6 <HAL_DMA_Abort_IT+0x2b2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0201 	bic.w	r2, r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a3c      	ldr	r2, [pc, #240]	; (8005dec <HAL_DMA_Abort_IT+0x3a8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d072      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a3a      	ldr	r2, [pc, #232]	; (8005df0 <HAL_DMA_Abort_IT+0x3ac>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d06d      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a39      	ldr	r2, [pc, #228]	; (8005df4 <HAL_DMA_Abort_IT+0x3b0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d068      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a37      	ldr	r2, [pc, #220]	; (8005df8 <HAL_DMA_Abort_IT+0x3b4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d063      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a36      	ldr	r2, [pc, #216]	; (8005dfc <HAL_DMA_Abort_IT+0x3b8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d05e      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a34      	ldr	r2, [pc, #208]	; (8005e00 <HAL_DMA_Abort_IT+0x3bc>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d059      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a33      	ldr	r2, [pc, #204]	; (8005e04 <HAL_DMA_Abort_IT+0x3c0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d054      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a31      	ldr	r2, [pc, #196]	; (8005e08 <HAL_DMA_Abort_IT+0x3c4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d04f      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a30      	ldr	r2, [pc, #192]	; (8005e0c <HAL_DMA_Abort_IT+0x3c8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d04a      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a2e      	ldr	r2, [pc, #184]	; (8005e10 <HAL_DMA_Abort_IT+0x3cc>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d045      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a2d      	ldr	r2, [pc, #180]	; (8005e14 <HAL_DMA_Abort_IT+0x3d0>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d040      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a2b      	ldr	r2, [pc, #172]	; (8005e18 <HAL_DMA_Abort_IT+0x3d4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d03b      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a2a      	ldr	r2, [pc, #168]	; (8005e1c <HAL_DMA_Abort_IT+0x3d8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d036      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a28      	ldr	r2, [pc, #160]	; (8005e20 <HAL_DMA_Abort_IT+0x3dc>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d031      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a27      	ldr	r2, [pc, #156]	; (8005e24 <HAL_DMA_Abort_IT+0x3e0>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d02c      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a25      	ldr	r2, [pc, #148]	; (8005e28 <HAL_DMA_Abort_IT+0x3e4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d027      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a24      	ldr	r2, [pc, #144]	; (8005e2c <HAL_DMA_Abort_IT+0x3e8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d022      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a22      	ldr	r2, [pc, #136]	; (8005e30 <HAL_DMA_Abort_IT+0x3ec>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01d      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a21      	ldr	r2, [pc, #132]	; (8005e34 <HAL_DMA_Abort_IT+0x3f0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d018      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1f      	ldr	r2, [pc, #124]	; (8005e38 <HAL_DMA_Abort_IT+0x3f4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <HAL_DMA_Abort_IT+0x3f8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1c      	ldr	r2, [pc, #112]	; (8005e40 <HAL_DMA_Abort_IT+0x3fc>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1b      	ldr	r2, [pc, #108]	; (8005e44 <HAL_DMA_Abort_IT+0x400>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x3a2>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a19      	ldr	r2, [pc, #100]	; (8005e48 <HAL_DMA_Abort_IT+0x404>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d132      	bne.n	8005e4c <HAL_DMA_Abort_IT+0x408>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e031      	b.n	8005e4e <HAL_DMA_Abort_IT+0x40a>
 8005dea:	bf00      	nop
 8005dec:	40020010 	.word	0x40020010
 8005df0:	40020028 	.word	0x40020028
 8005df4:	40020040 	.word	0x40020040
 8005df8:	40020058 	.word	0x40020058
 8005dfc:	40020070 	.word	0x40020070
 8005e00:	40020088 	.word	0x40020088
 8005e04:	400200a0 	.word	0x400200a0
 8005e08:	400200b8 	.word	0x400200b8
 8005e0c:	40020410 	.word	0x40020410
 8005e10:	40020428 	.word	0x40020428
 8005e14:	40020440 	.word	0x40020440
 8005e18:	40020458 	.word	0x40020458
 8005e1c:	40020470 	.word	0x40020470
 8005e20:	40020488 	.word	0x40020488
 8005e24:	400204a0 	.word	0x400204a0
 8005e28:	400204b8 	.word	0x400204b8
 8005e2c:	58025408 	.word	0x58025408
 8005e30:	5802541c 	.word	0x5802541c
 8005e34:	58025430 	.word	0x58025430
 8005e38:	58025444 	.word	0x58025444
 8005e3c:	58025458 	.word	0x58025458
 8005e40:	5802546c 	.word	0x5802546c
 8005e44:	58025480 	.word	0x58025480
 8005e48:	58025494 	.word	0x58025494
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d028      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e60:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e66:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6c:	f003 031f 	and.w	r3, r3, #31
 8005e70:	2201      	movs	r2, #1
 8005e72:	409a      	lsls	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e80:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00c      	beq.n	8005ea4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e98:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ea2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop

08005ed0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08a      	sub	sp, #40	; 0x28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005edc:	4b67      	ldr	r3, [pc, #412]	; (800607c <HAL_DMA_IRQHandler+0x1ac>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a67      	ldr	r2, [pc, #412]	; (8006080 <HAL_DMA_IRQHandler+0x1b0>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	0a9b      	lsrs	r3, r3, #10
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a5f      	ldr	r2, [pc, #380]	; (8006084 <HAL_DMA_IRQHandler+0x1b4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d04a      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a5d      	ldr	r2, [pc, #372]	; (8006088 <HAL_DMA_IRQHandler+0x1b8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d045      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a5c      	ldr	r2, [pc, #368]	; (800608c <HAL_DMA_IRQHandler+0x1bc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d040      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a5a      	ldr	r2, [pc, #360]	; (8006090 <HAL_DMA_IRQHandler+0x1c0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d03b      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a59      	ldr	r2, [pc, #356]	; (8006094 <HAL_DMA_IRQHandler+0x1c4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d036      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a57      	ldr	r2, [pc, #348]	; (8006098 <HAL_DMA_IRQHandler+0x1c8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d031      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a56      	ldr	r2, [pc, #344]	; (800609c <HAL_DMA_IRQHandler+0x1cc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d02c      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a54      	ldr	r2, [pc, #336]	; (80060a0 <HAL_DMA_IRQHandler+0x1d0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d027      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a53      	ldr	r2, [pc, #332]	; (80060a4 <HAL_DMA_IRQHandler+0x1d4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d022      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a51      	ldr	r2, [pc, #324]	; (80060a8 <HAL_DMA_IRQHandler+0x1d8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01d      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a50      	ldr	r2, [pc, #320]	; (80060ac <HAL_DMA_IRQHandler+0x1dc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d018      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a4e      	ldr	r2, [pc, #312]	; (80060b0 <HAL_DMA_IRQHandler+0x1e0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a4d      	ldr	r2, [pc, #308]	; (80060b4 <HAL_DMA_IRQHandler+0x1e4>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a4b      	ldr	r2, [pc, #300]	; (80060b8 <HAL_DMA_IRQHandler+0x1e8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a4a      	ldr	r2, [pc, #296]	; (80060bc <HAL_DMA_IRQHandler+0x1ec>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a48      	ldr	r2, [pc, #288]	; (80060c0 <HAL_DMA_IRQHandler+0x1f0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d101      	bne.n	8005fa6 <HAL_DMA_IRQHandler+0xd6>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <HAL_DMA_IRQHandler+0xd8>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 842b 	beq.w	8006804 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	409a      	lsls	r2, r3
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 80a2 	beq.w	8006108 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2e      	ldr	r2, [pc, #184]	; (8006084 <HAL_DMA_IRQHandler+0x1b4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d04a      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2d      	ldr	r2, [pc, #180]	; (8006088 <HAL_DMA_IRQHandler+0x1b8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d045      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a2b      	ldr	r2, [pc, #172]	; (800608c <HAL_DMA_IRQHandler+0x1bc>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d040      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a2a      	ldr	r2, [pc, #168]	; (8006090 <HAL_DMA_IRQHandler+0x1c0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d03b      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a28      	ldr	r2, [pc, #160]	; (8006094 <HAL_DMA_IRQHandler+0x1c4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d036      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a27      	ldr	r2, [pc, #156]	; (8006098 <HAL_DMA_IRQHandler+0x1c8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d031      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a25      	ldr	r2, [pc, #148]	; (800609c <HAL_DMA_IRQHandler+0x1cc>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d02c      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a24      	ldr	r2, [pc, #144]	; (80060a0 <HAL_DMA_IRQHandler+0x1d0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d027      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a22      	ldr	r2, [pc, #136]	; (80060a4 <HAL_DMA_IRQHandler+0x1d4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d022      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <HAL_DMA_IRQHandler+0x1d8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d01d      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a1f      	ldr	r2, [pc, #124]	; (80060ac <HAL_DMA_IRQHandler+0x1dc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d018      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1e      	ldr	r2, [pc, #120]	; (80060b0 <HAL_DMA_IRQHandler+0x1e0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d013      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1c      	ldr	r2, [pc, #112]	; (80060b4 <HAL_DMA_IRQHandler+0x1e4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00e      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1b      	ldr	r2, [pc, #108]	; (80060b8 <HAL_DMA_IRQHandler+0x1e8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d009      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a19      	ldr	r2, [pc, #100]	; (80060bc <HAL_DMA_IRQHandler+0x1ec>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d004      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a18      	ldr	r2, [pc, #96]	; (80060c0 <HAL_DMA_IRQHandler+0x1f0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d12f      	bne.n	80060c4 <HAL_DMA_IRQHandler+0x1f4>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b00      	cmp	r3, #0
 8006070:	bf14      	ite	ne
 8006072:	2301      	movne	r3, #1
 8006074:	2300      	moveq	r3, #0
 8006076:	b2db      	uxtb	r3, r3
 8006078:	e02e      	b.n	80060d8 <HAL_DMA_IRQHandler+0x208>
 800607a:	bf00      	nop
 800607c:	24000044 	.word	0x24000044
 8006080:	1b4e81b5 	.word	0x1b4e81b5
 8006084:	40020010 	.word	0x40020010
 8006088:	40020028 	.word	0x40020028
 800608c:	40020040 	.word	0x40020040
 8006090:	40020058 	.word	0x40020058
 8006094:	40020070 	.word	0x40020070
 8006098:	40020088 	.word	0x40020088
 800609c:	400200a0 	.word	0x400200a0
 80060a0:	400200b8 	.word	0x400200b8
 80060a4:	40020410 	.word	0x40020410
 80060a8:	40020428 	.word	0x40020428
 80060ac:	40020440 	.word	0x40020440
 80060b0:	40020458 	.word	0x40020458
 80060b4:	40020470 	.word	0x40020470
 80060b8:	40020488 	.word	0x40020488
 80060bc:	400204a0 	.word	0x400204a0
 80060c0:	400204b8 	.word	0x400204b8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bf14      	ite	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	2300      	moveq	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d015      	beq.n	8006108 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0204 	bic.w	r2, r2, #4
 80060ea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	2208      	movs	r2, #8
 80060f6:	409a      	lsls	r2, r3
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006100:	f043 0201 	orr.w	r2, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	fa22 f303 	lsr.w	r3, r2, r3
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d06e      	beq.n	80061fc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a69      	ldr	r2, [pc, #420]	; (80062c8 <HAL_DMA_IRQHandler+0x3f8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d04a      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a67      	ldr	r2, [pc, #412]	; (80062cc <HAL_DMA_IRQHandler+0x3fc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d045      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a66      	ldr	r2, [pc, #408]	; (80062d0 <HAL_DMA_IRQHandler+0x400>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d040      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a64      	ldr	r2, [pc, #400]	; (80062d4 <HAL_DMA_IRQHandler+0x404>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d03b      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a63      	ldr	r2, [pc, #396]	; (80062d8 <HAL_DMA_IRQHandler+0x408>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d036      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a61      	ldr	r2, [pc, #388]	; (80062dc <HAL_DMA_IRQHandler+0x40c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d031      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a60      	ldr	r2, [pc, #384]	; (80062e0 <HAL_DMA_IRQHandler+0x410>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d02c      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a5e      	ldr	r2, [pc, #376]	; (80062e4 <HAL_DMA_IRQHandler+0x414>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d027      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a5d      	ldr	r2, [pc, #372]	; (80062e8 <HAL_DMA_IRQHandler+0x418>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d022      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a5b      	ldr	r2, [pc, #364]	; (80062ec <HAL_DMA_IRQHandler+0x41c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d01d      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a5a      	ldr	r2, [pc, #360]	; (80062f0 <HAL_DMA_IRQHandler+0x420>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d018      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a58      	ldr	r2, [pc, #352]	; (80062f4 <HAL_DMA_IRQHandler+0x424>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d013      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a57      	ldr	r2, [pc, #348]	; (80062f8 <HAL_DMA_IRQHandler+0x428>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00e      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a55      	ldr	r2, [pc, #340]	; (80062fc <HAL_DMA_IRQHandler+0x42c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d009      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a54      	ldr	r2, [pc, #336]	; (8006300 <HAL_DMA_IRQHandler+0x430>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d004      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a52      	ldr	r2, [pc, #328]	; (8006304 <HAL_DMA_IRQHandler+0x434>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d10a      	bne.n	80061d4 <HAL_DMA_IRQHandler+0x304>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bf14      	ite	ne
 80061cc:	2301      	movne	r3, #1
 80061ce:	2300      	moveq	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	e003      	b.n	80061dc <HAL_DMA_IRQHandler+0x30c>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2300      	movs	r3, #0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00d      	beq.n	80061fc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	2201      	movs	r2, #1
 80061ea:	409a      	lsls	r2, r3
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f4:	f043 0202 	orr.w	r2, r3, #2
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	2204      	movs	r2, #4
 8006206:	409a      	lsls	r2, r3
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	4013      	ands	r3, r2
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 808f 	beq.w	8006330 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a2c      	ldr	r2, [pc, #176]	; (80062c8 <HAL_DMA_IRQHandler+0x3f8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d04a      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a2a      	ldr	r2, [pc, #168]	; (80062cc <HAL_DMA_IRQHandler+0x3fc>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d045      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a29      	ldr	r2, [pc, #164]	; (80062d0 <HAL_DMA_IRQHandler+0x400>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d040      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a27      	ldr	r2, [pc, #156]	; (80062d4 <HAL_DMA_IRQHandler+0x404>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d03b      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a26      	ldr	r2, [pc, #152]	; (80062d8 <HAL_DMA_IRQHandler+0x408>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d036      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a24      	ldr	r2, [pc, #144]	; (80062dc <HAL_DMA_IRQHandler+0x40c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d031      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a23      	ldr	r2, [pc, #140]	; (80062e0 <HAL_DMA_IRQHandler+0x410>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d02c      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a21      	ldr	r2, [pc, #132]	; (80062e4 <HAL_DMA_IRQHandler+0x414>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d027      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a20      	ldr	r2, [pc, #128]	; (80062e8 <HAL_DMA_IRQHandler+0x418>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d022      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1e      	ldr	r2, [pc, #120]	; (80062ec <HAL_DMA_IRQHandler+0x41c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d01d      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1d      	ldr	r2, [pc, #116]	; (80062f0 <HAL_DMA_IRQHandler+0x420>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d018      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1b      	ldr	r2, [pc, #108]	; (80062f4 <HAL_DMA_IRQHandler+0x424>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d013      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a1a      	ldr	r2, [pc, #104]	; (80062f8 <HAL_DMA_IRQHandler+0x428>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00e      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a18      	ldr	r2, [pc, #96]	; (80062fc <HAL_DMA_IRQHandler+0x42c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d009      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a17      	ldr	r2, [pc, #92]	; (8006300 <HAL_DMA_IRQHandler+0x430>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d004      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a15      	ldr	r2, [pc, #84]	; (8006304 <HAL_DMA_IRQHandler+0x434>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d12a      	bne.n	8006308 <HAL_DMA_IRQHandler+0x438>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bf14      	ite	ne
 80062c0:	2301      	movne	r3, #1
 80062c2:	2300      	moveq	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	e023      	b.n	8006310 <HAL_DMA_IRQHandler+0x440>
 80062c8:	40020010 	.word	0x40020010
 80062cc:	40020028 	.word	0x40020028
 80062d0:	40020040 	.word	0x40020040
 80062d4:	40020058 	.word	0x40020058
 80062d8:	40020070 	.word	0x40020070
 80062dc:	40020088 	.word	0x40020088
 80062e0:	400200a0 	.word	0x400200a0
 80062e4:	400200b8 	.word	0x400200b8
 80062e8:	40020410 	.word	0x40020410
 80062ec:	40020428 	.word	0x40020428
 80062f0:	40020440 	.word	0x40020440
 80062f4:	40020458 	.word	0x40020458
 80062f8:	40020470 	.word	0x40020470
 80062fc:	40020488 	.word	0x40020488
 8006300:	400204a0 	.word	0x400204a0
 8006304:	400204b8 	.word	0x400204b8
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2300      	movs	r3, #0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00d      	beq.n	8006330 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006318:	f003 031f 	and.w	r3, r3, #31
 800631c:	2204      	movs	r2, #4
 800631e:	409a      	lsls	r2, r3
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006328:	f043 0204 	orr.w	r2, r3, #4
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	2210      	movs	r2, #16
 800633a:	409a      	lsls	r2, r3
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	4013      	ands	r3, r2
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80a6 	beq.w	8006492 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a85      	ldr	r2, [pc, #532]	; (8006560 <HAL_DMA_IRQHandler+0x690>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d04a      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a83      	ldr	r2, [pc, #524]	; (8006564 <HAL_DMA_IRQHandler+0x694>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d045      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a82      	ldr	r2, [pc, #520]	; (8006568 <HAL_DMA_IRQHandler+0x698>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d040      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a80      	ldr	r2, [pc, #512]	; (800656c <HAL_DMA_IRQHandler+0x69c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d03b      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a7f      	ldr	r2, [pc, #508]	; (8006570 <HAL_DMA_IRQHandler+0x6a0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d036      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a7d      	ldr	r2, [pc, #500]	; (8006574 <HAL_DMA_IRQHandler+0x6a4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d031      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a7c      	ldr	r2, [pc, #496]	; (8006578 <HAL_DMA_IRQHandler+0x6a8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d02c      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a7a      	ldr	r2, [pc, #488]	; (800657c <HAL_DMA_IRQHandler+0x6ac>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d027      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a79      	ldr	r2, [pc, #484]	; (8006580 <HAL_DMA_IRQHandler+0x6b0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d022      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a77      	ldr	r2, [pc, #476]	; (8006584 <HAL_DMA_IRQHandler+0x6b4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d01d      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a76      	ldr	r2, [pc, #472]	; (8006588 <HAL_DMA_IRQHandler+0x6b8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d018      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a74      	ldr	r2, [pc, #464]	; (800658c <HAL_DMA_IRQHandler+0x6bc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d013      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a73      	ldr	r2, [pc, #460]	; (8006590 <HAL_DMA_IRQHandler+0x6c0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00e      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a71      	ldr	r2, [pc, #452]	; (8006594 <HAL_DMA_IRQHandler+0x6c4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d009      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a70      	ldr	r2, [pc, #448]	; (8006598 <HAL_DMA_IRQHandler+0x6c8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d004      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a6e      	ldr	r2, [pc, #440]	; (800659c <HAL_DMA_IRQHandler+0x6cc>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d10a      	bne.n	80063fc <HAL_DMA_IRQHandler+0x52c>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	bf14      	ite	ne
 80063f4:	2301      	movne	r3, #1
 80063f6:	2300      	moveq	r3, #0
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	e009      	b.n	8006410 <HAL_DMA_IRQHandler+0x540>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	bf14      	ite	ne
 800640a:	2301      	movne	r3, #1
 800640c:	2300      	moveq	r3, #0
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d03e      	beq.n	8006492 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	2210      	movs	r2, #16
 800641e:	409a      	lsls	r2, r3
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d018      	beq.n	8006464 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d108      	bne.n	8006452 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d024      	beq.n	8006492 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	4798      	blx	r3
 8006450:	e01f      	b.n	8006492 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006456:	2b00      	cmp	r3, #0
 8006458:	d01b      	beq.n	8006492 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4798      	blx	r3
 8006462:	e016      	b.n	8006492 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0208 	bic.w	r2, r2, #8
 8006480:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006496:	f003 031f 	and.w	r3, r3, #31
 800649a:	2220      	movs	r2, #32
 800649c:	409a      	lsls	r2, r3
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 8110 	beq.w	80066c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a2c      	ldr	r2, [pc, #176]	; (8006560 <HAL_DMA_IRQHandler+0x690>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d04a      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a2b      	ldr	r2, [pc, #172]	; (8006564 <HAL_DMA_IRQHandler+0x694>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d045      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a29      	ldr	r2, [pc, #164]	; (8006568 <HAL_DMA_IRQHandler+0x698>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d040      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a28      	ldr	r2, [pc, #160]	; (800656c <HAL_DMA_IRQHandler+0x69c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d03b      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a26      	ldr	r2, [pc, #152]	; (8006570 <HAL_DMA_IRQHandler+0x6a0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d036      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a25      	ldr	r2, [pc, #148]	; (8006574 <HAL_DMA_IRQHandler+0x6a4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d031      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a23      	ldr	r2, [pc, #140]	; (8006578 <HAL_DMA_IRQHandler+0x6a8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d02c      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a22      	ldr	r2, [pc, #136]	; (800657c <HAL_DMA_IRQHandler+0x6ac>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d027      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a20      	ldr	r2, [pc, #128]	; (8006580 <HAL_DMA_IRQHandler+0x6b0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d022      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1f      	ldr	r2, [pc, #124]	; (8006584 <HAL_DMA_IRQHandler+0x6b4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d01d      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1d      	ldr	r2, [pc, #116]	; (8006588 <HAL_DMA_IRQHandler+0x6b8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d018      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1c      	ldr	r2, [pc, #112]	; (800658c <HAL_DMA_IRQHandler+0x6bc>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d013      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1a      	ldr	r2, [pc, #104]	; (8006590 <HAL_DMA_IRQHandler+0x6c0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00e      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a19      	ldr	r2, [pc, #100]	; (8006594 <HAL_DMA_IRQHandler+0x6c4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d009      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a17      	ldr	r2, [pc, #92]	; (8006598 <HAL_DMA_IRQHandler+0x6c8>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d004      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a16      	ldr	r2, [pc, #88]	; (800659c <HAL_DMA_IRQHandler+0x6cc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d12b      	bne.n	80065a0 <HAL_DMA_IRQHandler+0x6d0>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b00      	cmp	r3, #0
 8006554:	bf14      	ite	ne
 8006556:	2301      	movne	r3, #1
 8006558:	2300      	moveq	r3, #0
 800655a:	b2db      	uxtb	r3, r3
 800655c:	e02a      	b.n	80065b4 <HAL_DMA_IRQHandler+0x6e4>
 800655e:	bf00      	nop
 8006560:	40020010 	.word	0x40020010
 8006564:	40020028 	.word	0x40020028
 8006568:	40020040 	.word	0x40020040
 800656c:	40020058 	.word	0x40020058
 8006570:	40020070 	.word	0x40020070
 8006574:	40020088 	.word	0x40020088
 8006578:	400200a0 	.word	0x400200a0
 800657c:	400200b8 	.word	0x400200b8
 8006580:	40020410 	.word	0x40020410
 8006584:	40020428 	.word	0x40020428
 8006588:	40020440 	.word	0x40020440
 800658c:	40020458 	.word	0x40020458
 8006590:	40020470 	.word	0x40020470
 8006594:	40020488 	.word	0x40020488
 8006598:	400204a0 	.word	0x400204a0
 800659c:	400204b8 	.word	0x400204b8
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	bf14      	ite	ne
 80065ae:	2301      	movne	r3, #1
 80065b0:	2300      	moveq	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 8087 	beq.w	80066c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065be:	f003 031f 	and.w	r3, r3, #31
 80065c2:	2220      	movs	r2, #32
 80065c4:	409a      	lsls	r2, r3
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d139      	bne.n	800664a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0216 	bic.w	r2, r2, #22
 80065e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	695a      	ldr	r2, [r3, #20]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d103      	bne.n	8006606 <HAL_DMA_IRQHandler+0x736>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0208 	bic.w	r2, r2, #8
 8006614:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800661a:	f003 031f 	and.w	r3, r3, #31
 800661e:	223f      	movs	r2, #63	; 0x3f
 8006620:	409a      	lsls	r2, r3
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 834a 	beq.w	8006cd4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	4798      	blx	r3
          }
          return;
 8006648:	e344      	b.n	8006cd4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d018      	beq.n	800668a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d108      	bne.n	8006678 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666a:	2b00      	cmp	r3, #0
 800666c:	d02c      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	4798      	blx	r3
 8006676:	e027      	b.n	80066c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d023      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	4798      	blx	r3
 8006688:	e01e      	b.n	80066c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10f      	bne.n	80066b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0210 	bic.w	r2, r2, #16
 80066a6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8306 	beq.w	8006cde <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 8088 	beq.w	80067f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2204      	movs	r2, #4
 80066e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a7a      	ldr	r2, [pc, #488]	; (80068d8 <HAL_DMA_IRQHandler+0xa08>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d04a      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a79      	ldr	r2, [pc, #484]	; (80068dc <HAL_DMA_IRQHandler+0xa0c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d045      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a77      	ldr	r2, [pc, #476]	; (80068e0 <HAL_DMA_IRQHandler+0xa10>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d040      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a76      	ldr	r2, [pc, #472]	; (80068e4 <HAL_DMA_IRQHandler+0xa14>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d03b      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a74      	ldr	r2, [pc, #464]	; (80068e8 <HAL_DMA_IRQHandler+0xa18>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d036      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a73      	ldr	r2, [pc, #460]	; (80068ec <HAL_DMA_IRQHandler+0xa1c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d031      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a71      	ldr	r2, [pc, #452]	; (80068f0 <HAL_DMA_IRQHandler+0xa20>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d02c      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a70      	ldr	r2, [pc, #448]	; (80068f4 <HAL_DMA_IRQHandler+0xa24>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d027      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a6e      	ldr	r2, [pc, #440]	; (80068f8 <HAL_DMA_IRQHandler+0xa28>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d022      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a6d      	ldr	r2, [pc, #436]	; (80068fc <HAL_DMA_IRQHandler+0xa2c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d01d      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a6b      	ldr	r2, [pc, #428]	; (8006900 <HAL_DMA_IRQHandler+0xa30>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d018      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a6a      	ldr	r2, [pc, #424]	; (8006904 <HAL_DMA_IRQHandler+0xa34>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d013      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a68      	ldr	r2, [pc, #416]	; (8006908 <HAL_DMA_IRQHandler+0xa38>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00e      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a67      	ldr	r2, [pc, #412]	; (800690c <HAL_DMA_IRQHandler+0xa3c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d009      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a65      	ldr	r2, [pc, #404]	; (8006910 <HAL_DMA_IRQHandler+0xa40>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d004      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a64      	ldr	r2, [pc, #400]	; (8006914 <HAL_DMA_IRQHandler+0xa44>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d108      	bne.n	800679a <HAL_DMA_IRQHandler+0x8ca>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0201 	bic.w	r2, r2, #1
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	e007      	b.n	80067aa <HAL_DMA_IRQHandler+0x8da>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0201 	bic.w	r2, r2, #1
 80067a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d307      	bcc.n	80067c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1f2      	bne.n	80067aa <HAL_DMA_IRQHandler+0x8da>
 80067c4:	e000      	b.n	80067c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80067c6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d004      	beq.n	80067e0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2203      	movs	r2, #3
 80067da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80067de:	e003      	b.n	80067e8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8272 	beq.w	8006cde <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
 8006802:	e26c      	b.n	8006cde <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a43      	ldr	r2, [pc, #268]	; (8006918 <HAL_DMA_IRQHandler+0xa48>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d022      	beq.n	8006854 <HAL_DMA_IRQHandler+0x984>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a42      	ldr	r2, [pc, #264]	; (800691c <HAL_DMA_IRQHandler+0xa4c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d01d      	beq.n	8006854 <HAL_DMA_IRQHandler+0x984>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a40      	ldr	r2, [pc, #256]	; (8006920 <HAL_DMA_IRQHandler+0xa50>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d018      	beq.n	8006854 <HAL_DMA_IRQHandler+0x984>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a3f      	ldr	r2, [pc, #252]	; (8006924 <HAL_DMA_IRQHandler+0xa54>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d013      	beq.n	8006854 <HAL_DMA_IRQHandler+0x984>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a3d      	ldr	r2, [pc, #244]	; (8006928 <HAL_DMA_IRQHandler+0xa58>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00e      	beq.n	8006854 <HAL_DMA_IRQHandler+0x984>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a3c      	ldr	r2, [pc, #240]	; (800692c <HAL_DMA_IRQHandler+0xa5c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d009      	beq.n	8006854 <HAL_DMA_IRQHandler+0x984>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a3a      	ldr	r2, [pc, #232]	; (8006930 <HAL_DMA_IRQHandler+0xa60>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <HAL_DMA_IRQHandler+0x984>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a39      	ldr	r2, [pc, #228]	; (8006934 <HAL_DMA_IRQHandler+0xa64>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d101      	bne.n	8006858 <HAL_DMA_IRQHandler+0x988>
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <HAL_DMA_IRQHandler+0x98a>
 8006858:	2300      	movs	r3, #0
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 823f 	beq.w	8006cde <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	2204      	movs	r2, #4
 8006872:	409a      	lsls	r2, r3
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	4013      	ands	r3, r2
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 80cd 	beq.w	8006a18 <HAL_DMA_IRQHandler+0xb48>
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 80c7 	beq.w	8006a18 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800688e:	f003 031f 	and.w	r3, r3, #31
 8006892:	2204      	movs	r2, #4
 8006894:	409a      	lsls	r2, r3
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d049      	beq.n	8006938 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8210 	beq.w	8006cd8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068c0:	e20a      	b.n	8006cd8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 8206 	beq.w	8006cd8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068d4:	e200      	b.n	8006cd8 <HAL_DMA_IRQHandler+0xe08>
 80068d6:	bf00      	nop
 80068d8:	40020010 	.word	0x40020010
 80068dc:	40020028 	.word	0x40020028
 80068e0:	40020040 	.word	0x40020040
 80068e4:	40020058 	.word	0x40020058
 80068e8:	40020070 	.word	0x40020070
 80068ec:	40020088 	.word	0x40020088
 80068f0:	400200a0 	.word	0x400200a0
 80068f4:	400200b8 	.word	0x400200b8
 80068f8:	40020410 	.word	0x40020410
 80068fc:	40020428 	.word	0x40020428
 8006900:	40020440 	.word	0x40020440
 8006904:	40020458 	.word	0x40020458
 8006908:	40020470 	.word	0x40020470
 800690c:	40020488 	.word	0x40020488
 8006910:	400204a0 	.word	0x400204a0
 8006914:	400204b8 	.word	0x400204b8
 8006918:	58025408 	.word	0x58025408
 800691c:	5802541c 	.word	0x5802541c
 8006920:	58025430 	.word	0x58025430
 8006924:	58025444 	.word	0x58025444
 8006928:	58025458 	.word	0x58025458
 800692c:	5802546c 	.word	0x5802546c
 8006930:	58025480 	.word	0x58025480
 8006934:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d160      	bne.n	8006a04 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a7f      	ldr	r2, [pc, #508]	; (8006b44 <HAL_DMA_IRQHandler+0xc74>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d04a      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a7d      	ldr	r2, [pc, #500]	; (8006b48 <HAL_DMA_IRQHandler+0xc78>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d045      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a7c      	ldr	r2, [pc, #496]	; (8006b4c <HAL_DMA_IRQHandler+0xc7c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d040      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a7a      	ldr	r2, [pc, #488]	; (8006b50 <HAL_DMA_IRQHandler+0xc80>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d03b      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a79      	ldr	r2, [pc, #484]	; (8006b54 <HAL_DMA_IRQHandler+0xc84>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d036      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a77      	ldr	r2, [pc, #476]	; (8006b58 <HAL_DMA_IRQHandler+0xc88>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d031      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a76      	ldr	r2, [pc, #472]	; (8006b5c <HAL_DMA_IRQHandler+0xc8c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d02c      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a74      	ldr	r2, [pc, #464]	; (8006b60 <HAL_DMA_IRQHandler+0xc90>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d027      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a73      	ldr	r2, [pc, #460]	; (8006b64 <HAL_DMA_IRQHandler+0xc94>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d022      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a71      	ldr	r2, [pc, #452]	; (8006b68 <HAL_DMA_IRQHandler+0xc98>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01d      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a70      	ldr	r2, [pc, #448]	; (8006b6c <HAL_DMA_IRQHandler+0xc9c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d018      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a6e      	ldr	r2, [pc, #440]	; (8006b70 <HAL_DMA_IRQHandler+0xca0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d013      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a6d      	ldr	r2, [pc, #436]	; (8006b74 <HAL_DMA_IRQHandler+0xca4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00e      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a6b      	ldr	r2, [pc, #428]	; (8006b78 <HAL_DMA_IRQHandler+0xca8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d009      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a6a      	ldr	r2, [pc, #424]	; (8006b7c <HAL_DMA_IRQHandler+0xcac>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a68      	ldr	r2, [pc, #416]	; (8006b80 <HAL_DMA_IRQHandler+0xcb0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d108      	bne.n	80069f4 <HAL_DMA_IRQHandler+0xb24>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0208 	bic.w	r2, r2, #8
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	e007      	b.n	8006a04 <HAL_DMA_IRQHandler+0xb34>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0204 	bic.w	r2, r2, #4
 8006a02:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8165 	beq.w	8006cd8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a16:	e15f      	b.n	8006cd8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1c:	f003 031f 	and.w	r3, r3, #31
 8006a20:	2202      	movs	r2, #2
 8006a22:	409a      	lsls	r2, r3
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	4013      	ands	r3, r2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80c5 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0xce8>
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80bf 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3e:	f003 031f 	and.w	r3, r3, #31
 8006a42:	2202      	movs	r2, #2
 8006a44:	409a      	lsls	r2, r3
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d018      	beq.n	8006a86 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d109      	bne.n	8006a72 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 813a 	beq.w	8006cdc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a70:	e134      	b.n	8006cdc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 8130 	beq.w	8006cdc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a84:	e12a      	b.n	8006cdc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f003 0320 	and.w	r3, r3, #32
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f040 8089 	bne.w	8006ba4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a2b      	ldr	r2, [pc, #172]	; (8006b44 <HAL_DMA_IRQHandler+0xc74>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d04a      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a29      	ldr	r2, [pc, #164]	; (8006b48 <HAL_DMA_IRQHandler+0xc78>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d045      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a28      	ldr	r2, [pc, #160]	; (8006b4c <HAL_DMA_IRQHandler+0xc7c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d040      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a26      	ldr	r2, [pc, #152]	; (8006b50 <HAL_DMA_IRQHandler+0xc80>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d03b      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a25      	ldr	r2, [pc, #148]	; (8006b54 <HAL_DMA_IRQHandler+0xc84>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d036      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a23      	ldr	r2, [pc, #140]	; (8006b58 <HAL_DMA_IRQHandler+0xc88>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d031      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a22      	ldr	r2, [pc, #136]	; (8006b5c <HAL_DMA_IRQHandler+0xc8c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d02c      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a20      	ldr	r2, [pc, #128]	; (8006b60 <HAL_DMA_IRQHandler+0xc90>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d027      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <HAL_DMA_IRQHandler+0xc94>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d022      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1d      	ldr	r2, [pc, #116]	; (8006b68 <HAL_DMA_IRQHandler+0xc98>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d01d      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1c      	ldr	r2, [pc, #112]	; (8006b6c <HAL_DMA_IRQHandler+0xc9c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d018      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1a      	ldr	r2, [pc, #104]	; (8006b70 <HAL_DMA_IRQHandler+0xca0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a19      	ldr	r2, [pc, #100]	; (8006b74 <HAL_DMA_IRQHandler+0xca4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00e      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a17      	ldr	r2, [pc, #92]	; (8006b78 <HAL_DMA_IRQHandler+0xca8>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d009      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a16      	ldr	r2, [pc, #88]	; (8006b7c <HAL_DMA_IRQHandler+0xcac>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d004      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a14      	ldr	r2, [pc, #80]	; (8006b80 <HAL_DMA_IRQHandler+0xcb0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d128      	bne.n	8006b84 <HAL_DMA_IRQHandler+0xcb4>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0214 	bic.w	r2, r2, #20
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	e027      	b.n	8006b94 <HAL_DMA_IRQHandler+0xcc4>
 8006b44:	40020010 	.word	0x40020010
 8006b48:	40020028 	.word	0x40020028
 8006b4c:	40020040 	.word	0x40020040
 8006b50:	40020058 	.word	0x40020058
 8006b54:	40020070 	.word	0x40020070
 8006b58:	40020088 	.word	0x40020088
 8006b5c:	400200a0 	.word	0x400200a0
 8006b60:	400200b8 	.word	0x400200b8
 8006b64:	40020410 	.word	0x40020410
 8006b68:	40020428 	.word	0x40020428
 8006b6c:	40020440 	.word	0x40020440
 8006b70:	40020458 	.word	0x40020458
 8006b74:	40020470 	.word	0x40020470
 8006b78:	40020488 	.word	0x40020488
 8006b7c:	400204a0 	.word	0x400204a0
 8006b80:	400204b8 	.word	0x400204b8
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 020a 	bic.w	r2, r2, #10
 8006b92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 8097 	beq.w	8006cdc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb6:	e091      	b.n	8006cdc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	409a      	lsls	r2, r3
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 8088 	beq.w	8006cde <HAL_DMA_IRQHandler+0xe0e>
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8082 	beq.w	8006cde <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a41      	ldr	r2, [pc, #260]	; (8006ce4 <HAL_DMA_IRQHandler+0xe14>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d04a      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a3f      	ldr	r2, [pc, #252]	; (8006ce8 <HAL_DMA_IRQHandler+0xe18>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d045      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a3e      	ldr	r2, [pc, #248]	; (8006cec <HAL_DMA_IRQHandler+0xe1c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d040      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a3c      	ldr	r2, [pc, #240]	; (8006cf0 <HAL_DMA_IRQHandler+0xe20>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d03b      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a3b      	ldr	r2, [pc, #236]	; (8006cf4 <HAL_DMA_IRQHandler+0xe24>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d036      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a39      	ldr	r2, [pc, #228]	; (8006cf8 <HAL_DMA_IRQHandler+0xe28>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d031      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a38      	ldr	r2, [pc, #224]	; (8006cfc <HAL_DMA_IRQHandler+0xe2c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d02c      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a36      	ldr	r2, [pc, #216]	; (8006d00 <HAL_DMA_IRQHandler+0xe30>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d027      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a35      	ldr	r2, [pc, #212]	; (8006d04 <HAL_DMA_IRQHandler+0xe34>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d022      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a33      	ldr	r2, [pc, #204]	; (8006d08 <HAL_DMA_IRQHandler+0xe38>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d01d      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a32      	ldr	r2, [pc, #200]	; (8006d0c <HAL_DMA_IRQHandler+0xe3c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d018      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a30      	ldr	r2, [pc, #192]	; (8006d10 <HAL_DMA_IRQHandler+0xe40>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d013      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a2f      	ldr	r2, [pc, #188]	; (8006d14 <HAL_DMA_IRQHandler+0xe44>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d00e      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a2d      	ldr	r2, [pc, #180]	; (8006d18 <HAL_DMA_IRQHandler+0xe48>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d009      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a2c      	ldr	r2, [pc, #176]	; (8006d1c <HAL_DMA_IRQHandler+0xe4c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d004      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a2a      	ldr	r2, [pc, #168]	; (8006d20 <HAL_DMA_IRQHandler+0xe50>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d108      	bne.n	8006c8c <HAL_DMA_IRQHandler+0xdbc>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 021c 	bic.w	r2, r2, #28
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	e007      	b.n	8006c9c <HAL_DMA_IRQHandler+0xdcc>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 020e 	bic.w	r2, r2, #14
 8006c9a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca0:	f003 031f 	and.w	r3, r3, #31
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	409a      	lsls	r2, r3
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	4798      	blx	r3
 8006cd2:	e004      	b.n	8006cde <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006cd4:	bf00      	nop
 8006cd6:	e002      	b.n	8006cde <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cd8:	bf00      	nop
 8006cda:	e000      	b.n	8006cde <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cdc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006cde:	3728      	adds	r7, #40	; 0x28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	40020010 	.word	0x40020010
 8006ce8:	40020028 	.word	0x40020028
 8006cec:	40020040 	.word	0x40020040
 8006cf0:	40020058 	.word	0x40020058
 8006cf4:	40020070 	.word	0x40020070
 8006cf8:	40020088 	.word	0x40020088
 8006cfc:	400200a0 	.word	0x400200a0
 8006d00:	400200b8 	.word	0x400200b8
 8006d04:	40020410 	.word	0x40020410
 8006d08:	40020428 	.word	0x40020428
 8006d0c:	40020440 	.word	0x40020440
 8006d10:	40020458 	.word	0x40020458
 8006d14:	40020470 	.word	0x40020470
 8006d18:	40020488 	.word	0x40020488
 8006d1c:	400204a0 	.word	0x400204a0
 8006d20:	400204b8 	.word	0x400204b8

08006d24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d36:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d3c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a7f      	ldr	r2, [pc, #508]	; (8006f40 <DMA_SetConfig+0x21c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d072      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a7d      	ldr	r2, [pc, #500]	; (8006f44 <DMA_SetConfig+0x220>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d06d      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a7c      	ldr	r2, [pc, #496]	; (8006f48 <DMA_SetConfig+0x224>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d068      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a7a      	ldr	r2, [pc, #488]	; (8006f4c <DMA_SetConfig+0x228>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d063      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a79      	ldr	r2, [pc, #484]	; (8006f50 <DMA_SetConfig+0x22c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d05e      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a77      	ldr	r2, [pc, #476]	; (8006f54 <DMA_SetConfig+0x230>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d059      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a76      	ldr	r2, [pc, #472]	; (8006f58 <DMA_SetConfig+0x234>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d054      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a74      	ldr	r2, [pc, #464]	; (8006f5c <DMA_SetConfig+0x238>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d04f      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a73      	ldr	r2, [pc, #460]	; (8006f60 <DMA_SetConfig+0x23c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d04a      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a71      	ldr	r2, [pc, #452]	; (8006f64 <DMA_SetConfig+0x240>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d045      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a70      	ldr	r2, [pc, #448]	; (8006f68 <DMA_SetConfig+0x244>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d040      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a6e      	ldr	r2, [pc, #440]	; (8006f6c <DMA_SetConfig+0x248>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d03b      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a6d      	ldr	r2, [pc, #436]	; (8006f70 <DMA_SetConfig+0x24c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d036      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a6b      	ldr	r2, [pc, #428]	; (8006f74 <DMA_SetConfig+0x250>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d031      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a6a      	ldr	r2, [pc, #424]	; (8006f78 <DMA_SetConfig+0x254>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d02c      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a68      	ldr	r2, [pc, #416]	; (8006f7c <DMA_SetConfig+0x258>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d027      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a67      	ldr	r2, [pc, #412]	; (8006f80 <DMA_SetConfig+0x25c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d022      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a65      	ldr	r2, [pc, #404]	; (8006f84 <DMA_SetConfig+0x260>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d01d      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a64      	ldr	r2, [pc, #400]	; (8006f88 <DMA_SetConfig+0x264>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d018      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a62      	ldr	r2, [pc, #392]	; (8006f8c <DMA_SetConfig+0x268>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d013      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a61      	ldr	r2, [pc, #388]	; (8006f90 <DMA_SetConfig+0x26c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00e      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a5f      	ldr	r2, [pc, #380]	; (8006f94 <DMA_SetConfig+0x270>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d009      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a5e      	ldr	r2, [pc, #376]	; (8006f98 <DMA_SetConfig+0x274>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d004      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a5c      	ldr	r2, [pc, #368]	; (8006f9c <DMA_SetConfig+0x278>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d101      	bne.n	8006e32 <DMA_SetConfig+0x10e>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <DMA_SetConfig+0x110>
 8006e32:	2300      	movs	r3, #0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00d      	beq.n	8006e54 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e40:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d004      	beq.n	8006e54 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e52:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a39      	ldr	r2, [pc, #228]	; (8006f40 <DMA_SetConfig+0x21c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d04a      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a38      	ldr	r2, [pc, #224]	; (8006f44 <DMA_SetConfig+0x220>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d045      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a36      	ldr	r2, [pc, #216]	; (8006f48 <DMA_SetConfig+0x224>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d040      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a35      	ldr	r2, [pc, #212]	; (8006f4c <DMA_SetConfig+0x228>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d03b      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a33      	ldr	r2, [pc, #204]	; (8006f50 <DMA_SetConfig+0x22c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d036      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a32      	ldr	r2, [pc, #200]	; (8006f54 <DMA_SetConfig+0x230>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d031      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a30      	ldr	r2, [pc, #192]	; (8006f58 <DMA_SetConfig+0x234>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d02c      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a2f      	ldr	r2, [pc, #188]	; (8006f5c <DMA_SetConfig+0x238>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d027      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a2d      	ldr	r2, [pc, #180]	; (8006f60 <DMA_SetConfig+0x23c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d022      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a2c      	ldr	r2, [pc, #176]	; (8006f64 <DMA_SetConfig+0x240>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d01d      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a2a      	ldr	r2, [pc, #168]	; (8006f68 <DMA_SetConfig+0x244>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d018      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a29      	ldr	r2, [pc, #164]	; (8006f6c <DMA_SetConfig+0x248>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d013      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a27      	ldr	r2, [pc, #156]	; (8006f70 <DMA_SetConfig+0x24c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00e      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a26      	ldr	r2, [pc, #152]	; (8006f74 <DMA_SetConfig+0x250>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d009      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a24      	ldr	r2, [pc, #144]	; (8006f78 <DMA_SetConfig+0x254>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d004      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a23      	ldr	r2, [pc, #140]	; (8006f7c <DMA_SetConfig+0x258>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d101      	bne.n	8006ef8 <DMA_SetConfig+0x1d4>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <DMA_SetConfig+0x1d6>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d059      	beq.n	8006fb2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f02:	f003 031f 	and.w	r3, r3, #31
 8006f06:	223f      	movs	r2, #63	; 0x3f
 8006f08:	409a      	lsls	r2, r3
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f1c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	2b40      	cmp	r3, #64	; 0x40
 8006f2c:	d138      	bne.n	8006fa0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f3e:	e086      	b.n	800704e <DMA_SetConfig+0x32a>
 8006f40:	40020010 	.word	0x40020010
 8006f44:	40020028 	.word	0x40020028
 8006f48:	40020040 	.word	0x40020040
 8006f4c:	40020058 	.word	0x40020058
 8006f50:	40020070 	.word	0x40020070
 8006f54:	40020088 	.word	0x40020088
 8006f58:	400200a0 	.word	0x400200a0
 8006f5c:	400200b8 	.word	0x400200b8
 8006f60:	40020410 	.word	0x40020410
 8006f64:	40020428 	.word	0x40020428
 8006f68:	40020440 	.word	0x40020440
 8006f6c:	40020458 	.word	0x40020458
 8006f70:	40020470 	.word	0x40020470
 8006f74:	40020488 	.word	0x40020488
 8006f78:	400204a0 	.word	0x400204a0
 8006f7c:	400204b8 	.word	0x400204b8
 8006f80:	58025408 	.word	0x58025408
 8006f84:	5802541c 	.word	0x5802541c
 8006f88:	58025430 	.word	0x58025430
 8006f8c:	58025444 	.word	0x58025444
 8006f90:	58025458 	.word	0x58025458
 8006f94:	5802546c 	.word	0x5802546c
 8006f98:	58025480 	.word	0x58025480
 8006f9c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	60da      	str	r2, [r3, #12]
}
 8006fb0:	e04d      	b.n	800704e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a29      	ldr	r2, [pc, #164]	; (800705c <DMA_SetConfig+0x338>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d022      	beq.n	8007002 <DMA_SetConfig+0x2de>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a27      	ldr	r2, [pc, #156]	; (8007060 <DMA_SetConfig+0x33c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d01d      	beq.n	8007002 <DMA_SetConfig+0x2de>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a26      	ldr	r2, [pc, #152]	; (8007064 <DMA_SetConfig+0x340>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d018      	beq.n	8007002 <DMA_SetConfig+0x2de>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a24      	ldr	r2, [pc, #144]	; (8007068 <DMA_SetConfig+0x344>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d013      	beq.n	8007002 <DMA_SetConfig+0x2de>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a23      	ldr	r2, [pc, #140]	; (800706c <DMA_SetConfig+0x348>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d00e      	beq.n	8007002 <DMA_SetConfig+0x2de>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a21      	ldr	r2, [pc, #132]	; (8007070 <DMA_SetConfig+0x34c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d009      	beq.n	8007002 <DMA_SetConfig+0x2de>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a20      	ldr	r2, [pc, #128]	; (8007074 <DMA_SetConfig+0x350>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d004      	beq.n	8007002 <DMA_SetConfig+0x2de>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1e      	ldr	r2, [pc, #120]	; (8007078 <DMA_SetConfig+0x354>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d101      	bne.n	8007006 <DMA_SetConfig+0x2e2>
 8007002:	2301      	movs	r3, #1
 8007004:	e000      	b.n	8007008 <DMA_SetConfig+0x2e4>
 8007006:	2300      	movs	r3, #0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d020      	beq.n	800704e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007010:	f003 031f 	and.w	r3, r3, #31
 8007014:	2201      	movs	r2, #1
 8007016:	409a      	lsls	r2, r3
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2b40      	cmp	r3, #64	; 0x40
 800702a:	d108      	bne.n	800703e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	60da      	str	r2, [r3, #12]
}
 800703c:	e007      	b.n	800704e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	60da      	str	r2, [r3, #12]
}
 800704e:	bf00      	nop
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	58025408 	.word	0x58025408
 8007060:	5802541c 	.word	0x5802541c
 8007064:	58025430 	.word	0x58025430
 8007068:	58025444 	.word	0x58025444
 800706c:	58025458 	.word	0x58025458
 8007070:	5802546c 	.word	0x5802546c
 8007074:	58025480 	.word	0x58025480
 8007078:	58025494 	.word	0x58025494

0800707c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a42      	ldr	r2, [pc, #264]	; (8007194 <DMA_CalcBaseAndBitshift+0x118>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d04a      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a41      	ldr	r2, [pc, #260]	; (8007198 <DMA_CalcBaseAndBitshift+0x11c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d045      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a3f      	ldr	r2, [pc, #252]	; (800719c <DMA_CalcBaseAndBitshift+0x120>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d040      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a3e      	ldr	r2, [pc, #248]	; (80071a0 <DMA_CalcBaseAndBitshift+0x124>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d03b      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a3c      	ldr	r2, [pc, #240]	; (80071a4 <DMA_CalcBaseAndBitshift+0x128>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d036      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a3b      	ldr	r2, [pc, #236]	; (80071a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d031      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a39      	ldr	r2, [pc, #228]	; (80071ac <DMA_CalcBaseAndBitshift+0x130>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d02c      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a38      	ldr	r2, [pc, #224]	; (80071b0 <DMA_CalcBaseAndBitshift+0x134>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d027      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a36      	ldr	r2, [pc, #216]	; (80071b4 <DMA_CalcBaseAndBitshift+0x138>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d022      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a35      	ldr	r2, [pc, #212]	; (80071b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d01d      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a33      	ldr	r2, [pc, #204]	; (80071bc <DMA_CalcBaseAndBitshift+0x140>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d018      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a32      	ldr	r2, [pc, #200]	; (80071c0 <DMA_CalcBaseAndBitshift+0x144>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d013      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a30      	ldr	r2, [pc, #192]	; (80071c4 <DMA_CalcBaseAndBitshift+0x148>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d00e      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a2f      	ldr	r2, [pc, #188]	; (80071c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d009      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a2d      	ldr	r2, [pc, #180]	; (80071cc <DMA_CalcBaseAndBitshift+0x150>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d004      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a2c      	ldr	r2, [pc, #176]	; (80071d0 <DMA_CalcBaseAndBitshift+0x154>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d101      	bne.n	8007128 <DMA_CalcBaseAndBitshift+0xac>
 8007124:	2301      	movs	r3, #1
 8007126:	e000      	b.n	800712a <DMA_CalcBaseAndBitshift+0xae>
 8007128:	2300      	movs	r3, #0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d024      	beq.n	8007178 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	3b10      	subs	r3, #16
 8007136:	4a27      	ldr	r2, [pc, #156]	; (80071d4 <DMA_CalcBaseAndBitshift+0x158>)
 8007138:	fba2 2303 	umull	r2, r3, r2, r3
 800713c:	091b      	lsrs	r3, r3, #4
 800713e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	4a24      	ldr	r2, [pc, #144]	; (80071d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007148:	5cd3      	ldrb	r3, [r2, r3]
 800714a:	461a      	mov	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b03      	cmp	r3, #3
 8007154:	d908      	bls.n	8007168 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	4b1f      	ldr	r3, [pc, #124]	; (80071dc <DMA_CalcBaseAndBitshift+0x160>)
 800715e:	4013      	ands	r3, r2
 8007160:	1d1a      	adds	r2, r3, #4
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	659a      	str	r2, [r3, #88]	; 0x58
 8007166:	e00d      	b.n	8007184 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	4b1b      	ldr	r3, [pc, #108]	; (80071dc <DMA_CalcBaseAndBitshift+0x160>)
 8007170:	4013      	ands	r3, r2
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6593      	str	r3, [r2, #88]	; 0x58
 8007176:	e005      	b.n	8007184 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	40020010 	.word	0x40020010
 8007198:	40020028 	.word	0x40020028
 800719c:	40020040 	.word	0x40020040
 80071a0:	40020058 	.word	0x40020058
 80071a4:	40020070 	.word	0x40020070
 80071a8:	40020088 	.word	0x40020088
 80071ac:	400200a0 	.word	0x400200a0
 80071b0:	400200b8 	.word	0x400200b8
 80071b4:	40020410 	.word	0x40020410
 80071b8:	40020428 	.word	0x40020428
 80071bc:	40020440 	.word	0x40020440
 80071c0:	40020458 	.word	0x40020458
 80071c4:	40020470 	.word	0x40020470
 80071c8:	40020488 	.word	0x40020488
 80071cc:	400204a0 	.word	0x400204a0
 80071d0:	400204b8 	.word	0x400204b8
 80071d4:	aaaaaaab 	.word	0xaaaaaaab
 80071d8:	08010d38 	.word	0x08010d38
 80071dc:	fffffc00 	.word	0xfffffc00

080071e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d120      	bne.n	8007236 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d858      	bhi.n	80072ae <DMA_CheckFifoParam+0xce>
 80071fc:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <DMA_CheckFifoParam+0x24>)
 80071fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007202:	bf00      	nop
 8007204:	08007215 	.word	0x08007215
 8007208:	08007227 	.word	0x08007227
 800720c:	08007215 	.word	0x08007215
 8007210:	080072af 	.word	0x080072af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d048      	beq.n	80072b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007224:	e045      	b.n	80072b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800722e:	d142      	bne.n	80072b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007234:	e03f      	b.n	80072b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800723e:	d123      	bne.n	8007288 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	2b03      	cmp	r3, #3
 8007246:	d838      	bhi.n	80072ba <DMA_CheckFifoParam+0xda>
 8007248:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <DMA_CheckFifoParam+0x70>)
 800724a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724e:	bf00      	nop
 8007250:	08007261 	.word	0x08007261
 8007254:	08007267 	.word	0x08007267
 8007258:	08007261 	.word	0x08007261
 800725c:	08007279 	.word	0x08007279
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	73fb      	strb	r3, [r7, #15]
        break;
 8007264:	e030      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d025      	beq.n	80072be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007276:	e022      	b.n	80072be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007280:	d11f      	bne.n	80072c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007286:	e01c      	b.n	80072c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	2b02      	cmp	r3, #2
 800728e:	d902      	bls.n	8007296 <DMA_CheckFifoParam+0xb6>
 8007290:	2b03      	cmp	r3, #3
 8007292:	d003      	beq.n	800729c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007294:	e018      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	73fb      	strb	r3, [r7, #15]
        break;
 800729a:	e015      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00e      	beq.n	80072c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	73fb      	strb	r3, [r7, #15]
    break;
 80072ac:	e00b      	b.n	80072c6 <DMA_CheckFifoParam+0xe6>
        break;
 80072ae:	bf00      	nop
 80072b0:	e00a      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
        break;
 80072b2:	bf00      	nop
 80072b4:	e008      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
        break;
 80072b6:	bf00      	nop
 80072b8:	e006      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
        break;
 80072ba:	bf00      	nop
 80072bc:	e004      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
        break;
 80072be:	bf00      	nop
 80072c0:	e002      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
        break;
 80072c2:	bf00      	nop
 80072c4:	e000      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
    break;
 80072c6:	bf00      	nop
    }
  }

  return status;
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop

080072d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a38      	ldr	r2, [pc, #224]	; (80073cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d022      	beq.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a36      	ldr	r2, [pc, #216]	; (80073d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d01d      	beq.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a35      	ldr	r2, [pc, #212]	; (80073d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d018      	beq.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a33      	ldr	r2, [pc, #204]	; (80073d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d013      	beq.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a32      	ldr	r2, [pc, #200]	; (80073dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00e      	beq.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a30      	ldr	r2, [pc, #192]	; (80073e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d009      	beq.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a2f      	ldr	r2, [pc, #188]	; (80073e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d004      	beq.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a2d      	ldr	r2, [pc, #180]	; (80073e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d101      	bne.n	800733a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800733a:	2300      	movs	r3, #0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01a      	beq.n	8007376 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	3b08      	subs	r3, #8
 8007348:	4a28      	ldr	r2, [pc, #160]	; (80073ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800734a:	fba2 2303 	umull	r2, r3, r2, r3
 800734e:	091b      	lsrs	r3, r3, #4
 8007350:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	4b26      	ldr	r3, [pc, #152]	; (80073f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	461a      	mov	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a24      	ldr	r2, [pc, #144]	; (80073f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007364:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f003 031f 	and.w	r3, r3, #31
 800736c:	2201      	movs	r2, #1
 800736e:	409a      	lsls	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007374:	e024      	b.n	80073c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	3b10      	subs	r3, #16
 800737e:	4a1e      	ldr	r2, [pc, #120]	; (80073f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007380:	fba2 2303 	umull	r2, r3, r2, r3
 8007384:	091b      	lsrs	r3, r3, #4
 8007386:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d806      	bhi.n	800739e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4a1b      	ldr	r2, [pc, #108]	; (8007400 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d902      	bls.n	800739e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3308      	adds	r3, #8
 800739c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4b18      	ldr	r3, [pc, #96]	; (8007404 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	461a      	mov	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a16      	ldr	r2, [pc, #88]	; (8007408 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80073b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f003 031f 	and.w	r3, r3, #31
 80073b8:	2201      	movs	r2, #1
 80073ba:	409a      	lsls	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80073c0:	bf00      	nop
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	58025408 	.word	0x58025408
 80073d0:	5802541c 	.word	0x5802541c
 80073d4:	58025430 	.word	0x58025430
 80073d8:	58025444 	.word	0x58025444
 80073dc:	58025458 	.word	0x58025458
 80073e0:	5802546c 	.word	0x5802546c
 80073e4:	58025480 	.word	0x58025480
 80073e8:	58025494 	.word	0x58025494
 80073ec:	cccccccd 	.word	0xcccccccd
 80073f0:	16009600 	.word	0x16009600
 80073f4:	58025880 	.word	0x58025880
 80073f8:	aaaaaaab 	.word	0xaaaaaaab
 80073fc:	400204b8 	.word	0x400204b8
 8007400:	4002040f 	.word	0x4002040f
 8007404:	10008200 	.word	0x10008200
 8007408:	40020880 	.word	0x40020880

0800740c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	b2db      	uxtb	r3, r3
 800741a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d04a      	beq.n	80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b08      	cmp	r3, #8
 8007426:	d847      	bhi.n	80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a25      	ldr	r2, [pc, #148]	; (80074c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d022      	beq.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a24      	ldr	r2, [pc, #144]	; (80074c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d01d      	beq.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a22      	ldr	r2, [pc, #136]	; (80074cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d018      	beq.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a21      	ldr	r2, [pc, #132]	; (80074d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d013      	beq.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a1f      	ldr	r2, [pc, #124]	; (80074d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d00e      	beq.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a1e      	ldr	r2, [pc, #120]	; (80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d009      	beq.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a1c      	ldr	r2, [pc, #112]	; (80074dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d004      	beq.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a1b      	ldr	r2, [pc, #108]	; (80074e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d101      	bne.n	800747c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007478:	2301      	movs	r3, #1
 800747a:	e000      	b.n	800747e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800747c:	2300      	movs	r3, #0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	4b17      	ldr	r3, [pc, #92]	; (80074e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007486:	4413      	add	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	461a      	mov	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a15      	ldr	r2, [pc, #84]	; (80074e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007494:	671a      	str	r2, [r3, #112]	; 0x70
 8007496:	e009      	b.n	80074ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4b14      	ldr	r3, [pc, #80]	; (80074ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	461a      	mov	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a11      	ldr	r2, [pc, #68]	; (80074f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80074aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	2201      	movs	r2, #1
 80074b2:	409a      	lsls	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	58025408 	.word	0x58025408
 80074c8:	5802541c 	.word	0x5802541c
 80074cc:	58025430 	.word	0x58025430
 80074d0:	58025444 	.word	0x58025444
 80074d4:	58025458 	.word	0x58025458
 80074d8:	5802546c 	.word	0x5802546c
 80074dc:	58025480 	.word	0x58025480
 80074e0:	58025494 	.word	0x58025494
 80074e4:	1600963f 	.word	0x1600963f
 80074e8:	58025940 	.word	0x58025940
 80074ec:	1000823f 	.word	0x1000823f
 80074f0:	40020940 	.word	0x40020940

080074f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b089      	sub	sp, #36	; 0x24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80074fe:	2300      	movs	r3, #0
 8007500:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007502:	4b89      	ldr	r3, [pc, #548]	; (8007728 <HAL_GPIO_Init+0x234>)
 8007504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007506:	e194      	b.n	8007832 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	2101      	movs	r1, #1
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	fa01 f303 	lsl.w	r3, r1, r3
 8007514:	4013      	ands	r3, r2
 8007516:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 8186 	beq.w	800782c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f003 0303 	and.w	r3, r3, #3
 8007528:	2b01      	cmp	r3, #1
 800752a:	d005      	beq.n	8007538 <HAL_GPIO_Init+0x44>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f003 0303 	and.w	r3, r3, #3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d130      	bne.n	800759a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	2203      	movs	r2, #3
 8007544:	fa02 f303 	lsl.w	r3, r2, r3
 8007548:	43db      	mvns	r3, r3
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	4013      	ands	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	69ba      	ldr	r2, [r7, #24]
 800755e:	4313      	orrs	r3, r2
 8007560:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800756e:	2201      	movs	r2, #1
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	fa02 f303 	lsl.w	r3, r2, r3
 8007576:	43db      	mvns	r3, r3
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	4013      	ands	r3, r2
 800757c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	091b      	lsrs	r3, r3, #4
 8007584:	f003 0201 	and.w	r2, r3, #1
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	fa02 f303 	lsl.w	r3, r2, r3
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	4313      	orrs	r3, r2
 8007592:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d017      	beq.n	80075d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	2203      	movs	r2, #3
 80075b2:	fa02 f303 	lsl.w	r3, r2, r3
 80075b6:	43db      	mvns	r3, r3
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	4013      	ands	r3, r2
 80075bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	689a      	ldr	r2, [r3, #8]
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f003 0303 	and.w	r3, r3, #3
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d123      	bne.n	800762a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	08da      	lsrs	r2, r3, #3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3208      	adds	r2, #8
 80075ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	220f      	movs	r2, #15
 80075fa:	fa02 f303 	lsl.w	r3, r2, r3
 80075fe:	43db      	mvns	r3, r3
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	4013      	ands	r3, r2
 8007604:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	691a      	ldr	r2, [r3, #16]
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	fa02 f303 	lsl.w	r3, r2, r3
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	4313      	orrs	r3, r2
 800761a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	08da      	lsrs	r2, r3, #3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3208      	adds	r2, #8
 8007624:	69b9      	ldr	r1, [r7, #24]
 8007626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	2203      	movs	r2, #3
 8007636:	fa02 f303 	lsl.w	r3, r2, r3
 800763a:	43db      	mvns	r3, r3
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	4013      	ands	r3, r2
 8007640:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f003 0203 	and.w	r2, r3, #3
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	4313      	orrs	r3, r2
 8007656:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80e0 	beq.w	800782c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800766c:	4b2f      	ldr	r3, [pc, #188]	; (800772c <HAL_GPIO_Init+0x238>)
 800766e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007672:	4a2e      	ldr	r2, [pc, #184]	; (800772c <HAL_GPIO_Init+0x238>)
 8007674:	f043 0302 	orr.w	r3, r3, #2
 8007678:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800767c:	4b2b      	ldr	r3, [pc, #172]	; (800772c <HAL_GPIO_Init+0x238>)
 800767e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800768a:	4a29      	ldr	r2, [pc, #164]	; (8007730 <HAL_GPIO_Init+0x23c>)
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	089b      	lsrs	r3, r3, #2
 8007690:	3302      	adds	r3, #2
 8007692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	f003 0303 	and.w	r3, r3, #3
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	220f      	movs	r2, #15
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	43db      	mvns	r3, r3
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	4013      	ands	r3, r2
 80076ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a20      	ldr	r2, [pc, #128]	; (8007734 <HAL_GPIO_Init+0x240>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d052      	beq.n	800775c <HAL_GPIO_Init+0x268>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a1f      	ldr	r2, [pc, #124]	; (8007738 <HAL_GPIO_Init+0x244>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d031      	beq.n	8007722 <HAL_GPIO_Init+0x22e>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a1e      	ldr	r2, [pc, #120]	; (800773c <HAL_GPIO_Init+0x248>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d02b      	beq.n	800771e <HAL_GPIO_Init+0x22a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a1d      	ldr	r2, [pc, #116]	; (8007740 <HAL_GPIO_Init+0x24c>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d025      	beq.n	800771a <HAL_GPIO_Init+0x226>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <HAL_GPIO_Init+0x250>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d01f      	beq.n	8007716 <HAL_GPIO_Init+0x222>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a1b      	ldr	r2, [pc, #108]	; (8007748 <HAL_GPIO_Init+0x254>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d019      	beq.n	8007712 <HAL_GPIO_Init+0x21e>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a1a      	ldr	r2, [pc, #104]	; (800774c <HAL_GPIO_Init+0x258>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d013      	beq.n	800770e <HAL_GPIO_Init+0x21a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a19      	ldr	r2, [pc, #100]	; (8007750 <HAL_GPIO_Init+0x25c>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00d      	beq.n	800770a <HAL_GPIO_Init+0x216>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a18      	ldr	r2, [pc, #96]	; (8007754 <HAL_GPIO_Init+0x260>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d007      	beq.n	8007706 <HAL_GPIO_Init+0x212>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a17      	ldr	r2, [pc, #92]	; (8007758 <HAL_GPIO_Init+0x264>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d101      	bne.n	8007702 <HAL_GPIO_Init+0x20e>
 80076fe:	2309      	movs	r3, #9
 8007700:	e02d      	b.n	800775e <HAL_GPIO_Init+0x26a>
 8007702:	230a      	movs	r3, #10
 8007704:	e02b      	b.n	800775e <HAL_GPIO_Init+0x26a>
 8007706:	2308      	movs	r3, #8
 8007708:	e029      	b.n	800775e <HAL_GPIO_Init+0x26a>
 800770a:	2307      	movs	r3, #7
 800770c:	e027      	b.n	800775e <HAL_GPIO_Init+0x26a>
 800770e:	2306      	movs	r3, #6
 8007710:	e025      	b.n	800775e <HAL_GPIO_Init+0x26a>
 8007712:	2305      	movs	r3, #5
 8007714:	e023      	b.n	800775e <HAL_GPIO_Init+0x26a>
 8007716:	2304      	movs	r3, #4
 8007718:	e021      	b.n	800775e <HAL_GPIO_Init+0x26a>
 800771a:	2303      	movs	r3, #3
 800771c:	e01f      	b.n	800775e <HAL_GPIO_Init+0x26a>
 800771e:	2302      	movs	r3, #2
 8007720:	e01d      	b.n	800775e <HAL_GPIO_Init+0x26a>
 8007722:	2301      	movs	r3, #1
 8007724:	e01b      	b.n	800775e <HAL_GPIO_Init+0x26a>
 8007726:	bf00      	nop
 8007728:	58000080 	.word	0x58000080
 800772c:	58024400 	.word	0x58024400
 8007730:	58000400 	.word	0x58000400
 8007734:	58020000 	.word	0x58020000
 8007738:	58020400 	.word	0x58020400
 800773c:	58020800 	.word	0x58020800
 8007740:	58020c00 	.word	0x58020c00
 8007744:	58021000 	.word	0x58021000
 8007748:	58021400 	.word	0x58021400
 800774c:	58021800 	.word	0x58021800
 8007750:	58021c00 	.word	0x58021c00
 8007754:	58022000 	.word	0x58022000
 8007758:	58022400 	.word	0x58022400
 800775c:	2300      	movs	r3, #0
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	f002 0203 	and.w	r2, r2, #3
 8007764:	0092      	lsls	r2, r2, #2
 8007766:	4093      	lsls	r3, r2
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	4313      	orrs	r3, r2
 800776c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800776e:	4938      	ldr	r1, [pc, #224]	; (8007850 <HAL_GPIO_Init+0x35c>)
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	089b      	lsrs	r3, r3, #2
 8007774:	3302      	adds	r3, #2
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800777c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	43db      	mvns	r3, r3
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	4013      	ands	r3, r2
 800778c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80077a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80077aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	43db      	mvns	r3, r3
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	4013      	ands	r3, r2
 80077ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d003      	beq.n	80077d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80077d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	43db      	mvns	r3, r3
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	4013      	ands	r3, r2
 80077e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	43db      	mvns	r3, r3
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	4013      	ands	r3, r2
 8007810:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	4313      	orrs	r3, r2
 8007824:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	3301      	adds	r3, #1
 8007830:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	fa22 f303 	lsr.w	r3, r2, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	f47f ae63 	bne.w	8007508 <HAL_GPIO_Init+0x14>
  }
}
 8007842:	bf00      	nop
 8007844:	bf00      	nop
 8007846:	3724      	adds	r7, #36	; 0x24
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	58000400 	.word	0x58000400

08007854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691a      	ldr	r2, [r3, #16]
 8007864:	887b      	ldrh	r3, [r7, #2]
 8007866:	4013      	ands	r3, r2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800786c:	2301      	movs	r3, #1
 800786e:	73fb      	strb	r3, [r7, #15]
 8007870:	e001      	b.n	8007876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007876:	7bfb      	ldrb	r3, [r7, #15]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	807b      	strh	r3, [r7, #2]
 8007890:	4613      	mov	r3, r2
 8007892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007894:	787b      	ldrb	r3, [r7, #1]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800789a:	887a      	ldrh	r2, [r7, #2]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80078a0:	e003      	b.n	80078aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80078a2:	887b      	ldrh	r3, [r7, #2]
 80078a4:	041a      	lsls	r2, r3, #16
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	619a      	str	r2, [r3, #24]
}
 80078aa:	bf00      	nop
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
	...

080078b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e08b      	b.n	80079e2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d106      	bne.n	80078e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fa fb50 	bl	8001f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2224      	movs	r2, #36	; 0x24
 80078e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0201 	bic.w	r2, r2, #1
 80078fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007908:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007918:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d107      	bne.n	8007932 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800792e:	609a      	str	r2, [r3, #8]
 8007930:	e006      	b.n	8007940 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689a      	ldr	r2, [r3, #8]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800793e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d108      	bne.n	800795a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007956:	605a      	str	r2, [r3, #4]
 8007958:	e007      	b.n	800796a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007968:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6859      	ldr	r1, [r3, #4]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	4b1d      	ldr	r3, [pc, #116]	; (80079ec <HAL_I2C_Init+0x134>)
 8007976:	430b      	orrs	r3, r1
 8007978:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007988:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691a      	ldr	r2, [r3, #16]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	69d9      	ldr	r1, [r3, #28]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a1a      	ldr	r2, [r3, #32]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0201 	orr.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	02008000 	.word	0x02008000

080079f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b088      	sub	sp, #32
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	607a      	str	r2, [r7, #4]
 80079fa:	461a      	mov	r2, r3
 80079fc:	460b      	mov	r3, r1
 80079fe:	817b      	strh	r3, [r7, #10]
 8007a00:	4613      	mov	r3, r2
 8007a02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	f040 80fd 	bne.w	8007c0c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_I2C_Master_Transmit+0x30>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e0f6      	b.n	8007c0e <HAL_I2C_Master_Transmit+0x21e>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a28:	f7fa fefa 	bl	8002820 <HAL_GetTick>
 8007a2c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	2319      	movs	r3, #25
 8007a34:	2201      	movs	r2, #1
 8007a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 fa0a 	bl	8007e54 <I2C_WaitOnFlagUntilTimeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e0e1      	b.n	8007c0e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2221      	movs	r2, #33	; 0x21
 8007a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2210      	movs	r2, #16
 8007a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	893a      	ldrh	r2, [r7, #8]
 8007a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2bff      	cmp	r3, #255	; 0xff
 8007a7a:	d906      	bls.n	8007a8a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	22ff      	movs	r2, #255	; 0xff
 8007a80:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007a82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a86:	617b      	str	r3, [r7, #20]
 8007a88:	e007      	b.n	8007a9a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007a94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a98:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d024      	beq.n	8007aec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	781a      	ldrb	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aca:	3b01      	subs	r3, #1
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	3301      	adds	r3, #1
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	8979      	ldrh	r1, [r7, #10]
 8007ade:	4b4e      	ldr	r3, [pc, #312]	; (8007c18 <HAL_I2C_Master_Transmit+0x228>)
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 fc05 	bl	80082f4 <I2C_TransferConfig>
 8007aea:	e066      	b.n	8007bba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	8979      	ldrh	r1, [r7, #10]
 8007af4:	4b48      	ldr	r3, [pc, #288]	; (8007c18 <HAL_I2C_Master_Transmit+0x228>)
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 fbfa 	bl	80082f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007b00:	e05b      	b.n	8007bba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	6a39      	ldr	r1, [r7, #32]
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 f9fd 	bl	8007f06 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e07b      	b.n	8007c0e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	781a      	ldrb	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d034      	beq.n	8007bba <HAL_I2C_Master_Transmit+0x1ca>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d130      	bne.n	8007bba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	2180      	movs	r1, #128	; 0x80
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f976 	bl	8007e54 <I2C_WaitOnFlagUntilTimeout>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e04d      	b.n	8007c0e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	2bff      	cmp	r3, #255	; 0xff
 8007b7a:	d90e      	bls.n	8007b9a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	22ff      	movs	r2, #255	; 0xff
 8007b80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	8979      	ldrh	r1, [r7, #10]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 fbae 	bl	80082f4 <I2C_TransferConfig>
 8007b98:	e00f      	b.n	8007bba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	8979      	ldrh	r1, [r7, #10]
 8007bac:	2300      	movs	r3, #0
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 fb9d 	bl	80082f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d19e      	bne.n	8007b02 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	6a39      	ldr	r1, [r7, #32]
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 f9e3 	bl	8007f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e01a      	b.n	8007c0e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6859      	ldr	r1, [r3, #4]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <HAL_I2C_Master_Transmit+0x22c>)
 8007bec:	400b      	ands	r3, r1
 8007bee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	e000      	b.n	8007c0e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007c0c:	2302      	movs	r3, #2
  }
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	80002000 	.word	0x80002000
 8007c1c:	fe00e800 	.word	0xfe00e800

08007c20 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b088      	sub	sp, #32
 8007c24:	af02      	add	r7, sp, #8
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	607a      	str	r2, [r7, #4]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	817b      	strh	r3, [r7, #10]
 8007c30:	4613      	mov	r3, r2
 8007c32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b20      	cmp	r3, #32
 8007c3e:	f040 80db 	bne.w	8007df8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d101      	bne.n	8007c50 <HAL_I2C_Master_Receive+0x30>
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	e0d4      	b.n	8007dfa <HAL_I2C_Master_Receive+0x1da>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c58:	f7fa fde2 	bl	8002820 <HAL_GetTick>
 8007c5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	2319      	movs	r3, #25
 8007c64:	2201      	movs	r2, #1
 8007c66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 f8f2 	bl	8007e54 <I2C_WaitOnFlagUntilTimeout>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e0bf      	b.n	8007dfa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2222      	movs	r2, #34	; 0x22
 8007c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2210      	movs	r2, #16
 8007c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	893a      	ldrh	r2, [r7, #8]
 8007c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2bff      	cmp	r3, #255	; 0xff
 8007caa:	d90e      	bls.n	8007cca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	22ff      	movs	r2, #255	; 0xff
 8007cb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	8979      	ldrh	r1, [r7, #10]
 8007cba:	4b52      	ldr	r3, [pc, #328]	; (8007e04 <HAL_I2C_Master_Receive+0x1e4>)
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 fb16 	bl	80082f4 <I2C_TransferConfig>
 8007cc8:	e06d      	b.n	8007da6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	8979      	ldrh	r1, [r7, #10]
 8007cdc:	4b49      	ldr	r3, [pc, #292]	; (8007e04 <HAL_I2C_Master_Receive+0x1e4>)
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f000 fb05 	bl	80082f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007cea:	e05c      	b.n	8007da6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	6a39      	ldr	r1, [r7, #32]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 f993 	bl	800801c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e07c      	b.n	8007dfa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0a:	b2d2      	uxtb	r2, r2
 8007d0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d034      	beq.n	8007da6 <HAL_I2C_Master_Receive+0x186>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d130      	bne.n	8007da6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2180      	movs	r1, #128	; 0x80
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 f880 	bl	8007e54 <I2C_WaitOnFlagUntilTimeout>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e04d      	b.n	8007dfa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	2bff      	cmp	r3, #255	; 0xff
 8007d66:	d90e      	bls.n	8007d86 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	22ff      	movs	r2, #255	; 0xff
 8007d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	8979      	ldrh	r1, [r7, #10]
 8007d76:	2300      	movs	r3, #0
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 fab8 	bl	80082f4 <I2C_TransferConfig>
 8007d84:	e00f      	b.n	8007da6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	8979      	ldrh	r1, [r7, #10]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 faa7 	bl	80082f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d19d      	bne.n	8007cec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	6a39      	ldr	r1, [r7, #32]
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 f8ed 	bl	8007f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e01a      	b.n	8007dfa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6859      	ldr	r1, [r3, #4]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	4b0c      	ldr	r3, [pc, #48]	; (8007e08 <HAL_I2C_Master_Receive+0x1e8>)
 8007dd8:	400b      	ands	r3, r1
 8007dda:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2220      	movs	r2, #32
 8007de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	e000      	b.n	8007dfa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007df8:	2302      	movs	r3, #2
  }
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	80002400 	.word	0x80002400
 8007e08:	fe00e800 	.word	0xfe00e800

08007e0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d103      	bne.n	8007e2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2200      	movs	r2, #0
 8007e28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d007      	beq.n	8007e48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699a      	ldr	r2, [r3, #24]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0201 	orr.w	r2, r2, #1
 8007e46:	619a      	str	r2, [r3, #24]
  }
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	4613      	mov	r3, r2
 8007e62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e64:	e03b      	b.n	8007ede <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f000 f962 	bl	8008134 <I2C_IsErrorOccurred>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e041      	b.n	8007efe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e80:	d02d      	beq.n	8007ede <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e82:	f7fa fccd 	bl	8002820 <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d302      	bcc.n	8007e98 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d122      	bne.n	8007ede <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2301      	moveq	r3, #1
 8007eaa:	2300      	movne	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	461a      	mov	r2, r3
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d113      	bne.n	8007ede <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eba:	f043 0220 	orr.w	r2, r3, #32
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e00f      	b.n	8007efe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	699a      	ldr	r2, [r3, #24]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	bf0c      	ite	eq
 8007eee:	2301      	moveq	r3, #1
 8007ef0:	2300      	movne	r3, #0
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d0b4      	beq.n	8007e66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f12:	e033      	b.n	8007f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	68b9      	ldr	r1, [r7, #8]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f90b 	bl	8008134 <I2C_IsErrorOccurred>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e031      	b.n	8007f8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f2e:	d025      	beq.n	8007f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f30:	f7fa fc76 	bl	8002820 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d302      	bcc.n	8007f46 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d11a      	bne.n	8007f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	f003 0302 	and.w	r3, r3, #2
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d013      	beq.n	8007f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f58:	f043 0220 	orr.w	r2, r3, #32
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e007      	b.n	8007f8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d1c4      	bne.n	8007f14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fa0:	e02f      	b.n	8008002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	68b9      	ldr	r1, [r7, #8]
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 f8c4 	bl	8008134 <I2C_IsErrorOccurred>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e02d      	b.n	8008012 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fb6:	f7fa fc33 	bl	8002820 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d302      	bcc.n	8007fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d11a      	bne.n	8008002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	f003 0320 	and.w	r3, r3, #32
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d013      	beq.n	8008002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fde:	f043 0220 	orr.w	r2, r3, #32
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2220      	movs	r2, #32
 8007fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e007      	b.n	8008012 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	f003 0320 	and.w	r3, r3, #32
 800800c:	2b20      	cmp	r3, #32
 800800e:	d1c8      	bne.n	8007fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
	...

0800801c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800802c:	e071      	b.n	8008112 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	68b9      	ldr	r1, [r7, #8]
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 f87e 	bl	8008134 <I2C_IsErrorOccurred>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b20      	cmp	r3, #32
 800804e:	d13b      	bne.n	80080c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008050:	7dfb      	ldrb	r3, [r7, #23]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d138      	bne.n	80080c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b04      	cmp	r3, #4
 8008062:	d105      	bne.n	8008070 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	f003 0310 	and.w	r3, r3, #16
 800807a:	2b10      	cmp	r3, #16
 800807c:	d121      	bne.n	80080c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2210      	movs	r2, #16
 8008084:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2204      	movs	r2, #4
 800808a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2220      	movs	r2, #32
 8008092:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6859      	ldr	r1, [r3, #4]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	4b24      	ldr	r3, [pc, #144]	; (8008130 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80080a0:	400b      	ands	r3, r1
 80080a2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2220      	movs	r2, #32
 80080a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	75fb      	strb	r3, [r7, #23]
 80080c0:	e002      	b.n	80080c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80080c8:	f7fa fbaa 	bl	8002820 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d302      	bcc.n	80080de <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d119      	bne.n	8008112 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d116      	bne.n	8008112 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	f003 0304 	and.w	r3, r3, #4
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d00f      	beq.n	8008112 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f6:	f043 0220 	orr.w	r2, r3, #32
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b04      	cmp	r3, #4
 800811e:	d002      	beq.n	8008126 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008120:	7dfb      	ldrb	r3, [r7, #23]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d083      	beq.n	800802e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008126:	7dfb      	ldrb	r3, [r7, #23]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	fe00e800 	.word	0xfe00e800

08008134 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08a      	sub	sp, #40	; 0x28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800814e:	2300      	movs	r3, #0
 8008150:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	f003 0310 	and.w	r3, r3, #16
 800815c:	2b00      	cmp	r3, #0
 800815e:	d068      	beq.n	8008232 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2210      	movs	r2, #16
 8008166:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008168:	e049      	b.n	80081fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008170:	d045      	beq.n	80081fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008172:	f7fa fb55 	bl	8002820 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	429a      	cmp	r2, r3
 8008180:	d302      	bcc.n	8008188 <I2C_IsErrorOccurred+0x54>
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d13a      	bne.n	80081fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008192:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800819a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081aa:	d121      	bne.n	80081f0 <I2C_IsErrorOccurred+0xbc>
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081b2:	d01d      	beq.n	80081f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80081b4:	7cfb      	ldrb	r3, [r7, #19]
 80081b6:	2b20      	cmp	r3, #32
 80081b8:	d01a      	beq.n	80081f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80081ca:	f7fa fb29 	bl	8002820 <HAL_GetTick>
 80081ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081d0:	e00e      	b.n	80081f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80081d2:	f7fa fb25 	bl	8002820 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b19      	cmp	r3, #25
 80081de:	d907      	bls.n	80081f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	f043 0320 	orr.w	r3, r3, #32
 80081e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80081ee:	e006      	b.n	80081fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	f003 0320 	and.w	r3, r3, #32
 80081fa:	2b20      	cmp	r3, #32
 80081fc:	d1e9      	bne.n	80081d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b20      	cmp	r3, #32
 800820a:	d003      	beq.n	8008214 <I2C_IsErrorOccurred+0xe0>
 800820c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0aa      	beq.n	800816a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008218:	2b00      	cmp	r3, #0
 800821a:	d103      	bne.n	8008224 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2220      	movs	r2, #32
 8008222:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	f043 0304 	orr.w	r3, r3, #4
 800822a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00b      	beq.n	800825c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	f043 0301 	orr.w	r3, r3, #1
 800824a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008254:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	f043 0308 	orr.w	r3, r3, #8
 800826c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008276:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	f043 0302 	orr.w	r3, r3, #2
 800828e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008298:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80082a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01c      	beq.n	80082e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f7ff fdaf 	bl	8007e0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6859      	ldr	r1, [r3, #4]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	4b0d      	ldr	r3, [pc, #52]	; (80082f0 <I2C_IsErrorOccurred+0x1bc>)
 80082ba:	400b      	ands	r3, r1
 80082bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	431a      	orrs	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80082e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3728      	adds	r7, #40	; 0x28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	fe00e800 	.word	0xfe00e800

080082f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b087      	sub	sp, #28
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	607b      	str	r3, [r7, #4]
 80082fe:	460b      	mov	r3, r1
 8008300:	817b      	strh	r3, [r7, #10]
 8008302:	4613      	mov	r3, r2
 8008304:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008306:	897b      	ldrh	r3, [r7, #10]
 8008308:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800830c:	7a7b      	ldrb	r3, [r7, #9]
 800830e:	041b      	lsls	r3, r3, #16
 8008310:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008314:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	4313      	orrs	r3, r2
 800831e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008322:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	0d5b      	lsrs	r3, r3, #21
 800832e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008332:	4b08      	ldr	r3, [pc, #32]	; (8008354 <I2C_TransferConfig+0x60>)
 8008334:	430b      	orrs	r3, r1
 8008336:	43db      	mvns	r3, r3
 8008338:	ea02 0103 	and.w	r1, r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	430a      	orrs	r2, r1
 8008344:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008346:	bf00      	nop
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	03ff63ff 	.word	0x03ff63ff

08008358 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b20      	cmp	r3, #32
 800836c:	d138      	bne.n	80083e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008374:	2b01      	cmp	r3, #1
 8008376:	d101      	bne.n	800837c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008378:	2302      	movs	r3, #2
 800837a:	e032      	b.n	80083e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2224      	movs	r2, #36	; 0x24
 8008388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0201 	bic.w	r2, r2, #1
 800839a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6819      	ldr	r1, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f042 0201 	orr.w	r2, r2, #1
 80083ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	e000      	b.n	80083e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80083e0:	2302      	movs	r3, #2
  }
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b085      	sub	sp, #20
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b20      	cmp	r3, #32
 8008402:	d139      	bne.n	8008478 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800840a:	2b01      	cmp	r3, #1
 800840c:	d101      	bne.n	8008412 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800840e:	2302      	movs	r3, #2
 8008410:	e033      	b.n	800847a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2224      	movs	r2, #36	; 0x24
 800841e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 0201 	bic.w	r2, r2, #1
 8008430:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008440:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	021b      	lsls	r3, r3, #8
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	4313      	orrs	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0201 	orr.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2220      	movs	r2, #32
 8008468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008474:	2300      	movs	r3, #0
 8008476:	e000      	b.n	800847a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008478:	2302      	movs	r3, #2
  }
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
	...

08008488 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008494:	4b18      	ldr	r3, [pc, #96]	; (80084f8 <HAL_PWR_EnterSTOPMode+0x70>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f023 0201 	bic.w	r2, r3, #1
 800849c:	4916      	ldr	r1, [pc, #88]	; (80084f8 <HAL_PWR_EnterSTOPMode+0x70>)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 80084a4:	4b14      	ldr	r3, [pc, #80]	; (80084f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	4a13      	ldr	r2, [pc, #76]	; (80084f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80084aa:	f023 0305 	bic.w	r3, r3, #5
 80084ae:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 80084b0:	4b11      	ldr	r3, [pc, #68]	; (80084f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	4a10      	ldr	r2, [pc, #64]	; (80084f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80084b6:	f023 0302 	bic.w	r3, r3, #2
 80084ba:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80084bc:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <HAL_PWR_EnterSTOPMode+0x74>)
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	4a0e      	ldr	r2, [pc, #56]	; (80084fc <HAL_PWR_EnterSTOPMode+0x74>)
 80084c2:	f043 0304 	orr.w	r3, r3, #4
 80084c6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80084c8:	f3bf 8f4f 	dsb	sy
}
 80084cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80084ce:	f3bf 8f6f 	isb	sy
}
 80084d2:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80084d4:	78fb      	ldrb	r3, [r7, #3]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80084da:	bf30      	wfi
 80084dc:	e000      	b.n	80084e0 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80084de:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80084e0:	4b06      	ldr	r3, [pc, #24]	; (80084fc <HAL_PWR_EnterSTOPMode+0x74>)
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	4a05      	ldr	r2, [pc, #20]	; (80084fc <HAL_PWR_EnterSTOPMode+0x74>)
 80084e6:	f023 0304 	bic.w	r3, r3, #4
 80084ea:	6113      	str	r3, [r2, #16]
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	58024800 	.word	0x58024800
 80084fc:	e000ed00 	.word	0xe000ed00

08008500 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008508:	4b19      	ldr	r3, [pc, #100]	; (8008570 <HAL_PWREx_ConfigSupply+0x70>)
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b04      	cmp	r3, #4
 8008512:	d00a      	beq.n	800852a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008514:	4b16      	ldr	r3, [pc, #88]	; (8008570 <HAL_PWREx_ConfigSupply+0x70>)
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	f003 0307 	and.w	r3, r3, #7
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	429a      	cmp	r2, r3
 8008520:	d001      	beq.n	8008526 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e01f      	b.n	8008566 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	e01d      	b.n	8008566 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800852a:	4b11      	ldr	r3, [pc, #68]	; (8008570 <HAL_PWREx_ConfigSupply+0x70>)
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	f023 0207 	bic.w	r2, r3, #7
 8008532:	490f      	ldr	r1, [pc, #60]	; (8008570 <HAL_PWREx_ConfigSupply+0x70>)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4313      	orrs	r3, r2
 8008538:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800853a:	f7fa f971 	bl	8002820 <HAL_GetTick>
 800853e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008540:	e009      	b.n	8008556 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008542:	f7fa f96d 	bl	8002820 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008550:	d901      	bls.n	8008556 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e007      	b.n	8008566 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008556:	4b06      	ldr	r3, [pc, #24]	; (8008570 <HAL_PWREx_ConfigSupply+0x70>)
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800855e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008562:	d1ee      	bne.n	8008542 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	58024800 	.word	0x58024800

08008574 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08c      	sub	sp, #48	; 0x30
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d102      	bne.n	8008588 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	f000 bc48 	b.w	8008e18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 8088 	beq.w	80086a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008596:	4b99      	ldr	r3, [pc, #612]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800859e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085a0:	4b96      	ldr	r3, [pc, #600]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80085a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80085a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a8:	2b10      	cmp	r3, #16
 80085aa:	d007      	beq.n	80085bc <HAL_RCC_OscConfig+0x48>
 80085ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ae:	2b18      	cmp	r3, #24
 80085b0:	d111      	bne.n	80085d6 <HAL_RCC_OscConfig+0x62>
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	f003 0303 	and.w	r3, r3, #3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d10c      	bne.n	80085d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085bc:	4b8f      	ldr	r3, [pc, #572]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d06d      	beq.n	80086a4 <HAL_RCC_OscConfig+0x130>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d169      	bne.n	80086a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	f000 bc21 	b.w	8008e18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085de:	d106      	bne.n	80085ee <HAL_RCC_OscConfig+0x7a>
 80085e0:	4b86      	ldr	r3, [pc, #536]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a85      	ldr	r2, [pc, #532]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80085e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	e02e      	b.n	800864c <HAL_RCC_OscConfig+0xd8>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10c      	bne.n	8008610 <HAL_RCC_OscConfig+0x9c>
 80085f6:	4b81      	ldr	r3, [pc, #516]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a80      	ldr	r2, [pc, #512]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80085fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	4b7e      	ldr	r3, [pc, #504]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a7d      	ldr	r2, [pc, #500]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	e01d      	b.n	800864c <HAL_RCC_OscConfig+0xd8>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008618:	d10c      	bne.n	8008634 <HAL_RCC_OscConfig+0xc0>
 800861a:	4b78      	ldr	r3, [pc, #480]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a77      	ldr	r2, [pc, #476]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	4b75      	ldr	r3, [pc, #468]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a74      	ldr	r2, [pc, #464]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 800862c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	e00b      	b.n	800864c <HAL_RCC_OscConfig+0xd8>
 8008634:	4b71      	ldr	r3, [pc, #452]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a70      	ldr	r2, [pc, #448]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 800863a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800863e:	6013      	str	r3, [r2, #0]
 8008640:	4b6e      	ldr	r3, [pc, #440]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a6d      	ldr	r2, [pc, #436]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800864a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d013      	beq.n	800867c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008654:	f7fa f8e4 	bl	8002820 <HAL_GetTick>
 8008658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800865a:	e008      	b.n	800866e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800865c:	f7fa f8e0 	bl	8002820 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	2b64      	cmp	r3, #100	; 0x64
 8008668:	d901      	bls.n	800866e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e3d4      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800866e:	4b63      	ldr	r3, [pc, #396]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0f0      	beq.n	800865c <HAL_RCC_OscConfig+0xe8>
 800867a:	e014      	b.n	80086a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800867c:	f7fa f8d0 	bl	8002820 <HAL_GetTick>
 8008680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008682:	e008      	b.n	8008696 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008684:	f7fa f8cc 	bl	8002820 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b64      	cmp	r3, #100	; 0x64
 8008690:	d901      	bls.n	8008696 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e3c0      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008696:	4b59      	ldr	r3, [pc, #356]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1f0      	bne.n	8008684 <HAL_RCC_OscConfig+0x110>
 80086a2:	e000      	b.n	80086a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 80ca 	beq.w	8008848 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086b4:	4b51      	ldr	r3, [pc, #324]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086be:	4b4f      	ldr	r3, [pc, #316]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80086c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d007      	beq.n	80086da <HAL_RCC_OscConfig+0x166>
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	2b18      	cmp	r3, #24
 80086ce:	d156      	bne.n	800877e <HAL_RCC_OscConfig+0x20a>
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	f003 0303 	and.w	r3, r3, #3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d151      	bne.n	800877e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086da:	4b48      	ldr	r3, [pc, #288]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0304 	and.w	r3, r3, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d005      	beq.n	80086f2 <HAL_RCC_OscConfig+0x17e>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d101      	bne.n	80086f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e392      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086f2:	4b42      	ldr	r3, [pc, #264]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f023 0219 	bic.w	r2, r3, #25
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	493f      	ldr	r1, [pc, #252]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008700:	4313      	orrs	r3, r2
 8008702:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008704:	f7fa f88c 	bl	8002820 <HAL_GetTick>
 8008708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800870a:	e008      	b.n	800871e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800870c:	f7fa f888 	bl	8002820 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	2b02      	cmp	r3, #2
 8008718:	d901      	bls.n	800871e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e37c      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800871e:	4b37      	ldr	r3, [pc, #220]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0304 	and.w	r3, r3, #4
 8008726:	2b00      	cmp	r3, #0
 8008728:	d0f0      	beq.n	800870c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800872a:	f7fa f895 	bl	8002858 <HAL_GetREVID>
 800872e:	4603      	mov	r3, r0
 8008730:	f241 0203 	movw	r2, #4099	; 0x1003
 8008734:	4293      	cmp	r3, r2
 8008736:	d817      	bhi.n	8008768 <HAL_RCC_OscConfig+0x1f4>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	2b40      	cmp	r3, #64	; 0x40
 800873e:	d108      	bne.n	8008752 <HAL_RCC_OscConfig+0x1de>
 8008740:	4b2e      	ldr	r3, [pc, #184]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008748:	4a2c      	ldr	r2, [pc, #176]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 800874a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800874e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008750:	e07a      	b.n	8008848 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008752:	4b2a      	ldr	r3, [pc, #168]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	031b      	lsls	r3, r3, #12
 8008760:	4926      	ldr	r1, [pc, #152]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008762:	4313      	orrs	r3, r2
 8008764:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008766:	e06f      	b.n	8008848 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008768:	4b24      	ldr	r3, [pc, #144]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	061b      	lsls	r3, r3, #24
 8008776:	4921      	ldr	r1, [pc, #132]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008778:	4313      	orrs	r3, r2
 800877a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800877c:	e064      	b.n	8008848 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d047      	beq.n	8008816 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008786:	4b1d      	ldr	r3, [pc, #116]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f023 0219 	bic.w	r2, r3, #25
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	491a      	ldr	r1, [pc, #104]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 8008794:	4313      	orrs	r3, r2
 8008796:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008798:	f7fa f842 	bl	8002820 <HAL_GetTick>
 800879c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800879e:	e008      	b.n	80087b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087a0:	f7fa f83e 	bl	8002820 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d901      	bls.n	80087b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e332      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087b2:	4b12      	ldr	r3, [pc, #72]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0304 	and.w	r3, r3, #4
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0f0      	beq.n	80087a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087be:	f7fa f84b 	bl	8002858 <HAL_GetREVID>
 80087c2:	4603      	mov	r3, r0
 80087c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d819      	bhi.n	8008800 <HAL_RCC_OscConfig+0x28c>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	2b40      	cmp	r3, #64	; 0x40
 80087d2:	d108      	bne.n	80087e6 <HAL_RCC_OscConfig+0x272>
 80087d4:	4b09      	ldr	r3, [pc, #36]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80087dc:	4a07      	ldr	r2, [pc, #28]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80087de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087e2:	6053      	str	r3, [r2, #4]
 80087e4:	e030      	b.n	8008848 <HAL_RCC_OscConfig+0x2d4>
 80087e6:	4b05      	ldr	r3, [pc, #20]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	031b      	lsls	r3, r3, #12
 80087f4:	4901      	ldr	r1, [pc, #4]	; (80087fc <HAL_RCC_OscConfig+0x288>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	604b      	str	r3, [r1, #4]
 80087fa:	e025      	b.n	8008848 <HAL_RCC_OscConfig+0x2d4>
 80087fc:	58024400 	.word	0x58024400
 8008800:	4b9a      	ldr	r3, [pc, #616]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	061b      	lsls	r3, r3, #24
 800880e:	4997      	ldr	r1, [pc, #604]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 8008810:	4313      	orrs	r3, r2
 8008812:	604b      	str	r3, [r1, #4]
 8008814:	e018      	b.n	8008848 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008816:	4b95      	ldr	r3, [pc, #596]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a94      	ldr	r2, [pc, #592]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 800881c:	f023 0301 	bic.w	r3, r3, #1
 8008820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008822:	f7f9 fffd 	bl	8002820 <HAL_GetTick>
 8008826:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008828:	e008      	b.n	800883c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800882a:	f7f9 fff9 	bl	8002820 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	2b02      	cmp	r3, #2
 8008836:	d901      	bls.n	800883c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e2ed      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800883c:	4b8b      	ldr	r3, [pc, #556]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1f0      	bne.n	800882a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0310 	and.w	r3, r3, #16
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 80a9 	beq.w	80089a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008856:	4b85      	ldr	r3, [pc, #532]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800885e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008860:	4b82      	ldr	r3, [pc, #520]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008864:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	2b08      	cmp	r3, #8
 800886a:	d007      	beq.n	800887c <HAL_RCC_OscConfig+0x308>
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	2b18      	cmp	r3, #24
 8008870:	d13a      	bne.n	80088e8 <HAL_RCC_OscConfig+0x374>
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f003 0303 	and.w	r3, r3, #3
 8008878:	2b01      	cmp	r3, #1
 800887a:	d135      	bne.n	80088e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800887c:	4b7b      	ldr	r3, [pc, #492]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008884:	2b00      	cmp	r3, #0
 8008886:	d005      	beq.n	8008894 <HAL_RCC_OscConfig+0x320>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	2b80      	cmp	r3, #128	; 0x80
 800888e:	d001      	beq.n	8008894 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e2c1      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008894:	f7f9 ffe0 	bl	8002858 <HAL_GetREVID>
 8008898:	4603      	mov	r3, r0
 800889a:	f241 0203 	movw	r2, #4099	; 0x1003
 800889e:	4293      	cmp	r3, r2
 80088a0:	d817      	bhi.n	80088d2 <HAL_RCC_OscConfig+0x35e>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	2b20      	cmp	r3, #32
 80088a8:	d108      	bne.n	80088bc <HAL_RCC_OscConfig+0x348>
 80088aa:	4b70      	ldr	r3, [pc, #448]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80088b2:	4a6e      	ldr	r2, [pc, #440]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 80088b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088ba:	e075      	b.n	80089a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088bc:	4b6b      	ldr	r3, [pc, #428]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a1b      	ldr	r3, [r3, #32]
 80088c8:	069b      	lsls	r3, r3, #26
 80088ca:	4968      	ldr	r1, [pc, #416]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088d0:	e06a      	b.n	80089a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088d2:	4b66      	ldr	r3, [pc, #408]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	061b      	lsls	r3, r3, #24
 80088e0:	4962      	ldr	r1, [pc, #392]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088e6:	e05f      	b.n	80089a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d042      	beq.n	8008976 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80088f0:	4b5e      	ldr	r3, [pc, #376]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a5d      	ldr	r2, [pc, #372]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 80088f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fc:	f7f9 ff90 	bl	8002820 <HAL_GetTick>
 8008900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008902:	e008      	b.n	8008916 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008904:	f7f9 ff8c 	bl	8002820 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b02      	cmp	r3, #2
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e280      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008916:	4b55      	ldr	r3, [pc, #340]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0f0      	beq.n	8008904 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008922:	f7f9 ff99 	bl	8002858 <HAL_GetREVID>
 8008926:	4603      	mov	r3, r0
 8008928:	f241 0203 	movw	r2, #4099	; 0x1003
 800892c:	4293      	cmp	r3, r2
 800892e:	d817      	bhi.n	8008960 <HAL_RCC_OscConfig+0x3ec>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	2b20      	cmp	r3, #32
 8008936:	d108      	bne.n	800894a <HAL_RCC_OscConfig+0x3d6>
 8008938:	4b4c      	ldr	r3, [pc, #304]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008940:	4a4a      	ldr	r2, [pc, #296]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 8008942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008946:	6053      	str	r3, [r2, #4]
 8008948:	e02e      	b.n	80089a8 <HAL_RCC_OscConfig+0x434>
 800894a:	4b48      	ldr	r3, [pc, #288]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	069b      	lsls	r3, r3, #26
 8008958:	4944      	ldr	r1, [pc, #272]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 800895a:	4313      	orrs	r3, r2
 800895c:	604b      	str	r3, [r1, #4]
 800895e:	e023      	b.n	80089a8 <HAL_RCC_OscConfig+0x434>
 8008960:	4b42      	ldr	r3, [pc, #264]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	061b      	lsls	r3, r3, #24
 800896e:	493f      	ldr	r1, [pc, #252]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 8008970:	4313      	orrs	r3, r2
 8008972:	60cb      	str	r3, [r1, #12]
 8008974:	e018      	b.n	80089a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008976:	4b3d      	ldr	r3, [pc, #244]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a3c      	ldr	r2, [pc, #240]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 800897c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008982:	f7f9 ff4d 	bl	8002820 <HAL_GetTick>
 8008986:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008988:	e008      	b.n	800899c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800898a:	f7f9 ff49 	bl	8002820 <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	2b02      	cmp	r3, #2
 8008996:	d901      	bls.n	800899c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e23d      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800899c:	4b33      	ldr	r3, [pc, #204]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1f0      	bne.n	800898a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0308 	and.w	r3, r3, #8
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d036      	beq.n	8008a22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d019      	beq.n	80089f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089bc:	4b2b      	ldr	r3, [pc, #172]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 80089be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089c0:	4a2a      	ldr	r2, [pc, #168]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 80089c2:	f043 0301 	orr.w	r3, r3, #1
 80089c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c8:	f7f9 ff2a 	bl	8002820 <HAL_GetTick>
 80089cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80089ce:	e008      	b.n	80089e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089d0:	f7f9 ff26 	bl	8002820 <HAL_GetTick>
 80089d4:	4602      	mov	r2, r0
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d901      	bls.n	80089e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e21a      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80089e2:	4b22      	ldr	r3, [pc, #136]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 80089e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0f0      	beq.n	80089d0 <HAL_RCC_OscConfig+0x45c>
 80089ee:	e018      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089f0:	4b1e      	ldr	r3, [pc, #120]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 80089f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f4:	4a1d      	ldr	r2, [pc, #116]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 80089f6:	f023 0301 	bic.w	r3, r3, #1
 80089fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089fc:	f7f9 ff10 	bl	8002820 <HAL_GetTick>
 8008a00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a02:	e008      	b.n	8008a16 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a04:	f7f9 ff0c 	bl	8002820 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d901      	bls.n	8008a16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e200      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a16:	4b15      	ldr	r3, [pc, #84]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 8008a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a1a:	f003 0302 	and.w	r3, r3, #2
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1f0      	bne.n	8008a04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0320 	and.w	r3, r3, #32
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d039      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d01c      	beq.n	8008a70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a36:	4b0d      	ldr	r3, [pc, #52]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a0c      	ldr	r2, [pc, #48]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 8008a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a42:	f7f9 feed 	bl	8002820 <HAL_GetTick>
 8008a46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a48:	e008      	b.n	8008a5c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a4a:	f7f9 fee9 	bl	8002820 <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d901      	bls.n	8008a5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e1dd      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a5c:	4b03      	ldr	r3, [pc, #12]	; (8008a6c <HAL_RCC_OscConfig+0x4f8>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d0f0      	beq.n	8008a4a <HAL_RCC_OscConfig+0x4d6>
 8008a68:	e01b      	b.n	8008aa2 <HAL_RCC_OscConfig+0x52e>
 8008a6a:	bf00      	nop
 8008a6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008a70:	4b9b      	ldr	r3, [pc, #620]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a9a      	ldr	r2, [pc, #616]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a7c:	f7f9 fed0 	bl	8002820 <HAL_GetTick>
 8008a80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008a82:	e008      	b.n	8008a96 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a84:	f7f9 fecc 	bl	8002820 <HAL_GetTick>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d901      	bls.n	8008a96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e1c0      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008a96:	4b92      	ldr	r3, [pc, #584]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1f0      	bne.n	8008a84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0304 	and.w	r3, r3, #4
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 8081 	beq.w	8008bb2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008ab0:	4b8c      	ldr	r3, [pc, #560]	; (8008ce4 <HAL_RCC_OscConfig+0x770>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a8b      	ldr	r2, [pc, #556]	; (8008ce4 <HAL_RCC_OscConfig+0x770>)
 8008ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008aba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008abc:	f7f9 feb0 	bl	8002820 <HAL_GetTick>
 8008ac0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ac2:	e008      	b.n	8008ad6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ac4:	f7f9 feac 	bl	8002820 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	2b64      	cmp	r3, #100	; 0x64
 8008ad0:	d901      	bls.n	8008ad6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e1a0      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ad6:	4b83      	ldr	r3, [pc, #524]	; (8008ce4 <HAL_RCC_OscConfig+0x770>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d0f0      	beq.n	8008ac4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d106      	bne.n	8008af8 <HAL_RCC_OscConfig+0x584>
 8008aea:	4b7d      	ldr	r3, [pc, #500]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aee:	4a7c      	ldr	r2, [pc, #496]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008af0:	f043 0301 	orr.w	r3, r3, #1
 8008af4:	6713      	str	r3, [r2, #112]	; 0x70
 8008af6:	e02d      	b.n	8008b54 <HAL_RCC_OscConfig+0x5e0>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10c      	bne.n	8008b1a <HAL_RCC_OscConfig+0x5a6>
 8008b00:	4b77      	ldr	r3, [pc, #476]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b04:	4a76      	ldr	r2, [pc, #472]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008b06:	f023 0301 	bic.w	r3, r3, #1
 8008b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b0c:	4b74      	ldr	r3, [pc, #464]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b10:	4a73      	ldr	r2, [pc, #460]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008b12:	f023 0304 	bic.w	r3, r3, #4
 8008b16:	6713      	str	r3, [r2, #112]	; 0x70
 8008b18:	e01c      	b.n	8008b54 <HAL_RCC_OscConfig+0x5e0>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	2b05      	cmp	r3, #5
 8008b20:	d10c      	bne.n	8008b3c <HAL_RCC_OscConfig+0x5c8>
 8008b22:	4b6f      	ldr	r3, [pc, #444]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b26:	4a6e      	ldr	r2, [pc, #440]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008b28:	f043 0304 	orr.w	r3, r3, #4
 8008b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8008b2e:	4b6c      	ldr	r3, [pc, #432]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b32:	4a6b      	ldr	r2, [pc, #428]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008b34:	f043 0301 	orr.w	r3, r3, #1
 8008b38:	6713      	str	r3, [r2, #112]	; 0x70
 8008b3a:	e00b      	b.n	8008b54 <HAL_RCC_OscConfig+0x5e0>
 8008b3c:	4b68      	ldr	r3, [pc, #416]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b40:	4a67      	ldr	r2, [pc, #412]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008b42:	f023 0301 	bic.w	r3, r3, #1
 8008b46:	6713      	str	r3, [r2, #112]	; 0x70
 8008b48:	4b65      	ldr	r3, [pc, #404]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4c:	4a64      	ldr	r2, [pc, #400]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008b4e:	f023 0304 	bic.w	r3, r3, #4
 8008b52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d015      	beq.n	8008b88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b5c:	f7f9 fe60 	bl	8002820 <HAL_GetTick>
 8008b60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b62:	e00a      	b.n	8008b7a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b64:	f7f9 fe5c 	bl	8002820 <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e14e      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b7a:	4b59      	ldr	r3, [pc, #356]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b7e:	f003 0302 	and.w	r3, r3, #2
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0ee      	beq.n	8008b64 <HAL_RCC_OscConfig+0x5f0>
 8008b86:	e014      	b.n	8008bb2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b88:	f7f9 fe4a 	bl	8002820 <HAL_GetTick>
 8008b8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008b8e:	e00a      	b.n	8008ba6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b90:	f7f9 fe46 	bl	8002820 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d901      	bls.n	8008ba6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e138      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ba6:	4b4e      	ldr	r3, [pc, #312]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1ee      	bne.n	8008b90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f000 812d 	beq.w	8008e16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008bbc:	4b48      	ldr	r3, [pc, #288]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bc4:	2b18      	cmp	r3, #24
 8008bc6:	f000 80bd 	beq.w	8008d44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	f040 809e 	bne.w	8008d10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bd4:	4b42      	ldr	r3, [pc, #264]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a41      	ldr	r2, [pc, #260]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be0:	f7f9 fe1e 	bl	8002820 <HAL_GetTick>
 8008be4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008be6:	e008      	b.n	8008bfa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008be8:	f7f9 fe1a 	bl	8002820 <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e10e      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bfa:	4b39      	ldr	r3, [pc, #228]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1f0      	bne.n	8008be8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c06:	4b36      	ldr	r3, [pc, #216]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c0a:	4b37      	ldr	r3, [pc, #220]	; (8008ce8 <HAL_RCC_OscConfig+0x774>)
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c16:	0112      	lsls	r2, r2, #4
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	4931      	ldr	r1, [pc, #196]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	628b      	str	r3, [r1, #40]	; 0x28
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c24:	3b01      	subs	r3, #1
 8008c26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	025b      	lsls	r3, r3, #9
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	431a      	orrs	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	041b      	lsls	r3, r3, #16
 8008c3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c42:	431a      	orrs	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	061b      	lsls	r3, r3, #24
 8008c4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c50:	4923      	ldr	r1, [pc, #140]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008c56:	4b22      	ldr	r3, [pc, #136]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5a:	4a21      	ldr	r2, [pc, #132]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008c5c:	f023 0301 	bic.w	r3, r3, #1
 8008c60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008c62:	4b1f      	ldr	r3, [pc, #124]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c66:	4b21      	ldr	r3, [pc, #132]	; (8008cec <HAL_RCC_OscConfig+0x778>)
 8008c68:	4013      	ands	r3, r2
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008c6e:	00d2      	lsls	r2, r2, #3
 8008c70:	491b      	ldr	r1, [pc, #108]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008c72:	4313      	orrs	r3, r2
 8008c74:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008c76:	4b1a      	ldr	r3, [pc, #104]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7a:	f023 020c 	bic.w	r2, r3, #12
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	4917      	ldr	r1, [pc, #92]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008c88:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	f023 0202 	bic.w	r2, r3, #2
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c94:	4912      	ldr	r1, [pc, #72]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008c9a:	4b11      	ldr	r3, [pc, #68]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9e:	4a10      	ldr	r2, [pc, #64]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ca6:	4b0e      	ldr	r3, [pc, #56]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008caa:	4a0d      	ldr	r2, [pc, #52]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008cb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb6:	4a0a      	ldr	r2, [pc, #40]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008cbe:	4b08      	ldr	r3, [pc, #32]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc2:	4a07      	ldr	r2, [pc, #28]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008cc4:	f043 0301 	orr.w	r3, r3, #1
 8008cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cca:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a04      	ldr	r2, [pc, #16]	; (8008ce0 <HAL_RCC_OscConfig+0x76c>)
 8008cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cd6:	f7f9 fda3 	bl	8002820 <HAL_GetTick>
 8008cda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008cdc:	e011      	b.n	8008d02 <HAL_RCC_OscConfig+0x78e>
 8008cde:	bf00      	nop
 8008ce0:	58024400 	.word	0x58024400
 8008ce4:	58024800 	.word	0x58024800
 8008ce8:	fffffc0c 	.word	0xfffffc0c
 8008cec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cf0:	f7f9 fd96 	bl	8002820 <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d901      	bls.n	8008d02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e08a      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d02:	4b47      	ldr	r3, [pc, #284]	; (8008e20 <HAL_RCC_OscConfig+0x8ac>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0f0      	beq.n	8008cf0 <HAL_RCC_OscConfig+0x77c>
 8008d0e:	e082      	b.n	8008e16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d10:	4b43      	ldr	r3, [pc, #268]	; (8008e20 <HAL_RCC_OscConfig+0x8ac>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a42      	ldr	r2, [pc, #264]	; (8008e20 <HAL_RCC_OscConfig+0x8ac>)
 8008d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d1c:	f7f9 fd80 	bl	8002820 <HAL_GetTick>
 8008d20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d22:	e008      	b.n	8008d36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d24:	f7f9 fd7c 	bl	8002820 <HAL_GetTick>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d901      	bls.n	8008d36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e070      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d36:	4b3a      	ldr	r3, [pc, #232]	; (8008e20 <HAL_RCC_OscConfig+0x8ac>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1f0      	bne.n	8008d24 <HAL_RCC_OscConfig+0x7b0>
 8008d42:	e068      	b.n	8008e16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008d44:	4b36      	ldr	r3, [pc, #216]	; (8008e20 <HAL_RCC_OscConfig+0x8ac>)
 8008d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008d4a:	4b35      	ldr	r3, [pc, #212]	; (8008e20 <HAL_RCC_OscConfig+0x8ac>)
 8008d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d031      	beq.n	8008dbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f003 0203 	and.w	r2, r3, #3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d12a      	bne.n	8008dbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	091b      	lsrs	r3, r3, #4
 8008d6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d122      	bne.n	8008dbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d11a      	bne.n	8008dbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	0a5b      	lsrs	r3, r3, #9
 8008d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d111      	bne.n	8008dbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	0c1b      	lsrs	r3, r3, #16
 8008d9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d108      	bne.n	8008dbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	0e1b      	lsrs	r3, r3, #24
 8008dae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d001      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e02b      	b.n	8008e18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008dc0:	4b17      	ldr	r3, [pc, #92]	; (8008e20 <HAL_RCC_OscConfig+0x8ac>)
 8008dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc4:	08db      	lsrs	r3, r3, #3
 8008dc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d01f      	beq.n	8008e16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008dd6:	4b12      	ldr	r3, [pc, #72]	; (8008e20 <HAL_RCC_OscConfig+0x8ac>)
 8008dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dda:	4a11      	ldr	r2, [pc, #68]	; (8008e20 <HAL_RCC_OscConfig+0x8ac>)
 8008ddc:	f023 0301 	bic.w	r3, r3, #1
 8008de0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008de2:	f7f9 fd1d 	bl	8002820 <HAL_GetTick>
 8008de6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008de8:	bf00      	nop
 8008dea:	f7f9 fd19 	bl	8002820 <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d0f9      	beq.n	8008dea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008df6:	4b0a      	ldr	r3, [pc, #40]	; (8008e20 <HAL_RCC_OscConfig+0x8ac>)
 8008df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dfa:	4b0a      	ldr	r3, [pc, #40]	; (8008e24 <HAL_RCC_OscConfig+0x8b0>)
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e02:	00d2      	lsls	r2, r2, #3
 8008e04:	4906      	ldr	r1, [pc, #24]	; (8008e20 <HAL_RCC_OscConfig+0x8ac>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008e0a:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <HAL_RCC_OscConfig+0x8ac>)
 8008e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0e:	4a04      	ldr	r2, [pc, #16]	; (8008e20 <HAL_RCC_OscConfig+0x8ac>)
 8008e10:	f043 0301 	orr.w	r3, r3, #1
 8008e14:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3730      	adds	r7, #48	; 0x30
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	58024400 	.word	0x58024400
 8008e24:	ffff0007 	.word	0xffff0007

08008e28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e19c      	b.n	8009176 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e3c:	4b8a      	ldr	r3, [pc, #552]	; (8009068 <HAL_RCC_ClockConfig+0x240>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 030f 	and.w	r3, r3, #15
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d910      	bls.n	8008e6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e4a:	4b87      	ldr	r3, [pc, #540]	; (8009068 <HAL_RCC_ClockConfig+0x240>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f023 020f 	bic.w	r2, r3, #15
 8008e52:	4985      	ldr	r1, [pc, #532]	; (8009068 <HAL_RCC_ClockConfig+0x240>)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e5a:	4b83      	ldr	r3, [pc, #524]	; (8009068 <HAL_RCC_ClockConfig+0x240>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 030f 	and.w	r3, r3, #15
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d001      	beq.n	8008e6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e184      	b.n	8009176 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d010      	beq.n	8008e9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691a      	ldr	r2, [r3, #16]
 8008e7c:	4b7b      	ldr	r3, [pc, #492]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d908      	bls.n	8008e9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e88:	4b78      	ldr	r3, [pc, #480]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	4975      	ldr	r1, [pc, #468]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0308 	and.w	r3, r3, #8
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d010      	beq.n	8008ec8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	695a      	ldr	r2, [r3, #20]
 8008eaa:	4b70      	ldr	r3, [pc, #448]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d908      	bls.n	8008ec8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008eb6:	4b6d      	ldr	r3, [pc, #436]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	496a      	ldr	r1, [pc, #424]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0310 	and.w	r3, r3, #16
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d010      	beq.n	8008ef6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699a      	ldr	r2, [r3, #24]
 8008ed8:	4b64      	ldr	r3, [pc, #400]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d908      	bls.n	8008ef6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ee4:	4b61      	ldr	r3, [pc, #388]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	495e      	ldr	r1, [pc, #376]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0320 	and.w	r3, r3, #32
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d010      	beq.n	8008f24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	69da      	ldr	r2, [r3, #28]
 8008f06:	4b59      	ldr	r3, [pc, #356]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008f08:	6a1b      	ldr	r3, [r3, #32]
 8008f0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d908      	bls.n	8008f24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008f12:	4b56      	ldr	r3, [pc, #344]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	4953      	ldr	r1, [pc, #332]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0302 	and.w	r3, r3, #2
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d010      	beq.n	8008f52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68da      	ldr	r2, [r3, #12]
 8008f34:	4b4d      	ldr	r3, [pc, #308]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	f003 030f 	and.w	r3, r3, #15
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d908      	bls.n	8008f52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f40:	4b4a      	ldr	r3, [pc, #296]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	f023 020f 	bic.w	r2, r3, #15
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	4947      	ldr	r1, [pc, #284]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d055      	beq.n	800900a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008f5e:	4b43      	ldr	r3, [pc, #268]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	4940      	ldr	r1, [pc, #256]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d107      	bne.n	8008f88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f78:	4b3c      	ldr	r3, [pc, #240]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d121      	bne.n	8008fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e0f6      	b.n	8009176 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d107      	bne.n	8008fa0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f90:	4b36      	ldr	r3, [pc, #216]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d115      	bne.n	8008fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e0ea      	b.n	8009176 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d107      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fa8:	4b30      	ldr	r3, [pc, #192]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d109      	bne.n	8008fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e0de      	b.n	8009176 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fb8:	4b2c      	ldr	r3, [pc, #176]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e0d6      	b.n	8009176 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008fc8:	4b28      	ldr	r3, [pc, #160]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	f023 0207 	bic.w	r2, r3, #7
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	4925      	ldr	r1, [pc, #148]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fda:	f7f9 fc21 	bl	8002820 <HAL_GetTick>
 8008fde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fe0:	e00a      	b.n	8008ff8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fe2:	f7f9 fc1d 	bl	8002820 <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d901      	bls.n	8008ff8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e0be      	b.n	8009176 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ff8:	4b1c      	ldr	r3, [pc, #112]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	00db      	lsls	r3, r3, #3
 8009006:	429a      	cmp	r2, r3
 8009008:	d1eb      	bne.n	8008fe2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0302 	and.w	r3, r3, #2
 8009012:	2b00      	cmp	r3, #0
 8009014:	d010      	beq.n	8009038 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	4b14      	ldr	r3, [pc, #80]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	f003 030f 	and.w	r3, r3, #15
 8009022:	429a      	cmp	r2, r3
 8009024:	d208      	bcs.n	8009038 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009026:	4b11      	ldr	r3, [pc, #68]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	f023 020f 	bic.w	r2, r3, #15
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	490e      	ldr	r1, [pc, #56]	; (800906c <HAL_RCC_ClockConfig+0x244>)
 8009034:	4313      	orrs	r3, r2
 8009036:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009038:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <HAL_RCC_ClockConfig+0x240>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 030f 	and.w	r3, r3, #15
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	429a      	cmp	r2, r3
 8009044:	d214      	bcs.n	8009070 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009046:	4b08      	ldr	r3, [pc, #32]	; (8009068 <HAL_RCC_ClockConfig+0x240>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f023 020f 	bic.w	r2, r3, #15
 800904e:	4906      	ldr	r1, [pc, #24]	; (8009068 <HAL_RCC_ClockConfig+0x240>)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	4313      	orrs	r3, r2
 8009054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009056:	4b04      	ldr	r3, [pc, #16]	; (8009068 <HAL_RCC_ClockConfig+0x240>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 030f 	and.w	r3, r3, #15
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	429a      	cmp	r2, r3
 8009062:	d005      	beq.n	8009070 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e086      	b.n	8009176 <HAL_RCC_ClockConfig+0x34e>
 8009068:	52002000 	.word	0x52002000
 800906c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b00      	cmp	r3, #0
 800907a:	d010      	beq.n	800909e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	691a      	ldr	r2, [r3, #16]
 8009080:	4b3f      	ldr	r3, [pc, #252]	; (8009180 <HAL_RCC_ClockConfig+0x358>)
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009088:	429a      	cmp	r2, r3
 800908a:	d208      	bcs.n	800909e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800908c:	4b3c      	ldr	r3, [pc, #240]	; (8009180 <HAL_RCC_ClockConfig+0x358>)
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	4939      	ldr	r1, [pc, #228]	; (8009180 <HAL_RCC_ClockConfig+0x358>)
 800909a:	4313      	orrs	r3, r2
 800909c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0308 	and.w	r3, r3, #8
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d010      	beq.n	80090cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	695a      	ldr	r2, [r3, #20]
 80090ae:	4b34      	ldr	r3, [pc, #208]	; (8009180 <HAL_RCC_ClockConfig+0x358>)
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d208      	bcs.n	80090cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80090ba:	4b31      	ldr	r3, [pc, #196]	; (8009180 <HAL_RCC_ClockConfig+0x358>)
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	492e      	ldr	r1, [pc, #184]	; (8009180 <HAL_RCC_ClockConfig+0x358>)
 80090c8:	4313      	orrs	r3, r2
 80090ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0310 	and.w	r3, r3, #16
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d010      	beq.n	80090fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	699a      	ldr	r2, [r3, #24]
 80090dc:	4b28      	ldr	r3, [pc, #160]	; (8009180 <HAL_RCC_ClockConfig+0x358>)
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d208      	bcs.n	80090fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80090e8:	4b25      	ldr	r3, [pc, #148]	; (8009180 <HAL_RCC_ClockConfig+0x358>)
 80090ea:	69db      	ldr	r3, [r3, #28]
 80090ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	4922      	ldr	r1, [pc, #136]	; (8009180 <HAL_RCC_ClockConfig+0x358>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0320 	and.w	r3, r3, #32
 8009102:	2b00      	cmp	r3, #0
 8009104:	d010      	beq.n	8009128 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	69da      	ldr	r2, [r3, #28]
 800910a:	4b1d      	ldr	r3, [pc, #116]	; (8009180 <HAL_RCC_ClockConfig+0x358>)
 800910c:	6a1b      	ldr	r3, [r3, #32]
 800910e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009112:	429a      	cmp	r2, r3
 8009114:	d208      	bcs.n	8009128 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009116:	4b1a      	ldr	r3, [pc, #104]	; (8009180 <HAL_RCC_ClockConfig+0x358>)
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	4917      	ldr	r1, [pc, #92]	; (8009180 <HAL_RCC_ClockConfig+0x358>)
 8009124:	4313      	orrs	r3, r2
 8009126:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009128:	f000 f834 	bl	8009194 <HAL_RCC_GetSysClockFreq>
 800912c:	4602      	mov	r2, r0
 800912e:	4b14      	ldr	r3, [pc, #80]	; (8009180 <HAL_RCC_ClockConfig+0x358>)
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	0a1b      	lsrs	r3, r3, #8
 8009134:	f003 030f 	and.w	r3, r3, #15
 8009138:	4912      	ldr	r1, [pc, #72]	; (8009184 <HAL_RCC_ClockConfig+0x35c>)
 800913a:	5ccb      	ldrb	r3, [r1, r3]
 800913c:	f003 031f 	and.w	r3, r3, #31
 8009140:	fa22 f303 	lsr.w	r3, r2, r3
 8009144:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009146:	4b0e      	ldr	r3, [pc, #56]	; (8009180 <HAL_RCC_ClockConfig+0x358>)
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	f003 030f 	and.w	r3, r3, #15
 800914e:	4a0d      	ldr	r2, [pc, #52]	; (8009184 <HAL_RCC_ClockConfig+0x35c>)
 8009150:	5cd3      	ldrb	r3, [r2, r3]
 8009152:	f003 031f 	and.w	r3, r3, #31
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	fa22 f303 	lsr.w	r3, r2, r3
 800915c:	4a0a      	ldr	r2, [pc, #40]	; (8009188 <HAL_RCC_ClockConfig+0x360>)
 800915e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009160:	4a0a      	ldr	r2, [pc, #40]	; (800918c <HAL_RCC_ClockConfig+0x364>)
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009166:	4b0a      	ldr	r3, [pc, #40]	; (8009190 <HAL_RCC_ClockConfig+0x368>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4618      	mov	r0, r3
 800916c:	f7f9 fb0e 	bl	800278c <HAL_InitTick>
 8009170:	4603      	mov	r3, r0
 8009172:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009174:	7bfb      	ldrb	r3, [r7, #15]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	58024400 	.word	0x58024400
 8009184:	08010d28 	.word	0x08010d28
 8009188:	24000048 	.word	0x24000048
 800918c:	24000044 	.word	0x24000044
 8009190:	2400004c 	.word	0x2400004c

08009194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009194:	b480      	push	{r7}
 8009196:	b089      	sub	sp, #36	; 0x24
 8009198:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800919a:	4bb3      	ldr	r3, [pc, #716]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091a2:	2b18      	cmp	r3, #24
 80091a4:	f200 8155 	bhi.w	8009452 <HAL_RCC_GetSysClockFreq+0x2be>
 80091a8:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80091aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ae:	bf00      	nop
 80091b0:	08009215 	.word	0x08009215
 80091b4:	08009453 	.word	0x08009453
 80091b8:	08009453 	.word	0x08009453
 80091bc:	08009453 	.word	0x08009453
 80091c0:	08009453 	.word	0x08009453
 80091c4:	08009453 	.word	0x08009453
 80091c8:	08009453 	.word	0x08009453
 80091cc:	08009453 	.word	0x08009453
 80091d0:	0800923b 	.word	0x0800923b
 80091d4:	08009453 	.word	0x08009453
 80091d8:	08009453 	.word	0x08009453
 80091dc:	08009453 	.word	0x08009453
 80091e0:	08009453 	.word	0x08009453
 80091e4:	08009453 	.word	0x08009453
 80091e8:	08009453 	.word	0x08009453
 80091ec:	08009453 	.word	0x08009453
 80091f0:	08009241 	.word	0x08009241
 80091f4:	08009453 	.word	0x08009453
 80091f8:	08009453 	.word	0x08009453
 80091fc:	08009453 	.word	0x08009453
 8009200:	08009453 	.word	0x08009453
 8009204:	08009453 	.word	0x08009453
 8009208:	08009453 	.word	0x08009453
 800920c:	08009453 	.word	0x08009453
 8009210:	08009247 	.word	0x08009247
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009214:	4b94      	ldr	r3, [pc, #592]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0320 	and.w	r3, r3, #32
 800921c:	2b00      	cmp	r3, #0
 800921e:	d009      	beq.n	8009234 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009220:	4b91      	ldr	r3, [pc, #580]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	08db      	lsrs	r3, r3, #3
 8009226:	f003 0303 	and.w	r3, r3, #3
 800922a:	4a90      	ldr	r2, [pc, #576]	; (800946c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800922c:	fa22 f303 	lsr.w	r3, r2, r3
 8009230:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009232:	e111      	b.n	8009458 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009234:	4b8d      	ldr	r3, [pc, #564]	; (800946c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009236:	61bb      	str	r3, [r7, #24]
      break;
 8009238:	e10e      	b.n	8009458 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800923a:	4b8d      	ldr	r3, [pc, #564]	; (8009470 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800923c:	61bb      	str	r3, [r7, #24]
      break;
 800923e:	e10b      	b.n	8009458 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009240:	4b8c      	ldr	r3, [pc, #560]	; (8009474 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009242:	61bb      	str	r3, [r7, #24]
      break;
 8009244:	e108      	b.n	8009458 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009246:	4b88      	ldr	r3, [pc, #544]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	f003 0303 	and.w	r3, r3, #3
 800924e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009250:	4b85      	ldr	r3, [pc, #532]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009254:	091b      	lsrs	r3, r3, #4
 8009256:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800925a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800925c:	4b82      	ldr	r3, [pc, #520]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	f003 0301 	and.w	r3, r3, #1
 8009264:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009266:	4b80      	ldr	r3, [pc, #512]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926a:	08db      	lsrs	r3, r3, #3
 800926c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	fb02 f303 	mul.w	r3, r2, r3
 8009276:	ee07 3a90 	vmov	s15, r3
 800927a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 80e1 	beq.w	800944c <HAL_RCC_GetSysClockFreq+0x2b8>
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b02      	cmp	r3, #2
 800928e:	f000 8083 	beq.w	8009398 <HAL_RCC_GetSysClockFreq+0x204>
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b02      	cmp	r3, #2
 8009296:	f200 80a1 	bhi.w	80093dc <HAL_RCC_GetSysClockFreq+0x248>
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d003      	beq.n	80092a8 <HAL_RCC_GetSysClockFreq+0x114>
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d056      	beq.n	8009354 <HAL_RCC_GetSysClockFreq+0x1c0>
 80092a6:	e099      	b.n	80093dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092a8:	4b6f      	ldr	r3, [pc, #444]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0320 	and.w	r3, r3, #32
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d02d      	beq.n	8009310 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092b4:	4b6c      	ldr	r3, [pc, #432]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	08db      	lsrs	r3, r3, #3
 80092ba:	f003 0303 	and.w	r3, r3, #3
 80092be:	4a6b      	ldr	r2, [pc, #428]	; (800946c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092c0:	fa22 f303 	lsr.w	r3, r2, r3
 80092c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	ee07 3a90 	vmov	s15, r3
 80092cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092de:	4b62      	ldr	r3, [pc, #392]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e6:	ee07 3a90 	vmov	s15, r3
 80092ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80092f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009478 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800930a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800930e:	e087      	b.n	8009420 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	ee07 3a90 	vmov	s15, r3
 8009316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800931a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800947c <HAL_RCC_GetSysClockFreq+0x2e8>
 800931e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009322:	4b51      	ldr	r3, [pc, #324]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800932a:	ee07 3a90 	vmov	s15, r3
 800932e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009332:	ed97 6a02 	vldr	s12, [r7, #8]
 8009336:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009478 <HAL_RCC_GetSysClockFreq+0x2e4>
 800933a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800933e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800934a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800934e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009352:	e065      	b.n	8009420 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	ee07 3a90 	vmov	s15, r3
 800935a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009480 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009366:	4b40      	ldr	r3, [pc, #256]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800936e:	ee07 3a90 	vmov	s15, r3
 8009372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009376:	ed97 6a02 	vldr	s12, [r7, #8]
 800937a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009478 <HAL_RCC_GetSysClockFreq+0x2e4>
 800937e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800938a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800938e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009392:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009396:	e043      	b.n	8009420 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	ee07 3a90 	vmov	s15, r3
 800939e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009484 <HAL_RCC_GetSysClockFreq+0x2f0>
 80093a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093aa:	4b2f      	ldr	r3, [pc, #188]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80093be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009478 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093da:	e021      	b.n	8009420 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	ee07 3a90 	vmov	s15, r3
 80093e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009480 <HAL_RCC_GetSysClockFreq+0x2ec>
 80093ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ee:	4b1e      	ldr	r3, [pc, #120]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009402:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009478 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800941e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009420:	4b11      	ldr	r3, [pc, #68]	; (8009468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009424:	0a5b      	lsrs	r3, r3, #9
 8009426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800942a:	3301      	adds	r3, #1
 800942c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	ee07 3a90 	vmov	s15, r3
 8009434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009438:	edd7 6a07 	vldr	s13, [r7, #28]
 800943c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009444:	ee17 3a90 	vmov	r3, s15
 8009448:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800944a:	e005      	b.n	8009458 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	61bb      	str	r3, [r7, #24]
      break;
 8009450:	e002      	b.n	8009458 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009452:	4b07      	ldr	r3, [pc, #28]	; (8009470 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009454:	61bb      	str	r3, [r7, #24]
      break;
 8009456:	bf00      	nop
  }

  return sysclockfreq;
 8009458:	69bb      	ldr	r3, [r7, #24]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3724      	adds	r7, #36	; 0x24
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	58024400 	.word	0x58024400
 800946c:	03d09000 	.word	0x03d09000
 8009470:	003d0900 	.word	0x003d0900
 8009474:	017d7840 	.word	0x017d7840
 8009478:	46000000 	.word	0x46000000
 800947c:	4c742400 	.word	0x4c742400
 8009480:	4a742400 	.word	0x4a742400
 8009484:	4bbebc20 	.word	0x4bbebc20

08009488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800948e:	f7ff fe81 	bl	8009194 <HAL_RCC_GetSysClockFreq>
 8009492:	4602      	mov	r2, r0
 8009494:	4b10      	ldr	r3, [pc, #64]	; (80094d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	0a1b      	lsrs	r3, r3, #8
 800949a:	f003 030f 	and.w	r3, r3, #15
 800949e:	490f      	ldr	r1, [pc, #60]	; (80094dc <HAL_RCC_GetHCLKFreq+0x54>)
 80094a0:	5ccb      	ldrb	r3, [r1, r3]
 80094a2:	f003 031f 	and.w	r3, r3, #31
 80094a6:	fa22 f303 	lsr.w	r3, r2, r3
 80094aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80094ac:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	f003 030f 	and.w	r3, r3, #15
 80094b4:	4a09      	ldr	r2, [pc, #36]	; (80094dc <HAL_RCC_GetHCLKFreq+0x54>)
 80094b6:	5cd3      	ldrb	r3, [r2, r3]
 80094b8:	f003 031f 	and.w	r3, r3, #31
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	fa22 f303 	lsr.w	r3, r2, r3
 80094c2:	4a07      	ldr	r2, [pc, #28]	; (80094e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80094c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80094c6:	4a07      	ldr	r2, [pc, #28]	; (80094e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80094cc:	4b04      	ldr	r3, [pc, #16]	; (80094e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80094ce:	681b      	ldr	r3, [r3, #0]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	58024400 	.word	0x58024400
 80094dc:	08010d28 	.word	0x08010d28
 80094e0:	24000048 	.word	0x24000048
 80094e4:	24000044 	.word	0x24000044

080094e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80094ec:	f7ff ffcc 	bl	8009488 <HAL_RCC_GetHCLKFreq>
 80094f0:	4602      	mov	r2, r0
 80094f2:	4b06      	ldr	r3, [pc, #24]	; (800950c <HAL_RCC_GetPCLK1Freq+0x24>)
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	091b      	lsrs	r3, r3, #4
 80094f8:	f003 0307 	and.w	r3, r3, #7
 80094fc:	4904      	ldr	r1, [pc, #16]	; (8009510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80094fe:	5ccb      	ldrb	r3, [r1, r3]
 8009500:	f003 031f 	and.w	r3, r3, #31
 8009504:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009508:	4618      	mov	r0, r3
 800950a:	bd80      	pop	{r7, pc}
 800950c:	58024400 	.word	0x58024400
 8009510:	08010d28 	.word	0x08010d28

08009514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009518:	f7ff ffb6 	bl	8009488 <HAL_RCC_GetHCLKFreq>
 800951c:	4602      	mov	r2, r0
 800951e:	4b06      	ldr	r3, [pc, #24]	; (8009538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	0a1b      	lsrs	r3, r3, #8
 8009524:	f003 0307 	and.w	r3, r3, #7
 8009528:	4904      	ldr	r1, [pc, #16]	; (800953c <HAL_RCC_GetPCLK2Freq+0x28>)
 800952a:	5ccb      	ldrb	r3, [r1, r3]
 800952c:	f003 031f 	and.w	r3, r3, #31
 8009530:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009534:	4618      	mov	r0, r3
 8009536:	bd80      	pop	{r7, pc}
 8009538:	58024400 	.word	0x58024400
 800953c:	08010d28 	.word	0x08010d28

08009540 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009544:	b0ca      	sub	sp, #296	; 0x128
 8009546:	af00      	add	r7, sp, #0
 8009548:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800954c:	2300      	movs	r3, #0
 800954e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009552:	2300      	movs	r3, #0
 8009554:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009564:	2500      	movs	r5, #0
 8009566:	ea54 0305 	orrs.w	r3, r4, r5
 800956a:	d049      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800956c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009572:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009576:	d02f      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009578:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800957c:	d828      	bhi.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800957e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009582:	d01a      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009588:	d822      	bhi.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800958e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009592:	d007      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009594:	e01c      	b.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009596:	4bb8      	ldr	r3, [pc, #736]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959a:	4ab7      	ldr	r2, [pc, #732]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800959c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80095a2:	e01a      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a8:	3308      	adds	r3, #8
 80095aa:	2102      	movs	r1, #2
 80095ac:	4618      	mov	r0, r3
 80095ae:	f002 fb61 	bl	800bc74 <RCCEx_PLL2_Config>
 80095b2:	4603      	mov	r3, r0
 80095b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80095b8:	e00f      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095be:	3328      	adds	r3, #40	; 0x28
 80095c0:	2102      	movs	r1, #2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f002 fc08 	bl	800bdd8 <RCCEx_PLL3_Config>
 80095c8:	4603      	mov	r3, r0
 80095ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80095ce:	e004      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095d6:	e000      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80095d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10a      	bne.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80095e2:	4ba5      	ldr	r3, [pc, #660]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80095ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095f0:	4aa1      	ldr	r2, [pc, #644]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095f2:	430b      	orrs	r3, r1
 80095f4:	6513      	str	r3, [r2, #80]	; 0x50
 80095f6:	e003      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800960c:	f04f 0900 	mov.w	r9, #0
 8009610:	ea58 0309 	orrs.w	r3, r8, r9
 8009614:	d047      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800961c:	2b04      	cmp	r3, #4
 800961e:	d82a      	bhi.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009620:	a201      	add	r2, pc, #4	; (adr r2, 8009628 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009626:	bf00      	nop
 8009628:	0800963d 	.word	0x0800963d
 800962c:	0800964b 	.word	0x0800964b
 8009630:	08009661 	.word	0x08009661
 8009634:	0800967f 	.word	0x0800967f
 8009638:	0800967f 	.word	0x0800967f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800963c:	4b8e      	ldr	r3, [pc, #568]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800963e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009640:	4a8d      	ldr	r2, [pc, #564]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009648:	e01a      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800964a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800964e:	3308      	adds	r3, #8
 8009650:	2100      	movs	r1, #0
 8009652:	4618      	mov	r0, r3
 8009654:	f002 fb0e 	bl	800bc74 <RCCEx_PLL2_Config>
 8009658:	4603      	mov	r3, r0
 800965a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800965e:	e00f      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009664:	3328      	adds	r3, #40	; 0x28
 8009666:	2100      	movs	r1, #0
 8009668:	4618      	mov	r0, r3
 800966a:	f002 fbb5 	bl	800bdd8 <RCCEx_PLL3_Config>
 800966e:	4603      	mov	r3, r0
 8009670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009674:	e004      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800967c:	e000      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800967e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009688:	4b7b      	ldr	r3, [pc, #492]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800968a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800968c:	f023 0107 	bic.w	r1, r3, #7
 8009690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009696:	4a78      	ldr	r2, [pc, #480]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009698:	430b      	orrs	r3, r1
 800969a:	6513      	str	r3, [r2, #80]	; 0x50
 800969c:	e003      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800969e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80096a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80096b2:	f04f 0b00 	mov.w	fp, #0
 80096b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80096ba:	d04c      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80096bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096c6:	d030      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80096c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096cc:	d829      	bhi.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80096ce:	2bc0      	cmp	r3, #192	; 0xc0
 80096d0:	d02d      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80096d2:	2bc0      	cmp	r3, #192	; 0xc0
 80096d4:	d825      	bhi.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80096d6:	2b80      	cmp	r3, #128	; 0x80
 80096d8:	d018      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80096da:	2b80      	cmp	r3, #128	; 0x80
 80096dc:	d821      	bhi.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80096e2:	2b40      	cmp	r3, #64	; 0x40
 80096e4:	d007      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80096e6:	e01c      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e8:	4b63      	ldr	r3, [pc, #396]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ec:	4a62      	ldr	r2, [pc, #392]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80096f4:	e01c      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096fa:	3308      	adds	r3, #8
 80096fc:	2100      	movs	r1, #0
 80096fe:	4618      	mov	r0, r3
 8009700:	f002 fab8 	bl	800bc74 <RCCEx_PLL2_Config>
 8009704:	4603      	mov	r3, r0
 8009706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800970a:	e011      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800970c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009710:	3328      	adds	r3, #40	; 0x28
 8009712:	2100      	movs	r1, #0
 8009714:	4618      	mov	r0, r3
 8009716:	f002 fb5f 	bl	800bdd8 <RCCEx_PLL3_Config>
 800971a:	4603      	mov	r3, r0
 800971c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009720:	e006      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009728:	e002      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800972a:	bf00      	nop
 800972c:	e000      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800972e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009738:	4b4f      	ldr	r3, [pc, #316]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800973a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800973c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009746:	4a4c      	ldr	r2, [pc, #304]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009748:	430b      	orrs	r3, r1
 800974a:	6513      	str	r3, [r2, #80]	; 0x50
 800974c:	e003      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800974e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009762:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009766:	2300      	movs	r3, #0
 8009768:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800976c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009770:	460b      	mov	r3, r1
 8009772:	4313      	orrs	r3, r2
 8009774:	d053      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800977a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800977e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009782:	d035      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009784:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009788:	d82e      	bhi.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800978a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800978e:	d031      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009790:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009794:	d828      	bhi.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800979a:	d01a      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800979c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097a0:	d822      	bhi.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d003      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80097a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097aa:	d007      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80097ac:	e01c      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097ae:	4b32      	ldr	r3, [pc, #200]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b2:	4a31      	ldr	r2, [pc, #196]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097ba:	e01c      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c0:	3308      	adds	r3, #8
 80097c2:	2100      	movs	r1, #0
 80097c4:	4618      	mov	r0, r3
 80097c6:	f002 fa55 	bl	800bc74 <RCCEx_PLL2_Config>
 80097ca:	4603      	mov	r3, r0
 80097cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80097d0:	e011      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d6:	3328      	adds	r3, #40	; 0x28
 80097d8:	2100      	movs	r1, #0
 80097da:	4618      	mov	r0, r3
 80097dc:	f002 fafc 	bl	800bdd8 <RCCEx_PLL3_Config>
 80097e0:	4603      	mov	r3, r0
 80097e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097e6:	e006      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097ee:	e002      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80097f0:	bf00      	nop
 80097f2:	e000      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80097f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10b      	bne.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80097fe:	4b1e      	ldr	r3, [pc, #120]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009802:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800980a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800980e:	4a1a      	ldr	r2, [pc, #104]	; (8009878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009810:	430b      	orrs	r3, r1
 8009812:	6593      	str	r3, [r2, #88]	; 0x58
 8009814:	e003      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800981a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800981e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800982a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800982e:	2300      	movs	r3, #0
 8009830:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009834:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009838:	460b      	mov	r3, r1
 800983a:	4313      	orrs	r3, r2
 800983c:	d056      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800983e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009842:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009846:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800984a:	d038      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800984c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009850:	d831      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009852:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009856:	d034      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009858:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800985c:	d82b      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800985e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009862:	d01d      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009868:	d825      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800986a:	2b00      	cmp	r3, #0
 800986c:	d006      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800986e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009872:	d00a      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009874:	e01f      	b.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009876:	bf00      	nop
 8009878:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800987c:	4ba2      	ldr	r3, [pc, #648]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800987e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009880:	4aa1      	ldr	r2, [pc, #644]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009886:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009888:	e01c      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800988a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800988e:	3308      	adds	r3, #8
 8009890:	2100      	movs	r1, #0
 8009892:	4618      	mov	r0, r3
 8009894:	f002 f9ee 	bl	800bc74 <RCCEx_PLL2_Config>
 8009898:	4603      	mov	r3, r0
 800989a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800989e:	e011      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a4:	3328      	adds	r3, #40	; 0x28
 80098a6:	2100      	movs	r1, #0
 80098a8:	4618      	mov	r0, r3
 80098aa:	f002 fa95 	bl	800bdd8 <RCCEx_PLL3_Config>
 80098ae:	4603      	mov	r3, r0
 80098b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098b4:	e006      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098bc:	e002      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80098be:	bf00      	nop
 80098c0:	e000      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80098c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10b      	bne.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80098cc:	4b8e      	ldr	r3, [pc, #568]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098d0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80098d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80098dc:	4a8a      	ldr	r2, [pc, #552]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098de:	430b      	orrs	r3, r1
 80098e0:	6593      	str	r3, [r2, #88]	; 0x58
 80098e2:	e003      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80098ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80098f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098fc:	2300      	movs	r3, #0
 80098fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009902:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009906:	460b      	mov	r3, r1
 8009908:	4313      	orrs	r3, r2
 800990a:	d03a      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800990c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009912:	2b30      	cmp	r3, #48	; 0x30
 8009914:	d01f      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009916:	2b30      	cmp	r3, #48	; 0x30
 8009918:	d819      	bhi.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800991a:	2b20      	cmp	r3, #32
 800991c:	d00c      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800991e:	2b20      	cmp	r3, #32
 8009920:	d815      	bhi.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009922:	2b00      	cmp	r3, #0
 8009924:	d019      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009926:	2b10      	cmp	r3, #16
 8009928:	d111      	bne.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800992a:	4b77      	ldr	r3, [pc, #476]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800992c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992e:	4a76      	ldr	r2, [pc, #472]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009934:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009936:	e011      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800993c:	3308      	adds	r3, #8
 800993e:	2102      	movs	r1, #2
 8009940:	4618      	mov	r0, r3
 8009942:	f002 f997 	bl	800bc74 <RCCEx_PLL2_Config>
 8009946:	4603      	mov	r3, r0
 8009948:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800994c:	e006      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009954:	e002      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009956:	bf00      	nop
 8009958:	e000      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800995a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800995c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10a      	bne.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009964:	4b68      	ldr	r3, [pc, #416]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009968:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800996c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009972:	4a65      	ldr	r2, [pc, #404]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009974:	430b      	orrs	r3, r1
 8009976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009978:	e003      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800997a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800997e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800998e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009992:	2300      	movs	r3, #0
 8009994:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009998:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800999c:	460b      	mov	r3, r1
 800999e:	4313      	orrs	r3, r2
 80099a0:	d051      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80099a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099ac:	d035      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80099ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099b2:	d82e      	bhi.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80099b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099b8:	d031      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80099ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099be:	d828      	bhi.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80099c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c4:	d01a      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80099c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099ca:	d822      	bhi.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80099d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d4:	d007      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80099d6:	e01c      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099d8:	4b4b      	ldr	r3, [pc, #300]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099dc:	4a4a      	ldr	r2, [pc, #296]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099e4:	e01c      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ea:	3308      	adds	r3, #8
 80099ec:	2100      	movs	r1, #0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f002 f940 	bl	800bc74 <RCCEx_PLL2_Config>
 80099f4:	4603      	mov	r3, r0
 80099f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099fa:	e011      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a00:	3328      	adds	r3, #40	; 0x28
 8009a02:	2100      	movs	r1, #0
 8009a04:	4618      	mov	r0, r3
 8009a06:	f002 f9e7 	bl	800bdd8 <RCCEx_PLL3_Config>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a10:	e006      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a18:	e002      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009a1a:	bf00      	nop
 8009a1c:	e000      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10a      	bne.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a28:	4b37      	ldr	r3, [pc, #220]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a2c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a36:	4a34      	ldr	r2, [pc, #208]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a38:	430b      	orrs	r3, r1
 8009a3a:	6513      	str	r3, [r2, #80]	; 0x50
 8009a3c:	e003      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009a52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a56:	2300      	movs	r3, #0
 8009a58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009a60:	460b      	mov	r3, r1
 8009a62:	4313      	orrs	r3, r2
 8009a64:	d056      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a70:	d033      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009a72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a76:	d82c      	bhi.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a7c:	d02f      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009a7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a82:	d826      	bhi.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a88:	d02b      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009a8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a8e:	d820      	bhi.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a94:	d012      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a9a:	d81a      	bhi.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d022      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa4:	d115      	bne.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aaa:	3308      	adds	r3, #8
 8009aac:	2101      	movs	r1, #1
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f002 f8e0 	bl	800bc74 <RCCEx_PLL2_Config>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009aba:	e015      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac0:	3328      	adds	r3, #40	; 0x28
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f002 f987 	bl	800bdd8 <RCCEx_PLL3_Config>
 8009aca:	4603      	mov	r3, r0
 8009acc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009ad0:	e00a      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ad8:	e006      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009ada:	bf00      	nop
 8009adc:	e004      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009ade:	bf00      	nop
 8009ae0:	e002      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009ae2:	bf00      	nop
 8009ae4:	e000      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10d      	bne.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009af0:	4b05      	ldr	r3, [pc, #20]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009afe:	4a02      	ldr	r2, [pc, #8]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b00:	430b      	orrs	r3, r1
 8009b02:	6513      	str	r3, [r2, #80]	; 0x50
 8009b04:	e006      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009b06:	bf00      	nop
 8009b08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b24:	2300      	movs	r3, #0
 8009b26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b2a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4313      	orrs	r3, r2
 8009b32:	d055      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b40:	d033      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b46:	d82c      	bhi.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b4c:	d02f      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b52:	d826      	bhi.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b58:	d02b      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009b5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b5e:	d820      	bhi.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b64:	d012      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b6a:	d81a      	bhi.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d022      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b74:	d115      	bne.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b7a:	3308      	adds	r3, #8
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f002 f878 	bl	800bc74 <RCCEx_PLL2_Config>
 8009b84:	4603      	mov	r3, r0
 8009b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009b8a:	e015      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b90:	3328      	adds	r3, #40	; 0x28
 8009b92:	2101      	movs	r1, #1
 8009b94:	4618      	mov	r0, r3
 8009b96:	f002 f91f 	bl	800bdd8 <RCCEx_PLL3_Config>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009ba0:	e00a      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ba8:	e006      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009baa:	bf00      	nop
 8009bac:	e004      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009bae:	bf00      	nop
 8009bb0:	e002      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009bb2:	bf00      	nop
 8009bb4:	e000      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10b      	bne.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009bc0:	4ba3      	ldr	r3, [pc, #652]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009bd0:	4a9f      	ldr	r2, [pc, #636]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bd2:	430b      	orrs	r3, r1
 8009bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8009bd6:	e003      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009bf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	d037      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c0a:	d00e      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c10:	d816      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d018      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c1a:	d111      	bne.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c1c:	4b8c      	ldr	r3, [pc, #560]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c20:	4a8b      	ldr	r2, [pc, #556]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c28:	e00f      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2e:	3308      	adds	r3, #8
 8009c30:	2101      	movs	r1, #1
 8009c32:	4618      	mov	r0, r3
 8009c34:	f002 f81e 	bl	800bc74 <RCCEx_PLL2_Config>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c3e:	e004      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c46:	e000      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10a      	bne.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c52:	4b7f      	ldr	r3, [pc, #508]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c56:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c60:	4a7b      	ldr	r2, [pc, #492]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c62:	430b      	orrs	r3, r1
 8009c64:	6513      	str	r3, [r2, #80]	; 0x50
 8009c66:	e003      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c78:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c80:	2300      	movs	r3, #0
 8009c82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009c86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	d039      	beq.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c96:	2b03      	cmp	r3, #3
 8009c98:	d81c      	bhi.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009c9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca0:	08009cdd 	.word	0x08009cdd
 8009ca4:	08009cb1 	.word	0x08009cb1
 8009ca8:	08009cbf 	.word	0x08009cbf
 8009cac:	08009cdd 	.word	0x08009cdd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cb0:	4b67      	ldr	r3, [pc, #412]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb4:	4a66      	ldr	r2, [pc, #408]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009cbc:	e00f      	b.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	2102      	movs	r1, #2
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f001 ffd4 	bl	800bc74 <RCCEx_PLL2_Config>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009cd2:	e004      	b.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cda:	e000      	b.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10a      	bne.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ce6:	4b5a      	ldr	r3, [pc, #360]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cea:	f023 0103 	bic.w	r1, r3, #3
 8009cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cf4:	4a56      	ldr	r2, [pc, #344]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cf6:	430b      	orrs	r3, r1
 8009cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009cfa:	e003      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009d10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d14:	2300      	movs	r3, #0
 8009d16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4313      	orrs	r3, r2
 8009d22:	f000 809f 	beq.w	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d26:	4b4b      	ldr	r3, [pc, #300]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a4a      	ldr	r2, [pc, #296]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d32:	f7f8 fd75 	bl	8002820 <HAL_GetTick>
 8009d36:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d3a:	e00b      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d3c:	f7f8 fd70 	bl	8002820 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	2b64      	cmp	r3, #100	; 0x64
 8009d4a:	d903      	bls.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d52:	e005      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d54:	4b3f      	ldr	r3, [pc, #252]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d0ed      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009d60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d179      	bne.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d68:	4b39      	ldr	r3, [pc, #228]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009d74:	4053      	eors	r3, r2
 8009d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d015      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d7e:	4b34      	ldr	r3, [pc, #208]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d8a:	4b31      	ldr	r3, [pc, #196]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8e:	4a30      	ldr	r2, [pc, #192]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d94:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d96:	4b2e      	ldr	r3, [pc, #184]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d9a:	4a2d      	ldr	r2, [pc, #180]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009da0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009da2:	4a2b      	ldr	r2, [pc, #172]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009da4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009da8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009db6:	d118      	bne.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009db8:	f7f8 fd32 	bl	8002820 <HAL_GetTick>
 8009dbc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dc0:	e00d      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dc2:	f7f8 fd2d 	bl	8002820 <HAL_GetTick>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009dcc:	1ad2      	subs	r2, r2, r3
 8009dce:	f241 3388 	movw	r3, #5000	; 0x1388
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d903      	bls.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009ddc:	e005      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dde:	4b1c      	ldr	r3, [pc, #112]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de2:	f003 0302 	and.w	r3, r3, #2
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0eb      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009dea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d129      	bne.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e02:	d10e      	bne.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009e04:	4b12      	ldr	r3, [pc, #72]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e14:	091a      	lsrs	r2, r3, #4
 8009e16:	4b10      	ldr	r3, [pc, #64]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009e18:	4013      	ands	r3, r2
 8009e1a:	4a0d      	ldr	r2, [pc, #52]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e1c:	430b      	orrs	r3, r1
 8009e1e:	6113      	str	r3, [r2, #16]
 8009e20:	e005      	b.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009e22:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	4a0a      	ldr	r2, [pc, #40]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009e2c:	6113      	str	r3, [r2, #16]
 8009e2e:	4b08      	ldr	r3, [pc, #32]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e30:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e3e:	4a04      	ldr	r2, [pc, #16]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e40:	430b      	orrs	r3, r1
 8009e42:	6713      	str	r3, [r2, #112]	; 0x70
 8009e44:	e00e      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009e4e:	e009      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009e50:	58024400 	.word	0x58024400
 8009e54:	58024800 	.word	0x58024800
 8009e58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	f002 0301 	and.w	r3, r2, #1
 8009e70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e74:	2300      	movs	r3, #0
 8009e76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4313      	orrs	r3, r2
 8009e82:	f000 8089 	beq.w	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e8c:	2b28      	cmp	r3, #40	; 0x28
 8009e8e:	d86b      	bhi.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009e90:	a201      	add	r2, pc, #4	; (adr r2, 8009e98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e96:	bf00      	nop
 8009e98:	08009f71 	.word	0x08009f71
 8009e9c:	08009f69 	.word	0x08009f69
 8009ea0:	08009f69 	.word	0x08009f69
 8009ea4:	08009f69 	.word	0x08009f69
 8009ea8:	08009f69 	.word	0x08009f69
 8009eac:	08009f69 	.word	0x08009f69
 8009eb0:	08009f69 	.word	0x08009f69
 8009eb4:	08009f69 	.word	0x08009f69
 8009eb8:	08009f3d 	.word	0x08009f3d
 8009ebc:	08009f69 	.word	0x08009f69
 8009ec0:	08009f69 	.word	0x08009f69
 8009ec4:	08009f69 	.word	0x08009f69
 8009ec8:	08009f69 	.word	0x08009f69
 8009ecc:	08009f69 	.word	0x08009f69
 8009ed0:	08009f69 	.word	0x08009f69
 8009ed4:	08009f69 	.word	0x08009f69
 8009ed8:	08009f53 	.word	0x08009f53
 8009edc:	08009f69 	.word	0x08009f69
 8009ee0:	08009f69 	.word	0x08009f69
 8009ee4:	08009f69 	.word	0x08009f69
 8009ee8:	08009f69 	.word	0x08009f69
 8009eec:	08009f69 	.word	0x08009f69
 8009ef0:	08009f69 	.word	0x08009f69
 8009ef4:	08009f69 	.word	0x08009f69
 8009ef8:	08009f71 	.word	0x08009f71
 8009efc:	08009f69 	.word	0x08009f69
 8009f00:	08009f69 	.word	0x08009f69
 8009f04:	08009f69 	.word	0x08009f69
 8009f08:	08009f69 	.word	0x08009f69
 8009f0c:	08009f69 	.word	0x08009f69
 8009f10:	08009f69 	.word	0x08009f69
 8009f14:	08009f69 	.word	0x08009f69
 8009f18:	08009f71 	.word	0x08009f71
 8009f1c:	08009f69 	.word	0x08009f69
 8009f20:	08009f69 	.word	0x08009f69
 8009f24:	08009f69 	.word	0x08009f69
 8009f28:	08009f69 	.word	0x08009f69
 8009f2c:	08009f69 	.word	0x08009f69
 8009f30:	08009f69 	.word	0x08009f69
 8009f34:	08009f69 	.word	0x08009f69
 8009f38:	08009f71 	.word	0x08009f71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f40:	3308      	adds	r3, #8
 8009f42:	2101      	movs	r1, #1
 8009f44:	4618      	mov	r0, r3
 8009f46:	f001 fe95 	bl	800bc74 <RCCEx_PLL2_Config>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f50:	e00f      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f56:	3328      	adds	r3, #40	; 0x28
 8009f58:	2101      	movs	r1, #1
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 ff3c 	bl	800bdd8 <RCCEx_PLL3_Config>
 8009f60:	4603      	mov	r3, r0
 8009f62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f66:	e004      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f6e:	e000      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10a      	bne.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009f7a:	4bbf      	ldr	r3, [pc, #764]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f7e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f88:	4abb      	ldr	r2, [pc, #748]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f8a:	430b      	orrs	r3, r1
 8009f8c:	6553      	str	r3, [r2, #84]	; 0x54
 8009f8e:	e003      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa0:	f002 0302 	and.w	r3, r2, #2
 8009fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009fae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	d041      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fbe:	2b05      	cmp	r3, #5
 8009fc0:	d824      	bhi.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009fc2:	a201      	add	r2, pc, #4	; (adr r2, 8009fc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc8:	0800a015 	.word	0x0800a015
 8009fcc:	08009fe1 	.word	0x08009fe1
 8009fd0:	08009ff7 	.word	0x08009ff7
 8009fd4:	0800a015 	.word	0x0800a015
 8009fd8:	0800a015 	.word	0x0800a015
 8009fdc:	0800a015 	.word	0x0800a015
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe4:	3308      	adds	r3, #8
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f001 fe43 	bl	800bc74 <RCCEx_PLL2_Config>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009ff4:	e00f      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ffa:	3328      	adds	r3, #40	; 0x28
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	4618      	mov	r0, r3
 800a000:	f001 feea 	bl	800bdd8 <RCCEx_PLL3_Config>
 800a004:	4603      	mov	r3, r0
 800a006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a00a:	e004      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a012:	e000      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a014:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10a      	bne.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a01e:	4b96      	ldr	r3, [pc, #600]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a022:	f023 0107 	bic.w	r1, r3, #7
 800a026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a02a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a02c:	4a92      	ldr	r2, [pc, #584]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a02e:	430b      	orrs	r3, r1
 800a030:	6553      	str	r3, [r2, #84]	; 0x54
 800a032:	e003      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a034:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a038:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a044:	f002 0304 	and.w	r3, r2, #4
 800a048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a04c:	2300      	movs	r3, #0
 800a04e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a052:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a056:	460b      	mov	r3, r1
 800a058:	4313      	orrs	r3, r2
 800a05a:	d044      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a064:	2b05      	cmp	r3, #5
 800a066:	d825      	bhi.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a068:	a201      	add	r2, pc, #4	; (adr r2, 800a070 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06e:	bf00      	nop
 800a070:	0800a0bd 	.word	0x0800a0bd
 800a074:	0800a089 	.word	0x0800a089
 800a078:	0800a09f 	.word	0x0800a09f
 800a07c:	0800a0bd 	.word	0x0800a0bd
 800a080:	0800a0bd 	.word	0x0800a0bd
 800a084:	0800a0bd 	.word	0x0800a0bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a08c:	3308      	adds	r3, #8
 800a08e:	2101      	movs	r1, #1
 800a090:	4618      	mov	r0, r3
 800a092:	f001 fdef 	bl	800bc74 <RCCEx_PLL2_Config>
 800a096:	4603      	mov	r3, r0
 800a098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a09c:	e00f      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0a2:	3328      	adds	r3, #40	; 0x28
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f001 fe96 	bl	800bdd8 <RCCEx_PLL3_Config>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a0b2:	e004      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0ba:	e000      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a0bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10b      	bne.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a0c6:	4b6c      	ldr	r3, [pc, #432]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ca:	f023 0107 	bic.w	r1, r3, #7
 800a0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0d6:	4a68      	ldr	r2, [pc, #416]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0d8:	430b      	orrs	r3, r1
 800a0da:	6593      	str	r3, [r2, #88]	; 0x58
 800a0dc:	e003      	b.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f002 0320 	and.w	r3, r2, #32
 800a0f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a100:	460b      	mov	r3, r1
 800a102:	4313      	orrs	r3, r2
 800a104:	d055      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a10e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a112:	d033      	beq.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a118:	d82c      	bhi.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a11a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a11e:	d02f      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a124:	d826      	bhi.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a126:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a12a:	d02b      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a12c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a130:	d820      	bhi.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a136:	d012      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a13c:	d81a      	bhi.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d022      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a146:	d115      	bne.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a14c:	3308      	adds	r3, #8
 800a14e:	2100      	movs	r1, #0
 800a150:	4618      	mov	r0, r3
 800a152:	f001 fd8f 	bl	800bc74 <RCCEx_PLL2_Config>
 800a156:	4603      	mov	r3, r0
 800a158:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a15c:	e015      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a162:	3328      	adds	r3, #40	; 0x28
 800a164:	2102      	movs	r1, #2
 800a166:	4618      	mov	r0, r3
 800a168:	f001 fe36 	bl	800bdd8 <RCCEx_PLL3_Config>
 800a16c:	4603      	mov	r3, r0
 800a16e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a172:	e00a      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a17a:	e006      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a17c:	bf00      	nop
 800a17e:	e004      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a180:	bf00      	nop
 800a182:	e002      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a184:	bf00      	nop
 800a186:	e000      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a18a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10b      	bne.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a192:	4b39      	ldr	r3, [pc, #228]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a196:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a19e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1a2:	4a35      	ldr	r2, [pc, #212]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1a4:	430b      	orrs	r3, r1
 800a1a6:	6553      	str	r3, [r2, #84]	; 0x54
 800a1a8:	e003      	b.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a1be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a1c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	d058      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a1de:	d033      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a1e0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a1e4:	d82c      	bhi.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a1e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ea:	d02f      	beq.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a1ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1f0:	d826      	bhi.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a1f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1f6:	d02b      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a1f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1fc:	d820      	bhi.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a1fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a202:	d012      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a208:	d81a      	bhi.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d022      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a20e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a212:	d115      	bne.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a218:	3308      	adds	r3, #8
 800a21a:	2100      	movs	r1, #0
 800a21c:	4618      	mov	r0, r3
 800a21e:	f001 fd29 	bl	800bc74 <RCCEx_PLL2_Config>
 800a222:	4603      	mov	r3, r0
 800a224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a228:	e015      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22e:	3328      	adds	r3, #40	; 0x28
 800a230:	2102      	movs	r1, #2
 800a232:	4618      	mov	r0, r3
 800a234:	f001 fdd0 	bl	800bdd8 <RCCEx_PLL3_Config>
 800a238:	4603      	mov	r3, r0
 800a23a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a23e:	e00a      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a246:	e006      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a248:	bf00      	nop
 800a24a:	e004      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a24c:	bf00      	nop
 800a24e:	e002      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a250:	bf00      	nop
 800a252:	e000      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a254:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10e      	bne.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a25e:	4b06      	ldr	r3, [pc, #24]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a262:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a26a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a26e:	4a02      	ldr	r2, [pc, #8]	; (800a278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a270:	430b      	orrs	r3, r1
 800a272:	6593      	str	r3, [r2, #88]	; 0x58
 800a274:	e006      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a276:	bf00      	nop
 800a278:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a27c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a280:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a294:	2300      	movs	r3, #0
 800a296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a29a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	d055      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a2ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a2b0:	d033      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a2b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a2b6:	d82c      	bhi.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a2b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2bc:	d02f      	beq.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a2be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2c2:	d826      	bhi.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a2c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a2c8:	d02b      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a2ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a2ce:	d820      	bhi.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a2d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2d4:	d012      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a2d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2da:	d81a      	bhi.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d022      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a2e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2e4:	d115      	bne.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ea:	3308      	adds	r3, #8
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f001 fcc0 	bl	800bc74 <RCCEx_PLL2_Config>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a2fa:	e015      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a300:	3328      	adds	r3, #40	; 0x28
 800a302:	2102      	movs	r1, #2
 800a304:	4618      	mov	r0, r3
 800a306:	f001 fd67 	bl	800bdd8 <RCCEx_PLL3_Config>
 800a30a:	4603      	mov	r3, r0
 800a30c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a310:	e00a      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a318:	e006      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a31a:	bf00      	nop
 800a31c:	e004      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a31e:	bf00      	nop
 800a320:	e002      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a322:	bf00      	nop
 800a324:	e000      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a326:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10b      	bne.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a330:	4ba1      	ldr	r3, [pc, #644]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a334:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a33c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a340:	4a9d      	ldr	r2, [pc, #628]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a342:	430b      	orrs	r3, r1
 800a344:	6593      	str	r3, [r2, #88]	; 0x58
 800a346:	e003      	b.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a348:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a34c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f002 0308 	and.w	r3, r2, #8
 800a35c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a360:	2300      	movs	r3, #0
 800a362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a366:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a36a:	460b      	mov	r3, r1
 800a36c:	4313      	orrs	r3, r2
 800a36e:	d01e      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a37c:	d10c      	bne.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a382:	3328      	adds	r3, #40	; 0x28
 800a384:	2102      	movs	r1, #2
 800a386:	4618      	mov	r0, r3
 800a388:	f001 fd26 	bl	800bdd8 <RCCEx_PLL3_Config>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d002      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a398:	4b87      	ldr	r3, [pc, #540]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a39a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a39c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3a8:	4a83      	ldr	r2, [pc, #524]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3aa:	430b      	orrs	r3, r1
 800a3ac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	f002 0310 	and.w	r3, r2, #16
 800a3ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a3c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	d01e      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3da:	d10c      	bne.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3e0:	3328      	adds	r3, #40	; 0x28
 800a3e2:	2102      	movs	r1, #2
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f001 fcf7 	bl	800bdd8 <RCCEx_PLL3_Config>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3f6:	4b70      	ldr	r3, [pc, #448]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a402:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a406:	4a6c      	ldr	r2, [pc, #432]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a408:	430b      	orrs	r3, r1
 800a40a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a418:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a41c:	2300      	movs	r3, #0
 800a41e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a422:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a426:	460b      	mov	r3, r1
 800a428:	4313      	orrs	r3, r2
 800a42a:	d03e      	beq.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a430:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a438:	d022      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a43a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a43e:	d81b      	bhi.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a440:	2b00      	cmp	r3, #0
 800a442:	d003      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a448:	d00b      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a44a:	e015      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a450:	3308      	adds	r3, #8
 800a452:	2100      	movs	r1, #0
 800a454:	4618      	mov	r0, r3
 800a456:	f001 fc0d 	bl	800bc74 <RCCEx_PLL2_Config>
 800a45a:	4603      	mov	r3, r0
 800a45c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a460:	e00f      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a466:	3328      	adds	r3, #40	; 0x28
 800a468:	2102      	movs	r1, #2
 800a46a:	4618      	mov	r0, r3
 800a46c:	f001 fcb4 	bl	800bdd8 <RCCEx_PLL3_Config>
 800a470:	4603      	mov	r3, r0
 800a472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a476:	e004      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a47e:	e000      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a480:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10b      	bne.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a48a:	4b4b      	ldr	r3, [pc, #300]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a48e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a496:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a49a:	4a47      	ldr	r2, [pc, #284]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a49c:	430b      	orrs	r3, r1
 800a49e:	6593      	str	r3, [r2, #88]	; 0x58
 800a4a0:	e003      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a4b6:	67bb      	str	r3, [r7, #120]	; 0x78
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a4bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	d03b      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a4d2:	d01f      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a4d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a4d8:	d818      	bhi.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a4da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4de:	d003      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a4e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4e4:	d007      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a4e6:	e011      	b.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4e8:	4b33      	ldr	r3, [pc, #204]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ec:	4a32      	ldr	r2, [pc, #200]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a4f4:	e00f      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4fa:	3328      	adds	r3, #40	; 0x28
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	4618      	mov	r0, r3
 800a500:	f001 fc6a 	bl	800bdd8 <RCCEx_PLL3_Config>
 800a504:	4603      	mov	r3, r0
 800a506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a50a:	e004      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a512:	e000      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a514:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10b      	bne.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a51e:	4b26      	ldr	r3, [pc, #152]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a522:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a52e:	4a22      	ldr	r2, [pc, #136]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a530:	430b      	orrs	r3, r1
 800a532:	6553      	str	r3, [r2, #84]	; 0x54
 800a534:	e003      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a53a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a546:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a54a:	673b      	str	r3, [r7, #112]	; 0x70
 800a54c:	2300      	movs	r3, #0
 800a54e:	677b      	str	r3, [r7, #116]	; 0x74
 800a550:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a554:	460b      	mov	r3, r1
 800a556:	4313      	orrs	r3, r2
 800a558:	d034      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a55a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a55e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a560:	2b00      	cmp	r3, #0
 800a562:	d003      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a568:	d007      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a56a:	e011      	b.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a56c:	4b12      	ldr	r3, [pc, #72]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a570:	4a11      	ldr	r2, [pc, #68]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a576:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a578:	e00e      	b.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a57e:	3308      	adds	r3, #8
 800a580:	2102      	movs	r1, #2
 800a582:	4618      	mov	r0, r3
 800a584:	f001 fb76 	bl	800bc74 <RCCEx_PLL2_Config>
 800a588:	4603      	mov	r3, r0
 800a58a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a58e:	e003      	b.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a596:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10d      	bne.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a5a0:	4b05      	ldr	r3, [pc, #20]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ae:	4a02      	ldr	r2, [pc, #8]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5b0:	430b      	orrs	r3, r1
 800a5b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5b4:	e006      	b.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a5b6:	bf00      	nop
 800a5b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a5d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a5d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a5da:	460b      	mov	r3, r1
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	d00c      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e4:	3328      	adds	r3, #40	; 0x28
 800a5e6:	2102      	movs	r1, #2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f001 fbf5 	bl	800bdd8 <RCCEx_PLL3_Config>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d002      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a606:	663b      	str	r3, [r7, #96]	; 0x60
 800a608:	2300      	movs	r3, #0
 800a60a:	667b      	str	r3, [r7, #100]	; 0x64
 800a60c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a610:	460b      	mov	r3, r1
 800a612:	4313      	orrs	r3, r2
 800a614:	d038      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a61a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a61e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a622:	d018      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a628:	d811      	bhi.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a62a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a62e:	d014      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a634:	d80b      	bhi.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a636:	2b00      	cmp	r3, #0
 800a638:	d011      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a63a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a63e:	d106      	bne.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a640:	4bc3      	ldr	r3, [pc, #780]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a644:	4ac2      	ldr	r2, [pc, #776]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a64a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a64c:	e008      	b.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a654:	e004      	b.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a656:	bf00      	nop
 800a658:	e002      	b.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a65a:	bf00      	nop
 800a65c:	e000      	b.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a65e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a660:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10b      	bne.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a668:	4bb9      	ldr	r3, [pc, #740]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a66a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a678:	4ab5      	ldr	r2, [pc, #724]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a67a:	430b      	orrs	r3, r1
 800a67c:	6553      	str	r3, [r2, #84]	; 0x54
 800a67e:	e003      	b.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a684:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a690:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a694:	65bb      	str	r3, [r7, #88]	; 0x58
 800a696:	2300      	movs	r3, #0
 800a698:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a69a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	d009      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a6a4:	4baa      	ldr	r3, [pc, #680]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6b2:	4aa7      	ldr	r2, [pc, #668]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6b4:	430b      	orrs	r3, r1
 800a6b6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a6c4:	653b      	str	r3, [r7, #80]	; 0x50
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	657b      	str	r3, [r7, #84]	; 0x54
 800a6ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	d00a      	beq.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a6d4:	4b9e      	ldr	r3, [pc, #632]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a6e4:	4a9a      	ldr	r2, [pc, #616]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6e6:	430b      	orrs	r3, r1
 800a6e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a6f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a700:	460b      	mov	r3, r1
 800a702:	4313      	orrs	r3, r2
 800a704:	d009      	beq.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a706:	4b92      	ldr	r3, [pc, #584]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a70a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a714:	4a8e      	ldr	r2, [pc, #568]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a716:	430b      	orrs	r3, r1
 800a718:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a722:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a726:	643b      	str	r3, [r7, #64]	; 0x40
 800a728:	2300      	movs	r3, #0
 800a72a:	647b      	str	r3, [r7, #68]	; 0x44
 800a72c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a730:	460b      	mov	r3, r1
 800a732:	4313      	orrs	r3, r2
 800a734:	d00e      	beq.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a736:	4b86      	ldr	r3, [pc, #536]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	4a85      	ldr	r2, [pc, #532]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a73c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a740:	6113      	str	r3, [r2, #16]
 800a742:	4b83      	ldr	r3, [pc, #524]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a744:	6919      	ldr	r1, [r3, #16]
 800a746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a74e:	4a80      	ldr	r2, [pc, #512]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a750:	430b      	orrs	r3, r1
 800a752:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a760:	63bb      	str	r3, [r7, #56]	; 0x38
 800a762:	2300      	movs	r3, #0
 800a764:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a766:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a76a:	460b      	mov	r3, r1
 800a76c:	4313      	orrs	r3, r2
 800a76e:	d009      	beq.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a770:	4b77      	ldr	r3, [pc, #476]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a774:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a77e:	4a74      	ldr	r2, [pc, #464]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a780:	430b      	orrs	r3, r1
 800a782:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a790:	633b      	str	r3, [r7, #48]	; 0x30
 800a792:	2300      	movs	r3, #0
 800a794:	637b      	str	r3, [r7, #52]	; 0x34
 800a796:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a79a:	460b      	mov	r3, r1
 800a79c:	4313      	orrs	r3, r2
 800a79e:	d00a      	beq.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a7a0:	4b6b      	ldr	r3, [pc, #428]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7a4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7b0:	4a67      	ldr	r2, [pc, #412]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7b2:	430b      	orrs	r3, r1
 800a7b4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	2100      	movs	r1, #0
 800a7c0:	62b9      	str	r1, [r7, #40]	; 0x28
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	d011      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7d6:	3308      	adds	r3, #8
 800a7d8:	2100      	movs	r1, #0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f001 fa4a 	bl	800bc74 <RCCEx_PLL2_Config>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a7e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d003      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	2100      	movs	r1, #0
 800a800:	6239      	str	r1, [r7, #32]
 800a802:	f003 0302 	and.w	r3, r3, #2
 800a806:	627b      	str	r3, [r7, #36]	; 0x24
 800a808:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a80c:	460b      	mov	r3, r1
 800a80e:	4313      	orrs	r3, r2
 800a810:	d011      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a816:	3308      	adds	r3, #8
 800a818:	2101      	movs	r1, #1
 800a81a:	4618      	mov	r0, r3
 800a81c:	f001 fa2a 	bl	800bc74 <RCCEx_PLL2_Config>
 800a820:	4603      	mov	r3, r0
 800a822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d003      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a82e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a832:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	2100      	movs	r1, #0
 800a840:	61b9      	str	r1, [r7, #24]
 800a842:	f003 0304 	and.w	r3, r3, #4
 800a846:	61fb      	str	r3, [r7, #28]
 800a848:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a84c:	460b      	mov	r3, r1
 800a84e:	4313      	orrs	r3, r2
 800a850:	d011      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a856:	3308      	adds	r3, #8
 800a858:	2102      	movs	r1, #2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f001 fa0a 	bl	800bc74 <RCCEx_PLL2_Config>
 800a860:	4603      	mov	r3, r0
 800a862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d003      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a86e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a872:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87e:	2100      	movs	r1, #0
 800a880:	6139      	str	r1, [r7, #16]
 800a882:	f003 0308 	and.w	r3, r3, #8
 800a886:	617b      	str	r3, [r7, #20]
 800a888:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a88c:	460b      	mov	r3, r1
 800a88e:	4313      	orrs	r3, r2
 800a890:	d011      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a896:	3328      	adds	r3, #40	; 0x28
 800a898:	2100      	movs	r1, #0
 800a89a:	4618      	mov	r0, r3
 800a89c:	f001 fa9c 	bl	800bdd8 <RCCEx_PLL3_Config>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a8a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d003      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	2100      	movs	r1, #0
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	f003 0310 	and.w	r3, r3, #16
 800a8c6:	60fb      	str	r3, [r7, #12]
 800a8c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	d011      	beq.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d6:	3328      	adds	r3, #40	; 0x28
 800a8d8:	2101      	movs	r1, #1
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f001 fa7c 	bl	800bdd8 <RCCEx_PLL3_Config>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a8e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a8f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fe:	2100      	movs	r1, #0
 800a900:	6039      	str	r1, [r7, #0]
 800a902:	f003 0320 	and.w	r3, r3, #32
 800a906:	607b      	str	r3, [r7, #4]
 800a908:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a90c:	460b      	mov	r3, r1
 800a90e:	4313      	orrs	r3, r2
 800a910:	d011      	beq.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a916:	3328      	adds	r3, #40	; 0x28
 800a918:	2102      	movs	r1, #2
 800a91a:	4618      	mov	r0, r3
 800a91c:	f001 fa5c 	bl	800bdd8 <RCCEx_PLL3_Config>
 800a920:	4603      	mov	r3, r0
 800a922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a92e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a932:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a936:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	e000      	b.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
}
 800a944:	4618      	mov	r0, r3
 800a946:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a94a:	46bd      	mov	sp, r7
 800a94c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a950:	58024400 	.word	0x58024400

0800a954 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b090      	sub	sp, #64	; 0x40
 800a958:	af00      	add	r7, sp, #0
 800a95a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a95e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a962:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a966:	430b      	orrs	r3, r1
 800a968:	f040 8094 	bne.w	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a96c:	4b9e      	ldr	r3, [pc, #632]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a96e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a970:	f003 0307 	and.w	r3, r3, #7
 800a974:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	2b04      	cmp	r3, #4
 800a97a:	f200 8087 	bhi.w	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a97e:	a201      	add	r2, pc, #4	; (adr r2, 800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a984:	0800a999 	.word	0x0800a999
 800a988:	0800a9c1 	.word	0x0800a9c1
 800a98c:	0800a9e9 	.word	0x0800a9e9
 800a990:	0800aa85 	.word	0x0800aa85
 800a994:	0800aa11 	.word	0x0800aa11
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a998:	4b93      	ldr	r3, [pc, #588]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9a4:	d108      	bne.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f001 f810 	bl	800b9d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9b4:	f000 bd45 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9bc:	f000 bd41 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9c0:	4b89      	ldr	r3, [pc, #548]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9cc:	d108      	bne.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ce:	f107 0318 	add.w	r3, r7, #24
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 fd54 	bl	800b480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9dc:	f000 bd31 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9e4:	f000 bd2d 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9e8:	4b7f      	ldr	r3, [pc, #508]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9f4:	d108      	bne.n	800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9f6:	f107 030c 	add.w	r3, r7, #12
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f000 fe94 	bl	800b728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa04:	f000 bd1d 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa0c:	f000 bd19 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa10:	4b75      	ldr	r3, [pc, #468]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa18:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa1a:	4b73      	ldr	r3, [pc, #460]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 0304 	and.w	r3, r3, #4
 800aa22:	2b04      	cmp	r3, #4
 800aa24:	d10c      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800aa26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d109      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa2c:	4b6e      	ldr	r3, [pc, #440]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	08db      	lsrs	r3, r3, #3
 800aa32:	f003 0303 	and.w	r3, r3, #3
 800aa36:	4a6d      	ldr	r2, [pc, #436]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa38:	fa22 f303 	lsr.w	r3, r2, r3
 800aa3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa3e:	e01f      	b.n	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa40:	4b69      	ldr	r3, [pc, #420]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa4c:	d106      	bne.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800aa4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa54:	d102      	bne.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa56:	4b66      	ldr	r3, [pc, #408]	; (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800aa58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa5a:	e011      	b.n	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa5c:	4b62      	ldr	r3, [pc, #392]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa68:	d106      	bne.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800aa6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa70:	d102      	bne.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa72:	4b60      	ldr	r3, [pc, #384]	; (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800aa74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa76:	e003      	b.n	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aa7c:	f000 bce1 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa80:	f000 bcdf 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa84:	4b5c      	ldr	r3, [pc, #368]	; (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800aa86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa88:	f000 bcdb 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa90:	f000 bcd7 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800aa94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa98:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800aa9c:	430b      	orrs	r3, r1
 800aa9e:	f040 80ad 	bne.w	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800aaa2:	4b51      	ldr	r3, [pc, #324]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aaa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaa6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800aaaa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aaac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aab2:	d056      	beq.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaba:	f200 8090 	bhi.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	2bc0      	cmp	r3, #192	; 0xc0
 800aac2:	f000 8088 	beq.w	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	2bc0      	cmp	r3, #192	; 0xc0
 800aaca:	f200 8088 	bhi.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	2b80      	cmp	r3, #128	; 0x80
 800aad2:	d032      	beq.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800aad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad6:	2b80      	cmp	r3, #128	; 0x80
 800aad8:	f200 8081 	bhi.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800aae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae4:	2b40      	cmp	r3, #64	; 0x40
 800aae6:	d014      	beq.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800aae8:	e079      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aaea:	4b3f      	ldr	r3, [pc, #252]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaf6:	d108      	bne.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 ff67 	bl	800b9d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab06:	f000 bc9c 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab0e:	f000 bc98 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab12:	4b35      	ldr	r3, [pc, #212]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab1e:	d108      	bne.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab20:	f107 0318 	add.w	r3, r7, #24
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 fcab 	bl	800b480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab2e:	f000 bc88 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab36:	f000 bc84 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab3a:	4b2b      	ldr	r3, [pc, #172]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab46:	d108      	bne.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab48:	f107 030c 	add.w	r3, r7, #12
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 fdeb 	bl	800b728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab56:	f000 bc74 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab5e:	f000 bc70 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab62:	4b21      	ldr	r3, [pc, #132]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab6a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab6c:	4b1e      	ldr	r3, [pc, #120]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0304 	and.w	r3, r3, #4
 800ab74:	2b04      	cmp	r3, #4
 800ab76:	d10c      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ab78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d109      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab7e:	4b1a      	ldr	r3, [pc, #104]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	08db      	lsrs	r3, r3, #3
 800ab84:	f003 0303 	and.w	r3, r3, #3
 800ab88:	4a18      	ldr	r2, [pc, #96]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ab8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab90:	e01f      	b.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab92:	4b15      	ldr	r3, [pc, #84]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab9e:	d106      	bne.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800aba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aba6:	d102      	bne.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aba8:	4b11      	ldr	r3, [pc, #68]	; (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800abaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abac:	e011      	b.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abae:	4b0e      	ldr	r3, [pc, #56]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abba:	d106      	bne.n	800abca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800abbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abc2:	d102      	bne.n	800abca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800abc4:	4b0b      	ldr	r3, [pc, #44]	; (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800abc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abc8:	e003      	b.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800abca:	2300      	movs	r3, #0
 800abcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800abce:	f000 bc38 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abd2:	f000 bc36 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800abd6:	4b08      	ldr	r3, [pc, #32]	; (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800abd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abda:	f000 bc32 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800abde:	2300      	movs	r3, #0
 800abe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abe2:	f000 bc2e 	b.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abe6:	bf00      	nop
 800abe8:	58024400 	.word	0x58024400
 800abec:	03d09000 	.word	0x03d09000
 800abf0:	003d0900 	.word	0x003d0900
 800abf4:	017d7840 	.word	0x017d7840
 800abf8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800abfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac00:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ac04:	430b      	orrs	r3, r1
 800ac06:	f040 809c 	bne.w	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ac0a:	4b9e      	ldr	r3, [pc, #632]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac0e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ac12:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac1a:	d054      	beq.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac22:	f200 808b 	bhi.w	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ac26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac2c:	f000 8083 	beq.w	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac32:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac36:	f200 8081 	bhi.w	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac40:	d02f      	beq.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac48:	d878      	bhi.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d004      	beq.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ac50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac56:	d012      	beq.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ac58:	e070      	b.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac5a:	4b8a      	ldr	r3, [pc, #552]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac66:	d107      	bne.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 feaf 	bl	800b9d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac76:	e3e4      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac7c:	e3e1      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac7e:	4b81      	ldr	r3, [pc, #516]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac8a:	d107      	bne.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac8c:	f107 0318 	add.w	r3, r7, #24
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 fbf5 	bl	800b480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac9a:	e3d2      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aca0:	e3cf      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aca2:	4b78      	ldr	r3, [pc, #480]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acae:	d107      	bne.n	800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acb0:	f107 030c 	add.w	r3, r7, #12
 800acb4:	4618      	mov	r0, r3
 800acb6:	f000 fd37 	bl	800b728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acbe:	e3c0      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acc0:	2300      	movs	r3, #0
 800acc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acc4:	e3bd      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acc6:	4b6f      	ldr	r3, [pc, #444]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800acce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acd0:	4b6c      	ldr	r3, [pc, #432]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 0304 	and.w	r3, r3, #4
 800acd8:	2b04      	cmp	r3, #4
 800acda:	d10c      	bne.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800acdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d109      	bne.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ace2:	4b68      	ldr	r3, [pc, #416]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	08db      	lsrs	r3, r3, #3
 800ace8:	f003 0303 	and.w	r3, r3, #3
 800acec:	4a66      	ldr	r2, [pc, #408]	; (800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800acee:	fa22 f303 	lsr.w	r3, r2, r3
 800acf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acf4:	e01e      	b.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acf6:	4b63      	ldr	r3, [pc, #396]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad02:	d106      	bne.n	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ad04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad0a:	d102      	bne.n	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad0c:	4b5f      	ldr	r3, [pc, #380]	; (800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ad0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad10:	e010      	b.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad12:	4b5c      	ldr	r3, [pc, #368]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad1e:	d106      	bne.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ad20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad26:	d102      	bne.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad28:	4b59      	ldr	r3, [pc, #356]	; (800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ad2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad2c:	e002      	b.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad32:	e386      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad34:	e385      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad36:	4b57      	ldr	r3, [pc, #348]	; (800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ad38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad3a:	e382      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad40:	e37f      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ad42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad46:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ad4a:	430b      	orrs	r3, r1
 800ad4c:	f040 80a7 	bne.w	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ad50:	4b4c      	ldr	r3, [pc, #304]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad54:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ad58:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad60:	d055      	beq.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad68:	f200 8096 	bhi.w	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ad6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad72:	f000 8084 	beq.w	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad7c:	f200 808c 	bhi.w	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ad80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad86:	d030      	beq.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ad88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad8e:	f200 8083 	bhi.w	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ad92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d004      	beq.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ad98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad9e:	d012      	beq.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ada0:	e07a      	b.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ada2:	4b38      	ldr	r3, [pc, #224]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adae:	d107      	bne.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adb4:	4618      	mov	r0, r3
 800adb6:	f000 fe0b 	bl	800b9d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adbe:	e340      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adc4:	e33d      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adc6:	4b2f      	ldr	r3, [pc, #188]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800add2:	d107      	bne.n	800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800add4:	f107 0318 	add.w	r3, r7, #24
 800add8:	4618      	mov	r0, r3
 800adda:	f000 fb51 	bl	800b480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ade2:	e32e      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ade4:	2300      	movs	r3, #0
 800ade6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ade8:	e32b      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adea:	4b26      	ldr	r3, [pc, #152]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adf6:	d107      	bne.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adf8:	f107 030c 	add.w	r3, r7, #12
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 fc93 	bl	800b728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae06:	e31c      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae0c:	e319      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae0e:	4b1d      	ldr	r3, [pc, #116]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae18:	4b1a      	ldr	r3, [pc, #104]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 0304 	and.w	r3, r3, #4
 800ae20:	2b04      	cmp	r3, #4
 800ae22:	d10c      	bne.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ae24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d109      	bne.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae2a:	4b16      	ldr	r3, [pc, #88]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	08db      	lsrs	r3, r3, #3
 800ae30:	f003 0303 	and.w	r3, r3, #3
 800ae34:	4a14      	ldr	r2, [pc, #80]	; (800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ae36:	fa22 f303 	lsr.w	r3, r2, r3
 800ae3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae3c:	e01e      	b.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae3e:	4b11      	ldr	r3, [pc, #68]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae4a:	d106      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ae4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae52:	d102      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae54:	4b0d      	ldr	r3, [pc, #52]	; (800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ae56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae58:	e010      	b.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae5a:	4b0a      	ldr	r3, [pc, #40]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae66:	d106      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ae68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae6e:	d102      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae70:	4b07      	ldr	r3, [pc, #28]	; (800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ae72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae74:	e002      	b.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ae7a:	e2e2      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae7c:	e2e1      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ae7e:	4b05      	ldr	r3, [pc, #20]	; (800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ae80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae82:	e2de      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae84:	58024400 	.word	0x58024400
 800ae88:	03d09000 	.word	0x03d09000
 800ae8c:	003d0900 	.word	0x003d0900
 800ae90:	017d7840 	.word	0x017d7840
 800ae94:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae9c:	e2d1      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ae9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aea2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800aea6:	430b      	orrs	r3, r1
 800aea8:	f040 809c 	bne.w	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800aeac:	4b93      	ldr	r3, [pc, #588]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aeae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeb0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aeb4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aeb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aebc:	d054      	beq.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800aebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aec4:	f200 808b 	bhi.w	800afde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aece:	f000 8083 	beq.w	800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800aed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aed8:	f200 8081 	bhi.w	800afde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aee2:	d02f      	beq.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800aee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aeea:	d878      	bhi.n	800afde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d004      	beq.n	800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aef8:	d012      	beq.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800aefa:	e070      	b.n	800afde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aefc:	4b7f      	ldr	r3, [pc, #508]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af08:	d107      	bne.n	800af1a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 fd5e 	bl	800b9d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af18:	e293      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af1a:	2300      	movs	r3, #0
 800af1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af1e:	e290      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af20:	4b76      	ldr	r3, [pc, #472]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af2c:	d107      	bne.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af2e:	f107 0318 	add.w	r3, r7, #24
 800af32:	4618      	mov	r0, r3
 800af34:	f000 faa4 	bl	800b480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af3c:	e281      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af3e:	2300      	movs	r3, #0
 800af40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af42:	e27e      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af44:	4b6d      	ldr	r3, [pc, #436]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af50:	d107      	bne.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af52:	f107 030c 	add.w	r3, r7, #12
 800af56:	4618      	mov	r0, r3
 800af58:	f000 fbe6 	bl	800b728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af60:	e26f      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af62:	2300      	movs	r3, #0
 800af64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af66:	e26c      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af68:	4b64      	ldr	r3, [pc, #400]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af70:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af72:	4b62      	ldr	r3, [pc, #392]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0304 	and.w	r3, r3, #4
 800af7a:	2b04      	cmp	r3, #4
 800af7c:	d10c      	bne.n	800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800af7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af80:	2b00      	cmp	r3, #0
 800af82:	d109      	bne.n	800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af84:	4b5d      	ldr	r3, [pc, #372]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	08db      	lsrs	r3, r3, #3
 800af8a:	f003 0303 	and.w	r3, r3, #3
 800af8e:	4a5c      	ldr	r2, [pc, #368]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800af90:	fa22 f303 	lsr.w	r3, r2, r3
 800af94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af96:	e01e      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af98:	4b58      	ldr	r3, [pc, #352]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afa4:	d106      	bne.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800afa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afac:	d102      	bne.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800afae:	4b55      	ldr	r3, [pc, #340]	; (800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800afb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afb2:	e010      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afb4:	4b51      	ldr	r3, [pc, #324]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afc0:	d106      	bne.n	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800afc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afc8:	d102      	bne.n	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800afca:	4b4f      	ldr	r3, [pc, #316]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800afcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afce:	e002      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800afd0:	2300      	movs	r3, #0
 800afd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800afd4:	e235      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800afd6:	e234      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800afd8:	4b4c      	ldr	r3, [pc, #304]	; (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800afda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afdc:	e231      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800afde:	2300      	movs	r3, #0
 800afe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afe2:	e22e      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800afe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afe8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800afec:	430b      	orrs	r3, r1
 800afee:	f040 808f 	bne.w	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aff2:	4b42      	ldr	r3, [pc, #264]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aff6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800affa:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800affc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b002:	d06b      	beq.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b006:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b00a:	d874      	bhi.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b012:	d056      	beq.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b01a:	d86c      	bhi.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b022:	d03b      	beq.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b026:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b02a:	d864      	bhi.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b032:	d021      	beq.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b03a:	d85c      	bhi.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d004      	beq.n	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b048:	d004      	beq.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b04a:	e054      	b.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b04c:	f7fe fa4c 	bl	80094e8 <HAL_RCC_GetPCLK1Freq>
 800b050:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b052:	e1f6      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b054:	4b29      	ldr	r3, [pc, #164]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b05c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b060:	d107      	bne.n	800b072 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b062:	f107 0318 	add.w	r3, r7, #24
 800b066:	4618      	mov	r0, r3
 800b068:	f000 fa0a 	bl	800b480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b070:	e1e7      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b072:	2300      	movs	r3, #0
 800b074:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b076:	e1e4      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b078:	4b20      	ldr	r3, [pc, #128]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b084:	d107      	bne.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b086:	f107 030c 	add.w	r3, r7, #12
 800b08a:	4618      	mov	r0, r3
 800b08c:	f000 fb4c 	bl	800b728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b094:	e1d5      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b09a:	e1d2      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b09c:	4b17      	ldr	r3, [pc, #92]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f003 0304 	and.w	r3, r3, #4
 800b0a4:	2b04      	cmp	r3, #4
 800b0a6:	d109      	bne.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0a8:	4b14      	ldr	r3, [pc, #80]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	08db      	lsrs	r3, r3, #3
 800b0ae:	f003 0303 	and.w	r3, r3, #3
 800b0b2:	4a13      	ldr	r2, [pc, #76]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b0b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ba:	e1c2      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c0:	e1bf      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b0c2:	4b0e      	ldr	r3, [pc, #56]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0ce:	d102      	bne.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b0d0:	4b0c      	ldr	r3, [pc, #48]	; (800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0d4:	e1b5      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0da:	e1b2      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b0dc:	4b07      	ldr	r3, [pc, #28]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0e8:	d102      	bne.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b0ea:	4b07      	ldr	r3, [pc, #28]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ee:	e1a8      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0f4:	e1a5      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0fa:	e1a2      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0fc:	58024400 	.word	0x58024400
 800b100:	03d09000 	.word	0x03d09000
 800b104:	003d0900 	.word	0x003d0900
 800b108:	017d7840 	.word	0x017d7840
 800b10c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b110:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b114:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b118:	430b      	orrs	r3, r1
 800b11a:	d173      	bne.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b11c:	4b9c      	ldr	r3, [pc, #624]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b11e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b124:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b12c:	d02f      	beq.n	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b134:	d863      	bhi.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d004      	beq.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b142:	d012      	beq.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b144:	e05b      	b.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b146:	4b92      	ldr	r3, [pc, #584]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b14e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b152:	d107      	bne.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b154:	f107 0318 	add.w	r3, r7, #24
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 f991 	bl	800b480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b162:	e16e      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b168:	e16b      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b16a:	4b89      	ldr	r3, [pc, #548]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b176:	d107      	bne.n	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b178:	f107 030c 	add.w	r3, r7, #12
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 fad3 	bl	800b728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b186:	e15c      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b18c:	e159      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b18e:	4b80      	ldr	r3, [pc, #512]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b192:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b196:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b198:	4b7d      	ldr	r3, [pc, #500]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 0304 	and.w	r3, r3, #4
 800b1a0:	2b04      	cmp	r3, #4
 800b1a2:	d10c      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d109      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1aa:	4b79      	ldr	r3, [pc, #484]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	08db      	lsrs	r3, r3, #3
 800b1b0:	f003 0303 	and.w	r3, r3, #3
 800b1b4:	4a77      	ldr	r2, [pc, #476]	; (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b1b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1bc:	e01e      	b.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1be:	4b74      	ldr	r3, [pc, #464]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1ca:	d106      	bne.n	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1d2:	d102      	bne.n	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1d4:	4b70      	ldr	r3, [pc, #448]	; (800b398 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1d8:	e010      	b.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1da:	4b6d      	ldr	r3, [pc, #436]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1e6:	d106      	bne.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ee:	d102      	bne.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1f0:	4b6a      	ldr	r3, [pc, #424]	; (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1f4:	e002      	b.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b1fa:	e122      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b1fc:	e121      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b1fe:	2300      	movs	r3, #0
 800b200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b202:	e11e      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b204:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b208:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b20c:	430b      	orrs	r3, r1
 800b20e:	d133      	bne.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b210:	4b5f      	ldr	r3, [pc, #380]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b218:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d004      	beq.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b226:	d012      	beq.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b228:	e023      	b.n	800b272 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b22a:	4b59      	ldr	r3, [pc, #356]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b232:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b236:	d107      	bne.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b23c:	4618      	mov	r0, r3
 800b23e:	f000 fbc7 	bl	800b9d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b244:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b246:	e0fc      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b24c:	e0f9      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b24e:	4b50      	ldr	r3, [pc, #320]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b25a:	d107      	bne.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b25c:	f107 0318 	add.w	r3, r7, #24
 800b260:	4618      	mov	r0, r3
 800b262:	f000 f90d 	bl	800b480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b266:	6a3b      	ldr	r3, [r7, #32]
 800b268:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b26a:	e0ea      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b26c:	2300      	movs	r3, #0
 800b26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b270:	e0e7      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b272:	2300      	movs	r3, #0
 800b274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b276:	e0e4      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b27c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b280:	430b      	orrs	r3, r1
 800b282:	f040 808d 	bne.w	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b286:	4b42      	ldr	r3, [pc, #264]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b28a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b28e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b296:	d06b      	beq.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b29e:	d874      	bhi.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2a6:	d056      	beq.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ae:	d86c      	bhi.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2b6:	d03b      	beq.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2be:	d864      	bhi.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2c6:	d021      	beq.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ce:	d85c      	bhi.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d004      	beq.n	800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2dc:	d004      	beq.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b2de:	e054      	b.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b2e0:	f000 f8b8 	bl	800b454 <HAL_RCCEx_GetD3PCLK1Freq>
 800b2e4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b2e6:	e0ac      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2e8:	4b29      	ldr	r3, [pc, #164]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2f4:	d107      	bne.n	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2f6:	f107 0318 	add.w	r3, r7, #24
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 f8c0 	bl	800b480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b304:	e09d      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b30a:	e09a      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b30c:	4b20      	ldr	r3, [pc, #128]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b318:	d107      	bne.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b31a:	f107 030c 	add.w	r3, r7, #12
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 fa02 	bl	800b728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b328:	e08b      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b32a:	2300      	movs	r3, #0
 800b32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b32e:	e088      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b330:	4b17      	ldr	r3, [pc, #92]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f003 0304 	and.w	r3, r3, #4
 800b338:	2b04      	cmp	r3, #4
 800b33a:	d109      	bne.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b33c:	4b14      	ldr	r3, [pc, #80]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	08db      	lsrs	r3, r3, #3
 800b342:	f003 0303 	and.w	r3, r3, #3
 800b346:	4a13      	ldr	r2, [pc, #76]	; (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b348:	fa22 f303 	lsr.w	r3, r2, r3
 800b34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b34e:	e078      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b350:	2300      	movs	r3, #0
 800b352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b354:	e075      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b356:	4b0e      	ldr	r3, [pc, #56]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b35e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b362:	d102      	bne.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b364:	4b0c      	ldr	r3, [pc, #48]	; (800b398 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b366:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b368:	e06b      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b36a:	2300      	movs	r3, #0
 800b36c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b36e:	e068      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b370:	4b07      	ldr	r3, [pc, #28]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b37c:	d102      	bne.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b37e:	4b07      	ldr	r3, [pc, #28]	; (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b380:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b382:	e05e      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b388:	e05b      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b38e:	e058      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b390:	58024400 	.word	0x58024400
 800b394:	03d09000 	.word	0x03d09000
 800b398:	003d0900 	.word	0x003d0900
 800b39c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3a4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b3a8:	430b      	orrs	r3, r1
 800b3aa:	d148      	bne.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b3ac:	4b27      	ldr	r3, [pc, #156]	; (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b3ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3bc:	d02a      	beq.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3c4:	d838      	bhi.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d004      	beq.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3d2:	d00d      	beq.n	800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b3d4:	e030      	b.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b3d6:	4b1d      	ldr	r3, [pc, #116]	; (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3e2:	d102      	bne.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b3e4:	4b1a      	ldr	r3, [pc, #104]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3e8:	e02b      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ee:	e028      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3f0:	4b16      	ldr	r3, [pc, #88]	; (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3fc:	d107      	bne.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b402:	4618      	mov	r0, r3
 800b404:	f000 fae4 	bl	800b9d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b40c:	e019      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b412:	e016      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b414:	4b0d      	ldr	r3, [pc, #52]	; (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b41c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b420:	d107      	bne.n	800b432 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b422:	f107 0318 	add.w	r3, r7, #24
 800b426:	4618      	mov	r0, r3
 800b428:	f000 f82a 	bl	800b480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b430:	e007      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b432:	2300      	movs	r3, #0
 800b434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b436:	e004      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b438:	2300      	movs	r3, #0
 800b43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b43c:	e001      	b.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b444:	4618      	mov	r0, r3
 800b446:	3740      	adds	r7, #64	; 0x40
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	58024400 	.word	0x58024400
 800b450:	017d7840 	.word	0x017d7840

0800b454 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b458:	f7fe f816 	bl	8009488 <HAL_RCC_GetHCLKFreq>
 800b45c:	4602      	mov	r2, r0
 800b45e:	4b06      	ldr	r3, [pc, #24]	; (800b478 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	091b      	lsrs	r3, r3, #4
 800b464:	f003 0307 	and.w	r3, r3, #7
 800b468:	4904      	ldr	r1, [pc, #16]	; (800b47c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b46a:	5ccb      	ldrb	r3, [r1, r3]
 800b46c:	f003 031f 	and.w	r3, r3, #31
 800b470:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b474:	4618      	mov	r0, r3
 800b476:	bd80      	pop	{r7, pc}
 800b478:	58024400 	.word	0x58024400
 800b47c:	08010d28 	.word	0x08010d28

0800b480 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b480:	b480      	push	{r7}
 800b482:	b089      	sub	sp, #36	; 0x24
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b488:	4ba1      	ldr	r3, [pc, #644]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b48c:	f003 0303 	and.w	r3, r3, #3
 800b490:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b492:	4b9f      	ldr	r3, [pc, #636]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b496:	0b1b      	lsrs	r3, r3, #12
 800b498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b49c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b49e:	4b9c      	ldr	r3, [pc, #624]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a2:	091b      	lsrs	r3, r3, #4
 800b4a4:	f003 0301 	and.w	r3, r3, #1
 800b4a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b4aa:	4b99      	ldr	r3, [pc, #612]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ae:	08db      	lsrs	r3, r3, #3
 800b4b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	fb02 f303 	mul.w	r3, r2, r3
 800b4ba:	ee07 3a90 	vmov	s15, r3
 800b4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f000 8111 	beq.w	800b6f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	f000 8083 	beq.w	800b5dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	f200 80a1 	bhi.w	800b620 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d003      	beq.n	800b4ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d056      	beq.n	800b598 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b4ea:	e099      	b.n	800b620 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4ec:	4b88      	ldr	r3, [pc, #544]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f003 0320 	and.w	r3, r3, #32
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d02d      	beq.n	800b554 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4f8:	4b85      	ldr	r3, [pc, #532]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	08db      	lsrs	r3, r3, #3
 800b4fe:	f003 0303 	and.w	r3, r3, #3
 800b502:	4a84      	ldr	r2, [pc, #528]	; (800b714 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b504:	fa22 f303 	lsr.w	r3, r2, r3
 800b508:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	ee07 3a90 	vmov	s15, r3
 800b510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	ee07 3a90 	vmov	s15, r3
 800b51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b51e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b522:	4b7b      	ldr	r3, [pc, #492]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b532:	ed97 6a03 	vldr	s12, [r7, #12]
 800b536:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b53a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b53e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b54e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b552:	e087      	b.n	800b664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	ee07 3a90 	vmov	s15, r3
 800b55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b71c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b566:	4b6a      	ldr	r3, [pc, #424]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56e:	ee07 3a90 	vmov	s15, r3
 800b572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b576:	ed97 6a03 	vldr	s12, [r7, #12]
 800b57a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b57e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b58a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b596:	e065      	b.n	800b664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	ee07 3a90 	vmov	s15, r3
 800b59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b720 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5aa:	4b59      	ldr	r3, [pc, #356]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b2:	ee07 3a90 	vmov	s15, r3
 800b5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5be:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5da:	e043      	b.n	800b664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	ee07 3a90 	vmov	s15, r3
 800b5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b724 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ee:	4b48      	ldr	r3, [pc, #288]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b602:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b61a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b61e:	e021      	b.n	800b664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	ee07 3a90 	vmov	s15, r3
 800b626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b62a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b720 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b632:	4b37      	ldr	r3, [pc, #220]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b63a:	ee07 3a90 	vmov	s15, r3
 800b63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b642:	ed97 6a03 	vldr	s12, [r7, #12]
 800b646:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b65e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b662:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b664:	4b2a      	ldr	r3, [pc, #168]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b668:	0a5b      	lsrs	r3, r3, #9
 800b66a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b66e:	ee07 3a90 	vmov	s15, r3
 800b672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b67a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b67e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b68a:	ee17 2a90 	vmov	r2, s15
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b692:	4b1f      	ldr	r3, [pc, #124]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b696:	0c1b      	lsrs	r3, r3, #16
 800b698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b69c:	ee07 3a90 	vmov	s15, r3
 800b6a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6b8:	ee17 2a90 	vmov	r2, s15
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b6c0:	4b13      	ldr	r3, [pc, #76]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c4:	0e1b      	lsrs	r3, r3, #24
 800b6c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6ca:	ee07 3a90 	vmov	s15, r3
 800b6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6da:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6e6:	ee17 2a90 	vmov	r2, s15
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b6ee:	e008      	b.n	800b702 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	609a      	str	r2, [r3, #8]
}
 800b702:	bf00      	nop
 800b704:	3724      	adds	r7, #36	; 0x24
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop
 800b710:	58024400 	.word	0x58024400
 800b714:	03d09000 	.word	0x03d09000
 800b718:	46000000 	.word	0x46000000
 800b71c:	4c742400 	.word	0x4c742400
 800b720:	4a742400 	.word	0x4a742400
 800b724:	4bbebc20 	.word	0x4bbebc20

0800b728 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b728:	b480      	push	{r7}
 800b72a:	b089      	sub	sp, #36	; 0x24
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b730:	4ba1      	ldr	r3, [pc, #644]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b734:	f003 0303 	and.w	r3, r3, #3
 800b738:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b73a:	4b9f      	ldr	r3, [pc, #636]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73e:	0d1b      	lsrs	r3, r3, #20
 800b740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b744:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b746:	4b9c      	ldr	r3, [pc, #624]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74a:	0a1b      	lsrs	r3, r3, #8
 800b74c:	f003 0301 	and.w	r3, r3, #1
 800b750:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b752:	4b99      	ldr	r3, [pc, #612]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b756:	08db      	lsrs	r3, r3, #3
 800b758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b75c:	693a      	ldr	r2, [r7, #16]
 800b75e:	fb02 f303 	mul.w	r3, r2, r3
 800b762:	ee07 3a90 	vmov	s15, r3
 800b766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b76a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	2b00      	cmp	r3, #0
 800b772:	f000 8111 	beq.w	800b998 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	2b02      	cmp	r3, #2
 800b77a:	f000 8083 	beq.w	800b884 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	2b02      	cmp	r3, #2
 800b782:	f200 80a1 	bhi.w	800b8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d003      	beq.n	800b794 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d056      	beq.n	800b840 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b792:	e099      	b.n	800b8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b794:	4b88      	ldr	r3, [pc, #544]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 0320 	and.w	r3, r3, #32
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d02d      	beq.n	800b7fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7a0:	4b85      	ldr	r3, [pc, #532]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	08db      	lsrs	r3, r3, #3
 800b7a6:	f003 0303 	and.w	r3, r3, #3
 800b7aa:	4a84      	ldr	r2, [pc, #528]	; (800b9bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b7ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b7b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	ee07 3a90 	vmov	s15, r3
 800b7b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	ee07 3a90 	vmov	s15, r3
 800b7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ca:	4b7b      	ldr	r3, [pc, #492]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d2:	ee07 3a90 	vmov	s15, r3
 800b7d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7de:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b7e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b7fa:	e087      	b.n	800b90c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	ee07 3a90 	vmov	s15, r3
 800b802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b806:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b80a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b80e:	4b6a      	ldr	r3, [pc, #424]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b816:	ee07 3a90 	vmov	s15, r3
 800b81a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b81e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b822:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b82a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b82e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b83a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b83e:	e065      	b.n	800b90c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	ee07 3a90 	vmov	s15, r3
 800b846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b84e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b852:	4b59      	ldr	r3, [pc, #356]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b85a:	ee07 3a90 	vmov	s15, r3
 800b85e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b862:	ed97 6a03 	vldr	s12, [r7, #12]
 800b866:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b86a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b86e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b87a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b87e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b882:	e043      	b.n	800b90c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	ee07 3a90 	vmov	s15, r3
 800b88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b88e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b9cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b896:	4b48      	ldr	r3, [pc, #288]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b89e:	ee07 3a90 	vmov	s15, r3
 800b8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8c6:	e021      	b.n	800b90c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	ee07 3a90 	vmov	s15, r3
 800b8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8da:	4b37      	ldr	r3, [pc, #220]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8e2:	ee07 3a90 	vmov	s15, r3
 800b8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b90a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b90c:	4b2a      	ldr	r3, [pc, #168]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b910:	0a5b      	lsrs	r3, r3, #9
 800b912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b916:	ee07 3a90 	vmov	s15, r3
 800b91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b922:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b926:	edd7 6a07 	vldr	s13, [r7, #28]
 800b92a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b92e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b932:	ee17 2a90 	vmov	r2, s15
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b93a:	4b1f      	ldr	r3, [pc, #124]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93e:	0c1b      	lsrs	r3, r3, #16
 800b940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b944:	ee07 3a90 	vmov	s15, r3
 800b948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b94c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b950:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b954:	edd7 6a07 	vldr	s13, [r7, #28]
 800b958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b95c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b960:	ee17 2a90 	vmov	r2, s15
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b968:	4b13      	ldr	r3, [pc, #76]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96c:	0e1b      	lsrs	r3, r3, #24
 800b96e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b972:	ee07 3a90 	vmov	s15, r3
 800b976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b97a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b97e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b982:	edd7 6a07 	vldr	s13, [r7, #28]
 800b986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b98a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b98e:	ee17 2a90 	vmov	r2, s15
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b996:	e008      	b.n	800b9aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	609a      	str	r2, [r3, #8]
}
 800b9aa:	bf00      	nop
 800b9ac:	3724      	adds	r7, #36	; 0x24
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	58024400 	.word	0x58024400
 800b9bc:	03d09000 	.word	0x03d09000
 800b9c0:	46000000 	.word	0x46000000
 800b9c4:	4c742400 	.word	0x4c742400
 800b9c8:	4a742400 	.word	0x4a742400
 800b9cc:	4bbebc20 	.word	0x4bbebc20

0800b9d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b089      	sub	sp, #36	; 0x24
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9d8:	4ba0      	ldr	r3, [pc, #640]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9dc:	f003 0303 	and.w	r3, r3, #3
 800b9e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b9e2:	4b9e      	ldr	r3, [pc, #632]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e6:	091b      	lsrs	r3, r3, #4
 800b9e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b9ee:	4b9b      	ldr	r3, [pc, #620]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f2:	f003 0301 	and.w	r3, r3, #1
 800b9f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b9f8:	4b98      	ldr	r3, [pc, #608]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9fc:	08db      	lsrs	r3, r3, #3
 800b9fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	fb02 f303 	mul.w	r3, r2, r3
 800ba08:	ee07 3a90 	vmov	s15, r3
 800ba0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba10:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 8111 	beq.w	800bc3e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	f000 8083 	beq.w	800bb2a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	f200 80a1 	bhi.w	800bb6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d003      	beq.n	800ba3a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d056      	beq.n	800bae6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ba38:	e099      	b.n	800bb6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba3a:	4b88      	ldr	r3, [pc, #544]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 0320 	and.w	r3, r3, #32
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d02d      	beq.n	800baa2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba46:	4b85      	ldr	r3, [pc, #532]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	08db      	lsrs	r3, r3, #3
 800ba4c:	f003 0303 	and.w	r3, r3, #3
 800ba50:	4a83      	ldr	r2, [pc, #524]	; (800bc60 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ba52:	fa22 f303 	lsr.w	r3, r2, r3
 800ba56:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	ee07 3a90 	vmov	s15, r3
 800ba5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	ee07 3a90 	vmov	s15, r3
 800ba68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba70:	4b7a      	ldr	r3, [pc, #488]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba78:	ee07 3a90 	vmov	s15, r3
 800ba7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba80:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba84:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bc64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba9c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800baa0:	e087      	b.n	800bbb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	ee07 3a90 	vmov	s15, r3
 800baa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bc68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bab0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bab4:	4b69      	ldr	r3, [pc, #420]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800babc:	ee07 3a90 	vmov	s15, r3
 800bac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bac4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bac8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bc64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bacc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bad4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800badc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bae0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bae4:	e065      	b.n	800bbb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	ee07 3a90 	vmov	s15, r3
 800baec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bc6c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800baf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baf8:	4b58      	ldr	r3, [pc, #352]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bafc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb00:	ee07 3a90 	vmov	s15, r3
 800bb04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb08:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb0c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bc64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb28:	e043      	b.n	800bbb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	ee07 3a90 	vmov	s15, r3
 800bb30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb34:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bc70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bb38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb3c:	4b47      	ldr	r3, [pc, #284]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb44:	ee07 3a90 	vmov	s15, r3
 800bb48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb50:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bc64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb6c:	e021      	b.n	800bbb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	ee07 3a90 	vmov	s15, r3
 800bb74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb78:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bc68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bb7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb80:	4b36      	ldr	r3, [pc, #216]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb88:	ee07 3a90 	vmov	s15, r3
 800bb8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb90:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb94:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bc64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbb0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bbb2:	4b2a      	ldr	r3, [pc, #168]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb6:	0a5b      	lsrs	r3, r3, #9
 800bbb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbbc:	ee07 3a90 	vmov	s15, r3
 800bbc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbcc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbd8:	ee17 2a90 	vmov	r2, s15
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bbe0:	4b1e      	ldr	r3, [pc, #120]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe4:	0c1b      	lsrs	r3, r3, #16
 800bbe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbea:	ee07 3a90 	vmov	s15, r3
 800bbee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbfa:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc06:	ee17 2a90 	vmov	r2, s15
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bc0e:	4b13      	ldr	r3, [pc, #76]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc12:	0e1b      	lsrs	r3, r3, #24
 800bc14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc18:	ee07 3a90 	vmov	s15, r3
 800bc1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc28:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc34:	ee17 2a90 	vmov	r2, s15
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bc3c:	e008      	b.n	800bc50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	609a      	str	r2, [r3, #8]
}
 800bc50:	bf00      	nop
 800bc52:	3724      	adds	r7, #36	; 0x24
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr
 800bc5c:	58024400 	.word	0x58024400
 800bc60:	03d09000 	.word	0x03d09000
 800bc64:	46000000 	.word	0x46000000
 800bc68:	4c742400 	.word	0x4c742400
 800bc6c:	4a742400 	.word	0x4a742400
 800bc70:	4bbebc20 	.word	0x4bbebc20

0800bc74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc82:	4b53      	ldr	r3, [pc, #332]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc86:	f003 0303 	and.w	r3, r3, #3
 800bc8a:	2b03      	cmp	r3, #3
 800bc8c:	d101      	bne.n	800bc92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e099      	b.n	800bdc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bc92:	4b4f      	ldr	r3, [pc, #316]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a4e      	ldr	r2, [pc, #312]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bc98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bc9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc9e:	f7f6 fdbf 	bl	8002820 <HAL_GetTick>
 800bca2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bca4:	e008      	b.n	800bcb8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bca6:	f7f6 fdbb 	bl	8002820 <HAL_GetTick>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d901      	bls.n	800bcb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	e086      	b.n	800bdc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bcb8:	4b45      	ldr	r3, [pc, #276]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d1f0      	bne.n	800bca6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bcc4:	4b42      	ldr	r3, [pc, #264]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bcc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	031b      	lsls	r3, r3, #12
 800bcd2:	493f      	ldr	r1, [pc, #252]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	628b      	str	r3, [r1, #40]	; 0x28
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	025b      	lsls	r3, r3, #9
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	431a      	orrs	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	3b01      	subs	r3, #1
 800bcf4:	041b      	lsls	r3, r3, #16
 800bcf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	061b      	lsls	r3, r3, #24
 800bd04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd08:	4931      	ldr	r1, [pc, #196]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bd0e:	4b30      	ldr	r3, [pc, #192]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	695b      	ldr	r3, [r3, #20]
 800bd1a:	492d      	ldr	r1, [pc, #180]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bd20:	4b2b      	ldr	r3, [pc, #172]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd24:	f023 0220 	bic.w	r2, r3, #32
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	699b      	ldr	r3, [r3, #24]
 800bd2c:	4928      	ldr	r1, [pc, #160]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bd32:	4b27      	ldr	r3, [pc, #156]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd36:	4a26      	ldr	r2, [pc, #152]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd38:	f023 0310 	bic.w	r3, r3, #16
 800bd3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bd3e:	4b24      	ldr	r3, [pc, #144]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd42:	4b24      	ldr	r3, [pc, #144]	; (800bdd4 <RCCEx_PLL2_Config+0x160>)
 800bd44:	4013      	ands	r3, r2
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	69d2      	ldr	r2, [r2, #28]
 800bd4a:	00d2      	lsls	r2, r2, #3
 800bd4c:	4920      	ldr	r1, [pc, #128]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bd52:	4b1f      	ldr	r3, [pc, #124]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd56:	4a1e      	ldr	r2, [pc, #120]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd58:	f043 0310 	orr.w	r3, r3, #16
 800bd5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d106      	bne.n	800bd72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bd64:	4b1a      	ldr	r3, [pc, #104]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd68:	4a19      	ldr	r2, [pc, #100]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd70:	e00f      	b.n	800bd92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d106      	bne.n	800bd86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bd78:	4b15      	ldr	r3, [pc, #84]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7c:	4a14      	ldr	r2, [pc, #80]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd84:	e005      	b.n	800bd92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bd86:	4b12      	ldr	r3, [pc, #72]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8a:	4a11      	ldr	r2, [pc, #68]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bd90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bd92:	4b0f      	ldr	r3, [pc, #60]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a0e      	ldr	r2, [pc, #56]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bd98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd9e:	f7f6 fd3f 	bl	8002820 <HAL_GetTick>
 800bda2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bda4:	e008      	b.n	800bdb8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bda6:	f7f6 fd3b 	bl	8002820 <HAL_GetTick>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	d901      	bls.n	800bdb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	e006      	b.n	800bdc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bdb8:	4b05      	ldr	r3, [pc, #20]	; (800bdd0 <RCCEx_PLL2_Config+0x15c>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d0f0      	beq.n	800bda6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bdc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	58024400 	.word	0x58024400
 800bdd4:	ffff0007 	.word	0xffff0007

0800bdd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bde6:	4b53      	ldr	r3, [pc, #332]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800bde8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdea:	f003 0303 	and.w	r3, r3, #3
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	d101      	bne.n	800bdf6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e099      	b.n	800bf2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bdf6:	4b4f      	ldr	r3, [pc, #316]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a4e      	ldr	r2, [pc, #312]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800bdfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be02:	f7f6 fd0d 	bl	8002820 <HAL_GetTick>
 800be06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be08:	e008      	b.n	800be1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800be0a:	f7f6 fd09 	bl	8002820 <HAL_GetTick>
 800be0e:	4602      	mov	r2, r0
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	1ad3      	subs	r3, r2, r3
 800be14:	2b02      	cmp	r3, #2
 800be16:	d901      	bls.n	800be1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be18:	2303      	movs	r3, #3
 800be1a:	e086      	b.n	800bf2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be1c:	4b45      	ldr	r3, [pc, #276]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1f0      	bne.n	800be0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800be28:	4b42      	ldr	r3, [pc, #264]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800be2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	051b      	lsls	r3, r3, #20
 800be36:	493f      	ldr	r1, [pc, #252]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800be38:	4313      	orrs	r3, r2
 800be3a:	628b      	str	r3, [r1, #40]	; 0x28
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	3b01      	subs	r3, #1
 800be42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	3b01      	subs	r3, #1
 800be4c:	025b      	lsls	r3, r3, #9
 800be4e:	b29b      	uxth	r3, r3
 800be50:	431a      	orrs	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	3b01      	subs	r3, #1
 800be58:	041b      	lsls	r3, r3, #16
 800be5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be5e:	431a      	orrs	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	3b01      	subs	r3, #1
 800be66:	061b      	lsls	r3, r3, #24
 800be68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800be6c:	4931      	ldr	r1, [pc, #196]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800be6e:	4313      	orrs	r3, r2
 800be70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800be72:	4b30      	ldr	r3, [pc, #192]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800be74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	695b      	ldr	r3, [r3, #20]
 800be7e:	492d      	ldr	r1, [pc, #180]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800be80:	4313      	orrs	r3, r2
 800be82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800be84:	4b2b      	ldr	r3, [pc, #172]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800be86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	699b      	ldr	r3, [r3, #24]
 800be90:	4928      	ldr	r1, [pc, #160]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800be92:	4313      	orrs	r3, r2
 800be94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800be96:	4b27      	ldr	r3, [pc, #156]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800be98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9a:	4a26      	ldr	r2, [pc, #152]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800be9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bea0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bea2:	4b24      	ldr	r3, [pc, #144]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800bea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bea6:	4b24      	ldr	r3, [pc, #144]	; (800bf38 <RCCEx_PLL3_Config+0x160>)
 800bea8:	4013      	ands	r3, r2
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	69d2      	ldr	r2, [r2, #28]
 800beae:	00d2      	lsls	r2, r2, #3
 800beb0:	4920      	ldr	r1, [pc, #128]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800beb2:	4313      	orrs	r3, r2
 800beb4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800beb6:	4b1f      	ldr	r3, [pc, #124]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800beb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beba:	4a1e      	ldr	r2, [pc, #120]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800bebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bec0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d106      	bne.n	800bed6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bec8:	4b1a      	ldr	r3, [pc, #104]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800beca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800becc:	4a19      	ldr	r2, [pc, #100]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800bece:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bed2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bed4:	e00f      	b.n	800bef6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d106      	bne.n	800beea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bedc:	4b15      	ldr	r3, [pc, #84]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800bede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee0:	4a14      	ldr	r2, [pc, #80]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800bee2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bee8:	e005      	b.n	800bef6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800beea:	4b12      	ldr	r3, [pc, #72]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800beec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beee:	4a11      	ldr	r2, [pc, #68]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800bef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bef4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bef6:	4b0f      	ldr	r3, [pc, #60]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a0e      	ldr	r2, [pc, #56]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800befc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf02:	f7f6 fc8d 	bl	8002820 <HAL_GetTick>
 800bf06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf08:	e008      	b.n	800bf1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf0a:	f7f6 fc89 	bl	8002820 <HAL_GetTick>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	d901      	bls.n	800bf1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	e006      	b.n	800bf2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf1c:	4b05      	ldr	r3, [pc, #20]	; (800bf34 <RCCEx_PLL3_Config+0x15c>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d0f0      	beq.n	800bf0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bf28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	58024400 	.word	0x58024400
 800bf38:	ffff0007 	.word	0xffff0007

0800bf3c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d101      	bne.n	800bf4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	e10f      	b.n	800c16e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a87      	ldr	r2, [pc, #540]	; (800c178 <HAL_SPI_Init+0x23c>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d00f      	beq.n	800bf7e <HAL_SPI_Init+0x42>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a86      	ldr	r2, [pc, #536]	; (800c17c <HAL_SPI_Init+0x240>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d00a      	beq.n	800bf7e <HAL_SPI_Init+0x42>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a84      	ldr	r2, [pc, #528]	; (800c180 <HAL_SPI_Init+0x244>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d005      	beq.n	800bf7e <HAL_SPI_Init+0x42>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	2b0f      	cmp	r3, #15
 800bf78:	d901      	bls.n	800bf7e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e0f7      	b.n	800c16e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 fc12 	bl	800c7a8 <SPI_GetPacketSize>
 800bf84:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a7b      	ldr	r2, [pc, #492]	; (800c178 <HAL_SPI_Init+0x23c>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d00c      	beq.n	800bfaa <HAL_SPI_Init+0x6e>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a79      	ldr	r2, [pc, #484]	; (800c17c <HAL_SPI_Init+0x240>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d007      	beq.n	800bfaa <HAL_SPI_Init+0x6e>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4a78      	ldr	r2, [pc, #480]	; (800c180 <HAL_SPI_Init+0x244>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d002      	beq.n	800bfaa <HAL_SPI_Init+0x6e>
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2b08      	cmp	r3, #8
 800bfa8:	d811      	bhi.n	800bfce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bfae:	4a72      	ldr	r2, [pc, #456]	; (800c178 <HAL_SPI_Init+0x23c>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d009      	beq.n	800bfc8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a70      	ldr	r2, [pc, #448]	; (800c17c <HAL_SPI_Init+0x240>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d004      	beq.n	800bfc8 <HAL_SPI_Init+0x8c>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a6f      	ldr	r2, [pc, #444]	; (800c180 <HAL_SPI_Init+0x244>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d104      	bne.n	800bfd2 <HAL_SPI_Init+0x96>
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2b10      	cmp	r3, #16
 800bfcc:	d901      	bls.n	800bfd2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e0cd      	b.n	800c16e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d106      	bne.n	800bfec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7f6 f836 	bl	8002058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2202      	movs	r2, #2
 800bff0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f022 0201 	bic.w	r2, r2, #1
 800c002:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c00e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c018:	d119      	bne.n	800c04e <HAL_SPI_Init+0x112>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c022:	d103      	bne.n	800c02c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d008      	beq.n	800c03e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10c      	bne.n	800c04e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c038:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c03c:	d107      	bne.n	800c04e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c04c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00f      	beq.n	800c07a <HAL_SPI_Init+0x13e>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	2b06      	cmp	r3, #6
 800c060:	d90b      	bls.n	800c07a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	430a      	orrs	r2, r1
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	e007      	b.n	800c08a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c088:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	69da      	ldr	r2, [r3, #28]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c092:	431a      	orrs	r2, r3
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	431a      	orrs	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09c:	ea42 0103 	orr.w	r1, r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	68da      	ldr	r2, [r3, #12]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	430a      	orrs	r2, r1
 800c0aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b4:	431a      	orrs	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ba:	431a      	orrs	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	699b      	ldr	r3, [r3, #24]
 800c0c0:	431a      	orrs	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	431a      	orrs	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	431a      	orrs	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6a1b      	ldr	r3, [r3, #32]
 800c0d2:	431a      	orrs	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	431a      	orrs	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0de:	431a      	orrs	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	431a      	orrs	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0ea:	ea42 0103 	orr.w	r1, r2, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d113      	bne.n	800c12a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c114:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c128:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f022 0201 	bic.w	r2, r2, #1
 800c138:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00a      	beq.n	800c15c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	68db      	ldr	r3, [r3, #12]
 800c14c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	430a      	orrs	r2, r1
 800c15a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2201      	movs	r2, #1
 800c168:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	40013000 	.word	0x40013000
 800c17c:	40003800 	.word	0x40003800
 800c180:	40003c00 	.word	0x40003c00

0800c184 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b088      	sub	sp, #32
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	603b      	str	r3, [r7, #0]
 800c190:	4613      	mov	r3, r2
 800c192:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c198:	095b      	lsrs	r3, r3, #5
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	3301      	adds	r3, #1
 800c19e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	3330      	adds	r3, #48	; 0x30
 800c1a6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c1a8:	f7f6 fb3a 	bl	8002820 <HAL_GetTick>
 800c1ac:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d001      	beq.n	800c1be <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c1ba:	2302      	movs	r3, #2
 800c1bc:	e250      	b.n	800c660 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d002      	beq.n	800c1ca <HAL_SPI_Receive+0x46>
 800c1c4:	88fb      	ldrh	r3, [r7, #6]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d101      	bne.n	800c1ce <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e248      	b.n	800c660 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d101      	bne.n	800c1dc <HAL_SPI_Receive+0x58>
 800c1d8:	2302      	movs	r3, #2
 800c1da:	e241      	b.n	800c660 <HAL_SPI_Receive+0x4dc>
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2204      	movs	r2, #4
 800c1e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	88fa      	ldrh	r2, [r7, #6]
 800c1fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	88fa      	ldrh	r2, [r7, #6]
 800c206:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2200      	movs	r2, #0
 800c214:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2200      	movs	r2, #0
 800c22a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c234:	d108      	bne.n	800c248 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c244:	601a      	str	r2, [r3, #0]
 800c246:	e009      	b.n	800c25c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c25a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	685a      	ldr	r2, [r3, #4]
 800c262:	4b95      	ldr	r3, [pc, #596]	; (800c4b8 <HAL_SPI_Receive+0x334>)
 800c264:	4013      	ands	r3, r2
 800c266:	88f9      	ldrh	r1, [r7, #6]
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	6812      	ldr	r2, [r2, #0]
 800c26c:	430b      	orrs	r3, r1
 800c26e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f042 0201 	orr.w	r2, r2, #1
 800c27e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c288:	d107      	bne.n	800c29a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c298:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	2b0f      	cmp	r3, #15
 800c2a0:	d96c      	bls.n	800c37c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c2a2:	e064      	b.n	800c36e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	695b      	ldr	r3, [r3, #20]
 800c2aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	695b      	ldr	r3, [r3, #20]
 800c2b2:	f003 0301 	and.w	r3, r3, #1
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d114      	bne.n	800c2e4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c2c4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2ca:	1d1a      	adds	r2, r3, #4
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c2e2:	e044      	b.n	800c36e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	8bfa      	ldrh	r2, [r7, #30]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d919      	bls.n	800c326 <HAL_SPI_Receive+0x1a2>
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d014      	beq.n	800c326 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c304:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c306:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c30c:	1d1a      	adds	r2, r3, #4
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c318:	b29b      	uxth	r3, r3
 800c31a:	3b01      	subs	r3, #1
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c324:	e023      	b.n	800c36e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c326:	f7f6 fa7b 	bl	8002820 <HAL_GetTick>
 800c32a:	4602      	mov	r2, r0
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	683a      	ldr	r2, [r7, #0]
 800c332:	429a      	cmp	r2, r3
 800c334:	d803      	bhi.n	800c33e <HAL_SPI_Receive+0x1ba>
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c33c:	d102      	bne.n	800c344 <HAL_SPI_Receive+0x1c0>
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d114      	bne.n	800c36e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f000 f98f 	bl	800c668 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c350:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2201      	movs	r2, #1
 800c35e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2200      	movs	r2, #0
 800c366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c36a:	2303      	movs	r3, #3
 800c36c:	e178      	b.n	800c660 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c374:	b29b      	uxth	r3, r3
 800c376:	2b00      	cmp	r3, #0
 800c378:	d194      	bne.n	800c2a4 <HAL_SPI_Receive+0x120>
 800c37a:	e15e      	b.n	800c63a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	2b07      	cmp	r3, #7
 800c382:	f240 8153 	bls.w	800c62c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c386:	e08f      	b.n	800c4a8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	695b      	ldr	r3, [r3, #20]
 800c38e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	695b      	ldr	r3, [r3, #20]
 800c396:	f003 0301 	and.w	r3, r3, #1
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d114      	bne.n	800c3c8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3a2:	69ba      	ldr	r2, [r7, #24]
 800c3a4:	8812      	ldrh	r2, [r2, #0]
 800c3a6:	b292      	uxth	r2, r2
 800c3a8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3ae:	1c9a      	adds	r2, r3, #2
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c3c6:	e06f      	b.n	800c4a8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	8bfa      	ldrh	r2, [r7, #30]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d924      	bls.n	800c420 <HAL_SPI_Receive+0x29c>
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d01f      	beq.n	800c420 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3e4:	69ba      	ldr	r2, [r7, #24]
 800c3e6:	8812      	ldrh	r2, [r2, #0]
 800c3e8:	b292      	uxth	r2, r2
 800c3ea:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3f0:	1c9a      	adds	r2, r3, #2
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3fa:	69ba      	ldr	r2, [r7, #24]
 800c3fc:	8812      	ldrh	r2, [r2, #0]
 800c3fe:	b292      	uxth	r2, r2
 800c400:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c406:	1c9a      	adds	r2, r3, #2
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c412:	b29b      	uxth	r3, r3
 800c414:	3b02      	subs	r3, #2
 800c416:	b29a      	uxth	r2, r3
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c41e:	e043      	b.n	800c4a8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c426:	b29b      	uxth	r3, r3
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d119      	bne.n	800c460 <HAL_SPI_Receive+0x2dc>
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c432:	2b00      	cmp	r3, #0
 800c434:	d014      	beq.n	800c460 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c43a:	69ba      	ldr	r2, [r7, #24]
 800c43c:	8812      	ldrh	r2, [r2, #0]
 800c43e:	b292      	uxth	r2, r2
 800c440:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c446:	1c9a      	adds	r2, r3, #2
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c452:	b29b      	uxth	r3, r3
 800c454:	3b01      	subs	r3, #1
 800c456:	b29a      	uxth	r2, r3
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c45e:	e023      	b.n	800c4a8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c460:	f7f6 f9de 	bl	8002820 <HAL_GetTick>
 800c464:	4602      	mov	r2, r0
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	1ad3      	subs	r3, r2, r3
 800c46a:	683a      	ldr	r2, [r7, #0]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d803      	bhi.n	800c478 <HAL_SPI_Receive+0x2f4>
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c476:	d102      	bne.n	800c47e <HAL_SPI_Receive+0x2fa>
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d114      	bne.n	800c4a8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f000 f8f2 	bl	800c668 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c48a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c4a4:	2303      	movs	r3, #3
 800c4a6:	e0db      	b.n	800c660 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f47f af69 	bne.w	800c388 <HAL_SPI_Receive+0x204>
 800c4b6:	e0c0      	b.n	800c63a <HAL_SPI_Receive+0x4b6>
 800c4b8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	695b      	ldr	r3, [r3, #20]
 800c4c2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d117      	bne.n	800c502 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4de:	7812      	ldrb	r2, [r2, #0]
 800c4e0:	b2d2      	uxtb	r2, r2
 800c4e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4e8:	1c5a      	adds	r2, r3, #1
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c500:	e094      	b.n	800c62c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c508:	b29b      	uxth	r3, r3
 800c50a:	8bfa      	ldrh	r2, [r7, #30]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d946      	bls.n	800c59e <HAL_SPI_Receive+0x41a>
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c516:	2b00      	cmp	r3, #0
 800c518:	d041      	beq.n	800c59e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c526:	7812      	ldrb	r2, [r2, #0]
 800c528:	b2d2      	uxtb	r2, r2
 800c52a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c530:	1c5a      	adds	r2, r3, #1
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c542:	7812      	ldrb	r2, [r2, #0]
 800c544:	b2d2      	uxtb	r2, r2
 800c546:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c54c:	1c5a      	adds	r2, r3, #1
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c55e:	7812      	ldrb	r2, [r2, #0]
 800c560:	b2d2      	uxtb	r2, r2
 800c562:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c568:	1c5a      	adds	r2, r3, #1
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c57a:	7812      	ldrb	r2, [r2, #0]
 800c57c:	b2d2      	uxtb	r2, r2
 800c57e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c584:	1c5a      	adds	r2, r3, #1
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c590:	b29b      	uxth	r3, r3
 800c592:	3b04      	subs	r3, #4
 800c594:	b29a      	uxth	r2, r3
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c59c:	e046      	b.n	800c62c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	2b03      	cmp	r3, #3
 800c5a8:	d81c      	bhi.n	800c5e4 <HAL_SPI_Receive+0x460>
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d017      	beq.n	800c5e4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5c0:	7812      	ldrb	r2, [r2, #0]
 800c5c2:	b2d2      	uxtb	r2, r2
 800c5c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5ca:	1c5a      	adds	r2, r3, #1
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c5e2:	e023      	b.n	800c62c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5e4:	f7f6 f91c 	bl	8002820 <HAL_GetTick>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	683a      	ldr	r2, [r7, #0]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d803      	bhi.n	800c5fc <HAL_SPI_Receive+0x478>
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5fa:	d102      	bne.n	800c602 <HAL_SPI_Receive+0x47e>
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d114      	bne.n	800c62c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f000 f830 	bl	800c668 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c60e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c628:	2303      	movs	r3, #3
 800c62a:	e019      	b.n	800c660 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c632:	b29b      	uxth	r3, r3
 800c634:	2b00      	cmp	r3, #0
 800c636:	f47f af41 	bne.w	800c4bc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	f000 f814 	bl	800c668 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c656:	2b00      	cmp	r3, #0
 800c658:	d001      	beq.n	800c65e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c65a:	2301      	movs	r3, #1
 800c65c:	e000      	b.n	800c660 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c65e:	2300      	movs	r3, #0
  }
}
 800c660:	4618      	mov	r0, r3
 800c662:	3720      	adds	r7, #32
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	695b      	ldr	r3, [r3, #20]
 800c676:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	699a      	ldr	r2, [r3, #24]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f042 0208 	orr.w	r2, r2, #8
 800c686:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	699a      	ldr	r2, [r3, #24]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f042 0210 	orr.w	r2, r2, #16
 800c696:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f022 0201 	bic.w	r2, r2, #1
 800c6a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	6919      	ldr	r1, [r3, #16]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	4b3c      	ldr	r3, [pc, #240]	; (800c7a4 <SPI_CloseTransfer+0x13c>)
 800c6b4:	400b      	ands	r3, r1
 800c6b6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	689a      	ldr	r2, [r3, #8]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c6c6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	2b04      	cmp	r3, #4
 800c6d2:	d014      	beq.n	800c6fe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f003 0320 	and.w	r3, r3, #32
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00f      	beq.n	800c6fe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	699a      	ldr	r2, [r3, #24]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f042 0220 	orr.w	r2, r2, #32
 800c6fc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c704:	b2db      	uxtb	r3, r3
 800c706:	2b03      	cmp	r3, #3
 800c708:	d014      	beq.n	800c734 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00f      	beq.n	800c734 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c71a:	f043 0204 	orr.w	r2, r3, #4
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	699a      	ldr	r2, [r3, #24]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c732:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d00f      	beq.n	800c75e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c744:	f043 0201 	orr.w	r2, r3, #1
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	699a      	ldr	r2, [r3, #24]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c75c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c764:	2b00      	cmp	r3, #0
 800c766:	d00f      	beq.n	800c788 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c76e:	f043 0208 	orr.w	r2, r3, #8
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	699a      	ldr	r2, [r3, #24]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c786:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c798:	bf00      	nop
 800c79a:	3714      	adds	r7, #20
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr
 800c7a4:	fffffc90 	.word	0xfffffc90

0800c7a8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b4:	095b      	lsrs	r3, r3, #5
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	3307      	adds	r3, #7
 800c7c6:	08db      	lsrs	r3, r3, #3
 800c7c8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	fb02 f303 	mul.w	r3, r2, r3
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3714      	adds	r7, #20
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr

0800c7de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b082      	sub	sp, #8
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d101      	bne.n	800c7f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	e049      	b.n	800c884 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d106      	bne.n	800c80a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f7f5 fd1d 	bl	8002244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2202      	movs	r2, #2
 800c80e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	3304      	adds	r3, #4
 800c81a:	4619      	mov	r1, r3
 800c81c:	4610      	mov	r0, r2
 800c81e:	f000 ff85 	bl	800d72c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2201      	movs	r2, #1
 800c82e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2201      	movs	r2, #1
 800c836:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2201      	movs	r2, #1
 800c83e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2201      	movs	r2, #1
 800c846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2201      	movs	r2, #1
 800c856:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2201      	movs	r2, #1
 800c85e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2201      	movs	r2, #1
 800c866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2201      	movs	r2, #1
 800c86e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2201      	movs	r2, #1
 800c876:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2201      	movs	r2, #1
 800c87e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c882:	2300      	movs	r3, #0
}
 800c884:	4618      	mov	r0, r3
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b085      	sub	sp, #20
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d001      	beq.n	800c8a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e04c      	b.n	800c93e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a26      	ldr	r2, [pc, #152]	; (800c94c <HAL_TIM_Base_Start+0xc0>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d022      	beq.n	800c8fc <HAL_TIM_Base_Start+0x70>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8be:	d01d      	beq.n	800c8fc <HAL_TIM_Base_Start+0x70>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a22      	ldr	r2, [pc, #136]	; (800c950 <HAL_TIM_Base_Start+0xc4>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d018      	beq.n	800c8fc <HAL_TIM_Base_Start+0x70>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a21      	ldr	r2, [pc, #132]	; (800c954 <HAL_TIM_Base_Start+0xc8>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d013      	beq.n	800c8fc <HAL_TIM_Base_Start+0x70>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a1f      	ldr	r2, [pc, #124]	; (800c958 <HAL_TIM_Base_Start+0xcc>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d00e      	beq.n	800c8fc <HAL_TIM_Base_Start+0x70>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a1e      	ldr	r2, [pc, #120]	; (800c95c <HAL_TIM_Base_Start+0xd0>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d009      	beq.n	800c8fc <HAL_TIM_Base_Start+0x70>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a1c      	ldr	r2, [pc, #112]	; (800c960 <HAL_TIM_Base_Start+0xd4>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d004      	beq.n	800c8fc <HAL_TIM_Base_Start+0x70>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a1b      	ldr	r2, [pc, #108]	; (800c964 <HAL_TIM_Base_Start+0xd8>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d115      	bne.n	800c928 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	689a      	ldr	r2, [r3, #8]
 800c902:	4b19      	ldr	r3, [pc, #100]	; (800c968 <HAL_TIM_Base_Start+0xdc>)
 800c904:	4013      	ands	r3, r2
 800c906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2b06      	cmp	r3, #6
 800c90c:	d015      	beq.n	800c93a <HAL_TIM_Base_Start+0xae>
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c914:	d011      	beq.n	800c93a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f042 0201 	orr.w	r2, r2, #1
 800c924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c926:	e008      	b.n	800c93a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f042 0201 	orr.w	r2, r2, #1
 800c936:	601a      	str	r2, [r3, #0]
 800c938:	e000      	b.n	800c93c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c93a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	40010000 	.word	0x40010000
 800c950:	40000400 	.word	0x40000400
 800c954:	40000800 	.word	0x40000800
 800c958:	40000c00 	.word	0x40000c00
 800c95c:	40010400 	.word	0x40010400
 800c960:	40001800 	.word	0x40001800
 800c964:	40014000 	.word	0x40014000
 800c968:	00010007 	.word	0x00010007

0800c96c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d109      	bne.n	800c994 <HAL_TIM_OC_Start_IT+0x28>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c986:	b2db      	uxtb	r3, r3
 800c988:	2b01      	cmp	r3, #1
 800c98a:	bf14      	ite	ne
 800c98c:	2301      	movne	r3, #1
 800c98e:	2300      	moveq	r3, #0
 800c990:	b2db      	uxtb	r3, r3
 800c992:	e03c      	b.n	800ca0e <HAL_TIM_OC_Start_IT+0xa2>
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	2b04      	cmp	r3, #4
 800c998:	d109      	bne.n	800c9ae <HAL_TIM_OC_Start_IT+0x42>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	bf14      	ite	ne
 800c9a6:	2301      	movne	r3, #1
 800c9a8:	2300      	moveq	r3, #0
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	e02f      	b.n	800ca0e <HAL_TIM_OC_Start_IT+0xa2>
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	2b08      	cmp	r3, #8
 800c9b2:	d109      	bne.n	800c9c8 <HAL_TIM_OC_Start_IT+0x5c>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	bf14      	ite	ne
 800c9c0:	2301      	movne	r3, #1
 800c9c2:	2300      	moveq	r3, #0
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	e022      	b.n	800ca0e <HAL_TIM_OC_Start_IT+0xa2>
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	2b0c      	cmp	r3, #12
 800c9cc:	d109      	bne.n	800c9e2 <HAL_TIM_OC_Start_IT+0x76>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	bf14      	ite	ne
 800c9da:	2301      	movne	r3, #1
 800c9dc:	2300      	moveq	r3, #0
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	e015      	b.n	800ca0e <HAL_TIM_OC_Start_IT+0xa2>
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	2b10      	cmp	r3, #16
 800c9e6:	d109      	bne.n	800c9fc <HAL_TIM_OC_Start_IT+0x90>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	bf14      	ite	ne
 800c9f4:	2301      	movne	r3, #1
 800c9f6:	2300      	moveq	r3, #0
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	e008      	b.n	800ca0e <HAL_TIM_OC_Start_IT+0xa2>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	bf14      	ite	ne
 800ca08:	2301      	movne	r3, #1
 800ca0a:	2300      	moveq	r3, #0
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d001      	beq.n	800ca16 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ca12:	2301      	movs	r3, #1
 800ca14:	e0ec      	b.n	800cbf0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d104      	bne.n	800ca26 <HAL_TIM_OC_Start_IT+0xba>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2202      	movs	r2, #2
 800ca20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca24:	e023      	b.n	800ca6e <HAL_TIM_OC_Start_IT+0x102>
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	2b04      	cmp	r3, #4
 800ca2a:	d104      	bne.n	800ca36 <HAL_TIM_OC_Start_IT+0xca>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2202      	movs	r2, #2
 800ca30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca34:	e01b      	b.n	800ca6e <HAL_TIM_OC_Start_IT+0x102>
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	2b08      	cmp	r3, #8
 800ca3a:	d104      	bne.n	800ca46 <HAL_TIM_OC_Start_IT+0xda>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2202      	movs	r2, #2
 800ca40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca44:	e013      	b.n	800ca6e <HAL_TIM_OC_Start_IT+0x102>
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	2b0c      	cmp	r3, #12
 800ca4a:	d104      	bne.n	800ca56 <HAL_TIM_OC_Start_IT+0xea>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2202      	movs	r2, #2
 800ca50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca54:	e00b      	b.n	800ca6e <HAL_TIM_OC_Start_IT+0x102>
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	2b10      	cmp	r3, #16
 800ca5a:	d104      	bne.n	800ca66 <HAL_TIM_OC_Start_IT+0xfa>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2202      	movs	r2, #2
 800ca60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca64:	e003      	b.n	800ca6e <HAL_TIM_OC_Start_IT+0x102>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2202      	movs	r2, #2
 800ca6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2b0c      	cmp	r3, #12
 800ca72:	d841      	bhi.n	800caf8 <HAL_TIM_OC_Start_IT+0x18c>
 800ca74:	a201      	add	r2, pc, #4	; (adr r2, 800ca7c <HAL_TIM_OC_Start_IT+0x110>)
 800ca76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca7a:	bf00      	nop
 800ca7c:	0800cab1 	.word	0x0800cab1
 800ca80:	0800caf9 	.word	0x0800caf9
 800ca84:	0800caf9 	.word	0x0800caf9
 800ca88:	0800caf9 	.word	0x0800caf9
 800ca8c:	0800cac3 	.word	0x0800cac3
 800ca90:	0800caf9 	.word	0x0800caf9
 800ca94:	0800caf9 	.word	0x0800caf9
 800ca98:	0800caf9 	.word	0x0800caf9
 800ca9c:	0800cad5 	.word	0x0800cad5
 800caa0:	0800caf9 	.word	0x0800caf9
 800caa4:	0800caf9 	.word	0x0800caf9
 800caa8:	0800caf9 	.word	0x0800caf9
 800caac:	0800cae7 	.word	0x0800cae7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68da      	ldr	r2, [r3, #12]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f042 0202 	orr.w	r2, r2, #2
 800cabe:	60da      	str	r2, [r3, #12]
      break;
 800cac0:	e01d      	b.n	800cafe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	68da      	ldr	r2, [r3, #12]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f042 0204 	orr.w	r2, r2, #4
 800cad0:	60da      	str	r2, [r3, #12]
      break;
 800cad2:	e014      	b.n	800cafe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68da      	ldr	r2, [r3, #12]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f042 0208 	orr.w	r2, r2, #8
 800cae2:	60da      	str	r2, [r3, #12]
      break;
 800cae4:	e00b      	b.n	800cafe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68da      	ldr	r2, [r3, #12]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f042 0210 	orr.w	r2, r2, #16
 800caf4:	60da      	str	r2, [r3, #12]
      break;
 800caf6:	e002      	b.n	800cafe <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800caf8:	2301      	movs	r3, #1
 800cafa:	73fb      	strb	r3, [r7, #15]
      break;
 800cafc:	bf00      	nop
  }

  if (status == HAL_OK)
 800cafe:	7bfb      	ldrb	r3, [r7, #15]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d174      	bne.n	800cbee <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	6839      	ldr	r1, [r7, #0]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f001 fa27 	bl	800df60 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a38      	ldr	r2, [pc, #224]	; (800cbf8 <HAL_TIM_OC_Start_IT+0x28c>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d013      	beq.n	800cb44 <HAL_TIM_OC_Start_IT+0x1d8>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a36      	ldr	r2, [pc, #216]	; (800cbfc <HAL_TIM_OC_Start_IT+0x290>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d00e      	beq.n	800cb44 <HAL_TIM_OC_Start_IT+0x1d8>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a35      	ldr	r2, [pc, #212]	; (800cc00 <HAL_TIM_OC_Start_IT+0x294>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d009      	beq.n	800cb44 <HAL_TIM_OC_Start_IT+0x1d8>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a33      	ldr	r2, [pc, #204]	; (800cc04 <HAL_TIM_OC_Start_IT+0x298>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d004      	beq.n	800cb44 <HAL_TIM_OC_Start_IT+0x1d8>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a32      	ldr	r2, [pc, #200]	; (800cc08 <HAL_TIM_OC_Start_IT+0x29c>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d101      	bne.n	800cb48 <HAL_TIM_OC_Start_IT+0x1dc>
 800cb44:	2301      	movs	r3, #1
 800cb46:	e000      	b.n	800cb4a <HAL_TIM_OC_Start_IT+0x1de>
 800cb48:	2300      	movs	r3, #0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d007      	beq.n	800cb5e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a25      	ldr	r2, [pc, #148]	; (800cbf8 <HAL_TIM_OC_Start_IT+0x28c>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d022      	beq.n	800cbae <HAL_TIM_OC_Start_IT+0x242>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb70:	d01d      	beq.n	800cbae <HAL_TIM_OC_Start_IT+0x242>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a25      	ldr	r2, [pc, #148]	; (800cc0c <HAL_TIM_OC_Start_IT+0x2a0>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d018      	beq.n	800cbae <HAL_TIM_OC_Start_IT+0x242>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a23      	ldr	r2, [pc, #140]	; (800cc10 <HAL_TIM_OC_Start_IT+0x2a4>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d013      	beq.n	800cbae <HAL_TIM_OC_Start_IT+0x242>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a22      	ldr	r2, [pc, #136]	; (800cc14 <HAL_TIM_OC_Start_IT+0x2a8>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d00e      	beq.n	800cbae <HAL_TIM_OC_Start_IT+0x242>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a19      	ldr	r2, [pc, #100]	; (800cbfc <HAL_TIM_OC_Start_IT+0x290>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d009      	beq.n	800cbae <HAL_TIM_OC_Start_IT+0x242>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a1e      	ldr	r2, [pc, #120]	; (800cc18 <HAL_TIM_OC_Start_IT+0x2ac>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d004      	beq.n	800cbae <HAL_TIM_OC_Start_IT+0x242>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a15      	ldr	r2, [pc, #84]	; (800cc00 <HAL_TIM_OC_Start_IT+0x294>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d115      	bne.n	800cbda <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	689a      	ldr	r2, [r3, #8]
 800cbb4:	4b19      	ldr	r3, [pc, #100]	; (800cc1c <HAL_TIM_OC_Start_IT+0x2b0>)
 800cbb6:	4013      	ands	r3, r2
 800cbb8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	2b06      	cmp	r3, #6
 800cbbe:	d015      	beq.n	800cbec <HAL_TIM_OC_Start_IT+0x280>
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc6:	d011      	beq.n	800cbec <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f042 0201 	orr.w	r2, r2, #1
 800cbd6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbd8:	e008      	b.n	800cbec <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f042 0201 	orr.w	r2, r2, #1
 800cbe8:	601a      	str	r2, [r3, #0]
 800cbea:	e000      	b.n	800cbee <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	40010000 	.word	0x40010000
 800cbfc:	40010400 	.word	0x40010400
 800cc00:	40014000 	.word	0x40014000
 800cc04:	40014400 	.word	0x40014400
 800cc08:	40014800 	.word	0x40014800
 800cc0c:	40000400 	.word	0x40000400
 800cc10:	40000800 	.word	0x40000800
 800cc14:	40000c00 	.word	0x40000c00
 800cc18:	40001800 	.word	0x40001800
 800cc1c:	00010007 	.word	0x00010007

0800cc20 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	2b0c      	cmp	r3, #12
 800cc32:	d841      	bhi.n	800ccb8 <HAL_TIM_OC_Stop_IT+0x98>
 800cc34:	a201      	add	r2, pc, #4	; (adr r2, 800cc3c <HAL_TIM_OC_Stop_IT+0x1c>)
 800cc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3a:	bf00      	nop
 800cc3c:	0800cc71 	.word	0x0800cc71
 800cc40:	0800ccb9 	.word	0x0800ccb9
 800cc44:	0800ccb9 	.word	0x0800ccb9
 800cc48:	0800ccb9 	.word	0x0800ccb9
 800cc4c:	0800cc83 	.word	0x0800cc83
 800cc50:	0800ccb9 	.word	0x0800ccb9
 800cc54:	0800ccb9 	.word	0x0800ccb9
 800cc58:	0800ccb9 	.word	0x0800ccb9
 800cc5c:	0800cc95 	.word	0x0800cc95
 800cc60:	0800ccb9 	.word	0x0800ccb9
 800cc64:	0800ccb9 	.word	0x0800ccb9
 800cc68:	0800ccb9 	.word	0x0800ccb9
 800cc6c:	0800cca7 	.word	0x0800cca7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	68da      	ldr	r2, [r3, #12]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f022 0202 	bic.w	r2, r2, #2
 800cc7e:	60da      	str	r2, [r3, #12]
      break;
 800cc80:	e01d      	b.n	800ccbe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	68da      	ldr	r2, [r3, #12]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f022 0204 	bic.w	r2, r2, #4
 800cc90:	60da      	str	r2, [r3, #12]
      break;
 800cc92:	e014      	b.n	800ccbe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	68da      	ldr	r2, [r3, #12]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f022 0208 	bic.w	r2, r2, #8
 800cca2:	60da      	str	r2, [r3, #12]
      break;
 800cca4:	e00b      	b.n	800ccbe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	68da      	ldr	r2, [r3, #12]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f022 0210 	bic.w	r2, r2, #16
 800ccb4:	60da      	str	r2, [r3, #12]
      break;
 800ccb6:	e002      	b.n	800ccbe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	73fb      	strb	r3, [r7, #15]
      break;
 800ccbc:	bf00      	nop
  }

  if (status == HAL_OK)
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f040 8081 	bne.w	800cdc8 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2200      	movs	r2, #0
 800cccc:	6839      	ldr	r1, [r7, #0]
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f001 f946 	bl	800df60 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a3e      	ldr	r2, [pc, #248]	; (800cdd4 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d013      	beq.n	800cd06 <HAL_TIM_OC_Stop_IT+0xe6>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a3d      	ldr	r2, [pc, #244]	; (800cdd8 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d00e      	beq.n	800cd06 <HAL_TIM_OC_Stop_IT+0xe6>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a3b      	ldr	r2, [pc, #236]	; (800cddc <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d009      	beq.n	800cd06 <HAL_TIM_OC_Stop_IT+0xe6>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a3a      	ldr	r2, [pc, #232]	; (800cde0 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d004      	beq.n	800cd06 <HAL_TIM_OC_Stop_IT+0xe6>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a38      	ldr	r2, [pc, #224]	; (800cde4 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d101      	bne.n	800cd0a <HAL_TIM_OC_Stop_IT+0xea>
 800cd06:	2301      	movs	r3, #1
 800cd08:	e000      	b.n	800cd0c <HAL_TIM_OC_Stop_IT+0xec>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d017      	beq.n	800cd40 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6a1a      	ldr	r2, [r3, #32]
 800cd16:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd1a:	4013      	ands	r3, r2
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d10f      	bne.n	800cd40 <HAL_TIM_OC_Stop_IT+0x120>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	6a1a      	ldr	r2, [r3, #32]
 800cd26:	f240 4344 	movw	r3, #1092	; 0x444
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d107      	bne.n	800cd40 <HAL_TIM_OC_Stop_IT+0x120>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd3e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	6a1a      	ldr	r2, [r3, #32]
 800cd46:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10f      	bne.n	800cd70 <HAL_TIM_OC_Stop_IT+0x150>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	6a1a      	ldr	r2, [r3, #32]
 800cd56:	f240 4344 	movw	r3, #1092	; 0x444
 800cd5a:	4013      	ands	r3, r2
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d107      	bne.n	800cd70 <HAL_TIM_OC_Stop_IT+0x150>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f022 0201 	bic.w	r2, r2, #1
 800cd6e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d104      	bne.n	800cd80 <HAL_TIM_OC_Stop_IT+0x160>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd7e:	e023      	b.n	800cdc8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	2b04      	cmp	r3, #4
 800cd84:	d104      	bne.n	800cd90 <HAL_TIM_OC_Stop_IT+0x170>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd8e:	e01b      	b.n	800cdc8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	2b08      	cmp	r3, #8
 800cd94:	d104      	bne.n	800cda0 <HAL_TIM_OC_Stop_IT+0x180>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd9e:	e013      	b.n	800cdc8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	2b0c      	cmp	r3, #12
 800cda4:	d104      	bne.n	800cdb0 <HAL_TIM_OC_Stop_IT+0x190>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2201      	movs	r2, #1
 800cdaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cdae:	e00b      	b.n	800cdc8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	2b10      	cmp	r3, #16
 800cdb4:	d104      	bne.n	800cdc0 <HAL_TIM_OC_Stop_IT+0x1a0>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2201      	movs	r2, #1
 800cdba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cdbe:	e003      	b.n	800cdc8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800cdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	40010000 	.word	0x40010000
 800cdd8:	40010400 	.word	0x40010400
 800cddc:	40014000 	.word	0x40014000
 800cde0:	40014400 	.word	0x40014400
 800cde4:	40014800 	.word	0x40014800

0800cde8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d101      	bne.n	800cdfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e049      	b.n	800ce8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce00:	b2db      	uxtb	r3, r3
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d106      	bne.n	800ce14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f7f5 f9d8 	bl	80021c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2202      	movs	r2, #2
 800ce18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	3304      	adds	r3, #4
 800ce24:	4619      	mov	r1, r3
 800ce26:	4610      	mov	r0, r2
 800ce28:	f000 fc80 	bl	800d72c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2201      	movs	r2, #1
 800ce58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2201      	movs	r2, #1
 800ce78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2201      	movs	r2, #1
 800ce88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce8c:	2300      	movs	r3, #0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
	...

0800ce98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d109      	bne.n	800cebc <HAL_TIM_PWM_Start+0x24>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	bf14      	ite	ne
 800ceb4:	2301      	movne	r3, #1
 800ceb6:	2300      	moveq	r3, #0
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	e03c      	b.n	800cf36 <HAL_TIM_PWM_Start+0x9e>
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	2b04      	cmp	r3, #4
 800cec0:	d109      	bne.n	800ced6 <HAL_TIM_PWM_Start+0x3e>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	bf14      	ite	ne
 800cece:	2301      	movne	r3, #1
 800ced0:	2300      	moveq	r3, #0
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	e02f      	b.n	800cf36 <HAL_TIM_PWM_Start+0x9e>
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	2b08      	cmp	r3, #8
 800ceda:	d109      	bne.n	800cef0 <HAL_TIM_PWM_Start+0x58>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	bf14      	ite	ne
 800cee8:	2301      	movne	r3, #1
 800ceea:	2300      	moveq	r3, #0
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	e022      	b.n	800cf36 <HAL_TIM_PWM_Start+0x9e>
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	2b0c      	cmp	r3, #12
 800cef4:	d109      	bne.n	800cf0a <HAL_TIM_PWM_Start+0x72>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	bf14      	ite	ne
 800cf02:	2301      	movne	r3, #1
 800cf04:	2300      	moveq	r3, #0
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	e015      	b.n	800cf36 <HAL_TIM_PWM_Start+0x9e>
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	2b10      	cmp	r3, #16
 800cf0e:	d109      	bne.n	800cf24 <HAL_TIM_PWM_Start+0x8c>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	bf14      	ite	ne
 800cf1c:	2301      	movne	r3, #1
 800cf1e:	2300      	moveq	r3, #0
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	e008      	b.n	800cf36 <HAL_TIM_PWM_Start+0x9e>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	bf14      	ite	ne
 800cf30:	2301      	movne	r3, #1
 800cf32:	2300      	moveq	r3, #0
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d001      	beq.n	800cf3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e0a1      	b.n	800d082 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d104      	bne.n	800cf4e <HAL_TIM_PWM_Start+0xb6>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2202      	movs	r2, #2
 800cf48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf4c:	e023      	b.n	800cf96 <HAL_TIM_PWM_Start+0xfe>
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	2b04      	cmp	r3, #4
 800cf52:	d104      	bne.n	800cf5e <HAL_TIM_PWM_Start+0xc6>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2202      	movs	r2, #2
 800cf58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf5c:	e01b      	b.n	800cf96 <HAL_TIM_PWM_Start+0xfe>
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	2b08      	cmp	r3, #8
 800cf62:	d104      	bne.n	800cf6e <HAL_TIM_PWM_Start+0xd6>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2202      	movs	r2, #2
 800cf68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf6c:	e013      	b.n	800cf96 <HAL_TIM_PWM_Start+0xfe>
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b0c      	cmp	r3, #12
 800cf72:	d104      	bne.n	800cf7e <HAL_TIM_PWM_Start+0xe6>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2202      	movs	r2, #2
 800cf78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf7c:	e00b      	b.n	800cf96 <HAL_TIM_PWM_Start+0xfe>
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	2b10      	cmp	r3, #16
 800cf82:	d104      	bne.n	800cf8e <HAL_TIM_PWM_Start+0xf6>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2202      	movs	r2, #2
 800cf88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf8c:	e003      	b.n	800cf96 <HAL_TIM_PWM_Start+0xfe>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2202      	movs	r2, #2
 800cf92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	6839      	ldr	r1, [r7, #0]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f000 ffde 	bl	800df60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a38      	ldr	r2, [pc, #224]	; (800d08c <HAL_TIM_PWM_Start+0x1f4>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d013      	beq.n	800cfd6 <HAL_TIM_PWM_Start+0x13e>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4a37      	ldr	r2, [pc, #220]	; (800d090 <HAL_TIM_PWM_Start+0x1f8>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d00e      	beq.n	800cfd6 <HAL_TIM_PWM_Start+0x13e>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4a35      	ldr	r2, [pc, #212]	; (800d094 <HAL_TIM_PWM_Start+0x1fc>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d009      	beq.n	800cfd6 <HAL_TIM_PWM_Start+0x13e>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a34      	ldr	r2, [pc, #208]	; (800d098 <HAL_TIM_PWM_Start+0x200>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d004      	beq.n	800cfd6 <HAL_TIM_PWM_Start+0x13e>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a32      	ldr	r2, [pc, #200]	; (800d09c <HAL_TIM_PWM_Start+0x204>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d101      	bne.n	800cfda <HAL_TIM_PWM_Start+0x142>
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e000      	b.n	800cfdc <HAL_TIM_PWM_Start+0x144>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d007      	beq.n	800cff0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cfee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a25      	ldr	r2, [pc, #148]	; (800d08c <HAL_TIM_PWM_Start+0x1f4>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d022      	beq.n	800d040 <HAL_TIM_PWM_Start+0x1a8>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d002:	d01d      	beq.n	800d040 <HAL_TIM_PWM_Start+0x1a8>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a25      	ldr	r2, [pc, #148]	; (800d0a0 <HAL_TIM_PWM_Start+0x208>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d018      	beq.n	800d040 <HAL_TIM_PWM_Start+0x1a8>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a24      	ldr	r2, [pc, #144]	; (800d0a4 <HAL_TIM_PWM_Start+0x20c>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d013      	beq.n	800d040 <HAL_TIM_PWM_Start+0x1a8>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a22      	ldr	r2, [pc, #136]	; (800d0a8 <HAL_TIM_PWM_Start+0x210>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d00e      	beq.n	800d040 <HAL_TIM_PWM_Start+0x1a8>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4a1a      	ldr	r2, [pc, #104]	; (800d090 <HAL_TIM_PWM_Start+0x1f8>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d009      	beq.n	800d040 <HAL_TIM_PWM_Start+0x1a8>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a1e      	ldr	r2, [pc, #120]	; (800d0ac <HAL_TIM_PWM_Start+0x214>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d004      	beq.n	800d040 <HAL_TIM_PWM_Start+0x1a8>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a16      	ldr	r2, [pc, #88]	; (800d094 <HAL_TIM_PWM_Start+0x1fc>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d115      	bne.n	800d06c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	689a      	ldr	r2, [r3, #8]
 800d046:	4b1a      	ldr	r3, [pc, #104]	; (800d0b0 <HAL_TIM_PWM_Start+0x218>)
 800d048:	4013      	ands	r3, r2
 800d04a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2b06      	cmp	r3, #6
 800d050:	d015      	beq.n	800d07e <HAL_TIM_PWM_Start+0x1e6>
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d058:	d011      	beq.n	800d07e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f042 0201 	orr.w	r2, r2, #1
 800d068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d06a:	e008      	b.n	800d07e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f042 0201 	orr.w	r2, r2, #1
 800d07a:	601a      	str	r2, [r3, #0]
 800d07c:	e000      	b.n	800d080 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d07e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	40010000 	.word	0x40010000
 800d090:	40010400 	.word	0x40010400
 800d094:	40014000 	.word	0x40014000
 800d098:	40014400 	.word	0x40014400
 800d09c:	40014800 	.word	0x40014800
 800d0a0:	40000400 	.word	0x40000400
 800d0a4:	40000800 	.word	0x40000800
 800d0a8:	40000c00 	.word	0x40000c00
 800d0ac:	40001800 	.word	0x40001800
 800d0b0:	00010007 	.word	0x00010007

0800d0b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	f003 0302 	and.w	r3, r3, #2
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d020      	beq.n	800d118 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f003 0302 	and.w	r3, r3, #2
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d01b      	beq.n	800d118 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f06f 0202 	mvn.w	r2, #2
 800d0e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	699b      	ldr	r3, [r3, #24]
 800d0f6:	f003 0303 	and.w	r3, r3, #3
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d003      	beq.n	800d106 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 faf6 	bl	800d6f0 <HAL_TIM_IC_CaptureCallback>
 800d104:	e005      	b.n	800d112 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f7f3 fd48 	bl	8000b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 faf9 	bl	800d704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	f003 0304 	and.w	r3, r3, #4
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d020      	beq.n	800d164 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f003 0304 	and.w	r3, r3, #4
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d01b      	beq.n	800d164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f06f 0204 	mvn.w	r2, #4
 800d134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2202      	movs	r2, #2
 800d13a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	699b      	ldr	r3, [r3, #24]
 800d142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d146:	2b00      	cmp	r3, #0
 800d148:	d003      	beq.n	800d152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fad0 	bl	800d6f0 <HAL_TIM_IC_CaptureCallback>
 800d150:	e005      	b.n	800d15e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f7f3 fd22 	bl	8000b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 fad3 	bl	800d704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	f003 0308 	and.w	r3, r3, #8
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d020      	beq.n	800d1b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f003 0308 	and.w	r3, r3, #8
 800d174:	2b00      	cmp	r3, #0
 800d176:	d01b      	beq.n	800d1b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f06f 0208 	mvn.w	r2, #8
 800d180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2204      	movs	r2, #4
 800d186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	69db      	ldr	r3, [r3, #28]
 800d18e:	f003 0303 	and.w	r3, r3, #3
 800d192:	2b00      	cmp	r3, #0
 800d194:	d003      	beq.n	800d19e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 faaa 	bl	800d6f0 <HAL_TIM_IC_CaptureCallback>
 800d19c:	e005      	b.n	800d1aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f7f3 fcfc 	bl	8000b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 faad 	bl	800d704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	f003 0310 	and.w	r3, r3, #16
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d020      	beq.n	800d1fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f003 0310 	and.w	r3, r3, #16
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d01b      	beq.n	800d1fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f06f 0210 	mvn.w	r2, #16
 800d1cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2208      	movs	r2, #8
 800d1d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	69db      	ldr	r3, [r3, #28]
 800d1da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d003      	beq.n	800d1ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 fa84 	bl	800d6f0 <HAL_TIM_IC_CaptureCallback>
 800d1e8:	e005      	b.n	800d1f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7f3 fcd6 	bl	8000b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fa87 	bl	800d704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	f003 0301 	and.w	r3, r3, #1
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00c      	beq.n	800d220 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f003 0301 	and.w	r3, r3, #1
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d007      	beq.n	800d220 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f06f 0201 	mvn.w	r2, #1
 800d218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 fa5e 	bl	800d6dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d226:	2b00      	cmp	r3, #0
 800d228:	d104      	bne.n	800d234 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d230:	2b00      	cmp	r3, #0
 800d232:	d00c      	beq.n	800d24e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d007      	beq.n	800d24e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 ffc5 	bl	800e1d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d254:	2b00      	cmp	r3, #0
 800d256:	d00c      	beq.n	800d272 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d007      	beq.n	800d272 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d26a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 ffbd 	bl	800e1ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d00c      	beq.n	800d296 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d282:	2b00      	cmp	r3, #0
 800d284:	d007      	beq.n	800d296 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d28e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 fa41 	bl	800d718 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	f003 0320 	and.w	r3, r3, #32
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d00c      	beq.n	800d2ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f003 0320 	and.w	r3, r3, #32
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d007      	beq.n	800d2ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f06f 0220 	mvn.w	r2, #32
 800d2b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 ff85 	bl	800e1c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d2ba:	bf00      	nop
 800d2bc:	3710      	adds	r7, #16
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
	...

0800d2c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d101      	bne.n	800d2e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d2de:	2302      	movs	r3, #2
 800d2e0:	e0ff      	b.n	800d4e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b14      	cmp	r3, #20
 800d2ee:	f200 80f0 	bhi.w	800d4d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d2f2:	a201      	add	r2, pc, #4	; (adr r2, 800d2f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f8:	0800d34d 	.word	0x0800d34d
 800d2fc:	0800d4d3 	.word	0x0800d4d3
 800d300:	0800d4d3 	.word	0x0800d4d3
 800d304:	0800d4d3 	.word	0x0800d4d3
 800d308:	0800d38d 	.word	0x0800d38d
 800d30c:	0800d4d3 	.word	0x0800d4d3
 800d310:	0800d4d3 	.word	0x0800d4d3
 800d314:	0800d4d3 	.word	0x0800d4d3
 800d318:	0800d3cf 	.word	0x0800d3cf
 800d31c:	0800d4d3 	.word	0x0800d4d3
 800d320:	0800d4d3 	.word	0x0800d4d3
 800d324:	0800d4d3 	.word	0x0800d4d3
 800d328:	0800d40f 	.word	0x0800d40f
 800d32c:	0800d4d3 	.word	0x0800d4d3
 800d330:	0800d4d3 	.word	0x0800d4d3
 800d334:	0800d4d3 	.word	0x0800d4d3
 800d338:	0800d451 	.word	0x0800d451
 800d33c:	0800d4d3 	.word	0x0800d4d3
 800d340:	0800d4d3 	.word	0x0800d4d3
 800d344:	0800d4d3 	.word	0x0800d4d3
 800d348:	0800d491 	.word	0x0800d491
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	68b9      	ldr	r1, [r7, #8]
 800d352:	4618      	mov	r0, r3
 800d354:	f000 fa90 	bl	800d878 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	699a      	ldr	r2, [r3, #24]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f042 0208 	orr.w	r2, r2, #8
 800d366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	699a      	ldr	r2, [r3, #24]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f022 0204 	bic.w	r2, r2, #4
 800d376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6999      	ldr	r1, [r3, #24]
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	691a      	ldr	r2, [r3, #16]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	430a      	orrs	r2, r1
 800d388:	619a      	str	r2, [r3, #24]
      break;
 800d38a:	e0a5      	b.n	800d4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	68b9      	ldr	r1, [r7, #8]
 800d392:	4618      	mov	r0, r3
 800d394:	f000 fb00 	bl	800d998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	699a      	ldr	r2, [r3, #24]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	699a      	ldr	r2, [r3, #24]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	6999      	ldr	r1, [r3, #24]
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	021a      	lsls	r2, r3, #8
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	430a      	orrs	r2, r1
 800d3ca:	619a      	str	r2, [r3, #24]
      break;
 800d3cc:	e084      	b.n	800d4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	68b9      	ldr	r1, [r7, #8]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f000 fb69 	bl	800daac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	69da      	ldr	r2, [r3, #28]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f042 0208 	orr.w	r2, r2, #8
 800d3e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	69da      	ldr	r2, [r3, #28]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f022 0204 	bic.w	r2, r2, #4
 800d3f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	69d9      	ldr	r1, [r3, #28]
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	691a      	ldr	r2, [r3, #16]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	430a      	orrs	r2, r1
 800d40a:	61da      	str	r2, [r3, #28]
      break;
 800d40c:	e064      	b.n	800d4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	68b9      	ldr	r1, [r7, #8]
 800d414:	4618      	mov	r0, r3
 800d416:	f000 fbd1 	bl	800dbbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	69da      	ldr	r2, [r3, #28]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	69da      	ldr	r2, [r3, #28]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	69d9      	ldr	r1, [r3, #28]
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	691b      	ldr	r3, [r3, #16]
 800d444:	021a      	lsls	r2, r3, #8
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	430a      	orrs	r2, r1
 800d44c:	61da      	str	r2, [r3, #28]
      break;
 800d44e:	e043      	b.n	800d4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	68b9      	ldr	r1, [r7, #8]
 800d456:	4618      	mov	r0, r3
 800d458:	f000 fc1a 	bl	800dc90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f042 0208 	orr.w	r2, r2, #8
 800d46a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f022 0204 	bic.w	r2, r2, #4
 800d47a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	691a      	ldr	r2, [r3, #16]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	430a      	orrs	r2, r1
 800d48c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d48e:	e023      	b.n	800d4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	68b9      	ldr	r1, [r7, #8]
 800d496:	4618      	mov	r0, r3
 800d498:	f000 fc5e 	bl	800dd58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	691b      	ldr	r3, [r3, #16]
 800d4c6:	021a      	lsls	r2, r3, #8
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	430a      	orrs	r2, r1
 800d4ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d4d0:	e002      	b.n	800d4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	75fb      	strb	r3, [r7, #23]
      break;
 800d4d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d4e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3718      	adds	r7, #24
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop

0800d4ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d500:	2b01      	cmp	r3, #1
 800d502:	d101      	bne.n	800d508 <HAL_TIM_ConfigClockSource+0x1c>
 800d504:	2302      	movs	r3, #2
 800d506:	e0dc      	b.n	800d6c2 <HAL_TIM_ConfigClockSource+0x1d6>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2201      	movs	r2, #1
 800d50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2202      	movs	r2, #2
 800d514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d520:	68ba      	ldr	r2, [r7, #8]
 800d522:	4b6a      	ldr	r3, [pc, #424]	; (800d6cc <HAL_TIM_ConfigClockSource+0x1e0>)
 800d524:	4013      	ands	r3, r2
 800d526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d52e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	68ba      	ldr	r2, [r7, #8]
 800d536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a64      	ldr	r2, [pc, #400]	; (800d6d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	f000 80a9 	beq.w	800d696 <HAL_TIM_ConfigClockSource+0x1aa>
 800d544:	4a62      	ldr	r2, [pc, #392]	; (800d6d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d546:	4293      	cmp	r3, r2
 800d548:	f200 80ae 	bhi.w	800d6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d54c:	4a61      	ldr	r2, [pc, #388]	; (800d6d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	f000 80a1 	beq.w	800d696 <HAL_TIM_ConfigClockSource+0x1aa>
 800d554:	4a5f      	ldr	r2, [pc, #380]	; (800d6d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d556:	4293      	cmp	r3, r2
 800d558:	f200 80a6 	bhi.w	800d6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d55c:	4a5e      	ldr	r2, [pc, #376]	; (800d6d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	f000 8099 	beq.w	800d696 <HAL_TIM_ConfigClockSource+0x1aa>
 800d564:	4a5c      	ldr	r2, [pc, #368]	; (800d6d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d566:	4293      	cmp	r3, r2
 800d568:	f200 809e 	bhi.w	800d6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d56c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d570:	f000 8091 	beq.w	800d696 <HAL_TIM_ConfigClockSource+0x1aa>
 800d574:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d578:	f200 8096 	bhi.w	800d6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d57c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d580:	f000 8089 	beq.w	800d696 <HAL_TIM_ConfigClockSource+0x1aa>
 800d584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d588:	f200 808e 	bhi.w	800d6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d58c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d590:	d03e      	beq.n	800d610 <HAL_TIM_ConfigClockSource+0x124>
 800d592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d596:	f200 8087 	bhi.w	800d6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d59a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d59e:	f000 8086 	beq.w	800d6ae <HAL_TIM_ConfigClockSource+0x1c2>
 800d5a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5a6:	d87f      	bhi.n	800d6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5a8:	2b70      	cmp	r3, #112	; 0x70
 800d5aa:	d01a      	beq.n	800d5e2 <HAL_TIM_ConfigClockSource+0xf6>
 800d5ac:	2b70      	cmp	r3, #112	; 0x70
 800d5ae:	d87b      	bhi.n	800d6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5b0:	2b60      	cmp	r3, #96	; 0x60
 800d5b2:	d050      	beq.n	800d656 <HAL_TIM_ConfigClockSource+0x16a>
 800d5b4:	2b60      	cmp	r3, #96	; 0x60
 800d5b6:	d877      	bhi.n	800d6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5b8:	2b50      	cmp	r3, #80	; 0x50
 800d5ba:	d03c      	beq.n	800d636 <HAL_TIM_ConfigClockSource+0x14a>
 800d5bc:	2b50      	cmp	r3, #80	; 0x50
 800d5be:	d873      	bhi.n	800d6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5c0:	2b40      	cmp	r3, #64	; 0x40
 800d5c2:	d058      	beq.n	800d676 <HAL_TIM_ConfigClockSource+0x18a>
 800d5c4:	2b40      	cmp	r3, #64	; 0x40
 800d5c6:	d86f      	bhi.n	800d6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5c8:	2b30      	cmp	r3, #48	; 0x30
 800d5ca:	d064      	beq.n	800d696 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5cc:	2b30      	cmp	r3, #48	; 0x30
 800d5ce:	d86b      	bhi.n	800d6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5d0:	2b20      	cmp	r3, #32
 800d5d2:	d060      	beq.n	800d696 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5d4:	2b20      	cmp	r3, #32
 800d5d6:	d867      	bhi.n	800d6a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d05c      	beq.n	800d696 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5dc:	2b10      	cmp	r3, #16
 800d5de:	d05a      	beq.n	800d696 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5e0:	e062      	b.n	800d6a8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6818      	ldr	r0, [r3, #0]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	6899      	ldr	r1, [r3, #8]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	685a      	ldr	r2, [r3, #4]
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	f000 fc95 	bl	800df20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	68ba      	ldr	r2, [r7, #8]
 800d60c:	609a      	str	r2, [r3, #8]
      break;
 800d60e:	e04f      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6818      	ldr	r0, [r3, #0]
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	6899      	ldr	r1, [r3, #8]
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	685a      	ldr	r2, [r3, #4]
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	f000 fc7e 	bl	800df20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	689a      	ldr	r2, [r3, #8]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d632:	609a      	str	r2, [r3, #8]
      break;
 800d634:	e03c      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6818      	ldr	r0, [r3, #0]
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	6859      	ldr	r1, [r3, #4]
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	461a      	mov	r2, r3
 800d644:	f000 fbee 	bl	800de24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2150      	movs	r1, #80	; 0x50
 800d64e:	4618      	mov	r0, r3
 800d650:	f000 fc48 	bl	800dee4 <TIM_ITRx_SetConfig>
      break;
 800d654:	e02c      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6818      	ldr	r0, [r3, #0]
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	6859      	ldr	r1, [r3, #4]
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	461a      	mov	r2, r3
 800d664:	f000 fc0d 	bl	800de82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2160      	movs	r1, #96	; 0x60
 800d66e:	4618      	mov	r0, r3
 800d670:	f000 fc38 	bl	800dee4 <TIM_ITRx_SetConfig>
      break;
 800d674:	e01c      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6818      	ldr	r0, [r3, #0]
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	6859      	ldr	r1, [r3, #4]
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	461a      	mov	r2, r3
 800d684:	f000 fbce 	bl	800de24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2140      	movs	r1, #64	; 0x40
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 fc28 	bl	800dee4 <TIM_ITRx_SetConfig>
      break;
 800d694:	e00c      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4619      	mov	r1, r3
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	f000 fc1f 	bl	800dee4 <TIM_ITRx_SetConfig>
      break;
 800d6a6:	e003      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d6ac:	e000      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d6ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	ffceff88 	.word	0xffceff88
 800d6d0:	00100040 	.word	0x00100040
 800d6d4:	00100030 	.word	0x00100030
 800d6d8:	00100020 	.word	0x00100020

0800d6dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d6e4:	bf00      	nop
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d6f8:	bf00      	nop
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d704:	b480      	push	{r7}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d70c:	bf00      	nop
 800d70e:	370c      	adds	r7, #12
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr

0800d718 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d718:	b480      	push	{r7}
 800d71a:	b083      	sub	sp, #12
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d720:	bf00      	nop
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b085      	sub	sp, #20
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	4a46      	ldr	r2, [pc, #280]	; (800d858 <TIM_Base_SetConfig+0x12c>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d013      	beq.n	800d76c <TIM_Base_SetConfig+0x40>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d74a:	d00f      	beq.n	800d76c <TIM_Base_SetConfig+0x40>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	4a43      	ldr	r2, [pc, #268]	; (800d85c <TIM_Base_SetConfig+0x130>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d00b      	beq.n	800d76c <TIM_Base_SetConfig+0x40>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	4a42      	ldr	r2, [pc, #264]	; (800d860 <TIM_Base_SetConfig+0x134>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d007      	beq.n	800d76c <TIM_Base_SetConfig+0x40>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4a41      	ldr	r2, [pc, #260]	; (800d864 <TIM_Base_SetConfig+0x138>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d003      	beq.n	800d76c <TIM_Base_SetConfig+0x40>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	4a40      	ldr	r2, [pc, #256]	; (800d868 <TIM_Base_SetConfig+0x13c>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d108      	bne.n	800d77e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4a35      	ldr	r2, [pc, #212]	; (800d858 <TIM_Base_SetConfig+0x12c>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d01f      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d78c:	d01b      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4a32      	ldr	r2, [pc, #200]	; (800d85c <TIM_Base_SetConfig+0x130>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d017      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4a31      	ldr	r2, [pc, #196]	; (800d860 <TIM_Base_SetConfig+0x134>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d013      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4a30      	ldr	r2, [pc, #192]	; (800d864 <TIM_Base_SetConfig+0x138>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d00f      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	4a2f      	ldr	r2, [pc, #188]	; (800d868 <TIM_Base_SetConfig+0x13c>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d00b      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	4a2e      	ldr	r2, [pc, #184]	; (800d86c <TIM_Base_SetConfig+0x140>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d007      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	4a2d      	ldr	r2, [pc, #180]	; (800d870 <TIM_Base_SetConfig+0x144>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d003      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	4a2c      	ldr	r2, [pc, #176]	; (800d874 <TIM_Base_SetConfig+0x148>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d108      	bne.n	800d7d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	68fa      	ldr	r2, [r7, #12]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	695b      	ldr	r3, [r3, #20]
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	689a      	ldr	r2, [r3, #8]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	4a16      	ldr	r2, [pc, #88]	; (800d858 <TIM_Base_SetConfig+0x12c>)
 800d800:	4293      	cmp	r3, r2
 800d802:	d00f      	beq.n	800d824 <TIM_Base_SetConfig+0xf8>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	4a18      	ldr	r2, [pc, #96]	; (800d868 <TIM_Base_SetConfig+0x13c>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d00b      	beq.n	800d824 <TIM_Base_SetConfig+0xf8>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	4a17      	ldr	r2, [pc, #92]	; (800d86c <TIM_Base_SetConfig+0x140>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d007      	beq.n	800d824 <TIM_Base_SetConfig+0xf8>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	4a16      	ldr	r2, [pc, #88]	; (800d870 <TIM_Base_SetConfig+0x144>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d003      	beq.n	800d824 <TIM_Base_SetConfig+0xf8>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	4a15      	ldr	r2, [pc, #84]	; (800d874 <TIM_Base_SetConfig+0x148>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d103      	bne.n	800d82c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	691a      	ldr	r2, [r3, #16]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	691b      	ldr	r3, [r3, #16]
 800d836:	f003 0301 	and.w	r3, r3, #1
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d105      	bne.n	800d84a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	691b      	ldr	r3, [r3, #16]
 800d842:	f023 0201 	bic.w	r2, r3, #1
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	611a      	str	r2, [r3, #16]
  }
}
 800d84a:	bf00      	nop
 800d84c:	3714      	adds	r7, #20
 800d84e:	46bd      	mov	sp, r7
 800d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d854:	4770      	bx	lr
 800d856:	bf00      	nop
 800d858:	40010000 	.word	0x40010000
 800d85c:	40000400 	.word	0x40000400
 800d860:	40000800 	.word	0x40000800
 800d864:	40000c00 	.word	0x40000c00
 800d868:	40010400 	.word	0x40010400
 800d86c:	40014000 	.word	0x40014000
 800d870:	40014400 	.word	0x40014400
 800d874:	40014800 	.word	0x40014800

0800d878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d878:	b480      	push	{r7}
 800d87a:	b087      	sub	sp, #28
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6a1b      	ldr	r3, [r3, #32]
 800d886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6a1b      	ldr	r3, [r3, #32]
 800d88c:	f023 0201 	bic.w	r2, r3, #1
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	699b      	ldr	r3, [r3, #24]
 800d89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	4b37      	ldr	r3, [pc, #220]	; (800d980 <TIM_OC1_SetConfig+0x108>)
 800d8a4:	4013      	ands	r3, r2
 800d8a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f023 0303 	bic.w	r3, r3, #3
 800d8ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	68fa      	ldr	r2, [r7, #12]
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	f023 0302 	bic.w	r3, r3, #2
 800d8c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	697a      	ldr	r2, [r7, #20]
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a2d      	ldr	r2, [pc, #180]	; (800d984 <TIM_OC1_SetConfig+0x10c>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d00f      	beq.n	800d8f4 <TIM_OC1_SetConfig+0x7c>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	4a2c      	ldr	r2, [pc, #176]	; (800d988 <TIM_OC1_SetConfig+0x110>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d00b      	beq.n	800d8f4 <TIM_OC1_SetConfig+0x7c>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4a2b      	ldr	r2, [pc, #172]	; (800d98c <TIM_OC1_SetConfig+0x114>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d007      	beq.n	800d8f4 <TIM_OC1_SetConfig+0x7c>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	4a2a      	ldr	r2, [pc, #168]	; (800d990 <TIM_OC1_SetConfig+0x118>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d003      	beq.n	800d8f4 <TIM_OC1_SetConfig+0x7c>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4a29      	ldr	r2, [pc, #164]	; (800d994 <TIM_OC1_SetConfig+0x11c>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d10c      	bne.n	800d90e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	f023 0308 	bic.w	r3, r3, #8
 800d8fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	697a      	ldr	r2, [r7, #20]
 800d902:	4313      	orrs	r3, r2
 800d904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	f023 0304 	bic.w	r3, r3, #4
 800d90c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	4a1c      	ldr	r2, [pc, #112]	; (800d984 <TIM_OC1_SetConfig+0x10c>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d00f      	beq.n	800d936 <TIM_OC1_SetConfig+0xbe>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	4a1b      	ldr	r2, [pc, #108]	; (800d988 <TIM_OC1_SetConfig+0x110>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d00b      	beq.n	800d936 <TIM_OC1_SetConfig+0xbe>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4a1a      	ldr	r2, [pc, #104]	; (800d98c <TIM_OC1_SetConfig+0x114>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d007      	beq.n	800d936 <TIM_OC1_SetConfig+0xbe>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4a19      	ldr	r2, [pc, #100]	; (800d990 <TIM_OC1_SetConfig+0x118>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d003      	beq.n	800d936 <TIM_OC1_SetConfig+0xbe>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	4a18      	ldr	r2, [pc, #96]	; (800d994 <TIM_OC1_SetConfig+0x11c>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d111      	bne.n	800d95a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d93c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	695b      	ldr	r3, [r3, #20]
 800d94a:	693a      	ldr	r2, [r7, #16]
 800d94c:	4313      	orrs	r3, r2
 800d94e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	699b      	ldr	r3, [r3, #24]
 800d954:	693a      	ldr	r2, [r7, #16]
 800d956:	4313      	orrs	r3, r2
 800d958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	693a      	ldr	r2, [r7, #16]
 800d95e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	68fa      	ldr	r2, [r7, #12]
 800d964:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	685a      	ldr	r2, [r3, #4]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	697a      	ldr	r2, [r7, #20]
 800d972:	621a      	str	r2, [r3, #32]
}
 800d974:	bf00      	nop
 800d976:	371c      	adds	r7, #28
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr
 800d980:	fffeff8f 	.word	0xfffeff8f
 800d984:	40010000 	.word	0x40010000
 800d988:	40010400 	.word	0x40010400
 800d98c:	40014000 	.word	0x40014000
 800d990:	40014400 	.word	0x40014400
 800d994:	40014800 	.word	0x40014800

0800d998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d998:	b480      	push	{r7}
 800d99a:	b087      	sub	sp, #28
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6a1b      	ldr	r3, [r3, #32]
 800d9a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6a1b      	ldr	r3, [r3, #32]
 800d9ac:	f023 0210 	bic.w	r2, r3, #16
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	699b      	ldr	r3, [r3, #24]
 800d9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	4b34      	ldr	r3, [pc, #208]	; (800da94 <TIM_OC2_SetConfig+0xfc>)
 800d9c4:	4013      	ands	r3, r2
 800d9c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	021b      	lsls	r3, r3, #8
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	f023 0320 	bic.w	r3, r3, #32
 800d9e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	011b      	lsls	r3, r3, #4
 800d9ea:	697a      	ldr	r2, [r7, #20]
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a29      	ldr	r2, [pc, #164]	; (800da98 <TIM_OC2_SetConfig+0x100>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d003      	beq.n	800da00 <TIM_OC2_SetConfig+0x68>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4a28      	ldr	r2, [pc, #160]	; (800da9c <TIM_OC2_SetConfig+0x104>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d10d      	bne.n	800da1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	011b      	lsls	r3, r3, #4
 800da0e:	697a      	ldr	r2, [r7, #20]
 800da10:	4313      	orrs	r3, r2
 800da12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	4a1e      	ldr	r2, [pc, #120]	; (800da98 <TIM_OC2_SetConfig+0x100>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d00f      	beq.n	800da44 <TIM_OC2_SetConfig+0xac>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	4a1d      	ldr	r2, [pc, #116]	; (800da9c <TIM_OC2_SetConfig+0x104>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d00b      	beq.n	800da44 <TIM_OC2_SetConfig+0xac>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4a1c      	ldr	r2, [pc, #112]	; (800daa0 <TIM_OC2_SetConfig+0x108>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d007      	beq.n	800da44 <TIM_OC2_SetConfig+0xac>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4a1b      	ldr	r2, [pc, #108]	; (800daa4 <TIM_OC2_SetConfig+0x10c>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d003      	beq.n	800da44 <TIM_OC2_SetConfig+0xac>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	4a1a      	ldr	r2, [pc, #104]	; (800daa8 <TIM_OC2_SetConfig+0x110>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d113      	bne.n	800da6c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	695b      	ldr	r3, [r3, #20]
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	693a      	ldr	r2, [r7, #16]
 800da5c:	4313      	orrs	r3, r2
 800da5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	699b      	ldr	r3, [r3, #24]
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	693a      	ldr	r2, [r7, #16]
 800da68:	4313      	orrs	r3, r2
 800da6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	693a      	ldr	r2, [r7, #16]
 800da70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	68fa      	ldr	r2, [r7, #12]
 800da76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	685a      	ldr	r2, [r3, #4]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	697a      	ldr	r2, [r7, #20]
 800da84:	621a      	str	r2, [r3, #32]
}
 800da86:	bf00      	nop
 800da88:	371c      	adds	r7, #28
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	feff8fff 	.word	0xfeff8fff
 800da98:	40010000 	.word	0x40010000
 800da9c:	40010400 	.word	0x40010400
 800daa0:	40014000 	.word	0x40014000
 800daa4:	40014400 	.word	0x40014400
 800daa8:	40014800 	.word	0x40014800

0800daac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800daac:	b480      	push	{r7}
 800daae:	b087      	sub	sp, #28
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6a1b      	ldr	r3, [r3, #32]
 800daba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a1b      	ldr	r3, [r3, #32]
 800dac0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	69db      	ldr	r3, [r3, #28]
 800dad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dad4:	68fa      	ldr	r2, [r7, #12]
 800dad6:	4b33      	ldr	r3, [pc, #204]	; (800dba4 <TIM_OC3_SetConfig+0xf8>)
 800dad8:	4013      	ands	r3, r2
 800dada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f023 0303 	bic.w	r3, r3, #3
 800dae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68fa      	ldr	r2, [r7, #12]
 800daea:	4313      	orrs	r3, r2
 800daec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800daf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	689b      	ldr	r3, [r3, #8]
 800dafa:	021b      	lsls	r3, r3, #8
 800dafc:	697a      	ldr	r2, [r7, #20]
 800dafe:	4313      	orrs	r3, r2
 800db00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4a28      	ldr	r2, [pc, #160]	; (800dba8 <TIM_OC3_SetConfig+0xfc>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d003      	beq.n	800db12 <TIM_OC3_SetConfig+0x66>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4a27      	ldr	r2, [pc, #156]	; (800dbac <TIM_OC3_SetConfig+0x100>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d10d      	bne.n	800db2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	021b      	lsls	r3, r3, #8
 800db20:	697a      	ldr	r2, [r7, #20]
 800db22:	4313      	orrs	r3, r2
 800db24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4a1d      	ldr	r2, [pc, #116]	; (800dba8 <TIM_OC3_SetConfig+0xfc>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d00f      	beq.n	800db56 <TIM_OC3_SetConfig+0xaa>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4a1c      	ldr	r2, [pc, #112]	; (800dbac <TIM_OC3_SetConfig+0x100>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d00b      	beq.n	800db56 <TIM_OC3_SetConfig+0xaa>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	4a1b      	ldr	r2, [pc, #108]	; (800dbb0 <TIM_OC3_SetConfig+0x104>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d007      	beq.n	800db56 <TIM_OC3_SetConfig+0xaa>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	4a1a      	ldr	r2, [pc, #104]	; (800dbb4 <TIM_OC3_SetConfig+0x108>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d003      	beq.n	800db56 <TIM_OC3_SetConfig+0xaa>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	4a19      	ldr	r2, [pc, #100]	; (800dbb8 <TIM_OC3_SetConfig+0x10c>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d113      	bne.n	800db7e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	695b      	ldr	r3, [r3, #20]
 800db6a:	011b      	lsls	r3, r3, #4
 800db6c:	693a      	ldr	r2, [r7, #16]
 800db6e:	4313      	orrs	r3, r2
 800db70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	699b      	ldr	r3, [r3, #24]
 800db76:	011b      	lsls	r3, r3, #4
 800db78:	693a      	ldr	r2, [r7, #16]
 800db7a:	4313      	orrs	r3, r2
 800db7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	693a      	ldr	r2, [r7, #16]
 800db82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	68fa      	ldr	r2, [r7, #12]
 800db88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	685a      	ldr	r2, [r3, #4]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	697a      	ldr	r2, [r7, #20]
 800db96:	621a      	str	r2, [r3, #32]
}
 800db98:	bf00      	nop
 800db9a:	371c      	adds	r7, #28
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr
 800dba4:	fffeff8f 	.word	0xfffeff8f
 800dba8:	40010000 	.word	0x40010000
 800dbac:	40010400 	.word	0x40010400
 800dbb0:	40014000 	.word	0x40014000
 800dbb4:	40014400 	.word	0x40014400
 800dbb8:	40014800 	.word	0x40014800

0800dbbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b087      	sub	sp, #28
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6a1b      	ldr	r3, [r3, #32]
 800dbca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6a1b      	ldr	r3, [r3, #32]
 800dbd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	69db      	ldr	r3, [r3, #28]
 800dbe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	4b24      	ldr	r3, [pc, #144]	; (800dc78 <TIM_OC4_SetConfig+0xbc>)
 800dbe8:	4013      	ands	r3, r2
 800dbea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	021b      	lsls	r3, r3, #8
 800dbfa:	68fa      	ldr	r2, [r7, #12]
 800dbfc:	4313      	orrs	r3, r2
 800dbfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	689b      	ldr	r3, [r3, #8]
 800dc0c:	031b      	lsls	r3, r3, #12
 800dc0e:	693a      	ldr	r2, [r7, #16]
 800dc10:	4313      	orrs	r3, r2
 800dc12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	4a19      	ldr	r2, [pc, #100]	; (800dc7c <TIM_OC4_SetConfig+0xc0>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d00f      	beq.n	800dc3c <TIM_OC4_SetConfig+0x80>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	4a18      	ldr	r2, [pc, #96]	; (800dc80 <TIM_OC4_SetConfig+0xc4>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d00b      	beq.n	800dc3c <TIM_OC4_SetConfig+0x80>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	4a17      	ldr	r2, [pc, #92]	; (800dc84 <TIM_OC4_SetConfig+0xc8>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d007      	beq.n	800dc3c <TIM_OC4_SetConfig+0x80>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	4a16      	ldr	r2, [pc, #88]	; (800dc88 <TIM_OC4_SetConfig+0xcc>)
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d003      	beq.n	800dc3c <TIM_OC4_SetConfig+0x80>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	4a15      	ldr	r2, [pc, #84]	; (800dc8c <TIM_OC4_SetConfig+0xd0>)
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d109      	bne.n	800dc50 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	695b      	ldr	r3, [r3, #20]
 800dc48:	019b      	lsls	r3, r3, #6
 800dc4a:	697a      	ldr	r2, [r7, #20]
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	697a      	ldr	r2, [r7, #20]
 800dc54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	685a      	ldr	r2, [r3, #4]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	693a      	ldr	r2, [r7, #16]
 800dc68:	621a      	str	r2, [r3, #32]
}
 800dc6a:	bf00      	nop
 800dc6c:	371c      	adds	r7, #28
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop
 800dc78:	feff8fff 	.word	0xfeff8fff
 800dc7c:	40010000 	.word	0x40010000
 800dc80:	40010400 	.word	0x40010400
 800dc84:	40014000 	.word	0x40014000
 800dc88:	40014400 	.word	0x40014400
 800dc8c:	40014800 	.word	0x40014800

0800dc90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b087      	sub	sp, #28
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6a1b      	ldr	r3, [r3, #32]
 800dc9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6a1b      	ldr	r3, [r3, #32]
 800dca4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	4b21      	ldr	r3, [pc, #132]	; (800dd40 <TIM_OC5_SetConfig+0xb0>)
 800dcbc:	4013      	ands	r3, r2
 800dcbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	68fa      	ldr	r2, [r7, #12]
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dcd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	041b      	lsls	r3, r3, #16
 800dcd8:	693a      	ldr	r2, [r7, #16]
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4a18      	ldr	r2, [pc, #96]	; (800dd44 <TIM_OC5_SetConfig+0xb4>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d00f      	beq.n	800dd06 <TIM_OC5_SetConfig+0x76>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	4a17      	ldr	r2, [pc, #92]	; (800dd48 <TIM_OC5_SetConfig+0xb8>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d00b      	beq.n	800dd06 <TIM_OC5_SetConfig+0x76>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	4a16      	ldr	r2, [pc, #88]	; (800dd4c <TIM_OC5_SetConfig+0xbc>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d007      	beq.n	800dd06 <TIM_OC5_SetConfig+0x76>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	4a15      	ldr	r2, [pc, #84]	; (800dd50 <TIM_OC5_SetConfig+0xc0>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d003      	beq.n	800dd06 <TIM_OC5_SetConfig+0x76>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4a14      	ldr	r2, [pc, #80]	; (800dd54 <TIM_OC5_SetConfig+0xc4>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d109      	bne.n	800dd1a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	695b      	ldr	r3, [r3, #20]
 800dd12:	021b      	lsls	r3, r3, #8
 800dd14:	697a      	ldr	r2, [r7, #20]
 800dd16:	4313      	orrs	r3, r2
 800dd18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	697a      	ldr	r2, [r7, #20]
 800dd1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	685a      	ldr	r2, [r3, #4]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	693a      	ldr	r2, [r7, #16]
 800dd32:	621a      	str	r2, [r3, #32]
}
 800dd34:	bf00      	nop
 800dd36:	371c      	adds	r7, #28
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr
 800dd40:	fffeff8f 	.word	0xfffeff8f
 800dd44:	40010000 	.word	0x40010000
 800dd48:	40010400 	.word	0x40010400
 800dd4c:	40014000 	.word	0x40014000
 800dd50:	40014400 	.word	0x40014400
 800dd54:	40014800 	.word	0x40014800

0800dd58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b087      	sub	sp, #28
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6a1b      	ldr	r3, [r3, #32]
 800dd66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6a1b      	ldr	r3, [r3, #32]
 800dd6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	4b22      	ldr	r3, [pc, #136]	; (800de0c <TIM_OC6_SetConfig+0xb4>)
 800dd84:	4013      	ands	r3, r2
 800dd86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	021b      	lsls	r3, r3, #8
 800dd8e:	68fa      	ldr	r2, [r7, #12]
 800dd90:	4313      	orrs	r3, r2
 800dd92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dd9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	051b      	lsls	r3, r3, #20
 800dda2:	693a      	ldr	r2, [r7, #16]
 800dda4:	4313      	orrs	r3, r2
 800dda6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	4a19      	ldr	r2, [pc, #100]	; (800de10 <TIM_OC6_SetConfig+0xb8>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d00f      	beq.n	800ddd0 <TIM_OC6_SetConfig+0x78>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	4a18      	ldr	r2, [pc, #96]	; (800de14 <TIM_OC6_SetConfig+0xbc>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d00b      	beq.n	800ddd0 <TIM_OC6_SetConfig+0x78>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	4a17      	ldr	r2, [pc, #92]	; (800de18 <TIM_OC6_SetConfig+0xc0>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d007      	beq.n	800ddd0 <TIM_OC6_SetConfig+0x78>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	4a16      	ldr	r2, [pc, #88]	; (800de1c <TIM_OC6_SetConfig+0xc4>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d003      	beq.n	800ddd0 <TIM_OC6_SetConfig+0x78>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	4a15      	ldr	r2, [pc, #84]	; (800de20 <TIM_OC6_SetConfig+0xc8>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d109      	bne.n	800dde4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ddd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	695b      	ldr	r3, [r3, #20]
 800dddc:	029b      	lsls	r3, r3, #10
 800ddde:	697a      	ldr	r2, [r7, #20]
 800dde0:	4313      	orrs	r3, r2
 800dde2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	697a      	ldr	r2, [r7, #20]
 800dde8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	685a      	ldr	r2, [r3, #4]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	693a      	ldr	r2, [r7, #16]
 800ddfc:	621a      	str	r2, [r3, #32]
}
 800ddfe:	bf00      	nop
 800de00:	371c      	adds	r7, #28
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	feff8fff 	.word	0xfeff8fff
 800de10:	40010000 	.word	0x40010000
 800de14:	40010400 	.word	0x40010400
 800de18:	40014000 	.word	0x40014000
 800de1c:	40014400 	.word	0x40014400
 800de20:	40014800 	.word	0x40014800

0800de24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de24:	b480      	push	{r7}
 800de26:	b087      	sub	sp, #28
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	6a1b      	ldr	r3, [r3, #32]
 800de34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6a1b      	ldr	r3, [r3, #32]
 800de3a:	f023 0201 	bic.w	r2, r3, #1
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	699b      	ldr	r3, [r3, #24]
 800de46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800de4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	011b      	lsls	r3, r3, #4
 800de54:	693a      	ldr	r2, [r7, #16]
 800de56:	4313      	orrs	r3, r2
 800de58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	f023 030a 	bic.w	r3, r3, #10
 800de60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800de62:	697a      	ldr	r2, [r7, #20]
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	4313      	orrs	r3, r2
 800de68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	693a      	ldr	r2, [r7, #16]
 800de6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	697a      	ldr	r2, [r7, #20]
 800de74:	621a      	str	r2, [r3, #32]
}
 800de76:	bf00      	nop
 800de78:	371c      	adds	r7, #28
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr

0800de82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de82:	b480      	push	{r7}
 800de84:	b087      	sub	sp, #28
 800de86:	af00      	add	r7, sp, #0
 800de88:	60f8      	str	r0, [r7, #12]
 800de8a:	60b9      	str	r1, [r7, #8]
 800de8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	6a1b      	ldr	r3, [r3, #32]
 800de92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6a1b      	ldr	r3, [r3, #32]
 800de98:	f023 0210 	bic.w	r2, r3, #16
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	699b      	ldr	r3, [r3, #24]
 800dea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800deac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	031b      	lsls	r3, r3, #12
 800deb2:	693a      	ldr	r2, [r7, #16]
 800deb4:	4313      	orrs	r3, r2
 800deb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800debe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	011b      	lsls	r3, r3, #4
 800dec4:	697a      	ldr	r2, [r7, #20]
 800dec6:	4313      	orrs	r3, r2
 800dec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	693a      	ldr	r2, [r7, #16]
 800dece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	697a      	ldr	r2, [r7, #20]
 800ded4:	621a      	str	r2, [r3, #32]
}
 800ded6:	bf00      	nop
 800ded8:	371c      	adds	r7, #28
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr
	...

0800dee4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b085      	sub	sp, #20
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	689b      	ldr	r3, [r3, #8]
 800def2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	4b09      	ldr	r3, [pc, #36]	; (800df1c <TIM_ITRx_SetConfig+0x38>)
 800def8:	4013      	ands	r3, r2
 800defa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800defc:	683a      	ldr	r2, [r7, #0]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	4313      	orrs	r3, r2
 800df02:	f043 0307 	orr.w	r3, r3, #7
 800df06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	609a      	str	r2, [r3, #8]
}
 800df0e:	bf00      	nop
 800df10:	3714      	adds	r7, #20
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	ffcfff8f 	.word	0xffcfff8f

0800df20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800df20:	b480      	push	{r7}
 800df22:	b087      	sub	sp, #28
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	607a      	str	r2, [r7, #4]
 800df2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800df3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	021a      	lsls	r2, r3, #8
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	431a      	orrs	r2, r3
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	4313      	orrs	r3, r2
 800df48:	697a      	ldr	r2, [r7, #20]
 800df4a:	4313      	orrs	r3, r2
 800df4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	697a      	ldr	r2, [r7, #20]
 800df52:	609a      	str	r2, [r3, #8]
}
 800df54:	bf00      	nop
 800df56:	371c      	adds	r7, #28
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800df60:	b480      	push	{r7}
 800df62:	b087      	sub	sp, #28
 800df64:	af00      	add	r7, sp, #0
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	f003 031f 	and.w	r3, r3, #31
 800df72:	2201      	movs	r2, #1
 800df74:	fa02 f303 	lsl.w	r3, r2, r3
 800df78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6a1a      	ldr	r2, [r3, #32]
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	43db      	mvns	r3, r3
 800df82:	401a      	ands	r2, r3
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6a1a      	ldr	r2, [r3, #32]
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	f003 031f 	and.w	r3, r3, #31
 800df92:	6879      	ldr	r1, [r7, #4]
 800df94:	fa01 f303 	lsl.w	r3, r1, r3
 800df98:	431a      	orrs	r2, r3
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	621a      	str	r2, [r3, #32]
}
 800df9e:	bf00      	nop
 800dfa0:	371c      	adds	r7, #28
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
	...

0800dfac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b085      	sub	sp, #20
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d101      	bne.n	800dfc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dfc0:	2302      	movs	r3, #2
 800dfc2:	e06d      	b.n	800e0a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2202      	movs	r2, #2
 800dfd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	689b      	ldr	r3, [r3, #8]
 800dfe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4a30      	ldr	r2, [pc, #192]	; (800e0ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d004      	beq.n	800dff8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4a2f      	ldr	r2, [pc, #188]	; (800e0b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d108      	bne.n	800e00a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dffe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	4313      	orrs	r3, r2
 800e008:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e010:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	4313      	orrs	r3, r2
 800e01a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	68fa      	ldr	r2, [r7, #12]
 800e022:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4a20      	ldr	r2, [pc, #128]	; (800e0ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d022      	beq.n	800e074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e036:	d01d      	beq.n	800e074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4a1d      	ldr	r2, [pc, #116]	; (800e0b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d018      	beq.n	800e074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a1c      	ldr	r2, [pc, #112]	; (800e0b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d013      	beq.n	800e074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a1a      	ldr	r2, [pc, #104]	; (800e0bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d00e      	beq.n	800e074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a15      	ldr	r2, [pc, #84]	; (800e0b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d009      	beq.n	800e074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4a16      	ldr	r2, [pc, #88]	; (800e0c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d004      	beq.n	800e074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4a15      	ldr	r2, [pc, #84]	; (800e0c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d10c      	bne.n	800e08e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e07a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	68ba      	ldr	r2, [r7, #8]
 800e082:	4313      	orrs	r3, r2
 800e084:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	68ba      	ldr	r2, [r7, #8]
 800e08c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2201      	movs	r2, #1
 800e092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2200      	movs	r2, #0
 800e09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e09e:	2300      	movs	r3, #0
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3714      	adds	r7, #20
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr
 800e0ac:	40010000 	.word	0x40010000
 800e0b0:	40010400 	.word	0x40010400
 800e0b4:	40000400 	.word	0x40000400
 800e0b8:	40000800 	.word	0x40000800
 800e0bc:	40000c00 	.word	0x40000c00
 800e0c0:	40001800 	.word	0x40001800
 800e0c4:	40014000 	.word	0x40014000

0800e0c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b085      	sub	sp, #20
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d101      	bne.n	800e0e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e0e0:	2302      	movs	r3, #2
 800e0e2:	e065      	b.n	800e1b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	689b      	ldr	r3, [r3, #8]
 800e104:	4313      	orrs	r3, r2
 800e106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	4313      	orrs	r3, r2
 800e114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4313      	orrs	r3, r2
 800e122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	691b      	ldr	r3, [r3, #16]
 800e12e:	4313      	orrs	r3, r2
 800e130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	695b      	ldr	r3, [r3, #20]
 800e13c:	4313      	orrs	r3, r2
 800e13e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e14a:	4313      	orrs	r3, r2
 800e14c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	699b      	ldr	r3, [r3, #24]
 800e158:	041b      	lsls	r3, r3, #16
 800e15a:	4313      	orrs	r3, r2
 800e15c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4a16      	ldr	r2, [pc, #88]	; (800e1bc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d004      	beq.n	800e172 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a14      	ldr	r2, [pc, #80]	; (800e1c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d115      	bne.n	800e19e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17c:	051b      	lsls	r3, r3, #20
 800e17e:	4313      	orrs	r3, r2
 800e180:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	69db      	ldr	r3, [r3, #28]
 800e18c:	4313      	orrs	r3, r2
 800e18e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	6a1b      	ldr	r3, [r3, #32]
 800e19a:	4313      	orrs	r3, r2
 800e19c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	68fa      	ldr	r2, [r7, #12]
 800e1a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3714      	adds	r7, #20
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr
 800e1bc:	40010000 	.word	0x40010000
 800e1c0:	40010400 	.word	0x40010400

0800e1c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e1cc:	bf00      	nop
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b083      	sub	sp, #12
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e1e0:	bf00      	nop
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e1f4:	bf00      	nop
 800e1f6:	370c      	adds	r7, #12
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	e042      	b.n	800e298 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d106      	bne.n	800e22a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2200      	movs	r2, #0
 800e220:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7f4 f897 	bl	8002358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2224      	movs	r2, #36	; 0x24
 800e22e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f022 0201 	bic.w	r2, r2, #1
 800e240:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e246:	2b00      	cmp	r3, #0
 800e248:	d002      	beq.n	800e250 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f001 fa44 	bl	800f6d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f000 fcd9 	bl	800ec08 <UART_SetConfig>
 800e256:	4603      	mov	r3, r0
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d101      	bne.n	800e260 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e25c:	2301      	movs	r3, #1
 800e25e:	e01b      	b.n	800e298 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	685a      	ldr	r2, [r3, #4]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e26e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	689a      	ldr	r2, [r3, #8]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e27e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f042 0201 	orr.w	r2, r2, #1
 800e28e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f001 fac3 	bl	800f81c <UART_CheckIdleState>
 800e296:	4603      	mov	r3, r0
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3708      	adds	r7, #8
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b08a      	sub	sp, #40	; 0x28
 800e2a4:	af02      	add	r7, sp, #8
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	603b      	str	r3, [r7, #0]
 800e2ac:	4613      	mov	r3, r2
 800e2ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2b6:	2b20      	cmp	r3, #32
 800e2b8:	d17b      	bne.n	800e3b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d002      	beq.n	800e2c6 <HAL_UART_Transmit+0x26>
 800e2c0:	88fb      	ldrh	r3, [r7, #6]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d101      	bne.n	800e2ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e074      	b.n	800e3b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2221      	movs	r2, #33	; 0x21
 800e2d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e2da:	f7f4 faa1 	bl	8002820 <HAL_GetTick>
 800e2de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	88fa      	ldrh	r2, [r7, #6]
 800e2e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	88fa      	ldrh	r2, [r7, #6]
 800e2ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2f8:	d108      	bne.n	800e30c <HAL_UART_Transmit+0x6c>
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	691b      	ldr	r3, [r3, #16]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d104      	bne.n	800e30c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e302:	2300      	movs	r3, #0
 800e304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	61bb      	str	r3, [r7, #24]
 800e30a:	e003      	b.n	800e314 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e310:	2300      	movs	r3, #0
 800e312:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e314:	e030      	b.n	800e378 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	2200      	movs	r2, #0
 800e31e:	2180      	movs	r1, #128	; 0x80
 800e320:	68f8      	ldr	r0, [r7, #12]
 800e322:	f001 fb25 	bl	800f970 <UART_WaitOnFlagUntilTimeout>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d005      	beq.n	800e338 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2220      	movs	r2, #32
 800e330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e334:	2303      	movs	r3, #3
 800e336:	e03d      	b.n	800e3b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d10b      	bne.n	800e356 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e33e:	69bb      	ldr	r3, [r7, #24]
 800e340:	881b      	ldrh	r3, [r3, #0]
 800e342:	461a      	mov	r2, r3
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e34c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	3302      	adds	r3, #2
 800e352:	61bb      	str	r3, [r7, #24]
 800e354:	e007      	b.n	800e366 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	781a      	ldrb	r2, [r3, #0]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	3301      	adds	r3, #1
 800e364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	3b01      	subs	r3, #1
 800e370:	b29a      	uxth	r2, r3
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e37e:	b29b      	uxth	r3, r3
 800e380:	2b00      	cmp	r3, #0
 800e382:	d1c8      	bne.n	800e316 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	2200      	movs	r2, #0
 800e38c:	2140      	movs	r1, #64	; 0x40
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f001 faee 	bl	800f970 <UART_WaitOnFlagUntilTimeout>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d005      	beq.n	800e3a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2220      	movs	r2, #32
 800e39e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e3a2:	2303      	movs	r3, #3
 800e3a4:	e006      	b.n	800e3b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2220      	movs	r2, #32
 800e3aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	e000      	b.n	800e3b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e3b2:	2302      	movs	r3, #2
  }
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3720      	adds	r7, #32
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b08a      	sub	sp, #40	; 0x28
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	60f8      	str	r0, [r7, #12]
 800e3c4:	60b9      	str	r1, [r7, #8]
 800e3c6:	4613      	mov	r3, r2
 800e3c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3d0:	2b20      	cmp	r3, #32
 800e3d2:	d137      	bne.n	800e444 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d002      	beq.n	800e3e0 <HAL_UART_Receive_IT+0x24>
 800e3da:	88fb      	ldrh	r3, [r7, #6]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d101      	bne.n	800e3e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	e030      	b.n	800e446 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	4a18      	ldr	r2, [pc, #96]	; (800e450 <HAL_UART_Receive_IT+0x94>)
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d01f      	beq.n	800e434 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d018      	beq.n	800e434 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	e853 3f00 	ldrex	r3, [r3]
 800e40e:	613b      	str	r3, [r7, #16]
   return(result);
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e416:	627b      	str	r3, [r7, #36]	; 0x24
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	461a      	mov	r2, r3
 800e41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e420:	623b      	str	r3, [r7, #32]
 800e422:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e424:	69f9      	ldr	r1, [r7, #28]
 800e426:	6a3a      	ldr	r2, [r7, #32]
 800e428:	e841 2300 	strex	r3, r2, [r1]
 800e42c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e42e:	69bb      	ldr	r3, [r7, #24]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d1e6      	bne.n	800e402 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e434:	88fb      	ldrh	r3, [r7, #6]
 800e436:	461a      	mov	r2, r3
 800e438:	68b9      	ldr	r1, [r7, #8]
 800e43a:	68f8      	ldr	r0, [r7, #12]
 800e43c:	f001 fb06 	bl	800fa4c <UART_Start_Receive_IT>
 800e440:	4603      	mov	r3, r0
 800e442:	e000      	b.n	800e446 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e444:	2302      	movs	r3, #2
  }
}
 800e446:	4618      	mov	r0, r3
 800e448:	3728      	adds	r7, #40	; 0x28
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	58000c00 	.word	0x58000c00

0800e454 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b0ba      	sub	sp, #232	; 0xe8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	69db      	ldr	r3, [r3, #28]
 800e462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	689b      	ldr	r3, [r3, #8]
 800e476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e47a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e47e:	f640 030f 	movw	r3, #2063	; 0x80f
 800e482:	4013      	ands	r3, r2
 800e484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e488:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d11b      	bne.n	800e4c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e494:	f003 0320 	and.w	r3, r3, #32
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d015      	beq.n	800e4c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4a0:	f003 0320 	and.w	r3, r3, #32
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d105      	bne.n	800e4b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e4a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d009      	beq.n	800e4c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	f000 8377 	beq.w	800ebac <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	4798      	blx	r3
      }
      return;
 800e4c6:	e371      	b.n	800ebac <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e4c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	f000 8123 	beq.w	800e718 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e4d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e4d6:	4b8d      	ldr	r3, [pc, #564]	; (800e70c <HAL_UART_IRQHandler+0x2b8>)
 800e4d8:	4013      	ands	r3, r2
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d106      	bne.n	800e4ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e4de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e4e2:	4b8b      	ldr	r3, [pc, #556]	; (800e710 <HAL_UART_IRQHandler+0x2bc>)
 800e4e4:	4013      	ands	r3, r2
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	f000 8116 	beq.w	800e718 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e4ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4f0:	f003 0301 	and.w	r3, r3, #1
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d011      	beq.n	800e51c <HAL_UART_IRQHandler+0xc8>
 800e4f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e500:	2b00      	cmp	r3, #0
 800e502:	d00b      	beq.n	800e51c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2201      	movs	r2, #1
 800e50a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e512:	f043 0201 	orr.w	r2, r3, #1
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e51c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e520:	f003 0302 	and.w	r3, r3, #2
 800e524:	2b00      	cmp	r3, #0
 800e526:	d011      	beq.n	800e54c <HAL_UART_IRQHandler+0xf8>
 800e528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e52c:	f003 0301 	and.w	r3, r3, #1
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00b      	beq.n	800e54c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2202      	movs	r2, #2
 800e53a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e542:	f043 0204 	orr.w	r2, r3, #4
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e550:	f003 0304 	and.w	r3, r3, #4
 800e554:	2b00      	cmp	r3, #0
 800e556:	d011      	beq.n	800e57c <HAL_UART_IRQHandler+0x128>
 800e558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e55c:	f003 0301 	and.w	r3, r3, #1
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00b      	beq.n	800e57c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	2204      	movs	r2, #4
 800e56a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e572:	f043 0202 	orr.w	r2, r3, #2
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e57c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e580:	f003 0308 	and.w	r3, r3, #8
 800e584:	2b00      	cmp	r3, #0
 800e586:	d017      	beq.n	800e5b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e58c:	f003 0320 	and.w	r3, r3, #32
 800e590:	2b00      	cmp	r3, #0
 800e592:	d105      	bne.n	800e5a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e594:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e598:	4b5c      	ldr	r3, [pc, #368]	; (800e70c <HAL_UART_IRQHandler+0x2b8>)
 800e59a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d00b      	beq.n	800e5b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	2208      	movs	r2, #8
 800e5a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5ae:	f043 0208 	orr.w	r2, r3, #8
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e5b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d012      	beq.n	800e5ea <HAL_UART_IRQHandler+0x196>
 800e5c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d00c      	beq.n	800e5ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5e0:	f043 0220 	orr.w	r2, r3, #32
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f000 82dd 	beq.w	800ebb0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e5f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5fa:	f003 0320 	and.w	r3, r3, #32
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d013      	beq.n	800e62a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e606:	f003 0320 	and.w	r3, r3, #32
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d105      	bne.n	800e61a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e60e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e616:	2b00      	cmp	r3, #0
 800e618:	d007      	beq.n	800e62a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d003      	beq.n	800e62a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e630:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	689b      	ldr	r3, [r3, #8]
 800e63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e63e:	2b40      	cmp	r3, #64	; 0x40
 800e640:	d005      	beq.n	800e64e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e646:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d054      	beq.n	800e6f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f001 fb1e 	bl	800fc90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e65e:	2b40      	cmp	r3, #64	; 0x40
 800e660:	d146      	bne.n	800e6f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	3308      	adds	r3, #8
 800e668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e66c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e670:	e853 3f00 	ldrex	r3, [r3]
 800e674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e678:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e67c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	3308      	adds	r3, #8
 800e68a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e68e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e696:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e69a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e69e:	e841 2300 	strex	r3, r2, [r1]
 800e6a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e6a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d1d9      	bne.n	800e662 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d017      	beq.n	800e6e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6be:	4a15      	ldr	r2, [pc, #84]	; (800e714 <HAL_UART_IRQHandler+0x2c0>)
 800e6c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7f7 f9bb 	bl	8005a44 <HAL_DMA_Abort_IT>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d019      	beq.n	800e708 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e6e2:	4610      	mov	r0, r2
 800e6e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6e6:	e00f      	b.n	800e708 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 fa77 	bl	800ebdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6ee:	e00b      	b.n	800e708 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 fa73 	bl	800ebdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6f6:	e007      	b.n	800e708 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 fa6f 	bl	800ebdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e706:	e253      	b.n	800ebb0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e708:	bf00      	nop
    return;
 800e70a:	e251      	b.n	800ebb0 <HAL_UART_IRQHandler+0x75c>
 800e70c:	10000001 	.word	0x10000001
 800e710:	04000120 	.word	0x04000120
 800e714:	0800fd5d 	.word	0x0800fd5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	f040 81e7 	bne.w	800eaf0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e726:	f003 0310 	and.w	r3, r3, #16
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	f000 81e0 	beq.w	800eaf0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e734:	f003 0310 	and.w	r3, r3, #16
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f000 81d9 	beq.w	800eaf0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2210      	movs	r2, #16
 800e744:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	689b      	ldr	r3, [r3, #8]
 800e74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e750:	2b40      	cmp	r3, #64	; 0x40
 800e752:	f040 8151 	bne.w	800e9f8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	4a96      	ldr	r2, [pc, #600]	; (800e9b8 <HAL_UART_IRQHandler+0x564>)
 800e760:	4293      	cmp	r3, r2
 800e762:	d068      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a93      	ldr	r2, [pc, #588]	; (800e9bc <HAL_UART_IRQHandler+0x568>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d061      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4a91      	ldr	r2, [pc, #580]	; (800e9c0 <HAL_UART_IRQHandler+0x56c>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d05a      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4a8e      	ldr	r2, [pc, #568]	; (800e9c4 <HAL_UART_IRQHandler+0x570>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d053      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4a8c      	ldr	r2, [pc, #560]	; (800e9c8 <HAL_UART_IRQHandler+0x574>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d04c      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4a89      	ldr	r2, [pc, #548]	; (800e9cc <HAL_UART_IRQHandler+0x578>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d045      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	4a87      	ldr	r2, [pc, #540]	; (800e9d0 <HAL_UART_IRQHandler+0x57c>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d03e      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4a84      	ldr	r2, [pc, #528]	; (800e9d4 <HAL_UART_IRQHandler+0x580>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d037      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4a82      	ldr	r2, [pc, #520]	; (800e9d8 <HAL_UART_IRQHandler+0x584>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d030      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4a7f      	ldr	r2, [pc, #508]	; (800e9dc <HAL_UART_IRQHandler+0x588>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d029      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a7d      	ldr	r2, [pc, #500]	; (800e9e0 <HAL_UART_IRQHandler+0x58c>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d022      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4a7a      	ldr	r2, [pc, #488]	; (800e9e4 <HAL_UART_IRQHandler+0x590>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d01b      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4a78      	ldr	r2, [pc, #480]	; (800e9e8 <HAL_UART_IRQHandler+0x594>)
 800e808:	4293      	cmp	r3, r2
 800e80a:	d014      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a75      	ldr	r2, [pc, #468]	; (800e9ec <HAL_UART_IRQHandler+0x598>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d00d      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4a73      	ldr	r2, [pc, #460]	; (800e9f0 <HAL_UART_IRQHandler+0x59c>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d006      	beq.n	800e836 <HAL_UART_IRQHandler+0x3e2>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a70      	ldr	r2, [pc, #448]	; (800e9f4 <HAL_UART_IRQHandler+0x5a0>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d106      	bne.n	800e844 <HAL_UART_IRQHandler+0x3f0>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	b29b      	uxth	r3, r3
 800e842:	e005      	b.n	800e850 <HAL_UART_IRQHandler+0x3fc>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	b29b      	uxth	r3, r3
 800e850:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e854:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e858:	2b00      	cmp	r3, #0
 800e85a:	f000 81ab 	beq.w	800ebb4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e864:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e868:	429a      	cmp	r2, r3
 800e86a:	f080 81a3 	bcs.w	800ebb4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e874:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e87e:	69db      	ldr	r3, [r3, #28]
 800e880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e884:	f000 8087 	beq.w	800e996 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e894:	e853 3f00 	ldrex	r3, [r3]
 800e898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e89c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e8a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e8b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e8b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e8be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e8c2:	e841 2300 	strex	r3, r2, [r1]
 800e8c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e8ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d1da      	bne.n	800e888 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	3308      	adds	r3, #8
 800e8d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8dc:	e853 3f00 	ldrex	r3, [r3]
 800e8e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e8e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8e4:	f023 0301 	bic.w	r3, r3, #1
 800e8e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	3308      	adds	r3, #8
 800e8f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e8f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e8fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e8fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e902:	e841 2300 	strex	r3, r2, [r1]
 800e906:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d1e1      	bne.n	800e8d2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	3308      	adds	r3, #8
 800e914:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e918:	e853 3f00 	ldrex	r3, [r3]
 800e91c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e91e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	3308      	adds	r3, #8
 800e92e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e932:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e934:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e936:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e938:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e93a:	e841 2300 	strex	r3, r2, [r1]
 800e93e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e942:	2b00      	cmp	r3, #0
 800e944:	d1e3      	bne.n	800e90e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2220      	movs	r2, #32
 800e94a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e95c:	e853 3f00 	ldrex	r3, [r3]
 800e960:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e964:	f023 0310 	bic.w	r3, r3, #16
 800e968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	461a      	mov	r2, r3
 800e972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e976:	65bb      	str	r3, [r7, #88]	; 0x58
 800e978:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e97c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e97e:	e841 2300 	strex	r3, r2, [r1]
 800e982:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e986:	2b00      	cmp	r3, #0
 800e988:	d1e4      	bne.n	800e954 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e990:	4618      	mov	r0, r3
 800e992:	f7f6 fd39 	bl	8005408 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2202      	movs	r2, #2
 800e99a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	1ad3      	subs	r3, r2, r3
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 f91d 	bl	800ebf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e9b6:	e0fd      	b.n	800ebb4 <HAL_UART_IRQHandler+0x760>
 800e9b8:	40020010 	.word	0x40020010
 800e9bc:	40020028 	.word	0x40020028
 800e9c0:	40020040 	.word	0x40020040
 800e9c4:	40020058 	.word	0x40020058
 800e9c8:	40020070 	.word	0x40020070
 800e9cc:	40020088 	.word	0x40020088
 800e9d0:	400200a0 	.word	0x400200a0
 800e9d4:	400200b8 	.word	0x400200b8
 800e9d8:	40020410 	.word	0x40020410
 800e9dc:	40020428 	.word	0x40020428
 800e9e0:	40020440 	.word	0x40020440
 800e9e4:	40020458 	.word	0x40020458
 800e9e8:	40020470 	.word	0x40020470
 800e9ec:	40020488 	.word	0x40020488
 800e9f0:	400204a0 	.word	0x400204a0
 800e9f4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	1ad3      	subs	r3, r2, r3
 800ea08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	f000 80cf 	beq.w	800ebb8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ea1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	f000 80ca 	beq.w	800ebb8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea2c:	e853 3f00 	ldrex	r3, [r3]
 800ea30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ea32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	461a      	mov	r2, r3
 800ea42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ea46:	647b      	str	r3, [r7, #68]	; 0x44
 800ea48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea4e:	e841 2300 	strex	r3, r2, [r1]
 800ea52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d1e4      	bne.n	800ea24 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	3308      	adds	r3, #8
 800ea60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea64:	e853 3f00 	ldrex	r3, [r3]
 800ea68:	623b      	str	r3, [r7, #32]
   return(result);
 800ea6a:	6a3a      	ldr	r2, [r7, #32]
 800ea6c:	4b55      	ldr	r3, [pc, #340]	; (800ebc4 <HAL_UART_IRQHandler+0x770>)
 800ea6e:	4013      	ands	r3, r2
 800ea70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	3308      	adds	r3, #8
 800ea7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ea7e:	633a      	str	r2, [r7, #48]	; 0x30
 800ea80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea86:	e841 2300 	strex	r3, r2, [r1]
 800ea8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d1e3      	bne.n	800ea5a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2220      	movs	r2, #32
 800ea96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	e853 3f00 	ldrex	r3, [r3]
 800eab2:	60fb      	str	r3, [r7, #12]
   return(result);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f023 0310 	bic.w	r3, r3, #16
 800eaba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	461a      	mov	r2, r3
 800eac4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eac8:	61fb      	str	r3, [r7, #28]
 800eaca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eacc:	69b9      	ldr	r1, [r7, #24]
 800eace:	69fa      	ldr	r2, [r7, #28]
 800ead0:	e841 2300 	strex	r3, r2, [r1]
 800ead4:	617b      	str	r3, [r7, #20]
   return(result);
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d1e4      	bne.n	800eaa6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2202      	movs	r2, #2
 800eae0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eae2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eae6:	4619      	mov	r1, r3
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f000 f881 	bl	800ebf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eaee:	e063      	b.n	800ebb8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eaf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d00e      	beq.n	800eb1a <HAL_UART_IRQHandler+0x6c6>
 800eafc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d008      	beq.n	800eb1a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eb10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f001 fe80 	bl	8010818 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb18:	e051      	b.n	800ebbe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800eb1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d014      	beq.n	800eb50 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800eb26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d105      	bne.n	800eb3e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800eb32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d008      	beq.n	800eb50 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d03a      	beq.n	800ebbc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	4798      	blx	r3
    }
    return;
 800eb4e:	e035      	b.n	800ebbc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eb50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d009      	beq.n	800eb70 <HAL_UART_IRQHandler+0x71c>
 800eb5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d003      	beq.n	800eb70 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f001 f90d 	bl	800fd88 <UART_EndTransmit_IT>
    return;
 800eb6e:	e026      	b.n	800ebbe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800eb70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d009      	beq.n	800eb90 <HAL_UART_IRQHandler+0x73c>
 800eb7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d003      	beq.n	800eb90 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f001 fe59 	bl	8010840 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb8e:	e016      	b.n	800ebbe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800eb90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d010      	beq.n	800ebbe <HAL_UART_IRQHandler+0x76a>
 800eb9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	da0c      	bge.n	800ebbe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f001 fe41 	bl	801082c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ebaa:	e008      	b.n	800ebbe <HAL_UART_IRQHandler+0x76a>
      return;
 800ebac:	bf00      	nop
 800ebae:	e006      	b.n	800ebbe <HAL_UART_IRQHandler+0x76a>
    return;
 800ebb0:	bf00      	nop
 800ebb2:	e004      	b.n	800ebbe <HAL_UART_IRQHandler+0x76a>
      return;
 800ebb4:	bf00      	nop
 800ebb6:	e002      	b.n	800ebbe <HAL_UART_IRQHandler+0x76a>
      return;
 800ebb8:	bf00      	nop
 800ebba:	e000      	b.n	800ebbe <HAL_UART_IRQHandler+0x76a>
    return;
 800ebbc:	bf00      	nop
  }
}
 800ebbe:	37e8      	adds	r7, #232	; 0xe8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	effffffe 	.word	0xeffffffe

0800ebc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b083      	sub	sp, #12
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ebd0:	bf00      	nop
 800ebd2:	370c      	adds	r7, #12
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr

0800ebdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ebe4:	bf00      	nop
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ebfc:	bf00      	nop
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr

0800ec08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec0c:	b092      	sub	sp, #72	; 0x48
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec12:	2300      	movs	r3, #0
 800ec14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	689a      	ldr	r2, [r3, #8]
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	691b      	ldr	r3, [r3, #16]
 800ec20:	431a      	orrs	r2, r3
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	695b      	ldr	r3, [r3, #20]
 800ec26:	431a      	orrs	r2, r3
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	69db      	ldr	r3, [r3, #28]
 800ec2c:	4313      	orrs	r3, r2
 800ec2e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	4bbe      	ldr	r3, [pc, #760]	; (800ef30 <UART_SetConfig+0x328>)
 800ec38:	4013      	ands	r3, r2
 800ec3a:	697a      	ldr	r2, [r7, #20]
 800ec3c:	6812      	ldr	r2, [r2, #0]
 800ec3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec40:	430b      	orrs	r3, r1
 800ec42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	68da      	ldr	r2, [r3, #12]
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	430a      	orrs	r2, r1
 800ec58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	699b      	ldr	r3, [r3, #24]
 800ec5e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	4ab3      	ldr	r2, [pc, #716]	; (800ef34 <UART_SetConfig+0x32c>)
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d004      	beq.n	800ec74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	6a1b      	ldr	r3, [r3, #32]
 800ec6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec70:	4313      	orrs	r3, r2
 800ec72:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	689a      	ldr	r2, [r3, #8]
 800ec7a:	4baf      	ldr	r3, [pc, #700]	; (800ef38 <UART_SetConfig+0x330>)
 800ec7c:	4013      	ands	r3, r2
 800ec7e:	697a      	ldr	r2, [r7, #20]
 800ec80:	6812      	ldr	r2, [r2, #0]
 800ec82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec84:	430b      	orrs	r3, r1
 800ec86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec8e:	f023 010f 	bic.w	r1, r3, #15
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	430a      	orrs	r2, r1
 800ec9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4aa6      	ldr	r2, [pc, #664]	; (800ef3c <UART_SetConfig+0x334>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d177      	bne.n	800ed98 <UART_SetConfig+0x190>
 800eca8:	4ba5      	ldr	r3, [pc, #660]	; (800ef40 <UART_SetConfig+0x338>)
 800ecaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ecb0:	2b28      	cmp	r3, #40	; 0x28
 800ecb2:	d86d      	bhi.n	800ed90 <UART_SetConfig+0x188>
 800ecb4:	a201      	add	r2, pc, #4	; (adr r2, 800ecbc <UART_SetConfig+0xb4>)
 800ecb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecba:	bf00      	nop
 800ecbc:	0800ed61 	.word	0x0800ed61
 800ecc0:	0800ed91 	.word	0x0800ed91
 800ecc4:	0800ed91 	.word	0x0800ed91
 800ecc8:	0800ed91 	.word	0x0800ed91
 800eccc:	0800ed91 	.word	0x0800ed91
 800ecd0:	0800ed91 	.word	0x0800ed91
 800ecd4:	0800ed91 	.word	0x0800ed91
 800ecd8:	0800ed91 	.word	0x0800ed91
 800ecdc:	0800ed69 	.word	0x0800ed69
 800ece0:	0800ed91 	.word	0x0800ed91
 800ece4:	0800ed91 	.word	0x0800ed91
 800ece8:	0800ed91 	.word	0x0800ed91
 800ecec:	0800ed91 	.word	0x0800ed91
 800ecf0:	0800ed91 	.word	0x0800ed91
 800ecf4:	0800ed91 	.word	0x0800ed91
 800ecf8:	0800ed91 	.word	0x0800ed91
 800ecfc:	0800ed71 	.word	0x0800ed71
 800ed00:	0800ed91 	.word	0x0800ed91
 800ed04:	0800ed91 	.word	0x0800ed91
 800ed08:	0800ed91 	.word	0x0800ed91
 800ed0c:	0800ed91 	.word	0x0800ed91
 800ed10:	0800ed91 	.word	0x0800ed91
 800ed14:	0800ed91 	.word	0x0800ed91
 800ed18:	0800ed91 	.word	0x0800ed91
 800ed1c:	0800ed79 	.word	0x0800ed79
 800ed20:	0800ed91 	.word	0x0800ed91
 800ed24:	0800ed91 	.word	0x0800ed91
 800ed28:	0800ed91 	.word	0x0800ed91
 800ed2c:	0800ed91 	.word	0x0800ed91
 800ed30:	0800ed91 	.word	0x0800ed91
 800ed34:	0800ed91 	.word	0x0800ed91
 800ed38:	0800ed91 	.word	0x0800ed91
 800ed3c:	0800ed81 	.word	0x0800ed81
 800ed40:	0800ed91 	.word	0x0800ed91
 800ed44:	0800ed91 	.word	0x0800ed91
 800ed48:	0800ed91 	.word	0x0800ed91
 800ed4c:	0800ed91 	.word	0x0800ed91
 800ed50:	0800ed91 	.word	0x0800ed91
 800ed54:	0800ed91 	.word	0x0800ed91
 800ed58:	0800ed91 	.word	0x0800ed91
 800ed5c:	0800ed89 	.word	0x0800ed89
 800ed60:	2301      	movs	r3, #1
 800ed62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed66:	e222      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ed68:	2304      	movs	r3, #4
 800ed6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed6e:	e21e      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ed70:	2308      	movs	r3, #8
 800ed72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed76:	e21a      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ed78:	2310      	movs	r3, #16
 800ed7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed7e:	e216      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ed80:	2320      	movs	r3, #32
 800ed82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed86:	e212      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ed88:	2340      	movs	r3, #64	; 0x40
 800ed8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed8e:	e20e      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ed90:	2380      	movs	r3, #128	; 0x80
 800ed92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed96:	e20a      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a69      	ldr	r2, [pc, #420]	; (800ef44 <UART_SetConfig+0x33c>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d130      	bne.n	800ee04 <UART_SetConfig+0x1fc>
 800eda2:	4b67      	ldr	r3, [pc, #412]	; (800ef40 <UART_SetConfig+0x338>)
 800eda4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eda6:	f003 0307 	and.w	r3, r3, #7
 800edaa:	2b05      	cmp	r3, #5
 800edac:	d826      	bhi.n	800edfc <UART_SetConfig+0x1f4>
 800edae:	a201      	add	r2, pc, #4	; (adr r2, 800edb4 <UART_SetConfig+0x1ac>)
 800edb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb4:	0800edcd 	.word	0x0800edcd
 800edb8:	0800edd5 	.word	0x0800edd5
 800edbc:	0800eddd 	.word	0x0800eddd
 800edc0:	0800ede5 	.word	0x0800ede5
 800edc4:	0800eded 	.word	0x0800eded
 800edc8:	0800edf5 	.word	0x0800edf5
 800edcc:	2300      	movs	r3, #0
 800edce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edd2:	e1ec      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800edd4:	2304      	movs	r3, #4
 800edd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edda:	e1e8      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800eddc:	2308      	movs	r3, #8
 800edde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ede2:	e1e4      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ede4:	2310      	movs	r3, #16
 800ede6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edea:	e1e0      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800edec:	2320      	movs	r3, #32
 800edee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edf2:	e1dc      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800edf4:	2340      	movs	r3, #64	; 0x40
 800edf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edfa:	e1d8      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800edfc:	2380      	movs	r3, #128	; 0x80
 800edfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee02:	e1d4      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a4f      	ldr	r2, [pc, #316]	; (800ef48 <UART_SetConfig+0x340>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d130      	bne.n	800ee70 <UART_SetConfig+0x268>
 800ee0e:	4b4c      	ldr	r3, [pc, #304]	; (800ef40 <UART_SetConfig+0x338>)
 800ee10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee12:	f003 0307 	and.w	r3, r3, #7
 800ee16:	2b05      	cmp	r3, #5
 800ee18:	d826      	bhi.n	800ee68 <UART_SetConfig+0x260>
 800ee1a:	a201      	add	r2, pc, #4	; (adr r2, 800ee20 <UART_SetConfig+0x218>)
 800ee1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee20:	0800ee39 	.word	0x0800ee39
 800ee24:	0800ee41 	.word	0x0800ee41
 800ee28:	0800ee49 	.word	0x0800ee49
 800ee2c:	0800ee51 	.word	0x0800ee51
 800ee30:	0800ee59 	.word	0x0800ee59
 800ee34:	0800ee61 	.word	0x0800ee61
 800ee38:	2300      	movs	r3, #0
 800ee3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee3e:	e1b6      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ee40:	2304      	movs	r3, #4
 800ee42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee46:	e1b2      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ee48:	2308      	movs	r3, #8
 800ee4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee4e:	e1ae      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ee50:	2310      	movs	r3, #16
 800ee52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee56:	e1aa      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ee58:	2320      	movs	r3, #32
 800ee5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee5e:	e1a6      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ee60:	2340      	movs	r3, #64	; 0x40
 800ee62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee66:	e1a2      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ee68:	2380      	movs	r3, #128	; 0x80
 800ee6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee6e:	e19e      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4a35      	ldr	r2, [pc, #212]	; (800ef4c <UART_SetConfig+0x344>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d130      	bne.n	800eedc <UART_SetConfig+0x2d4>
 800ee7a:	4b31      	ldr	r3, [pc, #196]	; (800ef40 <UART_SetConfig+0x338>)
 800ee7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee7e:	f003 0307 	and.w	r3, r3, #7
 800ee82:	2b05      	cmp	r3, #5
 800ee84:	d826      	bhi.n	800eed4 <UART_SetConfig+0x2cc>
 800ee86:	a201      	add	r2, pc, #4	; (adr r2, 800ee8c <UART_SetConfig+0x284>)
 800ee88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee8c:	0800eea5 	.word	0x0800eea5
 800ee90:	0800eead 	.word	0x0800eead
 800ee94:	0800eeb5 	.word	0x0800eeb5
 800ee98:	0800eebd 	.word	0x0800eebd
 800ee9c:	0800eec5 	.word	0x0800eec5
 800eea0:	0800eecd 	.word	0x0800eecd
 800eea4:	2300      	movs	r3, #0
 800eea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeaa:	e180      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800eeac:	2304      	movs	r3, #4
 800eeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeb2:	e17c      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800eeb4:	2308      	movs	r3, #8
 800eeb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeba:	e178      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800eebc:	2310      	movs	r3, #16
 800eebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eec2:	e174      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800eec4:	2320      	movs	r3, #32
 800eec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeca:	e170      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800eecc:	2340      	movs	r3, #64	; 0x40
 800eece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eed2:	e16c      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800eed4:	2380      	movs	r3, #128	; 0x80
 800eed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeda:	e168      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	4a1b      	ldr	r2, [pc, #108]	; (800ef50 <UART_SetConfig+0x348>)
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d142      	bne.n	800ef6c <UART_SetConfig+0x364>
 800eee6:	4b16      	ldr	r3, [pc, #88]	; (800ef40 <UART_SetConfig+0x338>)
 800eee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeea:	f003 0307 	and.w	r3, r3, #7
 800eeee:	2b05      	cmp	r3, #5
 800eef0:	d838      	bhi.n	800ef64 <UART_SetConfig+0x35c>
 800eef2:	a201      	add	r2, pc, #4	; (adr r2, 800eef8 <UART_SetConfig+0x2f0>)
 800eef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef8:	0800ef11 	.word	0x0800ef11
 800eefc:	0800ef19 	.word	0x0800ef19
 800ef00:	0800ef21 	.word	0x0800ef21
 800ef04:	0800ef29 	.word	0x0800ef29
 800ef08:	0800ef55 	.word	0x0800ef55
 800ef0c:	0800ef5d 	.word	0x0800ef5d
 800ef10:	2300      	movs	r3, #0
 800ef12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef16:	e14a      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ef18:	2304      	movs	r3, #4
 800ef1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef1e:	e146      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ef20:	2308      	movs	r3, #8
 800ef22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef26:	e142      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ef28:	2310      	movs	r3, #16
 800ef2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef2e:	e13e      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ef30:	cfff69f3 	.word	0xcfff69f3
 800ef34:	58000c00 	.word	0x58000c00
 800ef38:	11fff4ff 	.word	0x11fff4ff
 800ef3c:	40011000 	.word	0x40011000
 800ef40:	58024400 	.word	0x58024400
 800ef44:	40004400 	.word	0x40004400
 800ef48:	40004800 	.word	0x40004800
 800ef4c:	40004c00 	.word	0x40004c00
 800ef50:	40005000 	.word	0x40005000
 800ef54:	2320      	movs	r3, #32
 800ef56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef5a:	e128      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ef5c:	2340      	movs	r3, #64	; 0x40
 800ef5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef62:	e124      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ef64:	2380      	movs	r3, #128	; 0x80
 800ef66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6a:	e120      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4acb      	ldr	r2, [pc, #812]	; (800f2a0 <UART_SetConfig+0x698>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d176      	bne.n	800f064 <UART_SetConfig+0x45c>
 800ef76:	4bcb      	ldr	r3, [pc, #812]	; (800f2a4 <UART_SetConfig+0x69c>)
 800ef78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef7e:	2b28      	cmp	r3, #40	; 0x28
 800ef80:	d86c      	bhi.n	800f05c <UART_SetConfig+0x454>
 800ef82:	a201      	add	r2, pc, #4	; (adr r2, 800ef88 <UART_SetConfig+0x380>)
 800ef84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef88:	0800f02d 	.word	0x0800f02d
 800ef8c:	0800f05d 	.word	0x0800f05d
 800ef90:	0800f05d 	.word	0x0800f05d
 800ef94:	0800f05d 	.word	0x0800f05d
 800ef98:	0800f05d 	.word	0x0800f05d
 800ef9c:	0800f05d 	.word	0x0800f05d
 800efa0:	0800f05d 	.word	0x0800f05d
 800efa4:	0800f05d 	.word	0x0800f05d
 800efa8:	0800f035 	.word	0x0800f035
 800efac:	0800f05d 	.word	0x0800f05d
 800efb0:	0800f05d 	.word	0x0800f05d
 800efb4:	0800f05d 	.word	0x0800f05d
 800efb8:	0800f05d 	.word	0x0800f05d
 800efbc:	0800f05d 	.word	0x0800f05d
 800efc0:	0800f05d 	.word	0x0800f05d
 800efc4:	0800f05d 	.word	0x0800f05d
 800efc8:	0800f03d 	.word	0x0800f03d
 800efcc:	0800f05d 	.word	0x0800f05d
 800efd0:	0800f05d 	.word	0x0800f05d
 800efd4:	0800f05d 	.word	0x0800f05d
 800efd8:	0800f05d 	.word	0x0800f05d
 800efdc:	0800f05d 	.word	0x0800f05d
 800efe0:	0800f05d 	.word	0x0800f05d
 800efe4:	0800f05d 	.word	0x0800f05d
 800efe8:	0800f045 	.word	0x0800f045
 800efec:	0800f05d 	.word	0x0800f05d
 800eff0:	0800f05d 	.word	0x0800f05d
 800eff4:	0800f05d 	.word	0x0800f05d
 800eff8:	0800f05d 	.word	0x0800f05d
 800effc:	0800f05d 	.word	0x0800f05d
 800f000:	0800f05d 	.word	0x0800f05d
 800f004:	0800f05d 	.word	0x0800f05d
 800f008:	0800f04d 	.word	0x0800f04d
 800f00c:	0800f05d 	.word	0x0800f05d
 800f010:	0800f05d 	.word	0x0800f05d
 800f014:	0800f05d 	.word	0x0800f05d
 800f018:	0800f05d 	.word	0x0800f05d
 800f01c:	0800f05d 	.word	0x0800f05d
 800f020:	0800f05d 	.word	0x0800f05d
 800f024:	0800f05d 	.word	0x0800f05d
 800f028:	0800f055 	.word	0x0800f055
 800f02c:	2301      	movs	r3, #1
 800f02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f032:	e0bc      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f034:	2304      	movs	r3, #4
 800f036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03a:	e0b8      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f03c:	2308      	movs	r3, #8
 800f03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f042:	e0b4      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f044:	2310      	movs	r3, #16
 800f046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04a:	e0b0      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f04c:	2320      	movs	r3, #32
 800f04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f052:	e0ac      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f054:	2340      	movs	r3, #64	; 0x40
 800f056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05a:	e0a8      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f05c:	2380      	movs	r3, #128	; 0x80
 800f05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f062:	e0a4      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a8f      	ldr	r2, [pc, #572]	; (800f2a8 <UART_SetConfig+0x6a0>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d130      	bne.n	800f0d0 <UART_SetConfig+0x4c8>
 800f06e:	4b8d      	ldr	r3, [pc, #564]	; (800f2a4 <UART_SetConfig+0x69c>)
 800f070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f072:	f003 0307 	and.w	r3, r3, #7
 800f076:	2b05      	cmp	r3, #5
 800f078:	d826      	bhi.n	800f0c8 <UART_SetConfig+0x4c0>
 800f07a:	a201      	add	r2, pc, #4	; (adr r2, 800f080 <UART_SetConfig+0x478>)
 800f07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f080:	0800f099 	.word	0x0800f099
 800f084:	0800f0a1 	.word	0x0800f0a1
 800f088:	0800f0a9 	.word	0x0800f0a9
 800f08c:	0800f0b1 	.word	0x0800f0b1
 800f090:	0800f0b9 	.word	0x0800f0b9
 800f094:	0800f0c1 	.word	0x0800f0c1
 800f098:	2300      	movs	r3, #0
 800f09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f09e:	e086      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f0a0:	2304      	movs	r3, #4
 800f0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0a6:	e082      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f0a8:	2308      	movs	r3, #8
 800f0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ae:	e07e      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f0b0:	2310      	movs	r3, #16
 800f0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0b6:	e07a      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f0b8:	2320      	movs	r3, #32
 800f0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0be:	e076      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f0c0:	2340      	movs	r3, #64	; 0x40
 800f0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c6:	e072      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f0c8:	2380      	movs	r3, #128	; 0x80
 800f0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ce:	e06e      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4a75      	ldr	r2, [pc, #468]	; (800f2ac <UART_SetConfig+0x6a4>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d130      	bne.n	800f13c <UART_SetConfig+0x534>
 800f0da:	4b72      	ldr	r3, [pc, #456]	; (800f2a4 <UART_SetConfig+0x69c>)
 800f0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0de:	f003 0307 	and.w	r3, r3, #7
 800f0e2:	2b05      	cmp	r3, #5
 800f0e4:	d826      	bhi.n	800f134 <UART_SetConfig+0x52c>
 800f0e6:	a201      	add	r2, pc, #4	; (adr r2, 800f0ec <UART_SetConfig+0x4e4>)
 800f0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ec:	0800f105 	.word	0x0800f105
 800f0f0:	0800f10d 	.word	0x0800f10d
 800f0f4:	0800f115 	.word	0x0800f115
 800f0f8:	0800f11d 	.word	0x0800f11d
 800f0fc:	0800f125 	.word	0x0800f125
 800f100:	0800f12d 	.word	0x0800f12d
 800f104:	2300      	movs	r3, #0
 800f106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f10a:	e050      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f10c:	2304      	movs	r3, #4
 800f10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f112:	e04c      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f114:	2308      	movs	r3, #8
 800f116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f11a:	e048      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f11c:	2310      	movs	r3, #16
 800f11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f122:	e044      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f124:	2320      	movs	r3, #32
 800f126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f12a:	e040      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f12c:	2340      	movs	r3, #64	; 0x40
 800f12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f132:	e03c      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f134:	2380      	movs	r3, #128	; 0x80
 800f136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f13a:	e038      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4a5b      	ldr	r2, [pc, #364]	; (800f2b0 <UART_SetConfig+0x6a8>)
 800f142:	4293      	cmp	r3, r2
 800f144:	d130      	bne.n	800f1a8 <UART_SetConfig+0x5a0>
 800f146:	4b57      	ldr	r3, [pc, #348]	; (800f2a4 <UART_SetConfig+0x69c>)
 800f148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f14a:	f003 0307 	and.w	r3, r3, #7
 800f14e:	2b05      	cmp	r3, #5
 800f150:	d826      	bhi.n	800f1a0 <UART_SetConfig+0x598>
 800f152:	a201      	add	r2, pc, #4	; (adr r2, 800f158 <UART_SetConfig+0x550>)
 800f154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f158:	0800f171 	.word	0x0800f171
 800f15c:	0800f179 	.word	0x0800f179
 800f160:	0800f181 	.word	0x0800f181
 800f164:	0800f189 	.word	0x0800f189
 800f168:	0800f191 	.word	0x0800f191
 800f16c:	0800f199 	.word	0x0800f199
 800f170:	2302      	movs	r3, #2
 800f172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f176:	e01a      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f178:	2304      	movs	r3, #4
 800f17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f17e:	e016      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f180:	2308      	movs	r3, #8
 800f182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f186:	e012      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f188:	2310      	movs	r3, #16
 800f18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f18e:	e00e      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f190:	2320      	movs	r3, #32
 800f192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f196:	e00a      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f198:	2340      	movs	r3, #64	; 0x40
 800f19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f19e:	e006      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f1a0:	2380      	movs	r3, #128	; 0x80
 800f1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1a6:	e002      	b.n	800f1ae <UART_SetConfig+0x5a6>
 800f1a8:	2380      	movs	r3, #128	; 0x80
 800f1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	4a3f      	ldr	r2, [pc, #252]	; (800f2b0 <UART_SetConfig+0x6a8>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	f040 80f8 	bne.w	800f3aa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f1ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f1be:	2b20      	cmp	r3, #32
 800f1c0:	dc46      	bgt.n	800f250 <UART_SetConfig+0x648>
 800f1c2:	2b02      	cmp	r3, #2
 800f1c4:	f2c0 8082 	blt.w	800f2cc <UART_SetConfig+0x6c4>
 800f1c8:	3b02      	subs	r3, #2
 800f1ca:	2b1e      	cmp	r3, #30
 800f1cc:	d87e      	bhi.n	800f2cc <UART_SetConfig+0x6c4>
 800f1ce:	a201      	add	r2, pc, #4	; (adr r2, 800f1d4 <UART_SetConfig+0x5cc>)
 800f1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1d4:	0800f257 	.word	0x0800f257
 800f1d8:	0800f2cd 	.word	0x0800f2cd
 800f1dc:	0800f25f 	.word	0x0800f25f
 800f1e0:	0800f2cd 	.word	0x0800f2cd
 800f1e4:	0800f2cd 	.word	0x0800f2cd
 800f1e8:	0800f2cd 	.word	0x0800f2cd
 800f1ec:	0800f26f 	.word	0x0800f26f
 800f1f0:	0800f2cd 	.word	0x0800f2cd
 800f1f4:	0800f2cd 	.word	0x0800f2cd
 800f1f8:	0800f2cd 	.word	0x0800f2cd
 800f1fc:	0800f2cd 	.word	0x0800f2cd
 800f200:	0800f2cd 	.word	0x0800f2cd
 800f204:	0800f2cd 	.word	0x0800f2cd
 800f208:	0800f2cd 	.word	0x0800f2cd
 800f20c:	0800f27f 	.word	0x0800f27f
 800f210:	0800f2cd 	.word	0x0800f2cd
 800f214:	0800f2cd 	.word	0x0800f2cd
 800f218:	0800f2cd 	.word	0x0800f2cd
 800f21c:	0800f2cd 	.word	0x0800f2cd
 800f220:	0800f2cd 	.word	0x0800f2cd
 800f224:	0800f2cd 	.word	0x0800f2cd
 800f228:	0800f2cd 	.word	0x0800f2cd
 800f22c:	0800f2cd 	.word	0x0800f2cd
 800f230:	0800f2cd 	.word	0x0800f2cd
 800f234:	0800f2cd 	.word	0x0800f2cd
 800f238:	0800f2cd 	.word	0x0800f2cd
 800f23c:	0800f2cd 	.word	0x0800f2cd
 800f240:	0800f2cd 	.word	0x0800f2cd
 800f244:	0800f2cd 	.word	0x0800f2cd
 800f248:	0800f2cd 	.word	0x0800f2cd
 800f24c:	0800f2bf 	.word	0x0800f2bf
 800f250:	2b40      	cmp	r3, #64	; 0x40
 800f252:	d037      	beq.n	800f2c4 <UART_SetConfig+0x6bc>
 800f254:	e03a      	b.n	800f2cc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f256:	f7fc f8fd 	bl	800b454 <HAL_RCCEx_GetD3PCLK1Freq>
 800f25a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f25c:	e03c      	b.n	800f2d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f25e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f262:	4618      	mov	r0, r3
 800f264:	f7fc f90c 	bl	800b480 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f26c:	e034      	b.n	800f2d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f26e:	f107 0318 	add.w	r3, r7, #24
 800f272:	4618      	mov	r0, r3
 800f274:	f7fc fa58 	bl	800b728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f27c:	e02c      	b.n	800f2d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f27e:	4b09      	ldr	r3, [pc, #36]	; (800f2a4 <UART_SetConfig+0x69c>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f003 0320 	and.w	r3, r3, #32
 800f286:	2b00      	cmp	r3, #0
 800f288:	d016      	beq.n	800f2b8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f28a:	4b06      	ldr	r3, [pc, #24]	; (800f2a4 <UART_SetConfig+0x69c>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	08db      	lsrs	r3, r3, #3
 800f290:	f003 0303 	and.w	r3, r3, #3
 800f294:	4a07      	ldr	r2, [pc, #28]	; (800f2b4 <UART_SetConfig+0x6ac>)
 800f296:	fa22 f303 	lsr.w	r3, r2, r3
 800f29a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f29c:	e01c      	b.n	800f2d8 <UART_SetConfig+0x6d0>
 800f29e:	bf00      	nop
 800f2a0:	40011400 	.word	0x40011400
 800f2a4:	58024400 	.word	0x58024400
 800f2a8:	40007800 	.word	0x40007800
 800f2ac:	40007c00 	.word	0x40007c00
 800f2b0:	58000c00 	.word	0x58000c00
 800f2b4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f2b8:	4b9d      	ldr	r3, [pc, #628]	; (800f530 <UART_SetConfig+0x928>)
 800f2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2bc:	e00c      	b.n	800f2d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f2be:	4b9d      	ldr	r3, [pc, #628]	; (800f534 <UART_SetConfig+0x92c>)
 800f2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2c2:	e009      	b.n	800f2d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2ca:	e005      	b.n	800f2d8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f2d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	f000 81de 	beq.w	800f69c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e4:	4a94      	ldr	r2, [pc, #592]	; (800f538 <UART_SetConfig+0x930>)
 800f2e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2f2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	685a      	ldr	r2, [r3, #4]
 800f2f8:	4613      	mov	r3, r2
 800f2fa:	005b      	lsls	r3, r3, #1
 800f2fc:	4413      	add	r3, r2
 800f2fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f300:	429a      	cmp	r2, r3
 800f302:	d305      	bcc.n	800f310 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f30a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d903      	bls.n	800f318 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f310:	2301      	movs	r3, #1
 800f312:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f316:	e1c1      	b.n	800f69c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f31a:	2200      	movs	r2, #0
 800f31c:	60bb      	str	r3, [r7, #8]
 800f31e:	60fa      	str	r2, [r7, #12]
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f324:	4a84      	ldr	r2, [pc, #528]	; (800f538 <UART_SetConfig+0x930>)
 800f326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	2200      	movs	r2, #0
 800f32e:	603b      	str	r3, [r7, #0]
 800f330:	607a      	str	r2, [r7, #4]
 800f332:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f336:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f33a:	f7f0 ffcd 	bl	80002d8 <__aeabi_uldivmod>
 800f33e:	4602      	mov	r2, r0
 800f340:	460b      	mov	r3, r1
 800f342:	4610      	mov	r0, r2
 800f344:	4619      	mov	r1, r3
 800f346:	f04f 0200 	mov.w	r2, #0
 800f34a:	f04f 0300 	mov.w	r3, #0
 800f34e:	020b      	lsls	r3, r1, #8
 800f350:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f354:	0202      	lsls	r2, r0, #8
 800f356:	6979      	ldr	r1, [r7, #20]
 800f358:	6849      	ldr	r1, [r1, #4]
 800f35a:	0849      	lsrs	r1, r1, #1
 800f35c:	2000      	movs	r0, #0
 800f35e:	460c      	mov	r4, r1
 800f360:	4605      	mov	r5, r0
 800f362:	eb12 0804 	adds.w	r8, r2, r4
 800f366:	eb43 0905 	adc.w	r9, r3, r5
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	2200      	movs	r2, #0
 800f370:	469a      	mov	sl, r3
 800f372:	4693      	mov	fp, r2
 800f374:	4652      	mov	r2, sl
 800f376:	465b      	mov	r3, fp
 800f378:	4640      	mov	r0, r8
 800f37a:	4649      	mov	r1, r9
 800f37c:	f7f0 ffac 	bl	80002d8 <__aeabi_uldivmod>
 800f380:	4602      	mov	r2, r0
 800f382:	460b      	mov	r3, r1
 800f384:	4613      	mov	r3, r2
 800f386:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f38e:	d308      	bcc.n	800f3a2 <UART_SetConfig+0x79a>
 800f390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f396:	d204      	bcs.n	800f3a2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f39e:	60da      	str	r2, [r3, #12]
 800f3a0:	e17c      	b.n	800f69c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f3a8:	e178      	b.n	800f69c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	69db      	ldr	r3, [r3, #28]
 800f3ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3b2:	f040 80c5 	bne.w	800f540 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f3b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f3ba:	2b20      	cmp	r3, #32
 800f3bc:	dc48      	bgt.n	800f450 <UART_SetConfig+0x848>
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	db7b      	blt.n	800f4ba <UART_SetConfig+0x8b2>
 800f3c2:	2b20      	cmp	r3, #32
 800f3c4:	d879      	bhi.n	800f4ba <UART_SetConfig+0x8b2>
 800f3c6:	a201      	add	r2, pc, #4	; (adr r2, 800f3cc <UART_SetConfig+0x7c4>)
 800f3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3cc:	0800f457 	.word	0x0800f457
 800f3d0:	0800f45f 	.word	0x0800f45f
 800f3d4:	0800f4bb 	.word	0x0800f4bb
 800f3d8:	0800f4bb 	.word	0x0800f4bb
 800f3dc:	0800f467 	.word	0x0800f467
 800f3e0:	0800f4bb 	.word	0x0800f4bb
 800f3e4:	0800f4bb 	.word	0x0800f4bb
 800f3e8:	0800f4bb 	.word	0x0800f4bb
 800f3ec:	0800f477 	.word	0x0800f477
 800f3f0:	0800f4bb 	.word	0x0800f4bb
 800f3f4:	0800f4bb 	.word	0x0800f4bb
 800f3f8:	0800f4bb 	.word	0x0800f4bb
 800f3fc:	0800f4bb 	.word	0x0800f4bb
 800f400:	0800f4bb 	.word	0x0800f4bb
 800f404:	0800f4bb 	.word	0x0800f4bb
 800f408:	0800f4bb 	.word	0x0800f4bb
 800f40c:	0800f487 	.word	0x0800f487
 800f410:	0800f4bb 	.word	0x0800f4bb
 800f414:	0800f4bb 	.word	0x0800f4bb
 800f418:	0800f4bb 	.word	0x0800f4bb
 800f41c:	0800f4bb 	.word	0x0800f4bb
 800f420:	0800f4bb 	.word	0x0800f4bb
 800f424:	0800f4bb 	.word	0x0800f4bb
 800f428:	0800f4bb 	.word	0x0800f4bb
 800f42c:	0800f4bb 	.word	0x0800f4bb
 800f430:	0800f4bb 	.word	0x0800f4bb
 800f434:	0800f4bb 	.word	0x0800f4bb
 800f438:	0800f4bb 	.word	0x0800f4bb
 800f43c:	0800f4bb 	.word	0x0800f4bb
 800f440:	0800f4bb 	.word	0x0800f4bb
 800f444:	0800f4bb 	.word	0x0800f4bb
 800f448:	0800f4bb 	.word	0x0800f4bb
 800f44c:	0800f4ad 	.word	0x0800f4ad
 800f450:	2b40      	cmp	r3, #64	; 0x40
 800f452:	d02e      	beq.n	800f4b2 <UART_SetConfig+0x8aa>
 800f454:	e031      	b.n	800f4ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f456:	f7fa f847 	bl	80094e8 <HAL_RCC_GetPCLK1Freq>
 800f45a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f45c:	e033      	b.n	800f4c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f45e:	f7fa f859 	bl	8009514 <HAL_RCC_GetPCLK2Freq>
 800f462:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f464:	e02f      	b.n	800f4c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7fc f808 	bl	800b480 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f474:	e027      	b.n	800f4c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f476:	f107 0318 	add.w	r3, r7, #24
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fc f954 	bl	800b728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f484:	e01f      	b.n	800f4c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f486:	4b2d      	ldr	r3, [pc, #180]	; (800f53c <UART_SetConfig+0x934>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	f003 0320 	and.w	r3, r3, #32
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d009      	beq.n	800f4a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f492:	4b2a      	ldr	r3, [pc, #168]	; (800f53c <UART_SetConfig+0x934>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	08db      	lsrs	r3, r3, #3
 800f498:	f003 0303 	and.w	r3, r3, #3
 800f49c:	4a24      	ldr	r2, [pc, #144]	; (800f530 <UART_SetConfig+0x928>)
 800f49e:	fa22 f303 	lsr.w	r3, r2, r3
 800f4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f4a4:	e00f      	b.n	800f4c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f4a6:	4b22      	ldr	r3, [pc, #136]	; (800f530 <UART_SetConfig+0x928>)
 800f4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4aa:	e00c      	b.n	800f4c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f4ac:	4b21      	ldr	r3, [pc, #132]	; (800f534 <UART_SetConfig+0x92c>)
 800f4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4b0:	e009      	b.n	800f4c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4b8:	e005      	b.n	800f4c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f4c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	f000 80e7 	beq.w	800f69c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d2:	4a19      	ldr	r2, [pc, #100]	; (800f538 <UART_SetConfig+0x930>)
 800f4d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4d8:	461a      	mov	r2, r3
 800f4da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4e0:	005a      	lsls	r2, r3, #1
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	085b      	lsrs	r3, r3, #1
 800f4e8:	441a      	add	r2, r3
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f6:	2b0f      	cmp	r3, #15
 800f4f8:	d916      	bls.n	800f528 <UART_SetConfig+0x920>
 800f4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f500:	d212      	bcs.n	800f528 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f504:	b29b      	uxth	r3, r3
 800f506:	f023 030f 	bic.w	r3, r3, #15
 800f50a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50e:	085b      	lsrs	r3, r3, #1
 800f510:	b29b      	uxth	r3, r3
 800f512:	f003 0307 	and.w	r3, r3, #7
 800f516:	b29a      	uxth	r2, r3
 800f518:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f51a:	4313      	orrs	r3, r2
 800f51c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f524:	60da      	str	r2, [r3, #12]
 800f526:	e0b9      	b.n	800f69c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f528:	2301      	movs	r3, #1
 800f52a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f52e:	e0b5      	b.n	800f69c <UART_SetConfig+0xa94>
 800f530:	03d09000 	.word	0x03d09000
 800f534:	003d0900 	.word	0x003d0900
 800f538:	08010d40 	.word	0x08010d40
 800f53c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f540:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f544:	2b20      	cmp	r3, #32
 800f546:	dc49      	bgt.n	800f5dc <UART_SetConfig+0x9d4>
 800f548:	2b00      	cmp	r3, #0
 800f54a:	db7c      	blt.n	800f646 <UART_SetConfig+0xa3e>
 800f54c:	2b20      	cmp	r3, #32
 800f54e:	d87a      	bhi.n	800f646 <UART_SetConfig+0xa3e>
 800f550:	a201      	add	r2, pc, #4	; (adr r2, 800f558 <UART_SetConfig+0x950>)
 800f552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f556:	bf00      	nop
 800f558:	0800f5e3 	.word	0x0800f5e3
 800f55c:	0800f5eb 	.word	0x0800f5eb
 800f560:	0800f647 	.word	0x0800f647
 800f564:	0800f647 	.word	0x0800f647
 800f568:	0800f5f3 	.word	0x0800f5f3
 800f56c:	0800f647 	.word	0x0800f647
 800f570:	0800f647 	.word	0x0800f647
 800f574:	0800f647 	.word	0x0800f647
 800f578:	0800f603 	.word	0x0800f603
 800f57c:	0800f647 	.word	0x0800f647
 800f580:	0800f647 	.word	0x0800f647
 800f584:	0800f647 	.word	0x0800f647
 800f588:	0800f647 	.word	0x0800f647
 800f58c:	0800f647 	.word	0x0800f647
 800f590:	0800f647 	.word	0x0800f647
 800f594:	0800f647 	.word	0x0800f647
 800f598:	0800f613 	.word	0x0800f613
 800f59c:	0800f647 	.word	0x0800f647
 800f5a0:	0800f647 	.word	0x0800f647
 800f5a4:	0800f647 	.word	0x0800f647
 800f5a8:	0800f647 	.word	0x0800f647
 800f5ac:	0800f647 	.word	0x0800f647
 800f5b0:	0800f647 	.word	0x0800f647
 800f5b4:	0800f647 	.word	0x0800f647
 800f5b8:	0800f647 	.word	0x0800f647
 800f5bc:	0800f647 	.word	0x0800f647
 800f5c0:	0800f647 	.word	0x0800f647
 800f5c4:	0800f647 	.word	0x0800f647
 800f5c8:	0800f647 	.word	0x0800f647
 800f5cc:	0800f647 	.word	0x0800f647
 800f5d0:	0800f647 	.word	0x0800f647
 800f5d4:	0800f647 	.word	0x0800f647
 800f5d8:	0800f639 	.word	0x0800f639
 800f5dc:	2b40      	cmp	r3, #64	; 0x40
 800f5de:	d02e      	beq.n	800f63e <UART_SetConfig+0xa36>
 800f5e0:	e031      	b.n	800f646 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5e2:	f7f9 ff81 	bl	80094e8 <HAL_RCC_GetPCLK1Freq>
 800f5e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5e8:	e033      	b.n	800f652 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5ea:	f7f9 ff93 	bl	8009514 <HAL_RCC_GetPCLK2Freq>
 800f5ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5f0:	e02f      	b.n	800f652 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7fb ff42 	bl	800b480 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f600:	e027      	b.n	800f652 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f602:	f107 0318 	add.w	r3, r7, #24
 800f606:	4618      	mov	r0, r3
 800f608:	f7fc f88e 	bl	800b728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f610:	e01f      	b.n	800f652 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f612:	4b2d      	ldr	r3, [pc, #180]	; (800f6c8 <UART_SetConfig+0xac0>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f003 0320 	and.w	r3, r3, #32
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d009      	beq.n	800f632 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f61e:	4b2a      	ldr	r3, [pc, #168]	; (800f6c8 <UART_SetConfig+0xac0>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	08db      	lsrs	r3, r3, #3
 800f624:	f003 0303 	and.w	r3, r3, #3
 800f628:	4a28      	ldr	r2, [pc, #160]	; (800f6cc <UART_SetConfig+0xac4>)
 800f62a:	fa22 f303 	lsr.w	r3, r2, r3
 800f62e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f630:	e00f      	b.n	800f652 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f632:	4b26      	ldr	r3, [pc, #152]	; (800f6cc <UART_SetConfig+0xac4>)
 800f634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f636:	e00c      	b.n	800f652 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f638:	4b25      	ldr	r3, [pc, #148]	; (800f6d0 <UART_SetConfig+0xac8>)
 800f63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f63c:	e009      	b.n	800f652 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f63e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f644:	e005      	b.n	800f652 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f646:	2300      	movs	r3, #0
 800f648:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f64a:	2301      	movs	r3, #1
 800f64c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f650:	bf00      	nop
    }

    if (pclk != 0U)
 800f652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f654:	2b00      	cmp	r3, #0
 800f656:	d021      	beq.n	800f69c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f65c:	4a1d      	ldr	r2, [pc, #116]	; (800f6d4 <UART_SetConfig+0xacc>)
 800f65e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f662:	461a      	mov	r2, r3
 800f664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f666:	fbb3 f2f2 	udiv	r2, r3, r2
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	685b      	ldr	r3, [r3, #4]
 800f66e:	085b      	lsrs	r3, r3, #1
 800f670:	441a      	add	r2, r3
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	685b      	ldr	r3, [r3, #4]
 800f676:	fbb2 f3f3 	udiv	r3, r2, r3
 800f67a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67e:	2b0f      	cmp	r3, #15
 800f680:	d909      	bls.n	800f696 <UART_SetConfig+0xa8e>
 800f682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f688:	d205      	bcs.n	800f696 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68c:	b29a      	uxth	r2, r3
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	60da      	str	r2, [r3, #12]
 800f694:	e002      	b.n	800f69c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f696:	2301      	movs	r3, #1
 800f698:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	2201      	movs	r2, #1
 800f6a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f6b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3748      	adds	r7, #72	; 0x48
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f6c6:	bf00      	nop
 800f6c8:	58024400 	.word	0x58024400
 800f6cc:	03d09000 	.word	0x03d09000
 800f6d0:	003d0900 	.word	0x003d0900
 800f6d4:	08010d40 	.word	0x08010d40

0800f6d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6e4:	f003 0308 	and.w	r3, r3, #8
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00a      	beq.n	800f702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	430a      	orrs	r2, r1
 800f700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f706:	f003 0301 	and.w	r3, r3, #1
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00a      	beq.n	800f724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	430a      	orrs	r2, r1
 800f722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f728:	f003 0302 	and.w	r3, r3, #2
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d00a      	beq.n	800f746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	430a      	orrs	r2, r1
 800f744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f74a:	f003 0304 	and.w	r3, r3, #4
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00a      	beq.n	800f768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	685b      	ldr	r3, [r3, #4]
 800f758:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	430a      	orrs	r2, r1
 800f766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f76c:	f003 0310 	and.w	r3, r3, #16
 800f770:	2b00      	cmp	r3, #0
 800f772:	d00a      	beq.n	800f78a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	430a      	orrs	r2, r1
 800f788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f78e:	f003 0320 	and.w	r3, r3, #32
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00a      	beq.n	800f7ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	689b      	ldr	r3, [r3, #8]
 800f79c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	430a      	orrs	r2, r1
 800f7aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d01a      	beq.n	800f7ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	430a      	orrs	r2, r1
 800f7cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f7d6:	d10a      	bne.n	800f7ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	430a      	orrs	r2, r1
 800f7ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d00a      	beq.n	800f810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	430a      	orrs	r2, r1
 800f80e:	605a      	str	r2, [r3, #4]
  }
}
 800f810:	bf00      	nop
 800f812:	370c      	adds	r7, #12
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr

0800f81c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b098      	sub	sp, #96	; 0x60
 800f820:	af02      	add	r7, sp, #8
 800f822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2200      	movs	r2, #0
 800f828:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f82c:	f7f2 fff8 	bl	8002820 <HAL_GetTick>
 800f830:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f003 0308 	and.w	r3, r3, #8
 800f83c:	2b08      	cmp	r3, #8
 800f83e:	d12f      	bne.n	800f8a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f844:	9300      	str	r3, [sp, #0]
 800f846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f848:	2200      	movs	r2, #0
 800f84a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 f88e 	bl	800f970 <UART_WaitOnFlagUntilTimeout>
 800f854:	4603      	mov	r3, r0
 800f856:	2b00      	cmp	r3, #0
 800f858:	d022      	beq.n	800f8a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f862:	e853 3f00 	ldrex	r3, [r3]
 800f866:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f86a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f86e:	653b      	str	r3, [r7, #80]	; 0x50
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	461a      	mov	r2, r3
 800f876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f878:	647b      	str	r3, [r7, #68]	; 0x44
 800f87a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f87c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f87e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f880:	e841 2300 	strex	r3, r2, [r1]
 800f884:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d1e6      	bne.n	800f85a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2220      	movs	r2, #32
 800f890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2200      	movs	r2, #0
 800f898:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f89c:	2303      	movs	r3, #3
 800f89e:	e063      	b.n	800f968 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f003 0304 	and.w	r3, r3, #4
 800f8aa:	2b04      	cmp	r3, #4
 800f8ac:	d149      	bne.n	800f942 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f8ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f8b2:	9300      	str	r3, [sp, #0]
 800f8b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f000 f857 	bl	800f970 <UART_WaitOnFlagUntilTimeout>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d03c      	beq.n	800f942 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d0:	e853 3f00 	ldrex	r3, [r3]
 800f8d4:	623b      	str	r3, [r7, #32]
   return(result);
 800f8d6:	6a3b      	ldr	r3, [r7, #32]
 800f8d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8e6:	633b      	str	r3, [r7, #48]	; 0x30
 800f8e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8ee:	e841 2300 	strex	r3, r2, [r1]
 800f8f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d1e6      	bne.n	800f8c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	3308      	adds	r3, #8
 800f900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	e853 3f00 	ldrex	r3, [r3]
 800f908:	60fb      	str	r3, [r7, #12]
   return(result);
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f023 0301 	bic.w	r3, r3, #1
 800f910:	64bb      	str	r3, [r7, #72]	; 0x48
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	3308      	adds	r3, #8
 800f918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f91a:	61fa      	str	r2, [r7, #28]
 800f91c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f91e:	69b9      	ldr	r1, [r7, #24]
 800f920:	69fa      	ldr	r2, [r7, #28]
 800f922:	e841 2300 	strex	r3, r2, [r1]
 800f926:	617b      	str	r3, [r7, #20]
   return(result);
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d1e5      	bne.n	800f8fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2220      	movs	r2, #32
 800f932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2200      	movs	r2, #0
 800f93a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f93e:	2303      	movs	r3, #3
 800f940:	e012      	b.n	800f968 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2220      	movs	r2, #32
 800f946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2220      	movs	r2, #32
 800f94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2200      	movs	r2, #0
 800f956:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2200      	movs	r2, #0
 800f95c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f966:	2300      	movs	r3, #0
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3758      	adds	r7, #88	; 0x58
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	603b      	str	r3, [r7, #0]
 800f97c:	4613      	mov	r3, r2
 800f97e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f980:	e04f      	b.n	800fa22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f982:	69bb      	ldr	r3, [r7, #24]
 800f984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f988:	d04b      	beq.n	800fa22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f98a:	f7f2 ff49 	bl	8002820 <HAL_GetTick>
 800f98e:	4602      	mov	r2, r0
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	1ad3      	subs	r3, r2, r3
 800f994:	69ba      	ldr	r2, [r7, #24]
 800f996:	429a      	cmp	r2, r3
 800f998:	d302      	bcc.n	800f9a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d101      	bne.n	800f9a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f9a0:	2303      	movs	r3, #3
 800f9a2:	e04e      	b.n	800fa42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f003 0304 	and.w	r3, r3, #4
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d037      	beq.n	800fa22 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	2b80      	cmp	r3, #128	; 0x80
 800f9b6:	d034      	beq.n	800fa22 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	2b40      	cmp	r3, #64	; 0x40
 800f9bc:	d031      	beq.n	800fa22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	69db      	ldr	r3, [r3, #28]
 800f9c4:	f003 0308 	and.w	r3, r3, #8
 800f9c8:	2b08      	cmp	r3, #8
 800f9ca:	d110      	bne.n	800f9ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2208      	movs	r2, #8
 800f9d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f9d4:	68f8      	ldr	r0, [r7, #12]
 800f9d6:	f000 f95b 	bl	800fc90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2208      	movs	r2, #8
 800f9de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	e029      	b.n	800fa42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	69db      	ldr	r3, [r3, #28]
 800f9f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f9f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f9fc:	d111      	bne.n	800fa22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fa08:	68f8      	ldr	r0, [r7, #12]
 800fa0a:	f000 f941 	bl	800fc90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2220      	movs	r2, #32
 800fa12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fa1e:	2303      	movs	r3, #3
 800fa20:	e00f      	b.n	800fa42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	69da      	ldr	r2, [r3, #28]
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	4013      	ands	r3, r2
 800fa2c:	68ba      	ldr	r2, [r7, #8]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	bf0c      	ite	eq
 800fa32:	2301      	moveq	r3, #1
 800fa34:	2300      	movne	r3, #0
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	461a      	mov	r2, r3
 800fa3a:	79fb      	ldrb	r3, [r7, #7]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d0a0      	beq.n	800f982 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fa40:	2300      	movs	r3, #0
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3710      	adds	r7, #16
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
	...

0800fa4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b0a3      	sub	sp, #140	; 0x8c
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	60f8      	str	r0, [r7, #12]
 800fa54:	60b9      	str	r1, [r7, #8]
 800fa56:	4613      	mov	r3, r2
 800fa58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	68ba      	ldr	r2, [r7, #8]
 800fa5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	88fa      	ldrh	r2, [r7, #6]
 800fa64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	88fa      	ldrh	r2, [r7, #6]
 800fa6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	2200      	movs	r2, #0
 800fa74:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	689b      	ldr	r3, [r3, #8]
 800fa7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa7e:	d10e      	bne.n	800fa9e <UART_Start_Receive_IT+0x52>
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	691b      	ldr	r3, [r3, #16]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d105      	bne.n	800fa94 <UART_Start_Receive_IT+0x48>
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fa8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa92:	e02d      	b.n	800faf0 <UART_Start_Receive_IT+0xa4>
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	22ff      	movs	r2, #255	; 0xff
 800fa98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa9c:	e028      	b.n	800faf0 <UART_Start_Receive_IT+0xa4>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	689b      	ldr	r3, [r3, #8]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d10d      	bne.n	800fac2 <UART_Start_Receive_IT+0x76>
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	691b      	ldr	r3, [r3, #16]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d104      	bne.n	800fab8 <UART_Start_Receive_IT+0x6c>
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	22ff      	movs	r2, #255	; 0xff
 800fab2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fab6:	e01b      	b.n	800faf0 <UART_Start_Receive_IT+0xa4>
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	227f      	movs	r2, #127	; 0x7f
 800fabc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fac0:	e016      	b.n	800faf0 <UART_Start_Receive_IT+0xa4>
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	689b      	ldr	r3, [r3, #8]
 800fac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800faca:	d10d      	bne.n	800fae8 <UART_Start_Receive_IT+0x9c>
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	691b      	ldr	r3, [r3, #16]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d104      	bne.n	800fade <UART_Start_Receive_IT+0x92>
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	227f      	movs	r2, #127	; 0x7f
 800fad8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fadc:	e008      	b.n	800faf0 <UART_Start_Receive_IT+0xa4>
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	223f      	movs	r2, #63	; 0x3f
 800fae2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fae6:	e003      	b.n	800faf0 <UART_Start_Receive_IT+0xa4>
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2200      	movs	r2, #0
 800faec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2200      	movs	r2, #0
 800faf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	2222      	movs	r2, #34	; 0x22
 800fafc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	3308      	adds	r3, #8
 800fb06:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb0a:	e853 3f00 	ldrex	r3, [r3]
 800fb0e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fb10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb12:	f043 0301 	orr.w	r3, r3, #1
 800fb16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	3308      	adds	r3, #8
 800fb20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fb24:	673a      	str	r2, [r7, #112]	; 0x70
 800fb26:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb28:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fb2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fb2c:	e841 2300 	strex	r3, r2, [r1]
 800fb30:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fb32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d1e3      	bne.n	800fb00 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fb40:	d14f      	bne.n	800fbe2 <UART_Start_Receive_IT+0x196>
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fb48:	88fa      	ldrh	r2, [r7, #6]
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d349      	bcc.n	800fbe2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	689b      	ldr	r3, [r3, #8]
 800fb52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb56:	d107      	bne.n	800fb68 <UART_Start_Receive_IT+0x11c>
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	691b      	ldr	r3, [r3, #16]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d103      	bne.n	800fb68 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	4a47      	ldr	r2, [pc, #284]	; (800fc80 <UART_Start_Receive_IT+0x234>)
 800fb64:	675a      	str	r2, [r3, #116]	; 0x74
 800fb66:	e002      	b.n	800fb6e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	4a46      	ldr	r2, [pc, #280]	; (800fc84 <UART_Start_Receive_IT+0x238>)
 800fb6c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	691b      	ldr	r3, [r3, #16]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d01a      	beq.n	800fbac <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb7e:	e853 3f00 	ldrex	r3, [r3]
 800fb82:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fb84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	461a      	mov	r2, r3
 800fb94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb98:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb9a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fba0:	e841 2300 	strex	r3, r2, [r1]
 800fba4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d1e4      	bne.n	800fb76 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	3308      	adds	r3, #8
 800fbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbb6:	e853 3f00 	ldrex	r3, [r3]
 800fbba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fbc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	3308      	adds	r3, #8
 800fbca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fbcc:	64ba      	str	r2, [r7, #72]	; 0x48
 800fbce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbd0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fbd4:	e841 2300 	strex	r3, r2, [r1]
 800fbd8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fbda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d1e5      	bne.n	800fbac <UART_Start_Receive_IT+0x160>
 800fbe0:	e046      	b.n	800fc70 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	689b      	ldr	r3, [r3, #8]
 800fbe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbea:	d107      	bne.n	800fbfc <UART_Start_Receive_IT+0x1b0>
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	691b      	ldr	r3, [r3, #16]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d103      	bne.n	800fbfc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	4a24      	ldr	r2, [pc, #144]	; (800fc88 <UART_Start_Receive_IT+0x23c>)
 800fbf8:	675a      	str	r2, [r3, #116]	; 0x74
 800fbfa:	e002      	b.n	800fc02 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	4a23      	ldr	r2, [pc, #140]	; (800fc8c <UART_Start_Receive_IT+0x240>)
 800fc00:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	691b      	ldr	r3, [r3, #16]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d019      	beq.n	800fc3e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc12:	e853 3f00 	ldrex	r3, [r3]
 800fc16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fc1e:	677b      	str	r3, [r7, #116]	; 0x74
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	461a      	mov	r2, r3
 800fc26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc28:	637b      	str	r3, [r7, #52]	; 0x34
 800fc2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fc2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc30:	e841 2300 	strex	r3, r2, [r1]
 800fc34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d1e6      	bne.n	800fc0a <UART_Start_Receive_IT+0x1be>
 800fc3c:	e018      	b.n	800fc70 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	e853 3f00 	ldrex	r3, [r3]
 800fc4a:	613b      	str	r3, [r7, #16]
   return(result);
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	f043 0320 	orr.w	r3, r3, #32
 800fc52:	67bb      	str	r3, [r7, #120]	; 0x78
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	461a      	mov	r2, r3
 800fc5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc5c:	623b      	str	r3, [r7, #32]
 800fc5e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc60:	69f9      	ldr	r1, [r7, #28]
 800fc62:	6a3a      	ldr	r2, [r7, #32]
 800fc64:	e841 2300 	strex	r3, r2, [r1]
 800fc68:	61bb      	str	r3, [r7, #24]
   return(result);
 800fc6a:	69bb      	ldr	r3, [r7, #24]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d1e6      	bne.n	800fc3e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fc70:	2300      	movs	r3, #0
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	378c      	adds	r7, #140	; 0x8c
 800fc76:	46bd      	mov	sp, r7
 800fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7c:	4770      	bx	lr
 800fc7e:	bf00      	nop
 800fc80:	080104b1 	.word	0x080104b1
 800fc84:	08010151 	.word	0x08010151
 800fc88:	0800ff99 	.word	0x0800ff99
 800fc8c:	0800fde1 	.word	0x0800fde1

0800fc90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b095      	sub	sp, #84	; 0x54
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fca0:	e853 3f00 	ldrex	r3, [r3]
 800fca4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fcac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcb6:	643b      	str	r3, [r7, #64]	; 0x40
 800fcb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fcbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fcbe:	e841 2300 	strex	r3, r2, [r1]
 800fcc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d1e6      	bne.n	800fc98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	3308      	adds	r3, #8
 800fcd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd2:	6a3b      	ldr	r3, [r7, #32]
 800fcd4:	e853 3f00 	ldrex	r3, [r3]
 800fcd8:	61fb      	str	r3, [r7, #28]
   return(result);
 800fcda:	69fa      	ldr	r2, [r7, #28]
 800fcdc:	4b1e      	ldr	r3, [pc, #120]	; (800fd58 <UART_EndRxTransfer+0xc8>)
 800fcde:	4013      	ands	r3, r2
 800fce0:	64bb      	str	r3, [r7, #72]	; 0x48
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	3308      	adds	r3, #8
 800fce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fcec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fcf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcf2:	e841 2300 	strex	r3, r2, [r1]
 800fcf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d1e5      	bne.n	800fcca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d118      	bne.n	800fd38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	e853 3f00 	ldrex	r3, [r3]
 800fd12:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	f023 0310 	bic.w	r3, r3, #16
 800fd1a:	647b      	str	r3, [r7, #68]	; 0x44
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	461a      	mov	r2, r3
 800fd22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd24:	61bb      	str	r3, [r7, #24]
 800fd26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd28:	6979      	ldr	r1, [r7, #20]
 800fd2a:	69ba      	ldr	r2, [r7, #24]
 800fd2c:	e841 2300 	strex	r3, r2, [r1]
 800fd30:	613b      	str	r3, [r7, #16]
   return(result);
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d1e6      	bne.n	800fd06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2220      	movs	r2, #32
 800fd3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fd4c:	bf00      	nop
 800fd4e:	3754      	adds	r7, #84	; 0x54
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr
 800fd58:	effffffe 	.word	0xeffffffe

0800fd5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b084      	sub	sp, #16
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2200      	movs	r2, #0
 800fd76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd7a:	68f8      	ldr	r0, [r7, #12]
 800fd7c:	f7fe ff2e 	bl	800ebdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd80:	bf00      	nop
 800fd82:	3710      	adds	r7, #16
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b088      	sub	sp, #32
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	e853 3f00 	ldrex	r3, [r3]
 800fd9c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fda4:	61fb      	str	r3, [r7, #28]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	461a      	mov	r2, r3
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	61bb      	str	r3, [r7, #24]
 800fdb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb2:	6979      	ldr	r1, [r7, #20]
 800fdb4:	69ba      	ldr	r2, [r7, #24]
 800fdb6:	e841 2300 	strex	r3, r2, [r1]
 800fdba:	613b      	str	r3, [r7, #16]
   return(result);
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d1e6      	bne.n	800fd90 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2220      	movs	r2, #32
 800fdc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f7fe fef9 	bl	800ebc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fdd6:	bf00      	nop
 800fdd8:	3720      	adds	r7, #32
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
	...

0800fde0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b09c      	sub	sp, #112	; 0x70
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fdee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdf8:	2b22      	cmp	r3, #34	; 0x22
 800fdfa:	f040 80be 	bne.w	800ff7a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fe08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fe0c:	b2d9      	uxtb	r1, r3
 800fe0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fe12:	b2da      	uxtb	r2, r3
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe18:	400a      	ands	r2, r1
 800fe1a:	b2d2      	uxtb	r2, r2
 800fe1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe22:	1c5a      	adds	r2, r3, #1
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	3b01      	subs	r3, #1
 800fe32:	b29a      	uxth	r2, r3
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	f040 80a1 	bne.w	800ff8a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe50:	e853 3f00 	ldrex	r3, [r3]
 800fe54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fe56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe5c:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	461a      	mov	r2, r3
 800fe64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe66:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe6e:	e841 2300 	strex	r3, r2, [r1]
 800fe72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fe74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d1e6      	bne.n	800fe48 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	3308      	adds	r3, #8
 800fe80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe84:	e853 3f00 	ldrex	r3, [r3]
 800fe88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fe8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe8c:	f023 0301 	bic.w	r3, r3, #1
 800fe90:	667b      	str	r3, [r7, #100]	; 0x64
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	3308      	adds	r3, #8
 800fe98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe9a:	647a      	str	r2, [r7, #68]	; 0x44
 800fe9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fea2:	e841 2300 	strex	r3, r2, [r1]
 800fea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d1e5      	bne.n	800fe7a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2220      	movs	r2, #32
 800feb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2200      	movs	r2, #0
 800feba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	4a33      	ldr	r2, [pc, #204]	; (800ff94 <UART_RxISR_8BIT+0x1b4>)
 800fec8:	4293      	cmp	r3, r2
 800feca:	d01f      	beq.n	800ff0c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d018      	beq.n	800ff0c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee2:	e853 3f00 	ldrex	r3, [r3]
 800fee6:	623b      	str	r3, [r7, #32]
   return(result);
 800fee8:	6a3b      	ldr	r3, [r7, #32]
 800feea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800feee:	663b      	str	r3, [r7, #96]	; 0x60
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	461a      	mov	r2, r3
 800fef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fef8:	633b      	str	r3, [r7, #48]	; 0x30
 800fefa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fefc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fefe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff00:	e841 2300 	strex	r3, r2, [r1]
 800ff04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ff06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d1e6      	bne.n	800feda <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d12e      	bne.n	800ff72 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2200      	movs	r2, #0
 800ff18:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	e853 3f00 	ldrex	r3, [r3]
 800ff26:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f023 0310 	bic.w	r3, r3, #16
 800ff2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	461a      	mov	r2, r3
 800ff36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff38:	61fb      	str	r3, [r7, #28]
 800ff3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff3c:	69b9      	ldr	r1, [r7, #24]
 800ff3e:	69fa      	ldr	r2, [r7, #28]
 800ff40:	e841 2300 	strex	r3, r2, [r1]
 800ff44:	617b      	str	r3, [r7, #20]
   return(result);
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d1e6      	bne.n	800ff1a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	69db      	ldr	r3, [r3, #28]
 800ff52:	f003 0310 	and.w	r3, r3, #16
 800ff56:	2b10      	cmp	r3, #16
 800ff58:	d103      	bne.n	800ff62 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	2210      	movs	r2, #16
 800ff60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ff68:	4619      	mov	r1, r3
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f7fe fe40 	bl	800ebf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ff70:	e00b      	b.n	800ff8a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f7f0 fe9e 	bl	8000cb4 <HAL_UART_RxCpltCallback>
}
 800ff78:	e007      	b.n	800ff8a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	699a      	ldr	r2, [r3, #24]
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	f042 0208 	orr.w	r2, r2, #8
 800ff88:	619a      	str	r2, [r3, #24]
}
 800ff8a:	bf00      	nop
 800ff8c:	3770      	adds	r7, #112	; 0x70
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	bf00      	nop
 800ff94:	58000c00 	.word	0x58000c00

0800ff98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b09c      	sub	sp, #112	; 0x70
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffa6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffb0:	2b22      	cmp	r3, #34	; 0x22
 800ffb2:	f040 80be 	bne.w	8010132 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffc4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ffc6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ffca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ffce:	4013      	ands	r3, r2
 800ffd0:	b29a      	uxth	r2, r3
 800ffd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffd4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffda:	1c9a      	adds	r2, r3, #2
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	3b01      	subs	r3, #1
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	f040 80a1 	bne.w	8010142 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010008:	e853 3f00 	ldrex	r3, [r3]
 801000c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801000e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010010:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010014:	667b      	str	r3, [r7, #100]	; 0x64
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	461a      	mov	r2, r3
 801001c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801001e:	657b      	str	r3, [r7, #84]	; 0x54
 8010020:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010022:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010024:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010026:	e841 2300 	strex	r3, r2, [r1]
 801002a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801002c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801002e:	2b00      	cmp	r3, #0
 8010030:	d1e6      	bne.n	8010000 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	3308      	adds	r3, #8
 8010038:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801003a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801003c:	e853 3f00 	ldrex	r3, [r3]
 8010040:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010044:	f023 0301 	bic.w	r3, r3, #1
 8010048:	663b      	str	r3, [r7, #96]	; 0x60
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	3308      	adds	r3, #8
 8010050:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010052:	643a      	str	r2, [r7, #64]	; 0x40
 8010054:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010056:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010058:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801005a:	e841 2300 	strex	r3, r2, [r1]
 801005e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010062:	2b00      	cmp	r3, #0
 8010064:	d1e5      	bne.n	8010032 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2220      	movs	r2, #32
 801006a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2200      	movs	r2, #0
 8010078:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4a33      	ldr	r2, [pc, #204]	; (801014c <UART_RxISR_16BIT+0x1b4>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d01f      	beq.n	80100c4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801008e:	2b00      	cmp	r3, #0
 8010090:	d018      	beq.n	80100c4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010098:	6a3b      	ldr	r3, [r7, #32]
 801009a:	e853 3f00 	ldrex	r3, [r3]
 801009e:	61fb      	str	r3, [r7, #28]
   return(result);
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80100a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	461a      	mov	r2, r3
 80100ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100b2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80100b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100b8:	e841 2300 	strex	r3, r2, [r1]
 80100bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80100be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d1e6      	bne.n	8010092 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100c8:	2b01      	cmp	r3, #1
 80100ca:	d12e      	bne.n	801012a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2200      	movs	r2, #0
 80100d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	e853 3f00 	ldrex	r3, [r3]
 80100de:	60bb      	str	r3, [r7, #8]
   return(result);
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	f023 0310 	bic.w	r3, r3, #16
 80100e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	461a      	mov	r2, r3
 80100ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100f0:	61bb      	str	r3, [r7, #24]
 80100f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100f4:	6979      	ldr	r1, [r7, #20]
 80100f6:	69ba      	ldr	r2, [r7, #24]
 80100f8:	e841 2300 	strex	r3, r2, [r1]
 80100fc:	613b      	str	r3, [r7, #16]
   return(result);
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d1e6      	bne.n	80100d2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	69db      	ldr	r3, [r3, #28]
 801010a:	f003 0310 	and.w	r3, r3, #16
 801010e:	2b10      	cmp	r3, #16
 8010110:	d103      	bne.n	801011a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	2210      	movs	r2, #16
 8010118:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010120:	4619      	mov	r1, r3
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f7fe fd64 	bl	800ebf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010128:	e00b      	b.n	8010142 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f7f0 fdc2 	bl	8000cb4 <HAL_UART_RxCpltCallback>
}
 8010130:	e007      	b.n	8010142 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	699a      	ldr	r2, [r3, #24]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	f042 0208 	orr.w	r2, r2, #8
 8010140:	619a      	str	r2, [r3, #24]
}
 8010142:	bf00      	nop
 8010144:	3770      	adds	r7, #112	; 0x70
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
 801014a:	bf00      	nop
 801014c:	58000c00 	.word	0x58000c00

08010150 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b0ac      	sub	sp, #176	; 0xb0
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801015e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	69db      	ldr	r3, [r3, #28]
 8010168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	689b      	ldr	r3, [r3, #8]
 801017c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010186:	2b22      	cmp	r3, #34	; 0x22
 8010188:	f040 8180 	bne.w	801048c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010192:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010196:	e123      	b.n	80103e0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801019e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80101a2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80101a6:	b2d9      	uxtb	r1, r3
 80101a8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80101ac:	b2da      	uxtb	r2, r3
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101b2:	400a      	ands	r2, r1
 80101b4:	b2d2      	uxtb	r2, r2
 80101b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101bc:	1c5a      	adds	r2, r3, #1
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	3b01      	subs	r3, #1
 80101cc:	b29a      	uxth	r2, r3
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	69db      	ldr	r3, [r3, #28]
 80101da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80101de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101e2:	f003 0307 	and.w	r3, r3, #7
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d053      	beq.n	8010292 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80101ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101ee:	f003 0301 	and.w	r3, r3, #1
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d011      	beq.n	801021a <UART_RxISR_8BIT_FIFOEN+0xca>
 80101f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80101fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d00b      	beq.n	801021a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2201      	movs	r2, #1
 8010208:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010210:	f043 0201 	orr.w	r2, r3, #1
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801021a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801021e:	f003 0302 	and.w	r3, r3, #2
 8010222:	2b00      	cmp	r3, #0
 8010224:	d011      	beq.n	801024a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801022a:	f003 0301 	and.w	r3, r3, #1
 801022e:	2b00      	cmp	r3, #0
 8010230:	d00b      	beq.n	801024a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2202      	movs	r2, #2
 8010238:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010240:	f043 0204 	orr.w	r2, r3, #4
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801024a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801024e:	f003 0304 	and.w	r3, r3, #4
 8010252:	2b00      	cmp	r3, #0
 8010254:	d011      	beq.n	801027a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801025a:	f003 0301 	and.w	r3, r3, #1
 801025e:	2b00      	cmp	r3, #0
 8010260:	d00b      	beq.n	801027a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	2204      	movs	r2, #4
 8010268:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010270:	f043 0202 	orr.w	r2, r3, #2
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010280:	2b00      	cmp	r3, #0
 8010282:	d006      	beq.n	8010292 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f7fe fca9 	bl	800ebdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2200      	movs	r2, #0
 801028e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010298:	b29b      	uxth	r3, r3
 801029a:	2b00      	cmp	r3, #0
 801029c:	f040 80a0 	bne.w	80103e0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102a8:	e853 3f00 	ldrex	r3, [r3]
 80102ac:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80102ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80102b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	461a      	mov	r2, r3
 80102be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80102c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80102c4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102c6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80102c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80102ca:	e841 2300 	strex	r3, r2, [r1]
 80102ce:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80102d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d1e4      	bne.n	80102a0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	3308      	adds	r3, #8
 80102dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102e0:	e853 3f00 	ldrex	r3, [r3]
 80102e4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80102e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80102e8:	4b6e      	ldr	r3, [pc, #440]	; (80104a4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80102ea:	4013      	ands	r3, r2
 80102ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	3308      	adds	r3, #8
 80102f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80102fa:	66ba      	str	r2, [r7, #104]	; 0x68
 80102fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102fe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010300:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010302:	e841 2300 	strex	r3, r2, [r1]
 8010306:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801030a:	2b00      	cmp	r3, #0
 801030c:	d1e3      	bne.n	80102d6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	2220      	movs	r2, #32
 8010312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2200      	movs	r2, #0
 801031a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2200      	movs	r2, #0
 8010320:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4a60      	ldr	r2, [pc, #384]	; (80104a8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010328:	4293      	cmp	r3, r2
 801032a:	d021      	beq.n	8010370 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	685b      	ldr	r3, [r3, #4]
 8010332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010336:	2b00      	cmp	r3, #0
 8010338:	d01a      	beq.n	8010370 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010342:	e853 3f00 	ldrex	r3, [r3]
 8010346:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801034a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801034e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	461a      	mov	r2, r3
 8010358:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801035c:	657b      	str	r3, [r7, #84]	; 0x54
 801035e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010360:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010362:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010364:	e841 2300 	strex	r3, r2, [r1]
 8010368:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801036a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801036c:	2b00      	cmp	r3, #0
 801036e:	d1e4      	bne.n	801033a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010374:	2b01      	cmp	r3, #1
 8010376:	d130      	bne.n	80103da <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2200      	movs	r2, #0
 801037c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010386:	e853 3f00 	ldrex	r3, [r3]
 801038a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801038c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801038e:	f023 0310 	bic.w	r3, r3, #16
 8010392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	461a      	mov	r2, r3
 801039c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80103a0:	643b      	str	r3, [r7, #64]	; 0x40
 80103a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80103a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80103a8:	e841 2300 	strex	r3, r2, [r1]
 80103ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80103ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d1e4      	bne.n	801037e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	69db      	ldr	r3, [r3, #28]
 80103ba:	f003 0310 	and.w	r3, r3, #16
 80103be:	2b10      	cmp	r3, #16
 80103c0:	d103      	bne.n	80103ca <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	2210      	movs	r2, #16
 80103c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80103d0:	4619      	mov	r1, r3
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f7fe fc0c 	bl	800ebf0 <HAL_UARTEx_RxEventCallback>
 80103d8:	e002      	b.n	80103e0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f7f0 fc6a 	bl	8000cb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80103e0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d006      	beq.n	80103f6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80103e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103ec:	f003 0320 	and.w	r3, r3, #32
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	f47f aed1 	bne.w	8010198 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80103fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010400:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010404:	2b00      	cmp	r3, #0
 8010406:	d049      	beq.n	801049c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801040e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8010412:	429a      	cmp	r2, r3
 8010414:	d242      	bcs.n	801049c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	3308      	adds	r3, #8
 801041c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801041e:	6a3b      	ldr	r3, [r7, #32]
 8010420:	e853 3f00 	ldrex	r3, [r3]
 8010424:	61fb      	str	r3, [r7, #28]
   return(result);
 8010426:	69fb      	ldr	r3, [r7, #28]
 8010428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801042c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	3308      	adds	r3, #8
 8010436:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801043a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801043c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801043e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010442:	e841 2300 	strex	r3, r2, [r1]
 8010446:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044a:	2b00      	cmp	r3, #0
 801044c:	d1e3      	bne.n	8010416 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	4a16      	ldr	r2, [pc, #88]	; (80104ac <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010452:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	e853 3f00 	ldrex	r3, [r3]
 8010460:	60bb      	str	r3, [r7, #8]
   return(result);
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	f043 0320 	orr.w	r3, r3, #32
 8010468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	461a      	mov	r2, r3
 8010472:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010476:	61bb      	str	r3, [r7, #24]
 8010478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801047a:	6979      	ldr	r1, [r7, #20]
 801047c:	69ba      	ldr	r2, [r7, #24]
 801047e:	e841 2300 	strex	r3, r2, [r1]
 8010482:	613b      	str	r3, [r7, #16]
   return(result);
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d1e4      	bne.n	8010454 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801048a:	e007      	b.n	801049c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	699a      	ldr	r2, [r3, #24]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	f042 0208 	orr.w	r2, r2, #8
 801049a:	619a      	str	r2, [r3, #24]
}
 801049c:	bf00      	nop
 801049e:	37b0      	adds	r7, #176	; 0xb0
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}
 80104a4:	effffffe 	.word	0xeffffffe
 80104a8:	58000c00 	.word	0x58000c00
 80104ac:	0800fde1 	.word	0x0800fde1

080104b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b0ae      	sub	sp, #184	; 0xb8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104be:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	69db      	ldr	r3, [r3, #28]
 80104c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	689b      	ldr	r3, [r3, #8]
 80104dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104e6:	2b22      	cmp	r3, #34	; 0x22
 80104e8:	f040 8184 	bne.w	80107f4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80104f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80104f6:	e127      	b.n	8010748 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801050a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801050e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8010512:	4013      	ands	r3, r2
 8010514:	b29a      	uxth	r2, r3
 8010516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801051a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010520:	1c9a      	adds	r2, r3, #2
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801052c:	b29b      	uxth	r3, r3
 801052e:	3b01      	subs	r3, #1
 8010530:	b29a      	uxth	r2, r3
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	69db      	ldr	r3, [r3, #28]
 801053e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010542:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010546:	f003 0307 	and.w	r3, r3, #7
 801054a:	2b00      	cmp	r3, #0
 801054c:	d053      	beq.n	80105f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801054e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010552:	f003 0301 	and.w	r3, r3, #1
 8010556:	2b00      	cmp	r3, #0
 8010558:	d011      	beq.n	801057e <UART_RxISR_16BIT_FIFOEN+0xce>
 801055a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801055e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010562:	2b00      	cmp	r3, #0
 8010564:	d00b      	beq.n	801057e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	2201      	movs	r2, #1
 801056c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010574:	f043 0201 	orr.w	r2, r3, #1
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801057e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010582:	f003 0302 	and.w	r3, r3, #2
 8010586:	2b00      	cmp	r3, #0
 8010588:	d011      	beq.n	80105ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 801058a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801058e:	f003 0301 	and.w	r3, r3, #1
 8010592:	2b00      	cmp	r3, #0
 8010594:	d00b      	beq.n	80105ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	2202      	movs	r2, #2
 801059c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105a4:	f043 0204 	orr.w	r2, r3, #4
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80105ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80105b2:	f003 0304 	and.w	r3, r3, #4
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d011      	beq.n	80105de <UART_RxISR_16BIT_FIFOEN+0x12e>
 80105ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80105be:	f003 0301 	and.w	r3, r3, #1
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00b      	beq.n	80105de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2204      	movs	r2, #4
 80105cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105d4:	f043 0202 	orr.w	r2, r3, #2
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d006      	beq.n	80105f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f7fe faf7 	bl	800ebdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2200      	movs	r2, #0
 80105f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	2b00      	cmp	r3, #0
 8010600:	f040 80a2 	bne.w	8010748 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801060a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801060c:	e853 3f00 	ldrex	r3, [r3]
 8010610:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	461a      	mov	r2, r3
 8010622:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010626:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801062a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801062e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010632:	e841 2300 	strex	r3, r2, [r1]
 8010636:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801063a:	2b00      	cmp	r3, #0
 801063c:	d1e2      	bne.n	8010604 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	3308      	adds	r3, #8
 8010644:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010648:	e853 3f00 	ldrex	r3, [r3]
 801064c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801064e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010650:	4b6e      	ldr	r3, [pc, #440]	; (801080c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010652:	4013      	ands	r3, r2
 8010654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	3308      	adds	r3, #8
 801065e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010662:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010664:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010666:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801066a:	e841 2300 	strex	r3, r2, [r1]
 801066e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010672:	2b00      	cmp	r3, #0
 8010674:	d1e3      	bne.n	801063e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2220      	movs	r2, #32
 801067a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2200      	movs	r2, #0
 8010682:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2200      	movs	r2, #0
 8010688:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	4a60      	ldr	r2, [pc, #384]	; (8010810 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010690:	4293      	cmp	r3, r2
 8010692:	d021      	beq.n	80106d8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	685b      	ldr	r3, [r3, #4]
 801069a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d01a      	beq.n	80106d8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106aa:	e853 3f00 	ldrex	r3, [r3]
 80106ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80106b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80106b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	461a      	mov	r2, r3
 80106c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80106c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80106c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80106ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106cc:	e841 2300 	strex	r3, r2, [r1]
 80106d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80106d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d1e4      	bne.n	80106a2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d130      	bne.n	8010742 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2200      	movs	r2, #0
 80106e4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ee:	e853 3f00 	ldrex	r3, [r3]
 80106f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80106f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106f6:	f023 0310 	bic.w	r3, r3, #16
 80106fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	461a      	mov	r2, r3
 8010704:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010708:	647b      	str	r3, [r7, #68]	; 0x44
 801070a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801070c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801070e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010710:	e841 2300 	strex	r3, r2, [r1]
 8010714:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010718:	2b00      	cmp	r3, #0
 801071a:	d1e4      	bne.n	80106e6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	69db      	ldr	r3, [r3, #28]
 8010722:	f003 0310 	and.w	r3, r3, #16
 8010726:	2b10      	cmp	r3, #16
 8010728:	d103      	bne.n	8010732 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	2210      	movs	r2, #16
 8010730:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010738:	4619      	mov	r1, r3
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f7fe fa58 	bl	800ebf0 <HAL_UARTEx_RxEventCallback>
 8010740:	e002      	b.n	8010748 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f7f0 fab6 	bl	8000cb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010748:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801074c:	2b00      	cmp	r3, #0
 801074e:	d006      	beq.n	801075e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010750:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010754:	f003 0320 	and.w	r3, r3, #32
 8010758:	2b00      	cmp	r3, #0
 801075a:	f47f aecd 	bne.w	80104f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010764:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010768:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801076c:	2b00      	cmp	r3, #0
 801076e:	d049      	beq.n	8010804 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010776:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801077a:	429a      	cmp	r2, r3
 801077c:	d242      	bcs.n	8010804 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	3308      	adds	r3, #8
 8010784:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010788:	e853 3f00 	ldrex	r3, [r3]
 801078c:	623b      	str	r3, [r7, #32]
   return(result);
 801078e:	6a3b      	ldr	r3, [r7, #32]
 8010790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	3308      	adds	r3, #8
 801079e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80107a2:	633a      	str	r2, [r7, #48]	; 0x30
 80107a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107aa:	e841 2300 	strex	r3, r2, [r1]
 80107ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80107b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d1e3      	bne.n	801077e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	4a16      	ldr	r2, [pc, #88]	; (8010814 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80107ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	e853 3f00 	ldrex	r3, [r3]
 80107c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	f043 0320 	orr.w	r3, r3, #32
 80107d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	461a      	mov	r2, r3
 80107da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80107de:	61fb      	str	r3, [r7, #28]
 80107e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107e2:	69b9      	ldr	r1, [r7, #24]
 80107e4:	69fa      	ldr	r2, [r7, #28]
 80107e6:	e841 2300 	strex	r3, r2, [r1]
 80107ea:	617b      	str	r3, [r7, #20]
   return(result);
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d1e4      	bne.n	80107bc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80107f2:	e007      	b.n	8010804 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	699a      	ldr	r2, [r3, #24]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f042 0208 	orr.w	r2, r2, #8
 8010802:	619a      	str	r2, [r3, #24]
}
 8010804:	bf00      	nop
 8010806:	37b8      	adds	r7, #184	; 0xb8
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}
 801080c:	effffffe 	.word	0xeffffffe
 8010810:	58000c00 	.word	0x58000c00
 8010814:	0800ff99 	.word	0x0800ff99

08010818 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010820:	bf00      	nop
 8010822:	370c      	adds	r7, #12
 8010824:	46bd      	mov	sp, r7
 8010826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082a:	4770      	bx	lr

0801082c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010834:	bf00      	nop
 8010836:	370c      	adds	r7, #12
 8010838:	46bd      	mov	sp, r7
 801083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083e:	4770      	bx	lr

08010840 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010840:	b480      	push	{r7}
 8010842:	b083      	sub	sp, #12
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010848:	bf00      	nop
 801084a:	370c      	adds	r7, #12
 801084c:	46bd      	mov	sp, r7
 801084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010852:	4770      	bx	lr

08010854 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010854:	b480      	push	{r7}
 8010856:	b085      	sub	sp, #20
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010862:	2b01      	cmp	r3, #1
 8010864:	d101      	bne.n	801086a <HAL_UARTEx_DisableFifoMode+0x16>
 8010866:	2302      	movs	r3, #2
 8010868:	e027      	b.n	80108ba <HAL_UARTEx_DisableFifoMode+0x66>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2201      	movs	r2, #1
 801086e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2224      	movs	r2, #36	; 0x24
 8010876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	681a      	ldr	r2, [r3, #0]
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f022 0201 	bic.w	r2, r2, #1
 8010890:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010898:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2200      	movs	r2, #0
 801089e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	68fa      	ldr	r2, [r7, #12]
 80108a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2220      	movs	r2, #32
 80108ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2200      	movs	r2, #0
 80108b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80108b8:	2300      	movs	r3, #0
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3714      	adds	r7, #20
 80108be:	46bd      	mov	sp, r7
 80108c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c4:	4770      	bx	lr

080108c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80108c6:	b580      	push	{r7, lr}
 80108c8:	b084      	sub	sp, #16
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
 80108ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80108d6:	2b01      	cmp	r3, #1
 80108d8:	d101      	bne.n	80108de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80108da:	2302      	movs	r3, #2
 80108dc:	e02d      	b.n	801093a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2201      	movs	r2, #1
 80108e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2224      	movs	r2, #36	; 0x24
 80108ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f022 0201 	bic.w	r2, r2, #1
 8010904:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	683a      	ldr	r2, [r7, #0]
 8010916:	430a      	orrs	r2, r1
 8010918:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f000 f850 	bl	80109c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	68fa      	ldr	r2, [r7, #12]
 8010926:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2220      	movs	r2, #32
 801092c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2200      	movs	r2, #0
 8010934:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010938:	2300      	movs	r3, #0
}
 801093a:	4618      	mov	r0, r3
 801093c:	3710      	adds	r7, #16
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}

08010942 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010942:	b580      	push	{r7, lr}
 8010944:	b084      	sub	sp, #16
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
 801094a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010952:	2b01      	cmp	r3, #1
 8010954:	d101      	bne.n	801095a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010956:	2302      	movs	r3, #2
 8010958:	e02d      	b.n	80109b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2201      	movs	r2, #1
 801095e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2224      	movs	r2, #36	; 0x24
 8010966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	f022 0201 	bic.w	r2, r2, #1
 8010980:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	689b      	ldr	r3, [r3, #8]
 8010988:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	683a      	ldr	r2, [r7, #0]
 8010992:	430a      	orrs	r2, r1
 8010994:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f000 f812 	bl	80109c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	68fa      	ldr	r2, [r7, #12]
 80109a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2220      	movs	r2, #32
 80109a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2200      	movs	r2, #0
 80109b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80109b4:	2300      	movs	r3, #0
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3710      	adds	r7, #16
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
	...

080109c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80109c0:	b480      	push	{r7}
 80109c2:	b085      	sub	sp, #20
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d108      	bne.n	80109e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2201      	movs	r2, #1
 80109d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2201      	movs	r2, #1
 80109dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80109e0:	e031      	b.n	8010a46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80109e2:	2310      	movs	r3, #16
 80109e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80109e6:	2310      	movs	r3, #16
 80109e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	689b      	ldr	r3, [r3, #8]
 80109f0:	0e5b      	lsrs	r3, r3, #25
 80109f2:	b2db      	uxtb	r3, r3
 80109f4:	f003 0307 	and.w	r3, r3, #7
 80109f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	689b      	ldr	r3, [r3, #8]
 8010a00:	0f5b      	lsrs	r3, r3, #29
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	f003 0307 	and.w	r3, r3, #7
 8010a08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a0a:	7bbb      	ldrb	r3, [r7, #14]
 8010a0c:	7b3a      	ldrb	r2, [r7, #12]
 8010a0e:	4911      	ldr	r1, [pc, #68]	; (8010a54 <UARTEx_SetNbDataToProcess+0x94>)
 8010a10:	5c8a      	ldrb	r2, [r1, r2]
 8010a12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010a16:	7b3a      	ldrb	r2, [r7, #12]
 8010a18:	490f      	ldr	r1, [pc, #60]	; (8010a58 <UARTEx_SetNbDataToProcess+0x98>)
 8010a1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a20:	b29a      	uxth	r2, r3
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a28:	7bfb      	ldrb	r3, [r7, #15]
 8010a2a:	7b7a      	ldrb	r2, [r7, #13]
 8010a2c:	4909      	ldr	r1, [pc, #36]	; (8010a54 <UARTEx_SetNbDataToProcess+0x94>)
 8010a2e:	5c8a      	ldrb	r2, [r1, r2]
 8010a30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010a34:	7b7a      	ldrb	r2, [r7, #13]
 8010a36:	4908      	ldr	r1, [pc, #32]	; (8010a58 <UARTEx_SetNbDataToProcess+0x98>)
 8010a38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a3e:	b29a      	uxth	r2, r3
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010a46:	bf00      	nop
 8010a48:	3714      	adds	r7, #20
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a50:	4770      	bx	lr
 8010a52:	bf00      	nop
 8010a54:	08010d58 	.word	0x08010d58
 8010a58:	08010d60 	.word	0x08010d60

08010a5c <__errno>:
 8010a5c:	4b01      	ldr	r3, [pc, #4]	; (8010a64 <__errno+0x8>)
 8010a5e:	6818      	ldr	r0, [r3, #0]
 8010a60:	4770      	bx	lr
 8010a62:	bf00      	nop
 8010a64:	24000054 	.word	0x24000054

08010a68 <__libc_init_array>:
 8010a68:	b570      	push	{r4, r5, r6, lr}
 8010a6a:	4d0d      	ldr	r5, [pc, #52]	; (8010aa0 <__libc_init_array+0x38>)
 8010a6c:	4c0d      	ldr	r4, [pc, #52]	; (8010aa4 <__libc_init_array+0x3c>)
 8010a6e:	1b64      	subs	r4, r4, r5
 8010a70:	10a4      	asrs	r4, r4, #2
 8010a72:	2600      	movs	r6, #0
 8010a74:	42a6      	cmp	r6, r4
 8010a76:	d109      	bne.n	8010a8c <__libc_init_array+0x24>
 8010a78:	4d0b      	ldr	r5, [pc, #44]	; (8010aa8 <__libc_init_array+0x40>)
 8010a7a:	4c0c      	ldr	r4, [pc, #48]	; (8010aac <__libc_init_array+0x44>)
 8010a7c:	f000 f93c 	bl	8010cf8 <_init>
 8010a80:	1b64      	subs	r4, r4, r5
 8010a82:	10a4      	asrs	r4, r4, #2
 8010a84:	2600      	movs	r6, #0
 8010a86:	42a6      	cmp	r6, r4
 8010a88:	d105      	bne.n	8010a96 <__libc_init_array+0x2e>
 8010a8a:	bd70      	pop	{r4, r5, r6, pc}
 8010a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a90:	4798      	blx	r3
 8010a92:	3601      	adds	r6, #1
 8010a94:	e7ee      	b.n	8010a74 <__libc_init_array+0xc>
 8010a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a9a:	4798      	blx	r3
 8010a9c:	3601      	adds	r6, #1
 8010a9e:	e7f2      	b.n	8010a86 <__libc_init_array+0x1e>
 8010aa0:	08010d70 	.word	0x08010d70
 8010aa4:	08010d70 	.word	0x08010d70
 8010aa8:	08010d70 	.word	0x08010d70
 8010aac:	08010d74 	.word	0x08010d74

08010ab0 <malloc>:
 8010ab0:	4b02      	ldr	r3, [pc, #8]	; (8010abc <malloc+0xc>)
 8010ab2:	4601      	mov	r1, r0
 8010ab4:	6818      	ldr	r0, [r3, #0]
 8010ab6:	f000 b88d 	b.w	8010bd4 <_malloc_r>
 8010aba:	bf00      	nop
 8010abc:	24000054 	.word	0x24000054

08010ac0 <free>:
 8010ac0:	4b02      	ldr	r3, [pc, #8]	; (8010acc <free+0xc>)
 8010ac2:	4601      	mov	r1, r0
 8010ac4:	6818      	ldr	r0, [r3, #0]
 8010ac6:	f000 b819 	b.w	8010afc <_free_r>
 8010aca:	bf00      	nop
 8010acc:	24000054 	.word	0x24000054

08010ad0 <memcpy>:
 8010ad0:	440a      	add	r2, r1
 8010ad2:	4291      	cmp	r1, r2
 8010ad4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010ad8:	d100      	bne.n	8010adc <memcpy+0xc>
 8010ada:	4770      	bx	lr
 8010adc:	b510      	push	{r4, lr}
 8010ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ae6:	4291      	cmp	r1, r2
 8010ae8:	d1f9      	bne.n	8010ade <memcpy+0xe>
 8010aea:	bd10      	pop	{r4, pc}

08010aec <memset>:
 8010aec:	4402      	add	r2, r0
 8010aee:	4603      	mov	r3, r0
 8010af0:	4293      	cmp	r3, r2
 8010af2:	d100      	bne.n	8010af6 <memset+0xa>
 8010af4:	4770      	bx	lr
 8010af6:	f803 1b01 	strb.w	r1, [r3], #1
 8010afa:	e7f9      	b.n	8010af0 <memset+0x4>

08010afc <_free_r>:
 8010afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010afe:	2900      	cmp	r1, #0
 8010b00:	d044      	beq.n	8010b8c <_free_r+0x90>
 8010b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b06:	9001      	str	r0, [sp, #4]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	f1a1 0404 	sub.w	r4, r1, #4
 8010b0e:	bfb8      	it	lt
 8010b10:	18e4      	addlt	r4, r4, r3
 8010b12:	f000 f8e3 	bl	8010cdc <__malloc_lock>
 8010b16:	4a1e      	ldr	r2, [pc, #120]	; (8010b90 <_free_r+0x94>)
 8010b18:	9801      	ldr	r0, [sp, #4]
 8010b1a:	6813      	ldr	r3, [r2, #0]
 8010b1c:	b933      	cbnz	r3, 8010b2c <_free_r+0x30>
 8010b1e:	6063      	str	r3, [r4, #4]
 8010b20:	6014      	str	r4, [r2, #0]
 8010b22:	b003      	add	sp, #12
 8010b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b28:	f000 b8de 	b.w	8010ce8 <__malloc_unlock>
 8010b2c:	42a3      	cmp	r3, r4
 8010b2e:	d908      	bls.n	8010b42 <_free_r+0x46>
 8010b30:	6825      	ldr	r5, [r4, #0]
 8010b32:	1961      	adds	r1, r4, r5
 8010b34:	428b      	cmp	r3, r1
 8010b36:	bf01      	itttt	eq
 8010b38:	6819      	ldreq	r1, [r3, #0]
 8010b3a:	685b      	ldreq	r3, [r3, #4]
 8010b3c:	1949      	addeq	r1, r1, r5
 8010b3e:	6021      	streq	r1, [r4, #0]
 8010b40:	e7ed      	b.n	8010b1e <_free_r+0x22>
 8010b42:	461a      	mov	r2, r3
 8010b44:	685b      	ldr	r3, [r3, #4]
 8010b46:	b10b      	cbz	r3, 8010b4c <_free_r+0x50>
 8010b48:	42a3      	cmp	r3, r4
 8010b4a:	d9fa      	bls.n	8010b42 <_free_r+0x46>
 8010b4c:	6811      	ldr	r1, [r2, #0]
 8010b4e:	1855      	adds	r5, r2, r1
 8010b50:	42a5      	cmp	r5, r4
 8010b52:	d10b      	bne.n	8010b6c <_free_r+0x70>
 8010b54:	6824      	ldr	r4, [r4, #0]
 8010b56:	4421      	add	r1, r4
 8010b58:	1854      	adds	r4, r2, r1
 8010b5a:	42a3      	cmp	r3, r4
 8010b5c:	6011      	str	r1, [r2, #0]
 8010b5e:	d1e0      	bne.n	8010b22 <_free_r+0x26>
 8010b60:	681c      	ldr	r4, [r3, #0]
 8010b62:	685b      	ldr	r3, [r3, #4]
 8010b64:	6053      	str	r3, [r2, #4]
 8010b66:	4421      	add	r1, r4
 8010b68:	6011      	str	r1, [r2, #0]
 8010b6a:	e7da      	b.n	8010b22 <_free_r+0x26>
 8010b6c:	d902      	bls.n	8010b74 <_free_r+0x78>
 8010b6e:	230c      	movs	r3, #12
 8010b70:	6003      	str	r3, [r0, #0]
 8010b72:	e7d6      	b.n	8010b22 <_free_r+0x26>
 8010b74:	6825      	ldr	r5, [r4, #0]
 8010b76:	1961      	adds	r1, r4, r5
 8010b78:	428b      	cmp	r3, r1
 8010b7a:	bf04      	itt	eq
 8010b7c:	6819      	ldreq	r1, [r3, #0]
 8010b7e:	685b      	ldreq	r3, [r3, #4]
 8010b80:	6063      	str	r3, [r4, #4]
 8010b82:	bf04      	itt	eq
 8010b84:	1949      	addeq	r1, r1, r5
 8010b86:	6021      	streq	r1, [r4, #0]
 8010b88:	6054      	str	r4, [r2, #4]
 8010b8a:	e7ca      	b.n	8010b22 <_free_r+0x26>
 8010b8c:	b003      	add	sp, #12
 8010b8e:	bd30      	pop	{r4, r5, pc}
 8010b90:	2400066c 	.word	0x2400066c

08010b94 <sbrk_aligned>:
 8010b94:	b570      	push	{r4, r5, r6, lr}
 8010b96:	4e0e      	ldr	r6, [pc, #56]	; (8010bd0 <sbrk_aligned+0x3c>)
 8010b98:	460c      	mov	r4, r1
 8010b9a:	6831      	ldr	r1, [r6, #0]
 8010b9c:	4605      	mov	r5, r0
 8010b9e:	b911      	cbnz	r1, 8010ba6 <sbrk_aligned+0x12>
 8010ba0:	f000 f88c 	bl	8010cbc <_sbrk_r>
 8010ba4:	6030      	str	r0, [r6, #0]
 8010ba6:	4621      	mov	r1, r4
 8010ba8:	4628      	mov	r0, r5
 8010baa:	f000 f887 	bl	8010cbc <_sbrk_r>
 8010bae:	1c43      	adds	r3, r0, #1
 8010bb0:	d00a      	beq.n	8010bc8 <sbrk_aligned+0x34>
 8010bb2:	1cc4      	adds	r4, r0, #3
 8010bb4:	f024 0403 	bic.w	r4, r4, #3
 8010bb8:	42a0      	cmp	r0, r4
 8010bba:	d007      	beq.n	8010bcc <sbrk_aligned+0x38>
 8010bbc:	1a21      	subs	r1, r4, r0
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	f000 f87c 	bl	8010cbc <_sbrk_r>
 8010bc4:	3001      	adds	r0, #1
 8010bc6:	d101      	bne.n	8010bcc <sbrk_aligned+0x38>
 8010bc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010bcc:	4620      	mov	r0, r4
 8010bce:	bd70      	pop	{r4, r5, r6, pc}
 8010bd0:	24000670 	.word	0x24000670

08010bd4 <_malloc_r>:
 8010bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bd8:	1ccd      	adds	r5, r1, #3
 8010bda:	f025 0503 	bic.w	r5, r5, #3
 8010bde:	3508      	adds	r5, #8
 8010be0:	2d0c      	cmp	r5, #12
 8010be2:	bf38      	it	cc
 8010be4:	250c      	movcc	r5, #12
 8010be6:	2d00      	cmp	r5, #0
 8010be8:	4607      	mov	r7, r0
 8010bea:	db01      	blt.n	8010bf0 <_malloc_r+0x1c>
 8010bec:	42a9      	cmp	r1, r5
 8010bee:	d905      	bls.n	8010bfc <_malloc_r+0x28>
 8010bf0:	230c      	movs	r3, #12
 8010bf2:	603b      	str	r3, [r7, #0]
 8010bf4:	2600      	movs	r6, #0
 8010bf6:	4630      	mov	r0, r6
 8010bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bfc:	4e2e      	ldr	r6, [pc, #184]	; (8010cb8 <_malloc_r+0xe4>)
 8010bfe:	f000 f86d 	bl	8010cdc <__malloc_lock>
 8010c02:	6833      	ldr	r3, [r6, #0]
 8010c04:	461c      	mov	r4, r3
 8010c06:	bb34      	cbnz	r4, 8010c56 <_malloc_r+0x82>
 8010c08:	4629      	mov	r1, r5
 8010c0a:	4638      	mov	r0, r7
 8010c0c:	f7ff ffc2 	bl	8010b94 <sbrk_aligned>
 8010c10:	1c43      	adds	r3, r0, #1
 8010c12:	4604      	mov	r4, r0
 8010c14:	d14d      	bne.n	8010cb2 <_malloc_r+0xde>
 8010c16:	6834      	ldr	r4, [r6, #0]
 8010c18:	4626      	mov	r6, r4
 8010c1a:	2e00      	cmp	r6, #0
 8010c1c:	d140      	bne.n	8010ca0 <_malloc_r+0xcc>
 8010c1e:	6823      	ldr	r3, [r4, #0]
 8010c20:	4631      	mov	r1, r6
 8010c22:	4638      	mov	r0, r7
 8010c24:	eb04 0803 	add.w	r8, r4, r3
 8010c28:	f000 f848 	bl	8010cbc <_sbrk_r>
 8010c2c:	4580      	cmp	r8, r0
 8010c2e:	d13a      	bne.n	8010ca6 <_malloc_r+0xd2>
 8010c30:	6821      	ldr	r1, [r4, #0]
 8010c32:	3503      	adds	r5, #3
 8010c34:	1a6d      	subs	r5, r5, r1
 8010c36:	f025 0503 	bic.w	r5, r5, #3
 8010c3a:	3508      	adds	r5, #8
 8010c3c:	2d0c      	cmp	r5, #12
 8010c3e:	bf38      	it	cc
 8010c40:	250c      	movcc	r5, #12
 8010c42:	4629      	mov	r1, r5
 8010c44:	4638      	mov	r0, r7
 8010c46:	f7ff ffa5 	bl	8010b94 <sbrk_aligned>
 8010c4a:	3001      	adds	r0, #1
 8010c4c:	d02b      	beq.n	8010ca6 <_malloc_r+0xd2>
 8010c4e:	6823      	ldr	r3, [r4, #0]
 8010c50:	442b      	add	r3, r5
 8010c52:	6023      	str	r3, [r4, #0]
 8010c54:	e00e      	b.n	8010c74 <_malloc_r+0xa0>
 8010c56:	6822      	ldr	r2, [r4, #0]
 8010c58:	1b52      	subs	r2, r2, r5
 8010c5a:	d41e      	bmi.n	8010c9a <_malloc_r+0xc6>
 8010c5c:	2a0b      	cmp	r2, #11
 8010c5e:	d916      	bls.n	8010c8e <_malloc_r+0xba>
 8010c60:	1961      	adds	r1, r4, r5
 8010c62:	42a3      	cmp	r3, r4
 8010c64:	6025      	str	r5, [r4, #0]
 8010c66:	bf18      	it	ne
 8010c68:	6059      	strne	r1, [r3, #4]
 8010c6a:	6863      	ldr	r3, [r4, #4]
 8010c6c:	bf08      	it	eq
 8010c6e:	6031      	streq	r1, [r6, #0]
 8010c70:	5162      	str	r2, [r4, r5]
 8010c72:	604b      	str	r3, [r1, #4]
 8010c74:	4638      	mov	r0, r7
 8010c76:	f104 060b 	add.w	r6, r4, #11
 8010c7a:	f000 f835 	bl	8010ce8 <__malloc_unlock>
 8010c7e:	f026 0607 	bic.w	r6, r6, #7
 8010c82:	1d23      	adds	r3, r4, #4
 8010c84:	1af2      	subs	r2, r6, r3
 8010c86:	d0b6      	beq.n	8010bf6 <_malloc_r+0x22>
 8010c88:	1b9b      	subs	r3, r3, r6
 8010c8a:	50a3      	str	r3, [r4, r2]
 8010c8c:	e7b3      	b.n	8010bf6 <_malloc_r+0x22>
 8010c8e:	6862      	ldr	r2, [r4, #4]
 8010c90:	42a3      	cmp	r3, r4
 8010c92:	bf0c      	ite	eq
 8010c94:	6032      	streq	r2, [r6, #0]
 8010c96:	605a      	strne	r2, [r3, #4]
 8010c98:	e7ec      	b.n	8010c74 <_malloc_r+0xa0>
 8010c9a:	4623      	mov	r3, r4
 8010c9c:	6864      	ldr	r4, [r4, #4]
 8010c9e:	e7b2      	b.n	8010c06 <_malloc_r+0x32>
 8010ca0:	4634      	mov	r4, r6
 8010ca2:	6876      	ldr	r6, [r6, #4]
 8010ca4:	e7b9      	b.n	8010c1a <_malloc_r+0x46>
 8010ca6:	230c      	movs	r3, #12
 8010ca8:	603b      	str	r3, [r7, #0]
 8010caa:	4638      	mov	r0, r7
 8010cac:	f000 f81c 	bl	8010ce8 <__malloc_unlock>
 8010cb0:	e7a1      	b.n	8010bf6 <_malloc_r+0x22>
 8010cb2:	6025      	str	r5, [r4, #0]
 8010cb4:	e7de      	b.n	8010c74 <_malloc_r+0xa0>
 8010cb6:	bf00      	nop
 8010cb8:	2400066c 	.word	0x2400066c

08010cbc <_sbrk_r>:
 8010cbc:	b538      	push	{r3, r4, r5, lr}
 8010cbe:	4d06      	ldr	r5, [pc, #24]	; (8010cd8 <_sbrk_r+0x1c>)
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	4604      	mov	r4, r0
 8010cc4:	4608      	mov	r0, r1
 8010cc6:	602b      	str	r3, [r5, #0]
 8010cc8:	f7f1 fc3c 	bl	8002544 <_sbrk>
 8010ccc:	1c43      	adds	r3, r0, #1
 8010cce:	d102      	bne.n	8010cd6 <_sbrk_r+0x1a>
 8010cd0:	682b      	ldr	r3, [r5, #0]
 8010cd2:	b103      	cbz	r3, 8010cd6 <_sbrk_r+0x1a>
 8010cd4:	6023      	str	r3, [r4, #0]
 8010cd6:	bd38      	pop	{r3, r4, r5, pc}
 8010cd8:	24000674 	.word	0x24000674

08010cdc <__malloc_lock>:
 8010cdc:	4801      	ldr	r0, [pc, #4]	; (8010ce4 <__malloc_lock+0x8>)
 8010cde:	f000 b809 	b.w	8010cf4 <__retarget_lock_acquire_recursive>
 8010ce2:	bf00      	nop
 8010ce4:	24000678 	.word	0x24000678

08010ce8 <__malloc_unlock>:
 8010ce8:	4801      	ldr	r0, [pc, #4]	; (8010cf0 <__malloc_unlock+0x8>)
 8010cea:	f000 b804 	b.w	8010cf6 <__retarget_lock_release_recursive>
 8010cee:	bf00      	nop
 8010cf0:	24000678 	.word	0x24000678

08010cf4 <__retarget_lock_acquire_recursive>:
 8010cf4:	4770      	bx	lr

08010cf6 <__retarget_lock_release_recursive>:
 8010cf6:	4770      	bx	lr

08010cf8 <_init>:
 8010cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cfa:	bf00      	nop
 8010cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cfe:	bc08      	pop	{r3}
 8010d00:	469e      	mov	lr, r3
 8010d02:	4770      	bx	lr

08010d04 <_fini>:
 8010d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d06:	bf00      	nop
 8010d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d0a:	bc08      	pop	{r3}
 8010d0c:	469e      	mov	lr, r3
 8010d0e:	4770      	bx	lr
