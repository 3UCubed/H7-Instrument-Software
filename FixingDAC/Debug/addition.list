
addition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c78  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08010f10  08010f10  00020f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010f68  08010f68  00020f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010f70  08010f70  00020f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010f74  08010f74  00020f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e8  24000000  08010f78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006e8  24000100  08011060  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240007e8  08011060  000307e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030116  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002348e  00000000  00000000  00030159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003a76  00000000  00000000  000535e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c38  00000000  00000000  00057060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001620  00000000  00000000  00058c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b74f  00000000  00000000  0005a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000257b7  00000000  00000000  00095a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00180e26  00000000  00000000  000bb1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007e70  00000000  00000000  0023bfe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  00243e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000100 	.word	0x24000100
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010ef8 	.word	0x08010ef8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000104 	.word	0x24000104
 80002d4:	08010ef8 	.word	0x08010ef8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
}
 80005dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__NVIC_SystemReset+0x24>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005e6:	4904      	ldr	r1, [pc, #16]	; (80005f8 <__NVIC_SystemReset+0x24>)
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <__NVIC_SystemReset+0x28>)
 80005ea:	4313      	orrs	r3, r2
 80005ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy
}
 80005f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <__NVIC_SystemReset+0x20>
 80005f8:	e000ed00 	.word	0xe000ed00
 80005fc:	05fa0004 	.word	0x05fa0004

08000600 <poll_i2c_sensor>:
 * @brief function to poll individual i2c sensor
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 800060a:	2300      	movs	r3, #0
 800060c:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	b299      	uxth	r1, r3
 8000612:	f107 0208 	add.w	r2, r7, #8
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2301      	movs	r3, #1
 800061e:	481d      	ldr	r0, [pc, #116]	; (8000694 <poll_i2c_sensor+0x94>)
 8000620:	f007 fab2 	bl	8007b88 <HAL_I2C_Master_Transmit>
 8000624:	4603      	mov	r3, r0
 8000626:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d009      	beq.n	8000642 <poll_i2c_sensor+0x42>
		strcpy((char*) buf, "Error Tx\r\n");
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	4a19      	ldr	r2, [pc, #100]	; (8000698 <poll_i2c_sensor+0x98>)
 8000634:	ca07      	ldmia	r2, {r0, r1, r2}
 8000636:	c303      	stmia	r3!, {r0, r1}
 8000638:	801a      	strh	r2, [r3, #0]
 800063a:	3302      	adds	r3, #2
 800063c:	0c12      	lsrs	r2, r2, #16
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	e022      	b.n	8000688 <poll_i2c_sensor+0x88>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	b299      	uxth	r1, r3
 8000646:	f107 0208 	add.w	r2, r7, #8
 800064a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2302      	movs	r3, #2
 8000652:	4810      	ldr	r0, [pc, #64]	; (8000694 <poll_i2c_sensor+0x94>)
 8000654:	f007 fbb0 	bl	8007db8 <HAL_I2C_Master_Receive>
 8000658:	4603      	mov	r3, r0
 800065a:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 800065c:	7b7b      	ldrb	r3, [r7, #13]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d009      	beq.n	8000676 <poll_i2c_sensor+0x76>
			strcpy((char*) buf, "Error Rx\r\n");
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4a0d      	ldr	r2, [pc, #52]	; (800069c <poll_i2c_sensor+0x9c>)
 8000668:	ca07      	ldmia	r2, {r0, r1, r2}
 800066a:	c303      	stmia	r3!, {r0, r1}
 800066c:	801a      	strh	r2, [r3, #0]
 800066e:	3302      	adds	r3, #2
 8000670:	0c12      	lsrs	r2, r2, #16
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e008      	b.n	8000688 <poll_i2c_sensor+0x88>
		} else {
			output = (int16_t) (buf[0] << 8);
 8000676:	7a3b      	ldrb	r3, [r7, #8]
 8000678:	021b      	lsls	r3, r3, #8
 800067a:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 800067c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000680:	7a7a      	ldrb	r2, [r7, #9]
 8000682:	4313      	orrs	r3, r2
 8000684:	10db      	asrs	r3, r3, #3
 8000686:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8000688:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	24000360 	.word	0x24000360
 8000698:	08010f10 	.word	0x08010f10
 800069c:	08010f1c 	.word	0x08010f1c

080006a0 <i2c>:
/**
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t* i2c() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006a6:	2390      	movs	r3, #144	; 0x90
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffa9 	bl	8000600 <poll_i2c_sensor>
 80006ae:	4603      	mov	r3, r0
 80006b0:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006b2:	2394      	movs	r3, #148	; 0x94
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ffa3 	bl	8000600 <poll_i2c_sensor>
 80006ba:	4603      	mov	r3, r0
 80006bc:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006be:	2392      	movs	r3, #146	; 0x92
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff9d 	bl	8000600 <poll_i2c_sensor>
 80006c6:	4603      	mov	r3, r0
 80006c8:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006ca:	2396      	movs	r3, #150	; 0x96
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff97 	bl	8000600 <poll_i2c_sensor>
 80006d2:	4603      	mov	r3, r0
 80006d4:	813b      	strh	r3, [r7, #8]

	int16_t *results = malloc(4 * sizeof(int16_t));
 80006d6:	2008      	movs	r0, #8
 80006d8:	f010 fab4 	bl	8010c44 <malloc>
 80006dc:	4603      	mov	r3, r0
 80006de:	607b      	str	r3, [r7, #4]
	results[0] = output1;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	89fa      	ldrh	r2, [r7, #14]
 80006e4:	801a      	strh	r2, [r3, #0]
	results[1] = output2;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3302      	adds	r3, #2
 80006ea:	89ba      	ldrh	r2, [r7, #12]
 80006ec:	801a      	strh	r2, [r3, #0]
	results[2] = output3;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3304      	adds	r3, #4
 80006f2:	897a      	ldrh	r2, [r7, #10]
 80006f4:	801a      	strh	r2, [r3, #0]
	results[3] = output4;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3306      	adds	r3, #6
 80006fa:	893a      	ldrh	r2, [r7, #8]
 80006fc:	801a      	strh	r2, [r3, #0]
	return results;
 80006fe:	687b      	ldr	r3, [r7, #4]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <spi>:
 * @brief polls respective spi sensor and returns uint16_t value
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi) {
 8000708:	b084      	sub	sp, #16
 800070a:	b580      	push	{r7, lr}
 800070c:	b084      	sub	sp, #16
 800070e:	af00      	add	r7, sp, #0
 8000710:	f107 0c18 	add.w	ip, r7, #24
 8000714:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi, (uint8_t*) spiRxBuffer, 1, 1);
 8000718:	1d39      	adds	r1, r7, #4
 800071a:	2301      	movs	r3, #1
 800071c:	2201      	movs	r2, #1
 800071e:	f107 0018 	add.w	r0, r7, #24
 8000722:	f00b fdfb 	bl	800c31c <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 8000726:	2300      	movs	r3, #0
 8000728:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 800072a:	797b      	ldrb	r3, [r7, #5]
 800072c:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1 << 10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	69bb      	ldr	r3, [r7, #24]
 8000734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000738:	601a      	str	r2, [r3, #0]
	uint8_t *results = malloc(2 * sizeof(uint8_t));
 800073a:	2002      	movs	r0, #2
 800073c:	f010 fa82 	bl	8010c44 <malloc>
 8000740:	4603      	mov	r3, r0
 8000742:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	7bba      	ldrb	r2, [r7, #14]
 8000748:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	3301      	adds	r3, #1
 800074e:	7bfa      	ldrb	r2, [r7, #15]
 8000750:	701a      	strb	r2, [r3, #0]
	return results;
 8000752:	68bb      	ldr	r3, [r7, #8]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800075e:	b004      	add	sp, #16
 8000760:	4770      	bx	lr
	...

08000764 <set_erpa_sweep>:

/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep() {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <set_erpa_sweep+0x28>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <set_erpa_sweep+0x2c>)
 8000770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	4806      	ldr	r0, [pc, #24]	; (8000794 <set_erpa_sweep+0x30>)
 800077a:	f003 ff36 	bl	80045ea <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800077e:	2100      	movs	r1, #0
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <set_erpa_sweep+0x30>)
 8000782:	f003 fdce 	bl	8004322 <HAL_DAC_Start>

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000084 	.word	0x24000084
 8000790:	24000000 	.word	0x24000000
 8000794:	240002d4 	.word	0x240002d4

08000798 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

	uint16_t PC4 = ADC1Data[1]; 			// SWPmon --
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <erpa_adc+0x34>)
 80007a0:	885b      	ldrh	r3, [r3, #2]
 80007a2:	80fb      	strh	r3, [r7, #6]
	uint16_t PB0 = ADC1Data[5]; 	// TEMP1 -- verified doesn't need to change
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <erpa_adc+0x34>)
 80007a6:	895b      	ldrh	r3, [r3, #10]
 80007a8:	80bb      	strh	r3, [r7, #4]

	uint16_t *results = malloc(2 * sizeof(uint16_t));
 80007aa:	2004      	movs	r0, #4
 80007ac:	f010 fa4a 	bl	8010c44 <malloc>
 80007b0:	4603      	mov	r3, r0
 80007b2:	603b      	str	r3, [r7, #0]
	results[0] = PC4;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	88fa      	ldrh	r2, [r7, #6]
 80007b8:	801a      	strh	r2, [r3, #0]
	results[1] = PB0;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	3302      	adds	r3, #2
 80007be:	88ba      	ldrh	r2, [r7, #4]
 80007c0:	801a      	strh	r2, [r3, #0]

	return results;
 80007c2:	683b      	ldr	r3, [r7, #0]

}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	24000660 	.word	0x24000660

080007d0 <hk_adc1>:

uint16_t* hk_adc1() {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[10];// BUSVmon -- verified doesn't need to change
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <hk_adc1+0x98>)
 80007d8:	8a9b      	ldrh	r3, [r3, #20]
 80007da:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[8];	// BUSImon -- verified doesn't need to change
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <hk_adc1+0x98>)
 80007de:	8a1b      	ldrh	r3, [r3, #16]
 80007e0:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];		// 2v5mon -- verified doesn't need to change
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <hk_adc1+0x98>)
 80007e4:	899b      	ldrh	r3, [r3, #12]
 80007e6:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// n3v3mon --
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <hk_adc1+0x98>)
 80007ea:	8a5b      	ldrh	r3, [r3, #18]
 80007ec:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[2];		// n200v -- verified doesn't need to change
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <hk_adc1+0x98>)
 80007f0:	889b      	ldrh	r3, [r3, #4]
 80007f2:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3];				// n800v --
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <hk_adc1+0x98>)
 80007f6:	88db      	ldrh	r3, [r3, #6]
 80007f8:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// 5vmon --
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <hk_adc1+0x98>)
 80007fc:	89db      	ldrh	r3, [r3, #14]
 80007fe:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];		// 15vmon -- verified doesn't need to change
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <hk_adc1+0x98>)
 8000802:	891b      	ldrh	r3, [r3, #8]
 8000804:	813b      	strh	r3, [r7, #8]
	uint16_t PA6 = ADC1Data[0];				// 5vrefmon --
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <hk_adc1+0x98>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	80fb      	strh	r3, [r7, #6]

	uint16_t *results = malloc(9 * sizeof(uint16_t));
 800080c:	2012      	movs	r0, #18
 800080e:	f010 fa19 	bl	8010c44 <malloc>
 8000812:	4603      	mov	r3, r0
 8000814:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	8afa      	ldrh	r2, [r7, #22]
 800081a:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	3302      	adds	r3, #2
 8000820:	8aba      	ldrh	r2, [r7, #20]
 8000822:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	3304      	adds	r3, #4
 8000828:	8a7a      	ldrh	r2, [r7, #18]
 800082a:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	3306      	adds	r3, #6
 8000830:	8a3a      	ldrh	r2, [r7, #16]
 8000832:	801a      	strh	r2, [r3, #0]
	results[4] = PB1;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	3308      	adds	r3, #8
 8000838:	89fa      	ldrh	r2, [r7, #14]
 800083a:	801a      	strh	r2, [r3, #0]
	results[5] = PA7;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	330a      	adds	r3, #10
 8000840:	89ba      	ldrh	r2, [r7, #12]
 8000842:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	330c      	adds	r3, #12
 8000848:	897a      	ldrh	r2, [r7, #10]
 800084a:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	330e      	adds	r3, #14
 8000850:	893a      	ldrh	r2, [r7, #8]
 8000852:	801a      	strh	r2, [r3, #0]
	results[8] = PA6;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	3310      	adds	r3, #16
 8000858:	88fa      	ldrh	r2, [r7, #6]
 800085a:	801a      	strh	r2, [r3, #0]

	return results;
 800085c:	683b      	ldr	r3, [r7, #0]

}
 800085e:	4618      	mov	r0, r3
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	24000660 	.word	0x24000660

0800086c <hk_adc3>:

uint16_t* hk_adc3() {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[0];
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <hk_adc3+0x50>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[1];
 8000878:	4b10      	ldr	r3, [pc, #64]	; (80008bc <hk_adc3+0x50>)
 800087a:	885b      	ldrh	r3, [r3, #2]
 800087c:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3Data[2]; 		// n5vmon --
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <hk_adc3+0x50>)
 8000880:	889b      	ldrh	r3, [r3, #4]
 8000882:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3Data[3];			// 3v3mon --
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <hk_adc3+0x50>)
 8000886:	88db      	ldrh	r3, [r3, #6]
 8000888:	813b      	strh	r3, [r7, #8]

	uint16_t *results = malloc(4 * sizeof(uint16_t));
 800088a:	2008      	movs	r0, #8
 800088c:	f010 f9da 	bl	8010c44 <malloc>
 8000890:	4603      	mov	r3, r0
 8000892:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	89fa      	ldrh	r2, [r7, #14]
 8000898:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3302      	adds	r3, #2
 800089e:	89ba      	ldrh	r2, [r7, #12]
 80008a0:	801a      	strh	r2, [r3, #0]
	results[2] = PC2;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3304      	adds	r3, #4
 80008a6:	897a      	ldrh	r2, [r7, #10]
 80008a8:	801a      	strh	r2, [r3, #0]
	results[3] = PC3;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3306      	adds	r3, #6
 80008ae:	893a      	ldrh	r2, [r7, #8]
 80008b0:	801a      	strh	r2, [r3, #0]

	return results;
 80008b2:	687b      	ldr	r3, [r7, #4]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	24000680 	.word	0x24000680

080008c0 <send_erpa_packet>:
 * @brief sends erpa packet via UART
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t *erpa_spi, uint16_t *erpa_adc_results) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  			// ERPA SYNC 0xAA MSB
 80008ca:	23aa      	movs	r3, #170	; 0xaa
 80008cc:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  			// ERPA SYNC 0xAA LSB
 80008ce:	23aa      	movs	r3, #170	; 0xaa
 80008d0:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 				// ERPA SEQ # MSB
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <send_erpa_packet+0x90>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	0a1b      	lsrs	r3, r3, #8
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          				// ERPA SEQ # MSB
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <send_erpa_packet+0x90>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((0 & 0xFF00) >> 8); 	  						// ENDmon MSB
 80008e6:	2300      	movs	r3, #0
 80008e8:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (0 & 0xFF);               					// ENDmon LSB
 80008ea:	2300      	movs	r3, #0
 80008ec:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[0] & 0xFF00) >> 8);    // SWP Monitored MSB
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	0a1b      	lsrs	r3, r3, #8
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[0] & 0xFF);             // SWP Monitored LSB
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[1] & 0xFF00) >> 8);    // TEMPURATURE 1 MSB
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	3302      	adds	r3, #2
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	b29b      	uxth	r3, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[1] & 0xFF);             // TEMPURATURE 1 LSB
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	3302      	adds	r3, #2
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     				// TEMPURATURE 2 MSB
 800091a:	2300      	movs	r3, #0
 800091c:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    			// TEMPURATURE 2 LSB
 800091e:	2300      	movs	r3, #0
 8000920:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];									// ERPA eADC MSB
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];									// ERPA eADC LSB
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	785b      	ldrb	r3, [r3, #1]
 800092c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 800092e:	f107 0108 	add.w	r1, r7, #8
 8000932:	2364      	movs	r3, #100	; 0x64
 8000934:	220e      	movs	r2, #14
 8000936:	4807      	ldr	r0, [pc, #28]	; (8000954 <send_erpa_packet+0x94>)
 8000938:	f00d fda6 	bl	800e488 <HAL_UART_Transmit>
	erpa_seq++;
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <send_erpa_packet+0x90>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	b29a      	uxth	r2, r3
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <send_erpa_packet+0x90>)
 8000946:	801a      	strh	r2, [r3, #0]

}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2400068c 	.word	0x2400068c
 8000954:	2400055c 	.word	0x2400055c

08000958 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results,
		uint16_t *hk_adc3_results) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b08e      	sub	sp, #56	; 0x38
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];									// GUI Structure

	hk_buf[0] = hk_sync;                     			// HK SYNC 0xCC MSB
 8000964:	23cc      	movs	r3, #204	; 0xcc
 8000966:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     			// HK SYNC 0xCC LSB
 8000968:	23cc      	movs	r3, #204	; 0xcc
 800096a:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 800096c:	4b7d      	ldr	r3, [pc, #500]	; (8000b64 <send_hk_packet+0x20c>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	b29b      	uxth	r3, r3
 8000974:	b2db      	uxtb	r3, r3
 8000976:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 8000978:	4b7a      	ldr	r3, [pc, #488]	; (8000b64 <send_hk_packet+0x20c>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);	// HK vsense MSB
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3302      	adds	r3, #2
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	0a1b      	lsrs	r3, r3, #8
 8000988:	b29b      	uxth	r3, r3
 800098a:	b2db      	uxtb	r3, r3
 800098c:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);			// HK vsense LSB
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3302      	adds	r3, #2
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	b29b      	uxth	r3, r3
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);			// HK vrefint LSB
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);		// HK TEMP1 MSB
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b2:	121b      	asrs	r3, r3, #8
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);					// HK TEMP1 LSB
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);		// HK TEMP2 MSB
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3302      	adds	r3, #2
 80009c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ca:	121b      	asrs	r3, r3, #8
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);				// HK TEMP2 LSB
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3302      	adds	r3, #2
 80009d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);		// HK TEMP3 MSB
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3304      	adds	r3, #4
 80009e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e4:	121b      	asrs	r3, r3, #8
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);				// HK TEMP3 LSB
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3304      	adds	r3, #4
 80009ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);		// HK TEMP4 MSB
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3306      	adds	r3, #6
 80009fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009fe:	121b      	asrs	r3, r3, #8
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);				// HK TEMP4 LSB
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	3306      	adds	r3, #6
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);			// HK BUSvmon LSB
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	0a1b      	lsrs	r3, r3, #8
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);			// HK BUSimon LSB
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	3304      	adds	r3, #4
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	0a1b      	lsrs	r3, r3, #8
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);			// HK 2v5mon LSB
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	3304      	adds	r3, #4
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc3_results[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3306      	adds	r3, #6
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	0a1b      	lsrs	r3, r3, #8
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc3_results[3] & 0xFF);			// HK 3v3mon LSB
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3306      	adds	r3, #6
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	330c      	adds	r3, #12
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[6] & 0xFF);			// HK 5vmon LSB
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	330c      	adds	r3, #12
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	3306      	adds	r3, #6
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[3] & 0xFF);			// HK n3v3mon LSB
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	3306      	adds	r3, #6
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc3_results[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	0a1b      	lsrs	r3, r3, #8
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc3_results[2] & 0xFF);			// HK n5vmon LSB
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3304      	adds	r3, #4
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	330e      	adds	r3, #14
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	0a1b      	lsrs	r3, r3, #8
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);			// HK 15vmon LSB
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	330e      	adds	r3, #14
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3310      	adds	r3, #16
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	0a1b      	lsrs	r3, r3, #8
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);			// HK 5vrefmon LSB
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	3310      	adds	r3, #16
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3308      	adds	r3, #8
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	0a1b      	lsrs	r3, r3, #8
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[4] & 0xFF);			// HK n150vmon LSB
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3308      	adds	r3, #8
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	330a      	adds	r3, #10
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	0a1b      	lsrs	r3, r3, #8
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc1_results[5] & 0xFF);			// HK n800vmon LSB
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	330a      	adds	r3, #10
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000b40:	f107 0110 	add.w	r1, r7, #16
 8000b44:	2364      	movs	r3, #100	; 0x64
 8000b46:	2226      	movs	r2, #38	; 0x26
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <send_hk_packet+0x210>)
 8000b4a:	f00d fc9d 	bl	800e488 <HAL_UART_Transmit>
	hk_seq++;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <send_hk_packet+0x20c>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <send_hk_packet+0x20c>)
 8000b58:	801a      	strh	r2, [r3, #0]

}
 8000b5a:	bf00      	nop
 8000b5c:	3738      	adds	r7, #56	; 0x38
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	24000690 	.word	0x24000690
 8000b68:	2400055c 	.word	0x2400055c

08000b6c <send_pmt_packet>:
/**
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t *pmt_spi) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;						// PMT SYNC MSB 0xBB
 8000b74:	23bb      	movs	r3, #187	; 0xbb
 8000b76:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;						// PMT SYNC LSB 0xBB
 8000b78:	23bb      	movs	r3, #187	; 0xbb
 8000b7a:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);		// PMT SEQ # MSB
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <send_pmt_packet+0x54>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);				// PMT SEQ # LSB
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <send_pmt_packet+0x54>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];					// PMT eADC MSB
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];					// PMT eADC LSB
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	785b      	ldrb	r3, [r3, #1]
 8000b9a:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000b9c:	f107 0108 	add.w	r1, r7, #8
 8000ba0:	2364      	movs	r3, #100	; 0x64
 8000ba2:	2206      	movs	r2, #6
 8000ba4:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <send_pmt_packet+0x58>)
 8000ba6:	f00d fc6f 	bl	800e488 <HAL_UART_Transmit>
	pmt_seq++;
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <send_pmt_packet+0x54>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <send_pmt_packet+0x54>)
 8000bb4:	801a      	strh	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2400068e 	.word	0x2400068e
 8000bc4:	2400055c 	.word	0x2400055c

08000bc8 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b0a7      	sub	sp, #156	; 0x9c
 8000bcc:	af1e      	add	r7, sp, #120	; 0x78
 8000bce:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a3a      	ldr	r2, [pc, #232]	; (8000cbc <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d148      	bne.n	8000c6a <HAL_TIM_OC_DelayElapsedCallback+0xa2>
		if (ERPA_ON) {
 8000bd8:	4b39      	ldr	r3, [pc, #228]	; (8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d028      	beq.n	8000c32 <HAL_TIM_OC_DelayElapsedCallback+0x6a>

			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8000be0:	bf00      	nop
 8000be2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be6:	4837      	ldr	r0, [pc, #220]	; (8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000be8:	f006 ff00 	bl	80079ec <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f7      	bne.n	8000be2 <HAL_TIM_OC_DelayElapsedCallback+0x1a>
			}

			uint8_t *spi2_results = spi(hspi2);
 8000bf2:	4c35      	ldr	r4, [pc, #212]	; (8000cc8 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000bf4:	4668      	mov	r0, sp
 8000bf6:	f104 0310 	add.w	r3, r4, #16
 8000bfa:	2278      	movs	r2, #120	; 0x78
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f010 f921 	bl	8010e44 <memcpy>
 8000c02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c06:	f7ff fd7f 	bl	8000708 <spi>
 8000c0a:	61b8      	str	r0, [r7, #24]
			uint16_t *erpa_adc_results = erpa_adc();
 8000c0c:	f7ff fdc4 	bl	8000798 <erpa_adc>
 8000c10:	6178      	str	r0, [r7, #20]

			if (!auto_sweep){
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <HAL_TIM_OC_DelayElapsedCallback+0x56>
				set_erpa_sweep();
 8000c1a:	f7ff fda3 	bl	8000764 <set_erpa_sweep>
			}

			send_erpa_packet(spi2_results, erpa_adc_results);
 8000c1e:	6979      	ldr	r1, [r7, #20]
 8000c20:	69b8      	ldr	r0, [r7, #24]
 8000c22:	f7ff fe4d 	bl	80008c0 <send_erpa_packet>

			free(spi2_results);
 8000c26:	69b8      	ldr	r0, [r7, #24]
 8000c28:	f010 f814 	bl	8010c54 <free>
			free(erpa_adc_results);
 8000c2c:	6978      	ldr	r0, [r7, #20]
 8000c2e:	f010 f811 	bl	8010c54 <free>
		}
		if (HK_ON) {
 8000c32:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d03b      	beq.n	8000cb2 <HAL_TIM_OC_DelayElapsedCallback+0xea>
			int16_t *i2c_values = i2c();
 8000c3a:	f7ff fd31 	bl	80006a0 <i2c>
 8000c3e:	6138      	str	r0, [r7, #16]
			uint16_t *hk_adc1_results = hk_adc1();
 8000c40:	f7ff fdc6 	bl	80007d0 <hk_adc1>
 8000c44:	60f8      	str	r0, [r7, #12]
			uint16_t *hk_adc3_results = hk_adc3();
 8000c46:	f7ff fe11 	bl	800086c <hk_adc3>
 8000c4a:	60b8      	str	r0, [r7, #8]

			send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000c4c:	68ba      	ldr	r2, [r7, #8]
 8000c4e:	68f9      	ldr	r1, [r7, #12]
 8000c50:	6938      	ldr	r0, [r7, #16]
 8000c52:	f7ff fe81 	bl	8000958 <send_hk_packet>

			free(i2c_values);
 8000c56:	6938      	ldr	r0, [r7, #16]
 8000c58:	f00f fffc 	bl	8010c54 <free>
			free(hk_adc1_results);
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f00f fff9 	bl	8010c54 <free>
			free(hk_adc3_results);
 8000c62:	68b8      	ldr	r0, [r7, #8]
 8000c64:	f00f fff6 	bl	8010c54 <free>
			send_pmt_packet(spi1_results);

			free(spi1_results);
		}
	}
}
 8000c68:	e023      	b.n	8000cb2 <HAL_TIM_OC_DelayElapsedCallback+0xea>
	} else if (htim == &htim1) {
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d11f      	bne.n	8000cb2 <HAL_TIM_OC_DelayElapsedCallback+0xea>
		if (PMT_ON) {
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d01b      	beq.n	8000cb2 <HAL_TIM_OC_DelayElapsedCallback+0xea>
			while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000c7a:	bf00      	nop
 8000c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c80:	4816      	ldr	r0, [pc, #88]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000c82:	f006 feb3 	bl	80079ec <HAL_GPIO_ReadPin>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1f7      	bne.n	8000c7c <HAL_TIM_OC_DelayElapsedCallback+0xb4>
			uint8_t *spi1_results = spi(hspi1);
 8000c8c:	4c14      	ldr	r4, [pc, #80]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8000c8e:	4668      	mov	r0, sp
 8000c90:	f104 0310 	add.w	r3, r4, #16
 8000c94:	2278      	movs	r2, #120	; 0x78
 8000c96:	4619      	mov	r1, r3
 8000c98:	f010 f8d4 	bl	8010e44 <memcpy>
 8000c9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ca0:	f7ff fd32 	bl	8000708 <spi>
 8000ca4:	61f8      	str	r0, [r7, #28]
			send_pmt_packet(spi1_results);
 8000ca6:	69f8      	ldr	r0, [r7, #28]
 8000ca8:	f7ff ff60 	bl	8000b6c <send_pmt_packet>
			free(spi1_results);
 8000cac:	69f8      	ldr	r0, [r7, #28]
 8000cae:	f00f ffd1 	bl	8010c54 <free>
}
 8000cb2:	bf00      	nop
 8000cb4:	3724      	adds	r7, #36	; 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd90      	pop	{r4, r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	24000510 	.word	0x24000510
 8000cc0:	24000693 	.word	0x24000693
 8000cc4:	58020400 	.word	0x58020400
 8000cc8:	2400043c 	.word	0x2400043c
 8000ccc:	24000688 	.word	0x24000688
 8000cd0:	24000694 	.word	0x24000694
 8000cd4:	240004c4 	.word	0x240004c4
 8000cd8:	24000692 	.word	0x24000692
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240003b4 	.word	0x240003b4

08000ce4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000cec:	2201      	movs	r2, #1
 8000cee:	49bb      	ldr	r1, [pc, #748]	; (8000fdc <HAL_UART_RxCpltCallback+0x2f8>)
 8000cf0:	48bb      	ldr	r0, [pc, #748]	; (8000fe0 <HAL_UART_RxCpltCallback+0x2fc>)
 8000cf2:	f00d fc57 	bl	800e5a4 <HAL_UART_Receive_IT>
	unsigned char key = rx_buf[0];
 8000cf6:	4bb9      	ldr	r3, [pc, #740]	; (8000fdc <HAL_UART_RxCpltCallback+0x2f8>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2b25      	cmp	r3, #37	; 0x25
 8000d00:	f200 8167 	bhi.w	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
 8000d04:	a201      	add	r2, pc, #4	; (adr r2, 8000d0c <HAL_UART_RxCpltCallback+0x28>)
 8000d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0a:	bf00      	nop
 8000d0c:	08000e75 	.word	0x08000e75
 8000d10:	08000e91 	.word	0x08000e91
 8000d14:	08000ead 	.word	0x08000ead
 8000d18:	08000ecd 	.word	0x08000ecd
 8000d1c:	08000eed 	.word	0x08000eed
 8000d20:	08000f09 	.word	0x08000f09
 8000d24:	08000f29 	.word	0x08000f29
 8000d28:	08000f49 	.word	0x08000f49
 8000d2c:	08000fd3 	.word	0x08000fd3
 8000d30:	08000fd3 	.word	0x08000fd3
 8000d34:	08000db3 	.word	0x08000db3
 8000d38:	08000da5 	.word	0x08000da5
 8000d3c:	08000f65 	.word	0x08000f65
 8000d40:	08000f75 	.word	0x08000f75
 8000d44:	08000f95 	.word	0x08000f95
 8000d48:	08000fb5 	.word	0x08000fb5
 8000d4c:	08000f85 	.word	0x08000f85
 8000d50:	08000fa5 	.word	0x08000fa5
 8000d54:	08000fbd 	.word	0x08000fbd
 8000d58:	08000e83 	.word	0x08000e83
 8000d5c:	08000e9f 	.word	0x08000e9f
 8000d60:	08000ebd 	.word	0x08000ebd
 8000d64:	08000edd 	.word	0x08000edd
 8000d68:	08000efb 	.word	0x08000efb
 8000d6c:	08000f19 	.word	0x08000f19
 8000d70:	08000f39 	.word	0x08000f39
 8000d74:	08000f57 	.word	0x08000f57
 8000d78:	08000dc1 	.word	0x08000dc1
 8000d7c:	08000dd9 	.word	0x08000dd9
 8000d80:	08000df1 	.word	0x08000df1
 8000d84:	08000fd3 	.word	0x08000fd3
 8000d88:	08000fd3 	.word	0x08000fd3
 8000d8c:	08000fd3 	.word	0x08000fd3
 8000d90:	08000fd3 	.word	0x08000fd3
 8000d94:	08000fd3 	.word	0x08000fd3
 8000d98:	08000fd3 	.word	0x08000fd3
 8000d9c:	08000e2d 	.word	0x08000e2d
 8000da0:	08000e51 	.word	0x08000e51
	case 0x0B: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000da4:	4b8f      	ldr	r3, [pc, #572]	; (8000fe4 <HAL_UART_RxCpltCallback+0x300>)
 8000da6:	2104      	movs	r1, #4
 8000da8:	2201      	movs	r2, #1
 8000daa:	4618      	mov	r0, r3
 8000dac:	f006 fe36 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000db0:	e10f      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x0A: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000db2:	4b8c      	ldr	r3, [pc, #560]	; (8000fe4 <HAL_UART_RxCpltCallback+0x300>)
 8000db4:	2104      	movs	r1, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f006 fe2f 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000dbe:	e108      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x1B: {
		if (step < 17) {
 8000dc0:	4b89      	ldr	r3, [pc, #548]	; (8000fe8 <HAL_UART_RxCpltCallback+0x304>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b10      	cmp	r3, #16
 8000dc6:	f200 80fd 	bhi.w	8000fc4 <HAL_UART_RxCpltCallback+0x2e0>
			step+=2;
 8000dca:	4b87      	ldr	r3, [pc, #540]	; (8000fe8 <HAL_UART_RxCpltCallback+0x304>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3302      	adds	r3, #2
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b85      	ldr	r3, [pc, #532]	; (8000fe8 <HAL_UART_RxCpltCallback+0x304>)
 8000dd4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000dd6:	e0f5      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x2e0>
	}
	case 0x1C: {
		if (step > 3) {
 8000dd8:	4b83      	ldr	r3, [pc, #524]	; (8000fe8 <HAL_UART_RxCpltCallback+0x304>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	f240 80f3 	bls.w	8000fc8 <HAL_UART_RxCpltCallback+0x2e4>
			step-=2;
 8000de2:	4b81      	ldr	r3, [pc, #516]	; (8000fe8 <HAL_UART_RxCpltCallback+0x304>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	3b02      	subs	r3, #2
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4b7f      	ldr	r3, [pc, #508]	; (8000fe8 <HAL_UART_RxCpltCallback+0x304>)
 8000dec:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000dee:	e0eb      	b.n	8000fc8 <HAL_UART_RxCpltCallback+0x2e4>
	}
	case 0x1D: {
		if (!auto_sweep) {
 8000df0:	4b7e      	ldr	r3, [pc, #504]	; (8000fec <HAL_UART_RxCpltCallback+0x308>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d10e      	bne.n	8000e16 <HAL_UART_RxCpltCallback+0x132>
			auto_sweep = 1;
 8000df8:	4b7c      	ldr	r3, [pc, #496]	; (8000fec <HAL_UART_RxCpltCallback+0x308>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000dfe:	487c      	ldr	r0, [pc, #496]	; (8000ff0 <HAL_UART_RxCpltCallback+0x30c>)
 8000e00:	f00b fe10 	bl	800ca24 <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, SIZE, DAC_ALIGN_12B_R);
 8000e04:	2300      	movs	r3, #0
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2320      	movs	r3, #32
 8000e0a:	4a7a      	ldr	r2, [pc, #488]	; (8000ff4 <HAL_UART_RxCpltCallback+0x310>)
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	487a      	ldr	r0, [pc, #488]	; (8000ff8 <HAL_UART_RxCpltCallback+0x314>)
 8000e10:	f003 fade 	bl	80043d0 <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 8000e14:	e0dd      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
			auto_sweep = 0;
 8000e16:	4b75      	ldr	r3, [pc, #468]	; (8000fec <HAL_UART_RxCpltCallback+0x308>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000e1c:	4874      	ldr	r0, [pc, #464]	; (8000ff0 <HAL_UART_RxCpltCallback+0x30c>)
 8000e1e:	f00b fe71 	bl	800cb04 <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000e22:	2100      	movs	r1, #0
 8000e24:	4874      	ldr	r0, [pc, #464]	; (8000ff8 <HAL_UART_RxCpltCallback+0x314>)
 8000e26:	f003 fb93 	bl	8004550 <HAL_DAC_Stop_DMA>
		break;
 8000e2a:	e0d2      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x24: {
		if (cadence <= 50000){
 8000e2c:	4b73      	ldr	r3, [pc, #460]	; (8000ffc <HAL_UART_RxCpltCallback+0x318>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e34:	4293      	cmp	r3, r2
 8000e36:	f200 80c9 	bhi.w	8000fcc <HAL_UART_RxCpltCallback+0x2e8>
			cadence *= 2;
 8000e3a:	4b70      	ldr	r3, [pc, #448]	; (8000ffc <HAL_UART_RxCpltCallback+0x318>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4a6e      	ldr	r2, [pc, #440]	; (8000ffc <HAL_UART_RxCpltCallback+0x318>)
 8000e42:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e48:	4b6c      	ldr	r3, [pc, #432]	; (8000ffc <HAL_UART_RxCpltCallback+0x318>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e4e:	e0bd      	b.n	8000fcc <HAL_UART_RxCpltCallback+0x2e8>
	}
	case 0x25: {
		if (cadence >= 6250){
 8000e50:	4b6a      	ldr	r3, [pc, #424]	; (8000ffc <HAL_UART_RxCpltCallback+0x318>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	f240 80b9 	bls.w	8000fd0 <HAL_UART_RxCpltCallback+0x2ec>
			cadence /= 2;
 8000e5e:	4b67      	ldr	r3, [pc, #412]	; (8000ffc <HAL_UART_RxCpltCallback+0x318>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	085b      	lsrs	r3, r3, #1
 8000e64:	4a65      	ldr	r2, [pc, #404]	; (8000ffc <HAL_UART_RxCpltCallback+0x318>)
 8000e66:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6c:	4b63      	ldr	r3, [pc, #396]	; (8000ffc <HAL_UART_RxCpltCallback+0x318>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e72:	e0ad      	b.n	8000fd0 <HAL_UART_RxCpltCallback+0x2ec>
	}
	case 0x00: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000e74:	4b5b      	ldr	r3, [pc, #364]	; (8000fe4 <HAL_UART_RxCpltCallback+0x300>)
 8000e76:	2120      	movs	r1, #32
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f006 fdce 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000e80:	e0a7      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x13: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000e82:	4b58      	ldr	r3, [pc, #352]	; (8000fe4 <HAL_UART_RxCpltCallback+0x300>)
 8000e84:	2120      	movs	r1, #32
 8000e86:	2200      	movs	r2, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f006 fdc7 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000e8e:	e0a0      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x01: {

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000e90:	4b54      	ldr	r3, [pc, #336]	; (8000fe4 <HAL_UART_RxCpltCallback+0x300>)
 8000e92:	2140      	movs	r1, #64	; 0x40
 8000e94:	2201      	movs	r2, #1
 8000e96:	4618      	mov	r0, r3
 8000e98:	f006 fdc0 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000e9c:	e099      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x14: {
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000e9e:	4b51      	ldr	r3, [pc, #324]	; (8000fe4 <HAL_UART_RxCpltCallback+0x300>)
 8000ea0:	2140      	movs	r1, #64	; 0x40
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f006 fdb9 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000eaa:	e092      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x02: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000eac:	4b54      	ldr	r3, [pc, #336]	; (8001000 <HAL_UART_RxCpltCallback+0x31c>)
 8000eae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f006 fdb1 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000eba:	e08a      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x15: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ebc:	4b50      	ldr	r3, [pc, #320]	; (8001000 <HAL_UART_RxCpltCallback+0x31c>)
 8000ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f006 fda9 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000eca:	e082      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x03: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000ecc:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <HAL_UART_RxCpltCallback+0x31c>)
 8000ece:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f006 fda1 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000eda:	e07a      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x16: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000edc:	4b48      	ldr	r3, [pc, #288]	; (8001000 <HAL_UART_RxCpltCallback+0x31c>)
 8000ede:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f006 fd99 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000eea:	e072      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x04: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000eec:	4b44      	ldr	r3, [pc, #272]	; (8001000 <HAL_UART_RxCpltCallback+0x31c>)
 8000eee:	2180      	movs	r1, #128	; 0x80
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f006 fd92 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000ef8:	e06b      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x17: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000efa:	4b41      	ldr	r3, [pc, #260]	; (8001000 <HAL_UART_RxCpltCallback+0x31c>)
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	2200      	movs	r2, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f006 fd8b 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000f06:	e064      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x05: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000f08:	4b3d      	ldr	r3, [pc, #244]	; (8001000 <HAL_UART_RxCpltCallback+0x31c>)
 8000f0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4618      	mov	r0, r3
 8000f12:	f006 fd83 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000f16:	e05c      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x18: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000f18:	4b39      	ldr	r3, [pc, #228]	; (8001000 <HAL_UART_RxCpltCallback+0x31c>)
 8000f1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f006 fd7b 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000f26:	e054      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x06: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000f28:	4b35      	ldr	r3, [pc, #212]	; (8001000 <HAL_UART_RxCpltCallback+0x31c>)
 8000f2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4618      	mov	r0, r3
 8000f32:	f006 fd73 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000f36:	e04c      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x19: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000f38:	4b31      	ldr	r3, [pc, #196]	; (8001000 <HAL_UART_RxCpltCallback+0x31c>)
 8000f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f006 fd6b 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000f46:	e044      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x07: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000f48:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_UART_RxCpltCallback+0x31c>)
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f006 fd64 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000f54:	e03d      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x1A: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <HAL_UART_RxCpltCallback+0x31c>)
 8000f58:	2140      	movs	r1, #64	; 0x40
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f006 fd5d 	bl	8007a1c <HAL_GPIO_WritePin>
		break;
 8000f62:	e036      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x0C: {
		HAL_SuspendTick();
 8000f64:	f001 fc66 	bl	8002834 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000f68:	2101      	movs	r1, #1
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f007 fb58 	bl	8008620 <HAL_PWR_EnterSTOPMode>
		NVIC_SystemReset();
 8000f70:	f7ff fb30 	bl	80005d4 <__NVIC_SystemReset>
		break;
	}
	case 0x0D: {
		PMT_ON = 1;
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <HAL_UART_RxCpltCallback+0x320>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4822      	ldr	r0, [pc, #136]	; (8001008 <HAL_UART_RxCpltCallback+0x324>)
 8000f7e:	f00b fde9 	bl	800cb54 <HAL_TIM_OC_Start_IT>
		break;
 8000f82:	e026      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x10: {
		PMT_ON = 0;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <HAL_UART_RxCpltCallback+0x320>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	481e      	ldr	r0, [pc, #120]	; (8001008 <HAL_UART_RxCpltCallback+0x324>)
 8000f8e:	f00b ff3b 	bl	800ce08 <HAL_TIM_OC_Stop_IT>

		break;
 8000f92:	e01e      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x0E: {
		ERPA_ON = 1;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <HAL_UART_RxCpltCallback+0x328>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000f9a:	210c      	movs	r1, #12
 8000f9c:	4814      	ldr	r0, [pc, #80]	; (8000ff0 <HAL_UART_RxCpltCallback+0x30c>)
 8000f9e:	f00b fdd9 	bl	800cb54 <HAL_TIM_OC_Start_IT>
		break;
 8000fa2:	e016      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x11: {
		ERPA_ON = 0;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <HAL_UART_RxCpltCallback+0x328>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000faa:	210c      	movs	r1, #12
 8000fac:	4810      	ldr	r0, [pc, #64]	; (8000ff0 <HAL_UART_RxCpltCallback+0x30c>)
 8000fae:	f00b ff2b 	bl	800ce08 <HAL_TIM_OC_Stop_IT>

		break;
 8000fb2:	e00e      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x0F: {
		HK_ON = 1;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <HAL_UART_RxCpltCallback+0x32c>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
		break;
 8000fba:	e00a      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x12: {
		HK_ON = 0;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_UART_RxCpltCallback+0x32c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
		break;
 8000fc2:	e006      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
		break;
 8000fc4:	bf00      	nop
 8000fc6:	e004      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
		break;
 8000fc8:	bf00      	nop
 8000fca:	e002      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
		break;
 8000fcc:	bf00      	nop
 8000fce:	e000      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0x2ee>
		break;
 8000fd0:	bf00      	nop
	}
	}
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	240005f0 	.word	0x240005f0
 8000fe0:	2400055c 	.word	0x2400055c
 8000fe4:	58020400 	.word	0x58020400
 8000fe8:	24000084 	.word	0x24000084
 8000fec:	24000688 	.word	0x24000688
 8000ff0:	24000510 	.word	0x24000510
 8000ff4:	24000000 	.word	0x24000000
 8000ff8:	240002d4 	.word	0x240002d4
 8000ffc:	24000080 	.word	0x24000080
 8001000:	58020800 	.word	0x58020800
 8001004:	24000692 	.word	0x24000692
 8001008:	240004c4 	.word	0x240004c4
 800100c:	24000693 	.word	0x24000693
 8001010:	24000694 	.word	0x24000694

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f001 fb7a 	bl	8002710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101c:	f000 f874 	bl	8001108 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001020:	f000 f8f8 	bl	8001214 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 fd7e 	bl	8001b24 <MX_GPIO_Init>
  MX_DMA_Init();
 8001028:	f000 fd4c 	bl	8001ac4 <MX_DMA_Init>
  MX_DAC1_Init();
 800102c:	f000 fad6 	bl	80015dc <MX_DAC1_Init>
  MX_ADC1_Init();
 8001030:	f000 f920 	bl	8001274 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001034:	f000 fa40 	bl	80014b8 <MX_ADC3_Init>
  MX_TIM2_Init();
 8001038:	f000 fc82 	bl	8001940 <MX_TIM2_Init>
  MX_TIM1_Init();
 800103c:	f000 fbf0 	bl	8001820 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001040:	f000 fafe 	bl	8001640 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001044:	f000 fb3c 	bl	80016c0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001048:	f000 fb92 	bl	8001770 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800104c:	f000 fcee 	bl	8001a2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  TIM2->CCR4 = 312;
 8001050:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001054:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001058:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800105a:	210c      	movs	r1, #12
 800105c:	4823      	ldr	r0, [pc, #140]	; (80010ec <main+0xd8>)
 800105e:	f00c f80f 	bl	800d080 <HAL_TIM_PWM_Start>




  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001062:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001066:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800106a:	4821      	ldr	r0, [pc, #132]	; (80010f0 <main+0xdc>)
 800106c:	f002 fee6 	bl	8003e3c <HAL_ADCEx_Calibration_Start>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <main+0x66>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 8001076:	f000 fdcf 	bl	8001c18 <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1Data,
 800107a:	220b      	movs	r2, #11
 800107c:	491d      	ldr	r1, [pc, #116]	; (80010f4 <main+0xe0>)
 800107e:	481c      	ldr	r0, [pc, #112]	; (80010f0 <main+0xdc>)
 8001080:	f001 ffba 	bl	8002ff8 <HAL_ADC_Start_DMA>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <main+0x7a>
  	ADC1NumChannels) != HAL_OK) {
  		Error_Handler();
 800108a:	f000 fdc5 	bl	8001c18 <Error_Handler>
  	}

  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800108e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001092:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001096:	4818      	ldr	r0, [pc, #96]	; (80010f8 <main+0xe4>)
 8001098:	f002 fed0 	bl	8003e3c <HAL_ADCEx_Calibration_Start>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <main+0x92>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 80010a2:	f000 fdb9 	bl	8001c18 <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3Data,
 80010a6:	2204      	movs	r2, #4
 80010a8:	4914      	ldr	r1, [pc, #80]	; (80010fc <main+0xe8>)
 80010aa:	4813      	ldr	r0, [pc, #76]	; (80010f8 <main+0xe4>)
 80010ac:	f001 ffa4 	bl	8002ff8 <HAL_ADC_Start_DMA>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <main+0xa6>
  	ADC3NumChannels) != HAL_OK) {
  		Error_Handler();
 80010b6:	f000 fdaf 	bl	8001c18 <Error_Handler>
  	}

  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET)
 80010ba:	bf00      	nop
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <main+0xec>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ca:	d0f7      	beq.n	80010bc <main+0xa8>
  		;
  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET)
 80010cc:	bf00      	nop
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <main+0xec>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010dc:	d1f7      	bne.n	80010ce <main+0xba>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80010de:	2201      	movs	r2, #1
 80010e0:	4908      	ldr	r1, [pc, #32]	; (8001104 <main+0xf0>)
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <main+0xec>)
 80010e4:	f00d fa5e 	bl	800e5a4 <HAL_UART_Receive_IT>
 80010e8:	e7f9      	b.n	80010de <main+0xca>
 80010ea:	bf00      	nop
 80010ec:	24000510 	.word	0x24000510
 80010f0:	2400011c 	.word	0x2400011c
 80010f4:	24000660 	.word	0x24000660
 80010f8:	24000180 	.word	0x24000180
 80010fc:	24000680 	.word	0x24000680
 8001100:	2400055c 	.word	0x2400055c
 8001104:	240005f0 	.word	0x240005f0

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b09c      	sub	sp, #112	; 0x70
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001112:	224c      	movs	r2, #76	; 0x4c
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f00f fe50 	bl	8010dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2220      	movs	r2, #32
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f00f fe4a 	bl	8010dbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001128:	2002      	movs	r0, #2
 800112a:	f007 fab5 	bl	8008698 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <SystemClock_Config+0x100>)
 8001134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001136:	4a34      	ldr	r2, [pc, #208]	; (8001208 <SystemClock_Config+0x100>)
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <SystemClock_Config+0x100>)
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <SystemClock_Config+0x104>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001150:	4a2e      	ldr	r2, [pc, #184]	; (800120c <SystemClock_Config+0x104>)
 8001152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b2c      	ldr	r3, [pc, #176]	; (800120c <SystemClock_Config+0x104>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001164:	bf00      	nop
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <SystemClock_Config+0x104>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800116e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001172:	d1f8      	bne.n	8001166 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <SystemClock_Config+0x108>)
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	4a25      	ldr	r2, [pc, #148]	; (8001210 <SystemClock_Config+0x108>)
 800117a:	f023 0303 	bic.w	r3, r3, #3
 800117e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001180:	2302      	movs	r3, #2
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001184:	2301      	movs	r3, #1
 8001186:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001188:	2340      	movs	r3, #64	; 0x40
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118c:	2302      	movs	r3, #2
 800118e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001190:	2300      	movs	r3, #0
 8001192:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001194:	2304      	movs	r3, #4
 8001196:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001198:	230c      	movs	r3, #12
 800119a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800119c:	2304      	movs	r3, #4
 800119e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011a8:	230c      	movs	r3, #12
 80011aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	4618      	mov	r0, r3
 80011ba:	f007 faa7 	bl	800870c <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011c4:	f000 fd28 	bl	8001c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	233f      	movs	r3, #63	; 0x3f
 80011ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2303      	movs	r3, #3
 80011ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011dc:	2340      	movs	r3, #64	; 0x40
 80011de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2101      	movs	r1, #1
 80011ee:	4618      	mov	r0, r3
 80011f0:	f007 fee6 	bl	8008fc0 <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80011fa:	f000 fd0d 	bl	8001c18 <Error_Handler>
  }
}
 80011fe:	bf00      	nop
 8001200:	3770      	adds	r7, #112	; 0x70
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	58000400 	.word	0x58000400
 800120c:	58024800 	.word	0x58024800
 8001210:	58024400 	.word	0x58024400

08001214 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0b0      	sub	sp, #192	; 0xc0
 8001218:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121a:	463b      	mov	r3, r7
 800121c:	22c0      	movs	r2, #192	; 0xc0
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f00f fdcb 	bl	8010dbc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001226:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001232:	2304      	movs	r3, #4
 8001234:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001236:	2309      	movs	r3, #9
 8001238:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800123a:	2304      	movs	r3, #4
 800123c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800123e:	2302      	movs	r3, #2
 8001240:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001242:	2302      	movs	r3, #2
 8001244:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001246:	23c0      	movs	r3, #192	; 0xc0
 8001248:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800124a:	2320      	movs	r3, #32
 800124c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800124e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	4618      	mov	r0, r3
 800125e:	f008 fa3b 	bl	80096d8 <HAL_RCCEx_PeriphCLKConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001268:	f000 fcd6 	bl	8001c18 <Error_Handler>
  }
}
 800126c:	bf00      	nop
 800126e:	37c0      	adds	r7, #192	; 0xc0
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001286:	463b      	mov	r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
 8001294:	615a      	str	r2, [r3, #20]
 8001296:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001298:	4b7a      	ldr	r3, [pc, #488]	; (8001484 <MX_ADC1_Init+0x210>)
 800129a:	4a7b      	ldr	r2, [pc, #492]	; (8001488 <MX_ADC1_Init+0x214>)
 800129c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800129e:	4b79      	ldr	r3, [pc, #484]	; (8001484 <MX_ADC1_Init+0x210>)
 80012a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012a6:	4b77      	ldr	r3, [pc, #476]	; (8001484 <MX_ADC1_Init+0x210>)
 80012a8:	2208      	movs	r2, #8
 80012aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012ac:	4b75      	ldr	r3, [pc, #468]	; (8001484 <MX_ADC1_Init+0x210>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b2:	4b74      	ldr	r3, [pc, #464]	; (8001484 <MX_ADC1_Init+0x210>)
 80012b4:	2204      	movs	r2, #4
 80012b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012b8:	4b72      	ldr	r3, [pc, #456]	; (8001484 <MX_ADC1_Init+0x210>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012be:	4b71      	ldr	r3, [pc, #452]	; (8001484 <MX_ADC1_Init+0x210>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80012c4:	4b6f      	ldr	r3, [pc, #444]	; (8001484 <MX_ADC1_Init+0x210>)
 80012c6:	220b      	movs	r2, #11
 80012c8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ca:	4b6e      	ldr	r3, [pc, #440]	; (8001484 <MX_ADC1_Init+0x210>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d0:	4b6c      	ldr	r3, [pc, #432]	; (8001484 <MX_ADC1_Init+0x210>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d6:	4b6b      	ldr	r3, [pc, #428]	; (8001484 <MX_ADC1_Init+0x210>)
 80012d8:	2200      	movs	r2, #0
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012dc:	4b69      	ldr	r3, [pc, #420]	; (8001484 <MX_ADC1_Init+0x210>)
 80012de:	2203      	movs	r2, #3
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012e2:	4b68      	ldr	r3, [pc, #416]	; (8001484 <MX_ADC1_Init+0x210>)
 80012e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012e8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012ea:	4b66      	ldr	r3, [pc, #408]	; (8001484 <MX_ADC1_Init+0x210>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012f0:	4b64      	ldr	r3, [pc, #400]	; (8001484 <MX_ADC1_Init+0x210>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f8:	4862      	ldr	r0, [pc, #392]	; (8001484 <MX_ADC1_Init+0x210>)
 80012fa:	f001 fcdb 	bl	8002cb4 <HAL_ADC_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001304:	f000 fc88 	bl	8001c18 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	485c      	ldr	r0, [pc, #368]	; (8001484 <MX_ADC1_Init+0x210>)
 8001314:	f002 fdf6 	bl	8003f04 <HAL_ADCEx_MultiModeConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800131e:	f000 fc7b 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001322:	4b5a      	ldr	r3, [pc, #360]	; (800148c <MX_ADC1_Init+0x218>)
 8001324:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001326:	2306      	movs	r3, #6
 8001328:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800132a:	2307      	movs	r3, #7
 800132c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800132e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001332:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001334:	2304      	movs	r3, #4
 8001336:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	484f      	ldr	r0, [pc, #316]	; (8001484 <MX_ADC1_Init+0x210>)
 8001346:	f001 ff39 	bl	80031bc <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001350:	f000 fc62 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001354:	4b4e      	ldr	r3, [pc, #312]	; (8001490 <MX_ADC1_Init+0x21c>)
 8001356:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001358:	230c      	movs	r3, #12
 800135a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	4848      	ldr	r0, [pc, #288]	; (8001484 <MX_ADC1_Init+0x210>)
 8001362:	f001 ff2b 	bl	80031bc <HAL_ADC_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 800136c:	f000 fc54 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001370:	4b48      	ldr	r3, [pc, #288]	; (8001494 <MX_ADC1_Init+0x220>)
 8001372:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001374:	2312      	movs	r3, #18
 8001376:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4841      	ldr	r0, [pc, #260]	; (8001484 <MX_ADC1_Init+0x210>)
 800137e:	f001 ff1d 	bl	80031bc <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001388:	f000 fc46 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800138c:	4b42      	ldr	r3, [pc, #264]	; (8001498 <MX_ADC1_Init+0x224>)
 800138e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001390:	2318      	movs	r3, #24
 8001392:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	483a      	ldr	r0, [pc, #232]	; (8001484 <MX_ADC1_Init+0x210>)
 800139a:	f001 ff0f 	bl	80031bc <HAL_ADC_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80013a4:	f000 fc38 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013a8:	4b3c      	ldr	r3, [pc, #240]	; (800149c <MX_ADC1_Init+0x228>)
 80013aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b2:	463b      	mov	r3, r7
 80013b4:	4619      	mov	r1, r3
 80013b6:	4833      	ldr	r0, [pc, #204]	; (8001484 <MX_ADC1_Init+0x210>)
 80013b8:	f001 ff00 	bl	80031bc <HAL_ADC_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80013c2:	f000 fc29 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013c6:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <MX_ADC1_Init+0x22c>)
 80013c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013ca:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	4619      	mov	r1, r3
 80013d4:	482b      	ldr	r0, [pc, #172]	; (8001484 <MX_ADC1_Init+0x210>)
 80013d6:	f001 fef1 	bl	80031bc <HAL_ADC_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013e0:	f000 fc1a 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <MX_ADC1_Init+0x230>)
 80013e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013e8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	4619      	mov	r1, r3
 80013f2:	4824      	ldr	r0, [pc, #144]	; (8001484 <MX_ADC1_Init+0x210>)
 80013f4:	f001 fee2 	bl	80031bc <HAL_ADC_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80013fe:	f000 fc0b 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <MX_ADC1_Init+0x234>)
 8001404:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001406:	f44f 7389 	mov.w	r3, #274	; 0x112
 800140a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	481c      	ldr	r0, [pc, #112]	; (8001484 <MX_ADC1_Init+0x210>)
 8001412:	f001 fed3 	bl	80031bc <HAL_ADC_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800141c:	f000 fbfc 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_ADC1_Init+0x238>)
 8001422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001424:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001428:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	4619      	mov	r1, r3
 800142e:	4815      	ldr	r0, [pc, #84]	; (8001484 <MX_ADC1_Init+0x210>)
 8001430:	f001 fec4 	bl	80031bc <HAL_ADC_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800143a:	f000 fbed 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_ADC1_Init+0x23c>)
 8001440:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001446:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_ADC1_Init+0x210>)
 800144e:	f001 feb5 	bl	80031bc <HAL_ADC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001458:	f000 fbde 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_ADC1_Init+0x240>)
 800145e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001460:	f240 2306 	movw	r3, #518	; 0x206
 8001464:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <MX_ADC1_Init+0x210>)
 800146c:	f001 fea6 	bl	80031bc <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001476:	f000 fbcf 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2400011c 	.word	0x2400011c
 8001488:	40022000 	.word	0x40022000
 800148c:	0c900008 	.word	0x0c900008
 8001490:	10c00010 	.word	0x10c00010
 8001494:	14f00020 	.word	0x14f00020
 8001498:	1d500080 	.word	0x1d500080
 800149c:	21800100 	.word	0x21800100
 80014a0:	25b00200 	.word	0x25b00200
 80014a4:	2a000400 	.word	0x2a000400
 80014a8:	2e300800 	.word	0x2e300800
 80014ac:	3ac04000 	.word	0x3ac04000
 80014b0:	3ef08000 	.word	0x3ef08000
 80014b4:	47520000 	.word	0x47520000

080014b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	615a      	str	r2, [r3, #20]
 80014ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014d0:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <MX_ADC3_Init+0x110>)
 80014d2:	4a3e      	ldr	r2, [pc, #248]	; (80015cc <MX_ADC3_Init+0x114>)
 80014d4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014d6:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <MX_ADC3_Init+0x110>)
 80014d8:	2208      	movs	r2, #8
 80014da:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014dc:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <MX_ADC3_Init+0x110>)
 80014de:	2201      	movs	r2, #1
 80014e0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e2:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <MX_ADC3_Init+0x110>)
 80014e4:	2204      	movs	r2, #4
 80014e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014e8:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <MX_ADC3_Init+0x110>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014ee:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <MX_ADC3_Init+0x110>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014f4:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <MX_ADC3_Init+0x110>)
 80014f6:	2204      	movs	r2, #4
 80014f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014fa:	4b33      	ldr	r3, [pc, #204]	; (80015c8 <MX_ADC3_Init+0x110>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001500:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <MX_ADC3_Init+0x110>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001506:	4b30      	ldr	r3, [pc, #192]	; (80015c8 <MX_ADC3_Init+0x110>)
 8001508:	2200      	movs	r2, #0
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800150c:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <MX_ADC3_Init+0x110>)
 800150e:	2203      	movs	r2, #3
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001512:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <MX_ADC3_Init+0x110>)
 8001514:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001518:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <MX_ADC3_Init+0x110>)
 800151c:	2200      	movs	r2, #0
 800151e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001520:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <MX_ADC3_Init+0x110>)
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001528:	4827      	ldr	r0, [pc, #156]	; (80015c8 <MX_ADC3_Init+0x110>)
 800152a:	f001 fbc3 	bl	8002cb4 <HAL_ADC_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001534:	f000 fb70 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001538:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <MX_ADC3_Init+0x118>)
 800153a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800153c:	2306      	movs	r3, #6
 800153e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001540:	2307      	movs	r3, #7
 8001542:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001544:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001548:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800154a:	2304      	movs	r3, #4
 800154c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	481b      	ldr	r0, [pc, #108]	; (80015c8 <MX_ADC3_Init+0x110>)
 800155c:	f001 fe2e 	bl	80031bc <HAL_ADC_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001566:	f000 fb57 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_ADC3_Init+0x11c>)
 800156c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800156e:	230c      	movs	r3, #12
 8001570:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4814      	ldr	r0, [pc, #80]	; (80015c8 <MX_ADC3_Init+0x110>)
 8001578:	f001 fe20 	bl	80031bc <HAL_ADC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001582:	f000 fb49 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001586:	2301      	movs	r3, #1
 8001588:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800158a:	2312      	movs	r3, #18
 800158c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4619      	mov	r1, r3
 8001592:	480d      	ldr	r0, [pc, #52]	; (80015c8 <MX_ADC3_Init+0x110>)
 8001594:	f001 fe12 	bl	80031bc <HAL_ADC_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800159e:	f000 fb3b 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <MX_ADC3_Init+0x120>)
 80015a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015a6:	2318      	movs	r3, #24
 80015a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	4619      	mov	r1, r3
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <MX_ADC3_Init+0x110>)
 80015b0:	f001 fe04 	bl	80031bc <HAL_ADC_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80015ba:	f000 fb2d 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	3720      	adds	r7, #32
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	24000180 	.word	0x24000180
 80015cc:	58026000 	.word	0x58026000
 80015d0:	cb840000 	.word	0xcb840000
 80015d4:	cfb80000 	.word	0xcfb80000
 80015d8:	04300002 	.word	0x04300002

080015dc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2224      	movs	r2, #36	; 0x24
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00f fbe7 	bl	8010dbc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <MX_DAC1_Init+0x5c>)
 80015f0:	4a12      	ldr	r2, [pc, #72]	; (800163c <MX_DAC1_Init+0x60>)
 80015f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015f4:	4810      	ldr	r0, [pc, #64]	; (8001638 <MX_DAC1_Init+0x5c>)
 80015f6:	f002 fe72 	bl	80042de <HAL_DAC_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001600:	f000 fb0a 	bl	8001c18 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001608:	230a      	movs	r3, #10
 800160a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001610:	2301      	movs	r3, #1
 8001612:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <MX_DAC1_Init+0x5c>)
 8001620:	f003 f82c 	bl	800467c <HAL_DAC_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800162a:	f000 faf5 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	240002d4 	.word	0x240002d4
 800163c:	40007400 	.word	0x40007400

08001640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <MX_I2C1_Init+0x74>)
 8001646:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <MX_I2C1_Init+0x78>)
 8001648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <MX_I2C1_Init+0x74>)
 800164c:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <MX_I2C1_Init+0x7c>)
 800164e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <MX_I2C1_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <MX_I2C1_Init+0x74>)
 8001658:	2201      	movs	r2, #1
 800165a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <MX_I2C1_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <MX_I2C1_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <MX_I2C1_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_I2C1_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_I2C1_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800167a:	480e      	ldr	r0, [pc, #56]	; (80016b4 <MX_I2C1_Init+0x74>)
 800167c:	f006 f9e8 	bl	8007a50 <HAL_I2C_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001686:	f000 fac7 	bl	8001c18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800168a:	2100      	movs	r1, #0
 800168c:	4809      	ldr	r0, [pc, #36]	; (80016b4 <MX_I2C1_Init+0x74>)
 800168e:	f006 ff2f 	bl	80084f0 <HAL_I2CEx_ConfigAnalogFilter>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001698:	f000 fabe 	bl	8001c18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800169c:	2100      	movs	r1, #0
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_I2C1_Init+0x74>)
 80016a0:	f006 ff71 	bl	8008586 <HAL_I2CEx_ConfigDigitalFilter>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016aa:	f000 fab5 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	24000360 	.word	0x24000360
 80016b8:	40005400 	.word	0x40005400
 80016bc:	00506682 	.word	0x00506682

080016c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016c6:	4a29      	ldr	r2, [pc, #164]	; (800176c <MX_SPI1_Init+0xac>)
 80016c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016d2:	4b25      	ldr	r3, [pc, #148]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016dc:	220f      	movs	r2, #15
 80016de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016f6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_SPI1_Init+0xa8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001704:	2200      	movs	r2, #0
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <MX_SPI1_Init+0xa8>)
 800170a:	2200      	movs	r2, #0
 800170c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001710:	2200      	movs	r2, #0
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_SPI1_Init+0xa8>)
 800171e:	2200      	movs	r2, #0
 8001720:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001724:	2200      	movs	r2, #0
 8001726:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_SPI1_Init+0xa8>)
 800172a:	2200      	movs	r2, #0
 800172c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001730:	2200      	movs	r2, #0
 8001732:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001736:	2200      	movs	r2, #0
 8001738:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_SPI1_Init+0xa8>)
 800173c:	2200      	movs	r2, #0
 800173e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001742:	2200      	movs	r2, #0
 8001744:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001748:	2200      	movs	r2, #0
 800174a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_SPI1_Init+0xa8>)
 800174e:	2200      	movs	r2, #0
 8001750:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_SPI1_Init+0xa8>)
 8001754:	f00a fcbe 	bl	800c0d4 <HAL_SPI_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800175e:	f000 fa5b 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	240003b4 	.word	0x240003b4
 800176c:	40013000 	.word	0x40013000

08001770 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <MX_SPI2_Init+0xa8>)
 8001776:	4a29      	ldr	r2, [pc, #164]	; (800181c <MX_SPI2_Init+0xac>)
 8001778:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800177a:	4b27      	ldr	r3, [pc, #156]	; (8001818 <MX_SPI2_Init+0xa8>)
 800177c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001780:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001782:	4b25      	ldr	r3, [pc, #148]	; (8001818 <MX_SPI2_Init+0xa8>)
 8001784:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001788:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <MX_SPI2_Init+0xa8>)
 800178c:	220f      	movs	r2, #15
 800178e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001790:	4b21      	ldr	r3, [pc, #132]	; (8001818 <MX_SPI2_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <MX_SPI2_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <MX_SPI2_Init+0xa8>)
 800179e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017a2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017a6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_SPI2_Init+0xa8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_SPI2_Init+0xa8>)
 8001804:	f00a fc66 	bl	800c0d4 <HAL_SPI_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800180e:	f000 fa03 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2400043c 	.word	0x2400043c
 800181c:	40003800 	.word	0x40003800

08001820 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b096      	sub	sp, #88	; 0x58
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001826:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001832:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	615a      	str	r2, [r3, #20]
 8001844:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	222c      	movs	r2, #44	; 0x2c
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f00f fab5 	bl	8010dbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001852:	4b39      	ldr	r3, [pc, #228]	; (8001938 <MX_TIM1_Init+0x118>)
 8001854:	4a39      	ldr	r2, [pc, #228]	; (800193c <MX_TIM1_Init+0x11c>)
 8001856:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001858:	4b37      	ldr	r3, [pc, #220]	; (8001938 <MX_TIM1_Init+0x118>)
 800185a:	225f      	movs	r2, #95	; 0x5f
 800185c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <MX_TIM1_Init+0x118>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001864:	4b34      	ldr	r3, [pc, #208]	; (8001938 <MX_TIM1_Init+0x118>)
 8001866:	f24f 4223 	movw	r2, #62499	; 0xf423
 800186a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <MX_TIM1_Init+0x118>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001872:	4b31      	ldr	r3, [pc, #196]	; (8001938 <MX_TIM1_Init+0x118>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <MX_TIM1_Init+0x118>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800187e:	482e      	ldr	r0, [pc, #184]	; (8001938 <MX_TIM1_Init+0x118>)
 8001880:	f00b fba6 	bl	800cfd0 <HAL_TIM_PWM_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800188a:	f000 f9c5 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800189a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800189e:	4619      	mov	r1, r3
 80018a0:	4825      	ldr	r0, [pc, #148]	; (8001938 <MX_TIM1_Init+0x118>)
 80018a2:	f00c fc77 	bl	800e194 <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018ac:	f000 f9b4 	bl	8001c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b0:	2360      	movs	r3, #96	; 0x60
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80018b4:	f240 13df 	movw	r3, #479	; 0x1df
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ba:	2300      	movs	r3, #0
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018be:	2300      	movs	r3, #0
 80018c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018d2:	2200      	movs	r2, #0
 80018d4:	4619      	mov	r1, r3
 80018d6:	4818      	ldr	r0, [pc, #96]	; (8001938 <MX_TIM1_Init+0x118>)
 80018d8:	f00b fde8 	bl	800d4ac <HAL_TIM_PWM_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80018e2:	f000 f999 	bl	8001c18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001908:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	4619      	mov	r1, r3
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <MX_TIM1_Init+0x118>)
 800191c:	f00c fcc8 	bl	800e2b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001926:	f000 f977 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800192a:	4803      	ldr	r0, [pc, #12]	; (8001938 <MX_TIM1_Init+0x118>)
 800192c:	f000 fcae 	bl	800228c <HAL_TIM_MspPostInit>

}
 8001930:	bf00      	nop
 8001932:	3758      	adds	r7, #88	; 0x58
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	240004c4 	.word	0x240004c4
 800193c:	40010000 	.word	0x40010000

08001940 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08e      	sub	sp, #56	; 0x38
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001960:	463b      	mov	r3, r7
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]
 800196e:	615a      	str	r2, [r3, #20]
 8001970:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001972:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <MX_TIM2_Init+0xe8>)
 8001974:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001978:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800197a:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <MX_TIM2_Init+0xe8>)
 800197c:	222f      	movs	r2, #47	; 0x2f
 800197e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <MX_TIM2_Init+0xe8>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001986:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <MX_TIM2_Init+0xe8>)
 8001988:	f640 4234 	movw	r2, #3124	; 0xc34
 800198c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <MX_TIM2_Init+0xe8>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <MX_TIM2_Init+0xe8>)
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800199a:	4823      	ldr	r0, [pc, #140]	; (8001a28 <MX_TIM2_Init+0xe8>)
 800199c:	f00a ffeb 	bl	800c976 <HAL_TIM_Base_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019a6:	f000 f937 	bl	8001c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b4:	4619      	mov	r1, r3
 80019b6:	481c      	ldr	r0, [pc, #112]	; (8001a28 <MX_TIM2_Init+0xe8>)
 80019b8:	f00b fe8c 	bl	800d6d4 <HAL_TIM_ConfigClockSource>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019c2:	f000 f929 	bl	8001c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019c6:	4818      	ldr	r0, [pc, #96]	; (8001a28 <MX_TIM2_Init+0xe8>)
 80019c8:	f00b fb02 	bl	800cfd0 <HAL_TIM_PWM_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019d2:	f000 f921 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019d6:	2320      	movs	r3, #32
 80019d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	4810      	ldr	r0, [pc, #64]	; (8001a28 <MX_TIM2_Init+0xe8>)
 80019e6:	f00c fbd5 	bl	800e194 <HAL_TIMEx_MasterConfigSynchronization>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019f0:	f000 f912 	bl	8001c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f4:	2360      	movs	r3, #96	; 0x60
 80019f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a04:	463b      	mov	r3, r7
 8001a06:	220c      	movs	r2, #12
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4807      	ldr	r0, [pc, #28]	; (8001a28 <MX_TIM2_Init+0xe8>)
 8001a0c:	f00b fd4e 	bl	800d4ac <HAL_TIM_PWM_ConfigChannel>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a16:	f000 f8ff 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a1a:	4803      	ldr	r0, [pc, #12]	; (8001a28 <MX_TIM2_Init+0xe8>)
 8001a1c:	f000 fc36 	bl	800228c <HAL_TIM_MspPostInit>

}
 8001a20:	bf00      	nop
 8001a22:	3738      	adds	r7, #56	; 0x38
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	24000510 	.word	0x24000510

08001a2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a32:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <MX_USART1_UART_Init+0x94>)
 8001a34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a38:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a52:	220c      	movs	r2, #12
 8001a54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a76:	f00c fcb7 	bl	800e3e8 <HAL_UART_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a80:	f000 f8ca 	bl	8001c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a84:	2100      	movs	r1, #0
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a88:	f00f f811 	bl	8010aae <HAL_UARTEx_SetTxFifoThreshold>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a92:	f000 f8c1 	bl	8001c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a96:	2100      	movs	r1, #0
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a9a:	f00f f846 	bl	8010b2a <HAL_UARTEx_SetRxFifoThreshold>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001aa4:	f000 f8b8 	bl	8001c18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001aaa:	f00e ffc7 	bl	8010a3c <HAL_UARTEx_DisableFifoMode>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ab4:	f000 f8b0 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	2400055c 	.word	0x2400055c
 8001ac0:	40011000 	.word	0x40011000

08001ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <MX_DMA_Init+0x5c>)
 8001acc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ad0:	4a13      	ldr	r2, [pc, #76]	; (8001b20 <MX_DMA_Init+0x5c>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_DMA_Init+0x5c>)
 8001adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	200b      	movs	r0, #11
 8001aee:	f002 fbc2 	bl	8004276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001af2:	200b      	movs	r0, #11
 8001af4:	f002 fbd9 	bl	80042aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	200c      	movs	r0, #12
 8001afe:	f002 fbba 	bl	8004276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b02:	200c      	movs	r0, #12
 8001b04:	f002 fbd1 	bl	80042aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2010      	movs	r0, #16
 8001b0e:	f002 fbb2 	bl	8004276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b12:	2010      	movs	r0, #16
 8001b14:	f002 fbc9 	bl	80042aa <HAL_NVIC_EnableIRQ>

}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	58024400 	.word	0x58024400

08001b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3a:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <MX_GPIO_Init+0xe8>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b40:	4a32      	ldr	r2, [pc, #200]	; (8001c0c <MX_GPIO_Init+0xe8>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4a:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <MX_GPIO_Init+0xe8>)
 8001b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b58:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <MX_GPIO_Init+0xe8>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5e:	4a2b      	ldr	r2, [pc, #172]	; (8001c0c <MX_GPIO_Init+0xe8>)
 8001b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b68:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <MX_GPIO_Init+0xe8>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <MX_GPIO_Init+0xe8>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <MX_GPIO_Init+0xe8>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b86:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <MX_GPIO_Init+0xe8>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <MX_GPIO_Init+0xe8>)
 8001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <MX_GPIO_Init+0xe8>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <MX_GPIO_Init+0xe8>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001bb8:	4815      	ldr	r0, [pc, #84]	; (8001c10 <MX_GPIO_Init+0xec>)
 8001bba:	f005 ff2f 	bl	8007a1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2164      	movs	r1, #100	; 0x64
 8001bc2:	4814      	ldr	r0, [pc, #80]	; (8001c14 <MX_GPIO_Init+0xf0>)
 8001bc4:	f005 ff2a 	bl	8007a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001bc8:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001bcc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	480b      	ldr	r0, [pc, #44]	; (8001c10 <MX_GPIO_Init+0xec>)
 8001be2:	f005 fd53 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001be6:	2364      	movs	r3, #100	; 0x64
 8001be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bea:	2301      	movs	r3, #1
 8001bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_GPIO_Init+0xf0>)
 8001bfe:	f005 fd45 	bl	800768c <HAL_GPIO_Init>

}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	; 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	58024400 	.word	0x58024400
 8001c10:	58020800 	.word	0x58020800
 8001c14:	58020400 	.word	0x58020400

08001c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c1c:	b672      	cpsid	i
}
 8001c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <Error_Handler+0x8>
	...

08001c24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_MspInit+0x30>)
 8001c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c30:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_MspInit+0x30>)
 8001c32:	f043 0302 	orr.w	r3, r3, #2
 8001c36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_MspInit+0x30>)
 8001c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	58024400 	.word	0x58024400

08001c58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08e      	sub	sp, #56	; 0x38
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a7b      	ldr	r2, [pc, #492]	; (8001e64 <HAL_ADC_MspInit+0x20c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	f040 8091 	bne.w	8001d9e <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c7c:	4b7a      	ldr	r3, [pc, #488]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001c7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c82:	4a79      	ldr	r2, [pc, #484]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001c84:	f043 0320 	orr.w	r3, r3, #32
 8001c88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c8c:	4b76      	ldr	r3, [pc, #472]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001c8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	623b      	str	r3, [r7, #32]
 8001c98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9a:	4b73      	ldr	r3, [pc, #460]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca0:	4a71      	ldr	r2, [pc, #452]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001caa:	4b6f      	ldr	r3, [pc, #444]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	4b6b      	ldr	r3, [pc, #428]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cbe:	4a6a      	ldr	r2, [pc, #424]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc8:	4b67      	ldr	r3, [pc, #412]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	4b64      	ldr	r3, [pc, #400]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cdc:	4a62      	ldr	r2, [pc, #392]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce6:	4b60      	ldr	r3, [pc, #384]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001cf4:	2333      	movs	r3, #51	; 0x33
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d04:	4619      	mov	r1, r3
 8001d06:	4859      	ldr	r0, [pc, #356]	; (8001e6c <HAL_ADC_MspInit+0x214>)
 8001d08:	f005 fcc0 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001d0c:	23ce      	movs	r3, #206	; 0xce
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d10:	2303      	movs	r3, #3
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4854      	ldr	r0, [pc, #336]	; (8001e70 <HAL_ADC_MspInit+0x218>)
 8001d20:	f005 fcb4 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d24:	2303      	movs	r3, #3
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d34:	4619      	mov	r1, r3
 8001d36:	484f      	ldr	r0, [pc, #316]	; (8001e74 <HAL_ADC_MspInit+0x21c>)
 8001d38:	f005 fca8 	bl	800768c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001d3c:	4b4e      	ldr	r3, [pc, #312]	; (8001e78 <HAL_ADC_MspInit+0x220>)
 8001d3e:	4a4f      	ldr	r2, [pc, #316]	; (8001e7c <HAL_ADC_MspInit+0x224>)
 8001d40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d42:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <HAL_ADC_MspInit+0x220>)
 8001d44:	2209      	movs	r2, #9
 8001d46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d48:	4b4b      	ldr	r3, [pc, #300]	; (8001e78 <HAL_ADC_MspInit+0x220>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d4e:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <HAL_ADC_MspInit+0x220>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d54:	4b48      	ldr	r3, [pc, #288]	; (8001e78 <HAL_ADC_MspInit+0x220>)
 8001d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d5a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d5c:	4b46      	ldr	r3, [pc, #280]	; (8001e78 <HAL_ADC_MspInit+0x220>)
 8001d5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d62:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d64:	4b44      	ldr	r3, [pc, #272]	; (8001e78 <HAL_ADC_MspInit+0x220>)
 8001d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d6a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d6c:	4b42      	ldr	r3, [pc, #264]	; (8001e78 <HAL_ADC_MspInit+0x220>)
 8001d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d72:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d74:	4b40      	ldr	r3, [pc, #256]	; (8001e78 <HAL_ADC_MspInit+0x220>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d7a:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <HAL_ADC_MspInit+0x220>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d80:	483d      	ldr	r0, [pc, #244]	; (8001e78 <HAL_ADC_MspInit+0x220>)
 8001d82:	f002 fe47 	bl	8004a14 <HAL_DMA_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001d8c:	f7ff ff44 	bl	8001c18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a39      	ldr	r2, [pc, #228]	; (8001e78 <HAL_ADC_MspInit+0x220>)
 8001d94:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d96:	4a38      	ldr	r2, [pc, #224]	; (8001e78 <HAL_ADC_MspInit+0x220>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d9c:	e05e      	b.n	8001e5c <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a37      	ldr	r2, [pc, #220]	; (8001e80 <HAL_ADC_MspInit+0x228>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d159      	bne.n	8001e5c <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001da8:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dae:	4a2e      	ldr	r2, [pc, #184]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db8:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dcc:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_ADC_MspInit+0x210>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001de4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001de8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001dec:	f000 fd3e 	bl	800286c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001df0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001df4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001df8:	f000 fd38 	bl	800286c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_ADC_MspInit+0x22c>)
 8001dfe:	4a22      	ldr	r2, [pc, #136]	; (8001e88 <HAL_ADC_MspInit+0x230>)
 8001e00:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <HAL_ADC_MspInit+0x22c>)
 8001e04:	2273      	movs	r2, #115	; 0x73
 8001e06:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_ADC_MspInit+0x22c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_ADC_MspInit+0x22c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_ADC_MspInit+0x22c>)
 8001e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e1a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_ADC_MspInit+0x22c>)
 8001e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e22:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_ADC_MspInit+0x22c>)
 8001e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e2a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_ADC_MspInit+0x22c>)
 8001e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e32:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_ADC_MspInit+0x22c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_ADC_MspInit+0x22c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001e40:	4810      	ldr	r0, [pc, #64]	; (8001e84 <HAL_ADC_MspInit+0x22c>)
 8001e42:	f002 fde7 	bl	8004a14 <HAL_DMA_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001e4c:	f7ff fee4 	bl	8001c18 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <HAL_ADC_MspInit+0x22c>)
 8001e54:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e56:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <HAL_ADC_MspInit+0x22c>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e5c:	bf00      	nop
 8001e5e:	3738      	adds	r7, #56	; 0x38
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40022000 	.word	0x40022000
 8001e68:	58024400 	.word	0x58024400
 8001e6c:	58020800 	.word	0x58020800
 8001e70:	58020000 	.word	0x58020000
 8001e74:	58020400 	.word	0x58020400
 8001e78:	240001e4 	.word	0x240001e4
 8001e7c:	40020010 	.word	0x40020010
 8001e80:	58026000 	.word	0x58026000
 8001e84:	2400025c 	.word	0x2400025c
 8001e88:	40020028 	.word	0x40020028

08001e8c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a30      	ldr	r2, [pc, #192]	; (8001f6c <HAL_DAC_MspInit+0xe0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d159      	bne.n	8001f62 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001eae:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <HAL_DAC_MspInit+0xe4>)
 8001eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eb4:	4a2e      	ldr	r2, [pc, #184]	; (8001f70 <HAL_DAC_MspInit+0xe4>)
 8001eb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001eba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ebe:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <HAL_DAC_MspInit+0xe4>)
 8001ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <HAL_DAC_MspInit+0xe4>)
 8001ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed2:	4a27      	ldr	r2, [pc, #156]	; (8001f70 <HAL_DAC_MspInit+0xe4>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <HAL_DAC_MspInit+0xe4>)
 8001ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eea:	2310      	movs	r3, #16
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	4619      	mov	r1, r3
 8001efc:	481d      	ldr	r0, [pc, #116]	; (8001f74 <HAL_DAC_MspInit+0xe8>)
 8001efe:	f005 fbc5 	bl	800768c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001f04:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_DAC_MspInit+0xf0>)
 8001f06:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001f0a:	2243      	movs	r2, #67	; 0x43
 8001f0c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001f10:	2240      	movs	r2, #64	; 0x40
 8001f12:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f14:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f20:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001f24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f28:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001f2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f30:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001f34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f38:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001f46:	480c      	ldr	r0, [pc, #48]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001f48:	f002 fd64 	bl	8004a14 <HAL_DMA_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001f52:	f7ff fe61 	bl	8001c18 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	4a06      	ldr	r2, [pc, #24]	; (8001f78 <HAL_DAC_MspInit+0xec>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40007400 	.word	0x40007400
 8001f70:	58024400 	.word	0x58024400
 8001f74:	58020000 	.word	0x58020000
 8001f78:	240002e8 	.word	0x240002e8
 8001f7c:	40020088 	.word	0x40020088

08001f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b0ba      	sub	sp, #232	; 0xe8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	22c0      	movs	r2, #192	; 0xc0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f00e ff0b 	bl	8010dbc <memset>
  if(hi2c->Instance==I2C1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a27      	ldr	r2, [pc, #156]	; (8002048 <HAL_I2C_MspInit+0xc8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d146      	bne.n	800203e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fb0:	f04f 0208 	mov.w	r2, #8
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc2:	f107 0310 	add.w	r3, r7, #16
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f007 fb86 	bl	80096d8 <HAL_RCCEx_PeriphCLKConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001fd2:	f7ff fe21 	bl	8001c18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_I2C_MspInit+0xcc>)
 8001fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	; (800204c <HAL_I2C_MspInit+0xcc>)
 8001fde:	f043 0302 	orr.w	r3, r3, #2
 8001fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_I2C_MspInit+0xcc>)
 8001fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ff4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ff8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ffc:	2312      	movs	r3, #18
 8001ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800200e:	2304      	movs	r3, #4
 8002010:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002018:	4619      	mov	r1, r3
 800201a:	480d      	ldr	r0, [pc, #52]	; (8002050 <HAL_I2C_MspInit+0xd0>)
 800201c:	f005 fb36 	bl	800768c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_I2C_MspInit+0xcc>)
 8002022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002026:	4a09      	ldr	r2, [pc, #36]	; (800204c <HAL_I2C_MspInit+0xcc>)
 8002028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800202c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_I2C_MspInit+0xcc>)
 8002032:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	37e8      	adds	r7, #232	; 0xe8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40005400 	.word	0x40005400
 800204c:	58024400 	.word	0x58024400
 8002050:	58020400 	.word	0x58020400

08002054 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0bc      	sub	sp, #240	; 0xf0
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800206c:	f107 0318 	add.w	r3, r7, #24
 8002070:	22c0      	movs	r2, #192	; 0xc0
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f00e fea1 	bl	8010dbc <memset>
  if(hspi->Instance==SPI1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a4c      	ldr	r2, [pc, #304]	; (80021b0 <HAL_SPI_MspInit+0x15c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d145      	bne.n	8002110 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002084:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002090:	2300      	movs	r3, #0
 8002092:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002094:	f107 0318 	add.w	r3, r7, #24
 8002098:	4618      	mov	r0, r3
 800209a:	f007 fb1d 	bl	80096d8 <HAL_RCCEx_PeriphCLKConfig>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80020a4:	f7ff fdb8 	bl	8001c18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020a8:	4b42      	ldr	r3, [pc, #264]	; (80021b4 <HAL_SPI_MspInit+0x160>)
 80020aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020ae:	4a41      	ldr	r2, [pc, #260]	; (80021b4 <HAL_SPI_MspInit+0x160>)
 80020b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020b8:	4b3e      	ldr	r3, [pc, #248]	; (80021b4 <HAL_SPI_MspInit+0x160>)
 80020ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HAL_SPI_MspInit+0x160>)
 80020c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020cc:	4a39      	ldr	r2, [pc, #228]	; (80021b4 <HAL_SPI_MspInit+0x160>)
 80020ce:	f043 0302 	orr.w	r3, r3, #2
 80020d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d6:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <HAL_SPI_MspInit+0x160>)
 80020d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80020e4:	2318      	movs	r3, #24
 80020e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020fc:	2305      	movs	r3, #5
 80020fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002102:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002106:	4619      	mov	r1, r3
 8002108:	482b      	ldr	r0, [pc, #172]	; (80021b8 <HAL_SPI_MspInit+0x164>)
 800210a:	f005 fabf 	bl	800768c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800210e:	e04a      	b.n	80021a6 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a29      	ldr	r2, [pc, #164]	; (80021bc <HAL_SPI_MspInit+0x168>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d145      	bne.n	80021a6 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800211a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002126:	2300      	movs	r3, #0
 8002128:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212a:	f107 0318 	add.w	r3, r7, #24
 800212e:	4618      	mov	r0, r3
 8002130:	f007 fad2 	bl	80096d8 <HAL_RCCEx_PeriphCLKConfig>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800213a:	f7ff fd6d 	bl	8001c18 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_SPI_MspInit+0x160>)
 8002140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002144:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_SPI_MspInit+0x160>)
 8002146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800214a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_SPI_MspInit+0x160>)
 8002150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_SPI_MspInit+0x160>)
 800215e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002162:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <HAL_SPI_MspInit+0x160>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_SPI_MspInit+0x160>)
 800216e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800217a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800217e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002194:	2305      	movs	r3, #5
 8002196:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800219e:	4619      	mov	r1, r3
 80021a0:	4805      	ldr	r0, [pc, #20]	; (80021b8 <HAL_SPI_MspInit+0x164>)
 80021a2:	f005 fa73 	bl	800768c <HAL_GPIO_Init>
}
 80021a6:	bf00      	nop
 80021a8:	37f0      	adds	r7, #240	; 0xf0
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40013000 	.word	0x40013000
 80021b4:	58024400 	.word	0x58024400
 80021b8:	58020400 	.word	0x58020400
 80021bc:	40003800 	.word	0x40003800

080021c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1a      	ldr	r2, [pc, #104]	; (8002238 <HAL_TIM_PWM_MspInit+0x78>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d12e      	bne.n	8002230 <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <HAL_TIM_PWM_MspInit+0x7c>)
 80021d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021d8:	4a18      	ldr	r2, [pc, #96]	; (800223c <HAL_TIM_PWM_MspInit+0x7c>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <HAL_TIM_PWM_MspInit+0x7c>)
 80021e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	2018      	movs	r0, #24
 80021f6:	f002 f83e 	bl	8004276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80021fa:	2018      	movs	r0, #24
 80021fc:	f002 f855 	bl	80042aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002200:	2200      	movs	r2, #0
 8002202:	2100      	movs	r1, #0
 8002204:	2019      	movs	r0, #25
 8002206:	f002 f836 	bl	8004276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800220a:	2019      	movs	r0, #25
 800220c:	f002 f84d 	bl	80042aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002210:	2200      	movs	r2, #0
 8002212:	2100      	movs	r1, #0
 8002214:	201a      	movs	r0, #26
 8002216:	f002 f82e 	bl	8004276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800221a:	201a      	movs	r0, #26
 800221c:	f002 f845 	bl	80042aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002220:	2200      	movs	r2, #0
 8002222:	2100      	movs	r1, #0
 8002224:	201b      	movs	r0, #27
 8002226:	f002 f826 	bl	8004276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800222a:	201b      	movs	r0, #27
 800222c:	f002 f83d 	bl	80042aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40010000 	.word	0x40010000
 800223c:	58024400 	.word	0x58024400

08002240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002250:	d116      	bne.n	8002280 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HAL_TIM_Base_MspInit+0x48>)
 8002254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <HAL_TIM_Base_MspInit+0x48>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_TIM_Base_MspInit+0x48>)
 8002264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2101      	movs	r1, #1
 8002274:	201c      	movs	r0, #28
 8002276:	f001 fffe 	bl	8004276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800227a:	201c      	movs	r0, #28
 800227c:	f002 f815 	bl	80042aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	58024400 	.word	0x58024400

0800228c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a26      	ldr	r2, [pc, #152]	; (8002344 <HAL_TIM_MspPostInit+0xb8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d120      	bne.n	80022f0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	4b26      	ldr	r3, [pc, #152]	; (8002348 <HAL_TIM_MspPostInit+0xbc>)
 80022b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b4:	4a24      	ldr	r2, [pc, #144]	; (8002348 <HAL_TIM_MspPostInit+0xbc>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <HAL_TIM_MspPostInit+0xbc>)
 80022c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022de:	2301      	movs	r3, #1
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4818      	ldr	r0, [pc, #96]	; (800234c <HAL_TIM_MspPostInit+0xc0>)
 80022ea:	f005 f9cf 	bl	800768c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022ee:	e024      	b.n	800233a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f8:	d11f      	bne.n	800233a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <HAL_TIM_MspPostInit+0xbc>)
 80022fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002300:	4a11      	ldr	r2, [pc, #68]	; (8002348 <HAL_TIM_MspPostInit+0xbc>)
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800230a:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <HAL_TIM_MspPostInit+0xbc>)
 800230c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002318:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800231c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800232a:	2301      	movs	r3, #1
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232e:	f107 0314 	add.w	r3, r7, #20
 8002332:	4619      	mov	r1, r3
 8002334:	4806      	ldr	r0, [pc, #24]	; (8002350 <HAL_TIM_MspPostInit+0xc4>)
 8002336:	f005 f9a9 	bl	800768c <HAL_GPIO_Init>
}
 800233a:	bf00      	nop
 800233c:	3728      	adds	r7, #40	; 0x28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40010000 	.word	0x40010000
 8002348:	58024400 	.word	0x58024400
 800234c:	58020000 	.word	0x58020000
 8002350:	58020400 	.word	0x58020400

08002354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b0ba      	sub	sp, #232	; 0xe8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	22c0      	movs	r2, #192	; 0xc0
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f00e fd21 	bl	8010dbc <memset>
  if(huart->Instance==USART1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a2b      	ldr	r2, [pc, #172]	; (800242c <HAL_UART_MspInit+0xd8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d14e      	bne.n	8002422 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002384:	f04f 0201 	mov.w	r2, #1
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002390:	2300      	movs	r3, #0
 8002392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002396:	f107 0310 	add.w	r3, r7, #16
 800239a:	4618      	mov	r0, r3
 800239c:	f007 f99c 	bl	80096d8 <HAL_RCCEx_PeriphCLKConfig>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023a6:	f7ff fc37 	bl	8001c18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023aa:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_UART_MspInit+0xdc>)
 80023ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023b0:	4a1f      	ldr	r2, [pc, #124]	; (8002430 <HAL_UART_MspInit+0xdc>)
 80023b2:	f043 0310 	orr.w	r3, r3, #16
 80023b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_UART_MspInit+0xdc>)
 80023bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_UART_MspInit+0xdc>)
 80023ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ce:	4a18      	ldr	r2, [pc, #96]	; (8002430 <HAL_UART_MspInit+0xdc>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_UART_MspInit+0xdc>)
 80023da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002400:	2307      	movs	r3, #7
 8002402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800240a:	4619      	mov	r1, r3
 800240c:	4809      	ldr	r0, [pc, #36]	; (8002434 <HAL_UART_MspInit+0xe0>)
 800240e:	f005 f93d 	bl	800768c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	2025      	movs	r0, #37	; 0x25
 8002418:	f001 ff2d 	bl	8004276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800241c:	2025      	movs	r0, #37	; 0x25
 800241e:	f001 ff44 	bl	80042aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002422:	bf00      	nop
 8002424:	37e8      	adds	r7, #232	; 0xe8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40011000 	.word	0x40011000
 8002430:	58024400 	.word	0x58024400
 8002434:	58020000 	.word	0x58020000

08002438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800243c:	e7fe      	b.n	800243c <NMI_Handler+0x4>

0800243e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002442:	e7fe      	b.n	8002442 <HardFault_Handler+0x4>

08002444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <MemManage_Handler+0x4>

0800244a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <BusFault_Handler+0x4>

08002450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <UsageFault_Handler+0x4>

08002456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002484:	f000 f9b6 	bl	80027f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}

0800248c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <DMA1_Stream0_IRQHandler+0x10>)
 8002492:	f003 fde9 	bl	8006068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	240001e4 	.word	0x240001e4

080024a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <DMA1_Stream1_IRQHandler+0x10>)
 80024a6:	f003 fddf 	bl	8006068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2400025c 	.word	0x2400025c

080024b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <DMA1_Stream5_IRQHandler+0x10>)
 80024ba:	f003 fdd5 	bl	8006068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	240002e8 	.word	0x240002e8

080024c8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <TIM1_BRK_IRQHandler+0x10>)
 80024ce:	f00a fee5 	bl	800d29c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	240004c4 	.word	0x240004c4

080024dc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <TIM1_UP_IRQHandler+0x10>)
 80024e2:	f00a fedb 	bl	800d29c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	240004c4 	.word	0x240004c4

080024f0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <TIM1_TRG_COM_IRQHandler+0x10>)
 80024f6:	f00a fed1 	bl	800d29c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	240004c4 	.word	0x240004c4

08002504 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <TIM1_CC_IRQHandler+0x10>)
 800250a:	f00a fec7 	bl	800d29c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	240004c4 	.word	0x240004c4

08002518 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <TIM2_IRQHandler+0x10>)
 800251e:	f00a febd 	bl	800d29c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	24000510 	.word	0x24000510

0800252c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002530:	4802      	ldr	r0, [pc, #8]	; (800253c <USART1_IRQHandler+0x10>)
 8002532:	f00c f883 	bl	800e63c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2400055c 	.word	0x2400055c

08002540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <_sbrk+0x5c>)
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <_sbrk+0x60>)
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <_sbrk+0x64>)
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <_sbrk+0x68>)
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d207      	bcs.n	8002580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002570:	f00e fc3c 	bl	8010dec <__errno>
 8002574:	4603      	mov	r3, r0
 8002576:	220c      	movs	r2, #12
 8002578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800257e:	e009      	b.n	8002594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <_sbrk+0x64>)
 8002590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	24080000 	.word	0x24080000
 80025a0:	00000400 	.word	0x00000400
 80025a4:	24000698 	.word	0x24000698
 80025a8:	240007e8 	.word	0x240007e8

080025ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025b0:	4b37      	ldr	r3, [pc, #220]	; (8002690 <SystemInit+0xe4>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	4a36      	ldr	r2, [pc, #216]	; (8002690 <SystemInit+0xe4>)
 80025b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025c0:	4b34      	ldr	r3, [pc, #208]	; (8002694 <SystemInit+0xe8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	2b06      	cmp	r3, #6
 80025ca:	d807      	bhi.n	80025dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025cc:	4b31      	ldr	r3, [pc, #196]	; (8002694 <SystemInit+0xe8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 030f 	bic.w	r3, r3, #15
 80025d4:	4a2f      	ldr	r2, [pc, #188]	; (8002694 <SystemInit+0xe8>)
 80025d6:	f043 0307 	orr.w	r3, r3, #7
 80025da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025dc:	4b2e      	ldr	r3, [pc, #184]	; (8002698 <SystemInit+0xec>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a2d      	ldr	r2, [pc, #180]	; (8002698 <SystemInit+0xec>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025e8:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <SystemInit+0xec>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025ee:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <SystemInit+0xec>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	4929      	ldr	r1, [pc, #164]	; (8002698 <SystemInit+0xec>)
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <SystemInit+0xf0>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <SystemInit+0xe8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <SystemInit+0xe8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 030f 	bic.w	r3, r3, #15
 800260e:	4a21      	ldr	r2, [pc, #132]	; (8002694 <SystemInit+0xe8>)
 8002610:	f043 0307 	orr.w	r3, r3, #7
 8002614:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <SystemInit+0xec>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <SystemInit+0xec>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002622:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <SystemInit+0xec>)
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <SystemInit+0xec>)
 800262a:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <SystemInit+0xf4>)
 800262c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800262e:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <SystemInit+0xec>)
 8002630:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <SystemInit+0xf8>)
 8002632:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <SystemInit+0xec>)
 8002636:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <SystemInit+0xfc>)
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800263a:	4b17      	ldr	r3, [pc, #92]	; (8002698 <SystemInit+0xec>)
 800263c:	2200      	movs	r2, #0
 800263e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002640:	4b15      	ldr	r3, [pc, #84]	; (8002698 <SystemInit+0xec>)
 8002642:	4a19      	ldr	r2, [pc, #100]	; (80026a8 <SystemInit+0xfc>)
 8002644:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <SystemInit+0xec>)
 8002648:	2200      	movs	r2, #0
 800264a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <SystemInit+0xec>)
 800264e:	4a16      	ldr	r2, [pc, #88]	; (80026a8 <SystemInit+0xfc>)
 8002650:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <SystemInit+0xec>)
 8002654:	2200      	movs	r2, #0
 8002656:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <SystemInit+0xec>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <SystemInit+0xec>)
 800265e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002662:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <SystemInit+0xec>)
 8002666:	2200      	movs	r2, #0
 8002668:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <SystemInit+0x100>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <SystemInit+0x104>)
 8002670:	4013      	ands	r3, r2
 8002672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002676:	d202      	bcs.n	800267e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <SystemInit+0x108>)
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <SystemInit+0x10c>)
 8002680:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002684:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00
 8002694:	52002000 	.word	0x52002000
 8002698:	58024400 	.word	0x58024400
 800269c:	eaf6ed7f 	.word	0xeaf6ed7f
 80026a0:	02020200 	.word	0x02020200
 80026a4:	01ff0000 	.word	0x01ff0000
 80026a8:	01010280 	.word	0x01010280
 80026ac:	5c001000 	.word	0x5c001000
 80026b0:	ffff0000 	.word	0xffff0000
 80026b4:	51008108 	.word	0x51008108
 80026b8:	52004000 	.word	0x52004000

080026bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026c0:	f7ff ff74 	bl	80025ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c4:	480c      	ldr	r0, [pc, #48]	; (80026f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026c6:	490d      	ldr	r1, [pc, #52]	; (80026fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026c8:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026cc:	e002      	b.n	80026d4 <LoopCopyDataInit>

080026ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d2:	3304      	adds	r3, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d8:	d3f9      	bcc.n	80026ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026dc:	4c0a      	ldr	r4, [pc, #40]	; (8002708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e0:	e001      	b.n	80026e6 <LoopFillZerobss>

080026e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e4:	3204      	adds	r2, #4

080026e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e8:	d3fb      	bcc.n	80026e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ea:	f00e fb85 	bl	8010df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ee:	f7fe fc91 	bl	8001014 <main>
  bx  lr
 80026f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026fc:	240000e8 	.word	0x240000e8
  ldr r2, =_sidata
 8002700:	08010f78 	.word	0x08010f78
  ldr r2, =_sbss
 8002704:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8002708:	240007e8 	.word	0x240007e8

0800270c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800270c:	e7fe      	b.n	800270c <ADC3_IRQHandler>
	...

08002710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002716:	2003      	movs	r0, #3
 8002718:	f001 fda2 	bl	8004260 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800271c:	f006 fe06 	bl	800932c <HAL_RCC_GetSysClockFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <HAL_Init+0x68>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	4913      	ldr	r1, [pc, #76]	; (800277c <HAL_Init+0x6c>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
 8002738:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <HAL_Init+0x68>)
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	4a0e      	ldr	r2, [pc, #56]	; (800277c <HAL_Init+0x6c>)
 8002744:	5cd3      	ldrb	r3, [r2, r3]
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
 8002750:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <HAL_Init+0x70>)
 8002752:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002754:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <HAL_Init+0x74>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800275a:	200f      	movs	r0, #15
 800275c:	f000 f814 	bl	8002788 <HAL_InitTick>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e002      	b.n	8002770 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800276a:	f7ff fa5b 	bl	8001c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	58024400 	.word	0x58024400
 800277c:	08010f28 	.word	0x08010f28
 8002780:	2400008c 	.word	0x2400008c
 8002784:	24000088 	.word	0x24000088

08002788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_InitTick+0x60>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e021      	b.n	80027e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_InitTick+0x64>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_InitTick+0x60>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	4619      	mov	r1, r3
 80027a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 fd87 	bl	80042c6 <HAL_SYSTICK_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e00e      	b.n	80027e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b0f      	cmp	r3, #15
 80027c6:	d80a      	bhi.n	80027de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c8:	2200      	movs	r2, #0
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d0:	f001 fd51 	bl	8004276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d4:	4a06      	ldr	r2, [pc, #24]	; (80027f0 <HAL_InitTick+0x68>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	24000094 	.word	0x24000094
 80027ec:	24000088 	.word	0x24000088
 80027f0:	24000090 	.word	0x24000090

080027f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_IncTick+0x20>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_IncTick+0x24>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4413      	add	r3, r2
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <HAL_IncTick+0x24>)
 8002806:	6013      	str	r3, [r2, #0]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	24000094 	.word	0x24000094
 8002818:	2400069c 	.word	0x2400069c

0800281c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return uwTick;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_GetTick+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	2400069c 	.word	0x2400069c

08002834 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_SuspendTick+0x1c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_SuspendTick+0x1c>)
 800283e:	f023 0302 	bic.w	r3, r3, #2
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000e010 	.word	0xe000e010

08002854 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_GetREVID+0x14>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0c1b      	lsrs	r3, r3, #16
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	5c001000 	.word	0x5c001000

0800286c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	43db      	mvns	r3, r3
 800287e:	401a      	ands	r2, r3
 8002880:	4904      	ldr	r1, [pc, #16]	; (8002894 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	58000400 	.word	0x58000400

08002898 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	609a      	str	r2, [r3, #8]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	609a      	str	r2, [r3, #8]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3360      	adds	r3, #96	; 0x60
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	430b      	orrs	r3, r1
 800292e:	431a      	orrs	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002934:	bf00      	nop
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	fa01 f303 	lsl.w	r3, r1, r3
 8002960:	431a      	orrs	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	611a      	str	r2, [r3, #16]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002972:	b480      	push	{r7}
 8002974:	b087      	sub	sp, #28
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3360      	adds	r3, #96	; 0x60
 8002982:	461a      	mov	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	431a      	orrs	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	601a      	str	r2, [r3, #0]
  }
}
 800299c:	bf00      	nop
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b087      	sub	sp, #28
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3330      	adds	r3, #48	; 0x30
 80029de:	461a      	mov	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	0a1b      	lsrs	r3, r3, #8
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	4413      	add	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	211f      	movs	r1, #31
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	401a      	ands	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	0e9b      	lsrs	r3, r3, #26
 8002a06:	f003 011f 	and.w	r1, r3, #31
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	431a      	orrs	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a1a:	bf00      	nop
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f023 0203 	bic.w	r2, r3, #3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3314      	adds	r3, #20
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	0e5b      	lsrs	r3, r3, #25
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	4413      	add	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	0d1b      	lsrs	r3, r3, #20
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2107      	movs	r1, #7
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	401a      	ands	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	0d1b      	lsrs	r3, r3, #20
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	431a      	orrs	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002abc:	43db      	mvns	r3, r3
 8002abe:	401a      	ands	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0318 	and.w	r3, r3, #24
 8002ac6:	4908      	ldr	r1, [pc, #32]	; (8002ae8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ac8:	40d9      	lsrs	r1, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	400b      	ands	r3, r1
 8002ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	000fffff 	.word	0x000fffff

08002aec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 031f 	and.w	r3, r3, #31
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6093      	str	r3, [r2, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	5fffffc0 	.word	0x5fffffc0

08002b2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b40:	d101      	bne.n	8002b46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	6fffffc0 	.word	0x6fffffc0

08002b7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b90:	d101      	bne.n	8002b96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <LL_ADC_Enable+0x24>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	7fffffc0 	.word	0x7fffffc0

08002bcc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <LL_ADC_Disable+0x24>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	f043 0202 	orr.w	r2, r3, #2
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	7fffffc0 	.word	0x7fffffc0

08002bf4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <LL_ADC_IsEnabled+0x18>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <LL_ADC_IsEnabled+0x1a>
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d101      	bne.n	8002c32 <LL_ADC_IsDisableOngoing+0x18>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <LL_ADC_IsDisableOngoing+0x1a>
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <LL_ADC_REG_StartConversion+0x24>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	f043 0204 	orr.w	r2, r3, #4
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	7fffffc0 	.word	0x7fffffc0

08002c68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d101      	bne.n	8002c80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d101      	bne.n	8002ca6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e18f      	b.n	8002fee <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7fe ffbb 	bl	8001c58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff ff19 	bl	8002b2c <LL_ADC_IsDeepPowerDownEnabled>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d004      	beq.n	8002d0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff feff 	bl	8002b08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff34 	bl	8002b7c <LL_ADC_IsInternalRegulatorEnabled>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d114      	bne.n	8002d44 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff18 	bl	8002b54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d24:	4b87      	ldr	r3, [pc, #540]	; (8002f44 <HAL_ADC_Init+0x290>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	099b      	lsrs	r3, r3, #6
 8002d2a:	4a87      	ldr	r2, [pc, #540]	; (8002f48 <HAL_ADC_Init+0x294>)
 8002d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d30:	099b      	lsrs	r3, r3, #6
 8002d32:	3301      	adds	r3, #1
 8002d34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d36:	e002      	b.n	8002d3e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f9      	bne.n	8002d38 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff17 	bl	8002b7c <LL_ADC_IsInternalRegulatorEnabled>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10d      	bne.n	8002d70 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f043 0210 	orr.w	r2, r3, #16
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d64:	f043 0201 	orr.w	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff77 	bl	8002c68 <LL_ADC_REG_IsConversionOngoing>
 8002d7a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f040 8129 	bne.w	8002fdc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f040 8125 	bne.w	8002fdc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d96:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d9a:	f043 0202 	orr.w	r2, r3, #2
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ff24 	bl	8002bf4 <LL_ADC_IsEnabled>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d136      	bne.n	8002e20 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a65      	ldr	r2, [pc, #404]	; (8002f4c <HAL_ADC_Init+0x298>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_ADC_Init+0x112>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a63      	ldr	r2, [pc, #396]	; (8002f50 <HAL_ADC_Init+0x29c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10e      	bne.n	8002de4 <HAL_ADC_Init+0x130>
 8002dc6:	4861      	ldr	r0, [pc, #388]	; (8002f4c <HAL_ADC_Init+0x298>)
 8002dc8:	f7ff ff14 	bl	8002bf4 <LL_ADC_IsEnabled>
 8002dcc:	4604      	mov	r4, r0
 8002dce:	4860      	ldr	r0, [pc, #384]	; (8002f50 <HAL_ADC_Init+0x29c>)
 8002dd0:	f7ff ff10 	bl	8002bf4 <LL_ADC_IsEnabled>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4323      	orrs	r3, r4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e008      	b.n	8002df6 <HAL_ADC_Init+0x142>
 8002de4:	485b      	ldr	r0, [pc, #364]	; (8002f54 <HAL_ADC_Init+0x2a0>)
 8002de6:	f7ff ff05 	bl	8002bf4 <LL_ADC_IsEnabled>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d012      	beq.n	8002e20 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a53      	ldr	r2, [pc, #332]	; (8002f4c <HAL_ADC_Init+0x298>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <HAL_ADC_Init+0x15a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a51      	ldr	r2, [pc, #324]	; (8002f50 <HAL_ADC_Init+0x29c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_Init+0x15e>
 8002e0e:	4a52      	ldr	r2, [pc, #328]	; (8002f58 <HAL_ADC_Init+0x2a4>)
 8002e10:	e000      	b.n	8002e14 <HAL_ADC_Init+0x160>
 8002e12:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_ADC_Init+0x2a8>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f7ff fd3c 	bl	8002898 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002e20:	f7ff fd18 	bl	8002854 <HAL_GetREVID>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d914      	bls.n	8002e58 <HAL_ADC_Init+0x1a4>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b10      	cmp	r3, #16
 8002e34:	d110      	bne.n	8002e58 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	7d5b      	ldrb	r3, [r3, #21]
 8002e3a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e40:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e46:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7f1b      	ldrb	r3, [r3, #28]
 8002e4c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e4e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e50:	f043 030c 	orr.w	r3, r3, #12
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e00d      	b.n	8002e74 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	7d5b      	ldrb	r3, [r3, #21]
 8002e5c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e62:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e68:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	7f1b      	ldrb	r3, [r3, #28]
 8002e6e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7f1b      	ldrb	r3, [r3, #28]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d106      	bne.n	8002e8a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	045b      	lsls	r3, r3, #17
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <HAL_ADC_Init+0x2ac>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	69b9      	ldr	r1, [r7, #24]
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fed2 	bl	8002c68 <LL_ADC_REG_IsConversionOngoing>
 8002ec4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fedf 	bl	8002c8e <LL_ADC_INJ_IsConversionOngoing>
 8002ed0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d15f      	bne.n	8002f98 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d15c      	bne.n	8002f98 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7d1b      	ldrb	r3, [r3, #20]
 8002ee2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HAL_ADC_Init+0x2b0>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	69b9      	ldr	r1, [r7, #24]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d130      	bne.n	8002f6c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <HAL_ADC_Init+0x2b4>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f1e:	3a01      	subs	r2, #1
 8002f20:	0411      	lsls	r1, r2, #16
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f26:	4311      	orrs	r1, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f2c:	4311      	orrs	r1, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f32:	430a      	orrs	r2, r1
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	611a      	str	r2, [r3, #16]
 8002f40:	e01c      	b.n	8002f7c <HAL_ADC_Init+0x2c8>
 8002f42:	bf00      	nop
 8002f44:	24000088 	.word	0x24000088
 8002f48:	053e2d63 	.word	0x053e2d63
 8002f4c:	40022000 	.word	0x40022000
 8002f50:	40022100 	.word	0x40022100
 8002f54:	58026000 	.word	0x58026000
 8002f58:	40022300 	.word	0x40022300
 8002f5c:	58026300 	.word	0x58026300
 8002f60:	fff0c003 	.word	0xfff0c003
 8002f64:	ffffbffc 	.word	0xffffbffc
 8002f68:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fdec 	bl	8003b70 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10c      	bne.n	8002fba <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f023 010f 	bic.w	r1, r3, #15
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	1e5a      	subs	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8002fb8:	e007      	b.n	8002fca <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 020f 	bic.w	r2, r2, #15
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	f023 0303 	bic.w	r3, r3, #3
 8002fd2:	f043 0201 	orr.w	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
 8002fda:	e007      	b.n	8002fec <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	f043 0210 	orr.w	r2, r3, #16
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3724      	adds	r7, #36	; 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd90      	pop	{r4, r7, pc}
 8002ff6:	bf00      	nop

08002ff8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a55      	ldr	r2, [pc, #340]	; (8003160 <HAL_ADC_Start_DMA+0x168>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d004      	beq.n	8003018 <HAL_ADC_Start_DMA+0x20>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a54      	ldr	r2, [pc, #336]	; (8003164 <HAL_ADC_Start_DMA+0x16c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d101      	bne.n	800301c <HAL_ADC_Start_DMA+0x24>
 8003018:	4b53      	ldr	r3, [pc, #332]	; (8003168 <HAL_ADC_Start_DMA+0x170>)
 800301a:	e000      	b.n	800301e <HAL_ADC_Start_DMA+0x26>
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_ADC_Start_DMA+0x174>)
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fd64 	bl	8002aec <LL_ADC_GetMultimode>
 8003024:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fe1c 	bl	8002c68 <LL_ADC_REG_IsConversionOngoing>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	f040 808c 	bne.w	8003150 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_ADC_Start_DMA+0x4e>
 8003042:	2302      	movs	r3, #2
 8003044:	e087      	b.n	8003156 <HAL_ADC_Start_DMA+0x15e>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b05      	cmp	r3, #5
 8003058:	d002      	beq.n	8003060 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b09      	cmp	r3, #9
 800305e:	d170      	bne.n	8003142 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fc07 	bl	8003874 <ADC_Enable>
 8003066:	4603      	mov	r3, r0
 8003068:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800306a:	7dfb      	ldrb	r3, [r7, #23]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d163      	bne.n	8003138 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003074:	4b3e      	ldr	r3, [pc, #248]	; (8003170 <HAL_ADC_Start_DMA+0x178>)
 8003076:	4013      	ands	r3, r2
 8003078:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a37      	ldr	r2, [pc, #220]	; (8003164 <HAL_ADC_Start_DMA+0x16c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d002      	beq.n	8003090 <HAL_ADC_Start_DMA+0x98>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	e000      	b.n	8003092 <HAL_ADC_Start_DMA+0x9a>
 8003090:	4b33      	ldr	r3, [pc, #204]	; (8003160 <HAL_ADC_Start_DMA+0x168>)
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	4293      	cmp	r3, r2
 8003098:	d002      	beq.n	80030a0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d006      	beq.n	80030c6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	f023 0206 	bic.w	r2, r3, #6
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	659a      	str	r2, [r3, #88]	; 0x58
 80030c4:	e002      	b.n	80030cc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d0:	4a28      	ldr	r2, [pc, #160]	; (8003174 <HAL_ADC_Start_DMA+0x17c>)
 80030d2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d8:	4a27      	ldr	r2, [pc, #156]	; (8003178 <HAL_ADC_Start_DMA+0x180>)
 80030da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e0:	4a26      	ldr	r2, [pc, #152]	; (800317c <HAL_ADC_Start_DMA+0x184>)
 80030e2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	221c      	movs	r2, #28
 80030ea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0210 	orr.w	r2, r2, #16
 8003102:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	4619      	mov	r1, r3
 800310e:	4610      	mov	r0, r2
 8003110:	f7ff fc89 	bl	8002a26 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3340      	adds	r3, #64	; 0x40
 800311e:	4619      	mov	r1, r3
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f001 ffd2 	bl	80050cc <HAL_DMA_Start_IT>
 8003128:	4603      	mov	r3, r0
 800312a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fd85 	bl	8002c40 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003136:	e00d      	b.n	8003154 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003140:	e008      	b.n	8003154 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800314e:	e001      	b.n	8003154 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003150:	2302      	movs	r3, #2
 8003152:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003154:	7dfb      	ldrb	r3, [r7, #23]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40022000 	.word	0x40022000
 8003164:	40022100 	.word	0x40022100
 8003168:	40022300 	.word	0x40022300
 800316c:	58026300 	.word	0x58026300
 8003170:	fffff0fe 	.word	0xfffff0fe
 8003174:	08003a47 	.word	0x08003a47
 8003178:	08003b1f 	.word	0x08003b1f
 800317c:	08003b3b 	.word	0x08003b3b

08003180 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031bc:	b590      	push	{r4, r7, lr}
 80031be:	b0a1      	sub	sp, #132	; 0x84
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4a65      	ldr	r2, [pc, #404]	; (800336c <HAL_ADC_ConfigChannel+0x1b0>)
 80031d6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x2a>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e32e      	b.n	8003844 <HAL_ADC_ConfigChannel+0x688>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fd38 	bl	8002c68 <LL_ADC_REG_IsConversionOngoing>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 8313 	bne.w	8003826 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	db2c      	blt.n	8003262 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003210:	2b00      	cmp	r3, #0
 8003212:	d108      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x6a>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0e9b      	lsrs	r3, r3, #26
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2201      	movs	r2, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	e016      	b.n	8003254 <HAL_ADC_ConfigChannel+0x98>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003236:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800323e:	2320      	movs	r3, #32
 8003240:	e003      	b.n	800324a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	2201      	movs	r2, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	69d1      	ldr	r1, [r2, #28]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	430b      	orrs	r3, r1
 8003260:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	f7ff fbad 	bl	80029ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fcf5 	bl	8002c68 <LL_ADC_REG_IsConversionOngoing>
 800327e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fd02 	bl	8002c8e <LL_ADC_INJ_IsConversionOngoing>
 800328a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800328c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 80b8 	bne.w	8003404 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 80b4 	bne.w	8003404 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6819      	ldr	r1, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	461a      	mov	r2, r3
 80032aa:	f7ff fbcf 	bl	8002a4c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032ae:	4b30      	ldr	r3, [pc, #192]	; (8003370 <HAL_ADC_ConfigChannel+0x1b4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80032b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ba:	d10b      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x118>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	089b      	lsrs	r3, r3, #2
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	e01d      	b.n	8003310 <HAL_ADC_ConfigChannel+0x154>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x13e>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	e00a      	b.n	8003310 <HAL_ADC_ConfigChannel+0x154>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b04      	cmp	r3, #4
 8003318:	d02c      	beq.n	8003374 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6919      	ldr	r1, [r3, #16]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003328:	f7ff faea 	bl	8002900 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6919      	ldr	r1, [r3, #16]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	7e5b      	ldrb	r3, [r3, #25]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d102      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x186>
 800333c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003340:	e000      	b.n	8003344 <HAL_ADC_ConfigChannel+0x188>
 8003342:	2300      	movs	r3, #0
 8003344:	461a      	mov	r2, r3
 8003346:	f7ff fb14 	bl	8002972 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6919      	ldr	r1, [r3, #16]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	7e1b      	ldrb	r3, [r3, #24]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d102      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1a4>
 800335a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800335e:	e000      	b.n	8003362 <HAL_ADC_ConfigChannel+0x1a6>
 8003360:	2300      	movs	r3, #0
 8003362:	461a      	mov	r2, r3
 8003364:	f7ff faec 	bl	8002940 <LL_ADC_SetDataRightShift>
 8003368:	e04c      	b.n	8003404 <HAL_ADC_ConfigChannel+0x248>
 800336a:	bf00      	nop
 800336c:	47ff0000 	.word	0x47ff0000
 8003370:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	069b      	lsls	r3, r3, #26
 8003384:	429a      	cmp	r2, r3
 8003386:	d107      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003396:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800339e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	069b      	lsls	r3, r3, #26
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d107      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033ba:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	069b      	lsls	r3, r3, #26
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d107      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033de:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	069b      	lsls	r3, r3, #26
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d107      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003402:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fbf3 	bl	8002bf4 <LL_ADC_IsEnabled>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 8211 	bne.w	8003838 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6819      	ldr	r1, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	461a      	mov	r2, r3
 8003424:	f7ff fb3e 	bl	8002aa4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4aa1      	ldr	r2, [pc, #644]	; (80036b4 <HAL_ADC_ConfigChannel+0x4f8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	f040 812e 	bne.w	8003690 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10b      	bne.n	800345c <HAL_ADC_ConfigChannel+0x2a0>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	0e9b      	lsrs	r3, r3, #26
 800344a:	3301      	adds	r3, #1
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2b09      	cmp	r3, #9
 8003452:	bf94      	ite	ls
 8003454:	2301      	movls	r3, #1
 8003456:	2300      	movhi	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	e019      	b.n	8003490 <HAL_ADC_ConfigChannel+0x2d4>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800346a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800346e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003474:	2320      	movs	r3, #32
 8003476:	e003      	b.n	8003480 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	3301      	adds	r3, #1
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	2b09      	cmp	r3, #9
 8003488:	bf94      	ite	ls
 800348a:	2301      	movls	r3, #1
 800348c:	2300      	movhi	r3, #0
 800348e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003490:	2b00      	cmp	r3, #0
 8003492:	d079      	beq.n	8003588 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x2f4>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	0e9b      	lsrs	r3, r3, #26
 80034a6:	3301      	adds	r3, #1
 80034a8:	069b      	lsls	r3, r3, #26
 80034aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ae:	e015      	b.n	80034dc <HAL_ADC_ConfigChannel+0x320>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80034be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80034c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80034c8:	2320      	movs	r3, #32
 80034ca:	e003      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80034cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	069b      	lsls	r3, r3, #26
 80034d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x340>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	0e9b      	lsrs	r3, r3, #26
 80034ee:	3301      	adds	r3, #1
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	2101      	movs	r1, #1
 80034f6:	fa01 f303 	lsl.w	r3, r1, r3
 80034fa:	e017      	b.n	800352c <HAL_ADC_ConfigChannel+0x370>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800350a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800350e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003514:	2320      	movs	r3, #32
 8003516:	e003      	b.n	8003520 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	3301      	adds	r3, #1
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2101      	movs	r1, #1
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	ea42 0103 	orr.w	r1, r2, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x396>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	0e9b      	lsrs	r3, r3, #26
 8003542:	3301      	adds	r3, #1
 8003544:	f003 021f 	and.w	r2, r3, #31
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	051b      	lsls	r3, r3, #20
 8003550:	e018      	b.n	8003584 <HAL_ADC_ConfigChannel+0x3c8>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800356a:	2320      	movs	r3, #32
 800356c:	e003      	b.n	8003576 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	3301      	adds	r3, #1
 8003578:	f003 021f 	and.w	r2, r3, #31
 800357c:	4613      	mov	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4413      	add	r3, r2
 8003582:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003584:	430b      	orrs	r3, r1
 8003586:	e07e      	b.n	8003686 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003590:	2b00      	cmp	r3, #0
 8003592:	d107      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x3e8>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	3301      	adds	r3, #1
 800359c:	069b      	lsls	r3, r3, #26
 800359e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a2:	e015      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x414>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80035bc:	2320      	movs	r3, #32
 80035be:	e003      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	3301      	adds	r3, #1
 80035ca:	069b      	lsls	r3, r3, #26
 80035cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d109      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x434>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	0e9b      	lsrs	r3, r3, #26
 80035e2:	3301      	adds	r3, #1
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	2101      	movs	r1, #1
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	e017      	b.n	8003620 <HAL_ADC_ConfigChannel+0x464>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	61bb      	str	r3, [r7, #24]
  return result;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003608:	2320      	movs	r3, #32
 800360a:	e003      	b.n	8003614 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	fab3 f383 	clz	r3, r3
 8003612:	b2db      	uxtb	r3, r3
 8003614:	3301      	adds	r3, #1
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	2101      	movs	r1, #1
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	ea42 0103 	orr.w	r1, r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10d      	bne.n	800364c <HAL_ADC_ConfigChannel+0x490>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	0e9b      	lsrs	r3, r3, #26
 8003636:	3301      	adds	r3, #1
 8003638:	f003 021f 	and.w	r2, r3, #31
 800363c:	4613      	mov	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4413      	add	r3, r2
 8003642:	3b1e      	subs	r3, #30
 8003644:	051b      	lsls	r3, r3, #20
 8003646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800364a:	e01b      	b.n	8003684 <HAL_ADC_ConfigChannel+0x4c8>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	60fb      	str	r3, [r7, #12]
  return result;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003664:	2320      	movs	r3, #32
 8003666:	e003      	b.n	8003670 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3301      	adds	r3, #1
 8003672:	f003 021f 	and.w	r2, r3, #31
 8003676:	4613      	mov	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	4413      	add	r3, r2
 800367c:	3b1e      	subs	r3, #30
 800367e:	051b      	lsls	r3, r3, #20
 8003680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003684:	430b      	orrs	r3, r1
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	6892      	ldr	r2, [r2, #8]
 800368a:	4619      	mov	r1, r3
 800368c:	f7ff f9de 	bl	8002a4c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f280 80cf 	bge.w	8003838 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a06      	ldr	r2, [pc, #24]	; (80036b8 <HAL_ADC_ConfigChannel+0x4fc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x4f2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a04      	ldr	r2, [pc, #16]	; (80036bc <HAL_ADC_ConfigChannel+0x500>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d10a      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x508>
 80036ae:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <HAL_ADC_ConfigChannel+0x504>)
 80036b0:	e009      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x50a>
 80036b2:	bf00      	nop
 80036b4:	47ff0000 	.word	0x47ff0000
 80036b8:	40022000 	.word	0x40022000
 80036bc:	40022100 	.word	0x40022100
 80036c0:	40022300 	.word	0x40022300
 80036c4:	4b61      	ldr	r3, [pc, #388]	; (800384c <HAL_ADC_ConfigChannel+0x690>)
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff f90c 	bl	80028e4 <LL_ADC_GetCommonPathInternalCh>
 80036cc:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a5f      	ldr	r2, [pc, #380]	; (8003850 <HAL_ADC_ConfigChannel+0x694>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_ADC_ConfigChannel+0x526>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a5d      	ldr	r2, [pc, #372]	; (8003854 <HAL_ADC_ConfigChannel+0x698>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d10e      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x544>
 80036e2:	485b      	ldr	r0, [pc, #364]	; (8003850 <HAL_ADC_ConfigChannel+0x694>)
 80036e4:	f7ff fa86 	bl	8002bf4 <LL_ADC_IsEnabled>
 80036e8:	4604      	mov	r4, r0
 80036ea:	485a      	ldr	r0, [pc, #360]	; (8003854 <HAL_ADC_ConfigChannel+0x698>)
 80036ec:	f7ff fa82 	bl	8002bf4 <LL_ADC_IsEnabled>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4323      	orrs	r3, r4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e008      	b.n	8003712 <HAL_ADC_ConfigChannel+0x556>
 8003700:	4855      	ldr	r0, [pc, #340]	; (8003858 <HAL_ADC_ConfigChannel+0x69c>)
 8003702:	f7ff fa77 	bl	8002bf4 <LL_ADC_IsEnabled>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d07d      	beq.n	8003812 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a50      	ldr	r2, [pc, #320]	; (800385c <HAL_ADC_ConfigChannel+0x6a0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d130      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x5c6>
 8003720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d12b      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a4a      	ldr	r2, [pc, #296]	; (8003858 <HAL_ADC_ConfigChannel+0x69c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	f040 8081 	bne.w	8003838 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a45      	ldr	r2, [pc, #276]	; (8003850 <HAL_ADC_ConfigChannel+0x694>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_ADC_ConfigChannel+0x58e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a43      	ldr	r2, [pc, #268]	; (8003854 <HAL_ADC_ConfigChannel+0x698>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <HAL_ADC_ConfigChannel+0x592>
 800374a:	4a45      	ldr	r2, [pc, #276]	; (8003860 <HAL_ADC_ConfigChannel+0x6a4>)
 800374c:	e000      	b.n	8003750 <HAL_ADC_ConfigChannel+0x594>
 800374e:	4a3f      	ldr	r2, [pc, #252]	; (800384c <HAL_ADC_ConfigChannel+0x690>)
 8003750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f7ff f8b0 	bl	80028be <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800375e:	4b41      	ldr	r3, [pc, #260]	; (8003864 <HAL_ADC_ConfigChannel+0x6a8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	099b      	lsrs	r3, r3, #6
 8003764:	4a40      	ldr	r2, [pc, #256]	; (8003868 <HAL_ADC_ConfigChannel+0x6ac>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	099b      	lsrs	r3, r3, #6
 800376c:	3301      	adds	r3, #1
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003772:	e002      	b.n	800377a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	3b01      	subs	r3, #1
 8003778:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f9      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003780:	e05a      	b.n	8003838 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a39      	ldr	r2, [pc, #228]	; (800386c <HAL_ADC_ConfigChannel+0x6b0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d11e      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x60e>
 800378c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d119      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2f      	ldr	r2, [pc, #188]	; (8003858 <HAL_ADC_ConfigChannel+0x69c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d14b      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a2a      	ldr	r2, [pc, #168]	; (8003850 <HAL_ADC_ConfigChannel+0x694>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <HAL_ADC_ConfigChannel+0x5f8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a29      	ldr	r2, [pc, #164]	; (8003854 <HAL_ADC_ConfigChannel+0x698>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d101      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x5fc>
 80037b4:	4a2a      	ldr	r2, [pc, #168]	; (8003860 <HAL_ADC_ConfigChannel+0x6a4>)
 80037b6:	e000      	b.n	80037ba <HAL_ADC_ConfigChannel+0x5fe>
 80037b8:	4a24      	ldr	r2, [pc, #144]	; (800384c <HAL_ADC_ConfigChannel+0x690>)
 80037ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037c0:	4619      	mov	r1, r3
 80037c2:	4610      	mov	r0, r2
 80037c4:	f7ff f87b 	bl	80028be <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037c8:	e036      	b.n	8003838 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a28      	ldr	r2, [pc, #160]	; (8003870 <HAL_ADC_ConfigChannel+0x6b4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d131      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x67c>
 80037d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d12c      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1d      	ldr	r2, [pc, #116]	; (8003858 <HAL_ADC_ConfigChannel+0x69c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d127      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a18      	ldr	r2, [pc, #96]	; (8003850 <HAL_ADC_ConfigChannel+0x694>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_ADC_ConfigChannel+0x640>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_ADC_ConfigChannel+0x698>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x644>
 80037fc:	4a18      	ldr	r2, [pc, #96]	; (8003860 <HAL_ADC_ConfigChannel+0x6a4>)
 80037fe:	e000      	b.n	8003802 <HAL_ADC_ConfigChannel+0x646>
 8003800:	4a12      	ldr	r2, [pc, #72]	; (800384c <HAL_ADC_ConfigChannel+0x690>)
 8003802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003804:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f7ff f857 	bl	80028be <LL_ADC_SetCommonPathInternalCh>
 8003810:	e012      	b.n	8003838 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	f043 0220 	orr.w	r2, r3, #32
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003824:	e008      	b.n	8003838 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	f043 0220 	orr.w	r2, r3, #32
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003840:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003844:	4618      	mov	r0, r3
 8003846:	3784      	adds	r7, #132	; 0x84
 8003848:	46bd      	mov	sp, r7
 800384a:	bd90      	pop	{r4, r7, pc}
 800384c:	58026300 	.word	0x58026300
 8003850:	40022000 	.word	0x40022000
 8003854:	40022100 	.word	0x40022100
 8003858:	58026000 	.word	0x58026000
 800385c:	cb840000 	.word	0xcb840000
 8003860:	40022300 	.word	0x40022300
 8003864:	24000088 	.word	0x24000088
 8003868:	053e2d63 	.word	0x053e2d63
 800386c:	c7520000 	.word	0xc7520000
 8003870:	cfb80000 	.word	0xcfb80000

08003874 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff f9b7 	bl	8002bf4 <LL_ADC_IsEnabled>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d16e      	bne.n	800396a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	4b38      	ldr	r3, [pc, #224]	; (8003974 <ADC_Enable+0x100>)
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00d      	beq.n	80038b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	f043 0210 	orr.w	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038aa:	f043 0201 	orr.w	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e05a      	b.n	800396c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff f972 	bl	8002ba4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038c0:	f7fe ffac 	bl	800281c <HAL_GetTick>
 80038c4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a2b      	ldr	r2, [pc, #172]	; (8003978 <ADC_Enable+0x104>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d004      	beq.n	80038da <ADC_Enable+0x66>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a29      	ldr	r2, [pc, #164]	; (800397c <ADC_Enable+0x108>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <ADC_Enable+0x6a>
 80038da:	4b29      	ldr	r3, [pc, #164]	; (8003980 <ADC_Enable+0x10c>)
 80038dc:	e000      	b.n	80038e0 <ADC_Enable+0x6c>
 80038de:	4b29      	ldr	r3, [pc, #164]	; (8003984 <ADC_Enable+0x110>)
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff f903 	bl	8002aec <LL_ADC_GetMultimode>
 80038e6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a23      	ldr	r2, [pc, #140]	; (800397c <ADC_Enable+0x108>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d002      	beq.n	80038f8 <ADC_Enable+0x84>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	e000      	b.n	80038fa <ADC_Enable+0x86>
 80038f8:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <ADC_Enable+0x104>)
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	4293      	cmp	r3, r2
 8003900:	d02c      	beq.n	800395c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d130      	bne.n	800396a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003908:	e028      	b.n	800395c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff f970 	bl	8002bf4 <LL_ADC_IsEnabled>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d104      	bne.n	8003924 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff f940 	bl	8002ba4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003924:	f7fe ff7a 	bl	800281c <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d914      	bls.n	800395c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b01      	cmp	r3, #1
 800393e:	d00d      	beq.n	800395c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	f043 0210 	orr.w	r2, r3, #16
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	f043 0201 	orr.w	r2, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e007      	b.n	800396c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b01      	cmp	r3, #1
 8003968:	d1cf      	bne.n	800390a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	8000003f 	.word	0x8000003f
 8003978:	40022000 	.word	0x40022000
 800397c:	40022100 	.word	0x40022100
 8003980:	40022300 	.word	0x40022300
 8003984:	58026300 	.word	0x58026300

08003988 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff f940 	bl	8002c1a <LL_ADC_IsDisableOngoing>
 800399a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff f927 	bl	8002bf4 <LL_ADC_IsEnabled>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d047      	beq.n	8003a3c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d144      	bne.n	8003a3c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 030d 	and.w	r3, r3, #13
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d10c      	bne.n	80039da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff f901 	bl	8002bcc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2203      	movs	r2, #3
 80039d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039d2:	f7fe ff23 	bl	800281c <HAL_GetTick>
 80039d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039d8:	e029      	b.n	8003a2e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	f043 0210 	orr.w	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	f043 0201 	orr.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e023      	b.n	8003a3e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039f6:	f7fe ff11 	bl	800281c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d914      	bls.n	8003a2e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	f043 0210 	orr.w	r2, r3, #16
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	f043 0201 	orr.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e007      	b.n	8003a3e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1dc      	bne.n	80039f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d14b      	bne.n	8003af8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d021      	beq.n	8003abe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe ff92 	bl	80029a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d032      	beq.n	8003af0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d12b      	bne.n	8003af0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d11f      	bne.n	8003af0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab4:	f043 0201 	orr.w	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54
 8003abc:	e018      	b.n	8003af0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d111      	bne.n	8003af0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae8:	f043 0201 	orr.w	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7ff fb45 	bl	8003180 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003af6:	e00e      	b.n	8003b16 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f7ff fb4f 	bl	80031a8 <HAL_ADC_ErrorCallback>
}
 8003b0a:	e004      	b.n	8003b16 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff fb31 	bl	8003194 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	f043 0204 	orr.w	r2, r3, #4
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7ff fb21 	bl	80031a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a7a      	ldr	r2, [pc, #488]	; (8003d68 <ADC_ConfigureBoostMode+0x1f8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <ADC_ConfigureBoostMode+0x1c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a79      	ldr	r2, [pc, #484]	; (8003d6c <ADC_ConfigureBoostMode+0x1fc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d109      	bne.n	8003ba0 <ADC_ConfigureBoostMode+0x30>
 8003b8c:	4b78      	ldr	r3, [pc, #480]	; (8003d70 <ADC_ConfigureBoostMode+0x200>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf14      	ite	ne
 8003b98:	2301      	movne	r3, #1
 8003b9a:	2300      	moveq	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	e008      	b.n	8003bb2 <ADC_ConfigureBoostMode+0x42>
 8003ba0:	4b74      	ldr	r3, [pc, #464]	; (8003d74 <ADC_ConfigureBoostMode+0x204>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf14      	ite	ne
 8003bac:	2301      	movne	r3, #1
 8003bae:	2300      	moveq	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d01c      	beq.n	8003bf0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003bb6:	f005 fd33 	bl	8009620 <HAL_RCC_GetHCLKFreq>
 8003bba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bc4:	d010      	beq.n	8003be8 <ADC_ConfigureBoostMode+0x78>
 8003bc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bca:	d873      	bhi.n	8003cb4 <ADC_ConfigureBoostMode+0x144>
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd0:	d002      	beq.n	8003bd8 <ADC_ConfigureBoostMode+0x68>
 8003bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bd6:	d16d      	bne.n	8003cb4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be4:	60fb      	str	r3, [r7, #12]
        break;
 8003be6:	e068      	b.n	8003cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	60fb      	str	r3, [r7, #12]
        break;
 8003bee:	e064      	b.n	8003cba <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003bf0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003bf4:	f04f 0100 	mov.w	r1, #0
 8003bf8:	f006 ff78 	bl	800aaec <HAL_RCCEx_GetPeriphCLKFreq>
 8003bfc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003c06:	d051      	beq.n	8003cac <ADC_ConfigureBoostMode+0x13c>
 8003c08:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003c0c:	d854      	bhi.n	8003cb8 <ADC_ConfigureBoostMode+0x148>
 8003c0e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003c12:	d047      	beq.n	8003ca4 <ADC_ConfigureBoostMode+0x134>
 8003c14:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003c18:	d84e      	bhi.n	8003cb8 <ADC_ConfigureBoostMode+0x148>
 8003c1a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c1e:	d03d      	beq.n	8003c9c <ADC_ConfigureBoostMode+0x12c>
 8003c20:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c24:	d848      	bhi.n	8003cb8 <ADC_ConfigureBoostMode+0x148>
 8003c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c2a:	d033      	beq.n	8003c94 <ADC_ConfigureBoostMode+0x124>
 8003c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c30:	d842      	bhi.n	8003cb8 <ADC_ConfigureBoostMode+0x148>
 8003c32:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c36:	d029      	beq.n	8003c8c <ADC_ConfigureBoostMode+0x11c>
 8003c38:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c3c:	d83c      	bhi.n	8003cb8 <ADC_ConfigureBoostMode+0x148>
 8003c3e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c42:	d01a      	beq.n	8003c7a <ADC_ConfigureBoostMode+0x10a>
 8003c44:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c48:	d836      	bhi.n	8003cb8 <ADC_ConfigureBoostMode+0x148>
 8003c4a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c4e:	d014      	beq.n	8003c7a <ADC_ConfigureBoostMode+0x10a>
 8003c50:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c54:	d830      	bhi.n	8003cb8 <ADC_ConfigureBoostMode+0x148>
 8003c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c5a:	d00e      	beq.n	8003c7a <ADC_ConfigureBoostMode+0x10a>
 8003c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c60:	d82a      	bhi.n	8003cb8 <ADC_ConfigureBoostMode+0x148>
 8003c62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c66:	d008      	beq.n	8003c7a <ADC_ConfigureBoostMode+0x10a>
 8003c68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c6c:	d824      	bhi.n	8003cb8 <ADC_ConfigureBoostMode+0x148>
 8003c6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c72:	d002      	beq.n	8003c7a <ADC_ConfigureBoostMode+0x10a>
 8003c74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c78:	d11e      	bne.n	8003cb8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	0c9b      	lsrs	r3, r3, #18
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	60fb      	str	r3, [r7, #12]
        break;
 8003c8a:	e016      	b.n	8003cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	60fb      	str	r3, [r7, #12]
        break;
 8003c92:	e012      	b.n	8003cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	60fb      	str	r3, [r7, #12]
        break;
 8003c9a:	e00e      	b.n	8003cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	099b      	lsrs	r3, r3, #6
 8003ca0:	60fb      	str	r3, [r7, #12]
        break;
 8003ca2:	e00a      	b.n	8003cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	09db      	lsrs	r3, r3, #7
 8003ca8:	60fb      	str	r3, [r7, #12]
        break;
 8003caa:	e006      	b.n	8003cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	60fb      	str	r3, [r7, #12]
        break;
 8003cb2:	e002      	b.n	8003cba <ADC_ConfigureBoostMode+0x14a>
        break;
 8003cb4:	bf00      	nop
 8003cb6:	e000      	b.n	8003cba <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003cb8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003cba:	f7fe fdcb 	bl	8002854 <HAL_GetREVID>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d815      	bhi.n	8003cf4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4a2b      	ldr	r2, [pc, #172]	; (8003d78 <ADC_ConfigureBoostMode+0x208>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d908      	bls.n	8003ce2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cde:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ce0:	e03e      	b.n	8003d60 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cf0:	609a      	str	r2, [r3, #8]
}
 8003cf2:	e035      	b.n	8003d60 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <ADC_ConfigureBoostMode+0x20c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d808      	bhi.n	8003d14 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d10:	609a      	str	r2, [r3, #8]
}
 8003d12:	e025      	b.n	8003d60 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <ADC_ConfigureBoostMode+0x210>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d80a      	bhi.n	8003d32 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d2e:	609a      	str	r2, [r3, #8]
}
 8003d30:	e016      	b.n	8003d60 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <ADC_ConfigureBoostMode+0x214>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d80a      	bhi.n	8003d50 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4c:	609a      	str	r2, [r3, #8]
}
 8003d4e:	e007      	b.n	8003d60 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003d5e:	609a      	str	r2, [r3, #8]
}
 8003d60:	bf00      	nop
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40022000 	.word	0x40022000
 8003d6c:	40022100 	.word	0x40022100
 8003d70:	40022300 	.word	0x40022300
 8003d74:	58026300 	.word	0x58026300
 8003d78:	01312d00 	.word	0x01312d00
 8003d7c:	005f5e10 	.word	0x005f5e10
 8003d80:	00bebc20 	.word	0x00bebc20
 8003d84:	017d7840 	.word	0x017d7840

08003d88 <LL_ADC_IsEnabled>:
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <LL_ADC_IsEnabled+0x18>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <LL_ADC_IsEnabled+0x1a>
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <LL_ADC_StartCalibration>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <LL_ADC_StartCalibration+0x38>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	3ffeffc0 	.word	0x3ffeffc0

08003dec <LL_ADC_IsCalibrationOnGoing>:
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e00:	d101      	bne.n	8003e06 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_ADC_REG_IsConversionOngoing>:
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d101      	bne.n	8003e2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_ADCEx_Calibration_Start+0x1e>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e04c      	b.n	8003ef4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7ff fd90 	bl	8003988 <ADC_Disable>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d135      	bne.n	8003ede <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e76:	4b21      	ldr	r3, [pc, #132]	; (8003efc <HAL_ADCEx_Calibration_Start+0xc0>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	f043 0202 	orr.w	r2, r3, #2
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff ff90 	bl	8003db0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e90:	e014      	b.n	8003ebc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	3301      	adds	r3, #1
 8003e96:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4a19      	ldr	r2, [pc, #100]	; (8003f00 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d30d      	bcc.n	8003ebc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	f023 0312 	bic.w	r3, r3, #18
 8003ea8:	f043 0210 	orr.w	r2, r3, #16
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e01b      	b.n	8003ef4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ff93 	bl	8003dec <LL_ADC_IsCalibrationOnGoing>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e2      	bne.n	8003e92 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	f023 0303 	bic.w	r3, r3, #3
 8003ed4:	f043 0201 	orr.w	r2, r3, #1
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
 8003edc:	e005      	b.n	8003eea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	f043 0210 	orr.w	r2, r3, #16
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	ffffeefd 	.word	0xffffeefd
 8003f00:	25c3f800 	.word	0x25c3f800

08003f04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b09f      	sub	sp, #124	; 0x7c
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e0be      	b.n	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a5c      	ldr	r2, [pc, #368]	; (80040a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d102      	bne.n	8003f42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f3c:	4b5b      	ldr	r3, [pc, #364]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	e001      	b.n	8003f46 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e09d      	b.n	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff ff54 	bl	8003e14 <LL_ADC_REG_IsConversionOngoing>
 8003f6c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ff4e 	bl	8003e14 <LL_ADC_REG_IsConversionOngoing>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d17f      	bne.n	800407e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d17c      	bne.n	800407e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a47      	ldr	r2, [pc, #284]	; (80040a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a46      	ldr	r2, [pc, #280]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d101      	bne.n	8003f9c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003f98:	4b45      	ldr	r3, [pc, #276]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f9a:	e000      	b.n	8003f9e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003f9c:	4b45      	ldr	r3, [pc, #276]	; (80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f9e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d039      	beq.n	800401c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a3a      	ldr	r2, [pc, #232]	; (80040a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d004      	beq.n	8003fce <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a38      	ldr	r2, [pc, #224]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d10e      	bne.n	8003fec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003fce:	4836      	ldr	r0, [pc, #216]	; (80040a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fd0:	f7ff feda 	bl	8003d88 <LL_ADC_IsEnabled>
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	4835      	ldr	r0, [pc, #212]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fd8:	f7ff fed6 	bl	8003d88 <LL_ADC_IsEnabled>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4323      	orrs	r3, r4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e008      	b.n	8003ffe <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003fec:	4832      	ldr	r0, [pc, #200]	; (80040b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003fee:	f7ff fecb 	bl	8003d88 <LL_ADC_IsEnabled>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d047      	beq.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	4b2d      	ldr	r3, [pc, #180]	; (80040bc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004008:	4013      	ands	r3, r2
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	6811      	ldr	r1, [r2, #0]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	6892      	ldr	r2, [r2, #8]
 8004012:	430a      	orrs	r2, r1
 8004014:	431a      	orrs	r2, r3
 8004016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004018:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800401a:	e03a      	b.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800401c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004026:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1e      	ldr	r2, [pc, #120]	; (80040a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d004      	beq.n	800403c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d10e      	bne.n	800405a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800403c:	481a      	ldr	r0, [pc, #104]	; (80040a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800403e:	f7ff fea3 	bl	8003d88 <LL_ADC_IsEnabled>
 8004042:	4604      	mov	r4, r0
 8004044:	4819      	ldr	r0, [pc, #100]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004046:	f7ff fe9f 	bl	8003d88 <LL_ADC_IsEnabled>
 800404a:	4603      	mov	r3, r0
 800404c:	4323      	orrs	r3, r4
 800404e:	2b00      	cmp	r3, #0
 8004050:	bf0c      	ite	eq
 8004052:	2301      	moveq	r3, #1
 8004054:	2300      	movne	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	e008      	b.n	800406c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800405a:	4817      	ldr	r0, [pc, #92]	; (80040b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800405c:	f7ff fe94 	bl	8003d88 <LL_ADC_IsEnabled>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf0c      	ite	eq
 8004066:	2301      	moveq	r3, #1
 8004068:	2300      	movne	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d010      	beq.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	4b11      	ldr	r3, [pc, #68]	; (80040bc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004076:	4013      	ands	r3, r2
 8004078:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800407a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800407c:	e009      	b.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	f043 0220 	orr.w	r2, r3, #32
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004090:	e000      	b.n	8004094 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004092:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800409c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	377c      	adds	r7, #124	; 0x7c
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd90      	pop	{r4, r7, pc}
 80040a8:	40022000 	.word	0x40022000
 80040ac:	40022100 	.word	0x40022100
 80040b0:	40022300 	.word	0x40022300
 80040b4:	58026300 	.word	0x58026300
 80040b8:	58026000 	.word	0x58026000
 80040bc:	fffff0e0 	.word	0xfffff0e0

080040c0 <__NVIC_SetPriorityGrouping>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <__NVIC_SetPriorityGrouping+0x40>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040dc:	4013      	ands	r3, r2
 80040de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040e8:	4b06      	ldr	r3, [pc, #24]	; (8004104 <__NVIC_SetPriorityGrouping+0x44>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ee:	4a04      	ldr	r2, [pc, #16]	; (8004100 <__NVIC_SetPriorityGrouping+0x40>)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	60d3      	str	r3, [r2, #12]
}
 80040f4:	bf00      	nop
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000ed00 	.word	0xe000ed00
 8004104:	05fa0000 	.word	0x05fa0000

08004108 <__NVIC_GetPriorityGrouping>:
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800410c:	4b04      	ldr	r3, [pc, #16]	; (8004120 <__NVIC_GetPriorityGrouping+0x18>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	0a1b      	lsrs	r3, r3, #8
 8004112:	f003 0307 	and.w	r3, r3, #7
}
 8004116:	4618      	mov	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	e000ed00 	.word	0xe000ed00

08004124 <__NVIC_EnableIRQ>:
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800412e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004132:	2b00      	cmp	r3, #0
 8004134:	db0b      	blt.n	800414e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	f003 021f 	and.w	r2, r3, #31
 800413c:	4907      	ldr	r1, [pc, #28]	; (800415c <__NVIC_EnableIRQ+0x38>)
 800413e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	2001      	movs	r0, #1
 8004146:	fa00 f202 	lsl.w	r2, r0, r2
 800414a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	e000e100 	.word	0xe000e100

08004160 <__NVIC_SetPriority>:
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	6039      	str	r1, [r7, #0]
 800416a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800416c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004170:	2b00      	cmp	r3, #0
 8004172:	db0a      	blt.n	800418a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	490c      	ldr	r1, [pc, #48]	; (80041ac <__NVIC_SetPriority+0x4c>)
 800417a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800417e:	0112      	lsls	r2, r2, #4
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	440b      	add	r3, r1
 8004184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004188:	e00a      	b.n	80041a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	4908      	ldr	r1, [pc, #32]	; (80041b0 <__NVIC_SetPriority+0x50>)
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	3b04      	subs	r3, #4
 8004198:	0112      	lsls	r2, r2, #4
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	440b      	add	r3, r1
 800419e:	761a      	strb	r2, [r3, #24]
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	e000e100 	.word	0xe000e100
 80041b0:	e000ed00 	.word	0xe000ed00

080041b4 <NVIC_EncodePriority>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	b089      	sub	sp, #36	; 0x24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f1c3 0307 	rsb	r3, r3, #7
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	bf28      	it	cs
 80041d2:	2304      	movcs	r3, #4
 80041d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3304      	adds	r3, #4
 80041da:	2b06      	cmp	r3, #6
 80041dc:	d902      	bls.n	80041e4 <NVIC_EncodePriority+0x30>
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3b03      	subs	r3, #3
 80041e2:	e000      	b.n	80041e6 <NVIC_EncodePriority+0x32>
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	43da      	mvns	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	401a      	ands	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	fa01 f303 	lsl.w	r3, r1, r3
 8004206:	43d9      	mvns	r1, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800420c:	4313      	orrs	r3, r2
}
 800420e:	4618      	mov	r0, r3
 8004210:	3724      	adds	r7, #36	; 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
	...

0800421c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3b01      	subs	r3, #1
 8004228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800422c:	d301      	bcc.n	8004232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800422e:	2301      	movs	r3, #1
 8004230:	e00f      	b.n	8004252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <SysTick_Config+0x40>)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3b01      	subs	r3, #1
 8004238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800423a:	210f      	movs	r1, #15
 800423c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004240:	f7ff ff8e 	bl	8004160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <SysTick_Config+0x40>)
 8004246:	2200      	movs	r2, #0
 8004248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800424a:	4b04      	ldr	r3, [pc, #16]	; (800425c <SysTick_Config+0x40>)
 800424c:	2207      	movs	r2, #7
 800424e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	e000e010 	.word	0xe000e010

08004260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff ff29 	bl	80040c0 <__NVIC_SetPriorityGrouping>
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b086      	sub	sp, #24
 800427a:	af00      	add	r7, sp, #0
 800427c:	4603      	mov	r3, r0
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004284:	f7ff ff40 	bl	8004108 <__NVIC_GetPriorityGrouping>
 8004288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	6978      	ldr	r0, [r7, #20]
 8004290:	f7ff ff90 	bl	80041b4 <NVIC_EncodePriority>
 8004294:	4602      	mov	r2, r0
 8004296:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800429a:	4611      	mov	r1, r2
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff ff5f 	bl	8004160 <__NVIC_SetPriority>
}
 80042a2:	bf00      	nop
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	4603      	mov	r3, r0
 80042b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff ff33 	bl	8004124 <__NVIC_EnableIRQ>
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff ffa4 	bl	800421c <SysTick_Config>
 80042d4:	4603      	mov	r3, r0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e014      	b.n	800431a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	791b      	ldrb	r3, [r3, #4]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d105      	bne.n	8004306 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7fd fdc3 	bl	8001e8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2202      	movs	r2, #2
 800430a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e046      	b.n	80043c4 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	795b      	ldrb	r3, [r3, #5]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_DAC_Start+0x20>
 800433e:	2302      	movs	r3, #2
 8004340:	e040      	b.n	80043c4 <HAL_DAC_Start+0xa2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6819      	ldr	r1, [r3, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	2201      	movs	r2, #1
 800435c:	409a      	lsls	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10f      	bne.n	800438c <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004376:	2b02      	cmp	r3, #2
 8004378:	d11d      	bne.n	80043b6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0201 	orr.w	r2, r2, #1
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	e014      	b.n	80043b6 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2102      	movs	r1, #2
 800439e:	fa01 f303 	lsl.w	r3, r1, r3
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d107      	bne.n	80043b6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0202 	orr.w	r2, r2, #2
 80043b4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0a2      	b.n	800452e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	795b      	ldrb	r3, [r3, #5]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_DAC_Start_DMA+0x24>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e09c      	b.n	800452e <HAL_DAC_Start_DMA+0x15e>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2201      	movs	r2, #1
 80043f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2202      	movs	r2, #2
 80043fe:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d129      	bne.n	800445a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	4a4b      	ldr	r2, [pc, #300]	; (8004538 <HAL_DAC_Start_DMA+0x168>)
 800440c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	4a4a      	ldr	r2, [pc, #296]	; (800453c <HAL_DAC_Start_DMA+0x16c>)
 8004414:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	4a49      	ldr	r2, [pc, #292]	; (8004540 <HAL_DAC_Start_DMA+0x170>)
 800441c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800442c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_DAC_Start_DMA+0x6c>
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	2b04      	cmp	r3, #4
 8004438:	d005      	beq.n	8004446 <HAL_DAC_Start_DMA+0x76>
 800443a:	e009      	b.n	8004450 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3308      	adds	r3, #8
 8004442:	613b      	str	r3, [r7, #16]
        break;
 8004444:	e033      	b.n	80044ae <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	613b      	str	r3, [r7, #16]
        break;
 800444e:	e02e      	b.n	80044ae <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3310      	adds	r3, #16
 8004456:	613b      	str	r3, [r7, #16]
        break;
 8004458:	e029      	b.n	80044ae <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	4a39      	ldr	r2, [pc, #228]	; (8004544 <HAL_DAC_Start_DMA+0x174>)
 8004460:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	4a38      	ldr	r2, [pc, #224]	; (8004548 <HAL_DAC_Start_DMA+0x178>)
 8004468:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	4a37      	ldr	r2, [pc, #220]	; (800454c <HAL_DAC_Start_DMA+0x17c>)
 8004470:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004480:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_DAC_Start_DMA+0xc0>
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	2b04      	cmp	r3, #4
 800448c:	d005      	beq.n	800449a <HAL_DAC_Start_DMA+0xca>
 800448e:	e009      	b.n	80044a4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	613b      	str	r3, [r7, #16]
        break;
 8004498:	e009      	b.n	80044ae <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3318      	adds	r3, #24
 80044a0:	613b      	str	r3, [r7, #16]
        break;
 80044a2:	e004      	b.n	80044ae <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	331c      	adds	r3, #28
 80044aa:	613b      	str	r3, [r7, #16]
        break;
 80044ac:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d111      	bne.n	80044d8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6898      	ldr	r0, [r3, #8]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	f000 fdfd 	bl	80050cc <HAL_DMA_Start_IT>
 80044d2:	4603      	mov	r3, r0
 80044d4:	75fb      	strb	r3, [r7, #23]
 80044d6:	e010      	b.n	80044fa <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80044e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	68d8      	ldr	r0, [r3, #12]
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	f000 fdeb 	bl	80050cc <HAL_DMA_Start_IT>
 80044f6:	4603      	mov	r3, r0
 80044f8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004500:	7dfb      	ldrb	r3, [r7, #23]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10c      	bne.n	8004520 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6819      	ldr	r1, [r3, #0]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2201      	movs	r2, #1
 8004514:	409a      	lsls	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e005      	b.n	800452c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f043 0204 	orr.w	r2, r3, #4
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800452c:	7dfb      	ldrb	r3, [r7, #23]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	08004901 	.word	0x08004901
 800453c:	08004923 	.word	0x08004923
 8004540:	0800493f 	.word	0x0800493f
 8004544:	080049a9 	.word	0x080049a9
 8004548:	080049cb 	.word	0x080049cb
 800454c:	080049e7 	.word	0x080049e7

08004550 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e03e      	b.n	80045e2 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6819      	ldr	r1, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43da      	mvns	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	400a      	ands	r2, r1
 8004580:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6819      	ldr	r1, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	f003 0310 	and.w	r3, r3, #16
 800458e:	2201      	movs	r2, #1
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43da      	mvns	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	400a      	ands	r2, r1
 800459c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10d      	bne.n	80045c0 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fff9 	bl	80055a0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e00c      	b.n	80045da <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 ffeb 	bl	80055a0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80045d8:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b087      	sub	sp, #28
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
 80045f6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e015      	b.n	8004632 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d105      	bne.n	800461e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4413      	add	r3, r2
 8004618:	3308      	adds	r3, #8
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e004      	b.n	8004628 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4413      	add	r3, r2
 8004624:	3314      	adds	r3, #20
 8004626:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	461a      	mov	r2, r3
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	; 0x28
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_DAC_ConfigChannel+0x1e>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e12a      	b.n	80048f4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	795b      	ldrb	r3, [r3, #5]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_DAC_ConfigChannel+0x2e>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e124      	b.n	80048f4 <HAL_DAC_ConfigChannel+0x278>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2202      	movs	r2, #2
 80046b4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d17a      	bne.n	80047b4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80046be:	f7fe f8ad 	bl	800281c <HAL_GetTick>
 80046c2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d13d      	bne.n	8004746 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80046ca:	e018      	b.n	80046fe <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80046cc:	f7fe f8a6 	bl	800281c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d911      	bls.n	80046fe <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e0:	4b86      	ldr	r3, [pc, #536]	; (80048fc <HAL_DAC_ConfigChannel+0x280>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f043 0208 	orr.w	r2, r3, #8
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2203      	movs	r2, #3
 80046f8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e0fa      	b.n	80048f4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004704:	4b7d      	ldr	r3, [pc, #500]	; (80048fc <HAL_DAC_ConfigChannel+0x280>)
 8004706:	4013      	ands	r3, r2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1df      	bne.n	80046cc <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	6992      	ldr	r2, [r2, #24]
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
 8004716:	e020      	b.n	800475a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004718:	f7fe f880 	bl	800281c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d90f      	bls.n	8004746 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472c:	2b00      	cmp	r3, #0
 800472e:	da0a      	bge.n	8004746 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f043 0208 	orr.w	r2, r3, #8
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2203      	movs	r2, #3
 8004740:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e0d6      	b.n	80048f4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474c:	2b00      	cmp	r3, #0
 800474e:	dbe3      	blt.n	8004718 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	6992      	ldr	r2, [r2, #24]
 8004758:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800476a:	fa01 f303 	lsl.w	r3, r1, r3
 800476e:	43db      	mvns	r3, r3
 8004770:	ea02 0103 	and.w	r1, r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	409a      	lsls	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	21ff      	movs	r1, #255	; 0xff
 8004796:	fa01 f303 	lsl.w	r3, r1, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	ea02 0103 	and.w	r1, r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6a1a      	ldr	r2, [r3, #32]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	409a      	lsls	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d11d      	bne.n	80047f8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	221f      	movs	r2, #31
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2207      	movs	r2, #7
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4013      	ands	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d102      	bne.n	8004822 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800481c:	2300      	movs	r3, #0
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
 8004820:	e00f      	b.n	8004842 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d102      	bne.n	8004830 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800482a:	2301      	movs	r3, #1
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
 800482e:	e008      	b.n	8004842 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d102      	bne.n	800483e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004838:	2301      	movs	r3, #1
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
 800483c:	e001      	b.n	8004842 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800483e:	2300      	movs	r3, #0
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	4313      	orrs	r3, r2
 800484c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	4313      	orrs	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6819      	ldr	r1, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43da      	mvns	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	400a      	ands	r2, r1
 8004888:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	f640 72fe 	movw	r2, #4094	; 0xffe
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4313      	orrs	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6819      	ldr	r1, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	22c0      	movs	r2, #192	; 0xc0
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43da      	mvns	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	400a      	ands	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80048f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3728      	adds	r7, #40	; 0x28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20008000 	.word	0x20008000

08004900 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7ff fe95 	bl	800463e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	711a      	strb	r2, [r3, #4]
}
 800491a:	bf00      	nop
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff fe8e 	bl	8004652 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f043 0204 	orr.w	r2, r3, #4
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f7ff fe84 	bl	8004666 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	711a      	strb	r2, [r3, #4]
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7ff ffd8 	bl	800496c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	711a      	strb	r2, [r3, #4]
}
 80049c2:	bf00      	nop
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f7ff ffd1 	bl	8004980 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f043 0204 	orr.w	r2, r3, #4
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f7ff ffc7 	bl	8004994 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	711a      	strb	r2, [r3, #4]
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004a1c:	f7fd fefe 	bl	800281c <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e316      	b.n	800505a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a66      	ldr	r2, [pc, #408]	; (8004bcc <HAL_DMA_Init+0x1b8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d04a      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a65      	ldr	r2, [pc, #404]	; (8004bd0 <HAL_DMA_Init+0x1bc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d045      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a63      	ldr	r2, [pc, #396]	; (8004bd4 <HAL_DMA_Init+0x1c0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d040      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a62      	ldr	r2, [pc, #392]	; (8004bd8 <HAL_DMA_Init+0x1c4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d03b      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a60      	ldr	r2, [pc, #384]	; (8004bdc <HAL_DMA_Init+0x1c8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d036      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a5f      	ldr	r2, [pc, #380]	; (8004be0 <HAL_DMA_Init+0x1cc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d031      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a5d      	ldr	r2, [pc, #372]	; (8004be4 <HAL_DMA_Init+0x1d0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d02c      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a5c      	ldr	r2, [pc, #368]	; (8004be8 <HAL_DMA_Init+0x1d4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d027      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a5a      	ldr	r2, [pc, #360]	; (8004bec <HAL_DMA_Init+0x1d8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d022      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a59      	ldr	r2, [pc, #356]	; (8004bf0 <HAL_DMA_Init+0x1dc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d01d      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a57      	ldr	r2, [pc, #348]	; (8004bf4 <HAL_DMA_Init+0x1e0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d018      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a56      	ldr	r2, [pc, #344]	; (8004bf8 <HAL_DMA_Init+0x1e4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d013      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a54      	ldr	r2, [pc, #336]	; (8004bfc <HAL_DMA_Init+0x1e8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00e      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a53      	ldr	r2, [pc, #332]	; (8004c00 <HAL_DMA_Init+0x1ec>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d009      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a51      	ldr	r2, [pc, #324]	; (8004c04 <HAL_DMA_Init+0x1f0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <HAL_DMA_Init+0xb8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a50      	ldr	r2, [pc, #320]	; (8004c08 <HAL_DMA_Init+0x1f4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d101      	bne.n	8004ad0 <HAL_DMA_Init+0xbc>
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <HAL_DMA_Init+0xbe>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 813b 	beq.w	8004d4e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a37      	ldr	r2, [pc, #220]	; (8004bcc <HAL_DMA_Init+0x1b8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d04a      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a36      	ldr	r2, [pc, #216]	; (8004bd0 <HAL_DMA_Init+0x1bc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d045      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a34      	ldr	r2, [pc, #208]	; (8004bd4 <HAL_DMA_Init+0x1c0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d040      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a33      	ldr	r2, [pc, #204]	; (8004bd8 <HAL_DMA_Init+0x1c4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d03b      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a31      	ldr	r2, [pc, #196]	; (8004bdc <HAL_DMA_Init+0x1c8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d036      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a30      	ldr	r2, [pc, #192]	; (8004be0 <HAL_DMA_Init+0x1cc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d031      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a2e      	ldr	r2, [pc, #184]	; (8004be4 <HAL_DMA_Init+0x1d0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d02c      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a2d      	ldr	r2, [pc, #180]	; (8004be8 <HAL_DMA_Init+0x1d4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d027      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a2b      	ldr	r2, [pc, #172]	; (8004bec <HAL_DMA_Init+0x1d8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d022      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2a      	ldr	r2, [pc, #168]	; (8004bf0 <HAL_DMA_Init+0x1dc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d01d      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a28      	ldr	r2, [pc, #160]	; (8004bf4 <HAL_DMA_Init+0x1e0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d018      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a27      	ldr	r2, [pc, #156]	; (8004bf8 <HAL_DMA_Init+0x1e4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d013      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a25      	ldr	r2, [pc, #148]	; (8004bfc <HAL_DMA_Init+0x1e8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00e      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a24      	ldr	r2, [pc, #144]	; (8004c00 <HAL_DMA_Init+0x1ec>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d009      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a22      	ldr	r2, [pc, #136]	; (8004c04 <HAL_DMA_Init+0x1f0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d004      	beq.n	8004b88 <HAL_DMA_Init+0x174>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a21      	ldr	r2, [pc, #132]	; (8004c08 <HAL_DMA_Init+0x1f4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d108      	bne.n	8004b9a <HAL_DMA_Init+0x186>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0201 	bic.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e007      	b.n	8004baa <HAL_DMA_Init+0x196>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0201 	bic.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004baa:	e02f      	b.n	8004c0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bac:	f7fd fe36 	bl	800281c <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b05      	cmp	r3, #5
 8004bb8:	d928      	bls.n	8004c0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2203      	movs	r2, #3
 8004bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e246      	b.n	800505a <HAL_DMA_Init+0x646>
 8004bcc:	40020010 	.word	0x40020010
 8004bd0:	40020028 	.word	0x40020028
 8004bd4:	40020040 	.word	0x40020040
 8004bd8:	40020058 	.word	0x40020058
 8004bdc:	40020070 	.word	0x40020070
 8004be0:	40020088 	.word	0x40020088
 8004be4:	400200a0 	.word	0x400200a0
 8004be8:	400200b8 	.word	0x400200b8
 8004bec:	40020410 	.word	0x40020410
 8004bf0:	40020428 	.word	0x40020428
 8004bf4:	40020440 	.word	0x40020440
 8004bf8:	40020458 	.word	0x40020458
 8004bfc:	40020470 	.word	0x40020470
 8004c00:	40020488 	.word	0x40020488
 8004c04:	400204a0 	.word	0x400204a0
 8004c08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1c8      	bne.n	8004bac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4b83      	ldr	r3, [pc, #524]	; (8004e34 <HAL_DMA_Init+0x420>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d107      	bne.n	8004c70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004c70:	4b71      	ldr	r3, [pc, #452]	; (8004e38 <HAL_DMA_Init+0x424>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b71      	ldr	r3, [pc, #452]	; (8004e3c <HAL_DMA_Init+0x428>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c7c:	d328      	bcc.n	8004cd0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b28      	cmp	r3, #40	; 0x28
 8004c84:	d903      	bls.n	8004c8e <HAL_DMA_Init+0x27a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c8c:	d917      	bls.n	8004cbe <HAL_DMA_Init+0x2aa>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b3e      	cmp	r3, #62	; 0x3e
 8004c94:	d903      	bls.n	8004c9e <HAL_DMA_Init+0x28a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b42      	cmp	r3, #66	; 0x42
 8004c9c:	d90f      	bls.n	8004cbe <HAL_DMA_Init+0x2aa>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b46      	cmp	r3, #70	; 0x46
 8004ca4:	d903      	bls.n	8004cae <HAL_DMA_Init+0x29a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b48      	cmp	r3, #72	; 0x48
 8004cac:	d907      	bls.n	8004cbe <HAL_DMA_Init+0x2aa>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b4e      	cmp	r3, #78	; 0x4e
 8004cb4:	d905      	bls.n	8004cc2 <HAL_DMA_Init+0x2ae>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b52      	cmp	r3, #82	; 0x52
 8004cbc:	d801      	bhi.n	8004cc2 <HAL_DMA_Init+0x2ae>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <HAL_DMA_Init+0x2b0>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0307 	bic.w	r3, r3, #7
 8004ce6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d117      	bne.n	8004d2a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00e      	beq.n	8004d2a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f002 fb33 	bl	8007378 <DMA_CheckFifoParam>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2240      	movs	r2, #64	; 0x40
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e197      	b.n	800505a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f002 fa6e 	bl	8007214 <DMA_CalcBaseAndBitshift>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	223f      	movs	r2, #63	; 0x3f
 8004d46:	409a      	lsls	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]
 8004d4c:	e0cd      	b.n	8004eea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a3b      	ldr	r2, [pc, #236]	; (8004e40 <HAL_DMA_Init+0x42c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d022      	beq.n	8004d9e <HAL_DMA_Init+0x38a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a39      	ldr	r2, [pc, #228]	; (8004e44 <HAL_DMA_Init+0x430>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d01d      	beq.n	8004d9e <HAL_DMA_Init+0x38a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a38      	ldr	r2, [pc, #224]	; (8004e48 <HAL_DMA_Init+0x434>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d018      	beq.n	8004d9e <HAL_DMA_Init+0x38a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a36      	ldr	r2, [pc, #216]	; (8004e4c <HAL_DMA_Init+0x438>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d013      	beq.n	8004d9e <HAL_DMA_Init+0x38a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a35      	ldr	r2, [pc, #212]	; (8004e50 <HAL_DMA_Init+0x43c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00e      	beq.n	8004d9e <HAL_DMA_Init+0x38a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a33      	ldr	r2, [pc, #204]	; (8004e54 <HAL_DMA_Init+0x440>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d009      	beq.n	8004d9e <HAL_DMA_Init+0x38a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a32      	ldr	r2, [pc, #200]	; (8004e58 <HAL_DMA_Init+0x444>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d004      	beq.n	8004d9e <HAL_DMA_Init+0x38a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a30      	ldr	r2, [pc, #192]	; (8004e5c <HAL_DMA_Init+0x448>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d101      	bne.n	8004da2 <HAL_DMA_Init+0x38e>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <HAL_DMA_Init+0x390>
 8004da2:	2300      	movs	r3, #0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8097 	beq.w	8004ed8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a24      	ldr	r2, [pc, #144]	; (8004e40 <HAL_DMA_Init+0x42c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d021      	beq.n	8004df8 <HAL_DMA_Init+0x3e4>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a22      	ldr	r2, [pc, #136]	; (8004e44 <HAL_DMA_Init+0x430>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01c      	beq.n	8004df8 <HAL_DMA_Init+0x3e4>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a21      	ldr	r2, [pc, #132]	; (8004e48 <HAL_DMA_Init+0x434>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d017      	beq.n	8004df8 <HAL_DMA_Init+0x3e4>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1f      	ldr	r2, [pc, #124]	; (8004e4c <HAL_DMA_Init+0x438>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d012      	beq.n	8004df8 <HAL_DMA_Init+0x3e4>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1e      	ldr	r2, [pc, #120]	; (8004e50 <HAL_DMA_Init+0x43c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00d      	beq.n	8004df8 <HAL_DMA_Init+0x3e4>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <HAL_DMA_Init+0x440>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d008      	beq.n	8004df8 <HAL_DMA_Init+0x3e4>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <HAL_DMA_Init+0x444>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d003      	beq.n	8004df8 <HAL_DMA_Init+0x3e4>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a19      	ldr	r2, [pc, #100]	; (8004e5c <HAL_DMA_Init+0x448>)
 8004df6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4b13      	ldr	r3, [pc, #76]	; (8004e60 <HAL_DMA_Init+0x44c>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d021      	beq.n	8004e64 <HAL_DMA_Init+0x450>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b80      	cmp	r3, #128	; 0x80
 8004e26:	d102      	bne.n	8004e2e <HAL_DMA_Init+0x41a>
 8004e28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e2c:	e01b      	b.n	8004e66 <HAL_DMA_Init+0x452>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e019      	b.n	8004e66 <HAL_DMA_Init+0x452>
 8004e32:	bf00      	nop
 8004e34:	fe10803f 	.word	0xfe10803f
 8004e38:	5c001000 	.word	0x5c001000
 8004e3c:	ffff0000 	.word	0xffff0000
 8004e40:	58025408 	.word	0x58025408
 8004e44:	5802541c 	.word	0x5802541c
 8004e48:	58025430 	.word	0x58025430
 8004e4c:	58025444 	.word	0x58025444
 8004e50:	58025458 	.word	0x58025458
 8004e54:	5802546c 	.word	0x5802546c
 8004e58:	58025480 	.word	0x58025480
 8004e5c:	58025494 	.word	0x58025494
 8004e60:	fffe000f 	.word	0xfffe000f
 8004e64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	68d2      	ldr	r2, [r2, #12]
 8004e6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4b6e      	ldr	r3, [pc, #440]	; (8005064 <HAL_DMA_Init+0x650>)
 8004eac:	4413      	add	r3, r2
 8004eae:	4a6e      	ldr	r2, [pc, #440]	; (8005068 <HAL_DMA_Init+0x654>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	091b      	lsrs	r3, r3, #4
 8004eb6:	009a      	lsls	r2, r3, #2
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f002 f9a9 	bl	8007214 <DMA_CalcBaseAndBitshift>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eca:	f003 031f 	and.w	r3, r3, #31
 8004ece:	2201      	movs	r2, #1
 8004ed0:	409a      	lsls	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	e008      	b.n	8004eea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2240      	movs	r2, #64	; 0x40
 8004edc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e0b7      	b.n	800505a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a5f      	ldr	r2, [pc, #380]	; (800506c <HAL_DMA_Init+0x658>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d072      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a5d      	ldr	r2, [pc, #372]	; (8005070 <HAL_DMA_Init+0x65c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d06d      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a5c      	ldr	r2, [pc, #368]	; (8005074 <HAL_DMA_Init+0x660>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d068      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a5a      	ldr	r2, [pc, #360]	; (8005078 <HAL_DMA_Init+0x664>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d063      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a59      	ldr	r2, [pc, #356]	; (800507c <HAL_DMA_Init+0x668>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d05e      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a57      	ldr	r2, [pc, #348]	; (8005080 <HAL_DMA_Init+0x66c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d059      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a56      	ldr	r2, [pc, #344]	; (8005084 <HAL_DMA_Init+0x670>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d054      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a54      	ldr	r2, [pc, #336]	; (8005088 <HAL_DMA_Init+0x674>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d04f      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a53      	ldr	r2, [pc, #332]	; (800508c <HAL_DMA_Init+0x678>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d04a      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a51      	ldr	r2, [pc, #324]	; (8005090 <HAL_DMA_Init+0x67c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d045      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a50      	ldr	r2, [pc, #320]	; (8005094 <HAL_DMA_Init+0x680>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d040      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a4e      	ldr	r2, [pc, #312]	; (8005098 <HAL_DMA_Init+0x684>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d03b      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a4d      	ldr	r2, [pc, #308]	; (800509c <HAL_DMA_Init+0x688>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d036      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a4b      	ldr	r2, [pc, #300]	; (80050a0 <HAL_DMA_Init+0x68c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d031      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a4a      	ldr	r2, [pc, #296]	; (80050a4 <HAL_DMA_Init+0x690>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d02c      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a48      	ldr	r2, [pc, #288]	; (80050a8 <HAL_DMA_Init+0x694>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d027      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a47      	ldr	r2, [pc, #284]	; (80050ac <HAL_DMA_Init+0x698>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d022      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a45      	ldr	r2, [pc, #276]	; (80050b0 <HAL_DMA_Init+0x69c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01d      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a44      	ldr	r2, [pc, #272]	; (80050b4 <HAL_DMA_Init+0x6a0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d018      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a42      	ldr	r2, [pc, #264]	; (80050b8 <HAL_DMA_Init+0x6a4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a41      	ldr	r2, [pc, #260]	; (80050bc <HAL_DMA_Init+0x6a8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00e      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a3f      	ldr	r2, [pc, #252]	; (80050c0 <HAL_DMA_Init+0x6ac>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d009      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a3e      	ldr	r2, [pc, #248]	; (80050c4 <HAL_DMA_Init+0x6b0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d004      	beq.n	8004fda <HAL_DMA_Init+0x5c6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a3c      	ldr	r2, [pc, #240]	; (80050c8 <HAL_DMA_Init+0x6b4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <HAL_DMA_Init+0x5ca>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <HAL_DMA_Init+0x5cc>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d032      	beq.n	800504a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f002 fa43 	bl	8007470 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d102      	bne.n	8004ff8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800500c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d010      	beq.n	8005038 <HAL_DMA_Init+0x624>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b08      	cmp	r3, #8
 800501c:	d80c      	bhi.n	8005038 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f002 fac0 	bl	80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	e008      	b.n	800504a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	a7fdabf8 	.word	0xa7fdabf8
 8005068:	cccccccd 	.word	0xcccccccd
 800506c:	40020010 	.word	0x40020010
 8005070:	40020028 	.word	0x40020028
 8005074:	40020040 	.word	0x40020040
 8005078:	40020058 	.word	0x40020058
 800507c:	40020070 	.word	0x40020070
 8005080:	40020088 	.word	0x40020088
 8005084:	400200a0 	.word	0x400200a0
 8005088:	400200b8 	.word	0x400200b8
 800508c:	40020410 	.word	0x40020410
 8005090:	40020428 	.word	0x40020428
 8005094:	40020440 	.word	0x40020440
 8005098:	40020458 	.word	0x40020458
 800509c:	40020470 	.word	0x40020470
 80050a0:	40020488 	.word	0x40020488
 80050a4:	400204a0 	.word	0x400204a0
 80050a8:	400204b8 	.word	0x400204b8
 80050ac:	58025408 	.word	0x58025408
 80050b0:	5802541c 	.word	0x5802541c
 80050b4:	58025430 	.word	0x58025430
 80050b8:	58025444 	.word	0x58025444
 80050bc:	58025458 	.word	0x58025458
 80050c0:	5802546c 	.word	0x5802546c
 80050c4:	58025480 	.word	0x58025480
 80050c8:	58025494 	.word	0x58025494

080050cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e226      	b.n	8005536 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_DMA_Start_IT+0x2a>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e21f      	b.n	8005536 <HAL_DMA_Start_IT+0x46a>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b01      	cmp	r3, #1
 8005108:	f040 820a 	bne.w	8005520 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a68      	ldr	r2, [pc, #416]	; (80052c0 <HAL_DMA_Start_IT+0x1f4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d04a      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a66      	ldr	r2, [pc, #408]	; (80052c4 <HAL_DMA_Start_IT+0x1f8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d045      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a65      	ldr	r2, [pc, #404]	; (80052c8 <HAL_DMA_Start_IT+0x1fc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d040      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a63      	ldr	r2, [pc, #396]	; (80052cc <HAL_DMA_Start_IT+0x200>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d03b      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a62      	ldr	r2, [pc, #392]	; (80052d0 <HAL_DMA_Start_IT+0x204>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d036      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a60      	ldr	r2, [pc, #384]	; (80052d4 <HAL_DMA_Start_IT+0x208>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d031      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a5f      	ldr	r2, [pc, #380]	; (80052d8 <HAL_DMA_Start_IT+0x20c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d02c      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a5d      	ldr	r2, [pc, #372]	; (80052dc <HAL_DMA_Start_IT+0x210>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d027      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a5c      	ldr	r2, [pc, #368]	; (80052e0 <HAL_DMA_Start_IT+0x214>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d022      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a5a      	ldr	r2, [pc, #360]	; (80052e4 <HAL_DMA_Start_IT+0x218>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01d      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a59      	ldr	r2, [pc, #356]	; (80052e8 <HAL_DMA_Start_IT+0x21c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d018      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a57      	ldr	r2, [pc, #348]	; (80052ec <HAL_DMA_Start_IT+0x220>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a56      	ldr	r2, [pc, #344]	; (80052f0 <HAL_DMA_Start_IT+0x224>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00e      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a54      	ldr	r2, [pc, #336]	; (80052f4 <HAL_DMA_Start_IT+0x228>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d009      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a53      	ldr	r2, [pc, #332]	; (80052f8 <HAL_DMA_Start_IT+0x22c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a51      	ldr	r2, [pc, #324]	; (80052fc <HAL_DMA_Start_IT+0x230>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d108      	bne.n	80051cc <HAL_DMA_Start_IT+0x100>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0201 	bic.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e007      	b.n	80051dc <HAL_DMA_Start_IT+0x110>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f001 fe6a 	bl	8006ebc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a34      	ldr	r2, [pc, #208]	; (80052c0 <HAL_DMA_Start_IT+0x1f4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d04a      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a33      	ldr	r2, [pc, #204]	; (80052c4 <HAL_DMA_Start_IT+0x1f8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d045      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a31      	ldr	r2, [pc, #196]	; (80052c8 <HAL_DMA_Start_IT+0x1fc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d040      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a30      	ldr	r2, [pc, #192]	; (80052cc <HAL_DMA_Start_IT+0x200>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d03b      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a2e      	ldr	r2, [pc, #184]	; (80052d0 <HAL_DMA_Start_IT+0x204>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d036      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a2d      	ldr	r2, [pc, #180]	; (80052d4 <HAL_DMA_Start_IT+0x208>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d031      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a2b      	ldr	r2, [pc, #172]	; (80052d8 <HAL_DMA_Start_IT+0x20c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d02c      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <HAL_DMA_Start_IT+0x210>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d027      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a28      	ldr	r2, [pc, #160]	; (80052e0 <HAL_DMA_Start_IT+0x214>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d022      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a27      	ldr	r2, [pc, #156]	; (80052e4 <HAL_DMA_Start_IT+0x218>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d01d      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a25      	ldr	r2, [pc, #148]	; (80052e8 <HAL_DMA_Start_IT+0x21c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d018      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a24      	ldr	r2, [pc, #144]	; (80052ec <HAL_DMA_Start_IT+0x220>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d013      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a22      	ldr	r2, [pc, #136]	; (80052f0 <HAL_DMA_Start_IT+0x224>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00e      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <HAL_DMA_Start_IT+0x228>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d009      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1f      	ldr	r2, [pc, #124]	; (80052f8 <HAL_DMA_Start_IT+0x22c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d004      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1e      	ldr	r2, [pc, #120]	; (80052fc <HAL_DMA_Start_IT+0x230>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d101      	bne.n	800528c <HAL_DMA_Start_IT+0x1c0>
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <HAL_DMA_Start_IT+0x1c2>
 800528c:	2300      	movs	r3, #0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d036      	beq.n	8005300 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f023 021e 	bic.w	r2, r3, #30
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0216 	orr.w	r2, r2, #22
 80052a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d03e      	beq.n	800532c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0208 	orr.w	r2, r2, #8
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e035      	b.n	800532c <HAL_DMA_Start_IT+0x260>
 80052c0:	40020010 	.word	0x40020010
 80052c4:	40020028 	.word	0x40020028
 80052c8:	40020040 	.word	0x40020040
 80052cc:	40020058 	.word	0x40020058
 80052d0:	40020070 	.word	0x40020070
 80052d4:	40020088 	.word	0x40020088
 80052d8:	400200a0 	.word	0x400200a0
 80052dc:	400200b8 	.word	0x400200b8
 80052e0:	40020410 	.word	0x40020410
 80052e4:	40020428 	.word	0x40020428
 80052e8:	40020440 	.word	0x40020440
 80052ec:	40020458 	.word	0x40020458
 80052f0:	40020470 	.word	0x40020470
 80052f4:	40020488 	.word	0x40020488
 80052f8:	400204a0 	.word	0x400204a0
 80052fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f023 020e 	bic.w	r2, r3, #14
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 020a 	orr.w	r2, r2, #10
 8005312:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0204 	orr.w	r2, r2, #4
 800532a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a83      	ldr	r2, [pc, #524]	; (8005540 <HAL_DMA_Start_IT+0x474>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d072      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a82      	ldr	r2, [pc, #520]	; (8005544 <HAL_DMA_Start_IT+0x478>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d06d      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a80      	ldr	r2, [pc, #512]	; (8005548 <HAL_DMA_Start_IT+0x47c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d068      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a7f      	ldr	r2, [pc, #508]	; (800554c <HAL_DMA_Start_IT+0x480>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d063      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a7d      	ldr	r2, [pc, #500]	; (8005550 <HAL_DMA_Start_IT+0x484>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d05e      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a7c      	ldr	r2, [pc, #496]	; (8005554 <HAL_DMA_Start_IT+0x488>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d059      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a7a      	ldr	r2, [pc, #488]	; (8005558 <HAL_DMA_Start_IT+0x48c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d054      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a79      	ldr	r2, [pc, #484]	; (800555c <HAL_DMA_Start_IT+0x490>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d04f      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a77      	ldr	r2, [pc, #476]	; (8005560 <HAL_DMA_Start_IT+0x494>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d04a      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a76      	ldr	r2, [pc, #472]	; (8005564 <HAL_DMA_Start_IT+0x498>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d045      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a74      	ldr	r2, [pc, #464]	; (8005568 <HAL_DMA_Start_IT+0x49c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d040      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a73      	ldr	r2, [pc, #460]	; (800556c <HAL_DMA_Start_IT+0x4a0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d03b      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a71      	ldr	r2, [pc, #452]	; (8005570 <HAL_DMA_Start_IT+0x4a4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d036      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a70      	ldr	r2, [pc, #448]	; (8005574 <HAL_DMA_Start_IT+0x4a8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d031      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a6e      	ldr	r2, [pc, #440]	; (8005578 <HAL_DMA_Start_IT+0x4ac>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d02c      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a6d      	ldr	r2, [pc, #436]	; (800557c <HAL_DMA_Start_IT+0x4b0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d027      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a6b      	ldr	r2, [pc, #428]	; (8005580 <HAL_DMA_Start_IT+0x4b4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d022      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a6a      	ldr	r2, [pc, #424]	; (8005584 <HAL_DMA_Start_IT+0x4b8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d01d      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a68      	ldr	r2, [pc, #416]	; (8005588 <HAL_DMA_Start_IT+0x4bc>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d018      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a67      	ldr	r2, [pc, #412]	; (800558c <HAL_DMA_Start_IT+0x4c0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d013      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a65      	ldr	r2, [pc, #404]	; (8005590 <HAL_DMA_Start_IT+0x4c4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00e      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a64      	ldr	r2, [pc, #400]	; (8005594 <HAL_DMA_Start_IT+0x4c8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d009      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a62      	ldr	r2, [pc, #392]	; (8005598 <HAL_DMA_Start_IT+0x4cc>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d004      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a61      	ldr	r2, [pc, #388]	; (800559c <HAL_DMA_Start_IT+0x4d0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d101      	bne.n	8005420 <HAL_DMA_Start_IT+0x354>
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <HAL_DMA_Start_IT+0x356>
 8005420:	2300      	movs	r3, #0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01a      	beq.n	800545c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d007      	beq.n	8005444 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800543e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005442:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800545a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a37      	ldr	r2, [pc, #220]	; (8005540 <HAL_DMA_Start_IT+0x474>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d04a      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a36      	ldr	r2, [pc, #216]	; (8005544 <HAL_DMA_Start_IT+0x478>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d045      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a34      	ldr	r2, [pc, #208]	; (8005548 <HAL_DMA_Start_IT+0x47c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d040      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a33      	ldr	r2, [pc, #204]	; (800554c <HAL_DMA_Start_IT+0x480>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d03b      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a31      	ldr	r2, [pc, #196]	; (8005550 <HAL_DMA_Start_IT+0x484>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d036      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a30      	ldr	r2, [pc, #192]	; (8005554 <HAL_DMA_Start_IT+0x488>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d031      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a2e      	ldr	r2, [pc, #184]	; (8005558 <HAL_DMA_Start_IT+0x48c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d02c      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a2d      	ldr	r2, [pc, #180]	; (800555c <HAL_DMA_Start_IT+0x490>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d027      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a2b      	ldr	r2, [pc, #172]	; (8005560 <HAL_DMA_Start_IT+0x494>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d022      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a2a      	ldr	r2, [pc, #168]	; (8005564 <HAL_DMA_Start_IT+0x498>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d01d      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a28      	ldr	r2, [pc, #160]	; (8005568 <HAL_DMA_Start_IT+0x49c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d018      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a27      	ldr	r2, [pc, #156]	; (800556c <HAL_DMA_Start_IT+0x4a0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d013      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a25      	ldr	r2, [pc, #148]	; (8005570 <HAL_DMA_Start_IT+0x4a4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00e      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a24      	ldr	r2, [pc, #144]	; (8005574 <HAL_DMA_Start_IT+0x4a8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d009      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a22      	ldr	r2, [pc, #136]	; (8005578 <HAL_DMA_Start_IT+0x4ac>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d004      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a21      	ldr	r2, [pc, #132]	; (800557c <HAL_DMA_Start_IT+0x4b0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d108      	bne.n	800550e <HAL_DMA_Start_IT+0x442>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	e012      	b.n	8005534 <HAL_DMA_Start_IT+0x468>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0201 	orr.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e009      	b.n	8005534 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005526:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005534:	7dfb      	ldrb	r3, [r7, #23]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40020010 	.word	0x40020010
 8005544:	40020028 	.word	0x40020028
 8005548:	40020040 	.word	0x40020040
 800554c:	40020058 	.word	0x40020058
 8005550:	40020070 	.word	0x40020070
 8005554:	40020088 	.word	0x40020088
 8005558:	400200a0 	.word	0x400200a0
 800555c:	400200b8 	.word	0x400200b8
 8005560:	40020410 	.word	0x40020410
 8005564:	40020428 	.word	0x40020428
 8005568:	40020440 	.word	0x40020440
 800556c:	40020458 	.word	0x40020458
 8005570:	40020470 	.word	0x40020470
 8005574:	40020488 	.word	0x40020488
 8005578:	400204a0 	.word	0x400204a0
 800557c:	400204b8 	.word	0x400204b8
 8005580:	58025408 	.word	0x58025408
 8005584:	5802541c 	.word	0x5802541c
 8005588:	58025430 	.word	0x58025430
 800558c:	58025444 	.word	0x58025444
 8005590:	58025458 	.word	0x58025458
 8005594:	5802546c 	.word	0x5802546c
 8005598:	58025480 	.word	0x58025480
 800559c:	58025494 	.word	0x58025494

080055a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80055a8:	f7fd f938 	bl	800281c <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e2dc      	b.n	8005b72 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d008      	beq.n	80055d6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2280      	movs	r2, #128	; 0x80
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e2cd      	b.n	8005b72 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a76      	ldr	r2, [pc, #472]	; (80057b4 <HAL_DMA_Abort+0x214>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d04a      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a74      	ldr	r2, [pc, #464]	; (80057b8 <HAL_DMA_Abort+0x218>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d045      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a73      	ldr	r2, [pc, #460]	; (80057bc <HAL_DMA_Abort+0x21c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d040      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a71      	ldr	r2, [pc, #452]	; (80057c0 <HAL_DMA_Abort+0x220>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d03b      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a70      	ldr	r2, [pc, #448]	; (80057c4 <HAL_DMA_Abort+0x224>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d036      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a6e      	ldr	r2, [pc, #440]	; (80057c8 <HAL_DMA_Abort+0x228>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d031      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a6d      	ldr	r2, [pc, #436]	; (80057cc <HAL_DMA_Abort+0x22c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d02c      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a6b      	ldr	r2, [pc, #428]	; (80057d0 <HAL_DMA_Abort+0x230>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d027      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a6a      	ldr	r2, [pc, #424]	; (80057d4 <HAL_DMA_Abort+0x234>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d022      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a68      	ldr	r2, [pc, #416]	; (80057d8 <HAL_DMA_Abort+0x238>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d01d      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a67      	ldr	r2, [pc, #412]	; (80057dc <HAL_DMA_Abort+0x23c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d018      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a65      	ldr	r2, [pc, #404]	; (80057e0 <HAL_DMA_Abort+0x240>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d013      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a64      	ldr	r2, [pc, #400]	; (80057e4 <HAL_DMA_Abort+0x244>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00e      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a62      	ldr	r2, [pc, #392]	; (80057e8 <HAL_DMA_Abort+0x248>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d009      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a61      	ldr	r2, [pc, #388]	; (80057ec <HAL_DMA_Abort+0x24c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d004      	beq.n	8005676 <HAL_DMA_Abort+0xd6>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a5f      	ldr	r2, [pc, #380]	; (80057f0 <HAL_DMA_Abort+0x250>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d101      	bne.n	800567a <HAL_DMA_Abort+0xda>
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <HAL_DMA_Abort+0xdc>
 800567a:	2300      	movs	r3, #0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d013      	beq.n	80056a8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 021e 	bic.w	r2, r2, #30
 800568e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695a      	ldr	r2, [r3, #20]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800569e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	e00a      	b.n	80056be <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 020e 	bic.w	r2, r2, #14
 80056b6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a3c      	ldr	r2, [pc, #240]	; (80057b4 <HAL_DMA_Abort+0x214>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d072      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3a      	ldr	r2, [pc, #232]	; (80057b8 <HAL_DMA_Abort+0x218>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d06d      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a39      	ldr	r2, [pc, #228]	; (80057bc <HAL_DMA_Abort+0x21c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d068      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a37      	ldr	r2, [pc, #220]	; (80057c0 <HAL_DMA_Abort+0x220>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d063      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a36      	ldr	r2, [pc, #216]	; (80057c4 <HAL_DMA_Abort+0x224>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d05e      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a34      	ldr	r2, [pc, #208]	; (80057c8 <HAL_DMA_Abort+0x228>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d059      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a33      	ldr	r2, [pc, #204]	; (80057cc <HAL_DMA_Abort+0x22c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d054      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a31      	ldr	r2, [pc, #196]	; (80057d0 <HAL_DMA_Abort+0x230>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d04f      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a30      	ldr	r2, [pc, #192]	; (80057d4 <HAL_DMA_Abort+0x234>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d04a      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a2e      	ldr	r2, [pc, #184]	; (80057d8 <HAL_DMA_Abort+0x238>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d045      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a2d      	ldr	r2, [pc, #180]	; (80057dc <HAL_DMA_Abort+0x23c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d040      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a2b      	ldr	r2, [pc, #172]	; (80057e0 <HAL_DMA_Abort+0x240>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d03b      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a2a      	ldr	r2, [pc, #168]	; (80057e4 <HAL_DMA_Abort+0x244>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d036      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a28      	ldr	r2, [pc, #160]	; (80057e8 <HAL_DMA_Abort+0x248>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d031      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a27      	ldr	r2, [pc, #156]	; (80057ec <HAL_DMA_Abort+0x24c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d02c      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a25      	ldr	r2, [pc, #148]	; (80057f0 <HAL_DMA_Abort+0x250>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d027      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a24      	ldr	r2, [pc, #144]	; (80057f4 <HAL_DMA_Abort+0x254>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d022      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a22      	ldr	r2, [pc, #136]	; (80057f8 <HAL_DMA_Abort+0x258>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d01d      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a21      	ldr	r2, [pc, #132]	; (80057fc <HAL_DMA_Abort+0x25c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d018      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <HAL_DMA_Abort+0x260>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d013      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1e      	ldr	r2, [pc, #120]	; (8005804 <HAL_DMA_Abort+0x264>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00e      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <HAL_DMA_Abort+0x268>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d009      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a1b      	ldr	r2, [pc, #108]	; (800580c <HAL_DMA_Abort+0x26c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d004      	beq.n	80057ae <HAL_DMA_Abort+0x20e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a19      	ldr	r2, [pc, #100]	; (8005810 <HAL_DMA_Abort+0x270>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d132      	bne.n	8005814 <HAL_DMA_Abort+0x274>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e031      	b.n	8005816 <HAL_DMA_Abort+0x276>
 80057b2:	bf00      	nop
 80057b4:	40020010 	.word	0x40020010
 80057b8:	40020028 	.word	0x40020028
 80057bc:	40020040 	.word	0x40020040
 80057c0:	40020058 	.word	0x40020058
 80057c4:	40020070 	.word	0x40020070
 80057c8:	40020088 	.word	0x40020088
 80057cc:	400200a0 	.word	0x400200a0
 80057d0:	400200b8 	.word	0x400200b8
 80057d4:	40020410 	.word	0x40020410
 80057d8:	40020428 	.word	0x40020428
 80057dc:	40020440 	.word	0x40020440
 80057e0:	40020458 	.word	0x40020458
 80057e4:	40020470 	.word	0x40020470
 80057e8:	40020488 	.word	0x40020488
 80057ec:	400204a0 	.word	0x400204a0
 80057f0:	400204b8 	.word	0x400204b8
 80057f4:	58025408 	.word	0x58025408
 80057f8:	5802541c 	.word	0x5802541c
 80057fc:	58025430 	.word	0x58025430
 8005800:	58025444 	.word	0x58025444
 8005804:	58025458 	.word	0x58025458
 8005808:	5802546c 	.word	0x5802546c
 800580c:	58025480 	.word	0x58025480
 8005810:	58025494 	.word	0x58025494
 8005814:	2300      	movs	r3, #0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005828:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a6d      	ldr	r2, [pc, #436]	; (80059e4 <HAL_DMA_Abort+0x444>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d04a      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a6b      	ldr	r2, [pc, #428]	; (80059e8 <HAL_DMA_Abort+0x448>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d045      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a6a      	ldr	r2, [pc, #424]	; (80059ec <HAL_DMA_Abort+0x44c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d040      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a68      	ldr	r2, [pc, #416]	; (80059f0 <HAL_DMA_Abort+0x450>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d03b      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a67      	ldr	r2, [pc, #412]	; (80059f4 <HAL_DMA_Abort+0x454>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d036      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a65      	ldr	r2, [pc, #404]	; (80059f8 <HAL_DMA_Abort+0x458>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d031      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a64      	ldr	r2, [pc, #400]	; (80059fc <HAL_DMA_Abort+0x45c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d02c      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a62      	ldr	r2, [pc, #392]	; (8005a00 <HAL_DMA_Abort+0x460>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d027      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a61      	ldr	r2, [pc, #388]	; (8005a04 <HAL_DMA_Abort+0x464>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d022      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a5f      	ldr	r2, [pc, #380]	; (8005a08 <HAL_DMA_Abort+0x468>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01d      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a5e      	ldr	r2, [pc, #376]	; (8005a0c <HAL_DMA_Abort+0x46c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d018      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a5c      	ldr	r2, [pc, #368]	; (8005a10 <HAL_DMA_Abort+0x470>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a5b      	ldr	r2, [pc, #364]	; (8005a14 <HAL_DMA_Abort+0x474>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00e      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a59      	ldr	r2, [pc, #356]	; (8005a18 <HAL_DMA_Abort+0x478>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d009      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a58      	ldr	r2, [pc, #352]	; (8005a1c <HAL_DMA_Abort+0x47c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d004      	beq.n	80058ca <HAL_DMA_Abort+0x32a>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a56      	ldr	r2, [pc, #344]	; (8005a20 <HAL_DMA_Abort+0x480>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d108      	bne.n	80058dc <HAL_DMA_Abort+0x33c>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0201 	bic.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	e007      	b.n	80058ec <HAL_DMA_Abort+0x34c>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0201 	bic.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80058ec:	e013      	b.n	8005916 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058ee:	f7fc ff95 	bl	800281c <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b05      	cmp	r3, #5
 80058fa:	d90c      	bls.n	8005916 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2203      	movs	r2, #3
 8005906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e12d      	b.n	8005b72 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e5      	bne.n	80058ee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a2f      	ldr	r2, [pc, #188]	; (80059e4 <HAL_DMA_Abort+0x444>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d04a      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a2d      	ldr	r2, [pc, #180]	; (80059e8 <HAL_DMA_Abort+0x448>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d045      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a2c      	ldr	r2, [pc, #176]	; (80059ec <HAL_DMA_Abort+0x44c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d040      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a2a      	ldr	r2, [pc, #168]	; (80059f0 <HAL_DMA_Abort+0x450>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d03b      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a29      	ldr	r2, [pc, #164]	; (80059f4 <HAL_DMA_Abort+0x454>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d036      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a27      	ldr	r2, [pc, #156]	; (80059f8 <HAL_DMA_Abort+0x458>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d031      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a26      	ldr	r2, [pc, #152]	; (80059fc <HAL_DMA_Abort+0x45c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d02c      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a24      	ldr	r2, [pc, #144]	; (8005a00 <HAL_DMA_Abort+0x460>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d027      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a23      	ldr	r2, [pc, #140]	; (8005a04 <HAL_DMA_Abort+0x464>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d022      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a21      	ldr	r2, [pc, #132]	; (8005a08 <HAL_DMA_Abort+0x468>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01d      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a20      	ldr	r2, [pc, #128]	; (8005a0c <HAL_DMA_Abort+0x46c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d018      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1e      	ldr	r2, [pc, #120]	; (8005a10 <HAL_DMA_Abort+0x470>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <HAL_DMA_Abort+0x474>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1b      	ldr	r2, [pc, #108]	; (8005a18 <HAL_DMA_Abort+0x478>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1a      	ldr	r2, [pc, #104]	; (8005a1c <HAL_DMA_Abort+0x47c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_DMA_Abort+0x422>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a18      	ldr	r2, [pc, #96]	; (8005a20 <HAL_DMA_Abort+0x480>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d101      	bne.n	80059c6 <HAL_DMA_Abort+0x426>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <HAL_DMA_Abort+0x428>
 80059c6:	2300      	movs	r3, #0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d02b      	beq.n	8005a24 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	223f      	movs	r2, #63	; 0x3f
 80059dc:	409a      	lsls	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	609a      	str	r2, [r3, #8]
 80059e2:	e02a      	b.n	8005a3a <HAL_DMA_Abort+0x49a>
 80059e4:	40020010 	.word	0x40020010
 80059e8:	40020028 	.word	0x40020028
 80059ec:	40020040 	.word	0x40020040
 80059f0:	40020058 	.word	0x40020058
 80059f4:	40020070 	.word	0x40020070
 80059f8:	40020088 	.word	0x40020088
 80059fc:	400200a0 	.word	0x400200a0
 8005a00:	400200b8 	.word	0x400200b8
 8005a04:	40020410 	.word	0x40020410
 8005a08:	40020428 	.word	0x40020428
 8005a0c:	40020440 	.word	0x40020440
 8005a10:	40020458 	.word	0x40020458
 8005a14:	40020470 	.word	0x40020470
 8005a18:	40020488 	.word	0x40020488
 8005a1c:	400204a0 	.word	0x400204a0
 8005a20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a28:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	2201      	movs	r2, #1
 8005a34:	409a      	lsls	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a4f      	ldr	r2, [pc, #316]	; (8005b7c <HAL_DMA_Abort+0x5dc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d072      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a4d      	ldr	r2, [pc, #308]	; (8005b80 <HAL_DMA_Abort+0x5e0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d06d      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a4c      	ldr	r2, [pc, #304]	; (8005b84 <HAL_DMA_Abort+0x5e4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d068      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a4a      	ldr	r2, [pc, #296]	; (8005b88 <HAL_DMA_Abort+0x5e8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d063      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a49      	ldr	r2, [pc, #292]	; (8005b8c <HAL_DMA_Abort+0x5ec>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d05e      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a47      	ldr	r2, [pc, #284]	; (8005b90 <HAL_DMA_Abort+0x5f0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d059      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a46      	ldr	r2, [pc, #280]	; (8005b94 <HAL_DMA_Abort+0x5f4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d054      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a44      	ldr	r2, [pc, #272]	; (8005b98 <HAL_DMA_Abort+0x5f8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d04f      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a43      	ldr	r2, [pc, #268]	; (8005b9c <HAL_DMA_Abort+0x5fc>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d04a      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a41      	ldr	r2, [pc, #260]	; (8005ba0 <HAL_DMA_Abort+0x600>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d045      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a40      	ldr	r2, [pc, #256]	; (8005ba4 <HAL_DMA_Abort+0x604>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d040      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a3e      	ldr	r2, [pc, #248]	; (8005ba8 <HAL_DMA_Abort+0x608>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d03b      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a3d      	ldr	r2, [pc, #244]	; (8005bac <HAL_DMA_Abort+0x60c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d036      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a3b      	ldr	r2, [pc, #236]	; (8005bb0 <HAL_DMA_Abort+0x610>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d031      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a3a      	ldr	r2, [pc, #232]	; (8005bb4 <HAL_DMA_Abort+0x614>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d02c      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a38      	ldr	r2, [pc, #224]	; (8005bb8 <HAL_DMA_Abort+0x618>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d027      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a37      	ldr	r2, [pc, #220]	; (8005bbc <HAL_DMA_Abort+0x61c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d022      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a35      	ldr	r2, [pc, #212]	; (8005bc0 <HAL_DMA_Abort+0x620>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d01d      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a34      	ldr	r2, [pc, #208]	; (8005bc4 <HAL_DMA_Abort+0x624>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d018      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a32      	ldr	r2, [pc, #200]	; (8005bc8 <HAL_DMA_Abort+0x628>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a31      	ldr	r2, [pc, #196]	; (8005bcc <HAL_DMA_Abort+0x62c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00e      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a2f      	ldr	r2, [pc, #188]	; (8005bd0 <HAL_DMA_Abort+0x630>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d009      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a2e      	ldr	r2, [pc, #184]	; (8005bd4 <HAL_DMA_Abort+0x634>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d004      	beq.n	8005b2a <HAL_DMA_Abort+0x58a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a2c      	ldr	r2, [pc, #176]	; (8005bd8 <HAL_DMA_Abort+0x638>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d101      	bne.n	8005b2e <HAL_DMA_Abort+0x58e>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e000      	b.n	8005b30 <HAL_DMA_Abort+0x590>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d015      	beq.n	8005b60 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b3c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00c      	beq.n	8005b60 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b54:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b5e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40020010 	.word	0x40020010
 8005b80:	40020028 	.word	0x40020028
 8005b84:	40020040 	.word	0x40020040
 8005b88:	40020058 	.word	0x40020058
 8005b8c:	40020070 	.word	0x40020070
 8005b90:	40020088 	.word	0x40020088
 8005b94:	400200a0 	.word	0x400200a0
 8005b98:	400200b8 	.word	0x400200b8
 8005b9c:	40020410 	.word	0x40020410
 8005ba0:	40020428 	.word	0x40020428
 8005ba4:	40020440 	.word	0x40020440
 8005ba8:	40020458 	.word	0x40020458
 8005bac:	40020470 	.word	0x40020470
 8005bb0:	40020488 	.word	0x40020488
 8005bb4:	400204a0 	.word	0x400204a0
 8005bb8:	400204b8 	.word	0x400204b8
 8005bbc:	58025408 	.word	0x58025408
 8005bc0:	5802541c 	.word	0x5802541c
 8005bc4:	58025430 	.word	0x58025430
 8005bc8:	58025444 	.word	0x58025444
 8005bcc:	58025458 	.word	0x58025458
 8005bd0:	5802546c 	.word	0x5802546c
 8005bd4:	58025480 	.word	0x58025480
 8005bd8:	58025494 	.word	0x58025494

08005bdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e237      	b.n	800605e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d004      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2280      	movs	r2, #128	; 0x80
 8005bfe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e22c      	b.n	800605e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a5c      	ldr	r2, [pc, #368]	; (8005d7c <HAL_DMA_Abort_IT+0x1a0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d04a      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a5b      	ldr	r2, [pc, #364]	; (8005d80 <HAL_DMA_Abort_IT+0x1a4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d045      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a59      	ldr	r2, [pc, #356]	; (8005d84 <HAL_DMA_Abort_IT+0x1a8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d040      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a58      	ldr	r2, [pc, #352]	; (8005d88 <HAL_DMA_Abort_IT+0x1ac>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d03b      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a56      	ldr	r2, [pc, #344]	; (8005d8c <HAL_DMA_Abort_IT+0x1b0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d036      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a55      	ldr	r2, [pc, #340]	; (8005d90 <HAL_DMA_Abort_IT+0x1b4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d031      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a53      	ldr	r2, [pc, #332]	; (8005d94 <HAL_DMA_Abort_IT+0x1b8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d02c      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a52      	ldr	r2, [pc, #328]	; (8005d98 <HAL_DMA_Abort_IT+0x1bc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d027      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a50      	ldr	r2, [pc, #320]	; (8005d9c <HAL_DMA_Abort_IT+0x1c0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d022      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a4f      	ldr	r2, [pc, #316]	; (8005da0 <HAL_DMA_Abort_IT+0x1c4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d01d      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a4d      	ldr	r2, [pc, #308]	; (8005da4 <HAL_DMA_Abort_IT+0x1c8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d018      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a4c      	ldr	r2, [pc, #304]	; (8005da8 <HAL_DMA_Abort_IT+0x1cc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a4a      	ldr	r2, [pc, #296]	; (8005dac <HAL_DMA_Abort_IT+0x1d0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00e      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a49      	ldr	r2, [pc, #292]	; (8005db0 <HAL_DMA_Abort_IT+0x1d4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d009      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a47      	ldr	r2, [pc, #284]	; (8005db4 <HAL_DMA_Abort_IT+0x1d8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xc8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a46      	ldr	r2, [pc, #280]	; (8005db8 <HAL_DMA_Abort_IT+0x1dc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d101      	bne.n	8005ca8 <HAL_DMA_Abort_IT+0xcc>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <HAL_DMA_Abort_IT+0xce>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8086 	beq.w	8005dbc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2204      	movs	r2, #4
 8005cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a2f      	ldr	r2, [pc, #188]	; (8005d7c <HAL_DMA_Abort_IT+0x1a0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d04a      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a2e      	ldr	r2, [pc, #184]	; (8005d80 <HAL_DMA_Abort_IT+0x1a4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d045      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a2c      	ldr	r2, [pc, #176]	; (8005d84 <HAL_DMA_Abort_IT+0x1a8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d040      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a2b      	ldr	r2, [pc, #172]	; (8005d88 <HAL_DMA_Abort_IT+0x1ac>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d03b      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a29      	ldr	r2, [pc, #164]	; (8005d8c <HAL_DMA_Abort_IT+0x1b0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d036      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a28      	ldr	r2, [pc, #160]	; (8005d90 <HAL_DMA_Abort_IT+0x1b4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d031      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <HAL_DMA_Abort_IT+0x1b8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d02c      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a25      	ldr	r2, [pc, #148]	; (8005d98 <HAL_DMA_Abort_IT+0x1bc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d027      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a23      	ldr	r2, [pc, #140]	; (8005d9c <HAL_DMA_Abort_IT+0x1c0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d022      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a22      	ldr	r2, [pc, #136]	; (8005da0 <HAL_DMA_Abort_IT+0x1c4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d01d      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a20      	ldr	r2, [pc, #128]	; (8005da4 <HAL_DMA_Abort_IT+0x1c8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d018      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1f      	ldr	r2, [pc, #124]	; (8005da8 <HAL_DMA_Abort_IT+0x1cc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d013      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1d      	ldr	r2, [pc, #116]	; (8005dac <HAL_DMA_Abort_IT+0x1d0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00e      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1c      	ldr	r2, [pc, #112]	; (8005db0 <HAL_DMA_Abort_IT+0x1d4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d009      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1a      	ldr	r2, [pc, #104]	; (8005db4 <HAL_DMA_Abort_IT+0x1d8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d004      	beq.n	8005d58 <HAL_DMA_Abort_IT+0x17c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a19      	ldr	r2, [pc, #100]	; (8005db8 <HAL_DMA_Abort_IT+0x1dc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d108      	bne.n	8005d6a <HAL_DMA_Abort_IT+0x18e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0201 	bic.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	e178      	b.n	800605c <HAL_DMA_Abort_IT+0x480>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0201 	bic.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	e16f      	b.n	800605c <HAL_DMA_Abort_IT+0x480>
 8005d7c:	40020010 	.word	0x40020010
 8005d80:	40020028 	.word	0x40020028
 8005d84:	40020040 	.word	0x40020040
 8005d88:	40020058 	.word	0x40020058
 8005d8c:	40020070 	.word	0x40020070
 8005d90:	40020088 	.word	0x40020088
 8005d94:	400200a0 	.word	0x400200a0
 8005d98:	400200b8 	.word	0x400200b8
 8005d9c:	40020410 	.word	0x40020410
 8005da0:	40020428 	.word	0x40020428
 8005da4:	40020440 	.word	0x40020440
 8005da8:	40020458 	.word	0x40020458
 8005dac:	40020470 	.word	0x40020470
 8005db0:	40020488 	.word	0x40020488
 8005db4:	400204a0 	.word	0x400204a0
 8005db8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 020e 	bic.w	r2, r2, #14
 8005dca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a6c      	ldr	r2, [pc, #432]	; (8005f84 <HAL_DMA_Abort_IT+0x3a8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d04a      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a6b      	ldr	r2, [pc, #428]	; (8005f88 <HAL_DMA_Abort_IT+0x3ac>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d045      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a69      	ldr	r2, [pc, #420]	; (8005f8c <HAL_DMA_Abort_IT+0x3b0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d040      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a68      	ldr	r2, [pc, #416]	; (8005f90 <HAL_DMA_Abort_IT+0x3b4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d03b      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a66      	ldr	r2, [pc, #408]	; (8005f94 <HAL_DMA_Abort_IT+0x3b8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d036      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a65      	ldr	r2, [pc, #404]	; (8005f98 <HAL_DMA_Abort_IT+0x3bc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d031      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a63      	ldr	r2, [pc, #396]	; (8005f9c <HAL_DMA_Abort_IT+0x3c0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d02c      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a62      	ldr	r2, [pc, #392]	; (8005fa0 <HAL_DMA_Abort_IT+0x3c4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d027      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a60      	ldr	r2, [pc, #384]	; (8005fa4 <HAL_DMA_Abort_IT+0x3c8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d022      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a5f      	ldr	r2, [pc, #380]	; (8005fa8 <HAL_DMA_Abort_IT+0x3cc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d01d      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a5d      	ldr	r2, [pc, #372]	; (8005fac <HAL_DMA_Abort_IT+0x3d0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d018      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a5c      	ldr	r2, [pc, #368]	; (8005fb0 <HAL_DMA_Abort_IT+0x3d4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d013      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a5a      	ldr	r2, [pc, #360]	; (8005fb4 <HAL_DMA_Abort_IT+0x3d8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00e      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a59      	ldr	r2, [pc, #356]	; (8005fb8 <HAL_DMA_Abort_IT+0x3dc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d009      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a57      	ldr	r2, [pc, #348]	; (8005fbc <HAL_DMA_Abort_IT+0x3e0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d004      	beq.n	8005e6c <HAL_DMA_Abort_IT+0x290>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a56      	ldr	r2, [pc, #344]	; (8005fc0 <HAL_DMA_Abort_IT+0x3e4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d108      	bne.n	8005e7e <HAL_DMA_Abort_IT+0x2a2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0201 	bic.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	e007      	b.n	8005e8e <HAL_DMA_Abort_IT+0x2b2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0201 	bic.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a3c      	ldr	r2, [pc, #240]	; (8005f84 <HAL_DMA_Abort_IT+0x3a8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d072      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a3a      	ldr	r2, [pc, #232]	; (8005f88 <HAL_DMA_Abort_IT+0x3ac>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d06d      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a39      	ldr	r2, [pc, #228]	; (8005f8c <HAL_DMA_Abort_IT+0x3b0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d068      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a37      	ldr	r2, [pc, #220]	; (8005f90 <HAL_DMA_Abort_IT+0x3b4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d063      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a36      	ldr	r2, [pc, #216]	; (8005f94 <HAL_DMA_Abort_IT+0x3b8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d05e      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a34      	ldr	r2, [pc, #208]	; (8005f98 <HAL_DMA_Abort_IT+0x3bc>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d059      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a33      	ldr	r2, [pc, #204]	; (8005f9c <HAL_DMA_Abort_IT+0x3c0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d054      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a31      	ldr	r2, [pc, #196]	; (8005fa0 <HAL_DMA_Abort_IT+0x3c4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d04f      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a30      	ldr	r2, [pc, #192]	; (8005fa4 <HAL_DMA_Abort_IT+0x3c8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d04a      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a2e      	ldr	r2, [pc, #184]	; (8005fa8 <HAL_DMA_Abort_IT+0x3cc>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d045      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a2d      	ldr	r2, [pc, #180]	; (8005fac <HAL_DMA_Abort_IT+0x3d0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d040      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a2b      	ldr	r2, [pc, #172]	; (8005fb0 <HAL_DMA_Abort_IT+0x3d4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d03b      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a2a      	ldr	r2, [pc, #168]	; (8005fb4 <HAL_DMA_Abort_IT+0x3d8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d036      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a28      	ldr	r2, [pc, #160]	; (8005fb8 <HAL_DMA_Abort_IT+0x3dc>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d031      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a27      	ldr	r2, [pc, #156]	; (8005fbc <HAL_DMA_Abort_IT+0x3e0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d02c      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a25      	ldr	r2, [pc, #148]	; (8005fc0 <HAL_DMA_Abort_IT+0x3e4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d027      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a24      	ldr	r2, [pc, #144]	; (8005fc4 <HAL_DMA_Abort_IT+0x3e8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d022      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a22      	ldr	r2, [pc, #136]	; (8005fc8 <HAL_DMA_Abort_IT+0x3ec>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d01d      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a21      	ldr	r2, [pc, #132]	; (8005fcc <HAL_DMA_Abort_IT+0x3f0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d018      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1f      	ldr	r2, [pc, #124]	; (8005fd0 <HAL_DMA_Abort_IT+0x3f4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d013      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a1e      	ldr	r2, [pc, #120]	; (8005fd4 <HAL_DMA_Abort_IT+0x3f8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00e      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1c      	ldr	r2, [pc, #112]	; (8005fd8 <HAL_DMA_Abort_IT+0x3fc>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d009      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a1b      	ldr	r2, [pc, #108]	; (8005fdc <HAL_DMA_Abort_IT+0x400>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d004      	beq.n	8005f7e <HAL_DMA_Abort_IT+0x3a2>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a19      	ldr	r2, [pc, #100]	; (8005fe0 <HAL_DMA_Abort_IT+0x404>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d132      	bne.n	8005fe4 <HAL_DMA_Abort_IT+0x408>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e031      	b.n	8005fe6 <HAL_DMA_Abort_IT+0x40a>
 8005f82:	bf00      	nop
 8005f84:	40020010 	.word	0x40020010
 8005f88:	40020028 	.word	0x40020028
 8005f8c:	40020040 	.word	0x40020040
 8005f90:	40020058 	.word	0x40020058
 8005f94:	40020070 	.word	0x40020070
 8005f98:	40020088 	.word	0x40020088
 8005f9c:	400200a0 	.word	0x400200a0
 8005fa0:	400200b8 	.word	0x400200b8
 8005fa4:	40020410 	.word	0x40020410
 8005fa8:	40020428 	.word	0x40020428
 8005fac:	40020440 	.word	0x40020440
 8005fb0:	40020458 	.word	0x40020458
 8005fb4:	40020470 	.word	0x40020470
 8005fb8:	40020488 	.word	0x40020488
 8005fbc:	400204a0 	.word	0x400204a0
 8005fc0:	400204b8 	.word	0x400204b8
 8005fc4:	58025408 	.word	0x58025408
 8005fc8:	5802541c 	.word	0x5802541c
 8005fcc:	58025430 	.word	0x58025430
 8005fd0:	58025444 	.word	0x58025444
 8005fd4:	58025458 	.word	0x58025458
 8005fd8:	5802546c 	.word	0x5802546c
 8005fdc:	58025480 	.word	0x58025480
 8005fe0:	58025494 	.word	0x58025494
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d028      	beq.n	800603c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ff8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	2201      	movs	r2, #1
 800600a:	409a      	lsls	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006018:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00c      	beq.n	800603c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800602c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006030:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800603a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop

08006068 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006074:	4b67      	ldr	r3, [pc, #412]	; (8006214 <HAL_DMA_IRQHandler+0x1ac>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a67      	ldr	r2, [pc, #412]	; (8006218 <HAL_DMA_IRQHandler+0x1b0>)
 800607a:	fba2 2303 	umull	r2, r3, r2, r3
 800607e:	0a9b      	lsrs	r3, r3, #10
 8006080:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006086:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a5f      	ldr	r2, [pc, #380]	; (800621c <HAL_DMA_IRQHandler+0x1b4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d04a      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a5d      	ldr	r2, [pc, #372]	; (8006220 <HAL_DMA_IRQHandler+0x1b8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d045      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a5c      	ldr	r2, [pc, #368]	; (8006224 <HAL_DMA_IRQHandler+0x1bc>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d040      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a5a      	ldr	r2, [pc, #360]	; (8006228 <HAL_DMA_IRQHandler+0x1c0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d03b      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a59      	ldr	r2, [pc, #356]	; (800622c <HAL_DMA_IRQHandler+0x1c4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d036      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a57      	ldr	r2, [pc, #348]	; (8006230 <HAL_DMA_IRQHandler+0x1c8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d031      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a56      	ldr	r2, [pc, #344]	; (8006234 <HAL_DMA_IRQHandler+0x1cc>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d02c      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a54      	ldr	r2, [pc, #336]	; (8006238 <HAL_DMA_IRQHandler+0x1d0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d027      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a53      	ldr	r2, [pc, #332]	; (800623c <HAL_DMA_IRQHandler+0x1d4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d022      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a51      	ldr	r2, [pc, #324]	; (8006240 <HAL_DMA_IRQHandler+0x1d8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d01d      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a50      	ldr	r2, [pc, #320]	; (8006244 <HAL_DMA_IRQHandler+0x1dc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d018      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a4e      	ldr	r2, [pc, #312]	; (8006248 <HAL_DMA_IRQHandler+0x1e0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d013      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a4d      	ldr	r2, [pc, #308]	; (800624c <HAL_DMA_IRQHandler+0x1e4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00e      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a4b      	ldr	r2, [pc, #300]	; (8006250 <HAL_DMA_IRQHandler+0x1e8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d009      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a4a      	ldr	r2, [pc, #296]	; (8006254 <HAL_DMA_IRQHandler+0x1ec>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d004      	beq.n	800613a <HAL_DMA_IRQHandler+0xd2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a48      	ldr	r2, [pc, #288]	; (8006258 <HAL_DMA_IRQHandler+0x1f0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d101      	bne.n	800613e <HAL_DMA_IRQHandler+0xd6>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <HAL_DMA_IRQHandler+0xd8>
 800613e:	2300      	movs	r3, #0
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 842b 	beq.w	800699c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	2208      	movs	r2, #8
 8006150:	409a      	lsls	r2, r3
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	4013      	ands	r3, r2
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 80a2 	beq.w	80062a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a2e      	ldr	r2, [pc, #184]	; (800621c <HAL_DMA_IRQHandler+0x1b4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d04a      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a2d      	ldr	r2, [pc, #180]	; (8006220 <HAL_DMA_IRQHandler+0x1b8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d045      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a2b      	ldr	r2, [pc, #172]	; (8006224 <HAL_DMA_IRQHandler+0x1bc>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d040      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a2a      	ldr	r2, [pc, #168]	; (8006228 <HAL_DMA_IRQHandler+0x1c0>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d03b      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a28      	ldr	r2, [pc, #160]	; (800622c <HAL_DMA_IRQHandler+0x1c4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d036      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a27      	ldr	r2, [pc, #156]	; (8006230 <HAL_DMA_IRQHandler+0x1c8>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d031      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a25      	ldr	r2, [pc, #148]	; (8006234 <HAL_DMA_IRQHandler+0x1cc>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d02c      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a24      	ldr	r2, [pc, #144]	; (8006238 <HAL_DMA_IRQHandler+0x1d0>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d027      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a22      	ldr	r2, [pc, #136]	; (800623c <HAL_DMA_IRQHandler+0x1d4>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d022      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a21      	ldr	r2, [pc, #132]	; (8006240 <HAL_DMA_IRQHandler+0x1d8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d01d      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a1f      	ldr	r2, [pc, #124]	; (8006244 <HAL_DMA_IRQHandler+0x1dc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d018      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a1e      	ldr	r2, [pc, #120]	; (8006248 <HAL_DMA_IRQHandler+0x1e0>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d013      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a1c      	ldr	r2, [pc, #112]	; (800624c <HAL_DMA_IRQHandler+0x1e4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00e      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1b      	ldr	r2, [pc, #108]	; (8006250 <HAL_DMA_IRQHandler+0x1e8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d009      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a19      	ldr	r2, [pc, #100]	; (8006254 <HAL_DMA_IRQHandler+0x1ec>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d004      	beq.n	80061fc <HAL_DMA_IRQHandler+0x194>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a18      	ldr	r2, [pc, #96]	; (8006258 <HAL_DMA_IRQHandler+0x1f0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d12f      	bne.n	800625c <HAL_DMA_IRQHandler+0x1f4>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	bf14      	ite	ne
 800620a:	2301      	movne	r3, #1
 800620c:	2300      	moveq	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	e02e      	b.n	8006270 <HAL_DMA_IRQHandler+0x208>
 8006212:	bf00      	nop
 8006214:	24000088 	.word	0x24000088
 8006218:	1b4e81b5 	.word	0x1b4e81b5
 800621c:	40020010 	.word	0x40020010
 8006220:	40020028 	.word	0x40020028
 8006224:	40020040 	.word	0x40020040
 8006228:	40020058 	.word	0x40020058
 800622c:	40020070 	.word	0x40020070
 8006230:	40020088 	.word	0x40020088
 8006234:	400200a0 	.word	0x400200a0
 8006238:	400200b8 	.word	0x400200b8
 800623c:	40020410 	.word	0x40020410
 8006240:	40020428 	.word	0x40020428
 8006244:	40020440 	.word	0x40020440
 8006248:	40020458 	.word	0x40020458
 800624c:	40020470 	.word	0x40020470
 8006250:	40020488 	.word	0x40020488
 8006254:	400204a0 	.word	0x400204a0
 8006258:	400204b8 	.word	0x400204b8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b00      	cmp	r3, #0
 8006268:	bf14      	ite	ne
 800626a:	2301      	movne	r3, #1
 800626c:	2300      	moveq	r3, #0
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d015      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0204 	bic.w	r2, r2, #4
 8006282:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006288:	f003 031f 	and.w	r3, r3, #31
 800628c:	2208      	movs	r2, #8
 800628e:	409a      	lsls	r2, r3
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006298:	f043 0201 	orr.w	r2, r3, #1
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a4:	f003 031f 	and.w	r3, r3, #31
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	fa22 f303 	lsr.w	r3, r2, r3
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d06e      	beq.n	8006394 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a69      	ldr	r2, [pc, #420]	; (8006460 <HAL_DMA_IRQHandler+0x3f8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d04a      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a67      	ldr	r2, [pc, #412]	; (8006464 <HAL_DMA_IRQHandler+0x3fc>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d045      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a66      	ldr	r2, [pc, #408]	; (8006468 <HAL_DMA_IRQHandler+0x400>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d040      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a64      	ldr	r2, [pc, #400]	; (800646c <HAL_DMA_IRQHandler+0x404>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d03b      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a63      	ldr	r2, [pc, #396]	; (8006470 <HAL_DMA_IRQHandler+0x408>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d036      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a61      	ldr	r2, [pc, #388]	; (8006474 <HAL_DMA_IRQHandler+0x40c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d031      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a60      	ldr	r2, [pc, #384]	; (8006478 <HAL_DMA_IRQHandler+0x410>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d02c      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a5e      	ldr	r2, [pc, #376]	; (800647c <HAL_DMA_IRQHandler+0x414>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d027      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a5d      	ldr	r2, [pc, #372]	; (8006480 <HAL_DMA_IRQHandler+0x418>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d022      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a5b      	ldr	r2, [pc, #364]	; (8006484 <HAL_DMA_IRQHandler+0x41c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d01d      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a5a      	ldr	r2, [pc, #360]	; (8006488 <HAL_DMA_IRQHandler+0x420>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d018      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a58      	ldr	r2, [pc, #352]	; (800648c <HAL_DMA_IRQHandler+0x424>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d013      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a57      	ldr	r2, [pc, #348]	; (8006490 <HAL_DMA_IRQHandler+0x428>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00e      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a55      	ldr	r2, [pc, #340]	; (8006494 <HAL_DMA_IRQHandler+0x42c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d009      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a54      	ldr	r2, [pc, #336]	; (8006498 <HAL_DMA_IRQHandler+0x430>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_DMA_IRQHandler+0x2ee>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a52      	ldr	r2, [pc, #328]	; (800649c <HAL_DMA_IRQHandler+0x434>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d10a      	bne.n	800636c <HAL_DMA_IRQHandler+0x304>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006360:	2b00      	cmp	r3, #0
 8006362:	bf14      	ite	ne
 8006364:	2301      	movne	r3, #1
 8006366:	2300      	moveq	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	e003      	b.n	8006374 <HAL_DMA_IRQHandler+0x30c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2300      	movs	r3, #0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00d      	beq.n	8006394 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	2201      	movs	r2, #1
 8006382:	409a      	lsls	r2, r3
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638c:	f043 0202 	orr.w	r2, r3, #2
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	2204      	movs	r2, #4
 800639e:	409a      	lsls	r2, r3
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	4013      	ands	r3, r2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 808f 	beq.w	80064c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a2c      	ldr	r2, [pc, #176]	; (8006460 <HAL_DMA_IRQHandler+0x3f8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d04a      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a2a      	ldr	r2, [pc, #168]	; (8006464 <HAL_DMA_IRQHandler+0x3fc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d045      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a29      	ldr	r2, [pc, #164]	; (8006468 <HAL_DMA_IRQHandler+0x400>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d040      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a27      	ldr	r2, [pc, #156]	; (800646c <HAL_DMA_IRQHandler+0x404>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d03b      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a26      	ldr	r2, [pc, #152]	; (8006470 <HAL_DMA_IRQHandler+0x408>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d036      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a24      	ldr	r2, [pc, #144]	; (8006474 <HAL_DMA_IRQHandler+0x40c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d031      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a23      	ldr	r2, [pc, #140]	; (8006478 <HAL_DMA_IRQHandler+0x410>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d02c      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a21      	ldr	r2, [pc, #132]	; (800647c <HAL_DMA_IRQHandler+0x414>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d027      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a20      	ldr	r2, [pc, #128]	; (8006480 <HAL_DMA_IRQHandler+0x418>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d022      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1e      	ldr	r2, [pc, #120]	; (8006484 <HAL_DMA_IRQHandler+0x41c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d01d      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1d      	ldr	r2, [pc, #116]	; (8006488 <HAL_DMA_IRQHandler+0x420>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d018      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a1b      	ldr	r2, [pc, #108]	; (800648c <HAL_DMA_IRQHandler+0x424>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d013      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a1a      	ldr	r2, [pc, #104]	; (8006490 <HAL_DMA_IRQHandler+0x428>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00e      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a18      	ldr	r2, [pc, #96]	; (8006494 <HAL_DMA_IRQHandler+0x42c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d009      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a17      	ldr	r2, [pc, #92]	; (8006498 <HAL_DMA_IRQHandler+0x430>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d004      	beq.n	800644a <HAL_DMA_IRQHandler+0x3e2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a15      	ldr	r2, [pc, #84]	; (800649c <HAL_DMA_IRQHandler+0x434>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d12a      	bne.n	80064a0 <HAL_DMA_IRQHandler+0x438>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	bf14      	ite	ne
 8006458:	2301      	movne	r3, #1
 800645a:	2300      	moveq	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	e023      	b.n	80064a8 <HAL_DMA_IRQHandler+0x440>
 8006460:	40020010 	.word	0x40020010
 8006464:	40020028 	.word	0x40020028
 8006468:	40020040 	.word	0x40020040
 800646c:	40020058 	.word	0x40020058
 8006470:	40020070 	.word	0x40020070
 8006474:	40020088 	.word	0x40020088
 8006478:	400200a0 	.word	0x400200a0
 800647c:	400200b8 	.word	0x400200b8
 8006480:	40020410 	.word	0x40020410
 8006484:	40020428 	.word	0x40020428
 8006488:	40020440 	.word	0x40020440
 800648c:	40020458 	.word	0x40020458
 8006490:	40020470 	.word	0x40020470
 8006494:	40020488 	.word	0x40020488
 8006498:	400204a0 	.word	0x400204a0
 800649c:	400204b8 	.word	0x400204b8
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2300      	movs	r3, #0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00d      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b0:	f003 031f 	and.w	r3, r3, #31
 80064b4:	2204      	movs	r2, #4
 80064b6:	409a      	lsls	r2, r3
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c0:	f043 0204 	orr.w	r2, r3, #4
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064cc:	f003 031f 	and.w	r3, r3, #31
 80064d0:	2210      	movs	r2, #16
 80064d2:	409a      	lsls	r2, r3
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	4013      	ands	r3, r2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80a6 	beq.w	800662a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a85      	ldr	r2, [pc, #532]	; (80066f8 <HAL_DMA_IRQHandler+0x690>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d04a      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a83      	ldr	r2, [pc, #524]	; (80066fc <HAL_DMA_IRQHandler+0x694>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d045      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a82      	ldr	r2, [pc, #520]	; (8006700 <HAL_DMA_IRQHandler+0x698>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d040      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a80      	ldr	r2, [pc, #512]	; (8006704 <HAL_DMA_IRQHandler+0x69c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d03b      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a7f      	ldr	r2, [pc, #508]	; (8006708 <HAL_DMA_IRQHandler+0x6a0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d036      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a7d      	ldr	r2, [pc, #500]	; (800670c <HAL_DMA_IRQHandler+0x6a4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d031      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a7c      	ldr	r2, [pc, #496]	; (8006710 <HAL_DMA_IRQHandler+0x6a8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d02c      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a7a      	ldr	r2, [pc, #488]	; (8006714 <HAL_DMA_IRQHandler+0x6ac>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d027      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a79      	ldr	r2, [pc, #484]	; (8006718 <HAL_DMA_IRQHandler+0x6b0>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d022      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a77      	ldr	r2, [pc, #476]	; (800671c <HAL_DMA_IRQHandler+0x6b4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d01d      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a76      	ldr	r2, [pc, #472]	; (8006720 <HAL_DMA_IRQHandler+0x6b8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d018      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a74      	ldr	r2, [pc, #464]	; (8006724 <HAL_DMA_IRQHandler+0x6bc>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d013      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a73      	ldr	r2, [pc, #460]	; (8006728 <HAL_DMA_IRQHandler+0x6c0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00e      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a71      	ldr	r2, [pc, #452]	; (800672c <HAL_DMA_IRQHandler+0x6c4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d009      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a70      	ldr	r2, [pc, #448]	; (8006730 <HAL_DMA_IRQHandler+0x6c8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d004      	beq.n	800657e <HAL_DMA_IRQHandler+0x516>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a6e      	ldr	r2, [pc, #440]	; (8006734 <HAL_DMA_IRQHandler+0x6cc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d10a      	bne.n	8006594 <HAL_DMA_IRQHandler+0x52c>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b00      	cmp	r3, #0
 800658a:	bf14      	ite	ne
 800658c:	2301      	movne	r3, #1
 800658e:	2300      	moveq	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	e009      	b.n	80065a8 <HAL_DMA_IRQHandler+0x540>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bf14      	ite	ne
 80065a2:	2301      	movne	r3, #1
 80065a4:	2300      	moveq	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d03e      	beq.n	800662a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	2210      	movs	r2, #16
 80065b6:	409a      	lsls	r2, r3
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d018      	beq.n	80065fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d108      	bne.n	80065ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d024      	beq.n	800662a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4798      	blx	r3
 80065e8:	e01f      	b.n	800662a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01b      	beq.n	800662a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
 80065fa:	e016      	b.n	800662a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006606:	2b00      	cmp	r3, #0
 8006608:	d107      	bne.n	800661a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0208 	bic.w	r2, r2, #8
 8006618:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662e:	f003 031f 	and.w	r3, r3, #31
 8006632:	2220      	movs	r2, #32
 8006634:	409a      	lsls	r2, r3
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	4013      	ands	r3, r2
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 8110 	beq.w	8006860 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a2c      	ldr	r2, [pc, #176]	; (80066f8 <HAL_DMA_IRQHandler+0x690>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d04a      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a2b      	ldr	r2, [pc, #172]	; (80066fc <HAL_DMA_IRQHandler+0x694>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d045      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a29      	ldr	r2, [pc, #164]	; (8006700 <HAL_DMA_IRQHandler+0x698>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d040      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a28      	ldr	r2, [pc, #160]	; (8006704 <HAL_DMA_IRQHandler+0x69c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d03b      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a26      	ldr	r2, [pc, #152]	; (8006708 <HAL_DMA_IRQHandler+0x6a0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d036      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a25      	ldr	r2, [pc, #148]	; (800670c <HAL_DMA_IRQHandler+0x6a4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d031      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a23      	ldr	r2, [pc, #140]	; (8006710 <HAL_DMA_IRQHandler+0x6a8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d02c      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a22      	ldr	r2, [pc, #136]	; (8006714 <HAL_DMA_IRQHandler+0x6ac>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d027      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a20      	ldr	r2, [pc, #128]	; (8006718 <HAL_DMA_IRQHandler+0x6b0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d022      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1f      	ldr	r2, [pc, #124]	; (800671c <HAL_DMA_IRQHandler+0x6b4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d01d      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1d      	ldr	r2, [pc, #116]	; (8006720 <HAL_DMA_IRQHandler+0x6b8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d018      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1c      	ldr	r2, [pc, #112]	; (8006724 <HAL_DMA_IRQHandler+0x6bc>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d013      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a1a      	ldr	r2, [pc, #104]	; (8006728 <HAL_DMA_IRQHandler+0x6c0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00e      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a19      	ldr	r2, [pc, #100]	; (800672c <HAL_DMA_IRQHandler+0x6c4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d009      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a17      	ldr	r2, [pc, #92]	; (8006730 <HAL_DMA_IRQHandler+0x6c8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x678>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a16      	ldr	r2, [pc, #88]	; (8006734 <HAL_DMA_IRQHandler+0x6cc>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d12b      	bne.n	8006738 <HAL_DMA_IRQHandler+0x6d0>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0310 	and.w	r3, r3, #16
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bf14      	ite	ne
 80066ee:	2301      	movne	r3, #1
 80066f0:	2300      	moveq	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	e02a      	b.n	800674c <HAL_DMA_IRQHandler+0x6e4>
 80066f6:	bf00      	nop
 80066f8:	40020010 	.word	0x40020010
 80066fc:	40020028 	.word	0x40020028
 8006700:	40020040 	.word	0x40020040
 8006704:	40020058 	.word	0x40020058
 8006708:	40020070 	.word	0x40020070
 800670c:	40020088 	.word	0x40020088
 8006710:	400200a0 	.word	0x400200a0
 8006714:	400200b8 	.word	0x400200b8
 8006718:	40020410 	.word	0x40020410
 800671c:	40020428 	.word	0x40020428
 8006720:	40020440 	.word	0x40020440
 8006724:	40020458 	.word	0x40020458
 8006728:	40020470 	.word	0x40020470
 800672c:	40020488 	.word	0x40020488
 8006730:	400204a0 	.word	0x400204a0
 8006734:	400204b8 	.word	0x400204b8
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	bf14      	ite	ne
 8006746:	2301      	movne	r3, #1
 8006748:	2300      	moveq	r3, #0
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 8087 	beq.w	8006860 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006756:	f003 031f 	and.w	r3, r3, #31
 800675a:	2220      	movs	r2, #32
 800675c:	409a      	lsls	r2, r3
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b04      	cmp	r3, #4
 800676c:	d139      	bne.n	80067e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0216 	bic.w	r2, r2, #22
 800677c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695a      	ldr	r2, [r3, #20]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800678c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	2b00      	cmp	r3, #0
 8006794:	d103      	bne.n	800679e <HAL_DMA_IRQHandler+0x736>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800679a:	2b00      	cmp	r3, #0
 800679c:	d007      	beq.n	80067ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0208 	bic.w	r2, r2, #8
 80067ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b2:	f003 031f 	and.w	r3, r3, #31
 80067b6:	223f      	movs	r2, #63	; 0x3f
 80067b8:	409a      	lsls	r2, r3
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 834a 	beq.w	8006e6c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	4798      	blx	r3
          }
          return;
 80067e0:	e344      	b.n	8006e6c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d018      	beq.n	8006822 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d108      	bne.n	8006810 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006802:	2b00      	cmp	r3, #0
 8006804:	d02c      	beq.n	8006860 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
 800680e:	e027      	b.n	8006860 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d023      	beq.n	8006860 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	4798      	blx	r3
 8006820:	e01e      	b.n	8006860 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10f      	bne.n	8006850 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0210 	bic.w	r2, r2, #16
 800683e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8306 	beq.w	8006e76 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 8088 	beq.w	8006988 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2204      	movs	r2, #4
 800687c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a7a      	ldr	r2, [pc, #488]	; (8006a70 <HAL_DMA_IRQHandler+0xa08>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d04a      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a79      	ldr	r2, [pc, #484]	; (8006a74 <HAL_DMA_IRQHandler+0xa0c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d045      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a77      	ldr	r2, [pc, #476]	; (8006a78 <HAL_DMA_IRQHandler+0xa10>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d040      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a76      	ldr	r2, [pc, #472]	; (8006a7c <HAL_DMA_IRQHandler+0xa14>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d03b      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a74      	ldr	r2, [pc, #464]	; (8006a80 <HAL_DMA_IRQHandler+0xa18>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d036      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a73      	ldr	r2, [pc, #460]	; (8006a84 <HAL_DMA_IRQHandler+0xa1c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d031      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a71      	ldr	r2, [pc, #452]	; (8006a88 <HAL_DMA_IRQHandler+0xa20>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d02c      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a70      	ldr	r2, [pc, #448]	; (8006a8c <HAL_DMA_IRQHandler+0xa24>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d027      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a6e      	ldr	r2, [pc, #440]	; (8006a90 <HAL_DMA_IRQHandler+0xa28>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d022      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a6d      	ldr	r2, [pc, #436]	; (8006a94 <HAL_DMA_IRQHandler+0xa2c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d01d      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a6b      	ldr	r2, [pc, #428]	; (8006a98 <HAL_DMA_IRQHandler+0xa30>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d018      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a6a      	ldr	r2, [pc, #424]	; (8006a9c <HAL_DMA_IRQHandler+0xa34>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d013      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a68      	ldr	r2, [pc, #416]	; (8006aa0 <HAL_DMA_IRQHandler+0xa38>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00e      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a67      	ldr	r2, [pc, #412]	; (8006aa4 <HAL_DMA_IRQHandler+0xa3c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d009      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a65      	ldr	r2, [pc, #404]	; (8006aa8 <HAL_DMA_IRQHandler+0xa40>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d004      	beq.n	8006920 <HAL_DMA_IRQHandler+0x8b8>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a64      	ldr	r2, [pc, #400]	; (8006aac <HAL_DMA_IRQHandler+0xa44>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d108      	bne.n	8006932 <HAL_DMA_IRQHandler+0x8ca>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0201 	bic.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	e007      	b.n	8006942 <HAL_DMA_IRQHandler+0x8da>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0201 	bic.w	r2, r2, #1
 8006940:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3301      	adds	r3, #1
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800694a:	429a      	cmp	r2, r3
 800694c:	d307      	bcc.n	800695e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f2      	bne.n	8006942 <HAL_DMA_IRQHandler+0x8da>
 800695c:	e000      	b.n	8006960 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800695e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d004      	beq.n	8006978 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2203      	movs	r2, #3
 8006972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006976:	e003      	b.n	8006980 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 8272 	beq.w	8006e76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	4798      	blx	r3
 800699a:	e26c      	b.n	8006e76 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a43      	ldr	r2, [pc, #268]	; (8006ab0 <HAL_DMA_IRQHandler+0xa48>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d022      	beq.n	80069ec <HAL_DMA_IRQHandler+0x984>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a42      	ldr	r2, [pc, #264]	; (8006ab4 <HAL_DMA_IRQHandler+0xa4c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d01d      	beq.n	80069ec <HAL_DMA_IRQHandler+0x984>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a40      	ldr	r2, [pc, #256]	; (8006ab8 <HAL_DMA_IRQHandler+0xa50>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d018      	beq.n	80069ec <HAL_DMA_IRQHandler+0x984>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a3f      	ldr	r2, [pc, #252]	; (8006abc <HAL_DMA_IRQHandler+0xa54>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d013      	beq.n	80069ec <HAL_DMA_IRQHandler+0x984>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a3d      	ldr	r2, [pc, #244]	; (8006ac0 <HAL_DMA_IRQHandler+0xa58>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00e      	beq.n	80069ec <HAL_DMA_IRQHandler+0x984>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a3c      	ldr	r2, [pc, #240]	; (8006ac4 <HAL_DMA_IRQHandler+0xa5c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d009      	beq.n	80069ec <HAL_DMA_IRQHandler+0x984>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a3a      	ldr	r2, [pc, #232]	; (8006ac8 <HAL_DMA_IRQHandler+0xa60>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d004      	beq.n	80069ec <HAL_DMA_IRQHandler+0x984>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a39      	ldr	r2, [pc, #228]	; (8006acc <HAL_DMA_IRQHandler+0xa64>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d101      	bne.n	80069f0 <HAL_DMA_IRQHandler+0x988>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e000      	b.n	80069f2 <HAL_DMA_IRQHandler+0x98a>
 80069f0:	2300      	movs	r3, #0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 823f 	beq.w	8006e76 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a04:	f003 031f 	and.w	r3, r3, #31
 8006a08:	2204      	movs	r2, #4
 8006a0a:	409a      	lsls	r2, r3
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 80cd 	beq.w	8006bb0 <HAL_DMA_IRQHandler+0xb48>
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 80c7 	beq.w	8006bb0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a26:	f003 031f 	and.w	r3, r3, #31
 8006a2a:	2204      	movs	r2, #4
 8006a2c:	409a      	lsls	r2, r3
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d049      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d109      	bne.n	8006a5a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 8210 	beq.w	8006e70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a58:	e20a      	b.n	8006e70 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8206 	beq.w	8006e70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a6c:	e200      	b.n	8006e70 <HAL_DMA_IRQHandler+0xe08>
 8006a6e:	bf00      	nop
 8006a70:	40020010 	.word	0x40020010
 8006a74:	40020028 	.word	0x40020028
 8006a78:	40020040 	.word	0x40020040
 8006a7c:	40020058 	.word	0x40020058
 8006a80:	40020070 	.word	0x40020070
 8006a84:	40020088 	.word	0x40020088
 8006a88:	400200a0 	.word	0x400200a0
 8006a8c:	400200b8 	.word	0x400200b8
 8006a90:	40020410 	.word	0x40020410
 8006a94:	40020428 	.word	0x40020428
 8006a98:	40020440 	.word	0x40020440
 8006a9c:	40020458 	.word	0x40020458
 8006aa0:	40020470 	.word	0x40020470
 8006aa4:	40020488 	.word	0x40020488
 8006aa8:	400204a0 	.word	0x400204a0
 8006aac:	400204b8 	.word	0x400204b8
 8006ab0:	58025408 	.word	0x58025408
 8006ab4:	5802541c 	.word	0x5802541c
 8006ab8:	58025430 	.word	0x58025430
 8006abc:	58025444 	.word	0x58025444
 8006ac0:	58025458 	.word	0x58025458
 8006ac4:	5802546c 	.word	0x5802546c
 8006ac8:	58025480 	.word	0x58025480
 8006acc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d160      	bne.n	8006b9c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a7f      	ldr	r2, [pc, #508]	; (8006cdc <HAL_DMA_IRQHandler+0xc74>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d04a      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a7d      	ldr	r2, [pc, #500]	; (8006ce0 <HAL_DMA_IRQHandler+0xc78>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d045      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a7c      	ldr	r2, [pc, #496]	; (8006ce4 <HAL_DMA_IRQHandler+0xc7c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d040      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a7a      	ldr	r2, [pc, #488]	; (8006ce8 <HAL_DMA_IRQHandler+0xc80>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d03b      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a79      	ldr	r2, [pc, #484]	; (8006cec <HAL_DMA_IRQHandler+0xc84>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d036      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a77      	ldr	r2, [pc, #476]	; (8006cf0 <HAL_DMA_IRQHandler+0xc88>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d031      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a76      	ldr	r2, [pc, #472]	; (8006cf4 <HAL_DMA_IRQHandler+0xc8c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d02c      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a74      	ldr	r2, [pc, #464]	; (8006cf8 <HAL_DMA_IRQHandler+0xc90>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d027      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a73      	ldr	r2, [pc, #460]	; (8006cfc <HAL_DMA_IRQHandler+0xc94>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d022      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a71      	ldr	r2, [pc, #452]	; (8006d00 <HAL_DMA_IRQHandler+0xc98>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d01d      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a70      	ldr	r2, [pc, #448]	; (8006d04 <HAL_DMA_IRQHandler+0xc9c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d018      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a6e      	ldr	r2, [pc, #440]	; (8006d08 <HAL_DMA_IRQHandler+0xca0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a6d      	ldr	r2, [pc, #436]	; (8006d0c <HAL_DMA_IRQHandler+0xca4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a6b      	ldr	r2, [pc, #428]	; (8006d10 <HAL_DMA_IRQHandler+0xca8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d009      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a6a      	ldr	r2, [pc, #424]	; (8006d14 <HAL_DMA_IRQHandler+0xcac>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb12>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a68      	ldr	r2, [pc, #416]	; (8006d18 <HAL_DMA_IRQHandler+0xcb0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d108      	bne.n	8006b8c <HAL_DMA_IRQHandler+0xb24>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0208 	bic.w	r2, r2, #8
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	e007      	b.n	8006b9c <HAL_DMA_IRQHandler+0xb34>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0204 	bic.w	r2, r2, #4
 8006b9a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 8165 	beq.w	8006e70 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bae:	e15f      	b.n	8006e70 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	2202      	movs	r2, #2
 8006bba:	409a      	lsls	r2, r3
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 80c5 	beq.w	8006d50 <HAL_DMA_IRQHandler+0xce8>
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80bf 	beq.w	8006d50 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	2202      	movs	r2, #2
 8006bdc:	409a      	lsls	r2, r3
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d018      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d109      	bne.n	8006c0a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 813a 	beq.w	8006e74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c08:	e134      	b.n	8006e74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8130 	beq.w	8006e74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c1c:	e12a      	b.n	8006e74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f040 8089 	bne.w	8006d3c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a2b      	ldr	r2, [pc, #172]	; (8006cdc <HAL_DMA_IRQHandler+0xc74>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d04a      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a29      	ldr	r2, [pc, #164]	; (8006ce0 <HAL_DMA_IRQHandler+0xc78>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d045      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a28      	ldr	r2, [pc, #160]	; (8006ce4 <HAL_DMA_IRQHandler+0xc7c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d040      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a26      	ldr	r2, [pc, #152]	; (8006ce8 <HAL_DMA_IRQHandler+0xc80>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d03b      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a25      	ldr	r2, [pc, #148]	; (8006cec <HAL_DMA_IRQHandler+0xc84>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d036      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a23      	ldr	r2, [pc, #140]	; (8006cf0 <HAL_DMA_IRQHandler+0xc88>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d031      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a22      	ldr	r2, [pc, #136]	; (8006cf4 <HAL_DMA_IRQHandler+0xc8c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d02c      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a20      	ldr	r2, [pc, #128]	; (8006cf8 <HAL_DMA_IRQHandler+0xc90>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d027      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a1f      	ldr	r2, [pc, #124]	; (8006cfc <HAL_DMA_IRQHandler+0xc94>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d022      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a1d      	ldr	r2, [pc, #116]	; (8006d00 <HAL_DMA_IRQHandler+0xc98>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d01d      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a1c      	ldr	r2, [pc, #112]	; (8006d04 <HAL_DMA_IRQHandler+0xc9c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d018      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1a      	ldr	r2, [pc, #104]	; (8006d08 <HAL_DMA_IRQHandler+0xca0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d013      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a19      	ldr	r2, [pc, #100]	; (8006d0c <HAL_DMA_IRQHandler+0xca4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d00e      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a17      	ldr	r2, [pc, #92]	; (8006d10 <HAL_DMA_IRQHandler+0xca8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d009      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a16      	ldr	r2, [pc, #88]	; (8006d14 <HAL_DMA_IRQHandler+0xcac>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d004      	beq.n	8006cca <HAL_DMA_IRQHandler+0xc62>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a14      	ldr	r2, [pc, #80]	; (8006d18 <HAL_DMA_IRQHandler+0xcb0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d128      	bne.n	8006d1c <HAL_DMA_IRQHandler+0xcb4>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0214 	bic.w	r2, r2, #20
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e027      	b.n	8006d2c <HAL_DMA_IRQHandler+0xcc4>
 8006cdc:	40020010 	.word	0x40020010
 8006ce0:	40020028 	.word	0x40020028
 8006ce4:	40020040 	.word	0x40020040
 8006ce8:	40020058 	.word	0x40020058
 8006cec:	40020070 	.word	0x40020070
 8006cf0:	40020088 	.word	0x40020088
 8006cf4:	400200a0 	.word	0x400200a0
 8006cf8:	400200b8 	.word	0x400200b8
 8006cfc:	40020410 	.word	0x40020410
 8006d00:	40020428 	.word	0x40020428
 8006d04:	40020440 	.word	0x40020440
 8006d08:	40020458 	.word	0x40020458
 8006d0c:	40020470 	.word	0x40020470
 8006d10:	40020488 	.word	0x40020488
 8006d14:	400204a0 	.word	0x400204a0
 8006d18:	400204b8 	.word	0x400204b8
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 020a 	bic.w	r2, r2, #10
 8006d2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 8097 	beq.w	8006e74 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d4e:	e091      	b.n	8006e74 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d54:	f003 031f 	and.w	r3, r3, #31
 8006d58:	2208      	movs	r2, #8
 8006d5a:	409a      	lsls	r2, r3
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8088 	beq.w	8006e76 <HAL_DMA_IRQHandler+0xe0e>
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 8082 	beq.w	8006e76 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a41      	ldr	r2, [pc, #260]	; (8006e7c <HAL_DMA_IRQHandler+0xe14>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d04a      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a3f      	ldr	r2, [pc, #252]	; (8006e80 <HAL_DMA_IRQHandler+0xe18>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d045      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a3e      	ldr	r2, [pc, #248]	; (8006e84 <HAL_DMA_IRQHandler+0xe1c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d040      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a3c      	ldr	r2, [pc, #240]	; (8006e88 <HAL_DMA_IRQHandler+0xe20>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d03b      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a3b      	ldr	r2, [pc, #236]	; (8006e8c <HAL_DMA_IRQHandler+0xe24>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d036      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a39      	ldr	r2, [pc, #228]	; (8006e90 <HAL_DMA_IRQHandler+0xe28>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d031      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a38      	ldr	r2, [pc, #224]	; (8006e94 <HAL_DMA_IRQHandler+0xe2c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d02c      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a36      	ldr	r2, [pc, #216]	; (8006e98 <HAL_DMA_IRQHandler+0xe30>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d027      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a35      	ldr	r2, [pc, #212]	; (8006e9c <HAL_DMA_IRQHandler+0xe34>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d022      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a33      	ldr	r2, [pc, #204]	; (8006ea0 <HAL_DMA_IRQHandler+0xe38>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d01d      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a32      	ldr	r2, [pc, #200]	; (8006ea4 <HAL_DMA_IRQHandler+0xe3c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d018      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a30      	ldr	r2, [pc, #192]	; (8006ea8 <HAL_DMA_IRQHandler+0xe40>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d013      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a2f      	ldr	r2, [pc, #188]	; (8006eac <HAL_DMA_IRQHandler+0xe44>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d00e      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a2d      	ldr	r2, [pc, #180]	; (8006eb0 <HAL_DMA_IRQHandler+0xe48>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d009      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a2c      	ldr	r2, [pc, #176]	; (8006eb4 <HAL_DMA_IRQHandler+0xe4c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d004      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xdaa>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a2a      	ldr	r2, [pc, #168]	; (8006eb8 <HAL_DMA_IRQHandler+0xe50>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d108      	bne.n	8006e24 <HAL_DMA_IRQHandler+0xdbc>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 021c 	bic.w	r2, r2, #28
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	e007      	b.n	8006e34 <HAL_DMA_IRQHandler+0xdcc>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 020e 	bic.w	r2, r2, #14
 8006e32:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e38:	f003 031f 	and.w	r3, r3, #31
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	409a      	lsls	r2, r3
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d009      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	4798      	blx	r3
 8006e6a:	e004      	b.n	8006e76 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006e6c:	bf00      	nop
 8006e6e:	e002      	b.n	8006e76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e70:	bf00      	nop
 8006e72:	e000      	b.n	8006e76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e74:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e76:	3728      	adds	r7, #40	; 0x28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40020010 	.word	0x40020010
 8006e80:	40020028 	.word	0x40020028
 8006e84:	40020040 	.word	0x40020040
 8006e88:	40020058 	.word	0x40020058
 8006e8c:	40020070 	.word	0x40020070
 8006e90:	40020088 	.word	0x40020088
 8006e94:	400200a0 	.word	0x400200a0
 8006e98:	400200b8 	.word	0x400200b8
 8006e9c:	40020410 	.word	0x40020410
 8006ea0:	40020428 	.word	0x40020428
 8006ea4:	40020440 	.word	0x40020440
 8006ea8:	40020458 	.word	0x40020458
 8006eac:	40020470 	.word	0x40020470
 8006eb0:	40020488 	.word	0x40020488
 8006eb4:	400204a0 	.word	0x400204a0
 8006eb8:	400204b8 	.word	0x400204b8

08006ebc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ece:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a7f      	ldr	r2, [pc, #508]	; (80070d8 <DMA_SetConfig+0x21c>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d072      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a7d      	ldr	r2, [pc, #500]	; (80070dc <DMA_SetConfig+0x220>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d06d      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a7c      	ldr	r2, [pc, #496]	; (80070e0 <DMA_SetConfig+0x224>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d068      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a7a      	ldr	r2, [pc, #488]	; (80070e4 <DMA_SetConfig+0x228>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d063      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a79      	ldr	r2, [pc, #484]	; (80070e8 <DMA_SetConfig+0x22c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d05e      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a77      	ldr	r2, [pc, #476]	; (80070ec <DMA_SetConfig+0x230>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d059      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a76      	ldr	r2, [pc, #472]	; (80070f0 <DMA_SetConfig+0x234>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d054      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a74      	ldr	r2, [pc, #464]	; (80070f4 <DMA_SetConfig+0x238>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d04f      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a73      	ldr	r2, [pc, #460]	; (80070f8 <DMA_SetConfig+0x23c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d04a      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a71      	ldr	r2, [pc, #452]	; (80070fc <DMA_SetConfig+0x240>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d045      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a70      	ldr	r2, [pc, #448]	; (8007100 <DMA_SetConfig+0x244>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d040      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a6e      	ldr	r2, [pc, #440]	; (8007104 <DMA_SetConfig+0x248>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d03b      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a6d      	ldr	r2, [pc, #436]	; (8007108 <DMA_SetConfig+0x24c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d036      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a6b      	ldr	r2, [pc, #428]	; (800710c <DMA_SetConfig+0x250>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d031      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a6a      	ldr	r2, [pc, #424]	; (8007110 <DMA_SetConfig+0x254>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d02c      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a68      	ldr	r2, [pc, #416]	; (8007114 <DMA_SetConfig+0x258>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d027      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a67      	ldr	r2, [pc, #412]	; (8007118 <DMA_SetConfig+0x25c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d022      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a65      	ldr	r2, [pc, #404]	; (800711c <DMA_SetConfig+0x260>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d01d      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a64      	ldr	r2, [pc, #400]	; (8007120 <DMA_SetConfig+0x264>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d018      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a62      	ldr	r2, [pc, #392]	; (8007124 <DMA_SetConfig+0x268>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a61      	ldr	r2, [pc, #388]	; (8007128 <DMA_SetConfig+0x26c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00e      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a5f      	ldr	r2, [pc, #380]	; (800712c <DMA_SetConfig+0x270>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d009      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a5e      	ldr	r2, [pc, #376]	; (8007130 <DMA_SetConfig+0x274>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d004      	beq.n	8006fc6 <DMA_SetConfig+0x10a>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a5c      	ldr	r2, [pc, #368]	; (8007134 <DMA_SetConfig+0x278>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d101      	bne.n	8006fca <DMA_SetConfig+0x10e>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e000      	b.n	8006fcc <DMA_SetConfig+0x110>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00d      	beq.n	8006fec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fd8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006fea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a39      	ldr	r2, [pc, #228]	; (80070d8 <DMA_SetConfig+0x21c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d04a      	beq.n	800708c <DMA_SetConfig+0x1d0>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a38      	ldr	r2, [pc, #224]	; (80070dc <DMA_SetConfig+0x220>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d045      	beq.n	800708c <DMA_SetConfig+0x1d0>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a36      	ldr	r2, [pc, #216]	; (80070e0 <DMA_SetConfig+0x224>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d040      	beq.n	800708c <DMA_SetConfig+0x1d0>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a35      	ldr	r2, [pc, #212]	; (80070e4 <DMA_SetConfig+0x228>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d03b      	beq.n	800708c <DMA_SetConfig+0x1d0>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a33      	ldr	r2, [pc, #204]	; (80070e8 <DMA_SetConfig+0x22c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d036      	beq.n	800708c <DMA_SetConfig+0x1d0>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a32      	ldr	r2, [pc, #200]	; (80070ec <DMA_SetConfig+0x230>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d031      	beq.n	800708c <DMA_SetConfig+0x1d0>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a30      	ldr	r2, [pc, #192]	; (80070f0 <DMA_SetConfig+0x234>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d02c      	beq.n	800708c <DMA_SetConfig+0x1d0>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a2f      	ldr	r2, [pc, #188]	; (80070f4 <DMA_SetConfig+0x238>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d027      	beq.n	800708c <DMA_SetConfig+0x1d0>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a2d      	ldr	r2, [pc, #180]	; (80070f8 <DMA_SetConfig+0x23c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d022      	beq.n	800708c <DMA_SetConfig+0x1d0>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a2c      	ldr	r2, [pc, #176]	; (80070fc <DMA_SetConfig+0x240>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d01d      	beq.n	800708c <DMA_SetConfig+0x1d0>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a2a      	ldr	r2, [pc, #168]	; (8007100 <DMA_SetConfig+0x244>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d018      	beq.n	800708c <DMA_SetConfig+0x1d0>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a29      	ldr	r2, [pc, #164]	; (8007104 <DMA_SetConfig+0x248>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d013      	beq.n	800708c <DMA_SetConfig+0x1d0>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a27      	ldr	r2, [pc, #156]	; (8007108 <DMA_SetConfig+0x24c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00e      	beq.n	800708c <DMA_SetConfig+0x1d0>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a26      	ldr	r2, [pc, #152]	; (800710c <DMA_SetConfig+0x250>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d009      	beq.n	800708c <DMA_SetConfig+0x1d0>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a24      	ldr	r2, [pc, #144]	; (8007110 <DMA_SetConfig+0x254>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d004      	beq.n	800708c <DMA_SetConfig+0x1d0>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a23      	ldr	r2, [pc, #140]	; (8007114 <DMA_SetConfig+0x258>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d101      	bne.n	8007090 <DMA_SetConfig+0x1d4>
 800708c:	2301      	movs	r3, #1
 800708e:	e000      	b.n	8007092 <DMA_SetConfig+0x1d6>
 8007090:	2300      	movs	r3, #0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d059      	beq.n	800714a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800709a:	f003 031f 	and.w	r3, r3, #31
 800709e:	223f      	movs	r2, #63	; 0x3f
 80070a0:	409a      	lsls	r2, r3
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070b4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2b40      	cmp	r3, #64	; 0x40
 80070c4:	d138      	bne.n	8007138 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070d6:	e086      	b.n	80071e6 <DMA_SetConfig+0x32a>
 80070d8:	40020010 	.word	0x40020010
 80070dc:	40020028 	.word	0x40020028
 80070e0:	40020040 	.word	0x40020040
 80070e4:	40020058 	.word	0x40020058
 80070e8:	40020070 	.word	0x40020070
 80070ec:	40020088 	.word	0x40020088
 80070f0:	400200a0 	.word	0x400200a0
 80070f4:	400200b8 	.word	0x400200b8
 80070f8:	40020410 	.word	0x40020410
 80070fc:	40020428 	.word	0x40020428
 8007100:	40020440 	.word	0x40020440
 8007104:	40020458 	.word	0x40020458
 8007108:	40020470 	.word	0x40020470
 800710c:	40020488 	.word	0x40020488
 8007110:	400204a0 	.word	0x400204a0
 8007114:	400204b8 	.word	0x400204b8
 8007118:	58025408 	.word	0x58025408
 800711c:	5802541c 	.word	0x5802541c
 8007120:	58025430 	.word	0x58025430
 8007124:	58025444 	.word	0x58025444
 8007128:	58025458 	.word	0x58025458
 800712c:	5802546c 	.word	0x5802546c
 8007130:	58025480 	.word	0x58025480
 8007134:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	60da      	str	r2, [r3, #12]
}
 8007148:	e04d      	b.n	80071e6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a29      	ldr	r2, [pc, #164]	; (80071f4 <DMA_SetConfig+0x338>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d022      	beq.n	800719a <DMA_SetConfig+0x2de>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a27      	ldr	r2, [pc, #156]	; (80071f8 <DMA_SetConfig+0x33c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d01d      	beq.n	800719a <DMA_SetConfig+0x2de>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a26      	ldr	r2, [pc, #152]	; (80071fc <DMA_SetConfig+0x340>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d018      	beq.n	800719a <DMA_SetConfig+0x2de>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a24      	ldr	r2, [pc, #144]	; (8007200 <DMA_SetConfig+0x344>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d013      	beq.n	800719a <DMA_SetConfig+0x2de>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a23      	ldr	r2, [pc, #140]	; (8007204 <DMA_SetConfig+0x348>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d00e      	beq.n	800719a <DMA_SetConfig+0x2de>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a21      	ldr	r2, [pc, #132]	; (8007208 <DMA_SetConfig+0x34c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d009      	beq.n	800719a <DMA_SetConfig+0x2de>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a20      	ldr	r2, [pc, #128]	; (800720c <DMA_SetConfig+0x350>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d004      	beq.n	800719a <DMA_SetConfig+0x2de>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a1e      	ldr	r2, [pc, #120]	; (8007210 <DMA_SetConfig+0x354>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d101      	bne.n	800719e <DMA_SetConfig+0x2e2>
 800719a:	2301      	movs	r3, #1
 800719c:	e000      	b.n	80071a0 <DMA_SetConfig+0x2e4>
 800719e:	2300      	movs	r3, #0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d020      	beq.n	80071e6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	2201      	movs	r2, #1
 80071ae:	409a      	lsls	r2, r3
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	2b40      	cmp	r3, #64	; 0x40
 80071c2:	d108      	bne.n	80071d6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	60da      	str	r2, [r3, #12]
}
 80071d4:	e007      	b.n	80071e6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	60da      	str	r2, [r3, #12]
}
 80071e6:	bf00      	nop
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	58025408 	.word	0x58025408
 80071f8:	5802541c 	.word	0x5802541c
 80071fc:	58025430 	.word	0x58025430
 8007200:	58025444 	.word	0x58025444
 8007204:	58025458 	.word	0x58025458
 8007208:	5802546c 	.word	0x5802546c
 800720c:	58025480 	.word	0x58025480
 8007210:	58025494 	.word	0x58025494

08007214 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a42      	ldr	r2, [pc, #264]	; (800732c <DMA_CalcBaseAndBitshift+0x118>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d04a      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a41      	ldr	r2, [pc, #260]	; (8007330 <DMA_CalcBaseAndBitshift+0x11c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d045      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a3f      	ldr	r2, [pc, #252]	; (8007334 <DMA_CalcBaseAndBitshift+0x120>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d040      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a3e      	ldr	r2, [pc, #248]	; (8007338 <DMA_CalcBaseAndBitshift+0x124>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d03b      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a3c      	ldr	r2, [pc, #240]	; (800733c <DMA_CalcBaseAndBitshift+0x128>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d036      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a3b      	ldr	r2, [pc, #236]	; (8007340 <DMA_CalcBaseAndBitshift+0x12c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d031      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a39      	ldr	r2, [pc, #228]	; (8007344 <DMA_CalcBaseAndBitshift+0x130>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d02c      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a38      	ldr	r2, [pc, #224]	; (8007348 <DMA_CalcBaseAndBitshift+0x134>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d027      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a36      	ldr	r2, [pc, #216]	; (800734c <DMA_CalcBaseAndBitshift+0x138>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d022      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a35      	ldr	r2, [pc, #212]	; (8007350 <DMA_CalcBaseAndBitshift+0x13c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d01d      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a33      	ldr	r2, [pc, #204]	; (8007354 <DMA_CalcBaseAndBitshift+0x140>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d018      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a32      	ldr	r2, [pc, #200]	; (8007358 <DMA_CalcBaseAndBitshift+0x144>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d013      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a30      	ldr	r2, [pc, #192]	; (800735c <DMA_CalcBaseAndBitshift+0x148>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d00e      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a2f      	ldr	r2, [pc, #188]	; (8007360 <DMA_CalcBaseAndBitshift+0x14c>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d009      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a2d      	ldr	r2, [pc, #180]	; (8007364 <DMA_CalcBaseAndBitshift+0x150>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d004      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xa8>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a2c      	ldr	r2, [pc, #176]	; (8007368 <DMA_CalcBaseAndBitshift+0x154>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d101      	bne.n	80072c0 <DMA_CalcBaseAndBitshift+0xac>
 80072bc:	2301      	movs	r3, #1
 80072be:	e000      	b.n	80072c2 <DMA_CalcBaseAndBitshift+0xae>
 80072c0:	2300      	movs	r3, #0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d024      	beq.n	8007310 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	3b10      	subs	r3, #16
 80072ce:	4a27      	ldr	r2, [pc, #156]	; (800736c <DMA_CalcBaseAndBitshift+0x158>)
 80072d0:	fba2 2303 	umull	r2, r3, r2, r3
 80072d4:	091b      	lsrs	r3, r3, #4
 80072d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	4a24      	ldr	r2, [pc, #144]	; (8007370 <DMA_CalcBaseAndBitshift+0x15c>)
 80072e0:	5cd3      	ldrb	r3, [r2, r3]
 80072e2:	461a      	mov	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d908      	bls.n	8007300 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	4b1f      	ldr	r3, [pc, #124]	; (8007374 <DMA_CalcBaseAndBitshift+0x160>)
 80072f6:	4013      	ands	r3, r2
 80072f8:	1d1a      	adds	r2, r3, #4
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	659a      	str	r2, [r3, #88]	; 0x58
 80072fe:	e00d      	b.n	800731c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	461a      	mov	r2, r3
 8007306:	4b1b      	ldr	r3, [pc, #108]	; (8007374 <DMA_CalcBaseAndBitshift+0x160>)
 8007308:	4013      	ands	r3, r2
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	6593      	str	r3, [r2, #88]	; 0x58
 800730e:	e005      	b.n	800731c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007320:	4618      	mov	r0, r3
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	40020010 	.word	0x40020010
 8007330:	40020028 	.word	0x40020028
 8007334:	40020040 	.word	0x40020040
 8007338:	40020058 	.word	0x40020058
 800733c:	40020070 	.word	0x40020070
 8007340:	40020088 	.word	0x40020088
 8007344:	400200a0 	.word	0x400200a0
 8007348:	400200b8 	.word	0x400200b8
 800734c:	40020410 	.word	0x40020410
 8007350:	40020428 	.word	0x40020428
 8007354:	40020440 	.word	0x40020440
 8007358:	40020458 	.word	0x40020458
 800735c:	40020470 	.word	0x40020470
 8007360:	40020488 	.word	0x40020488
 8007364:	400204a0 	.word	0x400204a0
 8007368:	400204b8 	.word	0x400204b8
 800736c:	aaaaaaab 	.word	0xaaaaaaab
 8007370:	08010f38 	.word	0x08010f38
 8007374:	fffffc00 	.word	0xfffffc00

08007378 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d120      	bne.n	80073ce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007390:	2b03      	cmp	r3, #3
 8007392:	d858      	bhi.n	8007446 <DMA_CheckFifoParam+0xce>
 8007394:	a201      	add	r2, pc, #4	; (adr r2, 800739c <DMA_CheckFifoParam+0x24>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	080073ad 	.word	0x080073ad
 80073a0:	080073bf 	.word	0x080073bf
 80073a4:	080073ad 	.word	0x080073ad
 80073a8:	08007447 	.word	0x08007447
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d048      	beq.n	800744a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073bc:	e045      	b.n	800744a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073c6:	d142      	bne.n	800744e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073cc:	e03f      	b.n	800744e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d6:	d123      	bne.n	8007420 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d838      	bhi.n	8007452 <DMA_CheckFifoParam+0xda>
 80073e0:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <DMA_CheckFifoParam+0x70>)
 80073e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e6:	bf00      	nop
 80073e8:	080073f9 	.word	0x080073f9
 80073ec:	080073ff 	.word	0x080073ff
 80073f0:	080073f9 	.word	0x080073f9
 80073f4:	08007411 	.word	0x08007411
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	73fb      	strb	r3, [r7, #15]
        break;
 80073fc:	e030      	b.n	8007460 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d025      	beq.n	8007456 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800740e:	e022      	b.n	8007456 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007418:	d11f      	bne.n	800745a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800741e:	e01c      	b.n	800745a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007424:	2b02      	cmp	r3, #2
 8007426:	d902      	bls.n	800742e <DMA_CheckFifoParam+0xb6>
 8007428:	2b03      	cmp	r3, #3
 800742a:	d003      	beq.n	8007434 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800742c:	e018      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	73fb      	strb	r3, [r7, #15]
        break;
 8007432:	e015      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00e      	beq.n	800745e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	73fb      	strb	r3, [r7, #15]
    break;
 8007444:	e00b      	b.n	800745e <DMA_CheckFifoParam+0xe6>
        break;
 8007446:	bf00      	nop
 8007448:	e00a      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
        break;
 800744a:	bf00      	nop
 800744c:	e008      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
        break;
 800744e:	bf00      	nop
 8007450:	e006      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
        break;
 8007452:	bf00      	nop
 8007454:	e004      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
        break;
 8007456:	bf00      	nop
 8007458:	e002      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
        break;
 800745a:	bf00      	nop
 800745c:	e000      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
    break;
 800745e:	bf00      	nop
    }
  }

  return status;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop

08007470 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a38      	ldr	r2, [pc, #224]	; (8007564 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d022      	beq.n	80074ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a36      	ldr	r2, [pc, #216]	; (8007568 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d01d      	beq.n	80074ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a35      	ldr	r2, [pc, #212]	; (800756c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d018      	beq.n	80074ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a33      	ldr	r2, [pc, #204]	; (8007570 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d013      	beq.n	80074ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a32      	ldr	r2, [pc, #200]	; (8007574 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d00e      	beq.n	80074ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a30      	ldr	r2, [pc, #192]	; (8007578 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d009      	beq.n	80074ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a2f      	ldr	r2, [pc, #188]	; (800757c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d004      	beq.n	80074ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a2d      	ldr	r2, [pc, #180]	; (8007580 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d101      	bne.n	80074d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e000      	b.n	80074d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80074d2:	2300      	movs	r3, #0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d01a      	beq.n	800750e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	3b08      	subs	r3, #8
 80074e0:	4a28      	ldr	r2, [pc, #160]	; (8007584 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80074e2:	fba2 2303 	umull	r2, r3, r2, r3
 80074e6:	091b      	lsrs	r3, r3, #4
 80074e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	4b26      	ldr	r3, [pc, #152]	; (8007588 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80074ee:	4413      	add	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	461a      	mov	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a24      	ldr	r2, [pc, #144]	; (800758c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80074fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	2201      	movs	r2, #1
 8007506:	409a      	lsls	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800750c:	e024      	b.n	8007558 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	3b10      	subs	r3, #16
 8007516:	4a1e      	ldr	r2, [pc, #120]	; (8007590 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007518:	fba2 2303 	umull	r2, r3, r2, r3
 800751c:	091b      	lsrs	r3, r3, #4
 800751e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d806      	bhi.n	8007536 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	4a1b      	ldr	r2, [pc, #108]	; (8007598 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d902      	bls.n	8007536 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	3308      	adds	r3, #8
 8007534:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4b18      	ldr	r3, [pc, #96]	; (800759c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	461a      	mov	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a16      	ldr	r2, [pc, #88]	; (80075a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007548:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f003 031f 	and.w	r3, r3, #31
 8007550:	2201      	movs	r2, #1
 8007552:	409a      	lsls	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007558:	bf00      	nop
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	58025408 	.word	0x58025408
 8007568:	5802541c 	.word	0x5802541c
 800756c:	58025430 	.word	0x58025430
 8007570:	58025444 	.word	0x58025444
 8007574:	58025458 	.word	0x58025458
 8007578:	5802546c 	.word	0x5802546c
 800757c:	58025480 	.word	0x58025480
 8007580:	58025494 	.word	0x58025494
 8007584:	cccccccd 	.word	0xcccccccd
 8007588:	16009600 	.word	0x16009600
 800758c:	58025880 	.word	0x58025880
 8007590:	aaaaaaab 	.word	0xaaaaaaab
 8007594:	400204b8 	.word	0x400204b8
 8007598:	4002040f 	.word	0x4002040f
 800759c:	10008200 	.word	0x10008200
 80075a0:	40020880 	.word	0x40020880

080075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d04a      	beq.n	8007650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d847      	bhi.n	8007650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a25      	ldr	r2, [pc, #148]	; (800765c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d022      	beq.n	8007610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a24      	ldr	r2, [pc, #144]	; (8007660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d01d      	beq.n	8007610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a22      	ldr	r2, [pc, #136]	; (8007664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d018      	beq.n	8007610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a21      	ldr	r2, [pc, #132]	; (8007668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d013      	beq.n	8007610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a1f      	ldr	r2, [pc, #124]	; (800766c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00e      	beq.n	8007610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a1e      	ldr	r2, [pc, #120]	; (8007670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d009      	beq.n	8007610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a1c      	ldr	r2, [pc, #112]	; (8007674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d004      	beq.n	8007610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a1b      	ldr	r2, [pc, #108]	; (8007678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d101      	bne.n	8007614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007610:	2301      	movs	r3, #1
 8007612:	e000      	b.n	8007616 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007614:	2300      	movs	r3, #0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4b17      	ldr	r3, [pc, #92]	; (800767c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	461a      	mov	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a15      	ldr	r2, [pc, #84]	; (8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800762c:	671a      	str	r2, [r3, #112]	; 0x70
 800762e:	e009      	b.n	8007644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4b14      	ldr	r3, [pc, #80]	; (8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	461a      	mov	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a11      	ldr	r2, [pc, #68]	; (8007688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007642:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	3b01      	subs	r3, #1
 8007648:	2201      	movs	r2, #1
 800764a:	409a      	lsls	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007650:	bf00      	nop
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	58025408 	.word	0x58025408
 8007660:	5802541c 	.word	0x5802541c
 8007664:	58025430 	.word	0x58025430
 8007668:	58025444 	.word	0x58025444
 800766c:	58025458 	.word	0x58025458
 8007670:	5802546c 	.word	0x5802546c
 8007674:	58025480 	.word	0x58025480
 8007678:	58025494 	.word	0x58025494
 800767c:	1600963f 	.word	0x1600963f
 8007680:	58025940 	.word	0x58025940
 8007684:	1000823f 	.word	0x1000823f
 8007688:	40020940 	.word	0x40020940

0800768c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800768c:	b480      	push	{r7}
 800768e:	b089      	sub	sp, #36	; 0x24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007696:	2300      	movs	r3, #0
 8007698:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800769a:	4b89      	ldr	r3, [pc, #548]	; (80078c0 <HAL_GPIO_Init+0x234>)
 800769c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800769e:	e194      	b.n	80079ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	2101      	movs	r1, #1
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	fa01 f303 	lsl.w	r3, r1, r3
 80076ac:	4013      	ands	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 8186 	beq.w	80079c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f003 0303 	and.w	r3, r3, #3
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d005      	beq.n	80076d0 <HAL_GPIO_Init+0x44>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f003 0303 	and.w	r3, r3, #3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d130      	bne.n	8007732 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	005b      	lsls	r3, r3, #1
 80076da:	2203      	movs	r2, #3
 80076dc:	fa02 f303 	lsl.w	r3, r2, r3
 80076e0:	43db      	mvns	r3, r3
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	4013      	ands	r3, r2
 80076e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	68da      	ldr	r2, [r3, #12]
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	fa02 f303 	lsl.w	r3, r2, r3
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007706:	2201      	movs	r2, #1
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	fa02 f303 	lsl.w	r3, r2, r3
 800770e:	43db      	mvns	r3, r3
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	4013      	ands	r3, r2
 8007714:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	091b      	lsrs	r3, r3, #4
 800771c:	f003 0201 	and.w	r2, r3, #1
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	fa02 f303 	lsl.w	r3, r2, r3
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	4313      	orrs	r3, r2
 800772a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	2b03      	cmp	r3, #3
 800773c:	d017      	beq.n	800776e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	2203      	movs	r2, #3
 800774a:	fa02 f303 	lsl.w	r3, r2, r3
 800774e:	43db      	mvns	r3, r3
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	4013      	ands	r3, r2
 8007754:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	fa02 f303 	lsl.w	r3, r2, r3
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	4313      	orrs	r3, r2
 8007766:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	2b02      	cmp	r3, #2
 8007778:	d123      	bne.n	80077c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	08da      	lsrs	r2, r3, #3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3208      	adds	r2, #8
 8007782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	f003 0307 	and.w	r3, r3, #7
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	220f      	movs	r2, #15
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	43db      	mvns	r3, r3
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	4013      	ands	r3, r2
 800779c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	691a      	ldr	r2, [r3, #16]
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	f003 0307 	and.w	r3, r3, #7
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	fa02 f303 	lsl.w	r3, r2, r3
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	08da      	lsrs	r2, r3, #3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3208      	adds	r2, #8
 80077bc:	69b9      	ldr	r1, [r7, #24]
 80077be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	2203      	movs	r2, #3
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	43db      	mvns	r3, r3
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	4013      	ands	r3, r2
 80077d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f003 0203 	and.w	r2, r3, #3
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 80e0 	beq.w	80079c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007804:	4b2f      	ldr	r3, [pc, #188]	; (80078c4 <HAL_GPIO_Init+0x238>)
 8007806:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800780a:	4a2e      	ldr	r2, [pc, #184]	; (80078c4 <HAL_GPIO_Init+0x238>)
 800780c:	f043 0302 	orr.w	r3, r3, #2
 8007810:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007814:	4b2b      	ldr	r3, [pc, #172]	; (80078c4 <HAL_GPIO_Init+0x238>)
 8007816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007822:	4a29      	ldr	r2, [pc, #164]	; (80078c8 <HAL_GPIO_Init+0x23c>)
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	089b      	lsrs	r3, r3, #2
 8007828:	3302      	adds	r3, #2
 800782a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800782e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	220f      	movs	r2, #15
 800783a:	fa02 f303 	lsl.w	r3, r2, r3
 800783e:	43db      	mvns	r3, r3
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	4013      	ands	r3, r2
 8007844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a20      	ldr	r2, [pc, #128]	; (80078cc <HAL_GPIO_Init+0x240>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d052      	beq.n	80078f4 <HAL_GPIO_Init+0x268>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a1f      	ldr	r2, [pc, #124]	; (80078d0 <HAL_GPIO_Init+0x244>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d031      	beq.n	80078ba <HAL_GPIO_Init+0x22e>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a1e      	ldr	r2, [pc, #120]	; (80078d4 <HAL_GPIO_Init+0x248>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d02b      	beq.n	80078b6 <HAL_GPIO_Init+0x22a>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a1d      	ldr	r2, [pc, #116]	; (80078d8 <HAL_GPIO_Init+0x24c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d025      	beq.n	80078b2 <HAL_GPIO_Init+0x226>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a1c      	ldr	r2, [pc, #112]	; (80078dc <HAL_GPIO_Init+0x250>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d01f      	beq.n	80078ae <HAL_GPIO_Init+0x222>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a1b      	ldr	r2, [pc, #108]	; (80078e0 <HAL_GPIO_Init+0x254>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d019      	beq.n	80078aa <HAL_GPIO_Init+0x21e>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a1a      	ldr	r2, [pc, #104]	; (80078e4 <HAL_GPIO_Init+0x258>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d013      	beq.n	80078a6 <HAL_GPIO_Init+0x21a>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a19      	ldr	r2, [pc, #100]	; (80078e8 <HAL_GPIO_Init+0x25c>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d00d      	beq.n	80078a2 <HAL_GPIO_Init+0x216>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a18      	ldr	r2, [pc, #96]	; (80078ec <HAL_GPIO_Init+0x260>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d007      	beq.n	800789e <HAL_GPIO_Init+0x212>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a17      	ldr	r2, [pc, #92]	; (80078f0 <HAL_GPIO_Init+0x264>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d101      	bne.n	800789a <HAL_GPIO_Init+0x20e>
 8007896:	2309      	movs	r3, #9
 8007898:	e02d      	b.n	80078f6 <HAL_GPIO_Init+0x26a>
 800789a:	230a      	movs	r3, #10
 800789c:	e02b      	b.n	80078f6 <HAL_GPIO_Init+0x26a>
 800789e:	2308      	movs	r3, #8
 80078a0:	e029      	b.n	80078f6 <HAL_GPIO_Init+0x26a>
 80078a2:	2307      	movs	r3, #7
 80078a4:	e027      	b.n	80078f6 <HAL_GPIO_Init+0x26a>
 80078a6:	2306      	movs	r3, #6
 80078a8:	e025      	b.n	80078f6 <HAL_GPIO_Init+0x26a>
 80078aa:	2305      	movs	r3, #5
 80078ac:	e023      	b.n	80078f6 <HAL_GPIO_Init+0x26a>
 80078ae:	2304      	movs	r3, #4
 80078b0:	e021      	b.n	80078f6 <HAL_GPIO_Init+0x26a>
 80078b2:	2303      	movs	r3, #3
 80078b4:	e01f      	b.n	80078f6 <HAL_GPIO_Init+0x26a>
 80078b6:	2302      	movs	r3, #2
 80078b8:	e01d      	b.n	80078f6 <HAL_GPIO_Init+0x26a>
 80078ba:	2301      	movs	r3, #1
 80078bc:	e01b      	b.n	80078f6 <HAL_GPIO_Init+0x26a>
 80078be:	bf00      	nop
 80078c0:	58000080 	.word	0x58000080
 80078c4:	58024400 	.word	0x58024400
 80078c8:	58000400 	.word	0x58000400
 80078cc:	58020000 	.word	0x58020000
 80078d0:	58020400 	.word	0x58020400
 80078d4:	58020800 	.word	0x58020800
 80078d8:	58020c00 	.word	0x58020c00
 80078dc:	58021000 	.word	0x58021000
 80078e0:	58021400 	.word	0x58021400
 80078e4:	58021800 	.word	0x58021800
 80078e8:	58021c00 	.word	0x58021c00
 80078ec:	58022000 	.word	0x58022000
 80078f0:	58022400 	.word	0x58022400
 80078f4:	2300      	movs	r3, #0
 80078f6:	69fa      	ldr	r2, [r7, #28]
 80078f8:	f002 0203 	and.w	r2, r2, #3
 80078fc:	0092      	lsls	r2, r2, #2
 80078fe:	4093      	lsls	r3, r2
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	4313      	orrs	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007906:	4938      	ldr	r1, [pc, #224]	; (80079e8 <HAL_GPIO_Init+0x35c>)
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	089b      	lsrs	r3, r3, #2
 800790c:	3302      	adds	r3, #2
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	43db      	mvns	r3, r3
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	4013      	ands	r3, r2
 8007924:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	4313      	orrs	r3, r2
 8007938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800793a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	43db      	mvns	r3, r3
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	4013      	ands	r3, r2
 8007952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	4313      	orrs	r3, r2
 8007966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	43db      	mvns	r3, r3
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	4013      	ands	r3, r2
 800797e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	4313      	orrs	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	43db      	mvns	r3, r3
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	4013      	ands	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	3301      	adds	r3, #1
 80079c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	fa22 f303 	lsr.w	r3, r2, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f47f ae63 	bne.w	80076a0 <HAL_GPIO_Init+0x14>
  }
}
 80079da:	bf00      	nop
 80079dc:	bf00      	nop
 80079de:	3724      	adds	r7, #36	; 0x24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	58000400 	.word	0x58000400

080079ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691a      	ldr	r2, [r3, #16]
 80079fc:	887b      	ldrh	r3, [r7, #2]
 80079fe:	4013      	ands	r3, r2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a04:	2301      	movs	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
 8007a08:	e001      	b.n	8007a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	807b      	strh	r3, [r7, #2]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a2c:	787b      	ldrb	r3, [r7, #1]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a32:	887a      	ldrh	r2, [r7, #2]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a38:	e003      	b.n	8007a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a3a:	887b      	ldrh	r3, [r7, #2]
 8007a3c:	041a      	lsls	r2, r3, #16
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	619a      	str	r2, [r3, #24]
}
 8007a42:	bf00      	nop
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
	...

08007a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e08b      	b.n	8007b7a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d106      	bne.n	8007a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7fa fa82 	bl	8001f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2224      	movs	r2, #36	; 0x24
 8007a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0201 	bic.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007aa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ab0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d107      	bne.n	8007aca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689a      	ldr	r2, [r3, #8]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ac6:	609a      	str	r2, [r3, #8]
 8007ac8:	e006      	b.n	8007ad8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689a      	ldr	r2, [r3, #8]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007ad6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d108      	bne.n	8007af2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aee:	605a      	str	r2, [r3, #4]
 8007af0:	e007      	b.n	8007b02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6859      	ldr	r1, [r3, #4]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	4b1d      	ldr	r3, [pc, #116]	; (8007b84 <HAL_I2C_Init+0x134>)
 8007b0e:	430b      	orrs	r3, r1
 8007b10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	69d9      	ldr	r1, [r3, #28]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a1a      	ldr	r2, [r3, #32]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0201 	orr.w	r2, r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	02008000 	.word	0x02008000

08007b88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b088      	sub	sp, #32
 8007b8c:	af02      	add	r7, sp, #8
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	607a      	str	r2, [r7, #4]
 8007b92:	461a      	mov	r2, r3
 8007b94:	460b      	mov	r3, r1
 8007b96:	817b      	strh	r3, [r7, #10]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	f040 80fd 	bne.w	8007da4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d101      	bne.n	8007bb8 <HAL_I2C_Master_Transmit+0x30>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	e0f6      	b.n	8007da6 <HAL_I2C_Master_Transmit+0x21e>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007bc0:	f7fa fe2c 	bl	800281c <HAL_GetTick>
 8007bc4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	2319      	movs	r3, #25
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 fa0a 	bl	8007fec <I2C_WaitOnFlagUntilTimeout>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e0e1      	b.n	8007da6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2221      	movs	r2, #33	; 0x21
 8007be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2210      	movs	r2, #16
 8007bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	893a      	ldrh	r2, [r7, #8]
 8007c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2bff      	cmp	r3, #255	; 0xff
 8007c12:	d906      	bls.n	8007c22 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	22ff      	movs	r2, #255	; 0xff
 8007c18:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007c1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	e007      	b.n	8007c32 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007c2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c30:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d024      	beq.n	8007c84 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	781a      	ldrb	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	3b01      	subs	r3, #1
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c62:	3b01      	subs	r3, #1
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	3301      	adds	r3, #1
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	8979      	ldrh	r1, [r7, #10]
 8007c76:	4b4e      	ldr	r3, [pc, #312]	; (8007db0 <HAL_I2C_Master_Transmit+0x228>)
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 fc05 	bl	800848c <I2C_TransferConfig>
 8007c82:	e066      	b.n	8007d52 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	8979      	ldrh	r1, [r7, #10]
 8007c8c:	4b48      	ldr	r3, [pc, #288]	; (8007db0 <HAL_I2C_Master_Transmit+0x228>)
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 fbfa 	bl	800848c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007c98:	e05b      	b.n	8007d52 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	6a39      	ldr	r1, [r7, #32]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 f9fd 	bl	800809e <I2C_WaitOnTXISFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e07b      	b.n	8007da6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	781a      	ldrb	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d034      	beq.n	8007d52 <HAL_I2C_Master_Transmit+0x1ca>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d130      	bne.n	8007d52 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	2180      	movs	r1, #128	; 0x80
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f976 	bl	8007fec <I2C_WaitOnFlagUntilTimeout>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e04d      	b.n	8007da6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	2bff      	cmp	r3, #255	; 0xff
 8007d12:	d90e      	bls.n	8007d32 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	22ff      	movs	r2, #255	; 0xff
 8007d18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	8979      	ldrh	r1, [r7, #10]
 8007d22:	2300      	movs	r3, #0
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 fbae 	bl	800848c <I2C_TransferConfig>
 8007d30:	e00f      	b.n	8007d52 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	8979      	ldrh	r1, [r7, #10]
 8007d44:	2300      	movs	r3, #0
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 fb9d 	bl	800848c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d19e      	bne.n	8007c9a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	6a39      	ldr	r1, [r7, #32]
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 f9e3 	bl	800812c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e01a      	b.n	8007da6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2220      	movs	r2, #32
 8007d76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6859      	ldr	r1, [r3, #4]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4b0c      	ldr	r3, [pc, #48]	; (8007db4 <HAL_I2C_Master_Transmit+0x22c>)
 8007d84:	400b      	ands	r3, r1
 8007d86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	e000      	b.n	8007da6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007da4:	2302      	movs	r3, #2
  }
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	80002000 	.word	0x80002000
 8007db4:	fe00e800 	.word	0xfe00e800

08007db8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	817b      	strh	r3, [r7, #10]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b20      	cmp	r3, #32
 8007dd6:	f040 80db 	bne.w	8007f90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d101      	bne.n	8007de8 <HAL_I2C_Master_Receive+0x30>
 8007de4:	2302      	movs	r3, #2
 8007de6:	e0d4      	b.n	8007f92 <HAL_I2C_Master_Receive+0x1da>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007df0:	f7fa fd14 	bl	800281c <HAL_GetTick>
 8007df4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	2319      	movs	r3, #25
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 f8f2 	bl	8007fec <I2C_WaitOnFlagUntilTimeout>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e0bf      	b.n	8007f92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2222      	movs	r2, #34	; 0x22
 8007e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2210      	movs	r2, #16
 8007e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	893a      	ldrh	r2, [r7, #8]
 8007e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	2bff      	cmp	r3, #255	; 0xff
 8007e42:	d90e      	bls.n	8007e62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	22ff      	movs	r2, #255	; 0xff
 8007e48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	8979      	ldrh	r1, [r7, #10]
 8007e52:	4b52      	ldr	r3, [pc, #328]	; (8007f9c <HAL_I2C_Master_Receive+0x1e4>)
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 fb16 	bl	800848c <I2C_TransferConfig>
 8007e60:	e06d      	b.n	8007f3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	8979      	ldrh	r1, [r7, #10]
 8007e74:	4b49      	ldr	r3, [pc, #292]	; (8007f9c <HAL_I2C_Master_Receive+0x1e4>)
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 fb05 	bl	800848c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007e82:	e05c      	b.n	8007f3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	6a39      	ldr	r1, [r7, #32]
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 f993 	bl	80081b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e07c      	b.n	8007f92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d034      	beq.n	8007f3e <HAL_I2C_Master_Receive+0x186>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d130      	bne.n	8007f3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2180      	movs	r1, #128	; 0x80
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f000 f880 	bl	8007fec <I2C_WaitOnFlagUntilTimeout>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e04d      	b.n	8007f92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2bff      	cmp	r3, #255	; 0xff
 8007efe:	d90e      	bls.n	8007f1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	22ff      	movs	r2, #255	; 0xff
 8007f04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	8979      	ldrh	r1, [r7, #10]
 8007f0e:	2300      	movs	r3, #0
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 fab8 	bl	800848c <I2C_TransferConfig>
 8007f1c:	e00f      	b.n	8007f3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	8979      	ldrh	r1, [r7, #10]
 8007f30:	2300      	movs	r3, #0
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 faa7 	bl	800848c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d19d      	bne.n	8007e84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	6a39      	ldr	r1, [r7, #32]
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 f8ed 	bl	800812c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e01a      	b.n	8007f92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2220      	movs	r2, #32
 8007f62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6859      	ldr	r1, [r3, #4]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4b0c      	ldr	r3, [pc, #48]	; (8007fa0 <HAL_I2C_Master_Receive+0x1e8>)
 8007f70:	400b      	ands	r3, r1
 8007f72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	e000      	b.n	8007f92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007f90:	2302      	movs	r3, #2
  }
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	80002400 	.word	0x80002400
 8007fa0:	fe00e800 	.word	0xfe00e800

08007fa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d103      	bne.n	8007fc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d007      	beq.n	8007fe0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	699a      	ldr	r2, [r3, #24]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f042 0201 	orr.w	r2, r2, #1
 8007fde:	619a      	str	r2, [r3, #24]
  }
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	603b      	str	r3, [r7, #0]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ffc:	e03b      	b.n	8008076 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f000 f962 	bl	80082cc <I2C_IsErrorOccurred>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e041      	b.n	8008096 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008018:	d02d      	beq.n	8008076 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800801a:	f7fa fbff 	bl	800281c <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d302      	bcc.n	8008030 <I2C_WaitOnFlagUntilTimeout+0x44>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d122      	bne.n	8008076 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699a      	ldr	r2, [r3, #24]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	4013      	ands	r3, r2
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	429a      	cmp	r2, r3
 800803e:	bf0c      	ite	eq
 8008040:	2301      	moveq	r3, #1
 8008042:	2300      	movne	r3, #0
 8008044:	b2db      	uxtb	r3, r3
 8008046:	461a      	mov	r2, r3
 8008048:	79fb      	ldrb	r3, [r7, #7]
 800804a:	429a      	cmp	r2, r3
 800804c:	d113      	bne.n	8008076 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008052:	f043 0220 	orr.w	r2, r3, #32
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2220      	movs	r2, #32
 800805e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e00f      	b.n	8008096 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	699a      	ldr	r2, [r3, #24]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	4013      	ands	r3, r2
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	429a      	cmp	r2, r3
 8008084:	bf0c      	ite	eq
 8008086:	2301      	moveq	r3, #1
 8008088:	2300      	movne	r3, #0
 800808a:	b2db      	uxtb	r3, r3
 800808c:	461a      	mov	r2, r3
 800808e:	79fb      	ldrb	r3, [r7, #7]
 8008090:	429a      	cmp	r2, r3
 8008092:	d0b4      	beq.n	8007ffe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080aa:	e033      	b.n	8008114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	68b9      	ldr	r1, [r7, #8]
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 f90b 	bl	80082cc <I2C_IsErrorOccurred>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e031      	b.n	8008124 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080c6:	d025      	beq.n	8008114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080c8:	f7fa fba8 	bl	800281c <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d302      	bcc.n	80080de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d11a      	bne.n	8008114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	f003 0302 	and.w	r3, r3, #2
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d013      	beq.n	8008114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f0:	f043 0220 	orr.w	r2, r3, #32
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e007      	b.n	8008124 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b02      	cmp	r3, #2
 8008120:	d1c4      	bne.n	80080ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008138:	e02f      	b.n	800819a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	68b9      	ldr	r1, [r7, #8]
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 f8c4 	bl	80082cc <I2C_IsErrorOccurred>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e02d      	b.n	80081aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800814e:	f7fa fb65 	bl	800281c <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	429a      	cmp	r2, r3
 800815c:	d302      	bcc.n	8008164 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d11a      	bne.n	800819a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	f003 0320 	and.w	r3, r3, #32
 800816e:	2b20      	cmp	r3, #32
 8008170:	d013      	beq.n	800819a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008176:	f043 0220 	orr.w	r2, r3, #32
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2220      	movs	r2, #32
 8008182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e007      	b.n	80081aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	f003 0320 	and.w	r3, r3, #32
 80081a4:	2b20      	cmp	r3, #32
 80081a6:	d1c8      	bne.n	800813a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
	...

080081b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80081c4:	e071      	b.n	80082aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 f87e 	bl	80082cc <I2C_IsErrorOccurred>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	f003 0320 	and.w	r3, r3, #32
 80081e4:	2b20      	cmp	r3, #32
 80081e6:	d13b      	bne.n	8008260 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d138      	bne.n	8008260 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	d105      	bne.n	8008208 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	f003 0310 	and.w	r3, r3, #16
 8008212:	2b10      	cmp	r3, #16
 8008214:	d121      	bne.n	800825a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2210      	movs	r2, #16
 800821c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2204      	movs	r2, #4
 8008222:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2220      	movs	r2, #32
 800822a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6859      	ldr	r1, [r3, #4]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b24      	ldr	r3, [pc, #144]	; (80082c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008238:	400b      	ands	r3, r1
 800823a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2220      	movs	r2, #32
 8008240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	75fb      	strb	r3, [r7, #23]
 8008258:	e002      	b.n	8008260 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008260:	f7fa fadc 	bl	800281c <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	429a      	cmp	r2, r3
 800826e:	d302      	bcc.n	8008276 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d119      	bne.n	80082aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008276:	7dfb      	ldrb	r3, [r7, #23]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d116      	bne.n	80082aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	f003 0304 	and.w	r3, r3, #4
 8008286:	2b04      	cmp	r3, #4
 8008288:	d00f      	beq.n	80082aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800828e:	f043 0220 	orr.w	r2, r3, #32
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2220      	movs	r2, #32
 800829a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	f003 0304 	and.w	r3, r3, #4
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d002      	beq.n	80082be <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d083      	beq.n	80081c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80082be:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	fe00e800 	.word	0xfe00e800

080082cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08a      	sub	sp, #40	; 0x28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80082e6:	2300      	movs	r3, #0
 80082e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	f003 0310 	and.w	r3, r3, #16
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d068      	beq.n	80083ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2210      	movs	r2, #16
 80082fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008300:	e049      	b.n	8008396 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008308:	d045      	beq.n	8008396 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800830a:	f7fa fa87 	bl	800281c <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	429a      	cmp	r2, r3
 8008318:	d302      	bcc.n	8008320 <I2C_IsErrorOccurred+0x54>
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d13a      	bne.n	8008396 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800832a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008332:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800833e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008342:	d121      	bne.n	8008388 <I2C_IsErrorOccurred+0xbc>
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800834a:	d01d      	beq.n	8008388 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800834c:	7cfb      	ldrb	r3, [r7, #19]
 800834e:	2b20      	cmp	r3, #32
 8008350:	d01a      	beq.n	8008388 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008360:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008362:	f7fa fa5b 	bl	800281c <HAL_GetTick>
 8008366:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008368:	e00e      	b.n	8008388 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800836a:	f7fa fa57 	bl	800281c <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	2b19      	cmp	r3, #25
 8008376:	d907      	bls.n	8008388 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	f043 0320 	orr.w	r3, r3, #32
 800837e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008386:	e006      	b.n	8008396 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	f003 0320 	and.w	r3, r3, #32
 8008392:	2b20      	cmp	r3, #32
 8008394:	d1e9      	bne.n	800836a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	f003 0320 	and.w	r3, r3, #32
 80083a0:	2b20      	cmp	r3, #32
 80083a2:	d003      	beq.n	80083ac <I2C_IsErrorOccurred+0xe0>
 80083a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0aa      	beq.n	8008302 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80083ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d103      	bne.n	80083bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2220      	movs	r2, #32
 80083ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	f043 0304 	orr.w	r3, r3, #4
 80083c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00b      	beq.n	80083f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80083dc:	6a3b      	ldr	r3, [r7, #32]
 80083de:	f043 0301 	orr.w	r3, r3, #1
 80083e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	f043 0308 	orr.w	r3, r3, #8
 8008404:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800840e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	f043 0302 	orr.w	r3, r3, #2
 8008426:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008430:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01c      	beq.n	800847a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f7ff fdaf 	bl	8007fa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6859      	ldr	r1, [r3, #4]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	4b0d      	ldr	r3, [pc, #52]	; (8008488 <I2C_IsErrorOccurred+0x1bc>)
 8008452:	400b      	ands	r3, r1
 8008454:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	431a      	orrs	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2220      	movs	r2, #32
 8008466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800847a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800847e:	4618      	mov	r0, r3
 8008480:	3728      	adds	r7, #40	; 0x28
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	fe00e800 	.word	0xfe00e800

0800848c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800848c:	b480      	push	{r7}
 800848e:	b087      	sub	sp, #28
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	607b      	str	r3, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	817b      	strh	r3, [r7, #10]
 800849a:	4613      	mov	r3, r2
 800849c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800849e:	897b      	ldrh	r3, [r7, #10]
 80084a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084a4:	7a7b      	ldrb	r3, [r7, #9]
 80084a6:	041b      	lsls	r3, r3, #16
 80084a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	685a      	ldr	r2, [r3, #4]
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	0d5b      	lsrs	r3, r3, #21
 80084c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80084ca:	4b08      	ldr	r3, [pc, #32]	; (80084ec <I2C_TransferConfig+0x60>)
 80084cc:	430b      	orrs	r3, r1
 80084ce:	43db      	mvns	r3, r3
 80084d0:	ea02 0103 	and.w	r1, r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	430a      	orrs	r2, r1
 80084dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80084de:	bf00      	nop
 80084e0:	371c      	adds	r7, #28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	03ff63ff 	.word	0x03ff63ff

080084f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b20      	cmp	r3, #32
 8008504:	d138      	bne.n	8008578 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008510:	2302      	movs	r3, #2
 8008512:	e032      	b.n	800857a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2224      	movs	r2, #36	; 0x24
 8008520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0201 	bic.w	r2, r2, #1
 8008532:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008542:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6819      	ldr	r1, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	430a      	orrs	r2, r1
 8008552:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2220      	movs	r2, #32
 8008568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	e000      	b.n	800857a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008578:	2302      	movs	r3, #2
  }
}
 800857a:	4618      	mov	r0, r3
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008586:	b480      	push	{r7}
 8008588:	b085      	sub	sp, #20
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b20      	cmp	r3, #32
 800859a:	d139      	bne.n	8008610 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d101      	bne.n	80085aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80085a6:	2302      	movs	r3, #2
 80085a8:	e033      	b.n	8008612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2224      	movs	r2, #36	; 0x24
 80085b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 0201 	bic.w	r2, r2, #1
 80085c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80085d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	021b      	lsls	r3, r3, #8
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0201 	orr.w	r2, r2, #1
 80085fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	e000      	b.n	8008612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008610:	2302      	movs	r3, #2
  }
}
 8008612:	4618      	mov	r0, r3
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
	...

08008620 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800862c:	4b18      	ldr	r3, [pc, #96]	; (8008690 <HAL_PWR_EnterSTOPMode+0x70>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f023 0201 	bic.w	r2, r3, #1
 8008634:	4916      	ldr	r1, [pc, #88]	; (8008690 <HAL_PWR_EnterSTOPMode+0x70>)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4313      	orrs	r3, r2
 800863a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800863c:	4b14      	ldr	r3, [pc, #80]	; (8008690 <HAL_PWR_EnterSTOPMode+0x70>)
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	4a13      	ldr	r2, [pc, #76]	; (8008690 <HAL_PWR_EnterSTOPMode+0x70>)
 8008642:	f023 0305 	bic.w	r3, r3, #5
 8008646:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8008648:	4b11      	ldr	r3, [pc, #68]	; (8008690 <HAL_PWR_EnterSTOPMode+0x70>)
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	4a10      	ldr	r2, [pc, #64]	; (8008690 <HAL_PWR_EnterSTOPMode+0x70>)
 800864e:	f023 0302 	bic.w	r3, r3, #2
 8008652:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008654:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <HAL_PWR_EnterSTOPMode+0x74>)
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	4a0e      	ldr	r2, [pc, #56]	; (8008694 <HAL_PWR_EnterSTOPMode+0x74>)
 800865a:	f043 0304 	orr.w	r3, r3, #4
 800865e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8008660:	f3bf 8f4f 	dsb	sy
}
 8008664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008666:	f3bf 8f6f 	isb	sy
}
 800866a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800866c:	78fb      	ldrb	r3, [r7, #3]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d101      	bne.n	8008676 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8008672:	bf30      	wfi
 8008674:	e000      	b.n	8008678 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8008676:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008678:	4b06      	ldr	r3, [pc, #24]	; (8008694 <HAL_PWR_EnterSTOPMode+0x74>)
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	4a05      	ldr	r2, [pc, #20]	; (8008694 <HAL_PWR_EnterSTOPMode+0x74>)
 800867e:	f023 0304 	bic.w	r3, r3, #4
 8008682:	6113      	str	r3, [r2, #16]
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	58024800 	.word	0x58024800
 8008694:	e000ed00 	.word	0xe000ed00

08008698 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80086a0:	4b19      	ldr	r3, [pc, #100]	; (8008708 <HAL_PWREx_ConfigSupply+0x70>)
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f003 0304 	and.w	r3, r3, #4
 80086a8:	2b04      	cmp	r3, #4
 80086aa:	d00a      	beq.n	80086c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80086ac:	4b16      	ldr	r3, [pc, #88]	; (8008708 <HAL_PWREx_ConfigSupply+0x70>)
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f003 0307 	and.w	r3, r3, #7
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d001      	beq.n	80086be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e01f      	b.n	80086fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	e01d      	b.n	80086fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80086c2:	4b11      	ldr	r3, [pc, #68]	; (8008708 <HAL_PWREx_ConfigSupply+0x70>)
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f023 0207 	bic.w	r2, r3, #7
 80086ca:	490f      	ldr	r1, [pc, #60]	; (8008708 <HAL_PWREx_ConfigSupply+0x70>)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80086d2:	f7fa f8a3 	bl	800281c <HAL_GetTick>
 80086d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086d8:	e009      	b.n	80086ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80086da:	f7fa f89f 	bl	800281c <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086e8:	d901      	bls.n	80086ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e007      	b.n	80086fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086ee:	4b06      	ldr	r3, [pc, #24]	; (8008708 <HAL_PWREx_ConfigSupply+0x70>)
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086fa:	d1ee      	bne.n	80086da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	58024800 	.word	0x58024800

0800870c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08c      	sub	sp, #48	; 0x30
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d102      	bne.n	8008720 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	f000 bc48 	b.w	8008fb0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 8088 	beq.w	800883e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800872e:	4b99      	ldr	r3, [pc, #612]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008736:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008738:	4b96      	ldr	r3, [pc, #600]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 800873a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800873e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008740:	2b10      	cmp	r3, #16
 8008742:	d007      	beq.n	8008754 <HAL_RCC_OscConfig+0x48>
 8008744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008746:	2b18      	cmp	r3, #24
 8008748:	d111      	bne.n	800876e <HAL_RCC_OscConfig+0x62>
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	f003 0303 	and.w	r3, r3, #3
 8008750:	2b02      	cmp	r3, #2
 8008752:	d10c      	bne.n	800876e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008754:	4b8f      	ldr	r3, [pc, #572]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d06d      	beq.n	800883c <HAL_RCC_OscConfig+0x130>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d169      	bne.n	800883c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	f000 bc21 	b.w	8008fb0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008776:	d106      	bne.n	8008786 <HAL_RCC_OscConfig+0x7a>
 8008778:	4b86      	ldr	r3, [pc, #536]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a85      	ldr	r2, [pc, #532]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 800877e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	e02e      	b.n	80087e4 <HAL_RCC_OscConfig+0xd8>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10c      	bne.n	80087a8 <HAL_RCC_OscConfig+0x9c>
 800878e:	4b81      	ldr	r3, [pc, #516]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a80      	ldr	r2, [pc, #512]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 8008794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008798:	6013      	str	r3, [r2, #0]
 800879a:	4b7e      	ldr	r3, [pc, #504]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a7d      	ldr	r2, [pc, #500]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 80087a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	e01d      	b.n	80087e4 <HAL_RCC_OscConfig+0xd8>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087b0:	d10c      	bne.n	80087cc <HAL_RCC_OscConfig+0xc0>
 80087b2:	4b78      	ldr	r3, [pc, #480]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a77      	ldr	r2, [pc, #476]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 80087b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087bc:	6013      	str	r3, [r2, #0]
 80087be:	4b75      	ldr	r3, [pc, #468]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a74      	ldr	r2, [pc, #464]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 80087c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087c8:	6013      	str	r3, [r2, #0]
 80087ca:	e00b      	b.n	80087e4 <HAL_RCC_OscConfig+0xd8>
 80087cc:	4b71      	ldr	r3, [pc, #452]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a70      	ldr	r2, [pc, #448]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 80087d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	4b6e      	ldr	r3, [pc, #440]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a6d      	ldr	r2, [pc, #436]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 80087de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d013      	beq.n	8008814 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ec:	f7fa f816 	bl	800281c <HAL_GetTick>
 80087f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087f2:	e008      	b.n	8008806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087f4:	f7fa f812 	bl	800281c <HAL_GetTick>
 80087f8:	4602      	mov	r2, r0
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	2b64      	cmp	r3, #100	; 0x64
 8008800:	d901      	bls.n	8008806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e3d4      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008806:	4b63      	ldr	r3, [pc, #396]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0f0      	beq.n	80087f4 <HAL_RCC_OscConfig+0xe8>
 8008812:	e014      	b.n	800883e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008814:	f7fa f802 	bl	800281c <HAL_GetTick>
 8008818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800881a:	e008      	b.n	800882e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800881c:	f7f9 fffe 	bl	800281c <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b64      	cmp	r3, #100	; 0x64
 8008828:	d901      	bls.n	800882e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e3c0      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800882e:	4b59      	ldr	r3, [pc, #356]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1f0      	bne.n	800881c <HAL_RCC_OscConfig+0x110>
 800883a:	e000      	b.n	800883e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800883c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 80ca 	beq.w	80089e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800884c:	4b51      	ldr	r3, [pc, #324]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008854:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008856:	4b4f      	ldr	r3, [pc, #316]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 8008858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d007      	beq.n	8008872 <HAL_RCC_OscConfig+0x166>
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	2b18      	cmp	r3, #24
 8008866:	d156      	bne.n	8008916 <HAL_RCC_OscConfig+0x20a>
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	f003 0303 	and.w	r3, r3, #3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d151      	bne.n	8008916 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008872:	4b48      	ldr	r3, [pc, #288]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0304 	and.w	r3, r3, #4
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <HAL_RCC_OscConfig+0x17e>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e392      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800888a:	4b42      	ldr	r3, [pc, #264]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f023 0219 	bic.w	r2, r3, #25
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	493f      	ldr	r1, [pc, #252]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 8008898:	4313      	orrs	r3, r2
 800889a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800889c:	f7f9 ffbe 	bl	800281c <HAL_GetTick>
 80088a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088a2:	e008      	b.n	80088b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088a4:	f7f9 ffba 	bl	800281c <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d901      	bls.n	80088b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e37c      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088b6:	4b37      	ldr	r3, [pc, #220]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0304 	and.w	r3, r3, #4
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0f0      	beq.n	80088a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088c2:	f7f9 ffc7 	bl	8002854 <HAL_GetREVID>
 80088c6:	4603      	mov	r3, r0
 80088c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d817      	bhi.n	8008900 <HAL_RCC_OscConfig+0x1f4>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	2b40      	cmp	r3, #64	; 0x40
 80088d6:	d108      	bne.n	80088ea <HAL_RCC_OscConfig+0x1de>
 80088d8:	4b2e      	ldr	r3, [pc, #184]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088e0:	4a2c      	ldr	r2, [pc, #176]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 80088e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088e8:	e07a      	b.n	80089e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ea:	4b2a      	ldr	r3, [pc, #168]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	031b      	lsls	r3, r3, #12
 80088f8:	4926      	ldr	r1, [pc, #152]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088fe:	e06f      	b.n	80089e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008900:	4b24      	ldr	r3, [pc, #144]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	061b      	lsls	r3, r3, #24
 800890e:	4921      	ldr	r1, [pc, #132]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 8008910:	4313      	orrs	r3, r2
 8008912:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008914:	e064      	b.n	80089e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d047      	beq.n	80089ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800891e:	4b1d      	ldr	r3, [pc, #116]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f023 0219 	bic.w	r2, r3, #25
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	491a      	ldr	r1, [pc, #104]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 800892c:	4313      	orrs	r3, r2
 800892e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008930:	f7f9 ff74 	bl	800281c <HAL_GetTick>
 8008934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008936:	e008      	b.n	800894a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008938:	f7f9 ff70 	bl	800281c <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2b02      	cmp	r3, #2
 8008944:	d901      	bls.n	800894a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e332      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800894a:	4b12      	ldr	r3, [pc, #72]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0304 	and.w	r3, r3, #4
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0f0      	beq.n	8008938 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008956:	f7f9 ff7d 	bl	8002854 <HAL_GetREVID>
 800895a:	4603      	mov	r3, r0
 800895c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008960:	4293      	cmp	r3, r2
 8008962:	d819      	bhi.n	8008998 <HAL_RCC_OscConfig+0x28c>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	2b40      	cmp	r3, #64	; 0x40
 800896a:	d108      	bne.n	800897e <HAL_RCC_OscConfig+0x272>
 800896c:	4b09      	ldr	r3, [pc, #36]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008974:	4a07      	ldr	r2, [pc, #28]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 8008976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800897a:	6053      	str	r3, [r2, #4]
 800897c:	e030      	b.n	80089e0 <HAL_RCC_OscConfig+0x2d4>
 800897e:	4b05      	ldr	r3, [pc, #20]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	031b      	lsls	r3, r3, #12
 800898c:	4901      	ldr	r1, [pc, #4]	; (8008994 <HAL_RCC_OscConfig+0x288>)
 800898e:	4313      	orrs	r3, r2
 8008990:	604b      	str	r3, [r1, #4]
 8008992:	e025      	b.n	80089e0 <HAL_RCC_OscConfig+0x2d4>
 8008994:	58024400 	.word	0x58024400
 8008998:	4b9a      	ldr	r3, [pc, #616]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	061b      	lsls	r3, r3, #24
 80089a6:	4997      	ldr	r1, [pc, #604]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	604b      	str	r3, [r1, #4]
 80089ac:	e018      	b.n	80089e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089ae:	4b95      	ldr	r3, [pc, #596]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a94      	ldr	r2, [pc, #592]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 80089b4:	f023 0301 	bic.w	r3, r3, #1
 80089b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ba:	f7f9 ff2f 	bl	800281c <HAL_GetTick>
 80089be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089c0:	e008      	b.n	80089d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089c2:	f7f9 ff2b 	bl	800281c <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d901      	bls.n	80089d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e2ed      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089d4:	4b8b      	ldr	r3, [pc, #556]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0304 	and.w	r3, r3, #4
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1f0      	bne.n	80089c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0310 	and.w	r3, r3, #16
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 80a9 	beq.w	8008b40 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089ee:	4b85      	ldr	r3, [pc, #532]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089f8:	4b82      	ldr	r3, [pc, #520]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 80089fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d007      	beq.n	8008a14 <HAL_RCC_OscConfig+0x308>
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	2b18      	cmp	r3, #24
 8008a08:	d13a      	bne.n	8008a80 <HAL_RCC_OscConfig+0x374>
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f003 0303 	and.w	r3, r3, #3
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d135      	bne.n	8008a80 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a14:	4b7b      	ldr	r3, [pc, #492]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d005      	beq.n	8008a2c <HAL_RCC_OscConfig+0x320>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	2b80      	cmp	r3, #128	; 0x80
 8008a26:	d001      	beq.n	8008a2c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e2c1      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a2c:	f7f9 ff12 	bl	8002854 <HAL_GetREVID>
 8008a30:	4603      	mov	r3, r0
 8008a32:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d817      	bhi.n	8008a6a <HAL_RCC_OscConfig+0x35e>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	d108      	bne.n	8008a54 <HAL_RCC_OscConfig+0x348>
 8008a42:	4b70      	ldr	r3, [pc, #448]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a4a:	4a6e      	ldr	r2, [pc, #440]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008a4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a50:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a52:	e075      	b.n	8008b40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a54:	4b6b      	ldr	r3, [pc, #428]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	069b      	lsls	r3, r3, #26
 8008a62:	4968      	ldr	r1, [pc, #416]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008a64:	4313      	orrs	r3, r2
 8008a66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a68:	e06a      	b.n	8008b40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a6a:	4b66      	ldr	r3, [pc, #408]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	061b      	lsls	r3, r3, #24
 8008a78:	4962      	ldr	r1, [pc, #392]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a7e:	e05f      	b.n	8008b40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d042      	beq.n	8008b0e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a88:	4b5e      	ldr	r3, [pc, #376]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a5d      	ldr	r2, [pc, #372]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a94:	f7f9 fec2 	bl	800281c <HAL_GetTick>
 8008a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a9a:	e008      	b.n	8008aae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a9c:	f7f9 febe 	bl	800281c <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e280      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008aae:	4b55      	ldr	r3, [pc, #340]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0f0      	beq.n	8008a9c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008aba:	f7f9 fecb 	bl	8002854 <HAL_GetREVID>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	f241 0203 	movw	r2, #4099	; 0x1003
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d817      	bhi.n	8008af8 <HAL_RCC_OscConfig+0x3ec>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a1b      	ldr	r3, [r3, #32]
 8008acc:	2b20      	cmp	r3, #32
 8008ace:	d108      	bne.n	8008ae2 <HAL_RCC_OscConfig+0x3d6>
 8008ad0:	4b4c      	ldr	r3, [pc, #304]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008ad8:	4a4a      	ldr	r2, [pc, #296]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ade:	6053      	str	r3, [r2, #4]
 8008ae0:	e02e      	b.n	8008b40 <HAL_RCC_OscConfig+0x434>
 8008ae2:	4b48      	ldr	r3, [pc, #288]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a1b      	ldr	r3, [r3, #32]
 8008aee:	069b      	lsls	r3, r3, #26
 8008af0:	4944      	ldr	r1, [pc, #272]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008af2:	4313      	orrs	r3, r2
 8008af4:	604b      	str	r3, [r1, #4]
 8008af6:	e023      	b.n	8008b40 <HAL_RCC_OscConfig+0x434>
 8008af8:	4b42      	ldr	r3, [pc, #264]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	061b      	lsls	r3, r3, #24
 8008b06:	493f      	ldr	r1, [pc, #252]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	60cb      	str	r3, [r1, #12]
 8008b0c:	e018      	b.n	8008b40 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b0e:	4b3d      	ldr	r3, [pc, #244]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a3c      	ldr	r2, [pc, #240]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b1a:	f7f9 fe7f 	bl	800281c <HAL_GetTick>
 8008b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b20:	e008      	b.n	8008b34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008b22:	f7f9 fe7b 	bl	800281c <HAL_GetTick>
 8008b26:	4602      	mov	r2, r0
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d901      	bls.n	8008b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e23d      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b34:	4b33      	ldr	r3, [pc, #204]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1f0      	bne.n	8008b22 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0308 	and.w	r3, r3, #8
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d036      	beq.n	8008bba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d019      	beq.n	8008b88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b54:	4b2b      	ldr	r3, [pc, #172]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b58:	4a2a      	ldr	r2, [pc, #168]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008b5a:	f043 0301 	orr.w	r3, r3, #1
 8008b5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b60:	f7f9 fe5c 	bl	800281c <HAL_GetTick>
 8008b64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b66:	e008      	b.n	8008b7a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b68:	f7f9 fe58 	bl	800281c <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e21a      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b7a:	4b22      	ldr	r3, [pc, #136]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b7e:	f003 0302 	and.w	r3, r3, #2
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0f0      	beq.n	8008b68 <HAL_RCC_OscConfig+0x45c>
 8008b86:	e018      	b.n	8008bba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b88:	4b1e      	ldr	r3, [pc, #120]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b8c:	4a1d      	ldr	r2, [pc, #116]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008b8e:	f023 0301 	bic.w	r3, r3, #1
 8008b92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b94:	f7f9 fe42 	bl	800281c <HAL_GetTick>
 8008b98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b9a:	e008      	b.n	8008bae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b9c:	f7f9 fe3e 	bl	800281c <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d901      	bls.n	8008bae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e200      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bae:	4b15      	ldr	r3, [pc, #84]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1f0      	bne.n	8008b9c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0320 	and.w	r3, r3, #32
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d039      	beq.n	8008c3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d01c      	beq.n	8008c08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bce:	4b0d      	ldr	r3, [pc, #52]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a0c      	ldr	r2, [pc, #48]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008bda:	f7f9 fe1f 	bl	800281c <HAL_GetTick>
 8008bde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008be0:	e008      	b.n	8008bf4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008be2:	f7f9 fe1b 	bl	800281c <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d901      	bls.n	8008bf4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e1dd      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bf4:	4b03      	ldr	r3, [pc, #12]	; (8008c04 <HAL_RCC_OscConfig+0x4f8>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0f0      	beq.n	8008be2 <HAL_RCC_OscConfig+0x4d6>
 8008c00:	e01b      	b.n	8008c3a <HAL_RCC_OscConfig+0x52e>
 8008c02:	bf00      	nop
 8008c04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c08:	4b9b      	ldr	r3, [pc, #620]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a9a      	ldr	r2, [pc, #616]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c14:	f7f9 fe02 	bl	800281c <HAL_GetTick>
 8008c18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c1a:	e008      	b.n	8008c2e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c1c:	f7f9 fdfe 	bl	800281c <HAL_GetTick>
 8008c20:	4602      	mov	r2, r0
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d901      	bls.n	8008c2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e1c0      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c2e:	4b92      	ldr	r3, [pc, #584]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1f0      	bne.n	8008c1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0304 	and.w	r3, r3, #4
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f000 8081 	beq.w	8008d4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c48:	4b8c      	ldr	r3, [pc, #560]	; (8008e7c <HAL_RCC_OscConfig+0x770>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a8b      	ldr	r2, [pc, #556]	; (8008e7c <HAL_RCC_OscConfig+0x770>)
 8008c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c54:	f7f9 fde2 	bl	800281c <HAL_GetTick>
 8008c58:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c5a:	e008      	b.n	8008c6e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c5c:	f7f9 fdde 	bl	800281c <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	2b64      	cmp	r3, #100	; 0x64
 8008c68:	d901      	bls.n	8008c6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e1a0      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c6e:	4b83      	ldr	r3, [pc, #524]	; (8008e7c <HAL_RCC_OscConfig+0x770>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d0f0      	beq.n	8008c5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d106      	bne.n	8008c90 <HAL_RCC_OscConfig+0x584>
 8008c82:	4b7d      	ldr	r3, [pc, #500]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c86:	4a7c      	ldr	r2, [pc, #496]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008c88:	f043 0301 	orr.w	r3, r3, #1
 8008c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c8e:	e02d      	b.n	8008cec <HAL_RCC_OscConfig+0x5e0>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10c      	bne.n	8008cb2 <HAL_RCC_OscConfig+0x5a6>
 8008c98:	4b77      	ldr	r3, [pc, #476]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9c:	4a76      	ldr	r2, [pc, #472]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008c9e:	f023 0301 	bic.w	r3, r3, #1
 8008ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ca4:	4b74      	ldr	r3, [pc, #464]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca8:	4a73      	ldr	r2, [pc, #460]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008caa:	f023 0304 	bic.w	r3, r3, #4
 8008cae:	6713      	str	r3, [r2, #112]	; 0x70
 8008cb0:	e01c      	b.n	8008cec <HAL_RCC_OscConfig+0x5e0>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	2b05      	cmp	r3, #5
 8008cb8:	d10c      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x5c8>
 8008cba:	4b6f      	ldr	r3, [pc, #444]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cbe:	4a6e      	ldr	r2, [pc, #440]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008cc0:	f043 0304 	orr.w	r3, r3, #4
 8008cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8008cc6:	4b6c      	ldr	r3, [pc, #432]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cca:	4a6b      	ldr	r2, [pc, #428]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008ccc:	f043 0301 	orr.w	r3, r3, #1
 8008cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8008cd2:	e00b      	b.n	8008cec <HAL_RCC_OscConfig+0x5e0>
 8008cd4:	4b68      	ldr	r3, [pc, #416]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd8:	4a67      	ldr	r2, [pc, #412]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008cda:	f023 0301 	bic.w	r3, r3, #1
 8008cde:	6713      	str	r3, [r2, #112]	; 0x70
 8008ce0:	4b65      	ldr	r3, [pc, #404]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce4:	4a64      	ldr	r2, [pc, #400]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008ce6:	f023 0304 	bic.w	r3, r3, #4
 8008cea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d015      	beq.n	8008d20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cf4:	f7f9 fd92 	bl	800281c <HAL_GetTick>
 8008cf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cfa:	e00a      	b.n	8008d12 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cfc:	f7f9 fd8e 	bl	800281c <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d901      	bls.n	8008d12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e14e      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d12:	4b59      	ldr	r3, [pc, #356]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d0ee      	beq.n	8008cfc <HAL_RCC_OscConfig+0x5f0>
 8008d1e:	e014      	b.n	8008d4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d20:	f7f9 fd7c 	bl	800281c <HAL_GetTick>
 8008d24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d26:	e00a      	b.n	8008d3e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d28:	f7f9 fd78 	bl	800281c <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d901      	bls.n	8008d3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e138      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d3e:	4b4e      	ldr	r3, [pc, #312]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d42:	f003 0302 	and.w	r3, r3, #2
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1ee      	bne.n	8008d28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 812d 	beq.w	8008fae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d54:	4b48      	ldr	r3, [pc, #288]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d5c:	2b18      	cmp	r3, #24
 8008d5e:	f000 80bd 	beq.w	8008edc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	f040 809e 	bne.w	8008ea8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d6c:	4b42      	ldr	r3, [pc, #264]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a41      	ldr	r2, [pc, #260]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d78:	f7f9 fd50 	bl	800281c <HAL_GetTick>
 8008d7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d7e:	e008      	b.n	8008d92 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d80:	f7f9 fd4c 	bl	800281c <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d901      	bls.n	8008d92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e10e      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d92:	4b39      	ldr	r3, [pc, #228]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1f0      	bne.n	8008d80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d9e:	4b36      	ldr	r3, [pc, #216]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008da2:	4b37      	ldr	r3, [pc, #220]	; (8008e80 <HAL_RCC_OscConfig+0x774>)
 8008da4:	4013      	ands	r3, r2
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008dae:	0112      	lsls	r2, r2, #4
 8008db0:	430a      	orrs	r2, r1
 8008db2:	4931      	ldr	r1, [pc, #196]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	628b      	str	r3, [r1, #40]	; 0x28
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	025b      	lsls	r3, r3, #9
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	431a      	orrs	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	041b      	lsls	r3, r3, #16
 8008dd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de0:	3b01      	subs	r3, #1
 8008de2:	061b      	lsls	r3, r3, #24
 8008de4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008de8:	4923      	ldr	r1, [pc, #140]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008dee:	4b22      	ldr	r3, [pc, #136]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df2:	4a21      	ldr	r2, [pc, #132]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008df4:	f023 0301 	bic.w	r3, r3, #1
 8008df8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008dfa:	4b1f      	ldr	r3, [pc, #124]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dfe:	4b21      	ldr	r3, [pc, #132]	; (8008e84 <HAL_RCC_OscConfig+0x778>)
 8008e00:	4013      	ands	r3, r2
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e06:	00d2      	lsls	r2, r2, #3
 8008e08:	491b      	ldr	r1, [pc, #108]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e0e:	4b1a      	ldr	r3, [pc, #104]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e12:	f023 020c 	bic.w	r2, r3, #12
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1a:	4917      	ldr	r1, [pc, #92]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e20:	4b15      	ldr	r3, [pc, #84]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e24:	f023 0202 	bic.w	r2, r3, #2
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2c:	4912      	ldr	r1, [pc, #72]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e32:	4b11      	ldr	r3, [pc, #68]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e36:	4a10      	ldr	r2, [pc, #64]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e3e:	4b0e      	ldr	r3, [pc, #56]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e42:	4a0d      	ldr	r2, [pc, #52]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e4a:	4b0b      	ldr	r3, [pc, #44]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4e:	4a0a      	ldr	r2, [pc, #40]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008e56:	4b08      	ldr	r3, [pc, #32]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5a:	4a07      	ldr	r2, [pc, #28]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e5c:	f043 0301 	orr.w	r3, r3, #1
 8008e60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e62:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a04      	ldr	r2, [pc, #16]	; (8008e78 <HAL_RCC_OscConfig+0x76c>)
 8008e68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e6e:	f7f9 fcd5 	bl	800281c <HAL_GetTick>
 8008e72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e74:	e011      	b.n	8008e9a <HAL_RCC_OscConfig+0x78e>
 8008e76:	bf00      	nop
 8008e78:	58024400 	.word	0x58024400
 8008e7c:	58024800 	.word	0x58024800
 8008e80:	fffffc0c 	.word	0xfffffc0c
 8008e84:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e88:	f7f9 fcc8 	bl	800281c <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d901      	bls.n	8008e9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e08a      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e9a:	4b47      	ldr	r3, [pc, #284]	; (8008fb8 <HAL_RCC_OscConfig+0x8ac>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0f0      	beq.n	8008e88 <HAL_RCC_OscConfig+0x77c>
 8008ea6:	e082      	b.n	8008fae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ea8:	4b43      	ldr	r3, [pc, #268]	; (8008fb8 <HAL_RCC_OscConfig+0x8ac>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a42      	ldr	r2, [pc, #264]	; (8008fb8 <HAL_RCC_OscConfig+0x8ac>)
 8008eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eb4:	f7f9 fcb2 	bl	800281c <HAL_GetTick>
 8008eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008eba:	e008      	b.n	8008ece <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ebc:	f7f9 fcae 	bl	800281c <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d901      	bls.n	8008ece <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e070      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ece:	4b3a      	ldr	r3, [pc, #232]	; (8008fb8 <HAL_RCC_OscConfig+0x8ac>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1f0      	bne.n	8008ebc <HAL_RCC_OscConfig+0x7b0>
 8008eda:	e068      	b.n	8008fae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008edc:	4b36      	ldr	r3, [pc, #216]	; (8008fb8 <HAL_RCC_OscConfig+0x8ac>)
 8008ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ee2:	4b35      	ldr	r3, [pc, #212]	; (8008fb8 <HAL_RCC_OscConfig+0x8ac>)
 8008ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d031      	beq.n	8008f54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	f003 0203 	and.w	r2, r3, #3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d12a      	bne.n	8008f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	091b      	lsrs	r3, r3, #4
 8008f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d122      	bne.n	8008f54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f18:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d11a      	bne.n	8008f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	0a5b      	lsrs	r3, r3, #9
 8008f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d111      	bne.n	8008f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	0c1b      	lsrs	r3, r3, #16
 8008f34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d108      	bne.n	8008f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	0e1b      	lsrs	r3, r3, #24
 8008f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d001      	beq.n	8008f58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e02b      	b.n	8008fb0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008f58:	4b17      	ldr	r3, [pc, #92]	; (8008fb8 <HAL_RCC_OscConfig+0x8ac>)
 8008f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5c:	08db      	lsrs	r3, r3, #3
 8008f5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f62:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d01f      	beq.n	8008fae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008f6e:	4b12      	ldr	r3, [pc, #72]	; (8008fb8 <HAL_RCC_OscConfig+0x8ac>)
 8008f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f72:	4a11      	ldr	r2, [pc, #68]	; (8008fb8 <HAL_RCC_OscConfig+0x8ac>)
 8008f74:	f023 0301 	bic.w	r3, r3, #1
 8008f78:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f7a:	f7f9 fc4f 	bl	800281c <HAL_GetTick>
 8008f7e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008f80:	bf00      	nop
 8008f82:	f7f9 fc4b 	bl	800281c <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d0f9      	beq.n	8008f82 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f8e:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <HAL_RCC_OscConfig+0x8ac>)
 8008f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f92:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <HAL_RCC_OscConfig+0x8b0>)
 8008f94:	4013      	ands	r3, r2
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f9a:	00d2      	lsls	r2, r2, #3
 8008f9c:	4906      	ldr	r1, [pc, #24]	; (8008fb8 <HAL_RCC_OscConfig+0x8ac>)
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008fa2:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <HAL_RCC_OscConfig+0x8ac>)
 8008fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa6:	4a04      	ldr	r2, [pc, #16]	; (8008fb8 <HAL_RCC_OscConfig+0x8ac>)
 8008fa8:	f043 0301 	orr.w	r3, r3, #1
 8008fac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3730      	adds	r7, #48	; 0x30
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	58024400 	.word	0x58024400
 8008fbc:	ffff0007 	.word	0xffff0007

08008fc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e19c      	b.n	800930e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fd4:	4b8a      	ldr	r3, [pc, #552]	; (8009200 <HAL_RCC_ClockConfig+0x240>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 030f 	and.w	r3, r3, #15
 8008fdc:	683a      	ldr	r2, [r7, #0]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d910      	bls.n	8009004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fe2:	4b87      	ldr	r3, [pc, #540]	; (8009200 <HAL_RCC_ClockConfig+0x240>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f023 020f 	bic.w	r2, r3, #15
 8008fea:	4985      	ldr	r1, [pc, #532]	; (8009200 <HAL_RCC_ClockConfig+0x240>)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ff2:	4b83      	ldr	r3, [pc, #524]	; (8009200 <HAL_RCC_ClockConfig+0x240>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 030f 	and.w	r3, r3, #15
 8008ffa:	683a      	ldr	r2, [r7, #0]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d001      	beq.n	8009004 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e184      	b.n	800930e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b00      	cmp	r3, #0
 800900e:	d010      	beq.n	8009032 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	691a      	ldr	r2, [r3, #16]
 8009014:	4b7b      	ldr	r3, [pc, #492]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800901c:	429a      	cmp	r2, r3
 800901e:	d908      	bls.n	8009032 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009020:	4b78      	ldr	r3, [pc, #480]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	4975      	ldr	r1, [pc, #468]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 800902e:	4313      	orrs	r3, r2
 8009030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0308 	and.w	r3, r3, #8
 800903a:	2b00      	cmp	r3, #0
 800903c:	d010      	beq.n	8009060 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	695a      	ldr	r2, [r3, #20]
 8009042:	4b70      	ldr	r3, [pc, #448]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800904a:	429a      	cmp	r2, r3
 800904c:	d908      	bls.n	8009060 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800904e:	4b6d      	ldr	r3, [pc, #436]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	496a      	ldr	r1, [pc, #424]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 800905c:	4313      	orrs	r3, r2
 800905e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0310 	and.w	r3, r3, #16
 8009068:	2b00      	cmp	r3, #0
 800906a:	d010      	beq.n	800908e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	699a      	ldr	r2, [r3, #24]
 8009070:	4b64      	ldr	r3, [pc, #400]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 8009072:	69db      	ldr	r3, [r3, #28]
 8009074:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009078:	429a      	cmp	r2, r3
 800907a:	d908      	bls.n	800908e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800907c:	4b61      	ldr	r3, [pc, #388]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 800907e:	69db      	ldr	r3, [r3, #28]
 8009080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	495e      	ldr	r1, [pc, #376]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 800908a:	4313      	orrs	r3, r2
 800908c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0320 	and.w	r3, r3, #32
 8009096:	2b00      	cmp	r3, #0
 8009098:	d010      	beq.n	80090bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	69da      	ldr	r2, [r3, #28]
 800909e:	4b59      	ldr	r3, [pc, #356]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d908      	bls.n	80090bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80090aa:	4b56      	ldr	r3, [pc, #344]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	4953      	ldr	r1, [pc, #332]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0302 	and.w	r3, r3, #2
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d010      	beq.n	80090ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68da      	ldr	r2, [r3, #12]
 80090cc:	4b4d      	ldr	r3, [pc, #308]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	f003 030f 	and.w	r3, r3, #15
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d908      	bls.n	80090ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090d8:	4b4a      	ldr	r3, [pc, #296]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	f023 020f 	bic.w	r2, r3, #15
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	4947      	ldr	r1, [pc, #284]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d055      	beq.n	80091a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80090f6:	4b43      	ldr	r3, [pc, #268]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	4940      	ldr	r1, [pc, #256]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 8009104:	4313      	orrs	r3, r2
 8009106:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	2b02      	cmp	r3, #2
 800910e:	d107      	bne.n	8009120 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009110:	4b3c      	ldr	r3, [pc, #240]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d121      	bne.n	8009160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e0f6      	b.n	800930e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	2b03      	cmp	r3, #3
 8009126:	d107      	bne.n	8009138 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009128:	4b36      	ldr	r3, [pc, #216]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d115      	bne.n	8009160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e0ea      	b.n	800930e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d107      	bne.n	8009150 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009140:	4b30      	ldr	r3, [pc, #192]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e0de      	b.n	800930e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009150:	4b2c      	ldr	r3, [pc, #176]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0304 	and.w	r3, r3, #4
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e0d6      	b.n	800930e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009160:	4b28      	ldr	r3, [pc, #160]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	f023 0207 	bic.w	r2, r3, #7
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	4925      	ldr	r1, [pc, #148]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 800916e:	4313      	orrs	r3, r2
 8009170:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009172:	f7f9 fb53 	bl	800281c <HAL_GetTick>
 8009176:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009178:	e00a      	b.n	8009190 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800917a:	f7f9 fb4f 	bl	800281c <HAL_GetTick>
 800917e:	4602      	mov	r2, r0
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	f241 3288 	movw	r2, #5000	; 0x1388
 8009188:	4293      	cmp	r3, r2
 800918a:	d901      	bls.n	8009190 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800918c:	2303      	movs	r3, #3
 800918e:	e0be      	b.n	800930e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009190:	4b1c      	ldr	r3, [pc, #112]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	429a      	cmp	r2, r3
 80091a0:	d1eb      	bne.n	800917a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0302 	and.w	r3, r3, #2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d010      	beq.n	80091d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68da      	ldr	r2, [r3, #12]
 80091b2:	4b14      	ldr	r3, [pc, #80]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	f003 030f 	and.w	r3, r3, #15
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d208      	bcs.n	80091d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091be:	4b11      	ldr	r3, [pc, #68]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	f023 020f 	bic.w	r2, r3, #15
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	490e      	ldr	r1, [pc, #56]	; (8009204 <HAL_RCC_ClockConfig+0x244>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091d0:	4b0b      	ldr	r3, [pc, #44]	; (8009200 <HAL_RCC_ClockConfig+0x240>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 030f 	and.w	r3, r3, #15
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d214      	bcs.n	8009208 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091de:	4b08      	ldr	r3, [pc, #32]	; (8009200 <HAL_RCC_ClockConfig+0x240>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f023 020f 	bic.w	r2, r3, #15
 80091e6:	4906      	ldr	r1, [pc, #24]	; (8009200 <HAL_RCC_ClockConfig+0x240>)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ee:	4b04      	ldr	r3, [pc, #16]	; (8009200 <HAL_RCC_ClockConfig+0x240>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 030f 	and.w	r3, r3, #15
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d005      	beq.n	8009208 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e086      	b.n	800930e <HAL_RCC_ClockConfig+0x34e>
 8009200:	52002000 	.word	0x52002000
 8009204:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0304 	and.w	r3, r3, #4
 8009210:	2b00      	cmp	r3, #0
 8009212:	d010      	beq.n	8009236 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	691a      	ldr	r2, [r3, #16]
 8009218:	4b3f      	ldr	r3, [pc, #252]	; (8009318 <HAL_RCC_ClockConfig+0x358>)
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009220:	429a      	cmp	r2, r3
 8009222:	d208      	bcs.n	8009236 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009224:	4b3c      	ldr	r3, [pc, #240]	; (8009318 <HAL_RCC_ClockConfig+0x358>)
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	4939      	ldr	r1, [pc, #228]	; (8009318 <HAL_RCC_ClockConfig+0x358>)
 8009232:	4313      	orrs	r3, r2
 8009234:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0308 	and.w	r3, r3, #8
 800923e:	2b00      	cmp	r3, #0
 8009240:	d010      	beq.n	8009264 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	695a      	ldr	r2, [r3, #20]
 8009246:	4b34      	ldr	r3, [pc, #208]	; (8009318 <HAL_RCC_ClockConfig+0x358>)
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800924e:	429a      	cmp	r2, r3
 8009250:	d208      	bcs.n	8009264 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009252:	4b31      	ldr	r3, [pc, #196]	; (8009318 <HAL_RCC_ClockConfig+0x358>)
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	492e      	ldr	r1, [pc, #184]	; (8009318 <HAL_RCC_ClockConfig+0x358>)
 8009260:	4313      	orrs	r3, r2
 8009262:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0310 	and.w	r3, r3, #16
 800926c:	2b00      	cmp	r3, #0
 800926e:	d010      	beq.n	8009292 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	699a      	ldr	r2, [r3, #24]
 8009274:	4b28      	ldr	r3, [pc, #160]	; (8009318 <HAL_RCC_ClockConfig+0x358>)
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800927c:	429a      	cmp	r2, r3
 800927e:	d208      	bcs.n	8009292 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009280:	4b25      	ldr	r3, [pc, #148]	; (8009318 <HAL_RCC_ClockConfig+0x358>)
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	4922      	ldr	r1, [pc, #136]	; (8009318 <HAL_RCC_ClockConfig+0x358>)
 800928e:	4313      	orrs	r3, r2
 8009290:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b00      	cmp	r3, #0
 800929c:	d010      	beq.n	80092c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	69da      	ldr	r2, [r3, #28]
 80092a2:	4b1d      	ldr	r3, [pc, #116]	; (8009318 <HAL_RCC_ClockConfig+0x358>)
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d208      	bcs.n	80092c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80092ae:	4b1a      	ldr	r3, [pc, #104]	; (8009318 <HAL_RCC_ClockConfig+0x358>)
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	4917      	ldr	r1, [pc, #92]	; (8009318 <HAL_RCC_ClockConfig+0x358>)
 80092bc:	4313      	orrs	r3, r2
 80092be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80092c0:	f000 f834 	bl	800932c <HAL_RCC_GetSysClockFreq>
 80092c4:	4602      	mov	r2, r0
 80092c6:	4b14      	ldr	r3, [pc, #80]	; (8009318 <HAL_RCC_ClockConfig+0x358>)
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	0a1b      	lsrs	r3, r3, #8
 80092cc:	f003 030f 	and.w	r3, r3, #15
 80092d0:	4912      	ldr	r1, [pc, #72]	; (800931c <HAL_RCC_ClockConfig+0x35c>)
 80092d2:	5ccb      	ldrb	r3, [r1, r3]
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	fa22 f303 	lsr.w	r3, r2, r3
 80092dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092de:	4b0e      	ldr	r3, [pc, #56]	; (8009318 <HAL_RCC_ClockConfig+0x358>)
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	f003 030f 	and.w	r3, r3, #15
 80092e6:	4a0d      	ldr	r2, [pc, #52]	; (800931c <HAL_RCC_ClockConfig+0x35c>)
 80092e8:	5cd3      	ldrb	r3, [r2, r3]
 80092ea:	f003 031f 	and.w	r3, r3, #31
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	fa22 f303 	lsr.w	r3, r2, r3
 80092f4:	4a0a      	ldr	r2, [pc, #40]	; (8009320 <HAL_RCC_ClockConfig+0x360>)
 80092f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092f8:	4a0a      	ldr	r2, [pc, #40]	; (8009324 <HAL_RCC_ClockConfig+0x364>)
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80092fe:	4b0a      	ldr	r3, [pc, #40]	; (8009328 <HAL_RCC_ClockConfig+0x368>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4618      	mov	r0, r3
 8009304:	f7f9 fa40 	bl	8002788 <HAL_InitTick>
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800930c:	7bfb      	ldrb	r3, [r7, #15]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	58024400 	.word	0x58024400
 800931c:	08010f28 	.word	0x08010f28
 8009320:	2400008c 	.word	0x2400008c
 8009324:	24000088 	.word	0x24000088
 8009328:	24000090 	.word	0x24000090

0800932c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800932c:	b480      	push	{r7}
 800932e:	b089      	sub	sp, #36	; 0x24
 8009330:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009332:	4bb3      	ldr	r3, [pc, #716]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800933a:	2b18      	cmp	r3, #24
 800933c:	f200 8155 	bhi.w	80095ea <HAL_RCC_GetSysClockFreq+0x2be>
 8009340:	a201      	add	r2, pc, #4	; (adr r2, 8009348 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009346:	bf00      	nop
 8009348:	080093ad 	.word	0x080093ad
 800934c:	080095eb 	.word	0x080095eb
 8009350:	080095eb 	.word	0x080095eb
 8009354:	080095eb 	.word	0x080095eb
 8009358:	080095eb 	.word	0x080095eb
 800935c:	080095eb 	.word	0x080095eb
 8009360:	080095eb 	.word	0x080095eb
 8009364:	080095eb 	.word	0x080095eb
 8009368:	080093d3 	.word	0x080093d3
 800936c:	080095eb 	.word	0x080095eb
 8009370:	080095eb 	.word	0x080095eb
 8009374:	080095eb 	.word	0x080095eb
 8009378:	080095eb 	.word	0x080095eb
 800937c:	080095eb 	.word	0x080095eb
 8009380:	080095eb 	.word	0x080095eb
 8009384:	080095eb 	.word	0x080095eb
 8009388:	080093d9 	.word	0x080093d9
 800938c:	080095eb 	.word	0x080095eb
 8009390:	080095eb 	.word	0x080095eb
 8009394:	080095eb 	.word	0x080095eb
 8009398:	080095eb 	.word	0x080095eb
 800939c:	080095eb 	.word	0x080095eb
 80093a0:	080095eb 	.word	0x080095eb
 80093a4:	080095eb 	.word	0x080095eb
 80093a8:	080093df 	.word	0x080093df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093ac:	4b94      	ldr	r3, [pc, #592]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0320 	and.w	r3, r3, #32
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d009      	beq.n	80093cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093b8:	4b91      	ldr	r3, [pc, #580]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	08db      	lsrs	r3, r3, #3
 80093be:	f003 0303 	and.w	r3, r3, #3
 80093c2:	4a90      	ldr	r2, [pc, #576]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093c4:	fa22 f303 	lsr.w	r3, r2, r3
 80093c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80093ca:	e111      	b.n	80095f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80093cc:	4b8d      	ldr	r3, [pc, #564]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093ce:	61bb      	str	r3, [r7, #24]
      break;
 80093d0:	e10e      	b.n	80095f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80093d2:	4b8d      	ldr	r3, [pc, #564]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093d4:	61bb      	str	r3, [r7, #24]
      break;
 80093d6:	e10b      	b.n	80095f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80093d8:	4b8c      	ldr	r3, [pc, #560]	; (800960c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80093da:	61bb      	str	r3, [r7, #24]
      break;
 80093dc:	e108      	b.n	80095f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093de:	4b88      	ldr	r3, [pc, #544]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e2:	f003 0303 	and.w	r3, r3, #3
 80093e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80093e8:	4b85      	ldr	r3, [pc, #532]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ec:	091b      	lsrs	r3, r3, #4
 80093ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80093f4:	4b82      	ldr	r3, [pc, #520]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80093fe:	4b80      	ldr	r3, [pc, #512]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009402:	08db      	lsrs	r3, r3, #3
 8009404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	fb02 f303 	mul.w	r3, r2, r3
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009416:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 80e1 	beq.w	80095e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2b02      	cmp	r3, #2
 8009426:	f000 8083 	beq.w	8009530 <HAL_RCC_GetSysClockFreq+0x204>
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b02      	cmp	r3, #2
 800942e:	f200 80a1 	bhi.w	8009574 <HAL_RCC_GetSysClockFreq+0x248>
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d003      	beq.n	8009440 <HAL_RCC_GetSysClockFreq+0x114>
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d056      	beq.n	80094ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800943e:	e099      	b.n	8009574 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009440:	4b6f      	ldr	r3, [pc, #444]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0320 	and.w	r3, r3, #32
 8009448:	2b00      	cmp	r3, #0
 800944a:	d02d      	beq.n	80094a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800944c:	4b6c      	ldr	r3, [pc, #432]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	08db      	lsrs	r3, r3, #3
 8009452:	f003 0303 	and.w	r3, r3, #3
 8009456:	4a6b      	ldr	r2, [pc, #428]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009458:	fa22 f303 	lsr.w	r3, r2, r3
 800945c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	ee07 3a90 	vmov	s15, r3
 8009464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	ee07 3a90 	vmov	s15, r3
 800946e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009476:	4b62      	ldr	r3, [pc, #392]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009486:	ed97 6a02 	vldr	s12, [r7, #8]
 800948a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800948e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800949a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800949e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80094a6:	e087      	b.n	80095b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009614 <HAL_RCC_GetSysClockFreq+0x2e8>
 80094b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ba:	4b51      	ldr	r3, [pc, #324]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c2:	ee07 3a90 	vmov	s15, r3
 80094c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80094ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009610 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094ea:	e065      	b.n	80095b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009618 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094fe:	4b40      	ldr	r3, [pc, #256]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009506:	ee07 3a90 	vmov	s15, r3
 800950a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800950e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009512:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009610 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800951a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800951e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800952a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800952e:	e043      	b.n	80095b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800961c <HAL_RCC_GetSysClockFreq+0x2f0>
 800953e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009542:	4b2f      	ldr	r3, [pc, #188]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800954a:	ee07 3a90 	vmov	s15, r3
 800954e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009552:	ed97 6a02 	vldr	s12, [r7, #8]
 8009556:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800955a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800955e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800956a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800956e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009572:	e021      	b.n	80095b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	ee07 3a90 	vmov	s15, r3
 800957a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800957e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009618 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009586:	4b1e      	ldr	r3, [pc, #120]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009596:	ed97 6a02 	vldr	s12, [r7, #8]
 800959a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800959e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80095b8:	4b11      	ldr	r3, [pc, #68]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095bc:	0a5b      	lsrs	r3, r3, #9
 80095be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095c2:	3301      	adds	r3, #1
 80095c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	ee07 3a90 	vmov	s15, r3
 80095cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80095d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095dc:	ee17 3a90 	vmov	r3, s15
 80095e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80095e2:	e005      	b.n	80095f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80095e4:	2300      	movs	r3, #0
 80095e6:	61bb      	str	r3, [r7, #24]
      break;
 80095e8:	e002      	b.n	80095f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80095ea:	4b07      	ldr	r3, [pc, #28]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80095ec:	61bb      	str	r3, [r7, #24]
      break;
 80095ee:	bf00      	nop
  }

  return sysclockfreq;
 80095f0:	69bb      	ldr	r3, [r7, #24]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3724      	adds	r7, #36	; 0x24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	58024400 	.word	0x58024400
 8009604:	03d09000 	.word	0x03d09000
 8009608:	003d0900 	.word	0x003d0900
 800960c:	017d7840 	.word	0x017d7840
 8009610:	46000000 	.word	0x46000000
 8009614:	4c742400 	.word	0x4c742400
 8009618:	4a742400 	.word	0x4a742400
 800961c:	4bbebc20 	.word	0x4bbebc20

08009620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009626:	f7ff fe81 	bl	800932c <HAL_RCC_GetSysClockFreq>
 800962a:	4602      	mov	r2, r0
 800962c:	4b10      	ldr	r3, [pc, #64]	; (8009670 <HAL_RCC_GetHCLKFreq+0x50>)
 800962e:	699b      	ldr	r3, [r3, #24]
 8009630:	0a1b      	lsrs	r3, r3, #8
 8009632:	f003 030f 	and.w	r3, r3, #15
 8009636:	490f      	ldr	r1, [pc, #60]	; (8009674 <HAL_RCC_GetHCLKFreq+0x54>)
 8009638:	5ccb      	ldrb	r3, [r1, r3]
 800963a:	f003 031f 	and.w	r3, r3, #31
 800963e:	fa22 f303 	lsr.w	r3, r2, r3
 8009642:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009644:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <HAL_RCC_GetHCLKFreq+0x50>)
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	f003 030f 	and.w	r3, r3, #15
 800964c:	4a09      	ldr	r2, [pc, #36]	; (8009674 <HAL_RCC_GetHCLKFreq+0x54>)
 800964e:	5cd3      	ldrb	r3, [r2, r3]
 8009650:	f003 031f 	and.w	r3, r3, #31
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	fa22 f303 	lsr.w	r3, r2, r3
 800965a:	4a07      	ldr	r2, [pc, #28]	; (8009678 <HAL_RCC_GetHCLKFreq+0x58>)
 800965c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800965e:	4a07      	ldr	r2, [pc, #28]	; (800967c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009664:	4b04      	ldr	r3, [pc, #16]	; (8009678 <HAL_RCC_GetHCLKFreq+0x58>)
 8009666:	681b      	ldr	r3, [r3, #0]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	58024400 	.word	0x58024400
 8009674:	08010f28 	.word	0x08010f28
 8009678:	2400008c 	.word	0x2400008c
 800967c:	24000088 	.word	0x24000088

08009680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009684:	f7ff ffcc 	bl	8009620 <HAL_RCC_GetHCLKFreq>
 8009688:	4602      	mov	r2, r0
 800968a:	4b06      	ldr	r3, [pc, #24]	; (80096a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	091b      	lsrs	r3, r3, #4
 8009690:	f003 0307 	and.w	r3, r3, #7
 8009694:	4904      	ldr	r1, [pc, #16]	; (80096a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009696:	5ccb      	ldrb	r3, [r1, r3]
 8009698:	f003 031f 	and.w	r3, r3, #31
 800969c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	58024400 	.word	0x58024400
 80096a8:	08010f28 	.word	0x08010f28

080096ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80096b0:	f7ff ffb6 	bl	8009620 <HAL_RCC_GetHCLKFreq>
 80096b4:	4602      	mov	r2, r0
 80096b6:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80096b8:	69db      	ldr	r3, [r3, #28]
 80096ba:	0a1b      	lsrs	r3, r3, #8
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	4904      	ldr	r1, [pc, #16]	; (80096d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80096c2:	5ccb      	ldrb	r3, [r1, r3]
 80096c4:	f003 031f 	and.w	r3, r3, #31
 80096c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	58024400 	.word	0x58024400
 80096d4:	08010f28 	.word	0x08010f28

080096d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096dc:	b0ca      	sub	sp, #296	; 0x128
 80096de:	af00      	add	r7, sp, #0
 80096e0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096e4:	2300      	movs	r3, #0
 80096e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096ea:	2300      	movs	r3, #0
 80096ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80096fc:	2500      	movs	r5, #0
 80096fe:	ea54 0305 	orrs.w	r3, r4, r5
 8009702:	d049      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800970a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800970e:	d02f      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009710:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009714:	d828      	bhi.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009716:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800971a:	d01a      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800971c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009720:	d822      	bhi.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800972a:	d007      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800972c:	e01c      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800972e:	4bb8      	ldr	r3, [pc, #736]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009732:	4ab7      	ldr	r2, [pc, #732]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009738:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800973a:	e01a      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800973c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009740:	3308      	adds	r3, #8
 8009742:	2102      	movs	r1, #2
 8009744:	4618      	mov	r0, r3
 8009746:	f002 fb61 	bl	800be0c <RCCEx_PLL2_Config>
 800974a:	4603      	mov	r3, r0
 800974c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009750:	e00f      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009756:	3328      	adds	r3, #40	; 0x28
 8009758:	2102      	movs	r1, #2
 800975a:	4618      	mov	r0, r3
 800975c:	f002 fc08 	bl	800bf70 <RCCEx_PLL3_Config>
 8009760:	4603      	mov	r3, r0
 8009762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009766:	e004      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800976e:	e000      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10a      	bne.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800977a:	4ba5      	ldr	r3, [pc, #660]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800977c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009788:	4aa1      	ldr	r2, [pc, #644]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800978a:	430b      	orrs	r3, r1
 800978c:	6513      	str	r3, [r2, #80]	; 0x50
 800978e:	e003      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009790:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009794:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80097a4:	f04f 0900 	mov.w	r9, #0
 80097a8:	ea58 0309 	orrs.w	r3, r8, r9
 80097ac:	d047      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80097ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b4:	2b04      	cmp	r3, #4
 80097b6:	d82a      	bhi.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80097b8:	a201      	add	r2, pc, #4	; (adr r2, 80097c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80097ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097be:	bf00      	nop
 80097c0:	080097d5 	.word	0x080097d5
 80097c4:	080097e3 	.word	0x080097e3
 80097c8:	080097f9 	.word	0x080097f9
 80097cc:	08009817 	.word	0x08009817
 80097d0:	08009817 	.word	0x08009817
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097d4:	4b8e      	ldr	r3, [pc, #568]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d8:	4a8d      	ldr	r2, [pc, #564]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097e0:	e01a      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e6:	3308      	adds	r3, #8
 80097e8:	2100      	movs	r1, #0
 80097ea:	4618      	mov	r0, r3
 80097ec:	f002 fb0e 	bl	800be0c <RCCEx_PLL2_Config>
 80097f0:	4603      	mov	r3, r0
 80097f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097f6:	e00f      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097fc:	3328      	adds	r3, #40	; 0x28
 80097fe:	2100      	movs	r1, #0
 8009800:	4618      	mov	r0, r3
 8009802:	f002 fbb5 	bl	800bf70 <RCCEx_PLL3_Config>
 8009806:	4603      	mov	r3, r0
 8009808:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800980c:	e004      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009814:	e000      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009818:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10a      	bne.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009820:	4b7b      	ldr	r3, [pc, #492]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009824:	f023 0107 	bic.w	r1, r3, #7
 8009828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800982c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800982e:	4a78      	ldr	r2, [pc, #480]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009830:	430b      	orrs	r3, r1
 8009832:	6513      	str	r3, [r2, #80]	; 0x50
 8009834:	e003      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800983a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800983e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009846:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800984a:	f04f 0b00 	mov.w	fp, #0
 800984e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009852:	d04c      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800985a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800985e:	d030      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009864:	d829      	bhi.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009866:	2bc0      	cmp	r3, #192	; 0xc0
 8009868:	d02d      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800986a:	2bc0      	cmp	r3, #192	; 0xc0
 800986c:	d825      	bhi.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800986e:	2b80      	cmp	r3, #128	; 0x80
 8009870:	d018      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009872:	2b80      	cmp	r3, #128	; 0x80
 8009874:	d821      	bhi.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009876:	2b00      	cmp	r3, #0
 8009878:	d002      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800987a:	2b40      	cmp	r3, #64	; 0x40
 800987c:	d007      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800987e:	e01c      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009880:	4b63      	ldr	r3, [pc, #396]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009884:	4a62      	ldr	r2, [pc, #392]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800988a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800988c:	e01c      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800988e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009892:	3308      	adds	r3, #8
 8009894:	2100      	movs	r1, #0
 8009896:	4618      	mov	r0, r3
 8009898:	f002 fab8 	bl	800be0c <RCCEx_PLL2_Config>
 800989c:	4603      	mov	r3, r0
 800989e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80098a2:	e011      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a8:	3328      	adds	r3, #40	; 0x28
 80098aa:	2100      	movs	r1, #0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f002 fb5f 	bl	800bf70 <RCCEx_PLL3_Config>
 80098b2:	4603      	mov	r3, r0
 80098b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80098b8:	e006      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098c0:	e002      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80098c2:	bf00      	nop
 80098c4:	e000      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80098c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10a      	bne.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80098d0:	4b4f      	ldr	r3, [pc, #316]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80098d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098de:	4a4c      	ldr	r2, [pc, #304]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098e0:	430b      	orrs	r3, r1
 80098e2:	6513      	str	r3, [r2, #80]	; 0x50
 80098e4:	e003      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80098ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80098fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80098fe:	2300      	movs	r3, #0
 8009900:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009904:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009908:	460b      	mov	r3, r1
 800990a:	4313      	orrs	r3, r2
 800990c:	d053      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800990e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009912:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800991a:	d035      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800991c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009920:	d82e      	bhi.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009922:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009926:	d031      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009928:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800992c:	d828      	bhi.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800992e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009932:	d01a      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009938:	d822      	bhi.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d003      	beq.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800993e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009942:	d007      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009944:	e01c      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009946:	4b32      	ldr	r3, [pc, #200]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994a:	4a31      	ldr	r2, [pc, #196]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800994c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009950:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009952:	e01c      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009958:	3308      	adds	r3, #8
 800995a:	2100      	movs	r1, #0
 800995c:	4618      	mov	r0, r3
 800995e:	f002 fa55 	bl	800be0c <RCCEx_PLL2_Config>
 8009962:	4603      	mov	r3, r0
 8009964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009968:	e011      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800996a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800996e:	3328      	adds	r3, #40	; 0x28
 8009970:	2100      	movs	r1, #0
 8009972:	4618      	mov	r0, r3
 8009974:	f002 fafc 	bl	800bf70 <RCCEx_PLL3_Config>
 8009978:	4603      	mov	r3, r0
 800997a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800997e:	e006      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009986:	e002      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009988:	bf00      	nop
 800998a:	e000      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800998c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800998e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10b      	bne.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009996:	4b1e      	ldr	r3, [pc, #120]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800999a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800999e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80099a6:	4a1a      	ldr	r2, [pc, #104]	; (8009a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099a8:	430b      	orrs	r3, r1
 80099aa:	6593      	str	r3, [r2, #88]	; 0x58
 80099ac:	e003      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80099b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80099c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80099c6:	2300      	movs	r3, #0
 80099c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80099cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80099d0:	460b      	mov	r3, r1
 80099d2:	4313      	orrs	r3, r2
 80099d4:	d056      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80099d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099e2:	d038      	beq.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80099e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099e8:	d831      	bhi.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099ee:	d034      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80099f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099f4:	d82b      	bhi.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099fa:	d01d      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80099fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a00:	d825      	bhi.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d006      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009a06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a0a:	d00a      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009a0c:	e01f      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a0e:	bf00      	nop
 8009a10:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a14:	4ba2      	ldr	r3, [pc, #648]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	4aa1      	ldr	r2, [pc, #644]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a20:	e01c      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a26:	3308      	adds	r3, #8
 8009a28:	2100      	movs	r1, #0
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f002 f9ee 	bl	800be0c <RCCEx_PLL2_Config>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009a36:	e011      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3c:	3328      	adds	r3, #40	; 0x28
 8009a3e:	2100      	movs	r1, #0
 8009a40:	4618      	mov	r0, r3
 8009a42:	f002 fa95 	bl	800bf70 <RCCEx_PLL3_Config>
 8009a46:	4603      	mov	r3, r0
 8009a48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a4c:	e006      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a54:	e002      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009a56:	bf00      	nop
 8009a58:	e000      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10b      	bne.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009a64:	4b8e      	ldr	r3, [pc, #568]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a68:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a74:	4a8a      	ldr	r2, [pc, #552]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a76:	430b      	orrs	r3, r1
 8009a78:	6593      	str	r3, [r2, #88]	; 0x58
 8009a7a:	e003      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009a90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a94:	2300      	movs	r3, #0
 8009a96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	d03a      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aaa:	2b30      	cmp	r3, #48	; 0x30
 8009aac:	d01f      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009aae:	2b30      	cmp	r3, #48	; 0x30
 8009ab0:	d819      	bhi.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009ab2:	2b20      	cmp	r3, #32
 8009ab4:	d00c      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009ab6:	2b20      	cmp	r3, #32
 8009ab8:	d815      	bhi.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d019      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009abe:	2b10      	cmp	r3, #16
 8009ac0:	d111      	bne.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ac2:	4b77      	ldr	r3, [pc, #476]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac6:	4a76      	ldr	r2, [pc, #472]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009acc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009ace:	e011      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	2102      	movs	r1, #2
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f002 f997 	bl	800be0c <RCCEx_PLL2_Config>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009ae4:	e006      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009aec:	e002      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009aee:	bf00      	nop
 8009af0:	e000      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009af4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10a      	bne.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009afc:	4b68      	ldr	r3, [pc, #416]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b00:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b0a:	4a65      	ldr	r2, [pc, #404]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b0c:	430b      	orrs	r3, r1
 8009b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b10:	e003      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009b26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4313      	orrs	r3, r2
 8009b38:	d051      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b44:	d035      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009b46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b4a:	d82e      	bhi.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b50:	d031      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009b52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b56:	d828      	bhi.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b5c:	d01a      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b62:	d822      	bhi.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d003      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b6c:	d007      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009b6e:	e01c      	b.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b70:	4b4b      	ldr	r3, [pc, #300]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b74:	4a4a      	ldr	r2, [pc, #296]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b7c:	e01c      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b82:	3308      	adds	r3, #8
 8009b84:	2100      	movs	r1, #0
 8009b86:	4618      	mov	r0, r3
 8009b88:	f002 f940 	bl	800be0c <RCCEx_PLL2_Config>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b92:	e011      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b98:	3328      	adds	r3, #40	; 0x28
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f002 f9e7 	bl	800bf70 <RCCEx_PLL3_Config>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ba8:	e006      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bb0:	e002      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009bb2:	bf00      	nop
 8009bb4:	e000      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009bc0:	4b37      	ldr	r3, [pc, #220]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bc4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bce:	4a34      	ldr	r2, [pc, #208]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bd0:	430b      	orrs	r3, r1
 8009bd2:	6513      	str	r3, [r2, #80]	; 0x50
 8009bd4:	e003      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009bea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009bf4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	d056      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c08:	d033      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009c0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c0e:	d82c      	bhi.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c14:	d02f      	beq.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009c16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c1a:	d826      	bhi.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c20:	d02b      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009c22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c26:	d820      	bhi.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c2c:	d012      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c32:	d81a      	bhi.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d022      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c3c:	d115      	bne.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c42:	3308      	adds	r3, #8
 8009c44:	2101      	movs	r1, #1
 8009c46:	4618      	mov	r0, r3
 8009c48:	f002 f8e0 	bl	800be0c <RCCEx_PLL2_Config>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009c52:	e015      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c58:	3328      	adds	r3, #40	; 0x28
 8009c5a:	2101      	movs	r1, #1
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f002 f987 	bl	800bf70 <RCCEx_PLL3_Config>
 8009c62:	4603      	mov	r3, r0
 8009c64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009c68:	e00a      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c70:	e006      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c72:	bf00      	nop
 8009c74:	e004      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c76:	bf00      	nop
 8009c78:	e002      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c7a:	bf00      	nop
 8009c7c:	e000      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10d      	bne.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009c88:	4b05      	ldr	r3, [pc, #20]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c8c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c96:	4a02      	ldr	r2, [pc, #8]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c98:	430b      	orrs	r3, r1
 8009c9a:	6513      	str	r3, [r2, #80]	; 0x50
 8009c9c:	e006      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009c9e:	bf00      	nop
 8009ca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ca8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009cc2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	d055      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cd8:	d033      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cde:	d82c      	bhi.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce4:	d02f      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cea:	d826      	bhi.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009cec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cf0:	d02b      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009cf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cf6:	d820      	bhi.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cfc:	d012      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d02:	d81a      	bhi.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d022      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d0c:	d115      	bne.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d12:	3308      	adds	r3, #8
 8009d14:	2101      	movs	r1, #1
 8009d16:	4618      	mov	r0, r3
 8009d18:	f002 f878 	bl	800be0c <RCCEx_PLL2_Config>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d22:	e015      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d28:	3328      	adds	r3, #40	; 0x28
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f002 f91f 	bl	800bf70 <RCCEx_PLL3_Config>
 8009d32:	4603      	mov	r3, r0
 8009d34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d38:	e00a      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d40:	e006      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d42:	bf00      	nop
 8009d44:	e004      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d46:	bf00      	nop
 8009d48:	e002      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d4a:	bf00      	nop
 8009d4c:	e000      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10b      	bne.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009d58:	4ba3      	ldr	r3, [pc, #652]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d5c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d68:	4a9f      	ldr	r2, [pc, #636]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d6a:	430b      	orrs	r3, r1
 8009d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8009d6e:	e003      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009d84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d92:	460b      	mov	r3, r1
 8009d94:	4313      	orrs	r3, r2
 8009d96:	d037      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009da2:	d00e      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009da8:	d816      	bhi.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d018      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009db2:	d111      	bne.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009db4:	4b8c      	ldr	r3, [pc, #560]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db8:	4a8b      	ldr	r2, [pc, #556]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009dc0:	e00f      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	2101      	movs	r1, #1
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f002 f81e 	bl	800be0c <RCCEx_PLL2_Config>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009dd6:	e004      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dde:	e000      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10a      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009dea:	4b7f      	ldr	r3, [pc, #508]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dee:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df8:	4a7b      	ldr	r2, [pc, #492]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dfa:	430b      	orrs	r3, r1
 8009dfc:	6513      	str	r3, [r2, #80]	; 0x50
 8009dfe:	e003      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e10:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4313      	orrs	r3, r2
 8009e26:	d039      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d81c      	bhi.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009e32:	a201      	add	r2, pc, #4	; (adr r2, 8009e38 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009e75 	.word	0x08009e75
 8009e3c:	08009e49 	.word	0x08009e49
 8009e40:	08009e57 	.word	0x08009e57
 8009e44:	08009e75 	.word	0x08009e75
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e48:	4b67      	ldr	r3, [pc, #412]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4c:	4a66      	ldr	r2, [pc, #408]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009e54:	e00f      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e5a:	3308      	adds	r3, #8
 8009e5c:	2102      	movs	r1, #2
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f001 ffd4 	bl	800be0c <RCCEx_PLL2_Config>
 8009e64:	4603      	mov	r3, r0
 8009e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009e6a:	e004      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e72:	e000      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10a      	bne.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009e7e:	4b5a      	ldr	r3, [pc, #360]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e82:	f023 0103 	bic.w	r1, r3, #3
 8009e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e8c:	4a56      	ldr	r2, [pc, #344]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e8e:	430b      	orrs	r3, r1
 8009e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e92:	e003      	b.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009eac:	2300      	movs	r3, #0
 8009eae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009eb2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	f000 809f 	beq.w	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ebe:	4b4b      	ldr	r3, [pc, #300]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a4a      	ldr	r2, [pc, #296]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ec8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009eca:	f7f8 fca7 	bl	800281c <HAL_GetTick>
 8009ece:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ed2:	e00b      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ed4:	f7f8 fca2 	bl	800281c <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	2b64      	cmp	r3, #100	; 0x64
 8009ee2:	d903      	bls.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009eea:	e005      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009eec:	4b3f      	ldr	r3, [pc, #252]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d0ed      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d179      	bne.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f00:	4b39      	ldr	r3, [pc, #228]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f0c:	4053      	eors	r3, r2
 8009f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d015      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f16:	4b34      	ldr	r3, [pc, #208]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f22:	4b31      	ldr	r3, [pc, #196]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f26:	4a30      	ldr	r2, [pc, #192]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f2c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f2e:	4b2e      	ldr	r3, [pc, #184]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f32:	4a2d      	ldr	r2, [pc, #180]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f38:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009f3a:	4a2b      	ldr	r2, [pc, #172]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009f40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f4e:	d118      	bne.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f50:	f7f8 fc64 	bl	800281c <HAL_GetTick>
 8009f54:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f58:	e00d      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f5a:	f7f8 fc5f 	bl	800281c <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009f64:	1ad2      	subs	r2, r2, r3
 8009f66:	f241 3388 	movw	r3, #5000	; 0x1388
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d903      	bls.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009f74:	e005      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f76:	4b1c      	ldr	r3, [pc, #112]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7a:	f003 0302 	and.w	r3, r3, #2
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d0eb      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d129      	bne.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f9a:	d10e      	bne.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009f9c:	4b12      	ldr	r3, [pc, #72]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009fac:	091a      	lsrs	r2, r3, #4
 8009fae:	4b10      	ldr	r3, [pc, #64]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	4a0d      	ldr	r2, [pc, #52]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fb4:	430b      	orrs	r3, r1
 8009fb6:	6113      	str	r3, [r2, #16]
 8009fb8:	e005      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009fba:	4b0b      	ldr	r3, [pc, #44]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	4a0a      	ldr	r2, [pc, #40]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009fc4:	6113      	str	r3, [r2, #16]
 8009fc6:	4b08      	ldr	r3, [pc, #32]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fc8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fd6:	4a04      	ldr	r2, [pc, #16]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fd8:	430b      	orrs	r3, r1
 8009fda:	6713      	str	r3, [r2, #112]	; 0x70
 8009fdc:	e00e      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009fe6:	e009      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009fe8:	58024400 	.word	0x58024400
 8009fec:	58024800 	.word	0x58024800
 8009ff0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ff8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f002 0301 	and.w	r3, r2, #1
 800a008:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a00c:	2300      	movs	r3, #0
 800a00e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a012:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a016:	460b      	mov	r3, r1
 800a018:	4313      	orrs	r3, r2
 800a01a:	f000 8089 	beq.w	800a130 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a024:	2b28      	cmp	r3, #40	; 0x28
 800a026:	d86b      	bhi.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a028:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02e:	bf00      	nop
 800a030:	0800a109 	.word	0x0800a109
 800a034:	0800a101 	.word	0x0800a101
 800a038:	0800a101 	.word	0x0800a101
 800a03c:	0800a101 	.word	0x0800a101
 800a040:	0800a101 	.word	0x0800a101
 800a044:	0800a101 	.word	0x0800a101
 800a048:	0800a101 	.word	0x0800a101
 800a04c:	0800a101 	.word	0x0800a101
 800a050:	0800a0d5 	.word	0x0800a0d5
 800a054:	0800a101 	.word	0x0800a101
 800a058:	0800a101 	.word	0x0800a101
 800a05c:	0800a101 	.word	0x0800a101
 800a060:	0800a101 	.word	0x0800a101
 800a064:	0800a101 	.word	0x0800a101
 800a068:	0800a101 	.word	0x0800a101
 800a06c:	0800a101 	.word	0x0800a101
 800a070:	0800a0eb 	.word	0x0800a0eb
 800a074:	0800a101 	.word	0x0800a101
 800a078:	0800a101 	.word	0x0800a101
 800a07c:	0800a101 	.word	0x0800a101
 800a080:	0800a101 	.word	0x0800a101
 800a084:	0800a101 	.word	0x0800a101
 800a088:	0800a101 	.word	0x0800a101
 800a08c:	0800a101 	.word	0x0800a101
 800a090:	0800a109 	.word	0x0800a109
 800a094:	0800a101 	.word	0x0800a101
 800a098:	0800a101 	.word	0x0800a101
 800a09c:	0800a101 	.word	0x0800a101
 800a0a0:	0800a101 	.word	0x0800a101
 800a0a4:	0800a101 	.word	0x0800a101
 800a0a8:	0800a101 	.word	0x0800a101
 800a0ac:	0800a101 	.word	0x0800a101
 800a0b0:	0800a109 	.word	0x0800a109
 800a0b4:	0800a101 	.word	0x0800a101
 800a0b8:	0800a101 	.word	0x0800a101
 800a0bc:	0800a101 	.word	0x0800a101
 800a0c0:	0800a101 	.word	0x0800a101
 800a0c4:	0800a101 	.word	0x0800a101
 800a0c8:	0800a101 	.word	0x0800a101
 800a0cc:	0800a101 	.word	0x0800a101
 800a0d0:	0800a109 	.word	0x0800a109
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d8:	3308      	adds	r3, #8
 800a0da:	2101      	movs	r1, #1
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f001 fe95 	bl	800be0c <RCCEx_PLL2_Config>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a0e8:	e00f      	b.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ee:	3328      	adds	r3, #40	; 0x28
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f001 ff3c 	bl	800bf70 <RCCEx_PLL3_Config>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a0fe:	e004      	b.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a106:	e000      	b.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a10a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10a      	bne.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a112:	4bbf      	ldr	r3, [pc, #764]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a116:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a11e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a120:	4abb      	ldr	r2, [pc, #748]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a122:	430b      	orrs	r3, r1
 800a124:	6553      	str	r3, [r2, #84]	; 0x54
 800a126:	e003      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a12c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	f002 0302 	and.w	r3, r2, #2
 800a13c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a140:	2300      	movs	r3, #0
 800a142:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a146:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a14a:	460b      	mov	r3, r1
 800a14c:	4313      	orrs	r3, r2
 800a14e:	d041      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a156:	2b05      	cmp	r3, #5
 800a158:	d824      	bhi.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a15a:	a201      	add	r2, pc, #4	; (adr r2, 800a160 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a160:	0800a1ad 	.word	0x0800a1ad
 800a164:	0800a179 	.word	0x0800a179
 800a168:	0800a18f 	.word	0x0800a18f
 800a16c:	0800a1ad 	.word	0x0800a1ad
 800a170:	0800a1ad 	.word	0x0800a1ad
 800a174:	0800a1ad 	.word	0x0800a1ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a17c:	3308      	adds	r3, #8
 800a17e:	2101      	movs	r1, #1
 800a180:	4618      	mov	r0, r3
 800a182:	f001 fe43 	bl	800be0c <RCCEx_PLL2_Config>
 800a186:	4603      	mov	r3, r0
 800a188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a18c:	e00f      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a192:	3328      	adds	r3, #40	; 0x28
 800a194:	2101      	movs	r1, #1
 800a196:	4618      	mov	r0, r3
 800a198:	f001 feea 	bl	800bf70 <RCCEx_PLL3_Config>
 800a19c:	4603      	mov	r3, r0
 800a19e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a1a2:	e004      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1aa:	e000      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a1ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10a      	bne.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a1b6:	4b96      	ldr	r3, [pc, #600]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ba:	f023 0107 	bic.w	r1, r3, #7
 800a1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1c4:	4a92      	ldr	r2, [pc, #584]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1c6:	430b      	orrs	r3, r1
 800a1c8:	6553      	str	r3, [r2, #84]	; 0x54
 800a1ca:	e003      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1dc:	f002 0304 	and.w	r3, r2, #4
 800a1e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	d044      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1fc:	2b05      	cmp	r3, #5
 800a1fe:	d825      	bhi.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a200:	a201      	add	r2, pc, #4	; (adr r2, 800a208 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a206:	bf00      	nop
 800a208:	0800a255 	.word	0x0800a255
 800a20c:	0800a221 	.word	0x0800a221
 800a210:	0800a237 	.word	0x0800a237
 800a214:	0800a255 	.word	0x0800a255
 800a218:	0800a255 	.word	0x0800a255
 800a21c:	0800a255 	.word	0x0800a255
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a224:	3308      	adds	r3, #8
 800a226:	2101      	movs	r1, #1
 800a228:	4618      	mov	r0, r3
 800a22a:	f001 fdef 	bl	800be0c <RCCEx_PLL2_Config>
 800a22e:	4603      	mov	r3, r0
 800a230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a234:	e00f      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a23a:	3328      	adds	r3, #40	; 0x28
 800a23c:	2101      	movs	r1, #1
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 fe96 	bl	800bf70 <RCCEx_PLL3_Config>
 800a244:	4603      	mov	r3, r0
 800a246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a24a:	e004      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a252:	e000      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a254:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10b      	bne.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a25e:	4b6c      	ldr	r3, [pc, #432]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a262:	f023 0107 	bic.w	r1, r3, #7
 800a266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a26a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a26e:	4a68      	ldr	r2, [pc, #416]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a270:	430b      	orrs	r3, r1
 800a272:	6593      	str	r3, [r2, #88]	; 0x58
 800a274:	e003      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a27a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	f002 0320 	and.w	r3, r2, #32
 800a28a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a28e:	2300      	movs	r3, #0
 800a290:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a298:	460b      	mov	r3, r1
 800a29a:	4313      	orrs	r3, r2
 800a29c:	d055      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2aa:	d033      	beq.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a2ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2b0:	d82c      	bhi.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a2b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2b6:	d02f      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a2b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2bc:	d826      	bhi.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a2be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2c2:	d02b      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a2c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2c8:	d820      	bhi.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a2ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2ce:	d012      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a2d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2d4:	d81a      	bhi.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d022      	beq.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a2da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2de:	d115      	bne.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f001 fd8f 	bl	800be0c <RCCEx_PLL2_Config>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a2f4:	e015      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2fa:	3328      	adds	r3, #40	; 0x28
 800a2fc:	2102      	movs	r1, #2
 800a2fe:	4618      	mov	r0, r3
 800a300:	f001 fe36 	bl	800bf70 <RCCEx_PLL3_Config>
 800a304:	4603      	mov	r3, r0
 800a306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a30a:	e00a      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a312:	e006      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a314:	bf00      	nop
 800a316:	e004      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a318:	bf00      	nop
 800a31a:	e002      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a31c:	bf00      	nop
 800a31e:	e000      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a320:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10b      	bne.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a32a:	4b39      	ldr	r3, [pc, #228]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a32c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a32e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a33a:	4a35      	ldr	r2, [pc, #212]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a33c:	430b      	orrs	r3, r1
 800a33e:	6553      	str	r3, [r2, #84]	; 0x54
 800a340:	e003      	b.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a342:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a346:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a35a:	2300      	movs	r3, #0
 800a35c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a360:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a364:	460b      	mov	r3, r1
 800a366:	4313      	orrs	r3, r2
 800a368:	d058      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a36e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a372:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a376:	d033      	beq.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a378:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a37c:	d82c      	bhi.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a37e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a382:	d02f      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a388:	d826      	bhi.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a38a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a38e:	d02b      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a390:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a394:	d820      	bhi.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a39a:	d012      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a39c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3a0:	d81a      	bhi.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d022      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a3a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3aa:	d115      	bne.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b0:	3308      	adds	r3, #8
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f001 fd29 	bl	800be0c <RCCEx_PLL2_Config>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a3c0:	e015      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3c6:	3328      	adds	r3, #40	; 0x28
 800a3c8:	2102      	movs	r1, #2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 fdd0 	bl	800bf70 <RCCEx_PLL3_Config>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a3d6:	e00a      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3de:	e006      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3e0:	bf00      	nop
 800a3e2:	e004      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3e4:	bf00      	nop
 800a3e6:	e002      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3e8:	bf00      	nop
 800a3ea:	e000      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10e      	bne.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a3f6:	4b06      	ldr	r3, [pc, #24]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3fa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a406:	4a02      	ldr	r2, [pc, #8]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a408:	430b      	orrs	r3, r1
 800a40a:	6593      	str	r3, [r2, #88]	; 0x58
 800a40c:	e006      	b.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a40e:	bf00      	nop
 800a410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a414:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a418:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a42c:	2300      	movs	r3, #0
 800a42e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a432:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a436:	460b      	mov	r3, r1
 800a438:	4313      	orrs	r3, r2
 800a43a:	d055      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a440:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a444:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a448:	d033      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a44a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a44e:	d82c      	bhi.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a454:	d02f      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a45a:	d826      	bhi.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a45c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a460:	d02b      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a462:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a466:	d820      	bhi.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a46c:	d012      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a46e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a472:	d81a      	bhi.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a474:	2b00      	cmp	r3, #0
 800a476:	d022      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a47c:	d115      	bne.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a482:	3308      	adds	r3, #8
 800a484:	2100      	movs	r1, #0
 800a486:	4618      	mov	r0, r3
 800a488:	f001 fcc0 	bl	800be0c <RCCEx_PLL2_Config>
 800a48c:	4603      	mov	r3, r0
 800a48e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a492:	e015      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a498:	3328      	adds	r3, #40	; 0x28
 800a49a:	2102      	movs	r1, #2
 800a49c:	4618      	mov	r0, r3
 800a49e:	f001 fd67 	bl	800bf70 <RCCEx_PLL3_Config>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a4a8:	e00a      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a4b0:	e006      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a4b2:	bf00      	nop
 800a4b4:	e004      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a4b6:	bf00      	nop
 800a4b8:	e002      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a4ba:	bf00      	nop
 800a4bc:	e000      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a4be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10b      	bne.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a4c8:	4ba1      	ldr	r3, [pc, #644]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4cc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a4d8:	4a9d      	ldr	r2, [pc, #628]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4da:	430b      	orrs	r3, r1
 800a4dc:	6593      	str	r3, [r2, #88]	; 0x58
 800a4de:	e003      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f0:	f002 0308 	and.w	r3, r2, #8
 800a4f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a4fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a502:	460b      	mov	r3, r1
 800a504:	4313      	orrs	r3, r2
 800a506:	d01e      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a50c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a514:	d10c      	bne.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a51a:	3328      	adds	r3, #40	; 0x28
 800a51c:	2102      	movs	r1, #2
 800a51e:	4618      	mov	r0, r3
 800a520:	f001 fd26 	bl	800bf70 <RCCEx_PLL3_Config>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d002      	beq.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a530:	4b87      	ldr	r3, [pc, #540]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a534:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a53c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a540:	4a83      	ldr	r2, [pc, #524]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a542:	430b      	orrs	r3, r1
 800a544:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54e:	f002 0310 	and.w	r3, r2, #16
 800a552:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a556:	2300      	movs	r3, #0
 800a558:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a55c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a560:	460b      	mov	r3, r1
 800a562:	4313      	orrs	r3, r2
 800a564:	d01e      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a56a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a56e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a572:	d10c      	bne.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a578:	3328      	adds	r3, #40	; 0x28
 800a57a:	2102      	movs	r1, #2
 800a57c:	4618      	mov	r0, r3
 800a57e:	f001 fcf7 	bl	800bf70 <RCCEx_PLL3_Config>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a58e:	4b70      	ldr	r3, [pc, #448]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a592:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a59a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a59e:	4a6c      	ldr	r2, [pc, #432]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5a0:	430b      	orrs	r3, r1
 800a5a2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a5b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a5ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	d03e      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a5cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5d0:	d022      	beq.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a5d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5d6:	d81b      	bhi.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d003      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a5dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5e0:	d00b      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a5e2:	e015      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e8:	3308      	adds	r3, #8
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f001 fc0d 	bl	800be0c <RCCEx_PLL2_Config>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a5f8:	e00f      	b.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5fe:	3328      	adds	r3, #40	; 0x28
 800a600:	2102      	movs	r1, #2
 800a602:	4618      	mov	r0, r3
 800a604:	f001 fcb4 	bl	800bf70 <RCCEx_PLL3_Config>
 800a608:	4603      	mov	r3, r0
 800a60a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a60e:	e004      	b.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a616:	e000      	b.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a61a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10b      	bne.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a622:	4b4b      	ldr	r3, [pc, #300]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a626:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a62e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a632:	4a47      	ldr	r2, [pc, #284]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a634:	430b      	orrs	r3, r1
 800a636:	6593      	str	r3, [r2, #88]	; 0x58
 800a638:	e003      	b.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a63a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a63e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a64e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a650:	2300      	movs	r3, #0
 800a652:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a654:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a658:	460b      	mov	r3, r1
 800a65a:	4313      	orrs	r3, r2
 800a65c:	d03b      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a666:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a66a:	d01f      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a66c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a670:	d818      	bhi.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a676:	d003      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a678:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a67c:	d007      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a67e:	e011      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a680:	4b33      	ldr	r3, [pc, #204]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a684:	4a32      	ldr	r2, [pc, #200]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a68a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a68c:	e00f      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a692:	3328      	adds	r3, #40	; 0x28
 800a694:	2101      	movs	r1, #1
 800a696:	4618      	mov	r0, r3
 800a698:	f001 fc6a 	bl	800bf70 <RCCEx_PLL3_Config>
 800a69c:	4603      	mov	r3, r0
 800a69e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a6a2:	e004      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6aa:	e000      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a6ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10b      	bne.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a6b6:	4b26      	ldr	r3, [pc, #152]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c6:	4a22      	ldr	r2, [pc, #136]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6c8:	430b      	orrs	r3, r1
 800a6ca:	6553      	str	r3, [r2, #84]	; 0x54
 800a6cc:	e003      	b.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a6e2:	673b      	str	r3, [r7, #112]	; 0x70
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	677b      	str	r3, [r7, #116]	; 0x74
 800a6e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	d034      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d003      	beq.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a6fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a700:	d007      	beq.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a702:	e011      	b.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a704:	4b12      	ldr	r3, [pc, #72]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a708:	4a11      	ldr	r2, [pc, #68]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a70a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a70e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a710:	e00e      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a716:	3308      	adds	r3, #8
 800a718:	2102      	movs	r1, #2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f001 fb76 	bl	800be0c <RCCEx_PLL2_Config>
 800a720:	4603      	mov	r3, r0
 800a722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a726:	e003      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a72e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10d      	bne.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a738:	4b05      	ldr	r3, [pc, #20]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a73a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a73c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a746:	4a02      	ldr	r2, [pc, #8]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a748:	430b      	orrs	r3, r1
 800a74a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a74c:	e006      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a74e:	bf00      	nop
 800a750:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a758:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a75c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a768:	66bb      	str	r3, [r7, #104]	; 0x68
 800a76a:	2300      	movs	r3, #0
 800a76c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a76e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a772:	460b      	mov	r3, r1
 800a774:	4313      	orrs	r3, r2
 800a776:	d00c      	beq.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a77c:	3328      	adds	r3, #40	; 0x28
 800a77e:	2102      	movs	r1, #2
 800a780:	4618      	mov	r0, r3
 800a782:	f001 fbf5 	bl	800bf70 <RCCEx_PLL3_Config>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a79e:	663b      	str	r3, [r7, #96]	; 0x60
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	667b      	str	r3, [r7, #100]	; 0x64
 800a7a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	d038      	beq.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7ba:	d018      	beq.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a7bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7c0:	d811      	bhi.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a7c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7c6:	d014      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a7c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7cc:	d80b      	bhi.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d011      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a7d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7d6:	d106      	bne.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7d8:	4bc3      	ldr	r3, [pc, #780]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7dc:	4ac2      	ldr	r2, [pc, #776]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a7e4:	e008      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7ec:	e004      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7ee:	bf00      	nop
 800a7f0:	e002      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7f2:	bf00      	nop
 800a7f4:	e000      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10b      	bne.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a800:	4bb9      	ldr	r3, [pc, #740]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a804:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a80c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a810:	4ab5      	ldr	r2, [pc, #724]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a812:	430b      	orrs	r3, r1
 800a814:	6553      	str	r3, [r2, #84]	; 0x54
 800a816:	e003      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a818:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a81c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a82c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a82e:	2300      	movs	r3, #0
 800a830:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a832:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a836:	460b      	mov	r3, r1
 800a838:	4313      	orrs	r3, r2
 800a83a:	d009      	beq.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a83c:	4baa      	ldr	r3, [pc, #680]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a83e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a840:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a84a:	4aa7      	ldr	r2, [pc, #668]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a84c:	430b      	orrs	r3, r1
 800a84e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a858:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a85c:	653b      	str	r3, [r7, #80]	; 0x50
 800a85e:	2300      	movs	r3, #0
 800a860:	657b      	str	r3, [r7, #84]	; 0x54
 800a862:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a866:	460b      	mov	r3, r1
 800a868:	4313      	orrs	r3, r2
 800a86a:	d00a      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a86c:	4b9e      	ldr	r3, [pc, #632]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a878:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a87c:	4a9a      	ldr	r2, [pc, #616]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a87e:	430b      	orrs	r3, r1
 800a880:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a88e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a890:	2300      	movs	r3, #0
 800a892:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a894:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a898:	460b      	mov	r3, r1
 800a89a:	4313      	orrs	r3, r2
 800a89c:	d009      	beq.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a89e:	4b92      	ldr	r3, [pc, #584]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8a2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8ac:	4a8e      	ldr	r2, [pc, #568]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8ae:	430b      	orrs	r3, r1
 800a8b0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ba:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a8be:	643b      	str	r3, [r7, #64]	; 0x40
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	647b      	str	r3, [r7, #68]	; 0x44
 800a8c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	d00e      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a8ce:	4b86      	ldr	r3, [pc, #536]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	4a85      	ldr	r2, [pc, #532]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8d8:	6113      	str	r3, [r2, #16]
 800a8da:	4b83      	ldr	r3, [pc, #524]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8dc:	6919      	ldr	r1, [r3, #16]
 800a8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a8e6:	4a80      	ldr	r2, [pc, #512]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8e8:	430b      	orrs	r3, r1
 800a8ea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a8f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a902:	460b      	mov	r3, r1
 800a904:	4313      	orrs	r3, r2
 800a906:	d009      	beq.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a908:	4b77      	ldr	r3, [pc, #476]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a90a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a90c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a916:	4a74      	ldr	r2, [pc, #464]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a918:	430b      	orrs	r3, r1
 800a91a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a928:	633b      	str	r3, [r7, #48]	; 0x30
 800a92a:	2300      	movs	r3, #0
 800a92c:	637b      	str	r3, [r7, #52]	; 0x34
 800a92e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a932:	460b      	mov	r3, r1
 800a934:	4313      	orrs	r3, r2
 800a936:	d00a      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a938:	4b6b      	ldr	r3, [pc, #428]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a93a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a93c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a948:	4a67      	ldr	r2, [pc, #412]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a94a:	430b      	orrs	r3, r1
 800a94c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	2100      	movs	r1, #0
 800a958:	62b9      	str	r1, [r7, #40]	; 0x28
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a960:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a964:	460b      	mov	r3, r1
 800a966:	4313      	orrs	r3, r2
 800a968:	d011      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a96e:	3308      	adds	r3, #8
 800a970:	2100      	movs	r1, #0
 800a972:	4618      	mov	r0, r3
 800a974:	f001 fa4a 	bl	800be0c <RCCEx_PLL2_Config>
 800a978:	4603      	mov	r3, r0
 800a97a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a97e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a98a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	2100      	movs	r1, #0
 800a998:	6239      	str	r1, [r7, #32]
 800a99a:	f003 0302 	and.w	r3, r3, #2
 800a99e:	627b      	str	r3, [r7, #36]	; 0x24
 800a9a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	d011      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ae:	3308      	adds	r3, #8
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f001 fa2a 	bl	800be0c <RCCEx_PLL2_Config>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a9be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d003      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	61b9      	str	r1, [r7, #24]
 800a9da:	f003 0304 	and.w	r3, r3, #4
 800a9de:	61fb      	str	r3, [r7, #28]
 800a9e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	d011      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ee:	3308      	adds	r3, #8
 800a9f0:	2102      	movs	r1, #2
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f001 fa0a 	bl	800be0c <RCCEx_PLL2_Config>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a9fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d003      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aa0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa16:	2100      	movs	r1, #0
 800aa18:	6139      	str	r1, [r7, #16]
 800aa1a:	f003 0308 	and.w	r3, r3, #8
 800aa1e:	617b      	str	r3, [r7, #20]
 800aa20:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aa24:	460b      	mov	r3, r1
 800aa26:	4313      	orrs	r3, r2
 800aa28:	d011      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa2e:	3328      	adds	r3, #40	; 0x28
 800aa30:	2100      	movs	r1, #0
 800aa32:	4618      	mov	r0, r3
 800aa34:	f001 fa9c 	bl	800bf70 <RCCEx_PLL3_Config>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800aa3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aa4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa56:	2100      	movs	r1, #0
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	f003 0310 	and.w	r3, r3, #16
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aa64:	460b      	mov	r3, r1
 800aa66:	4313      	orrs	r3, r2
 800aa68:	d011      	beq.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa6e:	3328      	adds	r3, #40	; 0x28
 800aa70:	2101      	movs	r1, #1
 800aa72:	4618      	mov	r0, r3
 800aa74:	f001 fa7c 	bl	800bf70 <RCCEx_PLL3_Config>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d003      	beq.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aa8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa96:	2100      	movs	r1, #0
 800aa98:	6039      	str	r1, [r7, #0]
 800aa9a:	f003 0320 	and.w	r3, r3, #32
 800aa9e:	607b      	str	r3, [r7, #4]
 800aaa0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	d011      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aaaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaae:	3328      	adds	r3, #40	; 0x28
 800aab0:	2102      	movs	r1, #2
 800aab2:	4618      	mov	r0, r3
 800aab4:	f001 fa5c 	bl	800bf70 <RCCEx_PLL3_Config>
 800aab8:	4603      	mov	r3, r0
 800aaba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aabe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d003      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800aace:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	e000      	b.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
}
 800aadc:	4618      	mov	r0, r3
 800aade:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800aae2:	46bd      	mov	sp, r7
 800aae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aae8:	58024400 	.word	0x58024400

0800aaec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b090      	sub	sp, #64	; 0x40
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aaf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aafa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800aafe:	430b      	orrs	r3, r1
 800ab00:	f040 8094 	bne.w	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ab04:	4b9e      	ldr	r3, [pc, #632]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab10:	2b04      	cmp	r3, #4
 800ab12:	f200 8087 	bhi.w	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ab16:	a201      	add	r2, pc, #4	; (adr r2, 800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ab18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1c:	0800ab31 	.word	0x0800ab31
 800ab20:	0800ab59 	.word	0x0800ab59
 800ab24:	0800ab81 	.word	0x0800ab81
 800ab28:	0800ac1d 	.word	0x0800ac1d
 800ab2c:	0800aba9 	.word	0x0800aba9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab30:	4b93      	ldr	r3, [pc, #588]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab3c:	d108      	bne.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab42:	4618      	mov	r0, r3
 800ab44:	f001 f810 	bl	800bb68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab4c:	f000 bd45 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab54:	f000 bd41 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab58:	4b89      	ldr	r3, [pc, #548]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab64:	d108      	bne.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab66:	f107 0318 	add.w	r3, r7, #24
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 fd54 	bl	800b618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab74:	f000 bd31 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab7c:	f000 bd2d 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab80:	4b7f      	ldr	r3, [pc, #508]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab8c:	d108      	bne.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab8e:	f107 030c 	add.w	r3, r7, #12
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 fe94 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab9c:	f000 bd1d 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba4:	f000 bd19 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aba8:	4b75      	ldr	r3, [pc, #468]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abb0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abb2:	4b73      	ldr	r3, [pc, #460]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 0304 	and.w	r3, r3, #4
 800abba:	2b04      	cmp	r3, #4
 800abbc:	d10c      	bne.n	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800abbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d109      	bne.n	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abc4:	4b6e      	ldr	r3, [pc, #440]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	08db      	lsrs	r3, r3, #3
 800abca:	f003 0303 	and.w	r3, r3, #3
 800abce:	4a6d      	ldr	r2, [pc, #436]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800abd0:	fa22 f303 	lsr.w	r3, r2, r3
 800abd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abd6:	e01f      	b.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abd8:	4b69      	ldr	r3, [pc, #420]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe4:	d106      	bne.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800abe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abec:	d102      	bne.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800abee:	4b66      	ldr	r3, [pc, #408]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800abf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abf2:	e011      	b.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abf4:	4b62      	ldr	r3, [pc, #392]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac00:	d106      	bne.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ac02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac08:	d102      	bne.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac0a:	4b60      	ldr	r3, [pc, #384]	; (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ac0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac0e:	e003      	b.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac10:	2300      	movs	r3, #0
 800ac12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac14:	f000 bce1 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac18:	f000 bcdf 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac1c:	4b5c      	ldr	r3, [pc, #368]	; (800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ac1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac20:	f000 bcdb 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac28:	f000 bcd7 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ac2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac30:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ac34:	430b      	orrs	r3, r1
 800ac36:	f040 80ad 	bne.w	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ac3a:	4b51      	ldr	r3, [pc, #324]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac3e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ac42:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac4a:	d056      	beq.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac52:	f200 8090 	bhi.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac58:	2bc0      	cmp	r3, #192	; 0xc0
 800ac5a:	f000 8088 	beq.w	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	2bc0      	cmp	r3, #192	; 0xc0
 800ac62:	f200 8088 	bhi.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac68:	2b80      	cmp	r3, #128	; 0x80
 800ac6a:	d032      	beq.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ac6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6e:	2b80      	cmp	r3, #128	; 0x80
 800ac70:	f200 8081 	bhi.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d003      	beq.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	2b40      	cmp	r3, #64	; 0x40
 800ac7e:	d014      	beq.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ac80:	e079      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac82:	4b3f      	ldr	r3, [pc, #252]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac8e:	d108      	bne.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac94:	4618      	mov	r0, r3
 800ac96:	f000 ff67 	bl	800bb68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac9e:	f000 bc9c 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aca2:	2300      	movs	r3, #0
 800aca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aca6:	f000 bc98 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acaa:	4b35      	ldr	r3, [pc, #212]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acb6:	d108      	bne.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acb8:	f107 0318 	add.w	r3, r7, #24
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 fcab 	bl	800b618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acc6:	f000 bc88 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acca:	2300      	movs	r3, #0
 800accc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acce:	f000 bc84 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acd2:	4b2b      	ldr	r3, [pc, #172]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acde:	d108      	bne.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ace0:	f107 030c 	add.w	r3, r7, #12
 800ace4:	4618      	mov	r0, r3
 800ace6:	f000 fdeb 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acee:	f000 bc74 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf6:	f000 bc70 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acfa:	4b21      	ldr	r3, [pc, #132]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad02:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad04:	4b1e      	ldr	r3, [pc, #120]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f003 0304 	and.w	r3, r3, #4
 800ad0c:	2b04      	cmp	r3, #4
 800ad0e:	d10c      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ad10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d109      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad16:	4b1a      	ldr	r3, [pc, #104]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	08db      	lsrs	r3, r3, #3
 800ad1c:	f003 0303 	and.w	r3, r3, #3
 800ad20:	4a18      	ldr	r2, [pc, #96]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ad22:	fa22 f303 	lsr.w	r3, r2, r3
 800ad26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad28:	e01f      	b.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad2a:	4b15      	ldr	r3, [pc, #84]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad36:	d106      	bne.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ad38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad3e:	d102      	bne.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad40:	4b11      	ldr	r3, [pc, #68]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ad42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad44:	e011      	b.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad46:	4b0e      	ldr	r3, [pc, #56]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad52:	d106      	bne.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ad54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad5a:	d102      	bne.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad5c:	4b0b      	ldr	r3, [pc, #44]	; (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ad5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad60:	e003      	b.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad62:	2300      	movs	r3, #0
 800ad64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad66:	f000 bc38 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad6a:	f000 bc36 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad6e:	4b08      	ldr	r3, [pc, #32]	; (800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ad70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad72:	f000 bc32 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad7a:	f000 bc2e 	b.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad7e:	bf00      	nop
 800ad80:	58024400 	.word	0x58024400
 800ad84:	03d09000 	.word	0x03d09000
 800ad88:	003d0900 	.word	0x003d0900
 800ad8c:	017d7840 	.word	0x017d7840
 800ad90:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ad94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad98:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ad9c:	430b      	orrs	r3, r1
 800ad9e:	f040 809c 	bne.w	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ada2:	4b9e      	ldr	r3, [pc, #632]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ada4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800adaa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800adac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adb2:	d054      	beq.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800adb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adba:	f200 808b 	bhi.w	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800adc4:	f000 8083 	beq.w	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800adc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800adce:	f200 8081 	bhi.w	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800add2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800add8:	d02f      	beq.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800adda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800addc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ade0:	d878      	bhi.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ade2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d004      	beq.n	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adee:	d012      	beq.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800adf0:	e070      	b.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adf2:	4b8a      	ldr	r3, [pc, #552]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adfe:	d107      	bne.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 feaf 	bl	800bb68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae0e:	e3e4      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae14:	e3e1      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae16:	4b81      	ldr	r3, [pc, #516]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae22:	d107      	bne.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae24:	f107 0318 	add.w	r3, r7, #24
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 fbf5 	bl	800b618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae32:	e3d2      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae38:	e3cf      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae3a:	4b78      	ldr	r3, [pc, #480]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae46:	d107      	bne.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae48:	f107 030c 	add.w	r3, r7, #12
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 fd37 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae56:	e3c0      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae5c:	e3bd      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae5e:	4b6f      	ldr	r3, [pc, #444]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae66:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae68:	4b6c      	ldr	r3, [pc, #432]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 0304 	and.w	r3, r3, #4
 800ae70:	2b04      	cmp	r3, #4
 800ae72:	d10c      	bne.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ae74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d109      	bne.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae7a:	4b68      	ldr	r3, [pc, #416]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	08db      	lsrs	r3, r3, #3
 800ae80:	f003 0303 	and.w	r3, r3, #3
 800ae84:	4a66      	ldr	r2, [pc, #408]	; (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ae86:	fa22 f303 	lsr.w	r3, r2, r3
 800ae8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae8c:	e01e      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae8e:	4b63      	ldr	r3, [pc, #396]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae9a:	d106      	bne.n	800aeaa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ae9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aea2:	d102      	bne.n	800aeaa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aea4:	4b5f      	ldr	r3, [pc, #380]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aea8:	e010      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aeaa:	4b5c      	ldr	r3, [pc, #368]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeb6:	d106      	bne.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800aeb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aebe:	d102      	bne.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aec0:	4b59      	ldr	r3, [pc, #356]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aec4:	e002      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aeca:	e386      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aecc:	e385      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aece:	4b57      	ldr	r3, [pc, #348]	; (800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed2:	e382      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed8:	e37f      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aeda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aede:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800aee2:	430b      	orrs	r3, r1
 800aee4:	f040 80a7 	bne.w	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800aee8:	4b4c      	ldr	r3, [pc, #304]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aeea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeec:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800aef0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aef8:	d055      	beq.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af00:	f200 8096 	bhi.w	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af0a:	f000 8084 	beq.w	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af14:	f200 808c 	bhi.w	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af1e:	d030      	beq.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af26:	f200 8083 	bhi.w	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d004      	beq.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800af30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af36:	d012      	beq.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800af38:	e07a      	b.n	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af3a:	4b38      	ldr	r3, [pc, #224]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af46:	d107      	bne.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af4c:	4618      	mov	r0, r3
 800af4e:	f000 fe0b 	bl	800bb68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af56:	e340      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af58:	2300      	movs	r3, #0
 800af5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af5c:	e33d      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af5e:	4b2f      	ldr	r3, [pc, #188]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af6a:	d107      	bne.n	800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af6c:	f107 0318 	add.w	r3, r7, #24
 800af70:	4618      	mov	r0, r3
 800af72:	f000 fb51 	bl	800b618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af7a:	e32e      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af80:	e32b      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af82:	4b26      	ldr	r3, [pc, #152]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af8e:	d107      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af90:	f107 030c 	add.w	r3, r7, #12
 800af94:	4618      	mov	r0, r3
 800af96:	f000 fc93 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af9e:	e31c      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afa4:	e319      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afa6:	4b1d      	ldr	r3, [pc, #116]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afb0:	4b1a      	ldr	r3, [pc, #104]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f003 0304 	and.w	r3, r3, #4
 800afb8:	2b04      	cmp	r3, #4
 800afba:	d10c      	bne.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800afbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d109      	bne.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afc2:	4b16      	ldr	r3, [pc, #88]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	08db      	lsrs	r3, r3, #3
 800afc8:	f003 0303 	and.w	r3, r3, #3
 800afcc:	4a14      	ldr	r2, [pc, #80]	; (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800afce:	fa22 f303 	lsr.w	r3, r2, r3
 800afd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afd4:	e01e      	b.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afd6:	4b11      	ldr	r3, [pc, #68]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afe2:	d106      	bne.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800afe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afea:	d102      	bne.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800afec:	4b0d      	ldr	r3, [pc, #52]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800afee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aff0:	e010      	b.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aff2:	4b0a      	ldr	r3, [pc, #40]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800affa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800affe:	d106      	bne.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b006:	d102      	bne.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b008:	4b07      	ldr	r3, [pc, #28]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b00a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b00c:	e002      	b.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b00e:	2300      	movs	r3, #0
 800b010:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b012:	e2e2      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b014:	e2e1      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b016:	4b05      	ldr	r3, [pc, #20]	; (800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b018:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b01a:	e2de      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b01c:	58024400 	.word	0x58024400
 800b020:	03d09000 	.word	0x03d09000
 800b024:	003d0900 	.word	0x003d0900
 800b028:	017d7840 	.word	0x017d7840
 800b02c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b030:	2300      	movs	r3, #0
 800b032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b034:	e2d1      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b03a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b03e:	430b      	orrs	r3, r1
 800b040:	f040 809c 	bne.w	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b044:	4b93      	ldr	r3, [pc, #588]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b048:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b04c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b054:	d054      	beq.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b05c:	f200 808b 	bhi.w	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b066:	f000 8083 	beq.w	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b070:	f200 8081 	bhi.w	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b07a:	d02f      	beq.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b082:	d878      	bhi.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b086:	2b00      	cmp	r3, #0
 800b088:	d004      	beq.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b090:	d012      	beq.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b092:	e070      	b.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b094:	4b7f      	ldr	r3, [pc, #508]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b09c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0a0:	d107      	bne.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 fd5e 	bl	800bb68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0b0:	e293      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0b6:	e290      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0b8:	4b76      	ldr	r3, [pc, #472]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0c4:	d107      	bne.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0c6:	f107 0318 	add.w	r3, r7, #24
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 faa4 	bl	800b618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0d4:	e281      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0da:	e27e      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0dc:	4b6d      	ldr	r3, [pc, #436]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0e8:	d107      	bne.n	800b0fa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0ea:	f107 030c 	add.w	r3, r7, #12
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 fbe6 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0f8:	e26f      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0fe:	e26c      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b100:	4b64      	ldr	r3, [pc, #400]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b104:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b108:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b10a:	4b62      	ldr	r3, [pc, #392]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f003 0304 	and.w	r3, r3, #4
 800b112:	2b04      	cmp	r3, #4
 800b114:	d10c      	bne.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d109      	bne.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b11c:	4b5d      	ldr	r3, [pc, #372]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	08db      	lsrs	r3, r3, #3
 800b122:	f003 0303 	and.w	r3, r3, #3
 800b126:	4a5c      	ldr	r2, [pc, #368]	; (800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b128:	fa22 f303 	lsr.w	r3, r2, r3
 800b12c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b12e:	e01e      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b130:	4b58      	ldr	r3, [pc, #352]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b13c:	d106      	bne.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b144:	d102      	bne.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b146:	4b55      	ldr	r3, [pc, #340]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b14a:	e010      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b14c:	4b51      	ldr	r3, [pc, #324]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b158:	d106      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b160:	d102      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b162:	4b4f      	ldr	r3, [pc, #316]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b164:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b166:	e002      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b16c:	e235      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b16e:	e234      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b170:	4b4c      	ldr	r3, [pc, #304]	; (800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b174:	e231      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b17a:	e22e      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b17c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b180:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b184:	430b      	orrs	r3, r1
 800b186:	f040 808f 	bne.w	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b18a:	4b42      	ldr	r3, [pc, #264]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b18c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b18e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b192:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b19a:	d06b      	beq.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1a2:	d874      	bhi.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1aa:	d056      	beq.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1b2:	d86c      	bhi.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1ba:	d03b      	beq.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1c2:	d864      	bhi.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1ca:	d021      	beq.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1d2:	d85c      	bhi.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d004      	beq.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1e0:	d004      	beq.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b1e2:	e054      	b.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b1e4:	f7fe fa4c 	bl	8009680 <HAL_RCC_GetPCLK1Freq>
 800b1e8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1ea:	e1f6      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1ec:	4b29      	ldr	r3, [pc, #164]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1f8:	d107      	bne.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1fa:	f107 0318 	add.w	r3, r7, #24
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 fa0a 	bl	800b618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b208:	e1e7      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b20e:	e1e4      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b210:	4b20      	ldr	r3, [pc, #128]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b21c:	d107      	bne.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b21e:	f107 030c 	add.w	r3, r7, #12
 800b222:	4618      	mov	r0, r3
 800b224:	f000 fb4c 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b22c:	e1d5      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b232:	e1d2      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b234:	4b17      	ldr	r3, [pc, #92]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 0304 	and.w	r3, r3, #4
 800b23c:	2b04      	cmp	r3, #4
 800b23e:	d109      	bne.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b240:	4b14      	ldr	r3, [pc, #80]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	08db      	lsrs	r3, r3, #3
 800b246:	f003 0303 	and.w	r3, r3, #3
 800b24a:	4a13      	ldr	r2, [pc, #76]	; (800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b24c:	fa22 f303 	lsr.w	r3, r2, r3
 800b250:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b252:	e1c2      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b258:	e1bf      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b25a:	4b0e      	ldr	r3, [pc, #56]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b266:	d102      	bne.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b268:	4b0c      	ldr	r3, [pc, #48]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b26c:	e1b5      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b26e:	2300      	movs	r3, #0
 800b270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b272:	e1b2      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b274:	4b07      	ldr	r3, [pc, #28]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b27c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b280:	d102      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b282:	4b07      	ldr	r3, [pc, #28]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b284:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b286:	e1a8      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b288:	2300      	movs	r3, #0
 800b28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b28c:	e1a5      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b292:	e1a2      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b294:	58024400 	.word	0x58024400
 800b298:	03d09000 	.word	0x03d09000
 800b29c:	003d0900 	.word	0x003d0900
 800b2a0:	017d7840 	.word	0x017d7840
 800b2a4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b2a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2ac:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b2b0:	430b      	orrs	r3, r1
 800b2b2:	d173      	bne.n	800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b2b4:	4b9c      	ldr	r3, [pc, #624]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b2bc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2c4:	d02f      	beq.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2cc:	d863      	bhi.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d004      	beq.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2da:	d012      	beq.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b2dc:	e05b      	b.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2de:	4b92      	ldr	r3, [pc, #584]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2ea:	d107      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2ec:	f107 0318 	add.w	r3, r7, #24
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f000 f991 	bl	800b618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2fa:	e16e      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b300:	e16b      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b302:	4b89      	ldr	r3, [pc, #548]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b30a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b30e:	d107      	bne.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b310:	f107 030c 	add.w	r3, r7, #12
 800b314:	4618      	mov	r0, r3
 800b316:	f000 fad3 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b31e:	e15c      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b320:	2300      	movs	r3, #0
 800b322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b324:	e159      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b326:	4b80      	ldr	r3, [pc, #512]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b32a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b32e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b330:	4b7d      	ldr	r3, [pc, #500]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f003 0304 	and.w	r3, r3, #4
 800b338:	2b04      	cmp	r3, #4
 800b33a:	d10c      	bne.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d109      	bne.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b342:	4b79      	ldr	r3, [pc, #484]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	08db      	lsrs	r3, r3, #3
 800b348:	f003 0303 	and.w	r3, r3, #3
 800b34c:	4a77      	ldr	r2, [pc, #476]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b34e:	fa22 f303 	lsr.w	r3, r2, r3
 800b352:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b354:	e01e      	b.n	800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b356:	4b74      	ldr	r3, [pc, #464]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b35e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b362:	d106      	bne.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b36a:	d102      	bne.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b36c:	4b70      	ldr	r3, [pc, #448]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b36e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b370:	e010      	b.n	800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b372:	4b6d      	ldr	r3, [pc, #436]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b37a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b37e:	d106      	bne.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b386:	d102      	bne.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b388:	4b6a      	ldr	r3, [pc, #424]	; (800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b38a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b38c:	e002      	b.n	800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b392:	e122      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b394:	e121      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b396:	2300      	movs	r3, #0
 800b398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b39a:	e11e      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3a0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b3a4:	430b      	orrs	r3, r1
 800b3a6:	d133      	bne.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b3a8:	4b5f      	ldr	r3, [pc, #380]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3b0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d004      	beq.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3be:	d012      	beq.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b3c0:	e023      	b.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3c2:	4b59      	ldr	r3, [pc, #356]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3ce:	d107      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 fbc7 	bl	800bb68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3de:	e0fc      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3e4:	e0f9      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3e6:	4b50      	ldr	r3, [pc, #320]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3f2:	d107      	bne.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3f4:	f107 0318 	add.w	r3, r7, #24
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f000 f90d 	bl	800b618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b3fe:	6a3b      	ldr	r3, [r7, #32]
 800b400:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b402:	e0ea      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b404:	2300      	movs	r3, #0
 800b406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b408:	e0e7      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b40e:	e0e4      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b410:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b414:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b418:	430b      	orrs	r3, r1
 800b41a:	f040 808d 	bne.w	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b41e:	4b42      	ldr	r3, [pc, #264]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b422:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b426:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b42e:	d06b      	beq.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b436:	d874      	bhi.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b43e:	d056      	beq.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b446:	d86c      	bhi.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b44e:	d03b      	beq.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b452:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b456:	d864      	bhi.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b45e:	d021      	beq.n	800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b466:	d85c      	bhi.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d004      	beq.n	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b474:	d004      	beq.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b476:	e054      	b.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b478:	f000 f8b8 	bl	800b5ec <HAL_RCCEx_GetD3PCLK1Freq>
 800b47c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b47e:	e0ac      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b480:	4b29      	ldr	r3, [pc, #164]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b48c:	d107      	bne.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b48e:	f107 0318 	add.w	r3, r7, #24
 800b492:	4618      	mov	r0, r3
 800b494:	f000 f8c0 	bl	800b618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b49c:	e09d      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4a2:	e09a      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4a4:	4b20      	ldr	r3, [pc, #128]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4b0:	d107      	bne.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4b2:	f107 030c 	add.w	r3, r7, #12
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f000 fa02 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4c0:	e08b      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4c6:	e088      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b4c8:	4b17      	ldr	r3, [pc, #92]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f003 0304 	and.w	r3, r3, #4
 800b4d0:	2b04      	cmp	r3, #4
 800b4d2:	d109      	bne.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4d4:	4b14      	ldr	r3, [pc, #80]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	08db      	lsrs	r3, r3, #3
 800b4da:	f003 0303 	and.w	r3, r3, #3
 800b4de:	4a13      	ldr	r2, [pc, #76]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b4e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4e6:	e078      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4ec:	e075      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b4ee:	4b0e      	ldr	r3, [pc, #56]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4fa:	d102      	bne.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b4fc:	4b0c      	ldr	r3, [pc, #48]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b500:	e06b      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b502:	2300      	movs	r3, #0
 800b504:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b506:	e068      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b508:	4b07      	ldr	r3, [pc, #28]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b514:	d102      	bne.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b516:	4b07      	ldr	r3, [pc, #28]	; (800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b518:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b51a:	e05e      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b51c:	2300      	movs	r3, #0
 800b51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b520:	e05b      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b522:	2300      	movs	r3, #0
 800b524:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b526:	e058      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b528:	58024400 	.word	0x58024400
 800b52c:	03d09000 	.word	0x03d09000
 800b530:	003d0900 	.word	0x003d0900
 800b534:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b53c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b540:	430b      	orrs	r3, r1
 800b542:	d148      	bne.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b544:	4b27      	ldr	r3, [pc, #156]	; (800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b54c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b554:	d02a      	beq.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b55c:	d838      	bhi.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b560:	2b00      	cmp	r3, #0
 800b562:	d004      	beq.n	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b56a:	d00d      	beq.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b56c:	e030      	b.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b56e:	4b1d      	ldr	r3, [pc, #116]	; (800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b57a:	d102      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b57c:	4b1a      	ldr	r3, [pc, #104]	; (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b580:	e02b      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b582:	2300      	movs	r3, #0
 800b584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b586:	e028      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b588:	4b16      	ldr	r3, [pc, #88]	; (800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b590:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b594:	d107      	bne.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b59a:	4618      	mov	r0, r3
 800b59c:	f000 fae4 	bl	800bb68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5a4:	e019      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5aa:	e016      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5ac:	4b0d      	ldr	r3, [pc, #52]	; (800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5b8:	d107      	bne.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5ba:	f107 0318 	add.w	r3, r7, #24
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f000 f82a 	bl	800b618 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5c8:	e007      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5ce:	e004      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5d4:	e001      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3740      	adds	r7, #64	; 0x40
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	58024400 	.word	0x58024400
 800b5e8:	017d7840 	.word	0x017d7840

0800b5ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b5f0:	f7fe f816 	bl	8009620 <HAL_RCC_GetHCLKFreq>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	4b06      	ldr	r3, [pc, #24]	; (800b610 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	091b      	lsrs	r3, r3, #4
 800b5fc:	f003 0307 	and.w	r3, r3, #7
 800b600:	4904      	ldr	r1, [pc, #16]	; (800b614 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b602:	5ccb      	ldrb	r3, [r1, r3]
 800b604:	f003 031f 	and.w	r3, r3, #31
 800b608:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	58024400 	.word	0x58024400
 800b614:	08010f28 	.word	0x08010f28

0800b618 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b618:	b480      	push	{r7}
 800b61a:	b089      	sub	sp, #36	; 0x24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b620:	4ba1      	ldr	r3, [pc, #644]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b624:	f003 0303 	and.w	r3, r3, #3
 800b628:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b62a:	4b9f      	ldr	r3, [pc, #636]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62e:	0b1b      	lsrs	r3, r3, #12
 800b630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b634:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b636:	4b9c      	ldr	r3, [pc, #624]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63a:	091b      	lsrs	r3, r3, #4
 800b63c:	f003 0301 	and.w	r3, r3, #1
 800b640:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b642:	4b99      	ldr	r3, [pc, #612]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b646:	08db      	lsrs	r3, r3, #3
 800b648:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b64c:	693a      	ldr	r2, [r7, #16]
 800b64e:	fb02 f303 	mul.w	r3, r2, r3
 800b652:	ee07 3a90 	vmov	s15, r3
 800b656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b65a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2b00      	cmp	r3, #0
 800b662:	f000 8111 	beq.w	800b888 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	2b02      	cmp	r3, #2
 800b66a:	f000 8083 	beq.w	800b774 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	2b02      	cmp	r3, #2
 800b672:	f200 80a1 	bhi.w	800b7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d003      	beq.n	800b684 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d056      	beq.n	800b730 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b682:	e099      	b.n	800b7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b684:	4b88      	ldr	r3, [pc, #544]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 0320 	and.w	r3, r3, #32
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d02d      	beq.n	800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b690:	4b85      	ldr	r3, [pc, #532]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	08db      	lsrs	r3, r3, #3
 800b696:	f003 0303 	and.w	r3, r3, #3
 800b69a:	4a84      	ldr	r2, [pc, #528]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b69c:	fa22 f303 	lsr.w	r3, r2, r3
 800b6a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	ee07 3a90 	vmov	s15, r3
 800b6a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	ee07 3a90 	vmov	s15, r3
 800b6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ba:	4b7b      	ldr	r3, [pc, #492]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c2:	ee07 3a90 	vmov	s15, r3
 800b6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b6ea:	e087      	b.n	800b7fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	ee07 3a90 	vmov	s15, r3
 800b6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6fe:	4b6a      	ldr	r3, [pc, #424]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b706:	ee07 3a90 	vmov	s15, r3
 800b70a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b70e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b712:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b71a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b71e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b72a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b72e:	e065      	b.n	800b7fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	ee07 3a90 	vmov	s15, r3
 800b736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b73a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b73e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b742:	4b59      	ldr	r3, [pc, #356]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b74a:	ee07 3a90 	vmov	s15, r3
 800b74e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b752:	ed97 6a03 	vldr	s12, [r7, #12]
 800b756:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b75a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b75e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b76a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b76e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b772:	e043      	b.n	800b7fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	ee07 3a90 	vmov	s15, r3
 800b77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b77e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b8bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b786:	4b48      	ldr	r3, [pc, #288]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b78e:	ee07 3a90 	vmov	s15, r3
 800b792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b796:	ed97 6a03 	vldr	s12, [r7, #12]
 800b79a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b79e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7b6:	e021      	b.n	800b7fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	ee07 3a90 	vmov	s15, r3
 800b7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b7c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ca:	4b37      	ldr	r3, [pc, #220]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d2:	ee07 3a90 	vmov	s15, r3
 800b7d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7de:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b7fc:	4b2a      	ldr	r3, [pc, #168]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b800:	0a5b      	lsrs	r3, r3, #9
 800b802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b806:	ee07 3a90 	vmov	s15, r3
 800b80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b80e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b812:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b816:	edd7 6a07 	vldr	s13, [r7, #28]
 800b81a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b81e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b822:	ee17 2a90 	vmov	r2, s15
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b82a:	4b1f      	ldr	r3, [pc, #124]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82e:	0c1b      	lsrs	r3, r3, #16
 800b830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b834:	ee07 3a90 	vmov	s15, r3
 800b838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b83c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b840:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b844:	edd7 6a07 	vldr	s13, [r7, #28]
 800b848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b84c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b850:	ee17 2a90 	vmov	r2, s15
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b858:	4b13      	ldr	r3, [pc, #76]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b85c:	0e1b      	lsrs	r3, r3, #24
 800b85e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b862:	ee07 3a90 	vmov	s15, r3
 800b866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b86a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b86e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b872:	edd7 6a07 	vldr	s13, [r7, #28]
 800b876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b87a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b87e:	ee17 2a90 	vmov	r2, s15
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b886:	e008      	b.n	800b89a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	609a      	str	r2, [r3, #8]
}
 800b89a:	bf00      	nop
 800b89c:	3724      	adds	r7, #36	; 0x24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr
 800b8a6:	bf00      	nop
 800b8a8:	58024400 	.word	0x58024400
 800b8ac:	03d09000 	.word	0x03d09000
 800b8b0:	46000000 	.word	0x46000000
 800b8b4:	4c742400 	.word	0x4c742400
 800b8b8:	4a742400 	.word	0x4a742400
 800b8bc:	4bbebc20 	.word	0x4bbebc20

0800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b089      	sub	sp, #36	; 0x24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8c8:	4ba1      	ldr	r3, [pc, #644]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8cc:	f003 0303 	and.w	r3, r3, #3
 800b8d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b8d2:	4b9f      	ldr	r3, [pc, #636]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d6:	0d1b      	lsrs	r3, r3, #20
 800b8d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b8de:	4b9c      	ldr	r3, [pc, #624]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e2:	0a1b      	lsrs	r3, r3, #8
 800b8e4:	f003 0301 	and.w	r3, r3, #1
 800b8e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b8ea:	4b99      	ldr	r3, [pc, #612]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ee:	08db      	lsrs	r3, r3, #3
 800b8f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	fb02 f303 	mul.w	r3, r2, r3
 800b8fa:	ee07 3a90 	vmov	s15, r3
 800b8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b902:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	f000 8111 	beq.w	800bb30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	2b02      	cmp	r3, #2
 800b912:	f000 8083 	beq.w	800ba1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	2b02      	cmp	r3, #2
 800b91a:	f200 80a1 	bhi.w	800ba60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d003      	beq.n	800b92c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d056      	beq.n	800b9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b92a:	e099      	b.n	800ba60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b92c:	4b88      	ldr	r3, [pc, #544]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f003 0320 	and.w	r3, r3, #32
 800b934:	2b00      	cmp	r3, #0
 800b936:	d02d      	beq.n	800b994 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b938:	4b85      	ldr	r3, [pc, #532]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	08db      	lsrs	r3, r3, #3
 800b93e:	f003 0303 	and.w	r3, r3, #3
 800b942:	4a84      	ldr	r2, [pc, #528]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b944:	fa22 f303 	lsr.w	r3, r2, r3
 800b948:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	ee07 3a90 	vmov	s15, r3
 800b950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	ee07 3a90 	vmov	s15, r3
 800b95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b95e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b962:	4b7b      	ldr	r3, [pc, #492]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b96a:	ee07 3a90 	vmov	s15, r3
 800b96e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b972:	ed97 6a03 	vldr	s12, [r7, #12]
 800b976:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b97a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b97e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b98a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b98e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b992:	e087      	b.n	800baa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	ee07 3a90 	vmov	s15, r3
 800b99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b99e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bb5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9a6:	4b6a      	ldr	r3, [pc, #424]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ae:	ee07 3a90 	vmov	s15, r3
 800b9b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9d6:	e065      	b.n	800baa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	ee07 3a90 	vmov	s15, r3
 800b9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bb60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b9e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9ea:	4b59      	ldr	r3, [pc, #356]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f2:	ee07 3a90 	vmov	s15, r3
 800b9f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba1a:	e043      	b.n	800baa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	ee07 3a90 	vmov	s15, r3
 800ba22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bb64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ba2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba2e:	4b48      	ldr	r3, [pc, #288]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba36:	ee07 3a90 	vmov	s15, r3
 800ba3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba42:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba5e:	e021      	b.n	800baa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	ee07 3a90 	vmov	s15, r3
 800ba66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bb60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba72:	4b37      	ldr	r3, [pc, #220]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba7a:	ee07 3a90 	vmov	s15, r3
 800ba7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba86:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800baa2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800baa4:	4b2a      	ldr	r3, [pc, #168]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa8:	0a5b      	lsrs	r3, r3, #9
 800baaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baae:	ee07 3a90 	vmov	s15, r3
 800bab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800baba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800babe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baca:	ee17 2a90 	vmov	r2, s15
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bad2:	4b1f      	ldr	r3, [pc, #124]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad6:	0c1b      	lsrs	r3, r3, #16
 800bad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800badc:	ee07 3a90 	vmov	s15, r3
 800bae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800baec:	edd7 6a07 	vldr	s13, [r7, #28]
 800baf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baf8:	ee17 2a90 	vmov	r2, s15
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bb00:	4b13      	ldr	r3, [pc, #76]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb04:	0e1b      	lsrs	r3, r3, #24
 800bb06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb0a:	ee07 3a90 	vmov	s15, r3
 800bb0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb26:	ee17 2a90 	vmov	r2, s15
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bb2e:	e008      	b.n	800bb42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	609a      	str	r2, [r3, #8]
}
 800bb42:	bf00      	nop
 800bb44:	3724      	adds	r7, #36	; 0x24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	58024400 	.word	0x58024400
 800bb54:	03d09000 	.word	0x03d09000
 800bb58:	46000000 	.word	0x46000000
 800bb5c:	4c742400 	.word	0x4c742400
 800bb60:	4a742400 	.word	0x4a742400
 800bb64:	4bbebc20 	.word	0x4bbebc20

0800bb68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b089      	sub	sp, #36	; 0x24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb70:	4ba0      	ldr	r3, [pc, #640]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb74:	f003 0303 	and.w	r3, r3, #3
 800bb78:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bb7a:	4b9e      	ldr	r3, [pc, #632]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb7e:	091b      	lsrs	r3, r3, #4
 800bb80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb84:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bb86:	4b9b      	ldr	r3, [pc, #620]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bb90:	4b98      	ldr	r3, [pc, #608]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb94:	08db      	lsrs	r3, r3, #3
 800bb96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb9a:	693a      	ldr	r2, [r7, #16]
 800bb9c:	fb02 f303 	mul.w	r3, r2, r3
 800bba0:	ee07 3a90 	vmov	s15, r3
 800bba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f000 8111 	beq.w	800bdd6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bbb4:	69bb      	ldr	r3, [r7, #24]
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	f000 8083 	beq.w	800bcc2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	f200 80a1 	bhi.w	800bd06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d003      	beq.n	800bbd2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bbca:	69bb      	ldr	r3, [r7, #24]
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d056      	beq.n	800bc7e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bbd0:	e099      	b.n	800bd06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbd2:	4b88      	ldr	r3, [pc, #544]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f003 0320 	and.w	r3, r3, #32
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d02d      	beq.n	800bc3a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbde:	4b85      	ldr	r3, [pc, #532]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	08db      	lsrs	r3, r3, #3
 800bbe4:	f003 0303 	and.w	r3, r3, #3
 800bbe8:	4a83      	ldr	r2, [pc, #524]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bbea:	fa22 f303 	lsr.w	r3, r2, r3
 800bbee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	ee07 3a90 	vmov	s15, r3
 800bbf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	ee07 3a90 	vmov	s15, r3
 800bc00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc08:	4b7a      	ldr	r3, [pc, #488]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc10:	ee07 3a90 	vmov	s15, r3
 800bc14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc18:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc1c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc34:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc38:	e087      	b.n	800bd4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	ee07 3a90 	vmov	s15, r3
 800bc40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc44:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800be00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bc48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc4c:	4b69      	ldr	r3, [pc, #420]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc54:	ee07 3a90 	vmov	s15, r3
 800bc58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc60:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc7c:	e065      	b.n	800bd4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	ee07 3a90 	vmov	s15, r3
 800bc84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc88:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800be04 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bc8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc90:	4b58      	ldr	r3, [pc, #352]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc98:	ee07 3a90 	vmov	s15, r3
 800bc9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bca0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bca4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcc0:	e043      	b.n	800bd4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	ee07 3a90 	vmov	s15, r3
 800bcc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bccc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800be08 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bcd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcd4:	4b47      	ldr	r3, [pc, #284]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcdc:	ee07 3a90 	vmov	s15, r3
 800bce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bce4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bce8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd04:	e021      	b.n	800bd4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	ee07 3a90 	vmov	s15, r3
 800bd0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd10:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800be00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd18:	4b36      	ldr	r3, [pc, #216]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd20:	ee07 3a90 	vmov	s15, r3
 800bd24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd28:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd2c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd48:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bd4a:	4b2a      	ldr	r3, [pc, #168]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd4e:	0a5b      	lsrs	r3, r3, #9
 800bd50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd54:	ee07 3a90 	vmov	s15, r3
 800bd58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd60:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd64:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd70:	ee17 2a90 	vmov	r2, s15
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bd78:	4b1e      	ldr	r3, [pc, #120]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd7c:	0c1b      	lsrs	r3, r3, #16
 800bd7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd82:	ee07 3a90 	vmov	s15, r3
 800bd86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd92:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd9e:	ee17 2a90 	vmov	r2, s15
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bda6:	4b13      	ldr	r3, [pc, #76]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdaa:	0e1b      	lsrs	r3, r3, #24
 800bdac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdb0:	ee07 3a90 	vmov	s15, r3
 800bdb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdc0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdcc:	ee17 2a90 	vmov	r2, s15
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bdd4:	e008      	b.n	800bde8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	609a      	str	r2, [r3, #8]
}
 800bde8:	bf00      	nop
 800bdea:	3724      	adds	r7, #36	; 0x24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr
 800bdf4:	58024400 	.word	0x58024400
 800bdf8:	03d09000 	.word	0x03d09000
 800bdfc:	46000000 	.word	0x46000000
 800be00:	4c742400 	.word	0x4c742400
 800be04:	4a742400 	.word	0x4a742400
 800be08:	4bbebc20 	.word	0x4bbebc20

0800be0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be1a:	4b53      	ldr	r3, [pc, #332]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800be1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1e:	f003 0303 	and.w	r3, r3, #3
 800be22:	2b03      	cmp	r3, #3
 800be24:	d101      	bne.n	800be2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800be26:	2301      	movs	r3, #1
 800be28:	e099      	b.n	800bf5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800be2a:	4b4f      	ldr	r3, [pc, #316]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a4e      	ldr	r2, [pc, #312]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800be30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be36:	f7f6 fcf1 	bl	800281c <HAL_GetTick>
 800be3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be3c:	e008      	b.n	800be50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be3e:	f7f6 fced 	bl	800281c <HAL_GetTick>
 800be42:	4602      	mov	r2, r0
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	1ad3      	subs	r3, r2, r3
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d901      	bls.n	800be50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be4c:	2303      	movs	r3, #3
 800be4e:	e086      	b.n	800bf5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be50:	4b45      	ldr	r3, [pc, #276]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1f0      	bne.n	800be3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800be5c:	4b42      	ldr	r3, [pc, #264]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800be5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	031b      	lsls	r3, r3, #12
 800be6a:	493f      	ldr	r1, [pc, #252]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800be6c:	4313      	orrs	r3, r2
 800be6e:	628b      	str	r3, [r1, #40]	; 0x28
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	3b01      	subs	r3, #1
 800be76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	3b01      	subs	r3, #1
 800be80:	025b      	lsls	r3, r3, #9
 800be82:	b29b      	uxth	r3, r3
 800be84:	431a      	orrs	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	3b01      	subs	r3, #1
 800be8c:	041b      	lsls	r3, r3, #16
 800be8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be92:	431a      	orrs	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	3b01      	subs	r3, #1
 800be9a:	061b      	lsls	r3, r3, #24
 800be9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bea0:	4931      	ldr	r1, [pc, #196]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bea2:	4313      	orrs	r3, r2
 800bea4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bea6:	4b30      	ldr	r3, [pc, #192]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	695b      	ldr	r3, [r3, #20]
 800beb2:	492d      	ldr	r1, [pc, #180]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800beb4:	4313      	orrs	r3, r2
 800beb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800beb8:	4b2b      	ldr	r3, [pc, #172]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800beba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bebc:	f023 0220 	bic.w	r2, r3, #32
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	699b      	ldr	r3, [r3, #24]
 800bec4:	4928      	ldr	r1, [pc, #160]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bec6:	4313      	orrs	r3, r2
 800bec8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800beca:	4b27      	ldr	r3, [pc, #156]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800becc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bece:	4a26      	ldr	r2, [pc, #152]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bed0:	f023 0310 	bic.w	r3, r3, #16
 800bed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bed6:	4b24      	ldr	r3, [pc, #144]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800beda:	4b24      	ldr	r3, [pc, #144]	; (800bf6c <RCCEx_PLL2_Config+0x160>)
 800bedc:	4013      	ands	r3, r2
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	69d2      	ldr	r2, [r2, #28]
 800bee2:	00d2      	lsls	r2, r2, #3
 800bee4:	4920      	ldr	r1, [pc, #128]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bee6:	4313      	orrs	r3, r2
 800bee8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800beea:	4b1f      	ldr	r3, [pc, #124]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800beec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beee:	4a1e      	ldr	r2, [pc, #120]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bef0:	f043 0310 	orr.w	r3, r3, #16
 800bef4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d106      	bne.n	800bf0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800befc:	4b1a      	ldr	r3, [pc, #104]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800befe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf00:	4a19      	ldr	r2, [pc, #100]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bf02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf06:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf08:	e00f      	b.n	800bf2a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d106      	bne.n	800bf1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bf10:	4b15      	ldr	r3, [pc, #84]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf14:	4a14      	ldr	r2, [pc, #80]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bf16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf1c:	e005      	b.n	800bf2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bf1e:	4b12      	ldr	r3, [pc, #72]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf22:	4a11      	ldr	r2, [pc, #68]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bf24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bf28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bf2a:	4b0f      	ldr	r3, [pc, #60]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a0e      	ldr	r2, [pc, #56]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bf30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf36:	f7f6 fc71 	bl	800281c <HAL_GetTick>
 800bf3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf3c:	e008      	b.n	800bf50 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bf3e:	f7f6 fc6d 	bl	800281c <HAL_GetTick>
 800bf42:	4602      	mov	r2, r0
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	1ad3      	subs	r3, r2, r3
 800bf48:	2b02      	cmp	r3, #2
 800bf4a:	d901      	bls.n	800bf50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	e006      	b.n	800bf5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf50:	4b05      	ldr	r3, [pc, #20]	; (800bf68 <RCCEx_PLL2_Config+0x15c>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d0f0      	beq.n	800bf3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	58024400 	.word	0x58024400
 800bf6c:	ffff0007 	.word	0xffff0007

0800bf70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf7e:	4b53      	ldr	r3, [pc, #332]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800bf80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf82:	f003 0303 	and.w	r3, r3, #3
 800bf86:	2b03      	cmp	r3, #3
 800bf88:	d101      	bne.n	800bf8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e099      	b.n	800c0c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bf8e:	4b4f      	ldr	r3, [pc, #316]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a4e      	ldr	r2, [pc, #312]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800bf94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf9a:	f7f6 fc3f 	bl	800281c <HAL_GetTick>
 800bf9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bfa0:	e008      	b.n	800bfb4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bfa2:	f7f6 fc3b 	bl	800281c <HAL_GetTick>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d901      	bls.n	800bfb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	e086      	b.n	800c0c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bfb4:	4b45      	ldr	r3, [pc, #276]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1f0      	bne.n	800bfa2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bfc0:	4b42      	ldr	r3, [pc, #264]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800bfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	051b      	lsls	r3, r3, #20
 800bfce:	493f      	ldr	r1, [pc, #252]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	628b      	str	r3, [r1, #40]	; 0x28
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	025b      	lsls	r3, r3, #9
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	431a      	orrs	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	3b01      	subs	r3, #1
 800bff0:	041b      	lsls	r3, r3, #16
 800bff2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bff6:	431a      	orrs	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	3b01      	subs	r3, #1
 800bffe:	061b      	lsls	r3, r3, #24
 800c000:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c004:	4931      	ldr	r1, [pc, #196]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c006:	4313      	orrs	r3, r2
 800c008:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c00a:	4b30      	ldr	r3, [pc, #192]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	695b      	ldr	r3, [r3, #20]
 800c016:	492d      	ldr	r1, [pc, #180]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c018:	4313      	orrs	r3, r2
 800c01a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c01c:	4b2b      	ldr	r3, [pc, #172]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c020:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	699b      	ldr	r3, [r3, #24]
 800c028:	4928      	ldr	r1, [pc, #160]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c02a:	4313      	orrs	r3, r2
 800c02c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c02e:	4b27      	ldr	r3, [pc, #156]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c032:	4a26      	ldr	r2, [pc, #152]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c038:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c03a:	4b24      	ldr	r3, [pc, #144]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c03c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c03e:	4b24      	ldr	r3, [pc, #144]	; (800c0d0 <RCCEx_PLL3_Config+0x160>)
 800c040:	4013      	ands	r3, r2
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	69d2      	ldr	r2, [r2, #28]
 800c046:	00d2      	lsls	r2, r2, #3
 800c048:	4920      	ldr	r1, [pc, #128]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c04a:	4313      	orrs	r3, r2
 800c04c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c04e:	4b1f      	ldr	r3, [pc, #124]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c052:	4a1e      	ldr	r2, [pc, #120]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c058:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d106      	bne.n	800c06e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c060:	4b1a      	ldr	r3, [pc, #104]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c064:	4a19      	ldr	r2, [pc, #100]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c066:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c06a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c06c:	e00f      	b.n	800c08e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	2b01      	cmp	r3, #1
 800c072:	d106      	bne.n	800c082 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c074:	4b15      	ldr	r3, [pc, #84]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c078:	4a14      	ldr	r2, [pc, #80]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c07a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c07e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c080:	e005      	b.n	800c08e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c082:	4b12      	ldr	r3, [pc, #72]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c086:	4a11      	ldr	r2, [pc, #68]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c088:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c08c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c08e:	4b0f      	ldr	r3, [pc, #60]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a0e      	ldr	r2, [pc, #56]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c09a:	f7f6 fbbf 	bl	800281c <HAL_GetTick>
 800c09e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c0a0:	e008      	b.n	800c0b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c0a2:	f7f6 fbbb 	bl	800281c <HAL_GetTick>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	2b02      	cmp	r3, #2
 800c0ae:	d901      	bls.n	800c0b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c0b0:	2303      	movs	r3, #3
 800c0b2:	e006      	b.n	800c0c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c0b4:	4b05      	ldr	r3, [pc, #20]	; (800c0cc <RCCEx_PLL3_Config+0x15c>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d0f0      	beq.n	800c0a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	58024400 	.word	0x58024400
 800c0d0:	ffff0007 	.word	0xffff0007

0800c0d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d101      	bne.n	800c0e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e10f      	b.n	800c306 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a87      	ldr	r2, [pc, #540]	; (800c310 <HAL_SPI_Init+0x23c>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d00f      	beq.n	800c116 <HAL_SPI_Init+0x42>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a86      	ldr	r2, [pc, #536]	; (800c314 <HAL_SPI_Init+0x240>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d00a      	beq.n	800c116 <HAL_SPI_Init+0x42>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a84      	ldr	r2, [pc, #528]	; (800c318 <HAL_SPI_Init+0x244>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d005      	beq.n	800c116 <HAL_SPI_Init+0x42>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	68db      	ldr	r3, [r3, #12]
 800c10e:	2b0f      	cmp	r3, #15
 800c110:	d901      	bls.n	800c116 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	e0f7      	b.n	800c306 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 fc12 	bl	800c940 <SPI_GetPacketSize>
 800c11c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a7b      	ldr	r2, [pc, #492]	; (800c310 <HAL_SPI_Init+0x23c>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d00c      	beq.n	800c142 <HAL_SPI_Init+0x6e>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a79      	ldr	r2, [pc, #484]	; (800c314 <HAL_SPI_Init+0x240>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d007      	beq.n	800c142 <HAL_SPI_Init+0x6e>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a78      	ldr	r2, [pc, #480]	; (800c318 <HAL_SPI_Init+0x244>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d002      	beq.n	800c142 <HAL_SPI_Init+0x6e>
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2b08      	cmp	r3, #8
 800c140:	d811      	bhi.n	800c166 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c146:	4a72      	ldr	r2, [pc, #456]	; (800c310 <HAL_SPI_Init+0x23c>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d009      	beq.n	800c160 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a70      	ldr	r2, [pc, #448]	; (800c314 <HAL_SPI_Init+0x240>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d004      	beq.n	800c160 <HAL_SPI_Init+0x8c>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a6f      	ldr	r2, [pc, #444]	; (800c318 <HAL_SPI_Init+0x244>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d104      	bne.n	800c16a <HAL_SPI_Init+0x96>
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2b10      	cmp	r3, #16
 800c164:	d901      	bls.n	800c16a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	e0cd      	b.n	800c306 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c170:	b2db      	uxtb	r3, r3
 800c172:	2b00      	cmp	r3, #0
 800c174:	d106      	bne.n	800c184 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7f5 ff68 	bl	8002054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2202      	movs	r2, #2
 800c188:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f022 0201 	bic.w	r2, r2, #1
 800c19a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c1a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1b0:	d119      	bne.n	800c1e6 <HAL_SPI_Init+0x112>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1ba:	d103      	bne.n	800c1c4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d008      	beq.n	800c1d6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10c      	bne.n	800c1e6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c1d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1d4:	d107      	bne.n	800c1e6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c1e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00f      	beq.n	800c212 <HAL_SPI_Init+0x13e>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	68db      	ldr	r3, [r3, #12]
 800c1f6:	2b06      	cmp	r3, #6
 800c1f8:	d90b      	bls.n	800c212 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	430a      	orrs	r2, r1
 800c20e:	601a      	str	r2, [r3, #0]
 800c210:	e007      	b.n	800c222 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c220:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	69da      	ldr	r2, [r3, #28]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c22a:	431a      	orrs	r2, r3
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	431a      	orrs	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c234:	ea42 0103 	orr.w	r1, r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	68da      	ldr	r2, [r3, #12]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	430a      	orrs	r2, r1
 800c242:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24c:	431a      	orrs	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c252:	431a      	orrs	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	699b      	ldr	r3, [r3, #24]
 800c258:	431a      	orrs	r2, r3
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	691b      	ldr	r3, [r3, #16]
 800c25e:	431a      	orrs	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	695b      	ldr	r3, [r3, #20]
 800c264:	431a      	orrs	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a1b      	ldr	r3, [r3, #32]
 800c26a:	431a      	orrs	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	431a      	orrs	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c276:	431a      	orrs	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	431a      	orrs	r2, r3
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c282:	ea42 0103 	orr.w	r1, r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	430a      	orrs	r2, r1
 800c290:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d113      	bne.n	800c2c2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c2c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f022 0201 	bic.w	r2, r2, #1
 800c2d0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00a      	beq.n	800c2f4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	430a      	orrs	r2, r1
 800c2f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	40013000 	.word	0x40013000
 800c314:	40003800 	.word	0x40003800
 800c318:	40003c00 	.word	0x40003c00

0800c31c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b088      	sub	sp, #32
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	603b      	str	r3, [r7, #0]
 800c328:	4613      	mov	r3, r2
 800c32a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c330:	095b      	lsrs	r3, r3, #5
 800c332:	b29b      	uxth	r3, r3
 800c334:	3301      	adds	r3, #1
 800c336:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	3330      	adds	r3, #48	; 0x30
 800c33e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c340:	f7f6 fa6c 	bl	800281c <HAL_GetTick>
 800c344:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d001      	beq.n	800c356 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c352:	2302      	movs	r3, #2
 800c354:	e250      	b.n	800c7f8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <HAL_SPI_Receive+0x46>
 800c35c:	88fb      	ldrh	r3, [r7, #6]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d101      	bne.n	800c366 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c362:	2301      	movs	r3, #1
 800c364:	e248      	b.n	800c7f8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d101      	bne.n	800c374 <HAL_SPI_Receive+0x58>
 800c370:	2302      	movs	r3, #2
 800c372:	e241      	b.n	800c7f8 <HAL_SPI_Receive+0x4dc>
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2201      	movs	r2, #1
 800c378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2204      	movs	r2, #4
 800c380:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2200      	movs	r2, #0
 800c388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	88fa      	ldrh	r2, [r7, #6]
 800c396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	88fa      	ldrh	r2, [r7, #6]
 800c39e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c3cc:	d108      	bne.n	800c3e0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c3dc:	601a      	str	r2, [r3, #0]
 800c3de:	e009      	b.n	800c3f4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	68db      	ldr	r3, [r3, #12]
 800c3e6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c3f2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	685a      	ldr	r2, [r3, #4]
 800c3fa:	4b95      	ldr	r3, [pc, #596]	; (800c650 <HAL_SPI_Receive+0x334>)
 800c3fc:	4013      	ands	r3, r2
 800c3fe:	88f9      	ldrh	r1, [r7, #6]
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	6812      	ldr	r2, [r2, #0]
 800c404:	430b      	orrs	r3, r1
 800c406:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f042 0201 	orr.w	r2, r2, #1
 800c416:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c420:	d107      	bne.n	800c432 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c430:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	2b0f      	cmp	r3, #15
 800c438:	d96c      	bls.n	800c514 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c43a:	e064      	b.n	800c506 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	695b      	ldr	r3, [r3, #20]
 800c442:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	695b      	ldr	r3, [r3, #20]
 800c44a:	f003 0301 	and.w	r3, r3, #1
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d114      	bne.n	800c47c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c45a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c45c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c462:	1d1a      	adds	r2, r3, #4
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c46e:	b29b      	uxth	r3, r3
 800c470:	3b01      	subs	r3, #1
 800c472:	b29a      	uxth	r2, r3
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c47a:	e044      	b.n	800c506 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c482:	b29b      	uxth	r3, r3
 800c484:	8bfa      	ldrh	r2, [r7, #30]
 800c486:	429a      	cmp	r2, r3
 800c488:	d919      	bls.n	800c4be <HAL_SPI_Receive+0x1a2>
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c490:	2b00      	cmp	r3, #0
 800c492:	d014      	beq.n	800c4be <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c49c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c49e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4a4:	1d1a      	adds	r2, r3, #4
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	b29a      	uxth	r2, r3
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c4bc:	e023      	b.n	800c506 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4be:	f7f6 f9ad 	bl	800281c <HAL_GetTick>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	1ad3      	subs	r3, r2, r3
 800c4c8:	683a      	ldr	r2, [r7, #0]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d803      	bhi.n	800c4d6 <HAL_SPI_Receive+0x1ba>
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4d4:	d102      	bne.n	800c4dc <HAL_SPI_Receive+0x1c0>
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d114      	bne.n	800c506 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f000 f98f 	bl	800c800 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c502:	2303      	movs	r3, #3
 800c504:	e178      	b.n	800c7f8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d194      	bne.n	800c43c <HAL_SPI_Receive+0x120>
 800c512:	e15e      	b.n	800c7d2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	2b07      	cmp	r3, #7
 800c51a:	f240 8153 	bls.w	800c7c4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c51e:	e08f      	b.n	800c640 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	695b      	ldr	r3, [r3, #20]
 800c52e:	f003 0301 	and.w	r3, r3, #1
 800c532:	2b01      	cmp	r3, #1
 800c534:	d114      	bne.n	800c560 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c53a:	69ba      	ldr	r2, [r7, #24]
 800c53c:	8812      	ldrh	r2, [r2, #0]
 800c53e:	b292      	uxth	r2, r2
 800c540:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c546:	1c9a      	adds	r2, r3, #2
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c552:	b29b      	uxth	r3, r3
 800c554:	3b01      	subs	r3, #1
 800c556:	b29a      	uxth	r2, r3
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c55e:	e06f      	b.n	800c640 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c566:	b29b      	uxth	r3, r3
 800c568:	8bfa      	ldrh	r2, [r7, #30]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d924      	bls.n	800c5b8 <HAL_SPI_Receive+0x29c>
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c574:	2b00      	cmp	r3, #0
 800c576:	d01f      	beq.n	800c5b8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c57c:	69ba      	ldr	r2, [r7, #24]
 800c57e:	8812      	ldrh	r2, [r2, #0]
 800c580:	b292      	uxth	r2, r2
 800c582:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c588:	1c9a      	adds	r2, r3, #2
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c592:	69ba      	ldr	r2, [r7, #24]
 800c594:	8812      	ldrh	r2, [r2, #0]
 800c596:	b292      	uxth	r2, r2
 800c598:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c59e:	1c9a      	adds	r2, r3, #2
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	3b02      	subs	r3, #2
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c5b6:	e043      	b.n	800c640 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d119      	bne.n	800c5f8 <HAL_SPI_Receive+0x2dc>
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d014      	beq.n	800c5f8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5d2:	69ba      	ldr	r2, [r7, #24]
 800c5d4:	8812      	ldrh	r2, [r2, #0]
 800c5d6:	b292      	uxth	r2, r2
 800c5d8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5de:	1c9a      	adds	r2, r3, #2
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	b29a      	uxth	r2, r3
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c5f6:	e023      	b.n	800c640 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5f8:	f7f6 f910 	bl	800281c <HAL_GetTick>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	429a      	cmp	r2, r3
 800c606:	d803      	bhi.n	800c610 <HAL_SPI_Receive+0x2f4>
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c60e:	d102      	bne.n	800c616 <HAL_SPI_Receive+0x2fa>
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d114      	bne.n	800c640 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f000 f8f2 	bl	800c800 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c622:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2200      	movs	r2, #0
 800c638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c63c:	2303      	movs	r3, #3
 800c63e:	e0db      	b.n	800c7f8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c646:	b29b      	uxth	r3, r3
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f47f af69 	bne.w	800c520 <HAL_SPI_Receive+0x204>
 800c64e:	e0c0      	b.n	800c7d2 <HAL_SPI_Receive+0x4b6>
 800c650:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	695b      	ldr	r3, [r3, #20]
 800c65a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	f003 0301 	and.w	r3, r3, #1
 800c666:	2b01      	cmp	r3, #1
 800c668:	d117      	bne.n	800c69a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c676:	7812      	ldrb	r2, [r2, #0]
 800c678:	b2d2      	uxtb	r2, r2
 800c67a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c680:	1c5a      	adds	r2, r3, #1
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	3b01      	subs	r3, #1
 800c690:	b29a      	uxth	r2, r3
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c698:	e094      	b.n	800c7c4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	8bfa      	ldrh	r2, [r7, #30]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d946      	bls.n	800c736 <HAL_SPI_Receive+0x41a>
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d041      	beq.n	800c736 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6be:	7812      	ldrb	r2, [r2, #0]
 800c6c0:	b2d2      	uxtb	r2, r2
 800c6c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6c8:	1c5a      	adds	r2, r3, #1
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6da:	7812      	ldrb	r2, [r2, #0]
 800c6dc:	b2d2      	uxtb	r2, r2
 800c6de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6e4:	1c5a      	adds	r2, r3, #1
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6f6:	7812      	ldrb	r2, [r2, #0]
 800c6f8:	b2d2      	uxtb	r2, r2
 800c6fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c700:	1c5a      	adds	r2, r3, #1
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c712:	7812      	ldrb	r2, [r2, #0]
 800c714:	b2d2      	uxtb	r2, r2
 800c716:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c71c:	1c5a      	adds	r2, r3, #1
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c728:	b29b      	uxth	r3, r3
 800c72a:	3b04      	subs	r3, #4
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c734:	e046      	b.n	800c7c4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	2b03      	cmp	r3, #3
 800c740:	d81c      	bhi.n	800c77c <HAL_SPI_Receive+0x460>
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d017      	beq.n	800c77c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c758:	7812      	ldrb	r2, [r2, #0]
 800c75a:	b2d2      	uxtb	r2, r2
 800c75c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c762:	1c5a      	adds	r2, r3, #1
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c76e:	b29b      	uxth	r3, r3
 800c770:	3b01      	subs	r3, #1
 800c772:	b29a      	uxth	r2, r3
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c77a:	e023      	b.n	800c7c4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c77c:	f7f6 f84e 	bl	800281c <HAL_GetTick>
 800c780:	4602      	mov	r2, r0
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	1ad3      	subs	r3, r2, r3
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d803      	bhi.n	800c794 <HAL_SPI_Receive+0x478>
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c792:	d102      	bne.n	800c79a <HAL_SPI_Receive+0x47e>
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d114      	bne.n	800c7c4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f000 f830 	bl	800c800 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c7c0:	2303      	movs	r3, #3
 800c7c2:	e019      	b.n	800c7f8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f47f af41 	bne.w	800c654 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c7d2:	68f8      	ldr	r0, [r7, #12]
 800c7d4:	f000 f814 	bl	800c800 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d001      	beq.n	800c7f6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e000      	b.n	800c7f8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c7f6:	2300      	movs	r3, #0
  }
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3720      	adds	r7, #32
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	695b      	ldr	r3, [r3, #20]
 800c80e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	699a      	ldr	r2, [r3, #24]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f042 0208 	orr.w	r2, r2, #8
 800c81e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	699a      	ldr	r2, [r3, #24]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f042 0210 	orr.w	r2, r2, #16
 800c82e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f022 0201 	bic.w	r2, r2, #1
 800c83e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	6919      	ldr	r1, [r3, #16]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	4b3c      	ldr	r3, [pc, #240]	; (800c93c <SPI_CloseTransfer+0x13c>)
 800c84c:	400b      	ands	r3, r1
 800c84e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	689a      	ldr	r2, [r3, #8]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c85e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c866:	b2db      	uxtb	r3, r3
 800c868:	2b04      	cmp	r3, #4
 800c86a:	d014      	beq.n	800c896 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f003 0320 	and.w	r3, r3, #32
 800c872:	2b00      	cmp	r3, #0
 800c874:	d00f      	beq.n	800c896 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c87c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	699a      	ldr	r2, [r3, #24]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f042 0220 	orr.w	r2, r2, #32
 800c894:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	d014      	beq.n	800c8cc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00f      	beq.n	800c8cc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8b2:	f043 0204 	orr.w	r2, r3, #4
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	699a      	ldr	r2, [r3, #24]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8ca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00f      	beq.n	800c8f6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8dc:	f043 0201 	orr.w	r2, r3, #1
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	699a      	ldr	r2, [r3, #24]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8f4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00f      	beq.n	800c920 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c906:	f043 0208 	orr.w	r2, r3, #8
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	699a      	ldr	r2, [r3, #24]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c91e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c930:	bf00      	nop
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	fffffc90 	.word	0xfffffc90

0800c940 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c940:	b480      	push	{r7}
 800c942:	b085      	sub	sp, #20
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c94c:	095b      	lsrs	r3, r3, #5
 800c94e:	3301      	adds	r3, #1
 800c950:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	3301      	adds	r3, #1
 800c958:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	3307      	adds	r3, #7
 800c95e:	08db      	lsrs	r3, r3, #3
 800c960:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	fb02 f303 	mul.w	r3, r2, r3
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3714      	adds	r7, #20
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b082      	sub	sp, #8
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d101      	bne.n	800c988 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c984:	2301      	movs	r3, #1
 800c986:	e049      	b.n	800ca1c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	2b00      	cmp	r3, #0
 800c992:	d106      	bne.n	800c9a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7f5 fc4f 	bl	8002240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2202      	movs	r2, #2
 800c9a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	3304      	adds	r3, #4
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	4610      	mov	r0, r2
 800c9b6:	f000 ffad 	bl	800d914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2201      	movs	r2, #1
 800ca06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2201      	movs	r2, #1
 800ca16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca1a:	2300      	movs	r3, #0
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d001      	beq.n	800ca3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	e04c      	b.n	800cad6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2202      	movs	r2, #2
 800ca40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a26      	ldr	r2, [pc, #152]	; (800cae4 <HAL_TIM_Base_Start+0xc0>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d022      	beq.n	800ca94 <HAL_TIM_Base_Start+0x70>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca56:	d01d      	beq.n	800ca94 <HAL_TIM_Base_Start+0x70>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a22      	ldr	r2, [pc, #136]	; (800cae8 <HAL_TIM_Base_Start+0xc4>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d018      	beq.n	800ca94 <HAL_TIM_Base_Start+0x70>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a21      	ldr	r2, [pc, #132]	; (800caec <HAL_TIM_Base_Start+0xc8>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d013      	beq.n	800ca94 <HAL_TIM_Base_Start+0x70>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a1f      	ldr	r2, [pc, #124]	; (800caf0 <HAL_TIM_Base_Start+0xcc>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d00e      	beq.n	800ca94 <HAL_TIM_Base_Start+0x70>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a1e      	ldr	r2, [pc, #120]	; (800caf4 <HAL_TIM_Base_Start+0xd0>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d009      	beq.n	800ca94 <HAL_TIM_Base_Start+0x70>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a1c      	ldr	r2, [pc, #112]	; (800caf8 <HAL_TIM_Base_Start+0xd4>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d004      	beq.n	800ca94 <HAL_TIM_Base_Start+0x70>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a1b      	ldr	r2, [pc, #108]	; (800cafc <HAL_TIM_Base_Start+0xd8>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d115      	bne.n	800cac0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	689a      	ldr	r2, [r3, #8]
 800ca9a:	4b19      	ldr	r3, [pc, #100]	; (800cb00 <HAL_TIM_Base_Start+0xdc>)
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2b06      	cmp	r3, #6
 800caa4:	d015      	beq.n	800cad2 <HAL_TIM_Base_Start+0xae>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800caac:	d011      	beq.n	800cad2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f042 0201 	orr.w	r2, r2, #1
 800cabc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cabe:	e008      	b.n	800cad2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f042 0201 	orr.w	r2, r2, #1
 800cace:	601a      	str	r2, [r3, #0]
 800cad0:	e000      	b.n	800cad4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cad2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3714      	adds	r7, #20
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	40010000 	.word	0x40010000
 800cae8:	40000400 	.word	0x40000400
 800caec:	40000800 	.word	0x40000800
 800caf0:	40000c00 	.word	0x40000c00
 800caf4:	40010400 	.word	0x40010400
 800caf8:	40001800 	.word	0x40001800
 800cafc:	40014000 	.word	0x40014000
 800cb00:	00010007 	.word	0x00010007

0800cb04 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	6a1a      	ldr	r2, [r3, #32]
 800cb12:	f241 1311 	movw	r3, #4369	; 0x1111
 800cb16:	4013      	ands	r3, r2
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10f      	bne.n	800cb3c <HAL_TIM_Base_Stop+0x38>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6a1a      	ldr	r2, [r3, #32]
 800cb22:	f240 4344 	movw	r3, #1092	; 0x444
 800cb26:	4013      	ands	r3, r2
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d107      	bne.n	800cb3c <HAL_TIM_Base_Stop+0x38>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f022 0201 	bic.w	r2, r2, #1
 800cb3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2201      	movs	r2, #1
 800cb40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cb44:	2300      	movs	r3, #0
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	370c      	adds	r7, #12
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr
	...

0800cb54 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d109      	bne.n	800cb7c <HAL_TIM_OC_Start_IT+0x28>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	bf14      	ite	ne
 800cb74:	2301      	movne	r3, #1
 800cb76:	2300      	moveq	r3, #0
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	e03c      	b.n	800cbf6 <HAL_TIM_OC_Start_IT+0xa2>
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	2b04      	cmp	r3, #4
 800cb80:	d109      	bne.n	800cb96 <HAL_TIM_OC_Start_IT+0x42>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	bf14      	ite	ne
 800cb8e:	2301      	movne	r3, #1
 800cb90:	2300      	moveq	r3, #0
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	e02f      	b.n	800cbf6 <HAL_TIM_OC_Start_IT+0xa2>
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	2b08      	cmp	r3, #8
 800cb9a:	d109      	bne.n	800cbb0 <HAL_TIM_OC_Start_IT+0x5c>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	bf14      	ite	ne
 800cba8:	2301      	movne	r3, #1
 800cbaa:	2300      	moveq	r3, #0
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	e022      	b.n	800cbf6 <HAL_TIM_OC_Start_IT+0xa2>
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	2b0c      	cmp	r3, #12
 800cbb4:	d109      	bne.n	800cbca <HAL_TIM_OC_Start_IT+0x76>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	bf14      	ite	ne
 800cbc2:	2301      	movne	r3, #1
 800cbc4:	2300      	moveq	r3, #0
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	e015      	b.n	800cbf6 <HAL_TIM_OC_Start_IT+0xa2>
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	2b10      	cmp	r3, #16
 800cbce:	d109      	bne.n	800cbe4 <HAL_TIM_OC_Start_IT+0x90>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	bf14      	ite	ne
 800cbdc:	2301      	movne	r3, #1
 800cbde:	2300      	moveq	r3, #0
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	e008      	b.n	800cbf6 <HAL_TIM_OC_Start_IT+0xa2>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	bf14      	ite	ne
 800cbf0:	2301      	movne	r3, #1
 800cbf2:	2300      	moveq	r3, #0
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d001      	beq.n	800cbfe <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e0ec      	b.n	800cdd8 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d104      	bne.n	800cc0e <HAL_TIM_OC_Start_IT+0xba>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2202      	movs	r2, #2
 800cc08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cc0c:	e023      	b.n	800cc56 <HAL_TIM_OC_Start_IT+0x102>
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	2b04      	cmp	r3, #4
 800cc12:	d104      	bne.n	800cc1e <HAL_TIM_OC_Start_IT+0xca>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2202      	movs	r2, #2
 800cc18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cc1c:	e01b      	b.n	800cc56 <HAL_TIM_OC_Start_IT+0x102>
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	2b08      	cmp	r3, #8
 800cc22:	d104      	bne.n	800cc2e <HAL_TIM_OC_Start_IT+0xda>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2202      	movs	r2, #2
 800cc28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc2c:	e013      	b.n	800cc56 <HAL_TIM_OC_Start_IT+0x102>
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	2b0c      	cmp	r3, #12
 800cc32:	d104      	bne.n	800cc3e <HAL_TIM_OC_Start_IT+0xea>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2202      	movs	r2, #2
 800cc38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cc3c:	e00b      	b.n	800cc56 <HAL_TIM_OC_Start_IT+0x102>
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	2b10      	cmp	r3, #16
 800cc42:	d104      	bne.n	800cc4e <HAL_TIM_OC_Start_IT+0xfa>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2202      	movs	r2, #2
 800cc48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cc4c:	e003      	b.n	800cc56 <HAL_TIM_OC_Start_IT+0x102>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2202      	movs	r2, #2
 800cc52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	2b0c      	cmp	r3, #12
 800cc5a:	d841      	bhi.n	800cce0 <HAL_TIM_OC_Start_IT+0x18c>
 800cc5c:	a201      	add	r2, pc, #4	; (adr r2, 800cc64 <HAL_TIM_OC_Start_IT+0x110>)
 800cc5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc62:	bf00      	nop
 800cc64:	0800cc99 	.word	0x0800cc99
 800cc68:	0800cce1 	.word	0x0800cce1
 800cc6c:	0800cce1 	.word	0x0800cce1
 800cc70:	0800cce1 	.word	0x0800cce1
 800cc74:	0800ccab 	.word	0x0800ccab
 800cc78:	0800cce1 	.word	0x0800cce1
 800cc7c:	0800cce1 	.word	0x0800cce1
 800cc80:	0800cce1 	.word	0x0800cce1
 800cc84:	0800ccbd 	.word	0x0800ccbd
 800cc88:	0800cce1 	.word	0x0800cce1
 800cc8c:	0800cce1 	.word	0x0800cce1
 800cc90:	0800cce1 	.word	0x0800cce1
 800cc94:	0800cccf 	.word	0x0800cccf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68da      	ldr	r2, [r3, #12]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f042 0202 	orr.w	r2, r2, #2
 800cca6:	60da      	str	r2, [r3, #12]
      break;
 800cca8:	e01d      	b.n	800cce6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	68da      	ldr	r2, [r3, #12]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f042 0204 	orr.w	r2, r2, #4
 800ccb8:	60da      	str	r2, [r3, #12]
      break;
 800ccba:	e014      	b.n	800cce6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68da      	ldr	r2, [r3, #12]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f042 0208 	orr.w	r2, r2, #8
 800ccca:	60da      	str	r2, [r3, #12]
      break;
 800cccc:	e00b      	b.n	800cce6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68da      	ldr	r2, [r3, #12]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f042 0210 	orr.w	r2, r2, #16
 800ccdc:	60da      	str	r2, [r3, #12]
      break;
 800ccde:	e002      	b.n	800cce6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cce0:	2301      	movs	r3, #1
 800cce2:	73fb      	strb	r3, [r7, #15]
      break;
 800cce4:	bf00      	nop
  }

  if (status == HAL_OK)
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d174      	bne.n	800cdd6 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	6839      	ldr	r1, [r7, #0]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f001 fa27 	bl	800e148 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4a38      	ldr	r2, [pc, #224]	; (800cde0 <HAL_TIM_OC_Start_IT+0x28c>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d013      	beq.n	800cd2c <HAL_TIM_OC_Start_IT+0x1d8>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a36      	ldr	r2, [pc, #216]	; (800cde4 <HAL_TIM_OC_Start_IT+0x290>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d00e      	beq.n	800cd2c <HAL_TIM_OC_Start_IT+0x1d8>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4a35      	ldr	r2, [pc, #212]	; (800cde8 <HAL_TIM_OC_Start_IT+0x294>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d009      	beq.n	800cd2c <HAL_TIM_OC_Start_IT+0x1d8>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a33      	ldr	r2, [pc, #204]	; (800cdec <HAL_TIM_OC_Start_IT+0x298>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d004      	beq.n	800cd2c <HAL_TIM_OC_Start_IT+0x1d8>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a32      	ldr	r2, [pc, #200]	; (800cdf0 <HAL_TIM_OC_Start_IT+0x29c>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d101      	bne.n	800cd30 <HAL_TIM_OC_Start_IT+0x1dc>
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	e000      	b.n	800cd32 <HAL_TIM_OC_Start_IT+0x1de>
 800cd30:	2300      	movs	r3, #0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d007      	beq.n	800cd46 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cd44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a25      	ldr	r2, [pc, #148]	; (800cde0 <HAL_TIM_OC_Start_IT+0x28c>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d022      	beq.n	800cd96 <HAL_TIM_OC_Start_IT+0x242>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd58:	d01d      	beq.n	800cd96 <HAL_TIM_OC_Start_IT+0x242>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a25      	ldr	r2, [pc, #148]	; (800cdf4 <HAL_TIM_OC_Start_IT+0x2a0>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d018      	beq.n	800cd96 <HAL_TIM_OC_Start_IT+0x242>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a23      	ldr	r2, [pc, #140]	; (800cdf8 <HAL_TIM_OC_Start_IT+0x2a4>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d013      	beq.n	800cd96 <HAL_TIM_OC_Start_IT+0x242>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a22      	ldr	r2, [pc, #136]	; (800cdfc <HAL_TIM_OC_Start_IT+0x2a8>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d00e      	beq.n	800cd96 <HAL_TIM_OC_Start_IT+0x242>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a19      	ldr	r2, [pc, #100]	; (800cde4 <HAL_TIM_OC_Start_IT+0x290>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d009      	beq.n	800cd96 <HAL_TIM_OC_Start_IT+0x242>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a1e      	ldr	r2, [pc, #120]	; (800ce00 <HAL_TIM_OC_Start_IT+0x2ac>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d004      	beq.n	800cd96 <HAL_TIM_OC_Start_IT+0x242>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a15      	ldr	r2, [pc, #84]	; (800cde8 <HAL_TIM_OC_Start_IT+0x294>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d115      	bne.n	800cdc2 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	689a      	ldr	r2, [r3, #8]
 800cd9c:	4b19      	ldr	r3, [pc, #100]	; (800ce04 <HAL_TIM_OC_Start_IT+0x2b0>)
 800cd9e:	4013      	ands	r3, r2
 800cda0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	2b06      	cmp	r3, #6
 800cda6:	d015      	beq.n	800cdd4 <HAL_TIM_OC_Start_IT+0x280>
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdae:	d011      	beq.n	800cdd4 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f042 0201 	orr.w	r2, r2, #1
 800cdbe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdc0:	e008      	b.n	800cdd4 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f042 0201 	orr.w	r2, r2, #1
 800cdd0:	601a      	str	r2, [r3, #0]
 800cdd2:	e000      	b.n	800cdd6 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdd4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cdd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	40010000 	.word	0x40010000
 800cde4:	40010400 	.word	0x40010400
 800cde8:	40014000 	.word	0x40014000
 800cdec:	40014400 	.word	0x40014400
 800cdf0:	40014800 	.word	0x40014800
 800cdf4:	40000400 	.word	0x40000400
 800cdf8:	40000800 	.word	0x40000800
 800cdfc:	40000c00 	.word	0x40000c00
 800ce00:	40001800 	.word	0x40001800
 800ce04:	00010007 	.word	0x00010007

0800ce08 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ce12:	2300      	movs	r3, #0
 800ce14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	2b0c      	cmp	r3, #12
 800ce1a:	d841      	bhi.n	800cea0 <HAL_TIM_OC_Stop_IT+0x98>
 800ce1c:	a201      	add	r2, pc, #4	; (adr r2, 800ce24 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ce1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce22:	bf00      	nop
 800ce24:	0800ce59 	.word	0x0800ce59
 800ce28:	0800cea1 	.word	0x0800cea1
 800ce2c:	0800cea1 	.word	0x0800cea1
 800ce30:	0800cea1 	.word	0x0800cea1
 800ce34:	0800ce6b 	.word	0x0800ce6b
 800ce38:	0800cea1 	.word	0x0800cea1
 800ce3c:	0800cea1 	.word	0x0800cea1
 800ce40:	0800cea1 	.word	0x0800cea1
 800ce44:	0800ce7d 	.word	0x0800ce7d
 800ce48:	0800cea1 	.word	0x0800cea1
 800ce4c:	0800cea1 	.word	0x0800cea1
 800ce50:	0800cea1 	.word	0x0800cea1
 800ce54:	0800ce8f 	.word	0x0800ce8f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	68da      	ldr	r2, [r3, #12]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f022 0202 	bic.w	r2, r2, #2
 800ce66:	60da      	str	r2, [r3, #12]
      break;
 800ce68:	e01d      	b.n	800cea6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	68da      	ldr	r2, [r3, #12]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f022 0204 	bic.w	r2, r2, #4
 800ce78:	60da      	str	r2, [r3, #12]
      break;
 800ce7a:	e014      	b.n	800cea6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	68da      	ldr	r2, [r3, #12]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f022 0208 	bic.w	r2, r2, #8
 800ce8a:	60da      	str	r2, [r3, #12]
      break;
 800ce8c:	e00b      	b.n	800cea6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	68da      	ldr	r2, [r3, #12]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f022 0210 	bic.w	r2, r2, #16
 800ce9c:	60da      	str	r2, [r3, #12]
      break;
 800ce9e:	e002      	b.n	800cea6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800cea0:	2301      	movs	r3, #1
 800cea2:	73fb      	strb	r3, [r7, #15]
      break;
 800cea4:	bf00      	nop
  }

  if (status == HAL_OK)
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f040 8081 	bne.w	800cfb0 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	6839      	ldr	r1, [r7, #0]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f001 f946 	bl	800e148 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a3e      	ldr	r2, [pc, #248]	; (800cfbc <HAL_TIM_OC_Stop_IT+0x1b4>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d013      	beq.n	800ceee <HAL_TIM_OC_Stop_IT+0xe6>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a3d      	ldr	r2, [pc, #244]	; (800cfc0 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d00e      	beq.n	800ceee <HAL_TIM_OC_Stop_IT+0xe6>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a3b      	ldr	r2, [pc, #236]	; (800cfc4 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d009      	beq.n	800ceee <HAL_TIM_OC_Stop_IT+0xe6>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a3a      	ldr	r2, [pc, #232]	; (800cfc8 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d004      	beq.n	800ceee <HAL_TIM_OC_Stop_IT+0xe6>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a38      	ldr	r2, [pc, #224]	; (800cfcc <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d101      	bne.n	800cef2 <HAL_TIM_OC_Stop_IT+0xea>
 800ceee:	2301      	movs	r3, #1
 800cef0:	e000      	b.n	800cef4 <HAL_TIM_OC_Stop_IT+0xec>
 800cef2:	2300      	movs	r3, #0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d017      	beq.n	800cf28 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	6a1a      	ldr	r2, [r3, #32]
 800cefe:	f241 1311 	movw	r3, #4369	; 0x1111
 800cf02:	4013      	ands	r3, r2
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d10f      	bne.n	800cf28 <HAL_TIM_OC_Stop_IT+0x120>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	6a1a      	ldr	r2, [r3, #32]
 800cf0e:	f240 4344 	movw	r3, #1092	; 0x444
 800cf12:	4013      	ands	r3, r2
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d107      	bne.n	800cf28 <HAL_TIM_OC_Stop_IT+0x120>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf26:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	6a1a      	ldr	r2, [r3, #32]
 800cf2e:	f241 1311 	movw	r3, #4369	; 0x1111
 800cf32:	4013      	ands	r3, r2
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d10f      	bne.n	800cf58 <HAL_TIM_OC_Stop_IT+0x150>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	6a1a      	ldr	r2, [r3, #32]
 800cf3e:	f240 4344 	movw	r3, #1092	; 0x444
 800cf42:	4013      	ands	r3, r2
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d107      	bne.n	800cf58 <HAL_TIM_OC_Stop_IT+0x150>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f022 0201 	bic.w	r2, r2, #1
 800cf56:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d104      	bne.n	800cf68 <HAL_TIM_OC_Stop_IT+0x160>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2201      	movs	r2, #1
 800cf62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf66:	e023      	b.n	800cfb0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	2b04      	cmp	r3, #4
 800cf6c:	d104      	bne.n	800cf78 <HAL_TIM_OC_Stop_IT+0x170>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf76:	e01b      	b.n	800cfb0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	2b08      	cmp	r3, #8
 800cf7c:	d104      	bne.n	800cf88 <HAL_TIM_OC_Stop_IT+0x180>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2201      	movs	r2, #1
 800cf82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf86:	e013      	b.n	800cfb0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	2b0c      	cmp	r3, #12
 800cf8c:	d104      	bne.n	800cf98 <HAL_TIM_OC_Stop_IT+0x190>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2201      	movs	r2, #1
 800cf92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf96:	e00b      	b.n	800cfb0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	2b10      	cmp	r3, #16
 800cf9c:	d104      	bne.n	800cfa8 <HAL_TIM_OC_Stop_IT+0x1a0>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cfa6:	e003      	b.n	800cfb0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	40010000 	.word	0x40010000
 800cfc0:	40010400 	.word	0x40010400
 800cfc4:	40014000 	.word	0x40014000
 800cfc8:	40014400 	.word	0x40014400
 800cfcc:	40014800 	.word	0x40014800

0800cfd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d101      	bne.n	800cfe2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e049      	b.n	800d076 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d106      	bne.n	800cffc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2200      	movs	r2, #0
 800cff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f7f5 f8e2 	bl	80021c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2202      	movs	r2, #2
 800d000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	3304      	adds	r3, #4
 800d00c:	4619      	mov	r1, r3
 800d00e:	4610      	mov	r0, r2
 800d010:	f000 fc80 	bl	800d914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2201      	movs	r2, #1
 800d020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2201      	movs	r2, #1
 800d040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2201      	movs	r2, #1
 800d050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2201      	movs	r2, #1
 800d058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2201      	movs	r2, #1
 800d060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2201      	movs	r2, #1
 800d070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3708      	adds	r7, #8
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
	...

0800d080 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d109      	bne.n	800d0a4 <HAL_TIM_PWM_Start+0x24>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d096:	b2db      	uxtb	r3, r3
 800d098:	2b01      	cmp	r3, #1
 800d09a:	bf14      	ite	ne
 800d09c:	2301      	movne	r3, #1
 800d09e:	2300      	moveq	r3, #0
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	e03c      	b.n	800d11e <HAL_TIM_PWM_Start+0x9e>
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	2b04      	cmp	r3, #4
 800d0a8:	d109      	bne.n	800d0be <HAL_TIM_PWM_Start+0x3e>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	bf14      	ite	ne
 800d0b6:	2301      	movne	r3, #1
 800d0b8:	2300      	moveq	r3, #0
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	e02f      	b.n	800d11e <HAL_TIM_PWM_Start+0x9e>
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	2b08      	cmp	r3, #8
 800d0c2:	d109      	bne.n	800d0d8 <HAL_TIM_PWM_Start+0x58>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	bf14      	ite	ne
 800d0d0:	2301      	movne	r3, #1
 800d0d2:	2300      	moveq	r3, #0
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	e022      	b.n	800d11e <HAL_TIM_PWM_Start+0x9e>
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	2b0c      	cmp	r3, #12
 800d0dc:	d109      	bne.n	800d0f2 <HAL_TIM_PWM_Start+0x72>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	bf14      	ite	ne
 800d0ea:	2301      	movne	r3, #1
 800d0ec:	2300      	moveq	r3, #0
 800d0ee:	b2db      	uxtb	r3, r3
 800d0f0:	e015      	b.n	800d11e <HAL_TIM_PWM_Start+0x9e>
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	2b10      	cmp	r3, #16
 800d0f6:	d109      	bne.n	800d10c <HAL_TIM_PWM_Start+0x8c>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	2b01      	cmp	r3, #1
 800d102:	bf14      	ite	ne
 800d104:	2301      	movne	r3, #1
 800d106:	2300      	moveq	r3, #0
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	e008      	b.n	800d11e <HAL_TIM_PWM_Start+0x9e>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d112:	b2db      	uxtb	r3, r3
 800d114:	2b01      	cmp	r3, #1
 800d116:	bf14      	ite	ne
 800d118:	2301      	movne	r3, #1
 800d11a:	2300      	moveq	r3, #0
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d001      	beq.n	800d126 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d122:	2301      	movs	r3, #1
 800d124:	e0a1      	b.n	800d26a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d104      	bne.n	800d136 <HAL_TIM_PWM_Start+0xb6>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2202      	movs	r2, #2
 800d130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d134:	e023      	b.n	800d17e <HAL_TIM_PWM_Start+0xfe>
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	2b04      	cmp	r3, #4
 800d13a:	d104      	bne.n	800d146 <HAL_TIM_PWM_Start+0xc6>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2202      	movs	r2, #2
 800d140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d144:	e01b      	b.n	800d17e <HAL_TIM_PWM_Start+0xfe>
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	2b08      	cmp	r3, #8
 800d14a:	d104      	bne.n	800d156 <HAL_TIM_PWM_Start+0xd6>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2202      	movs	r2, #2
 800d150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d154:	e013      	b.n	800d17e <HAL_TIM_PWM_Start+0xfe>
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	2b0c      	cmp	r3, #12
 800d15a:	d104      	bne.n	800d166 <HAL_TIM_PWM_Start+0xe6>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2202      	movs	r2, #2
 800d160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d164:	e00b      	b.n	800d17e <HAL_TIM_PWM_Start+0xfe>
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	2b10      	cmp	r3, #16
 800d16a:	d104      	bne.n	800d176 <HAL_TIM_PWM_Start+0xf6>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2202      	movs	r2, #2
 800d170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d174:	e003      	b.n	800d17e <HAL_TIM_PWM_Start+0xfe>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2202      	movs	r2, #2
 800d17a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2201      	movs	r2, #1
 800d184:	6839      	ldr	r1, [r7, #0]
 800d186:	4618      	mov	r0, r3
 800d188:	f000 ffde 	bl	800e148 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a38      	ldr	r2, [pc, #224]	; (800d274 <HAL_TIM_PWM_Start+0x1f4>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d013      	beq.n	800d1be <HAL_TIM_PWM_Start+0x13e>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a37      	ldr	r2, [pc, #220]	; (800d278 <HAL_TIM_PWM_Start+0x1f8>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d00e      	beq.n	800d1be <HAL_TIM_PWM_Start+0x13e>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a35      	ldr	r2, [pc, #212]	; (800d27c <HAL_TIM_PWM_Start+0x1fc>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d009      	beq.n	800d1be <HAL_TIM_PWM_Start+0x13e>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4a34      	ldr	r2, [pc, #208]	; (800d280 <HAL_TIM_PWM_Start+0x200>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d004      	beq.n	800d1be <HAL_TIM_PWM_Start+0x13e>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a32      	ldr	r2, [pc, #200]	; (800d284 <HAL_TIM_PWM_Start+0x204>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d101      	bne.n	800d1c2 <HAL_TIM_PWM_Start+0x142>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	e000      	b.n	800d1c4 <HAL_TIM_PWM_Start+0x144>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d007      	beq.n	800d1d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4a25      	ldr	r2, [pc, #148]	; (800d274 <HAL_TIM_PWM_Start+0x1f4>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d022      	beq.n	800d228 <HAL_TIM_PWM_Start+0x1a8>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1ea:	d01d      	beq.n	800d228 <HAL_TIM_PWM_Start+0x1a8>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a25      	ldr	r2, [pc, #148]	; (800d288 <HAL_TIM_PWM_Start+0x208>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d018      	beq.n	800d228 <HAL_TIM_PWM_Start+0x1a8>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4a24      	ldr	r2, [pc, #144]	; (800d28c <HAL_TIM_PWM_Start+0x20c>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d013      	beq.n	800d228 <HAL_TIM_PWM_Start+0x1a8>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a22      	ldr	r2, [pc, #136]	; (800d290 <HAL_TIM_PWM_Start+0x210>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d00e      	beq.n	800d228 <HAL_TIM_PWM_Start+0x1a8>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4a1a      	ldr	r2, [pc, #104]	; (800d278 <HAL_TIM_PWM_Start+0x1f8>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d009      	beq.n	800d228 <HAL_TIM_PWM_Start+0x1a8>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a1e      	ldr	r2, [pc, #120]	; (800d294 <HAL_TIM_PWM_Start+0x214>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d004      	beq.n	800d228 <HAL_TIM_PWM_Start+0x1a8>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a16      	ldr	r2, [pc, #88]	; (800d27c <HAL_TIM_PWM_Start+0x1fc>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d115      	bne.n	800d254 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	689a      	ldr	r2, [r3, #8]
 800d22e:	4b1a      	ldr	r3, [pc, #104]	; (800d298 <HAL_TIM_PWM_Start+0x218>)
 800d230:	4013      	ands	r3, r2
 800d232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2b06      	cmp	r3, #6
 800d238:	d015      	beq.n	800d266 <HAL_TIM_PWM_Start+0x1e6>
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d240:	d011      	beq.n	800d266 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f042 0201 	orr.w	r2, r2, #1
 800d250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d252:	e008      	b.n	800d266 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f042 0201 	orr.w	r2, r2, #1
 800d262:	601a      	str	r2, [r3, #0]
 800d264:	e000      	b.n	800d268 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d266:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d268:	2300      	movs	r3, #0
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3710      	adds	r7, #16
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	40010000 	.word	0x40010000
 800d278:	40010400 	.word	0x40010400
 800d27c:	40014000 	.word	0x40014000
 800d280:	40014400 	.word	0x40014400
 800d284:	40014800 	.word	0x40014800
 800d288:	40000400 	.word	0x40000400
 800d28c:	40000800 	.word	0x40000800
 800d290:	40000c00 	.word	0x40000c00
 800d294:	40001800 	.word	0x40001800
 800d298:	00010007 	.word	0x00010007

0800d29c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	691b      	ldr	r3, [r3, #16]
 800d2b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	f003 0302 	and.w	r3, r3, #2
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d020      	beq.n	800d300 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f003 0302 	and.w	r3, r3, #2
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d01b      	beq.n	800d300 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f06f 0202 	mvn.w	r2, #2
 800d2d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	699b      	ldr	r3, [r3, #24]
 800d2de:	f003 0303 	and.w	r3, r3, #3
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d003      	beq.n	800d2ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 faf6 	bl	800d8d8 <HAL_TIM_IC_CaptureCallback>
 800d2ec:	e005      	b.n	800d2fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f7f3 fc6a 	bl	8000bc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 faf9 	bl	800d8ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	f003 0304 	and.w	r3, r3, #4
 800d306:	2b00      	cmp	r3, #0
 800d308:	d020      	beq.n	800d34c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f003 0304 	and.w	r3, r3, #4
 800d310:	2b00      	cmp	r3, #0
 800d312:	d01b      	beq.n	800d34c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f06f 0204 	mvn.w	r2, #4
 800d31c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2202      	movs	r2, #2
 800d322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	699b      	ldr	r3, [r3, #24]
 800d32a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d003      	beq.n	800d33a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 fad0 	bl	800d8d8 <HAL_TIM_IC_CaptureCallback>
 800d338:	e005      	b.n	800d346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f7f3 fc44 	bl	8000bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 fad3 	bl	800d8ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	f003 0308 	and.w	r3, r3, #8
 800d352:	2b00      	cmp	r3, #0
 800d354:	d020      	beq.n	800d398 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f003 0308 	and.w	r3, r3, #8
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d01b      	beq.n	800d398 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f06f 0208 	mvn.w	r2, #8
 800d368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2204      	movs	r2, #4
 800d36e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	69db      	ldr	r3, [r3, #28]
 800d376:	f003 0303 	and.w	r3, r3, #3
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d003      	beq.n	800d386 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 faaa 	bl	800d8d8 <HAL_TIM_IC_CaptureCallback>
 800d384:	e005      	b.n	800d392 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f7f3 fc1e 	bl	8000bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 faad 	bl	800d8ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	f003 0310 	and.w	r3, r3, #16
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d020      	beq.n	800d3e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f003 0310 	and.w	r3, r3, #16
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d01b      	beq.n	800d3e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f06f 0210 	mvn.w	r2, #16
 800d3b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2208      	movs	r2, #8
 800d3ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	69db      	ldr	r3, [r3, #28]
 800d3c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d003      	beq.n	800d3d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 fa84 	bl	800d8d8 <HAL_TIM_IC_CaptureCallback>
 800d3d0:	e005      	b.n	800d3de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f7f3 fbf8 	bl	8000bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 fa87 	bl	800d8ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	f003 0301 	and.w	r3, r3, #1
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d00c      	beq.n	800d408 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f003 0301 	and.w	r3, r3, #1
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d007      	beq.n	800d408 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f06f 0201 	mvn.w	r2, #1
 800d400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 fa5e 	bl	800d8c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d104      	bne.n	800d41c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00c      	beq.n	800d436 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d422:	2b00      	cmp	r3, #0
 800d424:	d007      	beq.n	800d436 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d42e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 ffc5 	bl	800e3c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00c      	beq.n	800d45a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d446:	2b00      	cmp	r3, #0
 800d448:	d007      	beq.n	800d45a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 ffbd 	bl	800e3d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00c      	beq.n	800d47e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d007      	beq.n	800d47e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 fa41 	bl	800d900 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	f003 0320 	and.w	r3, r3, #32
 800d484:	2b00      	cmp	r3, #0
 800d486:	d00c      	beq.n	800d4a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f003 0320 	and.w	r3, r3, #32
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d007      	beq.n	800d4a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f06f 0220 	mvn.w	r2, #32
 800d49a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 ff85 	bl	800e3ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d4a2:	bf00      	nop
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
	...

0800d4ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d101      	bne.n	800d4ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d4c6:	2302      	movs	r3, #2
 800d4c8:	e0ff      	b.n	800d6ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2b14      	cmp	r3, #20
 800d4d6:	f200 80f0 	bhi.w	800d6ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d4da:	a201      	add	r2, pc, #4	; (adr r2, 800d4e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e0:	0800d535 	.word	0x0800d535
 800d4e4:	0800d6bb 	.word	0x0800d6bb
 800d4e8:	0800d6bb 	.word	0x0800d6bb
 800d4ec:	0800d6bb 	.word	0x0800d6bb
 800d4f0:	0800d575 	.word	0x0800d575
 800d4f4:	0800d6bb 	.word	0x0800d6bb
 800d4f8:	0800d6bb 	.word	0x0800d6bb
 800d4fc:	0800d6bb 	.word	0x0800d6bb
 800d500:	0800d5b7 	.word	0x0800d5b7
 800d504:	0800d6bb 	.word	0x0800d6bb
 800d508:	0800d6bb 	.word	0x0800d6bb
 800d50c:	0800d6bb 	.word	0x0800d6bb
 800d510:	0800d5f7 	.word	0x0800d5f7
 800d514:	0800d6bb 	.word	0x0800d6bb
 800d518:	0800d6bb 	.word	0x0800d6bb
 800d51c:	0800d6bb 	.word	0x0800d6bb
 800d520:	0800d639 	.word	0x0800d639
 800d524:	0800d6bb 	.word	0x0800d6bb
 800d528:	0800d6bb 	.word	0x0800d6bb
 800d52c:	0800d6bb 	.word	0x0800d6bb
 800d530:	0800d679 	.word	0x0800d679
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	68b9      	ldr	r1, [r7, #8]
 800d53a:	4618      	mov	r0, r3
 800d53c:	f000 fa90 	bl	800da60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	699a      	ldr	r2, [r3, #24]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f042 0208 	orr.w	r2, r2, #8
 800d54e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	699a      	ldr	r2, [r3, #24]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f022 0204 	bic.w	r2, r2, #4
 800d55e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	6999      	ldr	r1, [r3, #24]
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	691a      	ldr	r2, [r3, #16]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	430a      	orrs	r2, r1
 800d570:	619a      	str	r2, [r3, #24]
      break;
 800d572:	e0a5      	b.n	800d6c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	68b9      	ldr	r1, [r7, #8]
 800d57a:	4618      	mov	r0, r3
 800d57c:	f000 fb00 	bl	800db80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	699a      	ldr	r2, [r3, #24]
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d58e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	699a      	ldr	r2, [r3, #24]
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d59e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	6999      	ldr	r1, [r3, #24]
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	691b      	ldr	r3, [r3, #16]
 800d5aa:	021a      	lsls	r2, r3, #8
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	430a      	orrs	r2, r1
 800d5b2:	619a      	str	r2, [r3, #24]
      break;
 800d5b4:	e084      	b.n	800d6c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	68b9      	ldr	r1, [r7, #8]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f000 fb69 	bl	800dc94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	69da      	ldr	r2, [r3, #28]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f042 0208 	orr.w	r2, r2, #8
 800d5d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	69da      	ldr	r2, [r3, #28]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f022 0204 	bic.w	r2, r2, #4
 800d5e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	69d9      	ldr	r1, [r3, #28]
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	691a      	ldr	r2, [r3, #16]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	430a      	orrs	r2, r1
 800d5f2:	61da      	str	r2, [r3, #28]
      break;
 800d5f4:	e064      	b.n	800d6c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	68b9      	ldr	r1, [r7, #8]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f000 fbd1 	bl	800dda4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	69da      	ldr	r2, [r3, #28]
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	69da      	ldr	r2, [r3, #28]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	69d9      	ldr	r1, [r3, #28]
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	021a      	lsls	r2, r3, #8
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	430a      	orrs	r2, r1
 800d634:	61da      	str	r2, [r3, #28]
      break;
 800d636:	e043      	b.n	800d6c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	68b9      	ldr	r1, [r7, #8]
 800d63e:	4618      	mov	r0, r3
 800d640:	f000 fc1a 	bl	800de78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f042 0208 	orr.w	r2, r2, #8
 800d652:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f022 0204 	bic.w	r2, r2, #4
 800d662:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	691a      	ldr	r2, [r3, #16]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	430a      	orrs	r2, r1
 800d674:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d676:	e023      	b.n	800d6c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	68b9      	ldr	r1, [r7, #8]
 800d67e:	4618      	mov	r0, r3
 800d680:	f000 fc5e 	bl	800df40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d692:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	691b      	ldr	r3, [r3, #16]
 800d6ae:	021a      	lsls	r2, r3, #8
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	430a      	orrs	r2, r1
 800d6b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d6b8:	e002      	b.n	800d6c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	75fb      	strb	r3, [r7, #23]
      break;
 800d6be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d6c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3718      	adds	r7, #24
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop

0800d6d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d101      	bne.n	800d6f0 <HAL_TIM_ConfigClockSource+0x1c>
 800d6ec:	2302      	movs	r3, #2
 800d6ee:	e0dc      	b.n	800d8aa <HAL_TIM_ConfigClockSource+0x1d6>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2202      	movs	r2, #2
 800d6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d708:	68ba      	ldr	r2, [r7, #8]
 800d70a:	4b6a      	ldr	r3, [pc, #424]	; (800d8b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d70c:	4013      	ands	r3, r2
 800d70e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4a64      	ldr	r2, [pc, #400]	; (800d8b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d726:	4293      	cmp	r3, r2
 800d728:	f000 80a9 	beq.w	800d87e <HAL_TIM_ConfigClockSource+0x1aa>
 800d72c:	4a62      	ldr	r2, [pc, #392]	; (800d8b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	f200 80ae 	bhi.w	800d890 <HAL_TIM_ConfigClockSource+0x1bc>
 800d734:	4a61      	ldr	r2, [pc, #388]	; (800d8bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800d736:	4293      	cmp	r3, r2
 800d738:	f000 80a1 	beq.w	800d87e <HAL_TIM_ConfigClockSource+0x1aa>
 800d73c:	4a5f      	ldr	r2, [pc, #380]	; (800d8bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	f200 80a6 	bhi.w	800d890 <HAL_TIM_ConfigClockSource+0x1bc>
 800d744:	4a5e      	ldr	r2, [pc, #376]	; (800d8c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d746:	4293      	cmp	r3, r2
 800d748:	f000 8099 	beq.w	800d87e <HAL_TIM_ConfigClockSource+0x1aa>
 800d74c:	4a5c      	ldr	r2, [pc, #368]	; (800d8c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	f200 809e 	bhi.w	800d890 <HAL_TIM_ConfigClockSource+0x1bc>
 800d754:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d758:	f000 8091 	beq.w	800d87e <HAL_TIM_ConfigClockSource+0x1aa>
 800d75c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d760:	f200 8096 	bhi.w	800d890 <HAL_TIM_ConfigClockSource+0x1bc>
 800d764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d768:	f000 8089 	beq.w	800d87e <HAL_TIM_ConfigClockSource+0x1aa>
 800d76c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d770:	f200 808e 	bhi.w	800d890 <HAL_TIM_ConfigClockSource+0x1bc>
 800d774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d778:	d03e      	beq.n	800d7f8 <HAL_TIM_ConfigClockSource+0x124>
 800d77a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d77e:	f200 8087 	bhi.w	800d890 <HAL_TIM_ConfigClockSource+0x1bc>
 800d782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d786:	f000 8086 	beq.w	800d896 <HAL_TIM_ConfigClockSource+0x1c2>
 800d78a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d78e:	d87f      	bhi.n	800d890 <HAL_TIM_ConfigClockSource+0x1bc>
 800d790:	2b70      	cmp	r3, #112	; 0x70
 800d792:	d01a      	beq.n	800d7ca <HAL_TIM_ConfigClockSource+0xf6>
 800d794:	2b70      	cmp	r3, #112	; 0x70
 800d796:	d87b      	bhi.n	800d890 <HAL_TIM_ConfigClockSource+0x1bc>
 800d798:	2b60      	cmp	r3, #96	; 0x60
 800d79a:	d050      	beq.n	800d83e <HAL_TIM_ConfigClockSource+0x16a>
 800d79c:	2b60      	cmp	r3, #96	; 0x60
 800d79e:	d877      	bhi.n	800d890 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7a0:	2b50      	cmp	r3, #80	; 0x50
 800d7a2:	d03c      	beq.n	800d81e <HAL_TIM_ConfigClockSource+0x14a>
 800d7a4:	2b50      	cmp	r3, #80	; 0x50
 800d7a6:	d873      	bhi.n	800d890 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7a8:	2b40      	cmp	r3, #64	; 0x40
 800d7aa:	d058      	beq.n	800d85e <HAL_TIM_ConfigClockSource+0x18a>
 800d7ac:	2b40      	cmp	r3, #64	; 0x40
 800d7ae:	d86f      	bhi.n	800d890 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7b0:	2b30      	cmp	r3, #48	; 0x30
 800d7b2:	d064      	beq.n	800d87e <HAL_TIM_ConfigClockSource+0x1aa>
 800d7b4:	2b30      	cmp	r3, #48	; 0x30
 800d7b6:	d86b      	bhi.n	800d890 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7b8:	2b20      	cmp	r3, #32
 800d7ba:	d060      	beq.n	800d87e <HAL_TIM_ConfigClockSource+0x1aa>
 800d7bc:	2b20      	cmp	r3, #32
 800d7be:	d867      	bhi.n	800d890 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d05c      	beq.n	800d87e <HAL_TIM_ConfigClockSource+0x1aa>
 800d7c4:	2b10      	cmp	r3, #16
 800d7c6:	d05a      	beq.n	800d87e <HAL_TIM_ConfigClockSource+0x1aa>
 800d7c8:	e062      	b.n	800d890 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d7da:	f000 fc95 	bl	800e108 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d7ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	68ba      	ldr	r2, [r7, #8]
 800d7f4:	609a      	str	r2, [r3, #8]
      break;
 800d7f6:	e04f      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d808:	f000 fc7e 	bl	800e108 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	689a      	ldr	r2, [r3, #8]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d81a:	609a      	str	r2, [r3, #8]
      break;
 800d81c:	e03c      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d82a:	461a      	mov	r2, r3
 800d82c:	f000 fbee 	bl	800e00c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	2150      	movs	r1, #80	; 0x50
 800d836:	4618      	mov	r0, r3
 800d838:	f000 fc48 	bl	800e0cc <TIM_ITRx_SetConfig>
      break;
 800d83c:	e02c      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d84a:	461a      	mov	r2, r3
 800d84c:	f000 fc0d 	bl	800e06a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2160      	movs	r1, #96	; 0x60
 800d856:	4618      	mov	r0, r3
 800d858:	f000 fc38 	bl	800e0cc <TIM_ITRx_SetConfig>
      break;
 800d85c:	e01c      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d86a:	461a      	mov	r2, r3
 800d86c:	f000 fbce 	bl	800e00c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2140      	movs	r1, #64	; 0x40
 800d876:	4618      	mov	r0, r3
 800d878:	f000 fc28 	bl	800e0cc <TIM_ITRx_SetConfig>
      break;
 800d87c:	e00c      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4619      	mov	r1, r3
 800d888:	4610      	mov	r0, r2
 800d88a:	f000 fc1f 	bl	800e0cc <TIM_ITRx_SetConfig>
      break;
 800d88e:	e003      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d890:	2301      	movs	r3, #1
 800d892:	73fb      	strb	r3, [r7, #15]
      break;
 800d894:	e000      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	ffceff88 	.word	0xffceff88
 800d8b8:	00100040 	.word	0x00100040
 800d8bc:	00100030 	.word	0x00100030
 800d8c0:	00100020 	.word	0x00100020

0800d8c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b083      	sub	sp, #12
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d8cc:	bf00      	nop
 800d8ce:	370c      	adds	r7, #12
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d8e0:	bf00      	nop
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d8f4:	bf00      	nop
 800d8f6:	370c      	adds	r7, #12
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr

0800d900 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d900:	b480      	push	{r7}
 800d902:	b083      	sub	sp, #12
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d908:	bf00      	nop
 800d90a:	370c      	adds	r7, #12
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	4a46      	ldr	r2, [pc, #280]	; (800da40 <TIM_Base_SetConfig+0x12c>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d013      	beq.n	800d954 <TIM_Base_SetConfig+0x40>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d932:	d00f      	beq.n	800d954 <TIM_Base_SetConfig+0x40>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	4a43      	ldr	r2, [pc, #268]	; (800da44 <TIM_Base_SetConfig+0x130>)
 800d938:	4293      	cmp	r3, r2
 800d93a:	d00b      	beq.n	800d954 <TIM_Base_SetConfig+0x40>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	4a42      	ldr	r2, [pc, #264]	; (800da48 <TIM_Base_SetConfig+0x134>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d007      	beq.n	800d954 <TIM_Base_SetConfig+0x40>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	4a41      	ldr	r2, [pc, #260]	; (800da4c <TIM_Base_SetConfig+0x138>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d003      	beq.n	800d954 <TIM_Base_SetConfig+0x40>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	4a40      	ldr	r2, [pc, #256]	; (800da50 <TIM_Base_SetConfig+0x13c>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d108      	bne.n	800d966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d95a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	68fa      	ldr	r2, [r7, #12]
 800d962:	4313      	orrs	r3, r2
 800d964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	4a35      	ldr	r2, [pc, #212]	; (800da40 <TIM_Base_SetConfig+0x12c>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d01f      	beq.n	800d9ae <TIM_Base_SetConfig+0x9a>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d974:	d01b      	beq.n	800d9ae <TIM_Base_SetConfig+0x9a>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	4a32      	ldr	r2, [pc, #200]	; (800da44 <TIM_Base_SetConfig+0x130>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d017      	beq.n	800d9ae <TIM_Base_SetConfig+0x9a>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4a31      	ldr	r2, [pc, #196]	; (800da48 <TIM_Base_SetConfig+0x134>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d013      	beq.n	800d9ae <TIM_Base_SetConfig+0x9a>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4a30      	ldr	r2, [pc, #192]	; (800da4c <TIM_Base_SetConfig+0x138>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d00f      	beq.n	800d9ae <TIM_Base_SetConfig+0x9a>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	4a2f      	ldr	r2, [pc, #188]	; (800da50 <TIM_Base_SetConfig+0x13c>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d00b      	beq.n	800d9ae <TIM_Base_SetConfig+0x9a>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4a2e      	ldr	r2, [pc, #184]	; (800da54 <TIM_Base_SetConfig+0x140>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d007      	beq.n	800d9ae <TIM_Base_SetConfig+0x9a>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4a2d      	ldr	r2, [pc, #180]	; (800da58 <TIM_Base_SetConfig+0x144>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d003      	beq.n	800d9ae <TIM_Base_SetConfig+0x9a>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4a2c      	ldr	r2, [pc, #176]	; (800da5c <TIM_Base_SetConfig+0x148>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d108      	bne.n	800d9c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	68fa      	ldr	r2, [r7, #12]
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	68fa      	ldr	r2, [r7, #12]
 800d9d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	689a      	ldr	r2, [r3, #8]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	4a16      	ldr	r2, [pc, #88]	; (800da40 <TIM_Base_SetConfig+0x12c>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d00f      	beq.n	800da0c <TIM_Base_SetConfig+0xf8>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	4a18      	ldr	r2, [pc, #96]	; (800da50 <TIM_Base_SetConfig+0x13c>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d00b      	beq.n	800da0c <TIM_Base_SetConfig+0xf8>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	4a17      	ldr	r2, [pc, #92]	; (800da54 <TIM_Base_SetConfig+0x140>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d007      	beq.n	800da0c <TIM_Base_SetConfig+0xf8>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	4a16      	ldr	r2, [pc, #88]	; (800da58 <TIM_Base_SetConfig+0x144>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d003      	beq.n	800da0c <TIM_Base_SetConfig+0xf8>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	4a15      	ldr	r2, [pc, #84]	; (800da5c <TIM_Base_SetConfig+0x148>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d103      	bne.n	800da14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	691a      	ldr	r2, [r3, #16]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2201      	movs	r2, #1
 800da18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	2b01      	cmp	r3, #1
 800da24:	d105      	bne.n	800da32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	691b      	ldr	r3, [r3, #16]
 800da2a:	f023 0201 	bic.w	r2, r3, #1
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	611a      	str	r2, [r3, #16]
  }
}
 800da32:	bf00      	nop
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	40010000 	.word	0x40010000
 800da44:	40000400 	.word	0x40000400
 800da48:	40000800 	.word	0x40000800
 800da4c:	40000c00 	.word	0x40000c00
 800da50:	40010400 	.word	0x40010400
 800da54:	40014000 	.word	0x40014000
 800da58:	40014400 	.word	0x40014400
 800da5c:	40014800 	.word	0x40014800

0800da60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da60:	b480      	push	{r7}
 800da62:	b087      	sub	sp, #28
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a1b      	ldr	r3, [r3, #32]
 800da6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6a1b      	ldr	r3, [r3, #32]
 800da74:	f023 0201 	bic.w	r2, r3, #1
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	699b      	ldr	r3, [r3, #24]
 800da86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	4b37      	ldr	r3, [pc, #220]	; (800db68 <TIM_OC1_SetConfig+0x108>)
 800da8c:	4013      	ands	r3, r2
 800da8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f023 0303 	bic.w	r3, r3, #3
 800da96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	68fa      	ldr	r2, [r7, #12]
 800da9e:	4313      	orrs	r3, r2
 800daa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	f023 0302 	bic.w	r3, r3, #2
 800daa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	689b      	ldr	r3, [r3, #8]
 800daae:	697a      	ldr	r2, [r7, #20]
 800dab0:	4313      	orrs	r3, r2
 800dab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	4a2d      	ldr	r2, [pc, #180]	; (800db6c <TIM_OC1_SetConfig+0x10c>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d00f      	beq.n	800dadc <TIM_OC1_SetConfig+0x7c>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	4a2c      	ldr	r2, [pc, #176]	; (800db70 <TIM_OC1_SetConfig+0x110>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d00b      	beq.n	800dadc <TIM_OC1_SetConfig+0x7c>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	4a2b      	ldr	r2, [pc, #172]	; (800db74 <TIM_OC1_SetConfig+0x114>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d007      	beq.n	800dadc <TIM_OC1_SetConfig+0x7c>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	4a2a      	ldr	r2, [pc, #168]	; (800db78 <TIM_OC1_SetConfig+0x118>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d003      	beq.n	800dadc <TIM_OC1_SetConfig+0x7c>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a29      	ldr	r2, [pc, #164]	; (800db7c <TIM_OC1_SetConfig+0x11c>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d10c      	bne.n	800daf6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	f023 0308 	bic.w	r3, r3, #8
 800dae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	697a      	ldr	r2, [r7, #20]
 800daea:	4313      	orrs	r3, r2
 800daec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	f023 0304 	bic.w	r3, r3, #4
 800daf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4a1c      	ldr	r2, [pc, #112]	; (800db6c <TIM_OC1_SetConfig+0x10c>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d00f      	beq.n	800db1e <TIM_OC1_SetConfig+0xbe>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a1b      	ldr	r2, [pc, #108]	; (800db70 <TIM_OC1_SetConfig+0x110>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d00b      	beq.n	800db1e <TIM_OC1_SetConfig+0xbe>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4a1a      	ldr	r2, [pc, #104]	; (800db74 <TIM_OC1_SetConfig+0x114>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d007      	beq.n	800db1e <TIM_OC1_SetConfig+0xbe>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4a19      	ldr	r2, [pc, #100]	; (800db78 <TIM_OC1_SetConfig+0x118>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d003      	beq.n	800db1e <TIM_OC1_SetConfig+0xbe>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4a18      	ldr	r2, [pc, #96]	; (800db7c <TIM_OC1_SetConfig+0x11c>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d111      	bne.n	800db42 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800db2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	695b      	ldr	r3, [r3, #20]
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	4313      	orrs	r3, r2
 800db36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	699b      	ldr	r3, [r3, #24]
 800db3c:	693a      	ldr	r2, [r7, #16]
 800db3e:	4313      	orrs	r3, r2
 800db40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	693a      	ldr	r2, [r7, #16]
 800db46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	685a      	ldr	r2, [r3, #4]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	697a      	ldr	r2, [r7, #20]
 800db5a:	621a      	str	r2, [r3, #32]
}
 800db5c:	bf00      	nop
 800db5e:	371c      	adds	r7, #28
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr
 800db68:	fffeff8f 	.word	0xfffeff8f
 800db6c:	40010000 	.word	0x40010000
 800db70:	40010400 	.word	0x40010400
 800db74:	40014000 	.word	0x40014000
 800db78:	40014400 	.word	0x40014400
 800db7c:	40014800 	.word	0x40014800

0800db80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db80:	b480      	push	{r7}
 800db82:	b087      	sub	sp, #28
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6a1b      	ldr	r3, [r3, #32]
 800db8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6a1b      	ldr	r3, [r3, #32]
 800db94:	f023 0210 	bic.w	r2, r3, #16
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	699b      	ldr	r3, [r3, #24]
 800dba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dba8:	68fa      	ldr	r2, [r7, #12]
 800dbaa:	4b34      	ldr	r3, [pc, #208]	; (800dc7c <TIM_OC2_SetConfig+0xfc>)
 800dbac:	4013      	ands	r3, r2
 800dbae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	021b      	lsls	r3, r3, #8
 800dbbe:	68fa      	ldr	r2, [r7, #12]
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	f023 0320 	bic.w	r3, r3, #32
 800dbca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	689b      	ldr	r3, [r3, #8]
 800dbd0:	011b      	lsls	r3, r3, #4
 800dbd2:	697a      	ldr	r2, [r7, #20]
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4a29      	ldr	r2, [pc, #164]	; (800dc80 <TIM_OC2_SetConfig+0x100>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d003      	beq.n	800dbe8 <TIM_OC2_SetConfig+0x68>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	4a28      	ldr	r2, [pc, #160]	; (800dc84 <TIM_OC2_SetConfig+0x104>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d10d      	bne.n	800dc04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	68db      	ldr	r3, [r3, #12]
 800dbf4:	011b      	lsls	r3, r3, #4
 800dbf6:	697a      	ldr	r2, [r7, #20]
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	4a1e      	ldr	r2, [pc, #120]	; (800dc80 <TIM_OC2_SetConfig+0x100>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d00f      	beq.n	800dc2c <TIM_OC2_SetConfig+0xac>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	4a1d      	ldr	r2, [pc, #116]	; (800dc84 <TIM_OC2_SetConfig+0x104>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d00b      	beq.n	800dc2c <TIM_OC2_SetConfig+0xac>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	4a1c      	ldr	r2, [pc, #112]	; (800dc88 <TIM_OC2_SetConfig+0x108>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d007      	beq.n	800dc2c <TIM_OC2_SetConfig+0xac>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	4a1b      	ldr	r2, [pc, #108]	; (800dc8c <TIM_OC2_SetConfig+0x10c>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d003      	beq.n	800dc2c <TIM_OC2_SetConfig+0xac>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	4a1a      	ldr	r2, [pc, #104]	; (800dc90 <TIM_OC2_SetConfig+0x110>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d113      	bne.n	800dc54 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dc32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dc3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	695b      	ldr	r3, [r3, #20]
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	693a      	ldr	r2, [r7, #16]
 800dc44:	4313      	orrs	r3, r2
 800dc46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	699b      	ldr	r3, [r3, #24]
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	693a      	ldr	r2, [r7, #16]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	693a      	ldr	r2, [r7, #16]
 800dc58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	685a      	ldr	r2, [r3, #4]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	697a      	ldr	r2, [r7, #20]
 800dc6c:	621a      	str	r2, [r3, #32]
}
 800dc6e:	bf00      	nop
 800dc70:	371c      	adds	r7, #28
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	feff8fff 	.word	0xfeff8fff
 800dc80:	40010000 	.word	0x40010000
 800dc84:	40010400 	.word	0x40010400
 800dc88:	40014000 	.word	0x40014000
 800dc8c:	40014400 	.word	0x40014400
 800dc90:	40014800 	.word	0x40014800

0800dc94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b087      	sub	sp, #28
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a1b      	ldr	r3, [r3, #32]
 800dca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6a1b      	ldr	r3, [r3, #32]
 800dca8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	69db      	ldr	r3, [r3, #28]
 800dcba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	4b33      	ldr	r3, [pc, #204]	; (800dd8c <TIM_OC3_SetConfig+0xf8>)
 800dcc0:	4013      	ands	r3, r2
 800dcc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f023 0303 	bic.w	r3, r3, #3
 800dcca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	68fa      	ldr	r2, [r7, #12]
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dcdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	021b      	lsls	r3, r3, #8
 800dce4:	697a      	ldr	r2, [r7, #20]
 800dce6:	4313      	orrs	r3, r2
 800dce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	4a28      	ldr	r2, [pc, #160]	; (800dd90 <TIM_OC3_SetConfig+0xfc>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d003      	beq.n	800dcfa <TIM_OC3_SetConfig+0x66>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4a27      	ldr	r2, [pc, #156]	; (800dd94 <TIM_OC3_SetConfig+0x100>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d10d      	bne.n	800dd16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	68db      	ldr	r3, [r3, #12]
 800dd06:	021b      	lsls	r3, r3, #8
 800dd08:	697a      	ldr	r2, [r7, #20]
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dd14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	4a1d      	ldr	r2, [pc, #116]	; (800dd90 <TIM_OC3_SetConfig+0xfc>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d00f      	beq.n	800dd3e <TIM_OC3_SetConfig+0xaa>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	4a1c      	ldr	r2, [pc, #112]	; (800dd94 <TIM_OC3_SetConfig+0x100>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d00b      	beq.n	800dd3e <TIM_OC3_SetConfig+0xaa>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	4a1b      	ldr	r2, [pc, #108]	; (800dd98 <TIM_OC3_SetConfig+0x104>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d007      	beq.n	800dd3e <TIM_OC3_SetConfig+0xaa>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	4a1a      	ldr	r2, [pc, #104]	; (800dd9c <TIM_OC3_SetConfig+0x108>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d003      	beq.n	800dd3e <TIM_OC3_SetConfig+0xaa>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	4a19      	ldr	r2, [pc, #100]	; (800dda0 <TIM_OC3_SetConfig+0x10c>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d113      	bne.n	800dd66 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dd4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	695b      	ldr	r3, [r3, #20]
 800dd52:	011b      	lsls	r3, r3, #4
 800dd54:	693a      	ldr	r2, [r7, #16]
 800dd56:	4313      	orrs	r3, r2
 800dd58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	699b      	ldr	r3, [r3, #24]
 800dd5e:	011b      	lsls	r3, r3, #4
 800dd60:	693a      	ldr	r2, [r7, #16]
 800dd62:	4313      	orrs	r3, r2
 800dd64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	693a      	ldr	r2, [r7, #16]
 800dd6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	68fa      	ldr	r2, [r7, #12]
 800dd70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	685a      	ldr	r2, [r3, #4]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	697a      	ldr	r2, [r7, #20]
 800dd7e:	621a      	str	r2, [r3, #32]
}
 800dd80:	bf00      	nop
 800dd82:	371c      	adds	r7, #28
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	fffeff8f 	.word	0xfffeff8f
 800dd90:	40010000 	.word	0x40010000
 800dd94:	40010400 	.word	0x40010400
 800dd98:	40014000 	.word	0x40014000
 800dd9c:	40014400 	.word	0x40014400
 800dda0:	40014800 	.word	0x40014800

0800dda4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b087      	sub	sp, #28
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6a1b      	ldr	r3, [r3, #32]
 800ddb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6a1b      	ldr	r3, [r3, #32]
 800ddb8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	69db      	ldr	r3, [r3, #28]
 800ddca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	4b24      	ldr	r3, [pc, #144]	; (800de60 <TIM_OC4_SetConfig+0xbc>)
 800ddd0:	4013      	ands	r3, r2
 800ddd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ddda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	021b      	lsls	r3, r3, #8
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	4313      	orrs	r3, r2
 800dde6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ddee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	031b      	lsls	r3, r3, #12
 800ddf6:	693a      	ldr	r2, [r7, #16]
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4a19      	ldr	r2, [pc, #100]	; (800de64 <TIM_OC4_SetConfig+0xc0>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d00f      	beq.n	800de24 <TIM_OC4_SetConfig+0x80>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a18      	ldr	r2, [pc, #96]	; (800de68 <TIM_OC4_SetConfig+0xc4>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d00b      	beq.n	800de24 <TIM_OC4_SetConfig+0x80>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4a17      	ldr	r2, [pc, #92]	; (800de6c <TIM_OC4_SetConfig+0xc8>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d007      	beq.n	800de24 <TIM_OC4_SetConfig+0x80>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4a16      	ldr	r2, [pc, #88]	; (800de70 <TIM_OC4_SetConfig+0xcc>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d003      	beq.n	800de24 <TIM_OC4_SetConfig+0x80>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4a15      	ldr	r2, [pc, #84]	; (800de74 <TIM_OC4_SetConfig+0xd0>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d109      	bne.n	800de38 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800de2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	695b      	ldr	r3, [r3, #20]
 800de30:	019b      	lsls	r3, r3, #6
 800de32:	697a      	ldr	r2, [r7, #20]
 800de34:	4313      	orrs	r3, r2
 800de36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	697a      	ldr	r2, [r7, #20]
 800de3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	68fa      	ldr	r2, [r7, #12]
 800de42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	685a      	ldr	r2, [r3, #4]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	693a      	ldr	r2, [r7, #16]
 800de50:	621a      	str	r2, [r3, #32]
}
 800de52:	bf00      	nop
 800de54:	371c      	adds	r7, #28
 800de56:	46bd      	mov	sp, r7
 800de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5c:	4770      	bx	lr
 800de5e:	bf00      	nop
 800de60:	feff8fff 	.word	0xfeff8fff
 800de64:	40010000 	.word	0x40010000
 800de68:	40010400 	.word	0x40010400
 800de6c:	40014000 	.word	0x40014000
 800de70:	40014400 	.word	0x40014400
 800de74:	40014800 	.word	0x40014800

0800de78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800de78:	b480      	push	{r7}
 800de7a:	b087      	sub	sp, #28
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6a1b      	ldr	r3, [r3, #32]
 800de86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6a1b      	ldr	r3, [r3, #32]
 800de8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	4b21      	ldr	r3, [pc, #132]	; (800df28 <TIM_OC5_SetConfig+0xb0>)
 800dea4:	4013      	ands	r3, r2
 800dea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	68fa      	ldr	r2, [r7, #12]
 800deae:	4313      	orrs	r3, r2
 800deb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800deb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	041b      	lsls	r3, r3, #16
 800dec0:	693a      	ldr	r2, [r7, #16]
 800dec2:	4313      	orrs	r3, r2
 800dec4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	4a18      	ldr	r2, [pc, #96]	; (800df2c <TIM_OC5_SetConfig+0xb4>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d00f      	beq.n	800deee <TIM_OC5_SetConfig+0x76>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	4a17      	ldr	r2, [pc, #92]	; (800df30 <TIM_OC5_SetConfig+0xb8>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d00b      	beq.n	800deee <TIM_OC5_SetConfig+0x76>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	4a16      	ldr	r2, [pc, #88]	; (800df34 <TIM_OC5_SetConfig+0xbc>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d007      	beq.n	800deee <TIM_OC5_SetConfig+0x76>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	4a15      	ldr	r2, [pc, #84]	; (800df38 <TIM_OC5_SetConfig+0xc0>)
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d003      	beq.n	800deee <TIM_OC5_SetConfig+0x76>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	4a14      	ldr	r2, [pc, #80]	; (800df3c <TIM_OC5_SetConfig+0xc4>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d109      	bne.n	800df02 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800def4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	695b      	ldr	r3, [r3, #20]
 800defa:	021b      	lsls	r3, r3, #8
 800defc:	697a      	ldr	r2, [r7, #20]
 800defe:	4313      	orrs	r3, r2
 800df00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	697a      	ldr	r2, [r7, #20]
 800df06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	685a      	ldr	r2, [r3, #4]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	693a      	ldr	r2, [r7, #16]
 800df1a:	621a      	str	r2, [r3, #32]
}
 800df1c:	bf00      	nop
 800df1e:	371c      	adds	r7, #28
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr
 800df28:	fffeff8f 	.word	0xfffeff8f
 800df2c:	40010000 	.word	0x40010000
 800df30:	40010400 	.word	0x40010400
 800df34:	40014000 	.word	0x40014000
 800df38:	40014400 	.word	0x40014400
 800df3c:	40014800 	.word	0x40014800

0800df40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800df40:	b480      	push	{r7}
 800df42:	b087      	sub	sp, #28
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6a1b      	ldr	r3, [r3, #32]
 800df4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6a1b      	ldr	r3, [r3, #32]
 800df54:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800df68:	68fa      	ldr	r2, [r7, #12]
 800df6a:	4b22      	ldr	r3, [pc, #136]	; (800dff4 <TIM_OC6_SetConfig+0xb4>)
 800df6c:	4013      	ands	r3, r2
 800df6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	021b      	lsls	r3, r3, #8
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	4313      	orrs	r3, r2
 800df7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800df82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	689b      	ldr	r3, [r3, #8]
 800df88:	051b      	lsls	r3, r3, #20
 800df8a:	693a      	ldr	r2, [r7, #16]
 800df8c:	4313      	orrs	r3, r2
 800df8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	4a19      	ldr	r2, [pc, #100]	; (800dff8 <TIM_OC6_SetConfig+0xb8>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d00f      	beq.n	800dfb8 <TIM_OC6_SetConfig+0x78>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	4a18      	ldr	r2, [pc, #96]	; (800dffc <TIM_OC6_SetConfig+0xbc>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d00b      	beq.n	800dfb8 <TIM_OC6_SetConfig+0x78>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	4a17      	ldr	r2, [pc, #92]	; (800e000 <TIM_OC6_SetConfig+0xc0>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d007      	beq.n	800dfb8 <TIM_OC6_SetConfig+0x78>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	4a16      	ldr	r2, [pc, #88]	; (800e004 <TIM_OC6_SetConfig+0xc4>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d003      	beq.n	800dfb8 <TIM_OC6_SetConfig+0x78>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	4a15      	ldr	r2, [pc, #84]	; (800e008 <TIM_OC6_SetConfig+0xc8>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d109      	bne.n	800dfcc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dfbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	695b      	ldr	r3, [r3, #20]
 800dfc4:	029b      	lsls	r3, r3, #10
 800dfc6:	697a      	ldr	r2, [r7, #20]
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	697a      	ldr	r2, [r7, #20]
 800dfd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	68fa      	ldr	r2, [r7, #12]
 800dfd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	685a      	ldr	r2, [r3, #4]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	693a      	ldr	r2, [r7, #16]
 800dfe4:	621a      	str	r2, [r3, #32]
}
 800dfe6:	bf00      	nop
 800dfe8:	371c      	adds	r7, #28
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	feff8fff 	.word	0xfeff8fff
 800dff8:	40010000 	.word	0x40010000
 800dffc:	40010400 	.word	0x40010400
 800e000:	40014000 	.word	0x40014000
 800e004:	40014400 	.word	0x40014400
 800e008:	40014800 	.word	0x40014800

0800e00c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b087      	sub	sp, #28
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6a1b      	ldr	r3, [r3, #32]
 800e01c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	6a1b      	ldr	r3, [r3, #32]
 800e022:	f023 0201 	bic.w	r2, r3, #1
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	699b      	ldr	r3, [r3, #24]
 800e02e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	011b      	lsls	r3, r3, #4
 800e03c:	693a      	ldr	r2, [r7, #16]
 800e03e:	4313      	orrs	r3, r2
 800e040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	f023 030a 	bic.w	r3, r3, #10
 800e048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e04a:	697a      	ldr	r2, [r7, #20]
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	4313      	orrs	r3, r2
 800e050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	693a      	ldr	r2, [r7, #16]
 800e056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	697a      	ldr	r2, [r7, #20]
 800e05c:	621a      	str	r2, [r3, #32]
}
 800e05e:	bf00      	nop
 800e060:	371c      	adds	r7, #28
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr

0800e06a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e06a:	b480      	push	{r7}
 800e06c:	b087      	sub	sp, #28
 800e06e:	af00      	add	r7, sp, #0
 800e070:	60f8      	str	r0, [r7, #12]
 800e072:	60b9      	str	r1, [r7, #8]
 800e074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	6a1b      	ldr	r3, [r3, #32]
 800e07a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6a1b      	ldr	r3, [r3, #32]
 800e080:	f023 0210 	bic.w	r2, r3, #16
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	699b      	ldr	r3, [r3, #24]
 800e08c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	031b      	lsls	r3, r3, #12
 800e09a:	693a      	ldr	r2, [r7, #16]
 800e09c:	4313      	orrs	r3, r2
 800e09e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e0a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	011b      	lsls	r3, r3, #4
 800e0ac:	697a      	ldr	r2, [r7, #20]
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	693a      	ldr	r2, [r7, #16]
 800e0b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	697a      	ldr	r2, [r7, #20]
 800e0bc:	621a      	str	r2, [r3, #32]
}
 800e0be:	bf00      	nop
 800e0c0:	371c      	adds	r7, #28
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr
	...

0800e0cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b085      	sub	sp, #20
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	689b      	ldr	r3, [r3, #8]
 800e0da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	4b09      	ldr	r3, [pc, #36]	; (800e104 <TIM_ITRx_SetConfig+0x38>)
 800e0e0:	4013      	ands	r3, r2
 800e0e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e0e4:	683a      	ldr	r2, [r7, #0]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	4313      	orrs	r3, r2
 800e0ea:	f043 0307 	orr.w	r3, r3, #7
 800e0ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	68fa      	ldr	r2, [r7, #12]
 800e0f4:	609a      	str	r2, [r3, #8]
}
 800e0f6:	bf00      	nop
 800e0f8:	3714      	adds	r7, #20
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e100:	4770      	bx	lr
 800e102:	bf00      	nop
 800e104:	ffcfff8f 	.word	0xffcfff8f

0800e108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e108:	b480      	push	{r7}
 800e10a:	b087      	sub	sp, #28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
 800e114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	689b      	ldr	r3, [r3, #8]
 800e11a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	021a      	lsls	r2, r3, #8
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	431a      	orrs	r2, r3
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	4313      	orrs	r3, r2
 800e130:	697a      	ldr	r2, [r7, #20]
 800e132:	4313      	orrs	r3, r2
 800e134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	697a      	ldr	r2, [r7, #20]
 800e13a:	609a      	str	r2, [r3, #8]
}
 800e13c:	bf00      	nop
 800e13e:	371c      	adds	r7, #28
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e148:	b480      	push	{r7}
 800e14a:	b087      	sub	sp, #28
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	f003 031f 	and.w	r3, r3, #31
 800e15a:	2201      	movs	r2, #1
 800e15c:	fa02 f303 	lsl.w	r3, r2, r3
 800e160:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	6a1a      	ldr	r2, [r3, #32]
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	43db      	mvns	r3, r3
 800e16a:	401a      	ands	r2, r3
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	6a1a      	ldr	r2, [r3, #32]
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	f003 031f 	and.w	r3, r3, #31
 800e17a:	6879      	ldr	r1, [r7, #4]
 800e17c:	fa01 f303 	lsl.w	r3, r1, r3
 800e180:	431a      	orrs	r2, r3
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	621a      	str	r2, [r3, #32]
}
 800e186:	bf00      	nop
 800e188:	371c      	adds	r7, #28
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr
	...

0800e194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e194:	b480      	push	{r7}
 800e196:	b085      	sub	sp, #20
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d101      	bne.n	800e1ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e1a8:	2302      	movs	r3, #2
 800e1aa:	e06d      	b.n	800e288 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2202      	movs	r2, #2
 800e1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4a30      	ldr	r2, [pc, #192]	; (800e294 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d004      	beq.n	800e1e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4a2f      	ldr	r2, [pc, #188]	; (800e298 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d108      	bne.n	800e1f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e1e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	4313      	orrs	r3, r2
 800e1f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	68fa      	ldr	r2, [r7, #12]
 800e200:	4313      	orrs	r3, r2
 800e202:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	68fa      	ldr	r2, [r7, #12]
 800e20a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a20      	ldr	r2, [pc, #128]	; (800e294 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d022      	beq.n	800e25c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e21e:	d01d      	beq.n	800e25c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a1d      	ldr	r2, [pc, #116]	; (800e29c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d018      	beq.n	800e25c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	4a1c      	ldr	r2, [pc, #112]	; (800e2a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d013      	beq.n	800e25c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4a1a      	ldr	r2, [pc, #104]	; (800e2a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d00e      	beq.n	800e25c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4a15      	ldr	r2, [pc, #84]	; (800e298 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d009      	beq.n	800e25c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4a16      	ldr	r2, [pc, #88]	; (800e2a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d004      	beq.n	800e25c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a15      	ldr	r2, [pc, #84]	; (800e2ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d10c      	bne.n	800e276 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e262:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	68ba      	ldr	r2, [r7, #8]
 800e26a:	4313      	orrs	r3, r2
 800e26c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2201      	movs	r2, #1
 800e27a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2200      	movs	r2, #0
 800e282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e286:	2300      	movs	r3, #0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3714      	adds	r7, #20
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr
 800e294:	40010000 	.word	0x40010000
 800e298:	40010400 	.word	0x40010400
 800e29c:	40000400 	.word	0x40000400
 800e2a0:	40000800 	.word	0x40000800
 800e2a4:	40000c00 	.word	0x40000c00
 800e2a8:	40001800 	.word	0x40001800
 800e2ac:	40014000 	.word	0x40014000

0800e2b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b085      	sub	sp, #20
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d101      	bne.n	800e2cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e2c8:	2302      	movs	r3, #2
 800e2ca:	e065      	b.n	800e398 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4313      	orrs	r3, r2
 800e30a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	691b      	ldr	r3, [r3, #16]
 800e316:	4313      	orrs	r3, r2
 800e318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	695b      	ldr	r3, [r3, #20]
 800e324:	4313      	orrs	r3, r2
 800e326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e332:	4313      	orrs	r3, r2
 800e334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	699b      	ldr	r3, [r3, #24]
 800e340:	041b      	lsls	r3, r3, #16
 800e342:	4313      	orrs	r3, r2
 800e344:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a16      	ldr	r2, [pc, #88]	; (800e3a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d004      	beq.n	800e35a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a14      	ldr	r2, [pc, #80]	; (800e3a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d115      	bne.n	800e386 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e364:	051b      	lsls	r3, r3, #20
 800e366:	4313      	orrs	r3, r2
 800e368:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	69db      	ldr	r3, [r3, #28]
 800e374:	4313      	orrs	r3, r2
 800e376:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	6a1b      	ldr	r3, [r3, #32]
 800e382:	4313      	orrs	r3, r2
 800e384:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68fa      	ldr	r2, [r7, #12]
 800e38c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2200      	movs	r2, #0
 800e392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e396:	2300      	movs	r3, #0
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3714      	adds	r7, #20
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr
 800e3a4:	40010000 	.word	0x40010000
 800e3a8:	40010400 	.word	0x40010400

0800e3ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e3b4:	bf00      	nop
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e3c8:	bf00      	nop
 800e3ca:	370c      	adds	r7, #12
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e3dc:	bf00      	nop
 800e3de:	370c      	adds	r7, #12
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr

0800e3e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d101      	bne.n	800e3fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e042      	b.n	800e480 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e400:	2b00      	cmp	r3, #0
 800e402:	d106      	bne.n	800e412 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2200      	movs	r2, #0
 800e408:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f7f3 ffa1 	bl	8002354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2224      	movs	r2, #36	; 0x24
 800e416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	681a      	ldr	r2, [r3, #0]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f022 0201 	bic.w	r2, r2, #1
 800e428:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d002      	beq.n	800e438 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f001 fa44 	bl	800f8c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 fcd9 	bl	800edf0 <UART_SetConfig>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b01      	cmp	r3, #1
 800e442:	d101      	bne.n	800e448 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e444:	2301      	movs	r3, #1
 800e446:	e01b      	b.n	800e480 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	685a      	ldr	r2, [r3, #4]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	689a      	ldr	r2, [r3, #8]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f042 0201 	orr.w	r2, r2, #1
 800e476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f001 fac3 	bl	800fa04 <UART_CheckIdleState>
 800e47e:	4603      	mov	r3, r0
}
 800e480:	4618      	mov	r0, r3
 800e482:	3708      	adds	r7, #8
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b08a      	sub	sp, #40	; 0x28
 800e48c:	af02      	add	r7, sp, #8
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	603b      	str	r3, [r7, #0]
 800e494:	4613      	mov	r3, r2
 800e496:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e49e:	2b20      	cmp	r3, #32
 800e4a0:	d17b      	bne.n	800e59a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d002      	beq.n	800e4ae <HAL_UART_Transmit+0x26>
 800e4a8:	88fb      	ldrh	r3, [r7, #6]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d101      	bne.n	800e4b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	e074      	b.n	800e59c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2221      	movs	r2, #33	; 0x21
 800e4be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e4c2:	f7f4 f9ab 	bl	800281c <HAL_GetTick>
 800e4c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	88fa      	ldrh	r2, [r7, #6]
 800e4cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	88fa      	ldrh	r2, [r7, #6]
 800e4d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	689b      	ldr	r3, [r3, #8]
 800e4dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4e0:	d108      	bne.n	800e4f4 <HAL_UART_Transmit+0x6c>
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	691b      	ldr	r3, [r3, #16]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d104      	bne.n	800e4f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	61bb      	str	r3, [r7, #24]
 800e4f2:	e003      	b.n	800e4fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e4fc:	e030      	b.n	800e560 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	9300      	str	r3, [sp, #0]
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	2200      	movs	r2, #0
 800e506:	2180      	movs	r1, #128	; 0x80
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f001 fb25 	bl	800fb58 <UART_WaitOnFlagUntilTimeout>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d005      	beq.n	800e520 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2220      	movs	r2, #32
 800e518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e51c:	2303      	movs	r3, #3
 800e51e:	e03d      	b.n	800e59c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d10b      	bne.n	800e53e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e526:	69bb      	ldr	r3, [r7, #24]
 800e528:	881b      	ldrh	r3, [r3, #0]
 800e52a:	461a      	mov	r2, r3
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e534:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	3302      	adds	r3, #2
 800e53a:	61bb      	str	r3, [r7, #24]
 800e53c:	e007      	b.n	800e54e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e53e:	69fb      	ldr	r3, [r7, #28]
 800e540:	781a      	ldrb	r2, [r3, #0]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	3301      	adds	r3, #1
 800e54c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e554:	b29b      	uxth	r3, r3
 800e556:	3b01      	subs	r3, #1
 800e558:	b29a      	uxth	r2, r3
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e566:	b29b      	uxth	r3, r3
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d1c8      	bne.n	800e4fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	9300      	str	r3, [sp, #0]
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	2200      	movs	r2, #0
 800e574:	2140      	movs	r1, #64	; 0x40
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	f001 faee 	bl	800fb58 <UART_WaitOnFlagUntilTimeout>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d005      	beq.n	800e58e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2220      	movs	r2, #32
 800e586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e58a:	2303      	movs	r3, #3
 800e58c:	e006      	b.n	800e59c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2220      	movs	r2, #32
 800e592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e596:	2300      	movs	r3, #0
 800e598:	e000      	b.n	800e59c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e59a:	2302      	movs	r3, #2
  }
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3720      	adds	r7, #32
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b08a      	sub	sp, #40	; 0x28
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5b8:	2b20      	cmp	r3, #32
 800e5ba:	d137      	bne.n	800e62c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d002      	beq.n	800e5c8 <HAL_UART_Receive_IT+0x24>
 800e5c2:	88fb      	ldrh	r3, [r7, #6]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d101      	bne.n	800e5cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	e030      	b.n	800e62e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4a18      	ldr	r2, [pc, #96]	; (800e638 <HAL_UART_Receive_IT+0x94>)
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d01f      	beq.n	800e61c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d018      	beq.n	800e61c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	e853 3f00 	ldrex	r3, [r3]
 800e5f6:	613b      	str	r3, [r7, #16]
   return(result);
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e5fe:	627b      	str	r3, [r7, #36]	; 0x24
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	461a      	mov	r2, r3
 800e606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e608:	623b      	str	r3, [r7, #32]
 800e60a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e60c:	69f9      	ldr	r1, [r7, #28]
 800e60e:	6a3a      	ldr	r2, [r7, #32]
 800e610:	e841 2300 	strex	r3, r2, [r1]
 800e614:	61bb      	str	r3, [r7, #24]
   return(result);
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d1e6      	bne.n	800e5ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e61c:	88fb      	ldrh	r3, [r7, #6]
 800e61e:	461a      	mov	r2, r3
 800e620:	68b9      	ldr	r1, [r7, #8]
 800e622:	68f8      	ldr	r0, [r7, #12]
 800e624:	f001 fb06 	bl	800fc34 <UART_Start_Receive_IT>
 800e628:	4603      	mov	r3, r0
 800e62a:	e000      	b.n	800e62e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e62c:	2302      	movs	r3, #2
  }
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3728      	adds	r7, #40	; 0x28
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	58000c00 	.word	0x58000c00

0800e63c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b0ba      	sub	sp, #232	; 0xe8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	69db      	ldr	r3, [r3, #28]
 800e64a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e662:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e666:	f640 030f 	movw	r3, #2063	; 0x80f
 800e66a:	4013      	ands	r3, r2
 800e66c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e670:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e674:	2b00      	cmp	r3, #0
 800e676:	d11b      	bne.n	800e6b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e67c:	f003 0320 	and.w	r3, r3, #32
 800e680:	2b00      	cmp	r3, #0
 800e682:	d015      	beq.n	800e6b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e688:	f003 0320 	and.w	r3, r3, #32
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d105      	bne.n	800e69c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d009      	beq.n	800e6b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	f000 8377 	beq.w	800ed94 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	4798      	blx	r3
      }
      return;
 800e6ae:	e371      	b.n	800ed94 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e6b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f000 8123 	beq.w	800e900 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e6ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e6be:	4b8d      	ldr	r3, [pc, #564]	; (800e8f4 <HAL_UART_IRQHandler+0x2b8>)
 800e6c0:	4013      	ands	r3, r2
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d106      	bne.n	800e6d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e6c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e6ca:	4b8b      	ldr	r3, [pc, #556]	; (800e8f8 <HAL_UART_IRQHandler+0x2bc>)
 800e6cc:	4013      	ands	r3, r2
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	f000 8116 	beq.w	800e900 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e6d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6d8:	f003 0301 	and.w	r3, r3, #1
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d011      	beq.n	800e704 <HAL_UART_IRQHandler+0xc8>
 800e6e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d00b      	beq.n	800e704 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6fa:	f043 0201 	orr.w	r2, r3, #1
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e708:	f003 0302 	and.w	r3, r3, #2
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d011      	beq.n	800e734 <HAL_UART_IRQHandler+0xf8>
 800e710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e714:	f003 0301 	and.w	r3, r3, #1
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d00b      	beq.n	800e734 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	2202      	movs	r2, #2
 800e722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e72a:	f043 0204 	orr.w	r2, r3, #4
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e738:	f003 0304 	and.w	r3, r3, #4
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d011      	beq.n	800e764 <HAL_UART_IRQHandler+0x128>
 800e740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e744:	f003 0301 	and.w	r3, r3, #1
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d00b      	beq.n	800e764 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	2204      	movs	r2, #4
 800e752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e75a:	f043 0202 	orr.w	r2, r3, #2
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e768:	f003 0308 	and.w	r3, r3, #8
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d017      	beq.n	800e7a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e774:	f003 0320 	and.w	r3, r3, #32
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d105      	bne.n	800e788 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e77c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e780:	4b5c      	ldr	r3, [pc, #368]	; (800e8f4 <HAL_UART_IRQHandler+0x2b8>)
 800e782:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e784:	2b00      	cmp	r3, #0
 800e786:	d00b      	beq.n	800e7a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	2208      	movs	r2, #8
 800e78e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e796:	f043 0208 	orr.w	r2, r3, #8
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e7a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d012      	beq.n	800e7d2 <HAL_UART_IRQHandler+0x196>
 800e7ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d00c      	beq.n	800e7d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e7c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7c8:	f043 0220 	orr.w	r2, r3, #32
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	f000 82dd 	beq.w	800ed98 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e7de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7e2:	f003 0320 	and.w	r3, r3, #32
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d013      	beq.n	800e812 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e7ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7ee:	f003 0320 	and.w	r3, r3, #32
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d105      	bne.n	800e802 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e7f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e7fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d007      	beq.n	800e812 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e806:	2b00      	cmp	r3, #0
 800e808:	d003      	beq.n	800e812 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	689b      	ldr	r3, [r3, #8]
 800e822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e826:	2b40      	cmp	r3, #64	; 0x40
 800e828:	d005      	beq.n	800e836 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e82a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e82e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e832:	2b00      	cmp	r3, #0
 800e834:	d054      	beq.n	800e8e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f001 fb1e 	bl	800fe78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	689b      	ldr	r3, [r3, #8]
 800e842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e846:	2b40      	cmp	r3, #64	; 0x40
 800e848:	d146      	bne.n	800e8d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	3308      	adds	r3, #8
 800e850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e858:	e853 3f00 	ldrex	r3, [r3]
 800e85c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	3308      	adds	r3, #8
 800e872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e876:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e87a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e87e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e886:	e841 2300 	strex	r3, r2, [r1]
 800e88a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e88e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e892:	2b00      	cmp	r3, #0
 800e894:	d1d9      	bne.n	800e84a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d017      	beq.n	800e8d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8a6:	4a15      	ldr	r2, [pc, #84]	; (800e8fc <HAL_UART_IRQHandler+0x2c0>)
 800e8a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7f7 f993 	bl	8005bdc <HAL_DMA_Abort_IT>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d019      	beq.n	800e8f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e8ca:	4610      	mov	r0, r2
 800e8cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8ce:	e00f      	b.n	800e8f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 fa77 	bl	800edc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8d6:	e00b      	b.n	800e8f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 fa73 	bl	800edc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8de:	e007      	b.n	800e8f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f000 fa6f 	bl	800edc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e8ee:	e253      	b.n	800ed98 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8f0:	bf00      	nop
    return;
 800e8f2:	e251      	b.n	800ed98 <HAL_UART_IRQHandler+0x75c>
 800e8f4:	10000001 	.word	0x10000001
 800e8f8:	04000120 	.word	0x04000120
 800e8fc:	0800ff45 	.word	0x0800ff45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e904:	2b01      	cmp	r3, #1
 800e906:	f040 81e7 	bne.w	800ecd8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e90a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e90e:	f003 0310 	and.w	r3, r3, #16
 800e912:	2b00      	cmp	r3, #0
 800e914:	f000 81e0 	beq.w	800ecd8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e91c:	f003 0310 	and.w	r3, r3, #16
 800e920:	2b00      	cmp	r3, #0
 800e922:	f000 81d9 	beq.w	800ecd8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	2210      	movs	r2, #16
 800e92c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	689b      	ldr	r3, [r3, #8]
 800e934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e938:	2b40      	cmp	r3, #64	; 0x40
 800e93a:	f040 8151 	bne.w	800ebe0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4a96      	ldr	r2, [pc, #600]	; (800eba0 <HAL_UART_IRQHandler+0x564>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d068      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	4a93      	ldr	r2, [pc, #588]	; (800eba4 <HAL_UART_IRQHandler+0x568>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d061      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4a91      	ldr	r2, [pc, #580]	; (800eba8 <HAL_UART_IRQHandler+0x56c>)
 800e964:	4293      	cmp	r3, r2
 800e966:	d05a      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a8e      	ldr	r2, [pc, #568]	; (800ebac <HAL_UART_IRQHandler+0x570>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d053      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4a8c      	ldr	r2, [pc, #560]	; (800ebb0 <HAL_UART_IRQHandler+0x574>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d04c      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	4a89      	ldr	r2, [pc, #548]	; (800ebb4 <HAL_UART_IRQHandler+0x578>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d045      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a87      	ldr	r2, [pc, #540]	; (800ebb8 <HAL_UART_IRQHandler+0x57c>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d03e      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4a84      	ldr	r2, [pc, #528]	; (800ebbc <HAL_UART_IRQHandler+0x580>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d037      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4a82      	ldr	r2, [pc, #520]	; (800ebc0 <HAL_UART_IRQHandler+0x584>)
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d030      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4a7f      	ldr	r2, [pc, #508]	; (800ebc4 <HAL_UART_IRQHandler+0x588>)
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d029      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4a7d      	ldr	r2, [pc, #500]	; (800ebc8 <HAL_UART_IRQHandler+0x58c>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d022      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4a7a      	ldr	r2, [pc, #488]	; (800ebcc <HAL_UART_IRQHandler+0x590>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d01b      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	4a78      	ldr	r2, [pc, #480]	; (800ebd0 <HAL_UART_IRQHandler+0x594>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d014      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4a75      	ldr	r2, [pc, #468]	; (800ebd4 <HAL_UART_IRQHandler+0x598>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d00d      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4a73      	ldr	r2, [pc, #460]	; (800ebd8 <HAL_UART_IRQHandler+0x59c>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d006      	beq.n	800ea1e <HAL_UART_IRQHandler+0x3e2>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4a70      	ldr	r2, [pc, #448]	; (800ebdc <HAL_UART_IRQHandler+0x5a0>)
 800ea1a:	4293      	cmp	r3, r2
 800ea1c:	d106      	bne.n	800ea2c <HAL_UART_IRQHandler+0x3f0>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	e005      	b.n	800ea38 <HAL_UART_IRQHandler+0x3fc>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ea3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	f000 81ab 	beq.w	800ed9c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ea4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ea50:	429a      	cmp	r2, r3
 800ea52:	f080 81a3 	bcs.w	800ed9c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ea5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea66:	69db      	ldr	r3, [r3, #28]
 800ea68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea6c:	f000 8087 	beq.w	800eb7e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ea7c:	e853 3f00 	ldrex	r3, [r3]
 800ea80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ea84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	461a      	mov	r2, r3
 800ea96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ea9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ea9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800eaa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800eaaa:	e841 2300 	strex	r3, r2, [r1]
 800eaae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800eab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1da      	bne.n	800ea70 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	3308      	adds	r3, #8
 800eac0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eac4:	e853 3f00 	ldrex	r3, [r3]
 800eac8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800eaca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eacc:	f023 0301 	bic.w	r3, r3, #1
 800ead0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	3308      	adds	r3, #8
 800eada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800eade:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800eae2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800eae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eaea:	e841 2300 	strex	r3, r2, [r1]
 800eaee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800eaf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1e1      	bne.n	800eaba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	3308      	adds	r3, #8
 800eafc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb00:	e853 3f00 	ldrex	r3, [r3]
 800eb04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800eb06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	3308      	adds	r3, #8
 800eb16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800eb1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800eb1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eb20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eb22:	e841 2300 	strex	r3, r2, [r1]
 800eb26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eb28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1e3      	bne.n	800eaf6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2220      	movs	r2, #32
 800eb32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb44:	e853 3f00 	ldrex	r3, [r3]
 800eb48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eb4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb4c:	f023 0310 	bic.w	r3, r3, #16
 800eb50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	461a      	mov	r2, r3
 800eb5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eb5e:	65bb      	str	r3, [r7, #88]	; 0x58
 800eb60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eb64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb66:	e841 2300 	strex	r3, r2, [r1]
 800eb6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eb6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1e4      	bne.n	800eb3c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7f6 fd11 	bl	80055a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2202      	movs	r2, #2
 800eb82:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	1ad3      	subs	r3, r2, r3
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	4619      	mov	r1, r3
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f000 f91d 	bl	800edd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eb9e:	e0fd      	b.n	800ed9c <HAL_UART_IRQHandler+0x760>
 800eba0:	40020010 	.word	0x40020010
 800eba4:	40020028 	.word	0x40020028
 800eba8:	40020040 	.word	0x40020040
 800ebac:	40020058 	.word	0x40020058
 800ebb0:	40020070 	.word	0x40020070
 800ebb4:	40020088 	.word	0x40020088
 800ebb8:	400200a0 	.word	0x400200a0
 800ebbc:	400200b8 	.word	0x400200b8
 800ebc0:	40020410 	.word	0x40020410
 800ebc4:	40020428 	.word	0x40020428
 800ebc8:	40020440 	.word	0x40020440
 800ebcc:	40020458 	.word	0x40020458
 800ebd0:	40020470 	.word	0x40020470
 800ebd4:	40020488 	.word	0x40020488
 800ebd8:	400204a0 	.word	0x400204a0
 800ebdc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f000 80cf 	beq.w	800eda0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ec02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	f000 80ca 	beq.w	800eda0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec14:	e853 3f00 	ldrex	r3, [r3]
 800ec18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ec1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	461a      	mov	r2, r3
 800ec2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ec2e:	647b      	str	r3, [r7, #68]	; 0x44
 800ec30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec36:	e841 2300 	strex	r3, r2, [r1]
 800ec3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d1e4      	bne.n	800ec0c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	3308      	adds	r3, #8
 800ec48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4c:	e853 3f00 	ldrex	r3, [r3]
 800ec50:	623b      	str	r3, [r7, #32]
   return(result);
 800ec52:	6a3a      	ldr	r2, [r7, #32]
 800ec54:	4b55      	ldr	r3, [pc, #340]	; (800edac <HAL_UART_IRQHandler+0x770>)
 800ec56:	4013      	ands	r3, r2
 800ec58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	3308      	adds	r3, #8
 800ec62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ec66:	633a      	str	r2, [r7, #48]	; 0x30
 800ec68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec6e:	e841 2300 	strex	r3, r2, [r1]
 800ec72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d1e3      	bne.n	800ec42 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2220      	movs	r2, #32
 800ec7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2200      	movs	r2, #0
 800ec86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	e853 3f00 	ldrex	r3, [r3]
 800ec9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	f023 0310 	bic.w	r3, r3, #16
 800eca2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	461a      	mov	r2, r3
 800ecac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ecb0:	61fb      	str	r3, [r7, #28]
 800ecb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb4:	69b9      	ldr	r1, [r7, #24]
 800ecb6:	69fa      	ldr	r2, [r7, #28]
 800ecb8:	e841 2300 	strex	r3, r2, [r1]
 800ecbc:	617b      	str	r3, [r7, #20]
   return(result);
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d1e4      	bne.n	800ec8e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2202      	movs	r2, #2
 800ecc8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ecca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ecce:	4619      	mov	r1, r3
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f000 f881 	bl	800edd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ecd6:	e063      	b.n	800eda0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ecd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d00e      	beq.n	800ed02 <HAL_UART_IRQHandler+0x6c6>
 800ece4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ece8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d008      	beq.n	800ed02 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ecf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f001 fe80 	bl	8010a00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ed00:	e051      	b.n	800eda6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ed02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d014      	beq.n	800ed38 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ed0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d105      	bne.n	800ed26 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ed1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d008      	beq.n	800ed38 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d03a      	beq.n	800eda4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	4798      	blx	r3
    }
    return;
 800ed36:	e035      	b.n	800eda4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ed38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d009      	beq.n	800ed58 <HAL_UART_IRQHandler+0x71c>
 800ed44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d003      	beq.n	800ed58 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f001 f90d 	bl	800ff70 <UART_EndTransmit_IT>
    return;
 800ed56:	e026      	b.n	800eda6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ed58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d009      	beq.n	800ed78 <HAL_UART_IRQHandler+0x73c>
 800ed64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d003      	beq.n	800ed78 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f001 fe59 	bl	8010a28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ed76:	e016      	b.n	800eda6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ed78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d010      	beq.n	800eda6 <HAL_UART_IRQHandler+0x76a>
 800ed84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	da0c      	bge.n	800eda6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f001 fe41 	bl	8010a14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ed92:	e008      	b.n	800eda6 <HAL_UART_IRQHandler+0x76a>
      return;
 800ed94:	bf00      	nop
 800ed96:	e006      	b.n	800eda6 <HAL_UART_IRQHandler+0x76a>
    return;
 800ed98:	bf00      	nop
 800ed9a:	e004      	b.n	800eda6 <HAL_UART_IRQHandler+0x76a>
      return;
 800ed9c:	bf00      	nop
 800ed9e:	e002      	b.n	800eda6 <HAL_UART_IRQHandler+0x76a>
      return;
 800eda0:	bf00      	nop
 800eda2:	e000      	b.n	800eda6 <HAL_UART_IRQHandler+0x76a>
    return;
 800eda4:	bf00      	nop
  }
}
 800eda6:	37e8      	adds	r7, #232	; 0xe8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	effffffe 	.word	0xeffffffe

0800edb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800edb8:	bf00      	nop
 800edba:	370c      	adds	r7, #12
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800edcc:	bf00      	nop
 800edce:	370c      	adds	r7, #12
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr

0800edd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800edd8:	b480      	push	{r7}
 800edda:	b083      	sub	sp, #12
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	460b      	mov	r3, r1
 800ede2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ede4:	bf00      	nop
 800ede6:	370c      	adds	r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr

0800edf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800edf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800edf4:	b092      	sub	sp, #72	; 0x48
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800edfa:	2300      	movs	r3, #0
 800edfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	689a      	ldr	r2, [r3, #8]
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	691b      	ldr	r3, [r3, #16]
 800ee08:	431a      	orrs	r2, r3
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	695b      	ldr	r3, [r3, #20]
 800ee0e:	431a      	orrs	r2, r3
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	69db      	ldr	r3, [r3, #28]
 800ee14:	4313      	orrs	r3, r2
 800ee16:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	4bbe      	ldr	r3, [pc, #760]	; (800f118 <UART_SetConfig+0x328>)
 800ee20:	4013      	ands	r3, r2
 800ee22:	697a      	ldr	r2, [r7, #20]
 800ee24:	6812      	ldr	r2, [r2, #0]
 800ee26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee28:	430b      	orrs	r3, r1
 800ee2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	68da      	ldr	r2, [r3, #12]
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	430a      	orrs	r2, r1
 800ee40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	699b      	ldr	r3, [r3, #24]
 800ee46:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4ab3      	ldr	r2, [pc, #716]	; (800f11c <UART_SetConfig+0x32c>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d004      	beq.n	800ee5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	6a1b      	ldr	r3, [r3, #32]
 800ee56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	689a      	ldr	r2, [r3, #8]
 800ee62:	4baf      	ldr	r3, [pc, #700]	; (800f120 <UART_SetConfig+0x330>)
 800ee64:	4013      	ands	r3, r2
 800ee66:	697a      	ldr	r2, [r7, #20]
 800ee68:	6812      	ldr	r2, [r2, #0]
 800ee6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee6c:	430b      	orrs	r3, r1
 800ee6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee76:	f023 010f 	bic.w	r1, r3, #15
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	430a      	orrs	r2, r1
 800ee84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4aa6      	ldr	r2, [pc, #664]	; (800f124 <UART_SetConfig+0x334>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d177      	bne.n	800ef80 <UART_SetConfig+0x190>
 800ee90:	4ba5      	ldr	r3, [pc, #660]	; (800f128 <UART_SetConfig+0x338>)
 800ee92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee98:	2b28      	cmp	r3, #40	; 0x28
 800ee9a:	d86d      	bhi.n	800ef78 <UART_SetConfig+0x188>
 800ee9c:	a201      	add	r2, pc, #4	; (adr r2, 800eea4 <UART_SetConfig+0xb4>)
 800ee9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea2:	bf00      	nop
 800eea4:	0800ef49 	.word	0x0800ef49
 800eea8:	0800ef79 	.word	0x0800ef79
 800eeac:	0800ef79 	.word	0x0800ef79
 800eeb0:	0800ef79 	.word	0x0800ef79
 800eeb4:	0800ef79 	.word	0x0800ef79
 800eeb8:	0800ef79 	.word	0x0800ef79
 800eebc:	0800ef79 	.word	0x0800ef79
 800eec0:	0800ef79 	.word	0x0800ef79
 800eec4:	0800ef51 	.word	0x0800ef51
 800eec8:	0800ef79 	.word	0x0800ef79
 800eecc:	0800ef79 	.word	0x0800ef79
 800eed0:	0800ef79 	.word	0x0800ef79
 800eed4:	0800ef79 	.word	0x0800ef79
 800eed8:	0800ef79 	.word	0x0800ef79
 800eedc:	0800ef79 	.word	0x0800ef79
 800eee0:	0800ef79 	.word	0x0800ef79
 800eee4:	0800ef59 	.word	0x0800ef59
 800eee8:	0800ef79 	.word	0x0800ef79
 800eeec:	0800ef79 	.word	0x0800ef79
 800eef0:	0800ef79 	.word	0x0800ef79
 800eef4:	0800ef79 	.word	0x0800ef79
 800eef8:	0800ef79 	.word	0x0800ef79
 800eefc:	0800ef79 	.word	0x0800ef79
 800ef00:	0800ef79 	.word	0x0800ef79
 800ef04:	0800ef61 	.word	0x0800ef61
 800ef08:	0800ef79 	.word	0x0800ef79
 800ef0c:	0800ef79 	.word	0x0800ef79
 800ef10:	0800ef79 	.word	0x0800ef79
 800ef14:	0800ef79 	.word	0x0800ef79
 800ef18:	0800ef79 	.word	0x0800ef79
 800ef1c:	0800ef79 	.word	0x0800ef79
 800ef20:	0800ef79 	.word	0x0800ef79
 800ef24:	0800ef69 	.word	0x0800ef69
 800ef28:	0800ef79 	.word	0x0800ef79
 800ef2c:	0800ef79 	.word	0x0800ef79
 800ef30:	0800ef79 	.word	0x0800ef79
 800ef34:	0800ef79 	.word	0x0800ef79
 800ef38:	0800ef79 	.word	0x0800ef79
 800ef3c:	0800ef79 	.word	0x0800ef79
 800ef40:	0800ef79 	.word	0x0800ef79
 800ef44:	0800ef71 	.word	0x0800ef71
 800ef48:	2301      	movs	r3, #1
 800ef4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef4e:	e222      	b.n	800f396 <UART_SetConfig+0x5a6>
 800ef50:	2304      	movs	r3, #4
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef56:	e21e      	b.n	800f396 <UART_SetConfig+0x5a6>
 800ef58:	2308      	movs	r3, #8
 800ef5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef5e:	e21a      	b.n	800f396 <UART_SetConfig+0x5a6>
 800ef60:	2310      	movs	r3, #16
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef66:	e216      	b.n	800f396 <UART_SetConfig+0x5a6>
 800ef68:	2320      	movs	r3, #32
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6e:	e212      	b.n	800f396 <UART_SetConfig+0x5a6>
 800ef70:	2340      	movs	r3, #64	; 0x40
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef76:	e20e      	b.n	800f396 <UART_SetConfig+0x5a6>
 800ef78:	2380      	movs	r3, #128	; 0x80
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7e:	e20a      	b.n	800f396 <UART_SetConfig+0x5a6>
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4a69      	ldr	r2, [pc, #420]	; (800f12c <UART_SetConfig+0x33c>)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d130      	bne.n	800efec <UART_SetConfig+0x1fc>
 800ef8a:	4b67      	ldr	r3, [pc, #412]	; (800f128 <UART_SetConfig+0x338>)
 800ef8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef8e:	f003 0307 	and.w	r3, r3, #7
 800ef92:	2b05      	cmp	r3, #5
 800ef94:	d826      	bhi.n	800efe4 <UART_SetConfig+0x1f4>
 800ef96:	a201      	add	r2, pc, #4	; (adr r2, 800ef9c <UART_SetConfig+0x1ac>)
 800ef98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef9c:	0800efb5 	.word	0x0800efb5
 800efa0:	0800efbd 	.word	0x0800efbd
 800efa4:	0800efc5 	.word	0x0800efc5
 800efa8:	0800efcd 	.word	0x0800efcd
 800efac:	0800efd5 	.word	0x0800efd5
 800efb0:	0800efdd 	.word	0x0800efdd
 800efb4:	2300      	movs	r3, #0
 800efb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efba:	e1ec      	b.n	800f396 <UART_SetConfig+0x5a6>
 800efbc:	2304      	movs	r3, #4
 800efbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efc2:	e1e8      	b.n	800f396 <UART_SetConfig+0x5a6>
 800efc4:	2308      	movs	r3, #8
 800efc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efca:	e1e4      	b.n	800f396 <UART_SetConfig+0x5a6>
 800efcc:	2310      	movs	r3, #16
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efd2:	e1e0      	b.n	800f396 <UART_SetConfig+0x5a6>
 800efd4:	2320      	movs	r3, #32
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efda:	e1dc      	b.n	800f396 <UART_SetConfig+0x5a6>
 800efdc:	2340      	movs	r3, #64	; 0x40
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efe2:	e1d8      	b.n	800f396 <UART_SetConfig+0x5a6>
 800efe4:	2380      	movs	r3, #128	; 0x80
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efea:	e1d4      	b.n	800f396 <UART_SetConfig+0x5a6>
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a4f      	ldr	r2, [pc, #316]	; (800f130 <UART_SetConfig+0x340>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d130      	bne.n	800f058 <UART_SetConfig+0x268>
 800eff6:	4b4c      	ldr	r3, [pc, #304]	; (800f128 <UART_SetConfig+0x338>)
 800eff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800effa:	f003 0307 	and.w	r3, r3, #7
 800effe:	2b05      	cmp	r3, #5
 800f000:	d826      	bhi.n	800f050 <UART_SetConfig+0x260>
 800f002:	a201      	add	r2, pc, #4	; (adr r2, 800f008 <UART_SetConfig+0x218>)
 800f004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f008:	0800f021 	.word	0x0800f021
 800f00c:	0800f029 	.word	0x0800f029
 800f010:	0800f031 	.word	0x0800f031
 800f014:	0800f039 	.word	0x0800f039
 800f018:	0800f041 	.word	0x0800f041
 800f01c:	0800f049 	.word	0x0800f049
 800f020:	2300      	movs	r3, #0
 800f022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f026:	e1b6      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f028:	2304      	movs	r3, #4
 800f02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f02e:	e1b2      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f030:	2308      	movs	r3, #8
 800f032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f036:	e1ae      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f038:	2310      	movs	r3, #16
 800f03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03e:	e1aa      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f040:	2320      	movs	r3, #32
 800f042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f046:	e1a6      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f048:	2340      	movs	r3, #64	; 0x40
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04e:	e1a2      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f050:	2380      	movs	r3, #128	; 0x80
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f056:	e19e      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a35      	ldr	r2, [pc, #212]	; (800f134 <UART_SetConfig+0x344>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d130      	bne.n	800f0c4 <UART_SetConfig+0x2d4>
 800f062:	4b31      	ldr	r3, [pc, #196]	; (800f128 <UART_SetConfig+0x338>)
 800f064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f066:	f003 0307 	and.w	r3, r3, #7
 800f06a:	2b05      	cmp	r3, #5
 800f06c:	d826      	bhi.n	800f0bc <UART_SetConfig+0x2cc>
 800f06e:	a201      	add	r2, pc, #4	; (adr r2, 800f074 <UART_SetConfig+0x284>)
 800f070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f074:	0800f08d 	.word	0x0800f08d
 800f078:	0800f095 	.word	0x0800f095
 800f07c:	0800f09d 	.word	0x0800f09d
 800f080:	0800f0a5 	.word	0x0800f0a5
 800f084:	0800f0ad 	.word	0x0800f0ad
 800f088:	0800f0b5 	.word	0x0800f0b5
 800f08c:	2300      	movs	r3, #0
 800f08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f092:	e180      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f094:	2304      	movs	r3, #4
 800f096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f09a:	e17c      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f09c:	2308      	movs	r3, #8
 800f09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0a2:	e178      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f0a4:	2310      	movs	r3, #16
 800f0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0aa:	e174      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f0ac:	2320      	movs	r3, #32
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0b2:	e170      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f0b4:	2340      	movs	r3, #64	; 0x40
 800f0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ba:	e16c      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f0bc:	2380      	movs	r3, #128	; 0x80
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c2:	e168      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4a1b      	ldr	r2, [pc, #108]	; (800f138 <UART_SetConfig+0x348>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d142      	bne.n	800f154 <UART_SetConfig+0x364>
 800f0ce:	4b16      	ldr	r3, [pc, #88]	; (800f128 <UART_SetConfig+0x338>)
 800f0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0d2:	f003 0307 	and.w	r3, r3, #7
 800f0d6:	2b05      	cmp	r3, #5
 800f0d8:	d838      	bhi.n	800f14c <UART_SetConfig+0x35c>
 800f0da:	a201      	add	r2, pc, #4	; (adr r2, 800f0e0 <UART_SetConfig+0x2f0>)
 800f0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e0:	0800f0f9 	.word	0x0800f0f9
 800f0e4:	0800f101 	.word	0x0800f101
 800f0e8:	0800f109 	.word	0x0800f109
 800f0ec:	0800f111 	.word	0x0800f111
 800f0f0:	0800f13d 	.word	0x0800f13d
 800f0f4:	0800f145 	.word	0x0800f145
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0fe:	e14a      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f100:	2304      	movs	r3, #4
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f106:	e146      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f108:	2308      	movs	r3, #8
 800f10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f10e:	e142      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f110:	2310      	movs	r3, #16
 800f112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f116:	e13e      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f118:	cfff69f3 	.word	0xcfff69f3
 800f11c:	58000c00 	.word	0x58000c00
 800f120:	11fff4ff 	.word	0x11fff4ff
 800f124:	40011000 	.word	0x40011000
 800f128:	58024400 	.word	0x58024400
 800f12c:	40004400 	.word	0x40004400
 800f130:	40004800 	.word	0x40004800
 800f134:	40004c00 	.word	0x40004c00
 800f138:	40005000 	.word	0x40005000
 800f13c:	2320      	movs	r3, #32
 800f13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f142:	e128      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f144:	2340      	movs	r3, #64	; 0x40
 800f146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f14a:	e124      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f14c:	2380      	movs	r3, #128	; 0x80
 800f14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f152:	e120      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4acb      	ldr	r2, [pc, #812]	; (800f488 <UART_SetConfig+0x698>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d176      	bne.n	800f24c <UART_SetConfig+0x45c>
 800f15e:	4bcb      	ldr	r3, [pc, #812]	; (800f48c <UART_SetConfig+0x69c>)
 800f160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f166:	2b28      	cmp	r3, #40	; 0x28
 800f168:	d86c      	bhi.n	800f244 <UART_SetConfig+0x454>
 800f16a:	a201      	add	r2, pc, #4	; (adr r2, 800f170 <UART_SetConfig+0x380>)
 800f16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f170:	0800f215 	.word	0x0800f215
 800f174:	0800f245 	.word	0x0800f245
 800f178:	0800f245 	.word	0x0800f245
 800f17c:	0800f245 	.word	0x0800f245
 800f180:	0800f245 	.word	0x0800f245
 800f184:	0800f245 	.word	0x0800f245
 800f188:	0800f245 	.word	0x0800f245
 800f18c:	0800f245 	.word	0x0800f245
 800f190:	0800f21d 	.word	0x0800f21d
 800f194:	0800f245 	.word	0x0800f245
 800f198:	0800f245 	.word	0x0800f245
 800f19c:	0800f245 	.word	0x0800f245
 800f1a0:	0800f245 	.word	0x0800f245
 800f1a4:	0800f245 	.word	0x0800f245
 800f1a8:	0800f245 	.word	0x0800f245
 800f1ac:	0800f245 	.word	0x0800f245
 800f1b0:	0800f225 	.word	0x0800f225
 800f1b4:	0800f245 	.word	0x0800f245
 800f1b8:	0800f245 	.word	0x0800f245
 800f1bc:	0800f245 	.word	0x0800f245
 800f1c0:	0800f245 	.word	0x0800f245
 800f1c4:	0800f245 	.word	0x0800f245
 800f1c8:	0800f245 	.word	0x0800f245
 800f1cc:	0800f245 	.word	0x0800f245
 800f1d0:	0800f22d 	.word	0x0800f22d
 800f1d4:	0800f245 	.word	0x0800f245
 800f1d8:	0800f245 	.word	0x0800f245
 800f1dc:	0800f245 	.word	0x0800f245
 800f1e0:	0800f245 	.word	0x0800f245
 800f1e4:	0800f245 	.word	0x0800f245
 800f1e8:	0800f245 	.word	0x0800f245
 800f1ec:	0800f245 	.word	0x0800f245
 800f1f0:	0800f235 	.word	0x0800f235
 800f1f4:	0800f245 	.word	0x0800f245
 800f1f8:	0800f245 	.word	0x0800f245
 800f1fc:	0800f245 	.word	0x0800f245
 800f200:	0800f245 	.word	0x0800f245
 800f204:	0800f245 	.word	0x0800f245
 800f208:	0800f245 	.word	0x0800f245
 800f20c:	0800f245 	.word	0x0800f245
 800f210:	0800f23d 	.word	0x0800f23d
 800f214:	2301      	movs	r3, #1
 800f216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f21a:	e0bc      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f21c:	2304      	movs	r3, #4
 800f21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f222:	e0b8      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f224:	2308      	movs	r3, #8
 800f226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f22a:	e0b4      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f22c:	2310      	movs	r3, #16
 800f22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f232:	e0b0      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f234:	2320      	movs	r3, #32
 800f236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f23a:	e0ac      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f23c:	2340      	movs	r3, #64	; 0x40
 800f23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f242:	e0a8      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f244:	2380      	movs	r3, #128	; 0x80
 800f246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f24a:	e0a4      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4a8f      	ldr	r2, [pc, #572]	; (800f490 <UART_SetConfig+0x6a0>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d130      	bne.n	800f2b8 <UART_SetConfig+0x4c8>
 800f256:	4b8d      	ldr	r3, [pc, #564]	; (800f48c <UART_SetConfig+0x69c>)
 800f258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f25a:	f003 0307 	and.w	r3, r3, #7
 800f25e:	2b05      	cmp	r3, #5
 800f260:	d826      	bhi.n	800f2b0 <UART_SetConfig+0x4c0>
 800f262:	a201      	add	r2, pc, #4	; (adr r2, 800f268 <UART_SetConfig+0x478>)
 800f264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f268:	0800f281 	.word	0x0800f281
 800f26c:	0800f289 	.word	0x0800f289
 800f270:	0800f291 	.word	0x0800f291
 800f274:	0800f299 	.word	0x0800f299
 800f278:	0800f2a1 	.word	0x0800f2a1
 800f27c:	0800f2a9 	.word	0x0800f2a9
 800f280:	2300      	movs	r3, #0
 800f282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f286:	e086      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f288:	2304      	movs	r3, #4
 800f28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f28e:	e082      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f290:	2308      	movs	r3, #8
 800f292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f296:	e07e      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f298:	2310      	movs	r3, #16
 800f29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f29e:	e07a      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f2a0:	2320      	movs	r3, #32
 800f2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2a6:	e076      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f2a8:	2340      	movs	r3, #64	; 0x40
 800f2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ae:	e072      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f2b0:	2380      	movs	r3, #128	; 0x80
 800f2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2b6:	e06e      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a75      	ldr	r2, [pc, #468]	; (800f494 <UART_SetConfig+0x6a4>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d130      	bne.n	800f324 <UART_SetConfig+0x534>
 800f2c2:	4b72      	ldr	r3, [pc, #456]	; (800f48c <UART_SetConfig+0x69c>)
 800f2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2c6:	f003 0307 	and.w	r3, r3, #7
 800f2ca:	2b05      	cmp	r3, #5
 800f2cc:	d826      	bhi.n	800f31c <UART_SetConfig+0x52c>
 800f2ce:	a201      	add	r2, pc, #4	; (adr r2, 800f2d4 <UART_SetConfig+0x4e4>)
 800f2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2d4:	0800f2ed 	.word	0x0800f2ed
 800f2d8:	0800f2f5 	.word	0x0800f2f5
 800f2dc:	0800f2fd 	.word	0x0800f2fd
 800f2e0:	0800f305 	.word	0x0800f305
 800f2e4:	0800f30d 	.word	0x0800f30d
 800f2e8:	0800f315 	.word	0x0800f315
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2f2:	e050      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f2f4:	2304      	movs	r3, #4
 800f2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2fa:	e04c      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f2fc:	2308      	movs	r3, #8
 800f2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f302:	e048      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f304:	2310      	movs	r3, #16
 800f306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f30a:	e044      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f30c:	2320      	movs	r3, #32
 800f30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f312:	e040      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f314:	2340      	movs	r3, #64	; 0x40
 800f316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f31a:	e03c      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f31c:	2380      	movs	r3, #128	; 0x80
 800f31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f322:	e038      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4a5b      	ldr	r2, [pc, #364]	; (800f498 <UART_SetConfig+0x6a8>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d130      	bne.n	800f390 <UART_SetConfig+0x5a0>
 800f32e:	4b57      	ldr	r3, [pc, #348]	; (800f48c <UART_SetConfig+0x69c>)
 800f330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f332:	f003 0307 	and.w	r3, r3, #7
 800f336:	2b05      	cmp	r3, #5
 800f338:	d826      	bhi.n	800f388 <UART_SetConfig+0x598>
 800f33a:	a201      	add	r2, pc, #4	; (adr r2, 800f340 <UART_SetConfig+0x550>)
 800f33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f340:	0800f359 	.word	0x0800f359
 800f344:	0800f361 	.word	0x0800f361
 800f348:	0800f369 	.word	0x0800f369
 800f34c:	0800f371 	.word	0x0800f371
 800f350:	0800f379 	.word	0x0800f379
 800f354:	0800f381 	.word	0x0800f381
 800f358:	2302      	movs	r3, #2
 800f35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f35e:	e01a      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f360:	2304      	movs	r3, #4
 800f362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f366:	e016      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f368:	2308      	movs	r3, #8
 800f36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f36e:	e012      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f370:	2310      	movs	r3, #16
 800f372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f376:	e00e      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f378:	2320      	movs	r3, #32
 800f37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f37e:	e00a      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f380:	2340      	movs	r3, #64	; 0x40
 800f382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f386:	e006      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f388:	2380      	movs	r3, #128	; 0x80
 800f38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f38e:	e002      	b.n	800f396 <UART_SetConfig+0x5a6>
 800f390:	2380      	movs	r3, #128	; 0x80
 800f392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	4a3f      	ldr	r2, [pc, #252]	; (800f498 <UART_SetConfig+0x6a8>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	f040 80f8 	bne.w	800f592 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f3a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f3a6:	2b20      	cmp	r3, #32
 800f3a8:	dc46      	bgt.n	800f438 <UART_SetConfig+0x648>
 800f3aa:	2b02      	cmp	r3, #2
 800f3ac:	f2c0 8082 	blt.w	800f4b4 <UART_SetConfig+0x6c4>
 800f3b0:	3b02      	subs	r3, #2
 800f3b2:	2b1e      	cmp	r3, #30
 800f3b4:	d87e      	bhi.n	800f4b4 <UART_SetConfig+0x6c4>
 800f3b6:	a201      	add	r2, pc, #4	; (adr r2, 800f3bc <UART_SetConfig+0x5cc>)
 800f3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3bc:	0800f43f 	.word	0x0800f43f
 800f3c0:	0800f4b5 	.word	0x0800f4b5
 800f3c4:	0800f447 	.word	0x0800f447
 800f3c8:	0800f4b5 	.word	0x0800f4b5
 800f3cc:	0800f4b5 	.word	0x0800f4b5
 800f3d0:	0800f4b5 	.word	0x0800f4b5
 800f3d4:	0800f457 	.word	0x0800f457
 800f3d8:	0800f4b5 	.word	0x0800f4b5
 800f3dc:	0800f4b5 	.word	0x0800f4b5
 800f3e0:	0800f4b5 	.word	0x0800f4b5
 800f3e4:	0800f4b5 	.word	0x0800f4b5
 800f3e8:	0800f4b5 	.word	0x0800f4b5
 800f3ec:	0800f4b5 	.word	0x0800f4b5
 800f3f0:	0800f4b5 	.word	0x0800f4b5
 800f3f4:	0800f467 	.word	0x0800f467
 800f3f8:	0800f4b5 	.word	0x0800f4b5
 800f3fc:	0800f4b5 	.word	0x0800f4b5
 800f400:	0800f4b5 	.word	0x0800f4b5
 800f404:	0800f4b5 	.word	0x0800f4b5
 800f408:	0800f4b5 	.word	0x0800f4b5
 800f40c:	0800f4b5 	.word	0x0800f4b5
 800f410:	0800f4b5 	.word	0x0800f4b5
 800f414:	0800f4b5 	.word	0x0800f4b5
 800f418:	0800f4b5 	.word	0x0800f4b5
 800f41c:	0800f4b5 	.word	0x0800f4b5
 800f420:	0800f4b5 	.word	0x0800f4b5
 800f424:	0800f4b5 	.word	0x0800f4b5
 800f428:	0800f4b5 	.word	0x0800f4b5
 800f42c:	0800f4b5 	.word	0x0800f4b5
 800f430:	0800f4b5 	.word	0x0800f4b5
 800f434:	0800f4a7 	.word	0x0800f4a7
 800f438:	2b40      	cmp	r3, #64	; 0x40
 800f43a:	d037      	beq.n	800f4ac <UART_SetConfig+0x6bc>
 800f43c:	e03a      	b.n	800f4b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f43e:	f7fc f8d5 	bl	800b5ec <HAL_RCCEx_GetD3PCLK1Freq>
 800f442:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f444:	e03c      	b.n	800f4c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7fc f8e4 	bl	800b618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f454:	e034      	b.n	800f4c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f456:	f107 0318 	add.w	r3, r7, #24
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7fc fa30 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f460:	69fb      	ldr	r3, [r7, #28]
 800f462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f464:	e02c      	b.n	800f4c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f466:	4b09      	ldr	r3, [pc, #36]	; (800f48c <UART_SetConfig+0x69c>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f003 0320 	and.w	r3, r3, #32
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d016      	beq.n	800f4a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f472:	4b06      	ldr	r3, [pc, #24]	; (800f48c <UART_SetConfig+0x69c>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	08db      	lsrs	r3, r3, #3
 800f478:	f003 0303 	and.w	r3, r3, #3
 800f47c:	4a07      	ldr	r2, [pc, #28]	; (800f49c <UART_SetConfig+0x6ac>)
 800f47e:	fa22 f303 	lsr.w	r3, r2, r3
 800f482:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f484:	e01c      	b.n	800f4c0 <UART_SetConfig+0x6d0>
 800f486:	bf00      	nop
 800f488:	40011400 	.word	0x40011400
 800f48c:	58024400 	.word	0x58024400
 800f490:	40007800 	.word	0x40007800
 800f494:	40007c00 	.word	0x40007c00
 800f498:	58000c00 	.word	0x58000c00
 800f49c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f4a0:	4b9d      	ldr	r3, [pc, #628]	; (800f718 <UART_SetConfig+0x928>)
 800f4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4a4:	e00c      	b.n	800f4c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f4a6:	4b9d      	ldr	r3, [pc, #628]	; (800f71c <UART_SetConfig+0x92c>)
 800f4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4aa:	e009      	b.n	800f4c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4b2:	e005      	b.n	800f4c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f4be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	f000 81de 	beq.w	800f884 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4cc:	4a94      	ldr	r2, [pc, #592]	; (800f720 <UART_SetConfig+0x930>)
 800f4ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4d2:	461a      	mov	r2, r3
 800f4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4da:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	685a      	ldr	r2, [r3, #4]
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	005b      	lsls	r3, r3, #1
 800f4e4:	4413      	add	r3, r2
 800f4e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d305      	bcc.n	800f4f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f4f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d903      	bls.n	800f500 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f4fe:	e1c1      	b.n	800f884 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f502:	2200      	movs	r2, #0
 800f504:	60bb      	str	r3, [r7, #8]
 800f506:	60fa      	str	r2, [r7, #12]
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f50c:	4a84      	ldr	r2, [pc, #528]	; (800f720 <UART_SetConfig+0x930>)
 800f50e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f512:	b29b      	uxth	r3, r3
 800f514:	2200      	movs	r2, #0
 800f516:	603b      	str	r3, [r7, #0]
 800f518:	607a      	str	r2, [r7, #4]
 800f51a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f51e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f522:	f7f0 fed9 	bl	80002d8 <__aeabi_uldivmod>
 800f526:	4602      	mov	r2, r0
 800f528:	460b      	mov	r3, r1
 800f52a:	4610      	mov	r0, r2
 800f52c:	4619      	mov	r1, r3
 800f52e:	f04f 0200 	mov.w	r2, #0
 800f532:	f04f 0300 	mov.w	r3, #0
 800f536:	020b      	lsls	r3, r1, #8
 800f538:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f53c:	0202      	lsls	r2, r0, #8
 800f53e:	6979      	ldr	r1, [r7, #20]
 800f540:	6849      	ldr	r1, [r1, #4]
 800f542:	0849      	lsrs	r1, r1, #1
 800f544:	2000      	movs	r0, #0
 800f546:	460c      	mov	r4, r1
 800f548:	4605      	mov	r5, r0
 800f54a:	eb12 0804 	adds.w	r8, r2, r4
 800f54e:	eb43 0905 	adc.w	r9, r3, r5
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	2200      	movs	r2, #0
 800f558:	469a      	mov	sl, r3
 800f55a:	4693      	mov	fp, r2
 800f55c:	4652      	mov	r2, sl
 800f55e:	465b      	mov	r3, fp
 800f560:	4640      	mov	r0, r8
 800f562:	4649      	mov	r1, r9
 800f564:	f7f0 feb8 	bl	80002d8 <__aeabi_uldivmod>
 800f568:	4602      	mov	r2, r0
 800f56a:	460b      	mov	r3, r1
 800f56c:	4613      	mov	r3, r2
 800f56e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f576:	d308      	bcc.n	800f58a <UART_SetConfig+0x79a>
 800f578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f57e:	d204      	bcs.n	800f58a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f586:	60da      	str	r2, [r3, #12]
 800f588:	e17c      	b.n	800f884 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f58a:	2301      	movs	r3, #1
 800f58c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f590:	e178      	b.n	800f884 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	69db      	ldr	r3, [r3, #28]
 800f596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f59a:	f040 80c5 	bne.w	800f728 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f59e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f5a2:	2b20      	cmp	r3, #32
 800f5a4:	dc48      	bgt.n	800f638 <UART_SetConfig+0x848>
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	db7b      	blt.n	800f6a2 <UART_SetConfig+0x8b2>
 800f5aa:	2b20      	cmp	r3, #32
 800f5ac:	d879      	bhi.n	800f6a2 <UART_SetConfig+0x8b2>
 800f5ae:	a201      	add	r2, pc, #4	; (adr r2, 800f5b4 <UART_SetConfig+0x7c4>)
 800f5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5b4:	0800f63f 	.word	0x0800f63f
 800f5b8:	0800f647 	.word	0x0800f647
 800f5bc:	0800f6a3 	.word	0x0800f6a3
 800f5c0:	0800f6a3 	.word	0x0800f6a3
 800f5c4:	0800f64f 	.word	0x0800f64f
 800f5c8:	0800f6a3 	.word	0x0800f6a3
 800f5cc:	0800f6a3 	.word	0x0800f6a3
 800f5d0:	0800f6a3 	.word	0x0800f6a3
 800f5d4:	0800f65f 	.word	0x0800f65f
 800f5d8:	0800f6a3 	.word	0x0800f6a3
 800f5dc:	0800f6a3 	.word	0x0800f6a3
 800f5e0:	0800f6a3 	.word	0x0800f6a3
 800f5e4:	0800f6a3 	.word	0x0800f6a3
 800f5e8:	0800f6a3 	.word	0x0800f6a3
 800f5ec:	0800f6a3 	.word	0x0800f6a3
 800f5f0:	0800f6a3 	.word	0x0800f6a3
 800f5f4:	0800f66f 	.word	0x0800f66f
 800f5f8:	0800f6a3 	.word	0x0800f6a3
 800f5fc:	0800f6a3 	.word	0x0800f6a3
 800f600:	0800f6a3 	.word	0x0800f6a3
 800f604:	0800f6a3 	.word	0x0800f6a3
 800f608:	0800f6a3 	.word	0x0800f6a3
 800f60c:	0800f6a3 	.word	0x0800f6a3
 800f610:	0800f6a3 	.word	0x0800f6a3
 800f614:	0800f6a3 	.word	0x0800f6a3
 800f618:	0800f6a3 	.word	0x0800f6a3
 800f61c:	0800f6a3 	.word	0x0800f6a3
 800f620:	0800f6a3 	.word	0x0800f6a3
 800f624:	0800f6a3 	.word	0x0800f6a3
 800f628:	0800f6a3 	.word	0x0800f6a3
 800f62c:	0800f6a3 	.word	0x0800f6a3
 800f630:	0800f6a3 	.word	0x0800f6a3
 800f634:	0800f695 	.word	0x0800f695
 800f638:	2b40      	cmp	r3, #64	; 0x40
 800f63a:	d02e      	beq.n	800f69a <UART_SetConfig+0x8aa>
 800f63c:	e031      	b.n	800f6a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f63e:	f7fa f81f 	bl	8009680 <HAL_RCC_GetPCLK1Freq>
 800f642:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f644:	e033      	b.n	800f6ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f646:	f7fa f831 	bl	80096ac <HAL_RCC_GetPCLK2Freq>
 800f64a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f64c:	e02f      	b.n	800f6ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f64e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f652:	4618      	mov	r0, r3
 800f654:	f7fb ffe0 	bl	800b618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f65c:	e027      	b.n	800f6ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f65e:	f107 0318 	add.w	r3, r7, #24
 800f662:	4618      	mov	r0, r3
 800f664:	f7fc f92c 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f66c:	e01f      	b.n	800f6ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f66e:	4b2d      	ldr	r3, [pc, #180]	; (800f724 <UART_SetConfig+0x934>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f003 0320 	and.w	r3, r3, #32
 800f676:	2b00      	cmp	r3, #0
 800f678:	d009      	beq.n	800f68e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f67a:	4b2a      	ldr	r3, [pc, #168]	; (800f724 <UART_SetConfig+0x934>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	08db      	lsrs	r3, r3, #3
 800f680:	f003 0303 	and.w	r3, r3, #3
 800f684:	4a24      	ldr	r2, [pc, #144]	; (800f718 <UART_SetConfig+0x928>)
 800f686:	fa22 f303 	lsr.w	r3, r2, r3
 800f68a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f68c:	e00f      	b.n	800f6ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f68e:	4b22      	ldr	r3, [pc, #136]	; (800f718 <UART_SetConfig+0x928>)
 800f690:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f692:	e00c      	b.n	800f6ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f694:	4b21      	ldr	r3, [pc, #132]	; (800f71c <UART_SetConfig+0x92c>)
 800f696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f698:	e009      	b.n	800f6ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f69a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6a0:	e005      	b.n	800f6ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f6ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	f000 80e7 	beq.w	800f884 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ba:	4a19      	ldr	r2, [pc, #100]	; (800f720 <UART_SetConfig+0x930>)
 800f6bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6c8:	005a      	lsls	r2, r3, #1
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	685b      	ldr	r3, [r3, #4]
 800f6ce:	085b      	lsrs	r3, r3, #1
 800f6d0:	441a      	add	r2, r3
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	685b      	ldr	r3, [r3, #4]
 800f6d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6de:	2b0f      	cmp	r3, #15
 800f6e0:	d916      	bls.n	800f710 <UART_SetConfig+0x920>
 800f6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6e8:	d212      	bcs.n	800f710 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	f023 030f 	bic.w	r3, r3, #15
 800f6f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f6:	085b      	lsrs	r3, r3, #1
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	f003 0307 	and.w	r3, r3, #7
 800f6fe:	b29a      	uxth	r2, r3
 800f700:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f702:	4313      	orrs	r3, r2
 800f704:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f70c:	60da      	str	r2, [r3, #12]
 800f70e:	e0b9      	b.n	800f884 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f710:	2301      	movs	r3, #1
 800f712:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f716:	e0b5      	b.n	800f884 <UART_SetConfig+0xa94>
 800f718:	03d09000 	.word	0x03d09000
 800f71c:	003d0900 	.word	0x003d0900
 800f720:	08010f40 	.word	0x08010f40
 800f724:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f728:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f72c:	2b20      	cmp	r3, #32
 800f72e:	dc49      	bgt.n	800f7c4 <UART_SetConfig+0x9d4>
 800f730:	2b00      	cmp	r3, #0
 800f732:	db7c      	blt.n	800f82e <UART_SetConfig+0xa3e>
 800f734:	2b20      	cmp	r3, #32
 800f736:	d87a      	bhi.n	800f82e <UART_SetConfig+0xa3e>
 800f738:	a201      	add	r2, pc, #4	; (adr r2, 800f740 <UART_SetConfig+0x950>)
 800f73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f73e:	bf00      	nop
 800f740:	0800f7cb 	.word	0x0800f7cb
 800f744:	0800f7d3 	.word	0x0800f7d3
 800f748:	0800f82f 	.word	0x0800f82f
 800f74c:	0800f82f 	.word	0x0800f82f
 800f750:	0800f7db 	.word	0x0800f7db
 800f754:	0800f82f 	.word	0x0800f82f
 800f758:	0800f82f 	.word	0x0800f82f
 800f75c:	0800f82f 	.word	0x0800f82f
 800f760:	0800f7eb 	.word	0x0800f7eb
 800f764:	0800f82f 	.word	0x0800f82f
 800f768:	0800f82f 	.word	0x0800f82f
 800f76c:	0800f82f 	.word	0x0800f82f
 800f770:	0800f82f 	.word	0x0800f82f
 800f774:	0800f82f 	.word	0x0800f82f
 800f778:	0800f82f 	.word	0x0800f82f
 800f77c:	0800f82f 	.word	0x0800f82f
 800f780:	0800f7fb 	.word	0x0800f7fb
 800f784:	0800f82f 	.word	0x0800f82f
 800f788:	0800f82f 	.word	0x0800f82f
 800f78c:	0800f82f 	.word	0x0800f82f
 800f790:	0800f82f 	.word	0x0800f82f
 800f794:	0800f82f 	.word	0x0800f82f
 800f798:	0800f82f 	.word	0x0800f82f
 800f79c:	0800f82f 	.word	0x0800f82f
 800f7a0:	0800f82f 	.word	0x0800f82f
 800f7a4:	0800f82f 	.word	0x0800f82f
 800f7a8:	0800f82f 	.word	0x0800f82f
 800f7ac:	0800f82f 	.word	0x0800f82f
 800f7b0:	0800f82f 	.word	0x0800f82f
 800f7b4:	0800f82f 	.word	0x0800f82f
 800f7b8:	0800f82f 	.word	0x0800f82f
 800f7bc:	0800f82f 	.word	0x0800f82f
 800f7c0:	0800f821 	.word	0x0800f821
 800f7c4:	2b40      	cmp	r3, #64	; 0x40
 800f7c6:	d02e      	beq.n	800f826 <UART_SetConfig+0xa36>
 800f7c8:	e031      	b.n	800f82e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f7ca:	f7f9 ff59 	bl	8009680 <HAL_RCC_GetPCLK1Freq>
 800f7ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f7d0:	e033      	b.n	800f83a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f7d2:	f7f9 ff6b 	bl	80096ac <HAL_RCC_GetPCLK2Freq>
 800f7d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f7d8:	e02f      	b.n	800f83a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f7da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fb ff1a 	bl	800b618 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7e8:	e027      	b.n	800f83a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7ea:	f107 0318 	add.w	r3, r7, #24
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fc f866 	bl	800b8c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7f8:	e01f      	b.n	800f83a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f7fa:	4b2d      	ldr	r3, [pc, #180]	; (800f8b0 <UART_SetConfig+0xac0>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f003 0320 	and.w	r3, r3, #32
 800f802:	2b00      	cmp	r3, #0
 800f804:	d009      	beq.n	800f81a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f806:	4b2a      	ldr	r3, [pc, #168]	; (800f8b0 <UART_SetConfig+0xac0>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	08db      	lsrs	r3, r3, #3
 800f80c:	f003 0303 	and.w	r3, r3, #3
 800f810:	4a28      	ldr	r2, [pc, #160]	; (800f8b4 <UART_SetConfig+0xac4>)
 800f812:	fa22 f303 	lsr.w	r3, r2, r3
 800f816:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f818:	e00f      	b.n	800f83a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f81a:	4b26      	ldr	r3, [pc, #152]	; (800f8b4 <UART_SetConfig+0xac4>)
 800f81c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f81e:	e00c      	b.n	800f83a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f820:	4b25      	ldr	r3, [pc, #148]	; (800f8b8 <UART_SetConfig+0xac8>)
 800f822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f824:	e009      	b.n	800f83a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f82c:	e005      	b.n	800f83a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f82e:	2300      	movs	r3, #0
 800f830:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f832:	2301      	movs	r3, #1
 800f834:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f838:	bf00      	nop
    }

    if (pclk != 0U)
 800f83a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d021      	beq.n	800f884 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f844:	4a1d      	ldr	r2, [pc, #116]	; (800f8bc <UART_SetConfig+0xacc>)
 800f846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f84a:	461a      	mov	r2, r3
 800f84c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f84e:	fbb3 f2f2 	udiv	r2, r3, r2
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	085b      	lsrs	r3, r3, #1
 800f858:	441a      	add	r2, r3
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f862:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f866:	2b0f      	cmp	r3, #15
 800f868:	d909      	bls.n	800f87e <UART_SetConfig+0xa8e>
 800f86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f86c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f870:	d205      	bcs.n	800f87e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f874:	b29a      	uxth	r2, r3
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	60da      	str	r2, [r3, #12]
 800f87c:	e002      	b.n	800f884 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f87e:	2301      	movs	r3, #1
 800f880:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	2201      	movs	r2, #1
 800f888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	2201      	movs	r2, #1
 800f890:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	2200      	movs	r2, #0
 800f898:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	2200      	movs	r2, #0
 800f89e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f8a0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3748      	adds	r7, #72	; 0x48
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f8ae:	bf00      	nop
 800f8b0:	58024400 	.word	0x58024400
 800f8b4:	03d09000 	.word	0x03d09000
 800f8b8:	003d0900 	.word	0x003d0900
 800f8bc:	08010f40 	.word	0x08010f40

0800f8c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8cc:	f003 0308 	and.w	r3, r3, #8
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d00a      	beq.n	800f8ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	685b      	ldr	r3, [r3, #4]
 800f8da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	430a      	orrs	r2, r1
 800f8e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8ee:	f003 0301 	and.w	r3, r3, #1
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00a      	beq.n	800f90c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	685b      	ldr	r3, [r3, #4]
 800f8fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	430a      	orrs	r2, r1
 800f90a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f910:	f003 0302 	and.w	r3, r3, #2
 800f914:	2b00      	cmp	r3, #0
 800f916:	d00a      	beq.n	800f92e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	430a      	orrs	r2, r1
 800f92c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f932:	f003 0304 	and.w	r3, r3, #4
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00a      	beq.n	800f950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	430a      	orrs	r2, r1
 800f94e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f954:	f003 0310 	and.w	r3, r3, #16
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d00a      	beq.n	800f972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	689b      	ldr	r3, [r3, #8]
 800f962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	430a      	orrs	r2, r1
 800f970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f976:	f003 0320 	and.w	r3, r3, #32
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00a      	beq.n	800f994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	430a      	orrs	r2, r1
 800f992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d01a      	beq.n	800f9d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	430a      	orrs	r2, r1
 800f9b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f9be:	d10a      	bne.n	800f9d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	430a      	orrs	r2, r1
 800f9d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d00a      	beq.n	800f9f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	430a      	orrs	r2, r1
 800f9f6:	605a      	str	r2, [r3, #4]
  }
}
 800f9f8:	bf00      	nop
 800f9fa:	370c      	adds	r7, #12
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr

0800fa04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b098      	sub	sp, #96	; 0x60
 800fa08:	af02      	add	r7, sp, #8
 800fa0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa14:	f7f2 ff02 	bl	800281c <HAL_GetTick>
 800fa18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	f003 0308 	and.w	r3, r3, #8
 800fa24:	2b08      	cmp	r3, #8
 800fa26:	d12f      	bne.n	800fa88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fa2c:	9300      	str	r3, [sp, #0]
 800fa2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa30:	2200      	movs	r2, #0
 800fa32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 f88e 	bl	800fb58 <UART_WaitOnFlagUntilTimeout>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d022      	beq.n	800fa88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4a:	e853 3f00 	ldrex	r3, [r3]
 800fa4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fa50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa56:	653b      	str	r3, [r7, #80]	; 0x50
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa60:	647b      	str	r3, [r7, #68]	; 0x44
 800fa62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa68:	e841 2300 	strex	r3, r2, [r1]
 800fa6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fa6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d1e6      	bne.n	800fa42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2220      	movs	r2, #32
 800fa78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa84:	2303      	movs	r3, #3
 800fa86:	e063      	b.n	800fb50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f003 0304 	and.w	r3, r3, #4
 800fa92:	2b04      	cmp	r3, #4
 800fa94:	d149      	bne.n	800fb2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fa9a:	9300      	str	r3, [sp, #0]
 800fa9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa9e:	2200      	movs	r2, #0
 800faa0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f000 f857 	bl	800fb58 <UART_WaitOnFlagUntilTimeout>
 800faaa:	4603      	mov	r3, r0
 800faac:	2b00      	cmp	r3, #0
 800faae:	d03c      	beq.n	800fb2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab8:	e853 3f00 	ldrex	r3, [r3]
 800fabc:	623b      	str	r3, [r7, #32]
   return(result);
 800fabe:	6a3b      	ldr	r3, [r7, #32]
 800fac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	461a      	mov	r2, r3
 800facc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800face:	633b      	str	r3, [r7, #48]	; 0x30
 800fad0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fad6:	e841 2300 	strex	r3, r2, [r1]
 800fada:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d1e6      	bne.n	800fab0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	3308      	adds	r3, #8
 800fae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	e853 3f00 	ldrex	r3, [r3]
 800faf0:	60fb      	str	r3, [r7, #12]
   return(result);
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f023 0301 	bic.w	r3, r3, #1
 800faf8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	3308      	adds	r3, #8
 800fb00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb02:	61fa      	str	r2, [r7, #28]
 800fb04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb06:	69b9      	ldr	r1, [r7, #24]
 800fb08:	69fa      	ldr	r2, [r7, #28]
 800fb0a:	e841 2300 	strex	r3, r2, [r1]
 800fb0e:	617b      	str	r3, [r7, #20]
   return(result);
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d1e5      	bne.n	800fae2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2220      	movs	r2, #32
 800fb1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2200      	movs	r2, #0
 800fb22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb26:	2303      	movs	r3, #3
 800fb28:	e012      	b.n	800fb50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2220      	movs	r2, #32
 800fb2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2220      	movs	r2, #32
 800fb36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2200      	movs	r2, #0
 800fb44:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fb4e:	2300      	movs	r3, #0
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3758      	adds	r7, #88	; 0x58
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	60f8      	str	r0, [r7, #12]
 800fb60:	60b9      	str	r1, [r7, #8]
 800fb62:	603b      	str	r3, [r7, #0]
 800fb64:	4613      	mov	r3, r2
 800fb66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb68:	e04f      	b.n	800fc0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb6a:	69bb      	ldr	r3, [r7, #24]
 800fb6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb70:	d04b      	beq.n	800fc0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb72:	f7f2 fe53 	bl	800281c <HAL_GetTick>
 800fb76:	4602      	mov	r2, r0
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	69ba      	ldr	r2, [r7, #24]
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d302      	bcc.n	800fb88 <UART_WaitOnFlagUntilTimeout+0x30>
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d101      	bne.n	800fb8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fb88:	2303      	movs	r3, #3
 800fb8a:	e04e      	b.n	800fc2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f003 0304 	and.w	r3, r3, #4
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d037      	beq.n	800fc0a <UART_WaitOnFlagUntilTimeout+0xb2>
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	2b80      	cmp	r3, #128	; 0x80
 800fb9e:	d034      	beq.n	800fc0a <UART_WaitOnFlagUntilTimeout+0xb2>
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	2b40      	cmp	r3, #64	; 0x40
 800fba4:	d031      	beq.n	800fc0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	69db      	ldr	r3, [r3, #28]
 800fbac:	f003 0308 	and.w	r3, r3, #8
 800fbb0:	2b08      	cmp	r3, #8
 800fbb2:	d110      	bne.n	800fbd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	2208      	movs	r2, #8
 800fbba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fbbc:	68f8      	ldr	r0, [r7, #12]
 800fbbe:	f000 f95b 	bl	800fe78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	2208      	movs	r2, #8
 800fbc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	e029      	b.n	800fc2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	69db      	ldr	r3, [r3, #28]
 800fbdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fbe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fbe4:	d111      	bne.n	800fc0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fbee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fbf0:	68f8      	ldr	r0, [r7, #12]
 800fbf2:	f000 f941 	bl	800fe78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	2220      	movs	r2, #32
 800fbfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2200      	movs	r2, #0
 800fc02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fc06:	2303      	movs	r3, #3
 800fc08:	e00f      	b.n	800fc2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	69da      	ldr	r2, [r3, #28]
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	4013      	ands	r3, r2
 800fc14:	68ba      	ldr	r2, [r7, #8]
 800fc16:	429a      	cmp	r2, r3
 800fc18:	bf0c      	ite	eq
 800fc1a:	2301      	moveq	r3, #1
 800fc1c:	2300      	movne	r3, #0
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	461a      	mov	r2, r3
 800fc22:	79fb      	ldrb	r3, [r7, #7]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d0a0      	beq.n	800fb6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fc28:	2300      	movs	r3, #0
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3710      	adds	r7, #16
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
	...

0800fc34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b0a3      	sub	sp, #140	; 0x8c
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	4613      	mov	r3, r2
 800fc40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	68ba      	ldr	r2, [r7, #8]
 800fc46:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	88fa      	ldrh	r2, [r7, #6]
 800fc4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	88fa      	ldrh	r2, [r7, #6]
 800fc54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	689b      	ldr	r3, [r3, #8]
 800fc62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc66:	d10e      	bne.n	800fc86 <UART_Start_Receive_IT+0x52>
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	691b      	ldr	r3, [r3, #16]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d105      	bne.n	800fc7c <UART_Start_Receive_IT+0x48>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fc76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc7a:	e02d      	b.n	800fcd8 <UART_Start_Receive_IT+0xa4>
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	22ff      	movs	r2, #255	; 0xff
 800fc80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc84:	e028      	b.n	800fcd8 <UART_Start_Receive_IT+0xa4>
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	689b      	ldr	r3, [r3, #8]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d10d      	bne.n	800fcaa <UART_Start_Receive_IT+0x76>
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	691b      	ldr	r3, [r3, #16]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d104      	bne.n	800fca0 <UART_Start_Receive_IT+0x6c>
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	22ff      	movs	r2, #255	; 0xff
 800fc9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc9e:	e01b      	b.n	800fcd8 <UART_Start_Receive_IT+0xa4>
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	227f      	movs	r2, #127	; 0x7f
 800fca4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fca8:	e016      	b.n	800fcd8 <UART_Start_Receive_IT+0xa4>
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	689b      	ldr	r3, [r3, #8]
 800fcae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fcb2:	d10d      	bne.n	800fcd0 <UART_Start_Receive_IT+0x9c>
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	691b      	ldr	r3, [r3, #16]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d104      	bne.n	800fcc6 <UART_Start_Receive_IT+0x92>
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	227f      	movs	r2, #127	; 0x7f
 800fcc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcc4:	e008      	b.n	800fcd8 <UART_Start_Receive_IT+0xa4>
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	223f      	movs	r2, #63	; 0x3f
 800fcca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcce:	e003      	b.n	800fcd8 <UART_Start_Receive_IT+0xa4>
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2222      	movs	r2, #34	; 0x22
 800fce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	3308      	adds	r3, #8
 800fcee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcf2:	e853 3f00 	ldrex	r3, [r3]
 800fcf6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fcf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fcfa:	f043 0301 	orr.w	r3, r3, #1
 800fcfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	3308      	adds	r3, #8
 800fd08:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fd0c:	673a      	str	r2, [r7, #112]	; 0x70
 800fd0e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd10:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fd12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fd14:	e841 2300 	strex	r3, r2, [r1]
 800fd18:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fd1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d1e3      	bne.n	800fce8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fd28:	d14f      	bne.n	800fdca <UART_Start_Receive_IT+0x196>
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd30:	88fa      	ldrh	r2, [r7, #6]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d349      	bcc.n	800fdca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	689b      	ldr	r3, [r3, #8]
 800fd3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd3e:	d107      	bne.n	800fd50 <UART_Start_Receive_IT+0x11c>
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	691b      	ldr	r3, [r3, #16]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d103      	bne.n	800fd50 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	4a47      	ldr	r2, [pc, #284]	; (800fe68 <UART_Start_Receive_IT+0x234>)
 800fd4c:	675a      	str	r2, [r3, #116]	; 0x74
 800fd4e:	e002      	b.n	800fd56 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	4a46      	ldr	r2, [pc, #280]	; (800fe6c <UART_Start_Receive_IT+0x238>)
 800fd54:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	691b      	ldr	r3, [r3, #16]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d01a      	beq.n	800fd94 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd66:	e853 3f00 	ldrex	r3, [r3]
 800fd6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fd6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fd80:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd82:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fd86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd88:	e841 2300 	strex	r3, r2, [r1]
 800fd8c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fd8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d1e4      	bne.n	800fd5e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	3308      	adds	r3, #8
 800fd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd9e:	e853 3f00 	ldrex	r3, [r3]
 800fda2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fdaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	3308      	adds	r3, #8
 800fdb2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fdb4:	64ba      	str	r2, [r7, #72]	; 0x48
 800fdb6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fdba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdbc:	e841 2300 	strex	r3, r2, [r1]
 800fdc0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fdc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d1e5      	bne.n	800fd94 <UART_Start_Receive_IT+0x160>
 800fdc8:	e046      	b.n	800fe58 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	689b      	ldr	r3, [r3, #8]
 800fdce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdd2:	d107      	bne.n	800fde4 <UART_Start_Receive_IT+0x1b0>
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	691b      	ldr	r3, [r3, #16]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d103      	bne.n	800fde4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	4a24      	ldr	r2, [pc, #144]	; (800fe70 <UART_Start_Receive_IT+0x23c>)
 800fde0:	675a      	str	r2, [r3, #116]	; 0x74
 800fde2:	e002      	b.n	800fdea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	4a23      	ldr	r2, [pc, #140]	; (800fe74 <UART_Start_Receive_IT+0x240>)
 800fde8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	691b      	ldr	r3, [r3, #16]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d019      	beq.n	800fe26 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdfa:	e853 3f00 	ldrex	r3, [r3]
 800fdfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe02:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fe06:	677b      	str	r3, [r7, #116]	; 0x74
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe10:	637b      	str	r3, [r7, #52]	; 0x34
 800fe12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe18:	e841 2300 	strex	r3, r2, [r1]
 800fe1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fe1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d1e6      	bne.n	800fdf2 <UART_Start_Receive_IT+0x1be>
 800fe24:	e018      	b.n	800fe58 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	e853 3f00 	ldrex	r3, [r3]
 800fe32:	613b      	str	r3, [r7, #16]
   return(result);
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	f043 0320 	orr.w	r3, r3, #32
 800fe3a:	67bb      	str	r3, [r7, #120]	; 0x78
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	461a      	mov	r2, r3
 800fe42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe44:	623b      	str	r3, [r7, #32]
 800fe46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe48:	69f9      	ldr	r1, [r7, #28]
 800fe4a:	6a3a      	ldr	r2, [r7, #32]
 800fe4c:	e841 2300 	strex	r3, r2, [r1]
 800fe50:	61bb      	str	r3, [r7, #24]
   return(result);
 800fe52:	69bb      	ldr	r3, [r7, #24]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d1e6      	bne.n	800fe26 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fe58:	2300      	movs	r3, #0
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	378c      	adds	r7, #140	; 0x8c
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe64:	4770      	bx	lr
 800fe66:	bf00      	nop
 800fe68:	08010699 	.word	0x08010699
 800fe6c:	08010339 	.word	0x08010339
 800fe70:	08010181 	.word	0x08010181
 800fe74:	0800ffc9 	.word	0x0800ffc9

0800fe78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b095      	sub	sp, #84	; 0x54
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe88:	e853 3f00 	ldrex	r3, [r3]
 800fe8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fe8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe94:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe9e:	643b      	str	r3, [r7, #64]	; 0x40
 800fea0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fea2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fea6:	e841 2300 	strex	r3, r2, [r1]
 800feaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800feac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d1e6      	bne.n	800fe80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	3308      	adds	r3, #8
 800feb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feba:	6a3b      	ldr	r3, [r7, #32]
 800febc:	e853 3f00 	ldrex	r3, [r3]
 800fec0:	61fb      	str	r3, [r7, #28]
   return(result);
 800fec2:	69fa      	ldr	r2, [r7, #28]
 800fec4:	4b1e      	ldr	r3, [pc, #120]	; (800ff40 <UART_EndRxTransfer+0xc8>)
 800fec6:	4013      	ands	r3, r2
 800fec8:	64bb      	str	r3, [r7, #72]	; 0x48
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	3308      	adds	r3, #8
 800fed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fed4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800feda:	e841 2300 	strex	r3, r2, [r1]
 800fede:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d1e5      	bne.n	800feb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feea:	2b01      	cmp	r3, #1
 800feec:	d118      	bne.n	800ff20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	e853 3f00 	ldrex	r3, [r3]
 800fefa:	60bb      	str	r3, [r7, #8]
   return(result);
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	f023 0310 	bic.w	r3, r3, #16
 800ff02:	647b      	str	r3, [r7, #68]	; 0x44
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	461a      	mov	r2, r3
 800ff0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff0c:	61bb      	str	r3, [r7, #24]
 800ff0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff10:	6979      	ldr	r1, [r7, #20]
 800ff12:	69ba      	ldr	r2, [r7, #24]
 800ff14:	e841 2300 	strex	r3, r2, [r1]
 800ff18:	613b      	str	r3, [r7, #16]
   return(result);
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d1e6      	bne.n	800feee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2220      	movs	r2, #32
 800ff24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2200      	movs	r2, #0
 800ff32:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ff34:	bf00      	nop
 800ff36:	3754      	adds	r7, #84	; 0x54
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr
 800ff40:	effffffe 	.word	0xeffffffe

0800ff44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	2200      	movs	r2, #0
 800ff56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f7fe ff2e 	bl	800edc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff68:	bf00      	nop
 800ff6a:	3710      	adds	r7, #16
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b088      	sub	sp, #32
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	e853 3f00 	ldrex	r3, [r3]
 800ff84:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff8c:	61fb      	str	r3, [r7, #28]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	461a      	mov	r2, r3
 800ff94:	69fb      	ldr	r3, [r7, #28]
 800ff96:	61bb      	str	r3, [r7, #24]
 800ff98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff9a:	6979      	ldr	r1, [r7, #20]
 800ff9c:	69ba      	ldr	r2, [r7, #24]
 800ff9e:	e841 2300 	strex	r3, r2, [r1]
 800ffa2:	613b      	str	r3, [r7, #16]
   return(result);
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d1e6      	bne.n	800ff78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2220      	movs	r2, #32
 800ffae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f7fe fef9 	bl	800edb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ffbe:	bf00      	nop
 800ffc0:	3720      	adds	r7, #32
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
	...

0800ffc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b09c      	sub	sp, #112	; 0x70
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffd6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffe0:	2b22      	cmp	r3, #34	; 0x22
 800ffe2:	f040 80be 	bne.w	8010162 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fff0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fff4:	b2d9      	uxtb	r1, r3
 800fff6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fffa:	b2da      	uxtb	r2, r3
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010000:	400a      	ands	r2, r1
 8010002:	b2d2      	uxtb	r2, r2
 8010004:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801000a:	1c5a      	adds	r2, r3, #1
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010016:	b29b      	uxth	r3, r3
 8010018:	3b01      	subs	r3, #1
 801001a:	b29a      	uxth	r2, r3
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010028:	b29b      	uxth	r3, r3
 801002a:	2b00      	cmp	r3, #0
 801002c:	f040 80a1 	bne.w	8010172 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010038:	e853 3f00 	ldrex	r3, [r3]
 801003c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801003e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010040:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010044:	66bb      	str	r3, [r7, #104]	; 0x68
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	461a      	mov	r2, r3
 801004c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801004e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010050:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010052:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010056:	e841 2300 	strex	r3, r2, [r1]
 801005a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801005c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801005e:	2b00      	cmp	r3, #0
 8010060:	d1e6      	bne.n	8010030 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	3308      	adds	r3, #8
 8010068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801006a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006c:	e853 3f00 	ldrex	r3, [r3]
 8010070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010074:	f023 0301 	bic.w	r3, r3, #1
 8010078:	667b      	str	r3, [r7, #100]	; 0x64
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	3308      	adds	r3, #8
 8010080:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010082:	647a      	str	r2, [r7, #68]	; 0x44
 8010084:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801008a:	e841 2300 	strex	r3, r2, [r1]
 801008e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010092:	2b00      	cmp	r3, #0
 8010094:	d1e5      	bne.n	8010062 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2220      	movs	r2, #32
 801009a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2200      	movs	r2, #0
 80100a2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2200      	movs	r2, #0
 80100a8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	4a33      	ldr	r2, [pc, #204]	; (801017c <UART_RxISR_8BIT+0x1b4>)
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d01f      	beq.n	80100f4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d018      	beq.n	80100f4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ca:	e853 3f00 	ldrex	r3, [r3]
 80100ce:	623b      	str	r3, [r7, #32]
   return(result);
 80100d0:	6a3b      	ldr	r3, [r7, #32]
 80100d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80100d6:	663b      	str	r3, [r7, #96]	; 0x60
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	461a      	mov	r2, r3
 80100de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80100e0:	633b      	str	r3, [r7, #48]	; 0x30
 80100e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100e8:	e841 2300 	strex	r3, r2, [r1]
 80100ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80100ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d1e6      	bne.n	80100c2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	d12e      	bne.n	801015a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2200      	movs	r2, #0
 8010100:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	e853 3f00 	ldrex	r3, [r3]
 801010e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f023 0310 	bic.w	r3, r3, #16
 8010116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	461a      	mov	r2, r3
 801011e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010120:	61fb      	str	r3, [r7, #28]
 8010122:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010124:	69b9      	ldr	r1, [r7, #24]
 8010126:	69fa      	ldr	r2, [r7, #28]
 8010128:	e841 2300 	strex	r3, r2, [r1]
 801012c:	617b      	str	r3, [r7, #20]
   return(result);
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d1e6      	bne.n	8010102 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	69db      	ldr	r3, [r3, #28]
 801013a:	f003 0310 	and.w	r3, r3, #16
 801013e:	2b10      	cmp	r3, #16
 8010140:	d103      	bne.n	801014a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	2210      	movs	r2, #16
 8010148:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010150:	4619      	mov	r1, r3
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7fe fe40 	bl	800edd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010158:	e00b      	b.n	8010172 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f7f0 fdc2 	bl	8000ce4 <HAL_UART_RxCpltCallback>
}
 8010160:	e007      	b.n	8010172 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	699a      	ldr	r2, [r3, #24]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f042 0208 	orr.w	r2, r2, #8
 8010170:	619a      	str	r2, [r3, #24]
}
 8010172:	bf00      	nop
 8010174:	3770      	adds	r7, #112	; 0x70
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	58000c00 	.word	0x58000c00

08010180 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b09c      	sub	sp, #112	; 0x70
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801018e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010198:	2b22      	cmp	r3, #34	; 0x22
 801019a:	f040 80be 	bne.w	801031a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101ac:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80101ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80101b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80101b6:	4013      	ands	r3, r2
 80101b8:	b29a      	uxth	r2, r3
 80101ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101c2:	1c9a      	adds	r2, r3, #2
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80101ce:	b29b      	uxth	r3, r3
 80101d0:	3b01      	subs	r3, #1
 80101d2:	b29a      	uxth	r2, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	f040 80a1 	bne.w	801032a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101f0:	e853 3f00 	ldrex	r3, [r3]
 80101f4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80101f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80101fc:	667b      	str	r3, [r7, #100]	; 0x64
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	461a      	mov	r2, r3
 8010204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010206:	657b      	str	r3, [r7, #84]	; 0x54
 8010208:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801020a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801020c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801020e:	e841 2300 	strex	r3, r2, [r1]
 8010212:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010216:	2b00      	cmp	r3, #0
 8010218:	d1e6      	bne.n	80101e8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	3308      	adds	r3, #8
 8010220:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010224:	e853 3f00 	ldrex	r3, [r3]
 8010228:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801022a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801022c:	f023 0301 	bic.w	r3, r3, #1
 8010230:	663b      	str	r3, [r7, #96]	; 0x60
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	3308      	adds	r3, #8
 8010238:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801023a:	643a      	str	r2, [r7, #64]	; 0x40
 801023c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801023e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010242:	e841 2300 	strex	r3, r2, [r1]
 8010246:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1e5      	bne.n	801021a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2220      	movs	r2, #32
 8010252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2200      	movs	r2, #0
 801025a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2200      	movs	r2, #0
 8010260:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	4a33      	ldr	r2, [pc, #204]	; (8010334 <UART_RxISR_16BIT+0x1b4>)
 8010268:	4293      	cmp	r3, r2
 801026a:	d01f      	beq.n	80102ac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010276:	2b00      	cmp	r3, #0
 8010278:	d018      	beq.n	80102ac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010280:	6a3b      	ldr	r3, [r7, #32]
 8010282:	e853 3f00 	ldrex	r3, [r3]
 8010286:	61fb      	str	r3, [r7, #28]
   return(result);
 8010288:	69fb      	ldr	r3, [r7, #28]
 801028a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801028e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	461a      	mov	r2, r3
 8010296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010298:	62fb      	str	r3, [r7, #44]	; 0x2c
 801029a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801029c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801029e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102a0:	e841 2300 	strex	r3, r2, [r1]
 80102a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80102a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d1e6      	bne.n	801027a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102b0:	2b01      	cmp	r3, #1
 80102b2:	d12e      	bne.n	8010312 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2200      	movs	r2, #0
 80102b8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	e853 3f00 	ldrex	r3, [r3]
 80102c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	f023 0310 	bic.w	r3, r3, #16
 80102ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	461a      	mov	r2, r3
 80102d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102d8:	61bb      	str	r3, [r7, #24]
 80102da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102dc:	6979      	ldr	r1, [r7, #20]
 80102de:	69ba      	ldr	r2, [r7, #24]
 80102e0:	e841 2300 	strex	r3, r2, [r1]
 80102e4:	613b      	str	r3, [r7, #16]
   return(result);
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d1e6      	bne.n	80102ba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	69db      	ldr	r3, [r3, #28]
 80102f2:	f003 0310 	and.w	r3, r3, #16
 80102f6:	2b10      	cmp	r3, #16
 80102f8:	d103      	bne.n	8010302 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	2210      	movs	r2, #16
 8010300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010308:	4619      	mov	r1, r3
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f7fe fd64 	bl	800edd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010310:	e00b      	b.n	801032a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f7f0 fce6 	bl	8000ce4 <HAL_UART_RxCpltCallback>
}
 8010318:	e007      	b.n	801032a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	699a      	ldr	r2, [r3, #24]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	f042 0208 	orr.w	r2, r2, #8
 8010328:	619a      	str	r2, [r3, #24]
}
 801032a:	bf00      	nop
 801032c:	3770      	adds	r7, #112	; 0x70
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	58000c00 	.word	0x58000c00

08010338 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b0ac      	sub	sp, #176	; 0xb0
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010346:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	69db      	ldr	r3, [r3, #28]
 8010350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	689b      	ldr	r3, [r3, #8]
 8010364:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801036e:	2b22      	cmp	r3, #34	; 0x22
 8010370:	f040 8180 	bne.w	8010674 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801037a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801037e:	e123      	b.n	80105c8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010386:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801038a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801038e:	b2d9      	uxtb	r1, r3
 8010390:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8010394:	b2da      	uxtb	r2, r3
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801039a:	400a      	ands	r2, r1
 801039c:	b2d2      	uxtb	r2, r2
 801039e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103a4:	1c5a      	adds	r2, r3, #1
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	3b01      	subs	r3, #1
 80103b4:	b29a      	uxth	r2, r3
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	69db      	ldr	r3, [r3, #28]
 80103c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80103c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103ca:	f003 0307 	and.w	r3, r3, #7
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d053      	beq.n	801047a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80103d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103d6:	f003 0301 	and.w	r3, r3, #1
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d011      	beq.n	8010402 <UART_RxISR_8BIT_FIFOEN+0xca>
 80103de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80103e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d00b      	beq.n	8010402 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	2201      	movs	r2, #1
 80103f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103f8:	f043 0201 	orr.w	r2, r3, #1
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010406:	f003 0302 	and.w	r3, r3, #2
 801040a:	2b00      	cmp	r3, #0
 801040c:	d011      	beq.n	8010432 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801040e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010412:	f003 0301 	and.w	r3, r3, #1
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00b      	beq.n	8010432 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	2202      	movs	r2, #2
 8010420:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010428:	f043 0204 	orr.w	r2, r3, #4
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010436:	f003 0304 	and.w	r3, r3, #4
 801043a:	2b00      	cmp	r3, #0
 801043c:	d011      	beq.n	8010462 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801043e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010442:	f003 0301 	and.w	r3, r3, #1
 8010446:	2b00      	cmp	r3, #0
 8010448:	d00b      	beq.n	8010462 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2204      	movs	r2, #4
 8010450:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010458:	f043 0202 	orr.w	r2, r3, #2
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010468:	2b00      	cmp	r3, #0
 801046a:	d006      	beq.n	801047a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f7fe fca9 	bl	800edc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2200      	movs	r2, #0
 8010476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010480:	b29b      	uxth	r3, r3
 8010482:	2b00      	cmp	r3, #0
 8010484:	f040 80a0 	bne.w	80105c8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801048e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010490:	e853 3f00 	ldrex	r3, [r3]
 8010494:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8010496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801049c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	461a      	mov	r2, r3
 80104a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80104aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80104ac:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80104b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80104b2:	e841 2300 	strex	r3, r2, [r1]
 80104b6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80104b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d1e4      	bne.n	8010488 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	3308      	adds	r3, #8
 80104c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104c8:	e853 3f00 	ldrex	r3, [r3]
 80104cc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80104ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104d0:	4b6e      	ldr	r3, [pc, #440]	; (801068c <UART_RxISR_8BIT_FIFOEN+0x354>)
 80104d2:	4013      	ands	r3, r2
 80104d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	3308      	adds	r3, #8
 80104de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80104e2:	66ba      	str	r2, [r7, #104]	; 0x68
 80104e4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104e6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80104e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80104ea:	e841 2300 	strex	r3, r2, [r1]
 80104ee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80104f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d1e3      	bne.n	80104be <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2220      	movs	r2, #32
 80104fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2200      	movs	r2, #0
 8010502:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2200      	movs	r2, #0
 8010508:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	4a60      	ldr	r2, [pc, #384]	; (8010690 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d021      	beq.n	8010558 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801051e:	2b00      	cmp	r3, #0
 8010520:	d01a      	beq.n	8010558 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801052a:	e853 3f00 	ldrex	r3, [r3]
 801052e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010532:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	461a      	mov	r2, r3
 8010540:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010544:	657b      	str	r3, [r7, #84]	; 0x54
 8010546:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010548:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801054a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801054c:	e841 2300 	strex	r3, r2, [r1]
 8010550:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010554:	2b00      	cmp	r3, #0
 8010556:	d1e4      	bne.n	8010522 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801055c:	2b01      	cmp	r3, #1
 801055e:	d130      	bne.n	80105c2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801056c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801056e:	e853 3f00 	ldrex	r3, [r3]
 8010572:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010576:	f023 0310 	bic.w	r3, r3, #16
 801057a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	461a      	mov	r2, r3
 8010584:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010588:	643b      	str	r3, [r7, #64]	; 0x40
 801058a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801058c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801058e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010590:	e841 2300 	strex	r3, r2, [r1]
 8010594:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010598:	2b00      	cmp	r3, #0
 801059a:	d1e4      	bne.n	8010566 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	69db      	ldr	r3, [r3, #28]
 80105a2:	f003 0310 	and.w	r3, r3, #16
 80105a6:	2b10      	cmp	r3, #16
 80105a8:	d103      	bne.n	80105b2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	2210      	movs	r2, #16
 80105b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80105b8:	4619      	mov	r1, r3
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f7fe fc0c 	bl	800edd8 <HAL_UARTEx_RxEventCallback>
 80105c0:	e002      	b.n	80105c8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f7f0 fb8e 	bl	8000ce4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80105c8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d006      	beq.n	80105de <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80105d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80105d4:	f003 0320 	and.w	r3, r3, #32
 80105d8:	2b00      	cmp	r3, #0
 80105da:	f47f aed1 	bne.w	8010380 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80105e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d049      	beq.n	8010684 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80105f6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d242      	bcs.n	8010684 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	3308      	adds	r3, #8
 8010604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010606:	6a3b      	ldr	r3, [r7, #32]
 8010608:	e853 3f00 	ldrex	r3, [r3]
 801060c:	61fb      	str	r3, [r7, #28]
   return(result);
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	3308      	adds	r3, #8
 801061e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010622:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010624:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801062a:	e841 2300 	strex	r3, r2, [r1]
 801062e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010632:	2b00      	cmp	r3, #0
 8010634:	d1e3      	bne.n	80105fe <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	4a16      	ldr	r2, [pc, #88]	; (8010694 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801063a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	e853 3f00 	ldrex	r3, [r3]
 8010648:	60bb      	str	r3, [r7, #8]
   return(result);
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	f043 0320 	orr.w	r3, r3, #32
 8010650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	461a      	mov	r2, r3
 801065a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801065e:	61bb      	str	r3, [r7, #24]
 8010660:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010662:	6979      	ldr	r1, [r7, #20]
 8010664:	69ba      	ldr	r2, [r7, #24]
 8010666:	e841 2300 	strex	r3, r2, [r1]
 801066a:	613b      	str	r3, [r7, #16]
   return(result);
 801066c:	693b      	ldr	r3, [r7, #16]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d1e4      	bne.n	801063c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010672:	e007      	b.n	8010684 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	699a      	ldr	r2, [r3, #24]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	f042 0208 	orr.w	r2, r2, #8
 8010682:	619a      	str	r2, [r3, #24]
}
 8010684:	bf00      	nop
 8010686:	37b0      	adds	r7, #176	; 0xb0
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}
 801068c:	effffffe 	.word	0xeffffffe
 8010690:	58000c00 	.word	0x58000c00
 8010694:	0800ffc9 	.word	0x0800ffc9

08010698 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b0ae      	sub	sp, #184	; 0xb8
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80106a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	69db      	ldr	r3, [r3, #28]
 80106b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	689b      	ldr	r3, [r3, #8]
 80106c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106ce:	2b22      	cmp	r3, #34	; 0x22
 80106d0:	f040 8184 	bne.w	80109dc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80106da:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80106de:	e127      	b.n	8010930 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80106f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80106f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80106fa:	4013      	ands	r3, r2
 80106fc:	b29a      	uxth	r2, r3
 80106fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010702:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010708:	1c9a      	adds	r2, r3, #2
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010714:	b29b      	uxth	r3, r3
 8010716:	3b01      	subs	r3, #1
 8010718:	b29a      	uxth	r2, r3
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	69db      	ldr	r3, [r3, #28]
 8010726:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801072a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801072e:	f003 0307 	and.w	r3, r3, #7
 8010732:	2b00      	cmp	r3, #0
 8010734:	d053      	beq.n	80107de <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801073a:	f003 0301 	and.w	r3, r3, #1
 801073e:	2b00      	cmp	r3, #0
 8010740:	d011      	beq.n	8010766 <UART_RxISR_16BIT_FIFOEN+0xce>
 8010742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801074a:	2b00      	cmp	r3, #0
 801074c:	d00b      	beq.n	8010766 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	2201      	movs	r2, #1
 8010754:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801075c:	f043 0201 	orr.w	r2, r3, #1
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010766:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801076a:	f003 0302 	and.w	r3, r3, #2
 801076e:	2b00      	cmp	r3, #0
 8010770:	d011      	beq.n	8010796 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010776:	f003 0301 	and.w	r3, r3, #1
 801077a:	2b00      	cmp	r3, #0
 801077c:	d00b      	beq.n	8010796 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	2202      	movs	r2, #2
 8010784:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801078c:	f043 0204 	orr.w	r2, r3, #4
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801079a:	f003 0304 	and.w	r3, r3, #4
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d011      	beq.n	80107c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80107a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80107a6:	f003 0301 	and.w	r3, r3, #1
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d00b      	beq.n	80107c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	2204      	movs	r2, #4
 80107b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107bc:	f043 0202 	orr.w	r2, r3, #2
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d006      	beq.n	80107de <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f7fe faf7 	bl	800edc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	f040 80a2 	bne.w	8010930 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80107f4:	e853 3f00 	ldrex	r3, [r3]
 80107f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80107fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	461a      	mov	r2, r3
 801080a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801080e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010812:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010814:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010816:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801081a:	e841 2300 	strex	r3, r2, [r1]
 801081e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010822:	2b00      	cmp	r3, #0
 8010824:	d1e2      	bne.n	80107ec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	3308      	adds	r3, #8
 801082c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010830:	e853 3f00 	ldrex	r3, [r3]
 8010834:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010836:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010838:	4b6e      	ldr	r3, [pc, #440]	; (80109f4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801083a:	4013      	ands	r3, r2
 801083c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	3308      	adds	r3, #8
 8010846:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801084a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801084c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801084e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010850:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010852:	e841 2300 	strex	r3, r2, [r1]
 8010856:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801085a:	2b00      	cmp	r3, #0
 801085c:	d1e3      	bne.n	8010826 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2220      	movs	r2, #32
 8010862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2200      	movs	r2, #0
 801086a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2200      	movs	r2, #0
 8010870:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4a60      	ldr	r2, [pc, #384]	; (80109f8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010878:	4293      	cmp	r3, r2
 801087a:	d021      	beq.n	80108c0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	685b      	ldr	r3, [r3, #4]
 8010882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010886:	2b00      	cmp	r3, #0
 8010888:	d01a      	beq.n	80108c0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010892:	e853 3f00 	ldrex	r3, [r3]
 8010896:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801089a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801089e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	461a      	mov	r2, r3
 80108a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80108ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80108b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80108b4:	e841 2300 	strex	r3, r2, [r1]
 80108b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80108ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d1e4      	bne.n	801088a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108c4:	2b01      	cmp	r3, #1
 80108c6:	d130      	bne.n	801092a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2200      	movs	r2, #0
 80108cc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d6:	e853 3f00 	ldrex	r3, [r3]
 80108da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80108dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108de:	f023 0310 	bic.w	r3, r3, #16
 80108e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	461a      	mov	r2, r3
 80108ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108f0:	647b      	str	r3, [r7, #68]	; 0x44
 80108f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80108f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108f8:	e841 2300 	strex	r3, r2, [r1]
 80108fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80108fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010900:	2b00      	cmp	r3, #0
 8010902:	d1e4      	bne.n	80108ce <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	69db      	ldr	r3, [r3, #28]
 801090a:	f003 0310 	and.w	r3, r3, #16
 801090e:	2b10      	cmp	r3, #16
 8010910:	d103      	bne.n	801091a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	2210      	movs	r2, #16
 8010918:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010920:	4619      	mov	r1, r3
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f7fe fa58 	bl	800edd8 <HAL_UARTEx_RxEventCallback>
 8010928:	e002      	b.n	8010930 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f7f0 f9da 	bl	8000ce4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010930:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010934:	2b00      	cmp	r3, #0
 8010936:	d006      	beq.n	8010946 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010938:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801093c:	f003 0320 	and.w	r3, r3, #32
 8010940:	2b00      	cmp	r3, #0
 8010942:	f47f aecd 	bne.w	80106e0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801094c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010950:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010954:	2b00      	cmp	r3, #0
 8010956:	d049      	beq.n	80109ec <UART_RxISR_16BIT_FIFOEN+0x354>
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801095e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8010962:	429a      	cmp	r2, r3
 8010964:	d242      	bcs.n	80109ec <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	3308      	adds	r3, #8
 801096c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010970:	e853 3f00 	ldrex	r3, [r3]
 8010974:	623b      	str	r3, [r7, #32]
   return(result);
 8010976:	6a3b      	ldr	r3, [r7, #32]
 8010978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801097c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	3308      	adds	r3, #8
 8010986:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801098a:	633a      	str	r2, [r7, #48]	; 0x30
 801098c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801098e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010992:	e841 2300 	strex	r3, r2, [r1]
 8010996:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801099a:	2b00      	cmp	r3, #0
 801099c:	d1e3      	bne.n	8010966 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	4a16      	ldr	r2, [pc, #88]	; (80109fc <UART_RxISR_16BIT_FIFOEN+0x364>)
 80109a2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	e853 3f00 	ldrex	r3, [r3]
 80109b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	f043 0320 	orr.w	r3, r3, #32
 80109b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	461a      	mov	r2, r3
 80109c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80109c6:	61fb      	str	r3, [r7, #28]
 80109c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ca:	69b9      	ldr	r1, [r7, #24]
 80109cc:	69fa      	ldr	r2, [r7, #28]
 80109ce:	e841 2300 	strex	r3, r2, [r1]
 80109d2:	617b      	str	r3, [r7, #20]
   return(result);
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d1e4      	bne.n	80109a4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80109da:	e007      	b.n	80109ec <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	699a      	ldr	r2, [r3, #24]
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	f042 0208 	orr.w	r2, r2, #8
 80109ea:	619a      	str	r2, [r3, #24]
}
 80109ec:	bf00      	nop
 80109ee:	37b8      	adds	r7, #184	; 0xb8
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}
 80109f4:	effffffe 	.word	0xeffffffe
 80109f8:	58000c00 	.word	0x58000c00
 80109fc:	08010181 	.word	0x08010181

08010a00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010a00:	b480      	push	{r7}
 8010a02:	b083      	sub	sp, #12
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010a08:	bf00      	nop
 8010a0a:	370c      	adds	r7, #12
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a12:	4770      	bx	lr

08010a14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010a14:	b480      	push	{r7}
 8010a16:	b083      	sub	sp, #12
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010a1c:	bf00      	nop
 8010a1e:	370c      	adds	r7, #12
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr

08010a28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010a30:	bf00      	nop
 8010a32:	370c      	adds	r7, #12
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr

08010a3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b085      	sub	sp, #20
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	d101      	bne.n	8010a52 <HAL_UARTEx_DisableFifoMode+0x16>
 8010a4e:	2302      	movs	r3, #2
 8010a50:	e027      	b.n	8010aa2 <HAL_UARTEx_DisableFifoMode+0x66>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2201      	movs	r2, #1
 8010a56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2224      	movs	r2, #36	; 0x24
 8010a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	681a      	ldr	r2, [r3, #0]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f022 0201 	bic.w	r2, r2, #1
 8010a78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010a80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2200      	movs	r2, #0
 8010a86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	68fa      	ldr	r2, [r7, #12]
 8010a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2220      	movs	r2, #32
 8010a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010aa0:	2300      	movs	r3, #0
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3714      	adds	r7, #20
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aac:	4770      	bx	lr

08010aae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b084      	sub	sp, #16
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
 8010ab6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010abe:	2b01      	cmp	r3, #1
 8010ac0:	d101      	bne.n	8010ac6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010ac2:	2302      	movs	r3, #2
 8010ac4:	e02d      	b.n	8010b22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2201      	movs	r2, #1
 8010aca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2224      	movs	r2, #36	; 0x24
 8010ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	681a      	ldr	r2, [r3, #0]
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f022 0201 	bic.w	r2, r2, #1
 8010aec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	689b      	ldr	r3, [r3, #8]
 8010af4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	683a      	ldr	r2, [r7, #0]
 8010afe:	430a      	orrs	r2, r1
 8010b00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f000 f850 	bl	8010ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2220      	movs	r2, #32
 8010b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010b20:	2300      	movs	r3, #0
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3710      	adds	r7, #16
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}

08010b2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b084      	sub	sp, #16
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	6078      	str	r0, [r7, #4]
 8010b32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d101      	bne.n	8010b42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010b3e:	2302      	movs	r3, #2
 8010b40:	e02d      	b.n	8010b9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2201      	movs	r2, #1
 8010b46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2224      	movs	r2, #36	; 0x24
 8010b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f022 0201 	bic.w	r2, r2, #1
 8010b68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	689b      	ldr	r3, [r3, #8]
 8010b70:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	683a      	ldr	r2, [r7, #0]
 8010b7a:	430a      	orrs	r2, r1
 8010b7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 f812 	bl	8010ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	68fa      	ldr	r2, [r7, #12]
 8010b8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2220      	movs	r2, #32
 8010b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2200      	movs	r2, #0
 8010b98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010b9c:	2300      	movs	r3, #0
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3710      	adds	r7, #16
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
	...

08010ba8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b085      	sub	sp, #20
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d108      	bne.n	8010bca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2201      	movs	r2, #1
 8010bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2201      	movs	r2, #1
 8010bc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010bc8:	e031      	b.n	8010c2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010bca:	2310      	movs	r3, #16
 8010bcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010bce:	2310      	movs	r3, #16
 8010bd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	689b      	ldr	r3, [r3, #8]
 8010bd8:	0e5b      	lsrs	r3, r3, #25
 8010bda:	b2db      	uxtb	r3, r3
 8010bdc:	f003 0307 	and.w	r3, r3, #7
 8010be0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	689b      	ldr	r3, [r3, #8]
 8010be8:	0f5b      	lsrs	r3, r3, #29
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	f003 0307 	and.w	r3, r3, #7
 8010bf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010bf2:	7bbb      	ldrb	r3, [r7, #14]
 8010bf4:	7b3a      	ldrb	r2, [r7, #12]
 8010bf6:	4911      	ldr	r1, [pc, #68]	; (8010c3c <UARTEx_SetNbDataToProcess+0x94>)
 8010bf8:	5c8a      	ldrb	r2, [r1, r2]
 8010bfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010bfe:	7b3a      	ldrb	r2, [r7, #12]
 8010c00:	490f      	ldr	r1, [pc, #60]	; (8010c40 <UARTEx_SetNbDataToProcess+0x98>)
 8010c02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c04:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c10:	7bfb      	ldrb	r3, [r7, #15]
 8010c12:	7b7a      	ldrb	r2, [r7, #13]
 8010c14:	4909      	ldr	r1, [pc, #36]	; (8010c3c <UARTEx_SetNbDataToProcess+0x94>)
 8010c16:	5c8a      	ldrb	r2, [r1, r2]
 8010c18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010c1c:	7b7a      	ldrb	r2, [r7, #13]
 8010c1e:	4908      	ldr	r1, [pc, #32]	; (8010c40 <UARTEx_SetNbDataToProcess+0x98>)
 8010c20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c22:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010c2e:	bf00      	nop
 8010c30:	3714      	adds	r7, #20
 8010c32:	46bd      	mov	sp, r7
 8010c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c38:	4770      	bx	lr
 8010c3a:	bf00      	nop
 8010c3c:	08010f58 	.word	0x08010f58
 8010c40:	08010f60 	.word	0x08010f60

08010c44 <malloc>:
 8010c44:	4b02      	ldr	r3, [pc, #8]	; (8010c50 <malloc+0xc>)
 8010c46:	4601      	mov	r1, r0
 8010c48:	6818      	ldr	r0, [r3, #0]
 8010c4a:	f000 b82b 	b.w	8010ca4 <_malloc_r>
 8010c4e:	bf00      	nop
 8010c50:	240000e4 	.word	0x240000e4

08010c54 <free>:
 8010c54:	4b02      	ldr	r3, [pc, #8]	; (8010c60 <free+0xc>)
 8010c56:	4601      	mov	r1, r0
 8010c58:	6818      	ldr	r0, [r3, #0]
 8010c5a:	f000 b901 	b.w	8010e60 <_free_r>
 8010c5e:	bf00      	nop
 8010c60:	240000e4 	.word	0x240000e4

08010c64 <sbrk_aligned>:
 8010c64:	b570      	push	{r4, r5, r6, lr}
 8010c66:	4e0e      	ldr	r6, [pc, #56]	; (8010ca0 <sbrk_aligned+0x3c>)
 8010c68:	460c      	mov	r4, r1
 8010c6a:	6831      	ldr	r1, [r6, #0]
 8010c6c:	4605      	mov	r5, r0
 8010c6e:	b911      	cbnz	r1, 8010c76 <sbrk_aligned+0x12>
 8010c70:	f000 f8ac 	bl	8010dcc <_sbrk_r>
 8010c74:	6030      	str	r0, [r6, #0]
 8010c76:	4621      	mov	r1, r4
 8010c78:	4628      	mov	r0, r5
 8010c7a:	f000 f8a7 	bl	8010dcc <_sbrk_r>
 8010c7e:	1c43      	adds	r3, r0, #1
 8010c80:	d00a      	beq.n	8010c98 <sbrk_aligned+0x34>
 8010c82:	1cc4      	adds	r4, r0, #3
 8010c84:	f024 0403 	bic.w	r4, r4, #3
 8010c88:	42a0      	cmp	r0, r4
 8010c8a:	d007      	beq.n	8010c9c <sbrk_aligned+0x38>
 8010c8c:	1a21      	subs	r1, r4, r0
 8010c8e:	4628      	mov	r0, r5
 8010c90:	f000 f89c 	bl	8010dcc <_sbrk_r>
 8010c94:	3001      	adds	r0, #1
 8010c96:	d101      	bne.n	8010c9c <sbrk_aligned+0x38>
 8010c98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	bd70      	pop	{r4, r5, r6, pc}
 8010ca0:	240006a4 	.word	0x240006a4

08010ca4 <_malloc_r>:
 8010ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ca8:	1ccd      	adds	r5, r1, #3
 8010caa:	f025 0503 	bic.w	r5, r5, #3
 8010cae:	3508      	adds	r5, #8
 8010cb0:	2d0c      	cmp	r5, #12
 8010cb2:	bf38      	it	cc
 8010cb4:	250c      	movcc	r5, #12
 8010cb6:	2d00      	cmp	r5, #0
 8010cb8:	4607      	mov	r7, r0
 8010cba:	db01      	blt.n	8010cc0 <_malloc_r+0x1c>
 8010cbc:	42a9      	cmp	r1, r5
 8010cbe:	d905      	bls.n	8010ccc <_malloc_r+0x28>
 8010cc0:	230c      	movs	r3, #12
 8010cc2:	603b      	str	r3, [r7, #0]
 8010cc4:	2600      	movs	r6, #0
 8010cc6:	4630      	mov	r0, r6
 8010cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ccc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010da0 <_malloc_r+0xfc>
 8010cd0:	f000 f868 	bl	8010da4 <__malloc_lock>
 8010cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8010cd8:	461c      	mov	r4, r3
 8010cda:	bb5c      	cbnz	r4, 8010d34 <_malloc_r+0x90>
 8010cdc:	4629      	mov	r1, r5
 8010cde:	4638      	mov	r0, r7
 8010ce0:	f7ff ffc0 	bl	8010c64 <sbrk_aligned>
 8010ce4:	1c43      	adds	r3, r0, #1
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	d155      	bne.n	8010d96 <_malloc_r+0xf2>
 8010cea:	f8d8 4000 	ldr.w	r4, [r8]
 8010cee:	4626      	mov	r6, r4
 8010cf0:	2e00      	cmp	r6, #0
 8010cf2:	d145      	bne.n	8010d80 <_malloc_r+0xdc>
 8010cf4:	2c00      	cmp	r4, #0
 8010cf6:	d048      	beq.n	8010d8a <_malloc_r+0xe6>
 8010cf8:	6823      	ldr	r3, [r4, #0]
 8010cfa:	4631      	mov	r1, r6
 8010cfc:	4638      	mov	r0, r7
 8010cfe:	eb04 0903 	add.w	r9, r4, r3
 8010d02:	f000 f863 	bl	8010dcc <_sbrk_r>
 8010d06:	4581      	cmp	r9, r0
 8010d08:	d13f      	bne.n	8010d8a <_malloc_r+0xe6>
 8010d0a:	6821      	ldr	r1, [r4, #0]
 8010d0c:	1a6d      	subs	r5, r5, r1
 8010d0e:	4629      	mov	r1, r5
 8010d10:	4638      	mov	r0, r7
 8010d12:	f7ff ffa7 	bl	8010c64 <sbrk_aligned>
 8010d16:	3001      	adds	r0, #1
 8010d18:	d037      	beq.n	8010d8a <_malloc_r+0xe6>
 8010d1a:	6823      	ldr	r3, [r4, #0]
 8010d1c:	442b      	add	r3, r5
 8010d1e:	6023      	str	r3, [r4, #0]
 8010d20:	f8d8 3000 	ldr.w	r3, [r8]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d038      	beq.n	8010d9a <_malloc_r+0xf6>
 8010d28:	685a      	ldr	r2, [r3, #4]
 8010d2a:	42a2      	cmp	r2, r4
 8010d2c:	d12b      	bne.n	8010d86 <_malloc_r+0xe2>
 8010d2e:	2200      	movs	r2, #0
 8010d30:	605a      	str	r2, [r3, #4]
 8010d32:	e00f      	b.n	8010d54 <_malloc_r+0xb0>
 8010d34:	6822      	ldr	r2, [r4, #0]
 8010d36:	1b52      	subs	r2, r2, r5
 8010d38:	d41f      	bmi.n	8010d7a <_malloc_r+0xd6>
 8010d3a:	2a0b      	cmp	r2, #11
 8010d3c:	d917      	bls.n	8010d6e <_malloc_r+0xca>
 8010d3e:	1961      	adds	r1, r4, r5
 8010d40:	42a3      	cmp	r3, r4
 8010d42:	6025      	str	r5, [r4, #0]
 8010d44:	bf18      	it	ne
 8010d46:	6059      	strne	r1, [r3, #4]
 8010d48:	6863      	ldr	r3, [r4, #4]
 8010d4a:	bf08      	it	eq
 8010d4c:	f8c8 1000 	streq.w	r1, [r8]
 8010d50:	5162      	str	r2, [r4, r5]
 8010d52:	604b      	str	r3, [r1, #4]
 8010d54:	4638      	mov	r0, r7
 8010d56:	f104 060b 	add.w	r6, r4, #11
 8010d5a:	f000 f829 	bl	8010db0 <__malloc_unlock>
 8010d5e:	f026 0607 	bic.w	r6, r6, #7
 8010d62:	1d23      	adds	r3, r4, #4
 8010d64:	1af2      	subs	r2, r6, r3
 8010d66:	d0ae      	beq.n	8010cc6 <_malloc_r+0x22>
 8010d68:	1b9b      	subs	r3, r3, r6
 8010d6a:	50a3      	str	r3, [r4, r2]
 8010d6c:	e7ab      	b.n	8010cc6 <_malloc_r+0x22>
 8010d6e:	42a3      	cmp	r3, r4
 8010d70:	6862      	ldr	r2, [r4, #4]
 8010d72:	d1dd      	bne.n	8010d30 <_malloc_r+0x8c>
 8010d74:	f8c8 2000 	str.w	r2, [r8]
 8010d78:	e7ec      	b.n	8010d54 <_malloc_r+0xb0>
 8010d7a:	4623      	mov	r3, r4
 8010d7c:	6864      	ldr	r4, [r4, #4]
 8010d7e:	e7ac      	b.n	8010cda <_malloc_r+0x36>
 8010d80:	4634      	mov	r4, r6
 8010d82:	6876      	ldr	r6, [r6, #4]
 8010d84:	e7b4      	b.n	8010cf0 <_malloc_r+0x4c>
 8010d86:	4613      	mov	r3, r2
 8010d88:	e7cc      	b.n	8010d24 <_malloc_r+0x80>
 8010d8a:	230c      	movs	r3, #12
 8010d8c:	603b      	str	r3, [r7, #0]
 8010d8e:	4638      	mov	r0, r7
 8010d90:	f000 f80e 	bl	8010db0 <__malloc_unlock>
 8010d94:	e797      	b.n	8010cc6 <_malloc_r+0x22>
 8010d96:	6025      	str	r5, [r4, #0]
 8010d98:	e7dc      	b.n	8010d54 <_malloc_r+0xb0>
 8010d9a:	605b      	str	r3, [r3, #4]
 8010d9c:	deff      	udf	#255	; 0xff
 8010d9e:	bf00      	nop
 8010da0:	240006a0 	.word	0x240006a0

08010da4 <__malloc_lock>:
 8010da4:	4801      	ldr	r0, [pc, #4]	; (8010dac <__malloc_lock+0x8>)
 8010da6:	f000 b84b 	b.w	8010e40 <__retarget_lock_acquire_recursive>
 8010daa:	bf00      	nop
 8010dac:	240007e0 	.word	0x240007e0

08010db0 <__malloc_unlock>:
 8010db0:	4801      	ldr	r0, [pc, #4]	; (8010db8 <__malloc_unlock+0x8>)
 8010db2:	f000 b846 	b.w	8010e42 <__retarget_lock_release_recursive>
 8010db6:	bf00      	nop
 8010db8:	240007e0 	.word	0x240007e0

08010dbc <memset>:
 8010dbc:	4402      	add	r2, r0
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	4293      	cmp	r3, r2
 8010dc2:	d100      	bne.n	8010dc6 <memset+0xa>
 8010dc4:	4770      	bx	lr
 8010dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8010dca:	e7f9      	b.n	8010dc0 <memset+0x4>

08010dcc <_sbrk_r>:
 8010dcc:	b538      	push	{r3, r4, r5, lr}
 8010dce:	4d06      	ldr	r5, [pc, #24]	; (8010de8 <_sbrk_r+0x1c>)
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	4604      	mov	r4, r0
 8010dd4:	4608      	mov	r0, r1
 8010dd6:	602b      	str	r3, [r5, #0]
 8010dd8:	f7f1 fbb2 	bl	8002540 <_sbrk>
 8010ddc:	1c43      	adds	r3, r0, #1
 8010dde:	d102      	bne.n	8010de6 <_sbrk_r+0x1a>
 8010de0:	682b      	ldr	r3, [r5, #0]
 8010de2:	b103      	cbz	r3, 8010de6 <_sbrk_r+0x1a>
 8010de4:	6023      	str	r3, [r4, #0]
 8010de6:	bd38      	pop	{r3, r4, r5, pc}
 8010de8:	240007e4 	.word	0x240007e4

08010dec <__errno>:
 8010dec:	4b01      	ldr	r3, [pc, #4]	; (8010df4 <__errno+0x8>)
 8010dee:	6818      	ldr	r0, [r3, #0]
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	240000e4 	.word	0x240000e4

08010df8 <__libc_init_array>:
 8010df8:	b570      	push	{r4, r5, r6, lr}
 8010dfa:	4d0d      	ldr	r5, [pc, #52]	; (8010e30 <__libc_init_array+0x38>)
 8010dfc:	4c0d      	ldr	r4, [pc, #52]	; (8010e34 <__libc_init_array+0x3c>)
 8010dfe:	1b64      	subs	r4, r4, r5
 8010e00:	10a4      	asrs	r4, r4, #2
 8010e02:	2600      	movs	r6, #0
 8010e04:	42a6      	cmp	r6, r4
 8010e06:	d109      	bne.n	8010e1c <__libc_init_array+0x24>
 8010e08:	4d0b      	ldr	r5, [pc, #44]	; (8010e38 <__libc_init_array+0x40>)
 8010e0a:	4c0c      	ldr	r4, [pc, #48]	; (8010e3c <__libc_init_array+0x44>)
 8010e0c:	f000 f874 	bl	8010ef8 <_init>
 8010e10:	1b64      	subs	r4, r4, r5
 8010e12:	10a4      	asrs	r4, r4, #2
 8010e14:	2600      	movs	r6, #0
 8010e16:	42a6      	cmp	r6, r4
 8010e18:	d105      	bne.n	8010e26 <__libc_init_array+0x2e>
 8010e1a:	bd70      	pop	{r4, r5, r6, pc}
 8010e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e20:	4798      	blx	r3
 8010e22:	3601      	adds	r6, #1
 8010e24:	e7ee      	b.n	8010e04 <__libc_init_array+0xc>
 8010e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e2a:	4798      	blx	r3
 8010e2c:	3601      	adds	r6, #1
 8010e2e:	e7f2      	b.n	8010e16 <__libc_init_array+0x1e>
 8010e30:	08010f70 	.word	0x08010f70
 8010e34:	08010f70 	.word	0x08010f70
 8010e38:	08010f70 	.word	0x08010f70
 8010e3c:	08010f74 	.word	0x08010f74

08010e40 <__retarget_lock_acquire_recursive>:
 8010e40:	4770      	bx	lr

08010e42 <__retarget_lock_release_recursive>:
 8010e42:	4770      	bx	lr

08010e44 <memcpy>:
 8010e44:	440a      	add	r2, r1
 8010e46:	4291      	cmp	r1, r2
 8010e48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010e4c:	d100      	bne.n	8010e50 <memcpy+0xc>
 8010e4e:	4770      	bx	lr
 8010e50:	b510      	push	{r4, lr}
 8010e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e5a:	4291      	cmp	r1, r2
 8010e5c:	d1f9      	bne.n	8010e52 <memcpy+0xe>
 8010e5e:	bd10      	pop	{r4, pc}

08010e60 <_free_r>:
 8010e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e62:	2900      	cmp	r1, #0
 8010e64:	d044      	beq.n	8010ef0 <_free_r+0x90>
 8010e66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e6a:	9001      	str	r0, [sp, #4]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	f1a1 0404 	sub.w	r4, r1, #4
 8010e72:	bfb8      	it	lt
 8010e74:	18e4      	addlt	r4, r4, r3
 8010e76:	f7ff ff95 	bl	8010da4 <__malloc_lock>
 8010e7a:	4a1e      	ldr	r2, [pc, #120]	; (8010ef4 <_free_r+0x94>)
 8010e7c:	9801      	ldr	r0, [sp, #4]
 8010e7e:	6813      	ldr	r3, [r2, #0]
 8010e80:	b933      	cbnz	r3, 8010e90 <_free_r+0x30>
 8010e82:	6063      	str	r3, [r4, #4]
 8010e84:	6014      	str	r4, [r2, #0]
 8010e86:	b003      	add	sp, #12
 8010e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e8c:	f7ff bf90 	b.w	8010db0 <__malloc_unlock>
 8010e90:	42a3      	cmp	r3, r4
 8010e92:	d908      	bls.n	8010ea6 <_free_r+0x46>
 8010e94:	6825      	ldr	r5, [r4, #0]
 8010e96:	1961      	adds	r1, r4, r5
 8010e98:	428b      	cmp	r3, r1
 8010e9a:	bf01      	itttt	eq
 8010e9c:	6819      	ldreq	r1, [r3, #0]
 8010e9e:	685b      	ldreq	r3, [r3, #4]
 8010ea0:	1949      	addeq	r1, r1, r5
 8010ea2:	6021      	streq	r1, [r4, #0]
 8010ea4:	e7ed      	b.n	8010e82 <_free_r+0x22>
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	685b      	ldr	r3, [r3, #4]
 8010eaa:	b10b      	cbz	r3, 8010eb0 <_free_r+0x50>
 8010eac:	42a3      	cmp	r3, r4
 8010eae:	d9fa      	bls.n	8010ea6 <_free_r+0x46>
 8010eb0:	6811      	ldr	r1, [r2, #0]
 8010eb2:	1855      	adds	r5, r2, r1
 8010eb4:	42a5      	cmp	r5, r4
 8010eb6:	d10b      	bne.n	8010ed0 <_free_r+0x70>
 8010eb8:	6824      	ldr	r4, [r4, #0]
 8010eba:	4421      	add	r1, r4
 8010ebc:	1854      	adds	r4, r2, r1
 8010ebe:	42a3      	cmp	r3, r4
 8010ec0:	6011      	str	r1, [r2, #0]
 8010ec2:	d1e0      	bne.n	8010e86 <_free_r+0x26>
 8010ec4:	681c      	ldr	r4, [r3, #0]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	6053      	str	r3, [r2, #4]
 8010eca:	440c      	add	r4, r1
 8010ecc:	6014      	str	r4, [r2, #0]
 8010ece:	e7da      	b.n	8010e86 <_free_r+0x26>
 8010ed0:	d902      	bls.n	8010ed8 <_free_r+0x78>
 8010ed2:	230c      	movs	r3, #12
 8010ed4:	6003      	str	r3, [r0, #0]
 8010ed6:	e7d6      	b.n	8010e86 <_free_r+0x26>
 8010ed8:	6825      	ldr	r5, [r4, #0]
 8010eda:	1961      	adds	r1, r4, r5
 8010edc:	428b      	cmp	r3, r1
 8010ede:	bf04      	itt	eq
 8010ee0:	6819      	ldreq	r1, [r3, #0]
 8010ee2:	685b      	ldreq	r3, [r3, #4]
 8010ee4:	6063      	str	r3, [r4, #4]
 8010ee6:	bf04      	itt	eq
 8010ee8:	1949      	addeq	r1, r1, r5
 8010eea:	6021      	streq	r1, [r4, #0]
 8010eec:	6054      	str	r4, [r2, #4]
 8010eee:	e7ca      	b.n	8010e86 <_free_r+0x26>
 8010ef0:	b003      	add	sp, #12
 8010ef2:	bd30      	pop	{r4, r5, pc}
 8010ef4:	240006a0 	.word	0x240006a0

08010ef8 <_init>:
 8010ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010efa:	bf00      	nop
 8010efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010efe:	bc08      	pop	{r3}
 8010f00:	469e      	mov	lr, r3
 8010f02:	4770      	bx	lr

08010f04 <_fini>:
 8010f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f06:	bf00      	nop
 8010f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f0a:	bc08      	pop	{r3}
 8010f0c:	469e      	mov	lr, r3
 8010f0e:	4770      	bx	lr
