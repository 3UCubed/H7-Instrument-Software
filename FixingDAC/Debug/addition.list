
addition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c68  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08010f00  08010f00  00020f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010f58  08010f58  00020f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010f60  08010f60  00020f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010f64  08010f64  00020f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000fc  24000000  08010f68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005b0  24000100  08011064  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240006b0  08011064  000306b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024b35  00000000  00000000  0003012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000038e7  00000000  00000000  00054c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c38  00000000  00000000  00058548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001ae0  00000000  00000000  0005a180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b66a  00000000  00000000  0005bc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025923  00000000  00000000  000972ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00180a11  00000000  00000000  000bcbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023d5fe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007d54  00000000  00000000  0023d650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000100 	.word	0x24000100
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010ee8 	.word	0x08010ee8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000104 	.word	0x24000104
 80002d4:	08010ee8 	.word	0x08010ee8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <poll_i2c_sensor>:
 * @brief function to poll individual i2c sensor
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8000612:	2300      	movs	r3, #0
 8000614:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b299      	uxth	r1, r3
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <poll_i2c_sensor+0x94>)
 8000628:	f007 fab2 	bl	8007b90 <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <poll_i2c_sensor+0x42>
		strcpy((char*) buf, "Error Tx\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <poll_i2c_sensor+0x98>)
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e022      	b.n	8000690 <poll_i2c_sensor+0x88>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b299      	uxth	r1, r3
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <poll_i2c_sensor+0x94>)
 800065c:	f007 fbb0 	bl	8007dc0 <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <poll_i2c_sensor+0x76>
			strcpy((char*) buf, "Error Rx\r\n");
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <poll_i2c_sensor+0x9c>)
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	c303      	stmia	r3!, {r0, r1}
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	3302      	adds	r3, #2
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e008      	b.n	8000690 <poll_i2c_sensor+0x88>
		} else {
			output = (int16_t) (buf[0] << 8);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	7a7a      	ldrb	r2, [r7, #9]
 800068a:	4313      	orrs	r3, r2
 800068c:	10db      	asrs	r3, r3, #3
 800068e:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8000690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	24000360 	.word	0x24000360
 80006a0:	08010f00 	.word	0x08010f00
 80006a4:	08010f0c 	.word	0x08010f0c

080006a8 <i2c>:
/**
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t* i2c() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa9 	bl	8000608 <poll_i2c_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006ba:	2394      	movs	r3, #148	; 0x94
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa3 	bl	8000608 <poll_i2c_sensor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006c6:	2392      	movs	r3, #146	; 0x92
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9d 	bl	8000608 <poll_i2c_sensor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006d2:	2396      	movs	r3, #150	; 0x96
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff97 	bl	8000608 <poll_i2c_sensor>
 80006da:	4603      	mov	r3, r0
 80006dc:	813b      	strh	r3, [r7, #8]

	int16_t *results = malloc(4 * sizeof(int16_t));
 80006de:	2008      	movs	r0, #8
 80006e0:	f010 fade 	bl	8010ca0 <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
	results[0] = output1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	89fa      	ldrh	r2, [r7, #14]
 80006ec:	801a      	strh	r2, [r3, #0]
	results[1] = output2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3302      	adds	r3, #2
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	801a      	strh	r2, [r3, #0]
	results[2] = output3;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	897a      	ldrh	r2, [r7, #10]
 80006fc:	801a      	strh	r2, [r3, #0]
	results[3] = output4;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	893a      	ldrh	r2, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
	return results;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <spi>:
 * @brief polls respective spi sensor and returns uint16_t value
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi) {
 8000710:	b084      	sub	sp, #16
 8000712:	b580      	push	{r7, lr}
 8000714:	b084      	sub	sp, #16
 8000716:	af00      	add	r7, sp, #0
 8000718:	f107 0c18 	add.w	ip, r7, #24
 800071c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi, (uint8_t*) spiRxBuffer, 1, 1);
 8000720:	1d39      	adds	r1, r7, #4
 8000722:	2301      	movs	r3, #1
 8000724:	2201      	movs	r2, #1
 8000726:	f107 0018 	add.w	r0, r7, #24
 800072a:	f00b fdfb 	bl	800c324 <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 8000732:	797b      	ldrb	r3, [r7, #5]
 8000734:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1 << 10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000740:	601a      	str	r2, [r3, #0]
	uint8_t *results = malloc(2 * sizeof(uint8_t));
 8000742:	2002      	movs	r0, #2
 8000744:	f010 faac 	bl	8010ca0 <malloc>
 8000748:	4603      	mov	r3, r0
 800074a:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	7bba      	ldrb	r2, [r7, #14]
 8000750:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	3301      	adds	r3, #1
 8000756:	7bfa      	ldrb	r2, [r7, #15]
 8000758:	701a      	strb	r2, [r3, #0]
	return results;
 800075a:	68bb      	ldr	r3, [r7, #8]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
	...

0800076c <set_erpa_sweep>:

/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep() {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <set_erpa_sweep+0x28>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <set_erpa_sweep+0x2c>)
 8000778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	4806      	ldr	r0, [pc, #24]	; (800079c <set_erpa_sweep+0x30>)
 8000782:	f003 ff36 	bl	80045f2 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000786:	2100      	movs	r1, #0
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <set_erpa_sweep+0x30>)
 800078a:	f003 fdce 	bl	800432a <HAL_DAC_Start>

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	24000084 	.word	0x24000084
 8000798:	24000000 	.word	0x24000000
 800079c:	240002d4 	.word	0x240002d4

080007a0 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

	uint16_t PC4 = ADC1Data[1]; 			// SWPmon --
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <erpa_adc+0x34>)
 80007a8:	885b      	ldrh	r3, [r3, #2]
 80007aa:	80fb      	strh	r3, [r7, #6]
	uint16_t PB0 = ADC1Data[5]; 	// TEMP1 -- verified doesn't need to change
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <erpa_adc+0x34>)
 80007ae:	895b      	ldrh	r3, [r3, #10]
 80007b0:	80bb      	strh	r3, [r7, #4]

	uint16_t *results = malloc(2 * sizeof(uint16_t));
 80007b2:	2004      	movs	r0, #4
 80007b4:	f010 fa74 	bl	8010ca0 <malloc>
 80007b8:	4603      	mov	r3, r0
 80007ba:	603b      	str	r3, [r7, #0]
	results[0] = PC4;
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	88fa      	ldrh	r2, [r7, #6]
 80007c0:	801a      	strh	r2, [r3, #0]
	results[1] = PB0;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	3302      	adds	r3, #2
 80007c6:	88ba      	ldrh	r2, [r7, #4]
 80007c8:	801a      	strh	r2, [r3, #0]

	return results;
 80007ca:	683b      	ldr	r3, [r7, #0]

}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	24000660 	.word	0x24000660

080007d8 <hk_adc1>:

uint16_t* hk_adc1() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[10];// BUSVmon -- verified doesn't need to change
 80007de:	4b24      	ldr	r3, [pc, #144]	; (8000870 <hk_adc1+0x98>)
 80007e0:	8a9b      	ldrh	r3, [r3, #20]
 80007e2:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[8];	// BUSImon -- verified doesn't need to change
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <hk_adc1+0x98>)
 80007e6:	8a1b      	ldrh	r3, [r3, #16]
 80007e8:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];		// 2v5mon -- verified doesn't need to change
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <hk_adc1+0x98>)
 80007ec:	899b      	ldrh	r3, [r3, #12]
 80007ee:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// n3v3mon --
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <hk_adc1+0x98>)
 80007f2:	8a5b      	ldrh	r3, [r3, #18]
 80007f4:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[2];		// n200v -- verified doesn't need to change
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <hk_adc1+0x98>)
 80007f8:	889b      	ldrh	r3, [r3, #4]
 80007fa:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3];				// n800v --
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <hk_adc1+0x98>)
 80007fe:	88db      	ldrh	r3, [r3, #6]
 8000800:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// 5vmon --
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <hk_adc1+0x98>)
 8000804:	89db      	ldrh	r3, [r3, #14]
 8000806:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];		// 15vmon -- verified doesn't need to change
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <hk_adc1+0x98>)
 800080a:	891b      	ldrh	r3, [r3, #8]
 800080c:	813b      	strh	r3, [r7, #8]
	uint16_t PA6 = ADC1Data[0];				// 5vrefmon --
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <hk_adc1+0x98>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	80fb      	strh	r3, [r7, #6]

	uint16_t *results = malloc(9 * sizeof(uint16_t));
 8000814:	2012      	movs	r0, #18
 8000816:	f010 fa43 	bl	8010ca0 <malloc>
 800081a:	4603      	mov	r3, r0
 800081c:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	8afa      	ldrh	r2, [r7, #22]
 8000822:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	3302      	adds	r3, #2
 8000828:	8aba      	ldrh	r2, [r7, #20]
 800082a:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	3304      	adds	r3, #4
 8000830:	8a7a      	ldrh	r2, [r7, #18]
 8000832:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	3306      	adds	r3, #6
 8000838:	8a3a      	ldrh	r2, [r7, #16]
 800083a:	801a      	strh	r2, [r3, #0]
	results[4] = PB1;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3308      	adds	r3, #8
 8000840:	89fa      	ldrh	r2, [r7, #14]
 8000842:	801a      	strh	r2, [r3, #0]
	results[5] = PA7;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	330a      	adds	r3, #10
 8000848:	89ba      	ldrh	r2, [r7, #12]
 800084a:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	330c      	adds	r3, #12
 8000850:	897a      	ldrh	r2, [r7, #10]
 8000852:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	330e      	adds	r3, #14
 8000858:	893a      	ldrh	r2, [r7, #8]
 800085a:	801a      	strh	r2, [r3, #0]
	results[8] = PA6;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	3310      	adds	r3, #16
 8000860:	88fa      	ldrh	r2, [r7, #6]
 8000862:	801a      	strh	r2, [r3, #0]

	return results;
 8000864:	683b      	ldr	r3, [r7, #0]

}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	24000660 	.word	0x24000660

08000874 <hk_adc3>:

uint16_t* hk_adc3() {
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[0];
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <hk_adc3+0x50>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[1];
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <hk_adc3+0x50>)
 8000882:	885b      	ldrh	r3, [r3, #2]
 8000884:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3Data[2]; 		// n5vmon --
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <hk_adc3+0x50>)
 8000888:	889b      	ldrh	r3, [r3, #4]
 800088a:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3Data[3];			// 3v3mon --
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <hk_adc3+0x50>)
 800088e:	88db      	ldrh	r3, [r3, #6]
 8000890:	813b      	strh	r3, [r7, #8]

	uint16_t *results = malloc(4 * sizeof(uint16_t));
 8000892:	2008      	movs	r0, #8
 8000894:	f010 fa04 	bl	8010ca0 <malloc>
 8000898:	4603      	mov	r3, r0
 800089a:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	89fa      	ldrh	r2, [r7, #14]
 80008a0:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3302      	adds	r3, #2
 80008a6:	89ba      	ldrh	r2, [r7, #12]
 80008a8:	801a      	strh	r2, [r3, #0]
	results[2] = PC2;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3304      	adds	r3, #4
 80008ae:	897a      	ldrh	r2, [r7, #10]
 80008b0:	801a      	strh	r2, [r3, #0]
	results[3] = PC3;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3306      	adds	r3, #6
 80008b6:	893a      	ldrh	r2, [r7, #8]
 80008b8:	801a      	strh	r2, [r3, #0]

	return results;
 80008ba:	687b      	ldr	r3, [r7, #4]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	24000680 	.word	0x24000680

080008c8 <send_erpa_packet>:
 * @brief sends erpa packet via UART
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t *erpa_spi, uint16_t *erpa_adc_results) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  			// ERPA SYNC 0xAA MSB
 80008d2:	23aa      	movs	r3, #170	; 0xaa
 80008d4:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  			// ERPA SYNC 0xAA LSB
 80008d6:	23aa      	movs	r3, #170	; 0xaa
 80008d8:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 				// ERPA SEQ # MSB
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <send_erpa_packet+0x90>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	0a1b      	lsrs	r3, r3, #8
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          				// ERPA SEQ # MSB
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <send_erpa_packet+0x90>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((0 & 0xFF00) >> 8); 	  						// ENDmon MSB
 80008ee:	2300      	movs	r3, #0
 80008f0:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (0 & 0xFF);               					// ENDmon LSB
 80008f2:	2300      	movs	r3, #0
 80008f4:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[0] & 0xFF00) >> 8);    // SWP Monitored MSB
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[0] & 0xFF);             // SWP Monitored LSB
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[1] & 0xFF00) >> 8);    // TEMPURATURE 1 MSB
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	3302      	adds	r3, #2
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	b29b      	uxth	r3, r3
 8000914:	b2db      	uxtb	r3, r3
 8000916:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[1] & 0xFF);             // TEMPURATURE 1 LSB
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	3302      	adds	r3, #2
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     				// TEMPURATURE 2 MSB
 8000922:	2300      	movs	r3, #0
 8000924:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    			// TEMPURATURE 2 LSB
 8000926:	2300      	movs	r3, #0
 8000928:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];									// ERPA eADC MSB
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];									// ERPA eADC LSB
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	785b      	ldrb	r3, [r3, #1]
 8000934:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000936:	f107 0108 	add.w	r1, r7, #8
 800093a:	2364      	movs	r3, #100	; 0x64
 800093c:	220e      	movs	r2, #14
 800093e:	4807      	ldr	r0, [pc, #28]	; (800095c <send_erpa_packet+0x94>)
 8000940:	f00d fda6 	bl	800e490 <HAL_UART_Transmit>
	erpa_seq++;
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <send_erpa_packet+0x90>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <send_erpa_packet+0x90>)
 800094e:	801a      	strh	r2, [r3, #0]

}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2400068c 	.word	0x2400068c
 800095c:	2400055c 	.word	0x2400055c

08000960 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results,
		uint16_t *hk_adc3_results) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];									// GUI Structure

	hk_buf[0] = hk_sync;                     			// HK SYNC 0xCC MSB
 800096c:	23cc      	movs	r3, #204	; 0xcc
 800096e:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     			// HK SYNC 0xCC LSB
 8000970:	23cc      	movs	r3, #204	; 0xcc
 8000972:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 8000974:	4b7d      	ldr	r3, [pc, #500]	; (8000b6c <send_hk_packet+0x20c>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	b29b      	uxth	r3, r3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 8000980:	4b7a      	ldr	r3, [pc, #488]	; (8000b6c <send_hk_packet+0x20c>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);	// HK vsense MSB
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3302      	adds	r3, #2
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	0a1b      	lsrs	r3, r3, #8
 8000990:	b29b      	uxth	r3, r3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);			// HK vsense LSB
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3302      	adds	r3, #2
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);	// HK vrefint MSB
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);			// HK vrefint LSB
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);		// HK TEMP1 MSB
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ba:	121b      	asrs	r3, r3, #8
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);					// HK TEMP1 LSB
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);		// HK TEMP2 MSB
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	3302      	adds	r3, #2
 80009ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d2:	121b      	asrs	r3, r3, #8
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);				// HK TEMP2 LSB
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3302      	adds	r3, #2
 80009dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);		// HK TEMP3 MSB
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3304      	adds	r3, #4
 80009e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ec:	121b      	asrs	r3, r3, #8
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);				// HK TEMP3 LSB
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3304      	adds	r3, #4
 80009f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);		// HK TEMP4 MSB
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3306      	adds	r3, #6
 8000a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a06:	121b      	asrs	r3, r3, #8
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);				// HK TEMP4 LSB
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3306      	adds	r3, #6
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);			// HK BUSvmon LSB
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	3302      	adds	r3, #2
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	0a1b      	lsrs	r3, r3, #8
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);			// HK BUSimon LSB
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	3302      	adds	r3, #2
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3304      	adds	r3, #4
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);			// HK 2v5mon LSB
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	3304      	adds	r3, #4
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc3_results[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3306      	adds	r3, #6
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	0a1b      	lsrs	r3, r3, #8
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc3_results[3] & 0xFF);			// HK 3v3mon LSB
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3306      	adds	r3, #6
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	330c      	adds	r3, #12
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	0a1b      	lsrs	r3, r3, #8
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[6] & 0xFF);			// HK 5vmon LSB
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	330c      	adds	r3, #12
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	3306      	adds	r3, #6
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[3] & 0xFF);			// HK n3v3mon LSB
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3306      	adds	r3, #6
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc3_results[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3304      	adds	r3, #4
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	0a1b      	lsrs	r3, r3, #8
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc3_results[2] & 0xFF);			// HK n5vmon LSB
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3304      	adds	r3, #4
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	330e      	adds	r3, #14
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);			// HK 15vmon LSB
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	330e      	adds	r3, #14
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	3310      	adds	r3, #16
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	0a1b      	lsrs	r3, r3, #8
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);			// HK 5vrefmon LSB
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	3310      	adds	r3, #16
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	3308      	adds	r3, #8
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	0a1b      	lsrs	r3, r3, #8
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[4] & 0xFF);			// HK n150vmon LSB
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	3308      	adds	r3, #8
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	330a      	adds	r3, #10
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc1_results[5] & 0xFF);			// HK n800vmon LSB
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	330a      	adds	r3, #10
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000b48:	f107 0110 	add.w	r1, r7, #16
 8000b4c:	2364      	movs	r3, #100	; 0x64
 8000b4e:	2226      	movs	r2, #38	; 0x26
 8000b50:	4807      	ldr	r0, [pc, #28]	; (8000b70 <send_hk_packet+0x210>)
 8000b52:	f00d fc9d 	bl	800e490 <HAL_UART_Transmit>
	hk_seq++;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <send_hk_packet+0x20c>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <send_hk_packet+0x20c>)
 8000b60:	801a      	strh	r2, [r3, #0]

}
 8000b62:	bf00      	nop
 8000b64:	3738      	adds	r7, #56	; 0x38
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	24000690 	.word	0x24000690
 8000b70:	2400055c 	.word	0x2400055c

08000b74 <send_pmt_packet>:
/**
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t *pmt_spi) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;						// PMT SYNC MSB 0xBB
 8000b7c:	23bb      	movs	r3, #187	; 0xbb
 8000b7e:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;						// PMT SYNC LSB 0xBB
 8000b80:	23bb      	movs	r3, #187	; 0xbb
 8000b82:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);		// PMT SEQ # MSB
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <send_pmt_packet+0x54>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);				// PMT SEQ # LSB
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <send_pmt_packet+0x54>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];					// PMT eADC MSB
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];					// PMT eADC LSB
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	785b      	ldrb	r3, [r3, #1]
 8000ba2:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000ba4:	f107 0108 	add.w	r1, r7, #8
 8000ba8:	2364      	movs	r3, #100	; 0x64
 8000baa:	2206      	movs	r2, #6
 8000bac:	4807      	ldr	r0, [pc, #28]	; (8000bcc <send_pmt_packet+0x58>)
 8000bae:	f00d fc6f 	bl	800e490 <HAL_UART_Transmit>
	pmt_seq++;
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <send_pmt_packet+0x54>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <send_pmt_packet+0x54>)
 8000bbc:	801a      	strh	r2, [r3, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2400068e 	.word	0x2400068e
 8000bcc:	2400055c 	.word	0x2400055c

08000bd0 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b0a7      	sub	sp, #156	; 0x9c
 8000bd4:	af1e      	add	r7, sp, #120	; 0x78
 8000bd6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a3a      	ldr	r2, [pc, #232]	; (8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d148      	bne.n	8000c72 <HAL_TIM_OC_DelayElapsedCallback+0xa2>
		if (ERPA_ON) {
 8000be0:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d028      	beq.n	8000c3a <HAL_TIM_OC_DelayElapsedCallback+0x6a>

			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8000be8:	bf00      	nop
 8000bea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bee:	4837      	ldr	r0, [pc, #220]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000bf0:	f006 ff00 	bl	80079f4 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f7      	bne.n	8000bea <HAL_TIM_OC_DelayElapsedCallback+0x1a>
			}

			uint8_t *spi2_results = spi(hspi2);
 8000bfa:	4c35      	ldr	r4, [pc, #212]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000bfc:	4668      	mov	r0, sp
 8000bfe:	f104 0310 	add.w	r3, r4, #16
 8000c02:	2278      	movs	r2, #120	; 0x78
 8000c04:	4619      	mov	r1, r3
 8000c06:	f010 f85b 	bl	8010cc0 <memcpy>
 8000c0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c0e:	f7ff fd7f 	bl	8000710 <spi>
 8000c12:	61b8      	str	r0, [r7, #24]
			uint16_t *erpa_adc_results = erpa_adc();
 8000c14:	f7ff fdc4 	bl	80007a0 <erpa_adc>
 8000c18:	6178      	str	r0, [r7, #20]

			if (!auto_sweep){
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_TIM_OC_DelayElapsedCallback+0x56>
				set_erpa_sweep();
 8000c22:	f7ff fda3 	bl	800076c <set_erpa_sweep>
			}

			send_erpa_packet(spi2_results, erpa_adc_results);
 8000c26:	6979      	ldr	r1, [r7, #20]
 8000c28:	69b8      	ldr	r0, [r7, #24]
 8000c2a:	f7ff fe4d 	bl	80008c8 <send_erpa_packet>

			free(spi2_results);
 8000c2e:	69b8      	ldr	r0, [r7, #24]
 8000c30:	f010 f83e 	bl	8010cb0 <free>
			free(erpa_adc_results);
 8000c34:	6978      	ldr	r0, [r7, #20]
 8000c36:	f010 f83b 	bl	8010cb0 <free>
		}
		if (HK_ON) {
 8000c3a:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d03b      	beq.n	8000cba <HAL_TIM_OC_DelayElapsedCallback+0xea>
			int16_t *i2c_values = i2c();
 8000c42:	f7ff fd31 	bl	80006a8 <i2c>
 8000c46:	6138      	str	r0, [r7, #16]
			uint16_t *hk_adc1_results = hk_adc1();
 8000c48:	f7ff fdc6 	bl	80007d8 <hk_adc1>
 8000c4c:	60f8      	str	r0, [r7, #12]
			uint16_t *hk_adc3_results = hk_adc3();
 8000c4e:	f7ff fe11 	bl	8000874 <hk_adc3>
 8000c52:	60b8      	str	r0, [r7, #8]

			send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	68f9      	ldr	r1, [r7, #12]
 8000c58:	6938      	ldr	r0, [r7, #16]
 8000c5a:	f7ff fe81 	bl	8000960 <send_hk_packet>

			free(i2c_values);
 8000c5e:	6938      	ldr	r0, [r7, #16]
 8000c60:	f010 f826 	bl	8010cb0 <free>
			free(hk_adc1_results);
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f010 f823 	bl	8010cb0 <free>
			free(hk_adc3_results);
 8000c6a:	68b8      	ldr	r0, [r7, #8]
 8000c6c:	f010 f820 	bl	8010cb0 <free>
			send_pmt_packet(spi1_results);

			free(spi1_results);
		}
	}
}
 8000c70:	e023      	b.n	8000cba <HAL_TIM_OC_DelayElapsedCallback+0xea>
	} else if (htim == &htim1) {
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d11f      	bne.n	8000cba <HAL_TIM_OC_DelayElapsedCallback+0xea>
		if (PMT_ON) {
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d01b      	beq.n	8000cba <HAL_TIM_OC_DelayElapsedCallback+0xea>
			while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000c82:	bf00      	nop
 8000c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c88:	4816      	ldr	r0, [pc, #88]	; (8000ce4 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000c8a:	f006 feb3 	bl	80079f4 <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f7      	bne.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xb4>
			uint8_t *spi1_results = spi(hspi1);
 8000c94:	4c14      	ldr	r4, [pc, #80]	; (8000ce8 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8000c96:	4668      	mov	r0, sp
 8000c98:	f104 0310 	add.w	r3, r4, #16
 8000c9c:	2278      	movs	r2, #120	; 0x78
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f010 f80e 	bl	8010cc0 <memcpy>
 8000ca4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ca8:	f7ff fd32 	bl	8000710 <spi>
 8000cac:	61f8      	str	r0, [r7, #28]
			send_pmt_packet(spi1_results);
 8000cae:	69f8      	ldr	r0, [r7, #28]
 8000cb0:	f7ff ff60 	bl	8000b74 <send_pmt_packet>
			free(spi1_results);
 8000cb4:	69f8      	ldr	r0, [r7, #28]
 8000cb6:	f00f fffb 	bl	8010cb0 <free>
}
 8000cba:	bf00      	nop
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	24000510 	.word	0x24000510
 8000cc8:	24000693 	.word	0x24000693
 8000ccc:	58020400 	.word	0x58020400
 8000cd0:	2400043c 	.word	0x2400043c
 8000cd4:	24000688 	.word	0x24000688
 8000cd8:	24000694 	.word	0x24000694
 8000cdc:	240004c4 	.word	0x240004c4
 8000ce0:	24000692 	.word	0x24000692
 8000ce4:	58020000 	.word	0x58020000
 8000ce8:	240003b4 	.word	0x240003b4

08000cec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	49bb      	ldr	r1, [pc, #748]	; (8000fe4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000cf8:	48bb      	ldr	r0, [pc, #748]	; (8000fe8 <HAL_UART_RxCpltCallback+0x2fc>)
 8000cfa:	f00d fc57 	bl	800e5ac <HAL_UART_Receive_IT>
	unsigned char key = rx_buf[0];
 8000cfe:	4bb9      	ldr	r3, [pc, #740]	; (8000fe4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	2b25      	cmp	r3, #37	; 0x25
 8000d08:	f200 8167 	bhi.w	8000fda <HAL_UART_RxCpltCallback+0x2ee>
 8000d0c:	a201      	add	r2, pc, #4	; (adr r2, 8000d14 <HAL_UART_RxCpltCallback+0x28>)
 8000d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d12:	bf00      	nop
 8000d14:	08000e7d 	.word	0x08000e7d
 8000d18:	08000e99 	.word	0x08000e99
 8000d1c:	08000eb5 	.word	0x08000eb5
 8000d20:	08000ed5 	.word	0x08000ed5
 8000d24:	08000ef5 	.word	0x08000ef5
 8000d28:	08000f11 	.word	0x08000f11
 8000d2c:	08000f31 	.word	0x08000f31
 8000d30:	08000f51 	.word	0x08000f51
 8000d34:	08000fdb 	.word	0x08000fdb
 8000d38:	08000fdb 	.word	0x08000fdb
 8000d3c:	08000dbb 	.word	0x08000dbb
 8000d40:	08000dad 	.word	0x08000dad
 8000d44:	08000f6d 	.word	0x08000f6d
 8000d48:	08000f7d 	.word	0x08000f7d
 8000d4c:	08000f9d 	.word	0x08000f9d
 8000d50:	08000fbd 	.word	0x08000fbd
 8000d54:	08000f8d 	.word	0x08000f8d
 8000d58:	08000fad 	.word	0x08000fad
 8000d5c:	08000fc5 	.word	0x08000fc5
 8000d60:	08000e8b 	.word	0x08000e8b
 8000d64:	08000ea7 	.word	0x08000ea7
 8000d68:	08000ec5 	.word	0x08000ec5
 8000d6c:	08000ee5 	.word	0x08000ee5
 8000d70:	08000f03 	.word	0x08000f03
 8000d74:	08000f21 	.word	0x08000f21
 8000d78:	08000f41 	.word	0x08000f41
 8000d7c:	08000f5f 	.word	0x08000f5f
 8000d80:	08000dc9 	.word	0x08000dc9
 8000d84:	08000de1 	.word	0x08000de1
 8000d88:	08000df9 	.word	0x08000df9
 8000d8c:	08000fdb 	.word	0x08000fdb
 8000d90:	08000fdb 	.word	0x08000fdb
 8000d94:	08000fdb 	.word	0x08000fdb
 8000d98:	08000fdb 	.word	0x08000fdb
 8000d9c:	08000fdb 	.word	0x08000fdb
 8000da0:	08000fdb 	.word	0x08000fdb
 8000da4:	08000e35 	.word	0x08000e35
 8000da8:	08000e59 	.word	0x08000e59
	case 0x0B: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000dac:	4b8f      	ldr	r3, [pc, #572]	; (8000fec <HAL_UART_RxCpltCallback+0x300>)
 8000dae:	2104      	movs	r1, #4
 8000db0:	2201      	movs	r2, #1
 8000db2:	4618      	mov	r0, r3
 8000db4:	f006 fe36 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000db8:	e10f      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x0A: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000dba:	4b8c      	ldr	r3, [pc, #560]	; (8000fec <HAL_UART_RxCpltCallback+0x300>)
 8000dbc:	2104      	movs	r1, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f006 fe2f 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000dc6:	e108      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x1B: {
		if (step < 17) {
 8000dc8:	4b89      	ldr	r3, [pc, #548]	; (8000ff0 <HAL_UART_RxCpltCallback+0x304>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b10      	cmp	r3, #16
 8000dce:	f200 80fd 	bhi.w	8000fcc <HAL_UART_RxCpltCallback+0x2e0>
			step+=2;
 8000dd2:	4b87      	ldr	r3, [pc, #540]	; (8000ff0 <HAL_UART_RxCpltCallback+0x304>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4b85      	ldr	r3, [pc, #532]	; (8000ff0 <HAL_UART_RxCpltCallback+0x304>)
 8000ddc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000dde:	e0f5      	b.n	8000fcc <HAL_UART_RxCpltCallback+0x2e0>
	}
	case 0x1C: {
		if (step > 3) {
 8000de0:	4b83      	ldr	r3, [pc, #524]	; (8000ff0 <HAL_UART_RxCpltCallback+0x304>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	f240 80f3 	bls.w	8000fd0 <HAL_UART_RxCpltCallback+0x2e4>
			step-=2;
 8000dea:	4b81      	ldr	r3, [pc, #516]	; (8000ff0 <HAL_UART_RxCpltCallback+0x304>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	3b02      	subs	r3, #2
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4b7f      	ldr	r3, [pc, #508]	; (8000ff0 <HAL_UART_RxCpltCallback+0x304>)
 8000df4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000df6:	e0eb      	b.n	8000fd0 <HAL_UART_RxCpltCallback+0x2e4>
	}
	case 0x1D: {
		if (!auto_sweep) {
 8000df8:	4b7e      	ldr	r3, [pc, #504]	; (8000ff4 <HAL_UART_RxCpltCallback+0x308>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10e      	bne.n	8000e1e <HAL_UART_RxCpltCallback+0x132>
			auto_sweep = 1;
 8000e00:	4b7c      	ldr	r3, [pc, #496]	; (8000ff4 <HAL_UART_RxCpltCallback+0x308>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000e06:	487c      	ldr	r0, [pc, #496]	; (8000ff8 <HAL_UART_RxCpltCallback+0x30c>)
 8000e08:	f00b fe10 	bl	800ca2c <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, SIZE, DAC_ALIGN_12B_R);
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	2320      	movs	r3, #32
 8000e12:	4a7a      	ldr	r2, [pc, #488]	; (8000ffc <HAL_UART_RxCpltCallback+0x310>)
 8000e14:	2100      	movs	r1, #0
 8000e16:	487a      	ldr	r0, [pc, #488]	; (8001000 <HAL_UART_RxCpltCallback+0x314>)
 8000e18:	f003 fade 	bl	80043d8 <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 8000e1c:	e0dd      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
			auto_sweep = 0;
 8000e1e:	4b75      	ldr	r3, [pc, #468]	; (8000ff4 <HAL_UART_RxCpltCallback+0x308>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000e24:	4874      	ldr	r0, [pc, #464]	; (8000ff8 <HAL_UART_RxCpltCallback+0x30c>)
 8000e26:	f00b fe71 	bl	800cb0c <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4874      	ldr	r0, [pc, #464]	; (8001000 <HAL_UART_RxCpltCallback+0x314>)
 8000e2e:	f003 fb93 	bl	8004558 <HAL_DAC_Stop_DMA>
		break;
 8000e32:	e0d2      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x24: {
		if (cadence <= 50000){
 8000e34:	4b73      	ldr	r3, [pc, #460]	; (8001004 <HAL_UART_RxCpltCallback+0x318>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	f200 80c9 	bhi.w	8000fd4 <HAL_UART_RxCpltCallback+0x2e8>
			cadence *= 2;
 8000e42:	4b70      	ldr	r3, [pc, #448]	; (8001004 <HAL_UART_RxCpltCallback+0x318>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4a6e      	ldr	r2, [pc, #440]	; (8001004 <HAL_UART_RxCpltCallback+0x318>)
 8000e4a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e50:	4b6c      	ldr	r3, [pc, #432]	; (8001004 <HAL_UART_RxCpltCallback+0x318>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e56:	e0bd      	b.n	8000fd4 <HAL_UART_RxCpltCallback+0x2e8>
	}
	case 0x25: {
		if (cadence >= 6250){
 8000e58:	4b6a      	ldr	r3, [pc, #424]	; (8001004 <HAL_UART_RxCpltCallback+0x318>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e60:	4293      	cmp	r3, r2
 8000e62:	f240 80b9 	bls.w	8000fd8 <HAL_UART_RxCpltCallback+0x2ec>
			cadence /= 2;
 8000e66:	4b67      	ldr	r3, [pc, #412]	; (8001004 <HAL_UART_RxCpltCallback+0x318>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	085b      	lsrs	r3, r3, #1
 8000e6c:	4a65      	ldr	r2, [pc, #404]	; (8001004 <HAL_UART_RxCpltCallback+0x318>)
 8000e6e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e74:	4b63      	ldr	r3, [pc, #396]	; (8001004 <HAL_UART_RxCpltCallback+0x318>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e7a:	e0ad      	b.n	8000fd8 <HAL_UART_RxCpltCallback+0x2ec>
	}
	case 0x00: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <HAL_UART_RxCpltCallback+0x300>)
 8000e7e:	2120      	movs	r1, #32
 8000e80:	2201      	movs	r2, #1
 8000e82:	4618      	mov	r0, r3
 8000e84:	f006 fdce 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000e88:	e0a7      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x13: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000e8a:	4b58      	ldr	r3, [pc, #352]	; (8000fec <HAL_UART_RxCpltCallback+0x300>)
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f006 fdc7 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000e96:	e0a0      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x01: {

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000e98:	4b54      	ldr	r3, [pc, #336]	; (8000fec <HAL_UART_RxCpltCallback+0x300>)
 8000e9a:	2140      	movs	r1, #64	; 0x40
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f006 fdc0 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000ea4:	e099      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x14: {
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000ea6:	4b51      	ldr	r3, [pc, #324]	; (8000fec <HAL_UART_RxCpltCallback+0x300>)
 8000ea8:	2140      	movs	r1, #64	; 0x40
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f006 fdb9 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000eb2:	e092      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x02: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000eb4:	4b54      	ldr	r3, [pc, #336]	; (8001008 <HAL_UART_RxCpltCallback+0x31c>)
 8000eb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f006 fdb1 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000ec2:	e08a      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x15: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ec4:	4b50      	ldr	r3, [pc, #320]	; (8001008 <HAL_UART_RxCpltCallback+0x31c>)
 8000ec6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f006 fda9 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000ed2:	e082      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x03: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000ed4:	4b4c      	ldr	r3, [pc, #304]	; (8001008 <HAL_UART_RxCpltCallback+0x31c>)
 8000ed6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eda:	2201      	movs	r2, #1
 8000edc:	4618      	mov	r0, r3
 8000ede:	f006 fda1 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000ee2:	e07a      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x16: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000ee4:	4b48      	ldr	r3, [pc, #288]	; (8001008 <HAL_UART_RxCpltCallback+0x31c>)
 8000ee6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eea:	2200      	movs	r2, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f006 fd99 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000ef2:	e072      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x04: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ef4:	4b44      	ldr	r3, [pc, #272]	; (8001008 <HAL_UART_RxCpltCallback+0x31c>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4618      	mov	r0, r3
 8000efc:	f006 fd92 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000f00:	e06b      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x17: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000f02:	4b41      	ldr	r3, [pc, #260]	; (8001008 <HAL_UART_RxCpltCallback+0x31c>)
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	2200      	movs	r2, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f006 fd8b 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000f0e:	e064      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x05: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000f10:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <HAL_UART_RxCpltCallback+0x31c>)
 8000f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f16:	2201      	movs	r2, #1
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f006 fd83 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000f1e:	e05c      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x18: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000f20:	4b39      	ldr	r3, [pc, #228]	; (8001008 <HAL_UART_RxCpltCallback+0x31c>)
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	2200      	movs	r2, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f006 fd7b 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000f2e:	e054      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x06: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000f30:	4b35      	ldr	r3, [pc, #212]	; (8001008 <HAL_UART_RxCpltCallback+0x31c>)
 8000f32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f36:	2201      	movs	r2, #1
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f006 fd73 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000f3e:	e04c      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x19: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000f40:	4b31      	ldr	r3, [pc, #196]	; (8001008 <HAL_UART_RxCpltCallback+0x31c>)
 8000f42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f46:	2200      	movs	r2, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f006 fd6b 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000f4e:	e044      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x07: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_UART_RxCpltCallback+0x31c>)
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	2201      	movs	r2, #1
 8000f56:	4618      	mov	r0, r3
 8000f58:	f006 fd64 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000f5c:	e03d      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x1A: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <HAL_UART_RxCpltCallback+0x31c>)
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	2200      	movs	r2, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f006 fd5d 	bl	8007a24 <HAL_GPIO_WritePin>
		break;
 8000f6a:	e036      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x0C: {
		HAL_SuspendTick();
 8000f6c:	f001 fc66 	bl	800283c <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000f70:	2101      	movs	r1, #1
 8000f72:	2001      	movs	r0, #1
 8000f74:	f007 fb58 	bl	8008628 <HAL_PWR_EnterSTOPMode>
		NVIC_SystemReset();
 8000f78:	f7ff fb30 	bl	80005dc <__NVIC_SystemReset>
		break;
	}
	case 0x0D: {
		PMT_ON = 1;
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <HAL_UART_RxCpltCallback+0x320>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f82:	2100      	movs	r1, #0
 8000f84:	4822      	ldr	r0, [pc, #136]	; (8001010 <HAL_UART_RxCpltCallback+0x324>)
 8000f86:	f00b fde9 	bl	800cb5c <HAL_TIM_OC_Start_IT>
		break;
 8000f8a:	e026      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x10: {
		PMT_ON = 0;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <HAL_UART_RxCpltCallback+0x320>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000f92:	2100      	movs	r1, #0
 8000f94:	481e      	ldr	r0, [pc, #120]	; (8001010 <HAL_UART_RxCpltCallback+0x324>)
 8000f96:	f00b ff3b 	bl	800ce10 <HAL_TIM_OC_Stop_IT>

		break;
 8000f9a:	e01e      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x0E: {
		ERPA_ON = 1;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <HAL_UART_RxCpltCallback+0x328>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000fa2:	210c      	movs	r1, #12
 8000fa4:	4814      	ldr	r0, [pc, #80]	; (8000ff8 <HAL_UART_RxCpltCallback+0x30c>)
 8000fa6:	f00b fdd9 	bl	800cb5c <HAL_TIM_OC_Start_IT>
		break;
 8000faa:	e016      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x11: {
		ERPA_ON = 0;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_UART_RxCpltCallback+0x328>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000fb2:	210c      	movs	r1, #12
 8000fb4:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <HAL_UART_RxCpltCallback+0x30c>)
 8000fb6:	f00b ff2b 	bl	800ce10 <HAL_TIM_OC_Stop_IT>

		break;
 8000fba:	e00e      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x0F: {
		HK_ON = 1;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_UART_RxCpltCallback+0x32c>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
		break;
 8000fc2:	e00a      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x12: {
		HK_ON = 0;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_UART_RxCpltCallback+0x32c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
		break;
 8000fca:	e006      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
		break;
 8000fcc:	bf00      	nop
 8000fce:	e004      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
		break;
 8000fd0:	bf00      	nop
 8000fd2:	e002      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
		break;
 8000fd4:	bf00      	nop
 8000fd6:	e000      	b.n	8000fda <HAL_UART_RxCpltCallback+0x2ee>
		break;
 8000fd8:	bf00      	nop
	}
	}
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	240005f0 	.word	0x240005f0
 8000fe8:	2400055c 	.word	0x2400055c
 8000fec:	58020400 	.word	0x58020400
 8000ff0:	24000084 	.word	0x24000084
 8000ff4:	24000688 	.word	0x24000688
 8000ff8:	24000510 	.word	0x24000510
 8000ffc:	24000000 	.word	0x24000000
 8001000:	240002d4 	.word	0x240002d4
 8001004:	24000080 	.word	0x24000080
 8001008:	58020800 	.word	0x58020800
 800100c:	24000692 	.word	0x24000692
 8001010:	240004c4 	.word	0x240004c4
 8001014:	24000693 	.word	0x24000693
 8001018:	24000694 	.word	0x24000694

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001020:	f001 fb7a 	bl	8002718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001024:	f000 f874 	bl	8001110 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001028:	f000 f8f8 	bl	800121c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102c:	f000 fd7e 	bl	8001b2c <MX_GPIO_Init>
  MX_DMA_Init();
 8001030:	f000 fd4c 	bl	8001acc <MX_DMA_Init>
  MX_DAC1_Init();
 8001034:	f000 fad6 	bl	80015e4 <MX_DAC1_Init>
  MX_ADC1_Init();
 8001038:	f000 f920 	bl	800127c <MX_ADC1_Init>
  MX_ADC3_Init();
 800103c:	f000 fa40 	bl	80014c0 <MX_ADC3_Init>
  MX_TIM2_Init();
 8001040:	f000 fc82 	bl	8001948 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001044:	f000 fbf0 	bl	8001828 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001048:	f000 fafe 	bl	8001648 <MX_I2C1_Init>
  MX_SPI1_Init();
 800104c:	f000 fb3c 	bl	80016c8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001050:	f000 fb92 	bl	8001778 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001054:	f000 fcee 	bl	8001a34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  TIM2->CCR4 = 312;
 8001058:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800105c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001062:	210c      	movs	r1, #12
 8001064:	4823      	ldr	r0, [pc, #140]	; (80010f4 <main+0xd8>)
 8001066:	f00c f80f 	bl	800d088 <HAL_TIM_PWM_Start>




  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800106a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800106e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001072:	4821      	ldr	r0, [pc, #132]	; (80010f8 <main+0xdc>)
 8001074:	f002 fee6 	bl	8003e44 <HAL_ADCEx_Calibration_Start>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <main+0x66>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 800107e:	f000 fdcf 	bl	8001c20 <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1Data,
 8001082:	220b      	movs	r2, #11
 8001084:	491d      	ldr	r1, [pc, #116]	; (80010fc <main+0xe0>)
 8001086:	481c      	ldr	r0, [pc, #112]	; (80010f8 <main+0xdc>)
 8001088:	f001 ffba 	bl	8003000 <HAL_ADC_Start_DMA>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <main+0x7a>
  	ADC1NumChannels) != HAL_OK) {
  		Error_Handler();
 8001092:	f000 fdc5 	bl	8001c20 <Error_Handler>
  	}

  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001096:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800109a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800109e:	4818      	ldr	r0, [pc, #96]	; (8001100 <main+0xe4>)
 80010a0:	f002 fed0 	bl	8003e44 <HAL_ADCEx_Calibration_Start>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <main+0x92>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 80010aa:	f000 fdb9 	bl	8001c20 <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3Data,
 80010ae:	2204      	movs	r2, #4
 80010b0:	4914      	ldr	r1, [pc, #80]	; (8001104 <main+0xe8>)
 80010b2:	4813      	ldr	r0, [pc, #76]	; (8001100 <main+0xe4>)
 80010b4:	f001 ffa4 	bl	8003000 <HAL_ADC_Start_DMA>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <main+0xa6>
  	ADC3NumChannels) != HAL_OK) {
  		Error_Handler();
 80010be:	f000 fdaf 	bl	8001c20 <Error_Handler>
  	}

  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET)
 80010c2:	bf00      	nop
 80010c4:	4b10      	ldr	r3, [pc, #64]	; (8001108 <main+0xec>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d2:	d0f7      	beq.n	80010c4 <main+0xa8>
  		;
  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET)
 80010d4:	bf00      	nop
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <main+0xec>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010e4:	d1f7      	bne.n	80010d6 <main+0xba>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80010e6:	2201      	movs	r2, #1
 80010e8:	4908      	ldr	r1, [pc, #32]	; (800110c <main+0xf0>)
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <main+0xec>)
 80010ec:	f00d fa5e 	bl	800e5ac <HAL_UART_Receive_IT>
 80010f0:	e7f9      	b.n	80010e6 <main+0xca>
 80010f2:	bf00      	nop
 80010f4:	24000510 	.word	0x24000510
 80010f8:	2400011c 	.word	0x2400011c
 80010fc:	24000660 	.word	0x24000660
 8001100:	24000180 	.word	0x24000180
 8001104:	24000680 	.word	0x24000680
 8001108:	2400055c 	.word	0x2400055c
 800110c:	240005f0 	.word	0x240005f0

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b09c      	sub	sp, #112	; 0x70
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	224c      	movs	r2, #76	; 0x4c
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f00f fddc 	bl	8010cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2220      	movs	r2, #32
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f00f fdd6 	bl	8010cdc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001130:	2002      	movs	r0, #2
 8001132:	f007 fab5 	bl	80086a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	4b35      	ldr	r3, [pc, #212]	; (8001210 <SystemClock_Config+0x100>)
 800113c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113e:	4a34      	ldr	r2, [pc, #208]	; (8001210 <SystemClock_Config+0x100>)
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <SystemClock_Config+0x100>)
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <SystemClock_Config+0x104>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001158:	4a2e      	ldr	r2, [pc, #184]	; (8001214 <SystemClock_Config+0x104>)
 800115a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <SystemClock_Config+0x104>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800116c:	bf00      	nop
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <SystemClock_Config+0x104>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800117a:	d1f8      	bne.n	800116e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <SystemClock_Config+0x108>)
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	4a25      	ldr	r2, [pc, #148]	; (8001218 <SystemClock_Config+0x108>)
 8001182:	f023 0303 	bic.w	r3, r3, #3
 8001186:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001188:	2302      	movs	r3, #2
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800118c:	2301      	movs	r3, #1
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001190:	2340      	movs	r3, #64	; 0x40
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001198:	2300      	movs	r3, #0
 800119a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800119c:	2304      	movs	r3, #4
 800119e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80011a0:	230c      	movs	r3, #12
 80011a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80011a4:	2304      	movs	r3, #4
 80011a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011b0:	230c      	movs	r3, #12
 80011b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	4618      	mov	r0, r3
 80011c2:	f007 faa7 	bl	8008714 <HAL_RCC_OscConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011cc:	f000 fd28 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d0:	233f      	movs	r3, #63	; 0x3f
 80011d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d4:	2303      	movs	r3, #3
 80011d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011e4:	2340      	movs	r3, #64	; 0x40
 80011e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2101      	movs	r1, #1
 80011f6:	4618      	mov	r0, r3
 80011f8:	f007 fee6 	bl	8008fc8 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001202:	f000 fd0d 	bl	8001c20 <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3770      	adds	r7, #112	; 0x70
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	58000400 	.word	0x58000400
 8001214:	58024800 	.word	0x58024800
 8001218:	58024400 	.word	0x58024400

0800121c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0b0      	sub	sp, #192	; 0xc0
 8001220:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001222:	463b      	mov	r3, r7
 8001224:	22c0      	movs	r2, #192	; 0xc0
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f00f fd57 	bl	8010cdc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800122e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800123a:	2304      	movs	r3, #4
 800123c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800123e:	2309      	movs	r3, #9
 8001240:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001242:	2304      	movs	r3, #4
 8001244:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001246:	2302      	movs	r3, #2
 8001248:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800124e:	23c0      	movs	r3, #192	; 0xc0
 8001250:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001252:	2320      	movs	r3, #32
 8001254:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001256:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	4618      	mov	r0, r3
 8001266:	f008 fa3b 	bl	80096e0 <HAL_RCCEx_PeriphCLKConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001270:	f000 fcd6 	bl	8001c20 <Error_Handler>
  }
}
 8001274:	bf00      	nop
 8001276:	37c0      	adds	r7, #192	; 0xc0
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]
 800129e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012a0:	4b7a      	ldr	r3, [pc, #488]	; (800148c <MX_ADC1_Init+0x210>)
 80012a2:	4a7b      	ldr	r2, [pc, #492]	; (8001490 <MX_ADC1_Init+0x214>)
 80012a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012a6:	4b79      	ldr	r3, [pc, #484]	; (800148c <MX_ADC1_Init+0x210>)
 80012a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ae:	4b77      	ldr	r3, [pc, #476]	; (800148c <MX_ADC1_Init+0x210>)
 80012b0:	2208      	movs	r2, #8
 80012b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012b4:	4b75      	ldr	r3, [pc, #468]	; (800148c <MX_ADC1_Init+0x210>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ba:	4b74      	ldr	r3, [pc, #464]	; (800148c <MX_ADC1_Init+0x210>)
 80012bc:	2204      	movs	r2, #4
 80012be:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012c0:	4b72      	ldr	r3, [pc, #456]	; (800148c <MX_ADC1_Init+0x210>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012c6:	4b71      	ldr	r3, [pc, #452]	; (800148c <MX_ADC1_Init+0x210>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80012cc:	4b6f      	ldr	r3, [pc, #444]	; (800148c <MX_ADC1_Init+0x210>)
 80012ce:	220b      	movs	r2, #11
 80012d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d2:	4b6e      	ldr	r3, [pc, #440]	; (800148c <MX_ADC1_Init+0x210>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d8:	4b6c      	ldr	r3, [pc, #432]	; (800148c <MX_ADC1_Init+0x210>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012de:	4b6b      	ldr	r3, [pc, #428]	; (800148c <MX_ADC1_Init+0x210>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012e4:	4b69      	ldr	r3, [pc, #420]	; (800148c <MX_ADC1_Init+0x210>)
 80012e6:	2203      	movs	r2, #3
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012ea:	4b68      	ldr	r3, [pc, #416]	; (800148c <MX_ADC1_Init+0x210>)
 80012ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012f2:	4b66      	ldr	r3, [pc, #408]	; (800148c <MX_ADC1_Init+0x210>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012f8:	4b64      	ldr	r3, [pc, #400]	; (800148c <MX_ADC1_Init+0x210>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001300:	4862      	ldr	r0, [pc, #392]	; (800148c <MX_ADC1_Init+0x210>)
 8001302:	f001 fcdb 	bl	8002cbc <HAL_ADC_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800130c:	f000 fc88 	bl	8001c20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	485c      	ldr	r0, [pc, #368]	; (800148c <MX_ADC1_Init+0x210>)
 800131c:	f002 fdf6 	bl	8003f0c <HAL_ADCEx_MultiModeConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001326:	f000 fc7b 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800132a:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <MX_ADC1_Init+0x218>)
 800132c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800132e:	2306      	movs	r3, #6
 8001330:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001332:	2307      	movs	r3, #7
 8001334:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001336:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800133a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800133c:	2304      	movs	r3, #4
 800133e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	484f      	ldr	r0, [pc, #316]	; (800148c <MX_ADC1_Init+0x210>)
 800134e:	f001 ff39 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001358:	f000 fc62 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <MX_ADC1_Init+0x21c>)
 800135e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001360:	230c      	movs	r3, #12
 8001362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	4848      	ldr	r0, [pc, #288]	; (800148c <MX_ADC1_Init+0x210>)
 800136a:	f001 ff2b 	bl	80031c4 <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001374:	f000 fc54 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001378:	4b48      	ldr	r3, [pc, #288]	; (800149c <MX_ADC1_Init+0x220>)
 800137a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800137c:	2312      	movs	r3, #18
 800137e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4841      	ldr	r0, [pc, #260]	; (800148c <MX_ADC1_Init+0x210>)
 8001386:	f001 ff1d 	bl	80031c4 <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001390:	f000 fc46 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001394:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <MX_ADC1_Init+0x224>)
 8001396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001398:	2318      	movs	r3, #24
 800139a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	483a      	ldr	r0, [pc, #232]	; (800148c <MX_ADC1_Init+0x210>)
 80013a2:	f001 ff0f 	bl	80031c4 <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80013ac:	f000 fc38 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <MX_ADC1_Init+0x228>)
 80013b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ba:	463b      	mov	r3, r7
 80013bc:	4619      	mov	r1, r3
 80013be:	4833      	ldr	r0, [pc, #204]	; (800148c <MX_ADC1_Init+0x210>)
 80013c0:	f001 ff00 	bl	80031c4 <HAL_ADC_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80013ca:	f000 fc29 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013ce:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <MX_ADC1_Init+0x22c>)
 80013d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013d2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d8:	463b      	mov	r3, r7
 80013da:	4619      	mov	r1, r3
 80013dc:	482b      	ldr	r0, [pc, #172]	; (800148c <MX_ADC1_Init+0x210>)
 80013de:	f001 fef1 	bl	80031c4 <HAL_ADC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013e8:	f000 fc1a 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013ec:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <MX_ADC1_Init+0x230>)
 80013ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013f0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f6:	463b      	mov	r3, r7
 80013f8:	4619      	mov	r1, r3
 80013fa:	4824      	ldr	r0, [pc, #144]	; (800148c <MX_ADC1_Init+0x210>)
 80013fc:	f001 fee2 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001406:	f000 fc0b 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800140a:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <MX_ADC1_Init+0x234>)
 800140c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800140e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001412:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	481c      	ldr	r0, [pc, #112]	; (800148c <MX_ADC1_Init+0x210>)
 800141a:	f001 fed3 	bl	80031c4 <HAL_ADC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001424:	f000 fbfc 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <MX_ADC1_Init+0x238>)
 800142a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800142c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001430:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001432:	463b      	mov	r3, r7
 8001434:	4619      	mov	r1, r3
 8001436:	4815      	ldr	r0, [pc, #84]	; (800148c <MX_ADC1_Init+0x210>)
 8001438:	f001 fec4 	bl	80031c4 <HAL_ADC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001442:	f000 fbed 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_ADC1_Init+0x23c>)
 8001448:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800144a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_ADC1_Init+0x210>)
 8001456:	f001 feb5 	bl	80031c4 <HAL_ADC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001460:	f000 fbde 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_ADC1_Init+0x240>)
 8001466:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001468:	f240 2306 	movw	r3, #518	; 0x206
 800146c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146e:	463b      	mov	r3, r7
 8001470:	4619      	mov	r1, r3
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <MX_ADC1_Init+0x210>)
 8001474:	f001 fea6 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800147e:	f000 fbcf 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2400011c 	.word	0x2400011c
 8001490:	40022000 	.word	0x40022000
 8001494:	0c900008 	.word	0x0c900008
 8001498:	10c00010 	.word	0x10c00010
 800149c:	14f00020 	.word	0x14f00020
 80014a0:	1d500080 	.word	0x1d500080
 80014a4:	21800100 	.word	0x21800100
 80014a8:	25b00200 	.word	0x25b00200
 80014ac:	2a000400 	.word	0x2a000400
 80014b0:	2e300800 	.word	0x2e300800
 80014b4:	3ac04000 	.word	0x3ac04000
 80014b8:	3ef08000 	.word	0x3ef08000
 80014bc:	47520000 	.word	0x47520000

080014c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014d8:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014da:	4a3e      	ldr	r2, [pc, #248]	; (80015d4 <MX_ADC3_Init+0x114>)
 80014dc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014de:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014e0:	2208      	movs	r2, #8
 80014e2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014e4:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ea:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014ec:	2204      	movs	r2, #4
 80014ee:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014f0:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014fc:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014fe:	2204      	movs	r2, #4
 8001500:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001502:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001504:	2200      	movs	r2, #0
 8001506:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001508:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <MX_ADC3_Init+0x110>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001510:	2200      	movs	r2, #0
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001514:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001516:	2203      	movs	r2, #3
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <MX_ADC3_Init+0x110>)
 800151c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001524:	2200      	movs	r2, #0
 8001526:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_ADC3_Init+0x110>)
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001530:	4827      	ldr	r0, [pc, #156]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001532:	f001 fbc3 	bl	8002cbc <HAL_ADC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800153c:	f000 fb70 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <MX_ADC3_Init+0x118>)
 8001542:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001544:	2306      	movs	r3, #6
 8001546:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001548:	2307      	movs	r3, #7
 800154a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800154c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001550:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001552:	2304      	movs	r3, #4
 8001554:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4619      	mov	r1, r3
 8001562:	481b      	ldr	r0, [pc, #108]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001564:	f001 fe2e 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800156e:	f000 fb57 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_ADC3_Init+0x11c>)
 8001574:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001576:	230c      	movs	r3, #12
 8001578:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4814      	ldr	r0, [pc, #80]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001580:	f001 fe20 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800158a:	f000 fb49 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800158e:	2301      	movs	r3, #1
 8001590:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001592:	2312      	movs	r3, #18
 8001594:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_ADC3_Init+0x110>)
 800159c:	f001 fe12 	bl	80031c4 <HAL_ADC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015a6:	f000 fb3b 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <MX_ADC3_Init+0x120>)
 80015ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015ae:	2318      	movs	r3, #24
 80015b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_ADC3_Init+0x110>)
 80015b8:	f001 fe04 	bl	80031c4 <HAL_ADC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80015c2:	f000 fb2d 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	24000180 	.word	0x24000180
 80015d4:	58026000 	.word	0x58026000
 80015d8:	cb840000 	.word	0xcb840000
 80015dc:	cfb80000 	.word	0xcfb80000
 80015e0:	04300002 	.word	0x04300002

080015e4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2224      	movs	r2, #36	; 0x24
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00f fb73 	bl	8010cdc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_DAC1_Init+0x5c>)
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_DAC1_Init+0x60>)
 80015fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015fc:	4810      	ldr	r0, [pc, #64]	; (8001640 <MX_DAC1_Init+0x5c>)
 80015fe:	f002 fe72 	bl	80042e6 <HAL_DAC_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001608:	f000 fb0a 	bl	8001c20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001610:	230a      	movs	r3, #10
 8001612:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001618:	2301      	movs	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <MX_DAC1_Init+0x5c>)
 8001628:	f003 f82c 	bl	8004684 <HAL_DAC_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001632:	f000 faf5 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	240002d4 	.word	0x240002d4
 8001644:	40007400 	.word	0x40007400

08001648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <MX_I2C1_Init+0x74>)
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_I2C1_Init+0x74>)
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <MX_I2C1_Init+0x7c>)
 8001656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <MX_I2C1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_I2C1_Init+0x74>)
 8001660:	2201      	movs	r2, #1
 8001662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <MX_I2C1_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_I2C1_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_I2C1_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_I2C1_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_I2C1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001682:	480e      	ldr	r0, [pc, #56]	; (80016bc <MX_I2C1_Init+0x74>)
 8001684:	f006 f9e8 	bl	8007a58 <HAL_I2C_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800168e:	f000 fac7 	bl	8001c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001692:	2100      	movs	r1, #0
 8001694:	4809      	ldr	r0, [pc, #36]	; (80016bc <MX_I2C1_Init+0x74>)
 8001696:	f006 ff2f 	bl	80084f8 <HAL_I2CEx_ConfigAnalogFilter>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016a0:	f000 fabe 	bl	8001c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016a4:	2100      	movs	r1, #0
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_I2C1_Init+0x74>)
 80016a8:	f006 ff71 	bl	800858e <HAL_I2CEx_ConfigDigitalFilter>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016b2:	f000 fab5 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	24000360 	.word	0x24000360
 80016c0:	40005400 	.word	0x40005400
 80016c4:	00506682 	.word	0x00506682

080016c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016cc:	4b28      	ldr	r3, [pc, #160]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016ce:	4a29      	ldr	r2, [pc, #164]	; (8001774 <MX_SPI1_Init+0xac>)
 80016d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016d2:	4b27      	ldr	r3, [pc, #156]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016e0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016e4:	220f      	movs	r2, #15
 80016e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016fc:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <MX_SPI1_Init+0xa8>)
 80016fe:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001702:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <MX_SPI1_Init+0xa8>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001718:	2200      	movs	r2, #0
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <MX_SPI1_Init+0xa8>)
 800171e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001722:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001726:	2200      	movs	r2, #0
 8001728:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_SPI1_Init+0xa8>)
 800172c:	2200      	movs	r2, #0
 800172e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001732:	2200      	movs	r2, #0
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001738:	2200      	movs	r2, #0
 800173a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_SPI1_Init+0xa8>)
 800173e:	2200      	movs	r2, #0
 8001740:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001744:	2200      	movs	r2, #0
 8001746:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_SPI1_Init+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_SPI1_Init+0xa8>)
 8001756:	2200      	movs	r2, #0
 8001758:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_SPI1_Init+0xa8>)
 800175c:	f00a fcbe 	bl	800c0dc <HAL_SPI_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001766:	f000 fa5b 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	240003b4 	.word	0x240003b4
 8001774:	40013000 	.word	0x40013000

08001778 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <MX_SPI2_Init+0xa8>)
 800177e:	4a29      	ldr	r2, [pc, #164]	; (8001824 <MX_SPI2_Init+0xac>)
 8001780:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <MX_SPI2_Init+0xa8>)
 8001784:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001788:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800178a:	4b25      	ldr	r3, [pc, #148]	; (8001820 <MX_SPI2_Init+0xa8>)
 800178c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001790:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <MX_SPI2_Init+0xa8>)
 8001794:	220f      	movs	r2, #15
 8001796:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <MX_SPI2_Init+0xa8>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017a4:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017ae:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_SPI2_Init+0xa8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_SPI2_Init+0xa8>)
 8001800:	2200      	movs	r2, #0
 8001802:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_SPI2_Init+0xa8>)
 8001806:	2200      	movs	r2, #0
 8001808:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_SPI2_Init+0xa8>)
 800180c:	f00a fc66 	bl	800c0dc <HAL_SPI_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001816:	f000 fa03 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2400043c 	.word	0x2400043c
 8001824:	40003800 	.word	0x40003800

08001828 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b096      	sub	sp, #88	; 0x58
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]
 800184a:	615a      	str	r2, [r3, #20]
 800184c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	222c      	movs	r2, #44	; 0x2c
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f00f fa41 	bl	8010cdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800185a:	4b39      	ldr	r3, [pc, #228]	; (8001940 <MX_TIM1_Init+0x118>)
 800185c:	4a39      	ldr	r2, [pc, #228]	; (8001944 <MX_TIM1_Init+0x11c>)
 800185e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001860:	4b37      	ldr	r3, [pc, #220]	; (8001940 <MX_TIM1_Init+0x118>)
 8001862:	225f      	movs	r2, #95	; 0x5f
 8001864:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <MX_TIM1_Init+0x118>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <MX_TIM1_Init+0x118>)
 800186e:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001872:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <MX_TIM1_Init+0x118>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <MX_TIM1_Init+0x118>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <MX_TIM1_Init+0x118>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001886:	482e      	ldr	r0, [pc, #184]	; (8001940 <MX_TIM1_Init+0x118>)
 8001888:	f00b fba6 	bl	800cfd8 <HAL_TIM_PWM_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001892:	f000 f9c5 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018a6:	4619      	mov	r1, r3
 80018a8:	4825      	ldr	r0, [pc, #148]	; (8001940 <MX_TIM1_Init+0x118>)
 80018aa:	f00c fc77 	bl	800e19c <HAL_TIMEx_MasterConfigSynchronization>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018b4:	f000 f9b4 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b8:	2360      	movs	r3, #96	; 0x60
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80018bc:	f240 13df 	movw	r3, #479	; 0x1df
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c2:	2300      	movs	r3, #0
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018c6:	2300      	movs	r3, #0
 80018c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018da:	2200      	movs	r2, #0
 80018dc:	4619      	mov	r1, r3
 80018de:	4818      	ldr	r0, [pc, #96]	; (8001940 <MX_TIM1_Init+0x118>)
 80018e0:	f00b fde8 	bl	800d4b4 <HAL_TIM_PWM_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80018ea:	f000 f999 	bl	8001c20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001906:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001910:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4807      	ldr	r0, [pc, #28]	; (8001940 <MX_TIM1_Init+0x118>)
 8001924:	f00c fcc8 	bl	800e2b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800192e:	f000 f977 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001932:	4803      	ldr	r0, [pc, #12]	; (8001940 <MX_TIM1_Init+0x118>)
 8001934:	f000 fcae 	bl	8002294 <HAL_TIM_MspPostInit>

}
 8001938:	bf00      	nop
 800193a:	3758      	adds	r7, #88	; 0x58
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	240004c4 	.word	0x240004c4
 8001944:	40010000 	.word	0x40010000

08001948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08e      	sub	sp, #56	; 0x38
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001968:	463b      	mov	r3, r7
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	615a      	str	r2, [r3, #20]
 8001978:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <MX_TIM2_Init+0xe8>)
 800197c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001980:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8001982:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001984:	222f      	movs	r2, #47	; 0x2f
 8001986:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <MX_TIM2_Init+0xe8>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001990:	f640 4234 	movw	r2, #3124	; 0xc34
 8001994:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <MX_TIM2_Init+0xe8>)
 800199e:	2280      	movs	r2, #128	; 0x80
 80019a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a2:	4823      	ldr	r0, [pc, #140]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019a4:	f00a ffeb 	bl	800c97e <HAL_TIM_Base_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019ae:	f000 f937 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019bc:	4619      	mov	r1, r3
 80019be:	481c      	ldr	r0, [pc, #112]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019c0:	f00b fe8c 	bl	800d6dc <HAL_TIM_ConfigClockSource>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019ca:	f000 f929 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019ce:	4818      	ldr	r0, [pc, #96]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019d0:	f00b fb02 	bl	800cfd8 <HAL_TIM_PWM_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019da:	f000 f921 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019de:	2320      	movs	r3, #32
 80019e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	4810      	ldr	r0, [pc, #64]	; (8001a30 <MX_TIM2_Init+0xe8>)
 80019ee:	f00c fbd5 	bl	800e19c <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019f8:	f000 f912 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fc:	2360      	movs	r3, #96	; 0x60
 80019fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	220c      	movs	r2, #12
 8001a10:	4619      	mov	r1, r3
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001a14:	f00b fd4e 	bl	800d4b4 <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a1e:	f000 f8ff 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a22:	4803      	ldr	r0, [pc, #12]	; (8001a30 <MX_TIM2_Init+0xe8>)
 8001a24:	f000 fc36 	bl	8002294 <HAL_TIM_MspPostInit>

}
 8001a28:	bf00      	nop
 8001a2a:	3738      	adds	r7, #56	; 0x38
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	24000510 	.word	0x24000510

08001a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a3a:	4a23      	ldr	r2, [pc, #140]	; (8001ac8 <MX_USART1_UART_Init+0x94>)
 8001a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a40:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a46:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a7c:	4811      	ldr	r0, [pc, #68]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a7e:	f00c fcb7 	bl	800e3f0 <HAL_UART_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a88:	f000 f8ca 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a90:	f00f f811 	bl	8010ab6 <HAL_UARTEx_SetTxFifoThreshold>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a9a:	f000 f8c1 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4808      	ldr	r0, [pc, #32]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001aa2:	f00f f846 	bl	8010b32 <HAL_UARTEx_SetRxFifoThreshold>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001aac:	f000 f8b8 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001ab2:	f00e ffc7 	bl	8010a44 <HAL_UARTEx_DisableFifoMode>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001abc:	f000 f8b0 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2400055c 	.word	0x2400055c
 8001ac8:	40011000 	.word	0x40011000

08001acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <MX_DMA_Init+0x5c>)
 8001ad4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ad8:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <MX_DMA_Init+0x5c>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_DMA_Init+0x5c>)
 8001ae4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	200b      	movs	r0, #11
 8001af6:	f002 fbc2 	bl	800427e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001afa:	200b      	movs	r0, #11
 8001afc:	f002 fbd9 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	200c      	movs	r0, #12
 8001b06:	f002 fbba 	bl	800427e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b0a:	200c      	movs	r0, #12
 8001b0c:	f002 fbd1 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2100      	movs	r1, #0
 8001b14:	2010      	movs	r0, #16
 8001b16:	f002 fbb2 	bl	800427e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b1a:	2010      	movs	r0, #16
 8001b1c:	f002 fbc9 	bl	80042b2 <HAL_NVIC_EnableIRQ>

}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	58024400 	.word	0x58024400

08001b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	4b34      	ldr	r3, [pc, #208]	; (8001c14 <MX_GPIO_Init+0xe8>)
 8001b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b48:	4a32      	ldr	r2, [pc, #200]	; (8001c14 <MX_GPIO_Init+0xe8>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b52:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <MX_GPIO_Init+0xe8>)
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b60:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <MX_GPIO_Init+0xe8>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b66:	4a2b      	ldr	r2, [pc, #172]	; (8001c14 <MX_GPIO_Init+0xe8>)
 8001b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b70:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <MX_GPIO_Init+0xe8>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <MX_GPIO_Init+0xe8>)
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b84:	4a23      	ldr	r2, [pc, #140]	; (8001c14 <MX_GPIO_Init+0xe8>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <MX_GPIO_Init+0xe8>)
 8001b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <MX_GPIO_Init+0xe8>)
 8001b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	; (8001c14 <MX_GPIO_Init+0xe8>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <MX_GPIO_Init+0xe8>)
 8001bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001bc0:	4815      	ldr	r0, [pc, #84]	; (8001c18 <MX_GPIO_Init+0xec>)
 8001bc2:	f005 ff2f 	bl	8007a24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2164      	movs	r1, #100	; 0x64
 8001bca:	4814      	ldr	r0, [pc, #80]	; (8001c1c <MX_GPIO_Init+0xf0>)
 8001bcc:	f005 ff2a 	bl	8007a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001bd0:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001bd4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	480b      	ldr	r0, [pc, #44]	; (8001c18 <MX_GPIO_Init+0xec>)
 8001bea:	f005 fd53 	bl	8007694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001bee:	2364      	movs	r3, #100	; 0x64
 8001bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	; (8001c1c <MX_GPIO_Init+0xf0>)
 8001c06:	f005 fd45 	bl	8007694 <HAL_GPIO_Init>

}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	; 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	58024400 	.word	0x58024400
 8001c18:	58020800 	.word	0x58020800
 8001c1c:	58020400 	.word	0x58020400

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <Error_Handler+0x8>
	...

08001c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_MspInit+0x30>)
 8001c34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c38:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <HAL_MspInit+0x30>)
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_MspInit+0x30>)
 8001c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	58024400 	.word	0x58024400

08001c60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08e      	sub	sp, #56	; 0x38
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a7b      	ldr	r2, [pc, #492]	; (8001e6c <HAL_ADC_MspInit+0x20c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	f040 8091 	bne.w	8001da6 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c84:	4b7a      	ldr	r3, [pc, #488]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001c86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c8a:	4a79      	ldr	r2, [pc, #484]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001c8c:	f043 0320 	orr.w	r3, r3, #32
 8001c90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c94:	4b76      	ldr	r3, [pc, #472]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001c96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	4b73      	ldr	r3, [pc, #460]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca8:	4a71      	ldr	r2, [pc, #452]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb2:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	4b6b      	ldr	r3, [pc, #428]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc6:	4a6a      	ldr	r2, [pc, #424]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd0:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	4b64      	ldr	r3, [pc, #400]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce4:	4a62      	ldr	r2, [pc, #392]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cee:	4b60      	ldr	r3, [pc, #384]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001cfc:	2333      	movs	r3, #51	; 0x33
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d00:	2303      	movs	r3, #3
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4859      	ldr	r0, [pc, #356]	; (8001e74 <HAL_ADC_MspInit+0x214>)
 8001d10:	f005 fcc0 	bl	8007694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001d14:	23ce      	movs	r3, #206	; 0xce
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d24:	4619      	mov	r1, r3
 8001d26:	4854      	ldr	r0, [pc, #336]	; (8001e78 <HAL_ADC_MspInit+0x218>)
 8001d28:	f005 fcb4 	bl	8007694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d30:	2303      	movs	r3, #3
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	484f      	ldr	r0, [pc, #316]	; (8001e7c <HAL_ADC_MspInit+0x21c>)
 8001d40:	f005 fca8 	bl	8007694 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001d44:	4b4e      	ldr	r3, [pc, #312]	; (8001e80 <HAL_ADC_MspInit+0x220>)
 8001d46:	4a4f      	ldr	r2, [pc, #316]	; (8001e84 <HAL_ADC_MspInit+0x224>)
 8001d48:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d4a:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <HAL_ADC_MspInit+0x220>)
 8001d4c:	2209      	movs	r2, #9
 8001d4e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d50:	4b4b      	ldr	r3, [pc, #300]	; (8001e80 <HAL_ADC_MspInit+0x220>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d56:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_ADC_MspInit+0x220>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d5c:	4b48      	ldr	r3, [pc, #288]	; (8001e80 <HAL_ADC_MspInit+0x220>)
 8001d5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d62:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d64:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <HAL_ADC_MspInit+0x220>)
 8001d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d6a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d6c:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_ADC_MspInit+0x220>)
 8001d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d72:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d74:	4b42      	ldr	r3, [pc, #264]	; (8001e80 <HAL_ADC_MspInit+0x220>)
 8001d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d7a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d7c:	4b40      	ldr	r3, [pc, #256]	; (8001e80 <HAL_ADC_MspInit+0x220>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d82:	4b3f      	ldr	r3, [pc, #252]	; (8001e80 <HAL_ADC_MspInit+0x220>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d88:	483d      	ldr	r0, [pc, #244]	; (8001e80 <HAL_ADC_MspInit+0x220>)
 8001d8a:	f002 fe47 	bl	8004a1c <HAL_DMA_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001d94:	f7ff ff44 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a39      	ldr	r2, [pc, #228]	; (8001e80 <HAL_ADC_MspInit+0x220>)
 8001d9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d9e:	4a38      	ldr	r2, [pc, #224]	; (8001e80 <HAL_ADC_MspInit+0x220>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001da4:	e05e      	b.n	8001e64 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a37      	ldr	r2, [pc, #220]	; (8001e88 <HAL_ADC_MspInit+0x228>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d159      	bne.n	8001e64 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001db0:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db6:	4a2e      	ldr	r2, [pc, #184]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001db8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd4:	4a26      	ldr	r2, [pc, #152]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dde:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_ADC_MspInit+0x210>)
 8001de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001dec:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001df0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001df4:	f000 fd3e 	bl	8002874 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001df8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001dfc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001e00:	f000 fd38 	bl	8002874 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <HAL_ADC_MspInit+0x22c>)
 8001e06:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <HAL_ADC_MspInit+0x230>)
 8001e08:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001e0a:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_ADC_MspInit+0x22c>)
 8001e0c:	2273      	movs	r2, #115	; 0x73
 8001e0e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_ADC_MspInit+0x22c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_ADC_MspInit+0x22c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_ADC_MspInit+0x22c>)
 8001e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e22:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_ADC_MspInit+0x22c>)
 8001e26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e2a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_ADC_MspInit+0x22c>)
 8001e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e32:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_ADC_MspInit+0x22c>)
 8001e36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e3a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_ADC_MspInit+0x22c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_ADC_MspInit+0x22c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001e48:	4810      	ldr	r0, [pc, #64]	; (8001e8c <HAL_ADC_MspInit+0x22c>)
 8001e4a:	f002 fde7 	bl	8004a1c <HAL_DMA_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001e54:	f7ff fee4 	bl	8001c20 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <HAL_ADC_MspInit+0x22c>)
 8001e5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_ADC_MspInit+0x22c>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e64:	bf00      	nop
 8001e66:	3738      	adds	r7, #56	; 0x38
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40022000 	.word	0x40022000
 8001e70:	58024400 	.word	0x58024400
 8001e74:	58020800 	.word	0x58020800
 8001e78:	58020000 	.word	0x58020000
 8001e7c:	58020400 	.word	0x58020400
 8001e80:	240001e4 	.word	0x240001e4
 8001e84:	40020010 	.word	0x40020010
 8001e88:	58026000 	.word	0x58026000
 8001e8c:	2400025c 	.word	0x2400025c
 8001e90:	40020028 	.word	0x40020028

08001e94 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a30      	ldr	r2, [pc, #192]	; (8001f74 <HAL_DAC_MspInit+0xe0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d159      	bne.n	8001f6a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <HAL_DAC_MspInit+0xe4>)
 8001eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ebc:	4a2e      	ldr	r2, [pc, #184]	; (8001f78 <HAL_DAC_MspInit+0xe4>)
 8001ebe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ec2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ec6:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <HAL_DAC_MspInit+0xe4>)
 8001ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <HAL_DAC_MspInit+0xe4>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eda:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <HAL_DAC_MspInit+0xe4>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_DAC_MspInit+0xe4>)
 8001ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ef2:	2310      	movs	r3, #16
 8001ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	481d      	ldr	r0, [pc, #116]	; (8001f7c <HAL_DAC_MspInit+0xe8>)
 8001f06:	f005 fbc5 	bl	8007694 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_DAC_MspInit+0xec>)
 8001f0c:	4a1d      	ldr	r2, [pc, #116]	; (8001f84 <HAL_DAC_MspInit+0xf0>)
 8001f0e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_DAC_MspInit+0xec>)
 8001f12:	2243      	movs	r2, #67	; 0x43
 8001f14:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f16:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <HAL_DAC_MspInit+0xec>)
 8001f18:	2240      	movs	r2, #64	; 0x40
 8001f1a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_DAC_MspInit+0xec>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f22:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_DAC_MspInit+0xec>)
 8001f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f28:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_DAC_MspInit+0xec>)
 8001f2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f30:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <HAL_DAC_MspInit+0xec>)
 8001f34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f38:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_DAC_MspInit+0xec>)
 8001f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f40:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_DAC_MspInit+0xec>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <HAL_DAC_MspInit+0xec>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001f4e:	480c      	ldr	r0, [pc, #48]	; (8001f80 <HAL_DAC_MspInit+0xec>)
 8001f50:	f002 fd64 	bl	8004a1c <HAL_DMA_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001f5a:	f7ff fe61 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <HAL_DAC_MspInit+0xec>)
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	4a06      	ldr	r2, [pc, #24]	; (8001f80 <HAL_DAC_MspInit+0xec>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	; 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40007400 	.word	0x40007400
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	58020000 	.word	0x58020000
 8001f80:	240002e8 	.word	0x240002e8
 8001f84:	40020088 	.word	0x40020088

08001f88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b0ba      	sub	sp, #232	; 0xe8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	22c0      	movs	r2, #192	; 0xc0
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00e fe97 	bl	8010cdc <memset>
  if(hi2c->Instance==I2C1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a27      	ldr	r2, [pc, #156]	; (8002050 <HAL_I2C_MspInit+0xc8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d146      	bne.n	8002046 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fb8:	f04f 0208 	mov.w	r2, #8
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fca:	f107 0310 	add.w	r3, r7, #16
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f007 fb86 	bl	80096e0 <HAL_RCCEx_PeriphCLKConfig>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001fda:	f7ff fe21 	bl	8001c20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_I2C_MspInit+0xcc>)
 8001fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe4:	4a1b      	ldr	r2, [pc, #108]	; (8002054 <HAL_I2C_MspInit+0xcc>)
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_I2C_MspInit+0xcc>)
 8001ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ffc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002000:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002004:	2312      	movs	r3, #18
 8002006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002016:	2304      	movs	r3, #4
 8002018:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002020:	4619      	mov	r1, r3
 8002022:	480d      	ldr	r0, [pc, #52]	; (8002058 <HAL_I2C_MspInit+0xd0>)
 8002024:	f005 fb36 	bl	8007694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_I2C_MspInit+0xcc>)
 800202a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_I2C_MspInit+0xcc>)
 8002030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002034:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_I2C_MspInit+0xcc>)
 800203a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800203e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002046:	bf00      	nop
 8002048:	37e8      	adds	r7, #232	; 0xe8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40005400 	.word	0x40005400
 8002054:	58024400 	.word	0x58024400
 8002058:	58020400 	.word	0x58020400

0800205c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b0bc      	sub	sp, #240	; 0xf0
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002074:	f107 0318 	add.w	r3, r7, #24
 8002078:	22c0      	movs	r2, #192	; 0xc0
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f00e fe2d 	bl	8010cdc <memset>
  if(hspi->Instance==SPI1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a4c      	ldr	r2, [pc, #304]	; (80021b8 <HAL_SPI_MspInit+0x15c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d145      	bne.n	8002118 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800208c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002098:	2300      	movs	r3, #0
 800209a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209c:	f107 0318 	add.w	r3, r7, #24
 80020a0:	4618      	mov	r0, r3
 80020a2:	f007 fb1d 	bl	80096e0 <HAL_RCCEx_PeriphCLKConfig>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80020ac:	f7ff fdb8 	bl	8001c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020b0:	4b42      	ldr	r3, [pc, #264]	; (80021bc <HAL_SPI_MspInit+0x160>)
 80020b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020b6:	4a41      	ldr	r2, [pc, #260]	; (80021bc <HAL_SPI_MspInit+0x160>)
 80020b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020c0:	4b3e      	ldr	r3, [pc, #248]	; (80021bc <HAL_SPI_MspInit+0x160>)
 80020c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_SPI_MspInit+0x160>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d4:	4a39      	ldr	r2, [pc, #228]	; (80021bc <HAL_SPI_MspInit+0x160>)
 80020d6:	f043 0302 	orr.w	r3, r3, #2
 80020da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020de:	4b37      	ldr	r3, [pc, #220]	; (80021bc <HAL_SPI_MspInit+0x160>)
 80020e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80020ec:	2318      	movs	r3, #24
 80020ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002104:	2305      	movs	r3, #5
 8002106:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800210e:	4619      	mov	r1, r3
 8002110:	482b      	ldr	r0, [pc, #172]	; (80021c0 <HAL_SPI_MspInit+0x164>)
 8002112:	f005 fabf 	bl	8007694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002116:	e04a      	b.n	80021ae <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a29      	ldr	r2, [pc, #164]	; (80021c4 <HAL_SPI_MspInit+0x168>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d145      	bne.n	80021ae <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002122:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800212e:	2300      	movs	r3, #0
 8002130:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002132:	f107 0318 	add.w	r3, r7, #24
 8002136:	4618      	mov	r0, r3
 8002138:	f007 fad2 	bl	80096e0 <HAL_RCCEx_PeriphCLKConfig>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002142:	f7ff fd6d 	bl	8001c20 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_SPI_MspInit+0x160>)
 8002148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_SPI_MspInit+0x160>)
 800214e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002152:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002156:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_SPI_MspInit+0x160>)
 8002158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800215c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_SPI_MspInit+0x160>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_SPI_MspInit+0x160>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_SPI_MspInit+0x160>)
 8002176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002182:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800219c:	2305      	movs	r3, #5
 800219e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	; (80021c0 <HAL_SPI_MspInit+0x164>)
 80021aa:	f005 fa73 	bl	8007694 <HAL_GPIO_Init>
}
 80021ae:	bf00      	nop
 80021b0:	37f0      	adds	r7, #240	; 0xf0
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40013000 	.word	0x40013000
 80021bc:	58024400 	.word	0x58024400
 80021c0:	58020400 	.word	0x58020400
 80021c4:	40003800 	.word	0x40003800

080021c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1a      	ldr	r2, [pc, #104]	; (8002240 <HAL_TIM_PWM_MspInit+0x78>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d12e      	bne.n	8002238 <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_TIM_PWM_MspInit+0x7c>)
 80021dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021e0:	4a18      	ldr	r2, [pc, #96]	; (8002244 <HAL_TIM_PWM_MspInit+0x7c>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_TIM_PWM_MspInit+0x7c>)
 80021ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2100      	movs	r1, #0
 80021fc:	2018      	movs	r0, #24
 80021fe:	f002 f83e 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002202:	2018      	movs	r0, #24
 8002204:	f002 f855 	bl	80042b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2100      	movs	r1, #0
 800220c:	2019      	movs	r0, #25
 800220e:	f002 f836 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002212:	2019      	movs	r0, #25
 8002214:	f002 f84d 	bl	80042b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002218:	2200      	movs	r2, #0
 800221a:	2100      	movs	r1, #0
 800221c:	201a      	movs	r0, #26
 800221e:	f002 f82e 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002222:	201a      	movs	r0, #26
 8002224:	f002 f845 	bl	80042b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2100      	movs	r1, #0
 800222c:	201b      	movs	r0, #27
 800222e:	f002 f826 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002232:	201b      	movs	r0, #27
 8002234:	f002 f83d 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40010000 	.word	0x40010000
 8002244:	58024400 	.word	0x58024400

08002248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002258:	d116      	bne.n	8002288 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_TIM_Base_MspInit+0x48>)
 800225c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002260:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <HAL_TIM_Base_MspInit+0x48>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_TIM_Base_MspInit+0x48>)
 800226c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	2101      	movs	r1, #1
 800227c:	201c      	movs	r0, #28
 800227e:	f001 fffe 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002282:	201c      	movs	r0, #28
 8002284:	f002 f815 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	58024400 	.word	0x58024400

08002294 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a26      	ldr	r2, [pc, #152]	; (800234c <HAL_TIM_MspPostInit+0xb8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d120      	bne.n	80022f8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	4b26      	ldr	r3, [pc, #152]	; (8002350 <HAL_TIM_MspPostInit+0xbc>)
 80022b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022bc:	4a24      	ldr	r2, [pc, #144]	; (8002350 <HAL_TIM_MspPostInit+0xbc>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <HAL_TIM_MspPostInit+0xbc>)
 80022c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022e6:	2301      	movs	r3, #1
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	4818      	ldr	r0, [pc, #96]	; (8002354 <HAL_TIM_MspPostInit+0xc0>)
 80022f2:	f005 f9cf 	bl	8007694 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022f6:	e024      	b.n	8002342 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002300:	d11f      	bne.n	8002342 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_TIM_MspPostInit+0xbc>)
 8002304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002308:	4a11      	ldr	r2, [pc, #68]	; (8002350 <HAL_TIM_MspPostInit+0xbc>)
 800230a:	f043 0302 	orr.w	r3, r3, #2
 800230e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <HAL_TIM_MspPostInit+0xbc>)
 8002314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002332:	2301      	movs	r3, #1
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	4806      	ldr	r0, [pc, #24]	; (8002358 <HAL_TIM_MspPostInit+0xc4>)
 800233e:	f005 f9a9 	bl	8007694 <HAL_GPIO_Init>
}
 8002342:	bf00      	nop
 8002344:	3728      	adds	r7, #40	; 0x28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40010000 	.word	0x40010000
 8002350:	58024400 	.word	0x58024400
 8002354:	58020000 	.word	0x58020000
 8002358:	58020400 	.word	0x58020400

0800235c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b0ba      	sub	sp, #232	; 0xe8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	22c0      	movs	r2, #192	; 0xc0
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f00e fcad 	bl	8010cdc <memset>
  if(huart->Instance==USART1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a2b      	ldr	r2, [pc, #172]	; (8002434 <HAL_UART_MspInit+0xd8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d14e      	bne.n	800242a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800238c:	f04f 0201 	mov.w	r2, #1
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239e:	f107 0310 	add.w	r3, r7, #16
 80023a2:	4618      	mov	r0, r3
 80023a4:	f007 f99c 	bl	80096e0 <HAL_RCCEx_PeriphCLKConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023ae:	f7ff fc37 	bl	8001c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b2:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_UART_MspInit+0xdc>)
 80023b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023b8:	4a1f      	ldr	r2, [pc, #124]	; (8002438 <HAL_UART_MspInit+0xdc>)
 80023ba:	f043 0310 	orr.w	r3, r3, #16
 80023be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_UART_MspInit+0xdc>)
 80023c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_UART_MspInit+0xdc>)
 80023d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d6:	4a18      	ldr	r2, [pc, #96]	; (8002438 <HAL_UART_MspInit+0xdc>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_UART_MspInit+0xdc>)
 80023e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002408:	2307      	movs	r3, #7
 800240a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002412:	4619      	mov	r1, r3
 8002414:	4809      	ldr	r0, [pc, #36]	; (800243c <HAL_UART_MspInit+0xe0>)
 8002416:	f005 f93d 	bl	8007694 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	2025      	movs	r0, #37	; 0x25
 8002420:	f001 ff2d 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002424:	2025      	movs	r0, #37	; 0x25
 8002426:	f001 ff44 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800242a:	bf00      	nop
 800242c:	37e8      	adds	r7, #232	; 0xe8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40011000 	.word	0x40011000
 8002438:	58024400 	.word	0x58024400
 800243c:	58020000 	.word	0x58020000

08002440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <NMI_Handler+0x4>

08002446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244a:	e7fe      	b.n	800244a <HardFault_Handler+0x4>

0800244c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <MemManage_Handler+0x4>

08002452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002456:	e7fe      	b.n	8002456 <BusFault_Handler+0x4>

08002458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800245c:	e7fe      	b.n	800245c <UsageFault_Handler+0x4>

0800245e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800248c:	f000 f9b6 	bl	80027fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}

08002494 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <DMA1_Stream0_IRQHandler+0x10>)
 800249a:	f003 fde9 	bl	8006070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	240001e4 	.word	0x240001e4

080024a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <DMA1_Stream1_IRQHandler+0x10>)
 80024ae:	f003 fddf 	bl	8006070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2400025c 	.word	0x2400025c

080024bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <DMA1_Stream5_IRQHandler+0x10>)
 80024c2:	f003 fdd5 	bl	8006070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	240002e8 	.word	0x240002e8

080024d0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <TIM1_BRK_IRQHandler+0x10>)
 80024d6:	f00a fee5 	bl	800d2a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	240004c4 	.word	0x240004c4

080024e4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <TIM1_UP_IRQHandler+0x10>)
 80024ea:	f00a fedb 	bl	800d2a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	240004c4 	.word	0x240004c4

080024f8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <TIM1_TRG_COM_IRQHandler+0x10>)
 80024fe:	f00a fed1 	bl	800d2a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	240004c4 	.word	0x240004c4

0800250c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <TIM1_CC_IRQHandler+0x10>)
 8002512:	f00a fec7 	bl	800d2a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	240004c4 	.word	0x240004c4

08002520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <TIM2_IRQHandler+0x10>)
 8002526:	f00a febd 	bl	800d2a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	24000510 	.word	0x24000510

08002534 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <USART1_IRQHandler+0x10>)
 800253a:	f00c f883 	bl	800e644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	2400055c 	.word	0x2400055c

08002548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002550:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <_sbrk+0x5c>)
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <_sbrk+0x60>)
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <_sbrk+0x64>)
 8002566:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <_sbrk+0x68>)
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <_sbrk+0x64>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	429a      	cmp	r2, r3
 8002576:	d207      	bcs.n	8002588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002578:	f00e fb68 	bl	8010c4c <__errno>
 800257c:	4603      	mov	r3, r0
 800257e:	220c      	movs	r2, #12
 8002580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002586:	e009      	b.n	800259c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <_sbrk+0x64>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	4a05      	ldr	r2, [pc, #20]	; (80025ac <_sbrk+0x64>)
 8002598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	24080000 	.word	0x24080000
 80025a8:	00000400 	.word	0x00000400
 80025ac:	24000698 	.word	0x24000698
 80025b0:	240006b0 	.word	0x240006b0

080025b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025b8:	4b37      	ldr	r3, [pc, #220]	; (8002698 <SystemInit+0xe4>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	4a36      	ldr	r2, [pc, #216]	; (8002698 <SystemInit+0xe4>)
 80025c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025c8:	4b34      	ldr	r3, [pc, #208]	; (800269c <SystemInit+0xe8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	2b06      	cmp	r3, #6
 80025d2:	d807      	bhi.n	80025e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025d4:	4b31      	ldr	r3, [pc, #196]	; (800269c <SystemInit+0xe8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 030f 	bic.w	r3, r3, #15
 80025dc:	4a2f      	ldr	r2, [pc, #188]	; (800269c <SystemInit+0xe8>)
 80025de:	f043 0307 	orr.w	r3, r3, #7
 80025e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025e4:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <SystemInit+0xec>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2d      	ldr	r2, [pc, #180]	; (80026a0 <SystemInit+0xec>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <SystemInit+0xec>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025f6:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <SystemInit+0xec>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4929      	ldr	r1, [pc, #164]	; (80026a0 <SystemInit+0xec>)
 80025fc:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <SystemInit+0xf0>)
 80025fe:	4013      	ands	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <SystemInit+0xe8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800260e:	4b23      	ldr	r3, [pc, #140]	; (800269c <SystemInit+0xe8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 030f 	bic.w	r3, r3, #15
 8002616:	4a21      	ldr	r2, [pc, #132]	; (800269c <SystemInit+0xe8>)
 8002618:	f043 0307 	orr.w	r3, r3, #7
 800261c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <SystemInit+0xec>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002624:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <SystemInit+0xec>)
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <SystemInit+0xec>)
 800262c:	2200      	movs	r2, #0
 800262e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <SystemInit+0xec>)
 8002632:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <SystemInit+0xf4>)
 8002634:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <SystemInit+0xec>)
 8002638:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <SystemInit+0xf8>)
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <SystemInit+0xec>)
 800263e:	4a1c      	ldr	r2, [pc, #112]	; (80026b0 <SystemInit+0xfc>)
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <SystemInit+0xec>)
 8002644:	2200      	movs	r2, #0
 8002646:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <SystemInit+0xec>)
 800264a:	4a19      	ldr	r2, [pc, #100]	; (80026b0 <SystemInit+0xfc>)
 800264c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <SystemInit+0xec>)
 8002650:	2200      	movs	r2, #0
 8002652:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <SystemInit+0xec>)
 8002656:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <SystemInit+0xfc>)
 8002658:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <SystemInit+0xec>)
 800265c:	2200      	movs	r2, #0
 800265e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <SystemInit+0xec>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <SystemInit+0xec>)
 8002666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800266a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <SystemInit+0xec>)
 800266e:	2200      	movs	r2, #0
 8002670:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <SystemInit+0x100>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <SystemInit+0x104>)
 8002678:	4013      	ands	r3, r2
 800267a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800267e:	d202      	bcs.n	8002686 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <SystemInit+0x108>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <SystemInit+0x10c>)
 8002688:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800268c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00
 800269c:	52002000 	.word	0x52002000
 80026a0:	58024400 	.word	0x58024400
 80026a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80026a8:	02020200 	.word	0x02020200
 80026ac:	01ff0000 	.word	0x01ff0000
 80026b0:	01010280 	.word	0x01010280
 80026b4:	5c001000 	.word	0x5c001000
 80026b8:	ffff0000 	.word	0xffff0000
 80026bc:	51008108 	.word	0x51008108
 80026c0:	52004000 	.word	0x52004000

080026c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026c8:	f7ff ff74 	bl	80025b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026cc:	480c      	ldr	r0, [pc, #48]	; (8002700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ce:	490d      	ldr	r1, [pc, #52]	; (8002704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026d0:	4a0d      	ldr	r2, [pc, #52]	; (8002708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d4:	e002      	b.n	80026dc <LoopCopyDataInit>

080026d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026da:	3304      	adds	r3, #4

080026dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e0:	d3f9      	bcc.n	80026d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026e4:	4c0a      	ldr	r4, [pc, #40]	; (8002710 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e8:	e001      	b.n	80026ee <LoopFillZerobss>

080026ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026ec:	3204      	adds	r2, #4

080026ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f0:	d3fb      	bcc.n	80026ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026f2:	f00e fab1 	bl	8010c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f6:	f7fe fc91 	bl	800101c <main>
  bx  lr
 80026fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002700:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002704:	240000fc 	.word	0x240000fc
  ldr r2, =_sidata
 8002708:	08010f68 	.word	0x08010f68
  ldr r2, =_sbss
 800270c:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8002710:	240006b0 	.word	0x240006b0

08002714 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002714:	e7fe      	b.n	8002714 <ADC3_IRQHandler>
	...

08002718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800271e:	2003      	movs	r0, #3
 8002720:	f001 fda2 	bl	8004268 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002724:	f006 fe06 	bl	8009334 <HAL_RCC_GetSysClockFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <HAL_Init+0x68>)
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	4913      	ldr	r1, [pc, #76]	; (8002784 <HAL_Init+0x6c>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
 8002740:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <HAL_Init+0x68>)
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <HAL_Init+0x6c>)
 800274c:	5cd3      	ldrb	r3, [r2, r3]
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
 8002758:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <HAL_Init+0x70>)
 800275a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800275c:	4a0b      	ldr	r2, [pc, #44]	; (800278c <HAL_Init+0x74>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002762:	200f      	movs	r0, #15
 8002764:	f000 f814 	bl	8002790 <HAL_InitTick>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e002      	b.n	8002778 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002772:	f7ff fa5b 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	58024400 	.word	0x58024400
 8002784:	08010f18 	.word	0x08010f18
 8002788:	2400008c 	.word	0x2400008c
 800278c:	24000088 	.word	0x24000088

08002790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002798:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_InitTick+0x60>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e021      	b.n	80027e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80027a4:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <HAL_InitTick+0x64>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_InitTick+0x60>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 fd87 	bl	80042ce <HAL_SYSTICK_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e00e      	b.n	80027e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b0f      	cmp	r3, #15
 80027ce:	d80a      	bhi.n	80027e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d0:	2200      	movs	r2, #0
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d8:	f001 fd51 	bl	800427e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027dc:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <HAL_InitTick+0x68>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e000      	b.n	80027e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	24000094 	.word	0x24000094
 80027f4:	24000088 	.word	0x24000088
 80027f8:	24000090 	.word	0x24000090

080027fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_IncTick+0x20>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_IncTick+0x24>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4413      	add	r3, r2
 800280c:	4a04      	ldr	r2, [pc, #16]	; (8002820 <HAL_IncTick+0x24>)
 800280e:	6013      	str	r3, [r2, #0]
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	24000094 	.word	0x24000094
 8002820:	2400069c 	.word	0x2400069c

08002824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return uwTick;
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <HAL_GetTick+0x14>)
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	2400069c 	.word	0x2400069c

0800283c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_SuspendTick+0x1c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_SuspendTick+0x1c>)
 8002846:	f023 0302 	bic.w	r3, r3, #2
 800284a:	6013      	str	r3, [r2, #0]
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000e010 	.word	0xe000e010

0800285c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_GetREVID+0x14>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0c1b      	lsrs	r3, r3, #16
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	5c001000 	.word	0x5c001000

08002874 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	43db      	mvns	r3, r3
 8002886:	401a      	ands	r2, r3
 8002888:	4904      	ldr	r1, [pc, #16]	; (800289c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	58000400 	.word	0x58000400

080028a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	609a      	str	r2, [r3, #8]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	609a      	str	r2, [r3, #8]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3360      	adds	r3, #96	; 0x60
 800291a:	461a      	mov	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	430b      	orrs	r3, r1
 8002936:	431a      	orrs	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	431a      	orrs	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	611a      	str	r2, [r3, #16]
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800297a:	b480      	push	{r7}
 800297c:	b087      	sub	sp, #28
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3360      	adds	r3, #96	; 0x60
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	431a      	orrs	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	601a      	str	r2, [r3, #0]
  }
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b087      	sub	sp, #28
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3330      	adds	r3, #48	; 0x30
 80029e6:	461a      	mov	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	4413      	add	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	211f      	movs	r1, #31
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	401a      	ands	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	f003 011f 	and.w	r1, r3, #31
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a22:	bf00      	nop
 8002a24:	371c      	adds	r7, #28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f023 0203 	bic.w	r2, r3, #3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3314      	adds	r3, #20
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	0e5b      	lsrs	r3, r3, #25
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	4413      	add	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	0d1b      	lsrs	r3, r3, #20
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	2107      	movs	r1, #7
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	401a      	ands	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	0d1b      	lsrs	r3, r3, #20
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a9e:	bf00      	nop
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0318 	and.w	r3, r3, #24
 8002ace:	4908      	ldr	r1, [pc, #32]	; (8002af0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ad0:	40d9      	lsrs	r1, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	400b      	ands	r3, r1
 8002ad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ada:	431a      	orrs	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	000fffff 	.word	0x000fffff

08002af4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 031f 	and.w	r3, r3, #31
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6093      	str	r3, [r2, #8]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	5fffffc0 	.word	0x5fffffc0

08002b34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b48:	d101      	bne.n	8002b4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	6fffffc0 	.word	0x6fffffc0

08002b84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b98:	d101      	bne.n	8002b9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <LL_ADC_Enable+0x24>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	f043 0201 	orr.w	r2, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	7fffffc0 	.word	0x7fffffc0

08002bd4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <LL_ADC_Disable+0x24>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	f043 0202 	orr.w	r2, r3, #2
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	7fffffc0 	.word	0x7fffffc0

08002bfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <LL_ADC_IsEnabled+0x18>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <LL_ADC_IsEnabled+0x1a>
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d101      	bne.n	8002c3a <LL_ADC_IsDisableOngoing+0x18>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <LL_ADC_IsDisableOngoing+0x1a>
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <LL_ADC_REG_StartConversion+0x24>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	f043 0204 	orr.w	r2, r3, #4
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	7fffffc0 	.word	0x7fffffc0

08002c70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d101      	bne.n	8002c88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d101      	bne.n	8002cae <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b089      	sub	sp, #36	; 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e18f      	b.n	8002ff6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d109      	bne.n	8002cf8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7fe ffbb 	bl	8001c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff19 	bl	8002b34 <LL_ADC_IsDeepPowerDownEnabled>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff feff 	bl	8002b10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff34 	bl	8002b84 <LL_ADC_IsInternalRegulatorEnabled>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d114      	bne.n	8002d4c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff ff18 	bl	8002b5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d2c:	4b87      	ldr	r3, [pc, #540]	; (8002f4c <HAL_ADC_Init+0x290>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	099b      	lsrs	r3, r3, #6
 8002d32:	4a87      	ldr	r2, [pc, #540]	; (8002f50 <HAL_ADC_Init+0x294>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d3e:	e002      	b.n	8002d46 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f9      	bne.n	8002d40 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff17 	bl	8002b84 <LL_ADC_IsInternalRegulatorEnabled>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10d      	bne.n	8002d78 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f043 0210 	orr.w	r2, r3, #16
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff77 	bl	8002c70 <LL_ADC_REG_IsConversionOngoing>
 8002d82:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f040 8129 	bne.w	8002fe4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f040 8125 	bne.w	8002fe4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002da2:	f043 0202 	orr.w	r2, r3, #2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff ff24 	bl	8002bfc <LL_ADC_IsEnabled>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d136      	bne.n	8002e28 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a65      	ldr	r2, [pc, #404]	; (8002f54 <HAL_ADC_Init+0x298>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d004      	beq.n	8002dce <HAL_ADC_Init+0x112>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a63      	ldr	r2, [pc, #396]	; (8002f58 <HAL_ADC_Init+0x29c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d10e      	bne.n	8002dec <HAL_ADC_Init+0x130>
 8002dce:	4861      	ldr	r0, [pc, #388]	; (8002f54 <HAL_ADC_Init+0x298>)
 8002dd0:	f7ff ff14 	bl	8002bfc <LL_ADC_IsEnabled>
 8002dd4:	4604      	mov	r4, r0
 8002dd6:	4860      	ldr	r0, [pc, #384]	; (8002f58 <HAL_ADC_Init+0x29c>)
 8002dd8:	f7ff ff10 	bl	8002bfc <LL_ADC_IsEnabled>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4323      	orrs	r3, r4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf0c      	ite	eq
 8002de4:	2301      	moveq	r3, #1
 8002de6:	2300      	movne	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e008      	b.n	8002dfe <HAL_ADC_Init+0x142>
 8002dec:	485b      	ldr	r0, [pc, #364]	; (8002f5c <HAL_ADC_Init+0x2a0>)
 8002dee:	f7ff ff05 	bl	8002bfc <LL_ADC_IsEnabled>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d012      	beq.n	8002e28 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a53      	ldr	r2, [pc, #332]	; (8002f54 <HAL_ADC_Init+0x298>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d004      	beq.n	8002e16 <HAL_ADC_Init+0x15a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a51      	ldr	r2, [pc, #324]	; (8002f58 <HAL_ADC_Init+0x29c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_Init+0x15e>
 8002e16:	4a52      	ldr	r2, [pc, #328]	; (8002f60 <HAL_ADC_Init+0x2a4>)
 8002e18:	e000      	b.n	8002e1c <HAL_ADC_Init+0x160>
 8002e1a:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <HAL_ADC_Init+0x2a8>)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f7ff fd3c 	bl	80028a0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002e28:	f7ff fd18 	bl	800285c <HAL_GetREVID>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d914      	bls.n	8002e60 <HAL_ADC_Init+0x1a4>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	d110      	bne.n	8002e60 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7d5b      	ldrb	r3, [r3, #21]
 8002e42:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e48:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e4e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7f1b      	ldrb	r3, [r3, #28]
 8002e54:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e56:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e58:	f043 030c 	orr.w	r3, r3, #12
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	e00d      	b.n	8002e7c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	7d5b      	ldrb	r3, [r3, #21]
 8002e64:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e6a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e70:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	7f1b      	ldrb	r3, [r3, #28]
 8002e76:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	7f1b      	ldrb	r3, [r3, #28]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d106      	bne.n	8002e92 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	045b      	lsls	r3, r3, #17
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <HAL_ADC_Init+0x2ac>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	69b9      	ldr	r1, [r7, #24]
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fed2 	bl	8002c70 <LL_ADC_REG_IsConversionOngoing>
 8002ecc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fedf 	bl	8002c96 <LL_ADC_INJ_IsConversionOngoing>
 8002ed8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d15f      	bne.n	8002fa0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d15c      	bne.n	8002fa0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7d1b      	ldrb	r3, [r3, #20]
 8002eea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <HAL_ADC_Init+0x2b0>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	69b9      	ldr	r1, [r7, #24]
 8002f04:	430b      	orrs	r3, r1
 8002f06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d130      	bne.n	8002f74 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <HAL_ADC_Init+0x2b4>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f26:	3a01      	subs	r2, #1
 8002f28:	0411      	lsls	r1, r2, #16
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f34:	4311      	orrs	r1, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	611a      	str	r2, [r3, #16]
 8002f48:	e01c      	b.n	8002f84 <HAL_ADC_Init+0x2c8>
 8002f4a:	bf00      	nop
 8002f4c:	24000088 	.word	0x24000088
 8002f50:	053e2d63 	.word	0x053e2d63
 8002f54:	40022000 	.word	0x40022000
 8002f58:	40022100 	.word	0x40022100
 8002f5c:	58026000 	.word	0x58026000
 8002f60:	40022300 	.word	0x40022300
 8002f64:	58026300 	.word	0x58026300
 8002f68:	fff0c003 	.word	0xfff0c003
 8002f6c:	ffffbffc 	.word	0xffffbffc
 8002f70:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fdec 	bl	8003b78 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f023 010f 	bic.w	r1, r3, #15
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	1e5a      	subs	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
 8002fc0:	e007      	b.n	8002fd2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 020f 	bic.w	r2, r2, #15
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	f043 0201 	orr.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
 8002fe2:	e007      	b.n	8002ff4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe8:	f043 0210 	orr.w	r2, r3, #16
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ff4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	; 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd90      	pop	{r4, r7, pc}
 8002ffe:	bf00      	nop

08003000 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a55      	ldr	r2, [pc, #340]	; (8003168 <HAL_ADC_Start_DMA+0x168>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <HAL_ADC_Start_DMA+0x20>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a54      	ldr	r2, [pc, #336]	; (800316c <HAL_ADC_Start_DMA+0x16c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_ADC_Start_DMA+0x24>
 8003020:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_ADC_Start_DMA+0x170>)
 8003022:	e000      	b.n	8003026 <HAL_ADC_Start_DMA+0x26>
 8003024:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_ADC_Start_DMA+0x174>)
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fd64 	bl	8002af4 <LL_ADC_GetMultimode>
 800302c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fe1c 	bl	8002c70 <LL_ADC_REG_IsConversionOngoing>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	f040 808c 	bne.w	8003158 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_ADC_Start_DMA+0x4e>
 800304a:	2302      	movs	r3, #2
 800304c:	e087      	b.n	800315e <HAL_ADC_Start_DMA+0x15e>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d002      	beq.n	8003068 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b09      	cmp	r3, #9
 8003066:	d170      	bne.n	800314a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fc07 	bl	800387c <ADC_Enable>
 800306e:	4603      	mov	r3, r0
 8003070:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d163      	bne.n	8003140 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800307c:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <HAL_ADC_Start_DMA+0x178>)
 800307e:	4013      	ands	r3, r2
 8003080:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a37      	ldr	r2, [pc, #220]	; (800316c <HAL_ADC_Start_DMA+0x16c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d002      	beq.n	8003098 <HAL_ADC_Start_DMA+0x98>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	e000      	b.n	800309a <HAL_ADC_Start_DMA+0x9a>
 8003098:	4b33      	ldr	r3, [pc, #204]	; (8003168 <HAL_ADC_Start_DMA+0x168>)
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	4293      	cmp	r3, r2
 80030a0:	d002      	beq.n	80030a8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d105      	bne.n	80030b4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d006      	beq.n	80030ce <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c4:	f023 0206 	bic.w	r2, r3, #6
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	659a      	str	r2, [r3, #88]	; 0x58
 80030cc:	e002      	b.n	80030d4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d8:	4a28      	ldr	r2, [pc, #160]	; (800317c <HAL_ADC_Start_DMA+0x17c>)
 80030da:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e0:	4a27      	ldr	r2, [pc, #156]	; (8003180 <HAL_ADC_Start_DMA+0x180>)
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e8:	4a26      	ldr	r2, [pc, #152]	; (8003184 <HAL_ADC_Start_DMA+0x184>)
 80030ea:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	221c      	movs	r2, #28
 80030f2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0210 	orr.w	r2, r2, #16
 800310a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f7ff fc89 	bl	8002a2e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3340      	adds	r3, #64	; 0x40
 8003126:	4619      	mov	r1, r3
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f001 ffd2 	bl	80050d4 <HAL_DMA_Start_IT>
 8003130:	4603      	mov	r3, r0
 8003132:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fd85 	bl	8002c48 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800313e:	e00d      	b.n	800315c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003148:	e008      	b.n	800315c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003156:	e001      	b.n	800315c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003158:	2302      	movs	r3, #2
 800315a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800315c:	7dfb      	ldrb	r3, [r7, #23]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40022000 	.word	0x40022000
 800316c:	40022100 	.word	0x40022100
 8003170:	40022300 	.word	0x40022300
 8003174:	58026300 	.word	0x58026300
 8003178:	fffff0fe 	.word	0xfffff0fe
 800317c:	08003a4f 	.word	0x08003a4f
 8003180:	08003b27 	.word	0x08003b27
 8003184:	08003b43 	.word	0x08003b43

08003188 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b0a1      	sub	sp, #132	; 0x84
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a65      	ldr	r2, [pc, #404]	; (8003374 <HAL_ADC_ConfigChannel+0x1b0>)
 80031de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x2a>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e32e      	b.n	800384c <HAL_ADC_ConfigChannel+0x688>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fd38 	bl	8002c70 <LL_ADC_REG_IsConversionOngoing>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 8313 	bne.w	800382e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	db2c      	blt.n	800326a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003218:	2b00      	cmp	r3, #0
 800321a:	d108      	bne.n	800322e <HAL_ADC_ConfigChannel+0x6a>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	2201      	movs	r2, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	e016      	b.n	800325c <HAL_ADC_ConfigChannel+0x98>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800323c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800323e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003246:	2320      	movs	r3, #32
 8003248:	e003      	b.n	8003252 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800324a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2201      	movs	r2, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	69d1      	ldr	r1, [r2, #28]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	430b      	orrs	r3, r1
 8003268:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	f7ff fbad 	bl	80029d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fcf5 	bl	8002c70 <LL_ADC_REG_IsConversionOngoing>
 8003286:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fd02 	bl	8002c96 <LL_ADC_INJ_IsConversionOngoing>
 8003292:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 80b8 	bne.w	800340c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800329c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 80b4 	bne.w	800340c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	6819      	ldr	r1, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	461a      	mov	r2, r3
 80032b2:	f7ff fbcf 	bl	8002a54 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032b6:	4b30      	ldr	r3, [pc, #192]	; (8003378 <HAL_ADC_ConfigChannel+0x1b4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80032be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032c2:	d10b      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x118>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	089b      	lsrs	r3, r3, #2
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	e01d      	b.n	8003318 <HAL_ADC_ConfigChannel+0x154>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10b      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x13e>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	e00a      	b.n	8003318 <HAL_ADC_ConfigChannel+0x154>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b04      	cmp	r3, #4
 8003320:	d02c      	beq.n	800337c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6919      	ldr	r1, [r3, #16]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003330:	f7ff faea 	bl	8002908 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6919      	ldr	r1, [r3, #16]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	7e5b      	ldrb	r3, [r3, #25]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d102      	bne.n	800334a <HAL_ADC_ConfigChannel+0x186>
 8003344:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003348:	e000      	b.n	800334c <HAL_ADC_ConfigChannel+0x188>
 800334a:	2300      	movs	r3, #0
 800334c:	461a      	mov	r2, r3
 800334e:	f7ff fb14 	bl	800297a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6919      	ldr	r1, [r3, #16]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	7e1b      	ldrb	r3, [r3, #24]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d102      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x1a4>
 8003362:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003366:	e000      	b.n	800336a <HAL_ADC_ConfigChannel+0x1a6>
 8003368:	2300      	movs	r3, #0
 800336a:	461a      	mov	r2, r3
 800336c:	f7ff faec 	bl	8002948 <LL_ADC_SetDataRightShift>
 8003370:	e04c      	b.n	800340c <HAL_ADC_ConfigChannel+0x248>
 8003372:	bf00      	nop
 8003374:	47ff0000 	.word	0x47ff0000
 8003378:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003382:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	069b      	lsls	r3, r3, #26
 800338c:	429a      	cmp	r2, r3
 800338e:	d107      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800339e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	069b      	lsls	r3, r3, #26
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d107      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033c2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	069b      	lsls	r3, r3, #26
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d107      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033e6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	069b      	lsls	r3, r3, #26
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d107      	bne.n	800340c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800340a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fbf3 	bl	8002bfc <LL_ADC_IsEnabled>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 8211 	bne.w	8003840 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	461a      	mov	r2, r3
 800342c:	f7ff fb3e 	bl	8002aac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4aa1      	ldr	r2, [pc, #644]	; (80036bc <HAL_ADC_ConfigChannel+0x4f8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	f040 812e 	bne.w	8003698 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10b      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x2a0>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0e9b      	lsrs	r3, r3, #26
 8003452:	3301      	adds	r3, #1
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2b09      	cmp	r3, #9
 800345a:	bf94      	ite	ls
 800345c:	2301      	movls	r3, #1
 800345e:	2300      	movhi	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	e019      	b.n	8003498 <HAL_ADC_ConfigChannel+0x2d4>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800346c:	fa93 f3a3 	rbit	r3, r3
 8003470:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003474:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800347c:	2320      	movs	r3, #32
 800347e:	e003      	b.n	8003488 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	3301      	adds	r3, #1
 800348a:	f003 031f 	and.w	r3, r3, #31
 800348e:	2b09      	cmp	r3, #9
 8003490:	bf94      	ite	ls
 8003492:	2301      	movls	r3, #1
 8003494:	2300      	movhi	r3, #0
 8003496:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003498:	2b00      	cmp	r3, #0
 800349a:	d079      	beq.n	8003590 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x2f4>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	0e9b      	lsrs	r3, r3, #26
 80034ae:	3301      	adds	r3, #1
 80034b0:	069b      	lsls	r3, r3, #26
 80034b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b6:	e015      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x320>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80034c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80034ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80034d0:	2320      	movs	r3, #32
 80034d2:	e003      	b.n	80034dc <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80034d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	069b      	lsls	r3, r3, #26
 80034e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x340>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	0e9b      	lsrs	r3, r3, #26
 80034f6:	3301      	adds	r3, #1
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	e017      	b.n	8003534 <HAL_ADC_ConfigChannel+0x370>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003514:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800351c:	2320      	movs	r3, #32
 800351e:	e003      	b.n	8003528 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	3301      	adds	r3, #1
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2101      	movs	r1, #1
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	ea42 0103 	orr.w	r1, r2, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_ADC_ConfigChannel+0x396>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	0e9b      	lsrs	r3, r3, #26
 800354a:	3301      	adds	r3, #1
 800354c:	f003 021f 	and.w	r2, r3, #31
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	051b      	lsls	r3, r3, #20
 8003558:	e018      	b.n	800358c <HAL_ADC_ConfigChannel+0x3c8>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800356c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003572:	2320      	movs	r3, #32
 8003574:	e003      	b.n	800357e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003578:	fab3 f383 	clz	r3, r3
 800357c:	b2db      	uxtb	r3, r3
 800357e:	3301      	adds	r3, #1
 8003580:	f003 021f 	and.w	r2, r3, #31
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800358c:	430b      	orrs	r3, r1
 800358e:	e07e      	b.n	800368e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003598:	2b00      	cmp	r3, #0
 800359a:	d107      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x3e8>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0e9b      	lsrs	r3, r3, #26
 80035a2:	3301      	adds	r3, #1
 80035a4:	069b      	lsls	r3, r3, #26
 80035a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035aa:	e015      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x414>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80035c4:	2320      	movs	r3, #32
 80035c6:	e003      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	069b      	lsls	r3, r3, #26
 80035d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x434>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0e9b      	lsrs	r3, r3, #26
 80035ea:	3301      	adds	r3, #1
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	e017      	b.n	8003628 <HAL_ADC_ConfigChannel+0x464>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	61bb      	str	r3, [r7, #24]
  return result;
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003610:	2320      	movs	r3, #32
 8003612:	e003      	b.n	800361c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	3301      	adds	r3, #1
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	2101      	movs	r1, #1
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	ea42 0103 	orr.w	r1, r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10d      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x490>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	0e9b      	lsrs	r3, r3, #26
 800363e:	3301      	adds	r3, #1
 8003640:	f003 021f 	and.w	r2, r3, #31
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	3b1e      	subs	r3, #30
 800364c:	051b      	lsls	r3, r3, #20
 800364e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003652:	e01b      	b.n	800368c <HAL_ADC_ConfigChannel+0x4c8>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	60fb      	str	r3, [r7, #12]
  return result;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800366c:	2320      	movs	r3, #32
 800366e:	e003      	b.n	8003678 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3301      	adds	r3, #1
 800367a:	f003 021f 	and.w	r2, r3, #31
 800367e:	4613      	mov	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4413      	add	r3, r2
 8003684:	3b1e      	subs	r3, #30
 8003686:	051b      	lsls	r3, r3, #20
 8003688:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800368c:	430b      	orrs	r3, r1
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	6892      	ldr	r2, [r2, #8]
 8003692:	4619      	mov	r1, r3
 8003694:	f7ff f9de 	bl	8002a54 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	f280 80cf 	bge.w	8003840 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a06      	ldr	r2, [pc, #24]	; (80036c0 <HAL_ADC_ConfigChannel+0x4fc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_ADC_ConfigChannel+0x4f2>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <HAL_ADC_ConfigChannel+0x500>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10a      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x508>
 80036b6:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <HAL_ADC_ConfigChannel+0x504>)
 80036b8:	e009      	b.n	80036ce <HAL_ADC_ConfigChannel+0x50a>
 80036ba:	bf00      	nop
 80036bc:	47ff0000 	.word	0x47ff0000
 80036c0:	40022000 	.word	0x40022000
 80036c4:	40022100 	.word	0x40022100
 80036c8:	40022300 	.word	0x40022300
 80036cc:	4b61      	ldr	r3, [pc, #388]	; (8003854 <HAL_ADC_ConfigChannel+0x690>)
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff f90c 	bl	80028ec <LL_ADC_GetCommonPathInternalCh>
 80036d4:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a5f      	ldr	r2, [pc, #380]	; (8003858 <HAL_ADC_ConfigChannel+0x694>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_ADC_ConfigChannel+0x526>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a5d      	ldr	r2, [pc, #372]	; (800385c <HAL_ADC_ConfigChannel+0x698>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10e      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x544>
 80036ea:	485b      	ldr	r0, [pc, #364]	; (8003858 <HAL_ADC_ConfigChannel+0x694>)
 80036ec:	f7ff fa86 	bl	8002bfc <LL_ADC_IsEnabled>
 80036f0:	4604      	mov	r4, r0
 80036f2:	485a      	ldr	r0, [pc, #360]	; (800385c <HAL_ADC_ConfigChannel+0x698>)
 80036f4:	f7ff fa82 	bl	8002bfc <LL_ADC_IsEnabled>
 80036f8:	4603      	mov	r3, r0
 80036fa:	4323      	orrs	r3, r4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	e008      	b.n	800371a <HAL_ADC_ConfigChannel+0x556>
 8003708:	4855      	ldr	r0, [pc, #340]	; (8003860 <HAL_ADC_ConfigChannel+0x69c>)
 800370a:	f7ff fa77 	bl	8002bfc <LL_ADC_IsEnabled>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d07d      	beq.n	800381a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a50      	ldr	r2, [pc, #320]	; (8003864 <HAL_ADC_ConfigChannel+0x6a0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d130      	bne.n	800378a <HAL_ADC_ConfigChannel+0x5c6>
 8003728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d12b      	bne.n	800378a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a4a      	ldr	r2, [pc, #296]	; (8003860 <HAL_ADC_ConfigChannel+0x69c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	f040 8081 	bne.w	8003840 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a45      	ldr	r2, [pc, #276]	; (8003858 <HAL_ADC_ConfigChannel+0x694>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_ADC_ConfigChannel+0x58e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a43      	ldr	r2, [pc, #268]	; (800385c <HAL_ADC_ConfigChannel+0x698>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d101      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x592>
 8003752:	4a45      	ldr	r2, [pc, #276]	; (8003868 <HAL_ADC_ConfigChannel+0x6a4>)
 8003754:	e000      	b.n	8003758 <HAL_ADC_ConfigChannel+0x594>
 8003756:	4a3f      	ldr	r2, [pc, #252]	; (8003854 <HAL_ADC_ConfigChannel+0x690>)
 8003758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800375e:	4619      	mov	r1, r3
 8003760:	4610      	mov	r0, r2
 8003762:	f7ff f8b0 	bl	80028c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003766:	4b41      	ldr	r3, [pc, #260]	; (800386c <HAL_ADC_ConfigChannel+0x6a8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	099b      	lsrs	r3, r3, #6
 800376c:	4a40      	ldr	r2, [pc, #256]	; (8003870 <HAL_ADC_ConfigChannel+0x6ac>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	099b      	lsrs	r3, r3, #6
 8003774:	3301      	adds	r3, #1
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800377a:	e002      	b.n	8003782 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	3b01      	subs	r3, #1
 8003780:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f9      	bne.n	800377c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003788:	e05a      	b.n	8003840 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a39      	ldr	r2, [pc, #228]	; (8003874 <HAL_ADC_ConfigChannel+0x6b0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d11e      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x60e>
 8003794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d119      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a2f      	ldr	r2, [pc, #188]	; (8003860 <HAL_ADC_ConfigChannel+0x69c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d14b      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a2a      	ldr	r2, [pc, #168]	; (8003858 <HAL_ADC_ConfigChannel+0x694>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d004      	beq.n	80037bc <HAL_ADC_ConfigChannel+0x5f8>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a29      	ldr	r2, [pc, #164]	; (800385c <HAL_ADC_ConfigChannel+0x698>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x5fc>
 80037bc:	4a2a      	ldr	r2, [pc, #168]	; (8003868 <HAL_ADC_ConfigChannel+0x6a4>)
 80037be:	e000      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x5fe>
 80037c0:	4a24      	ldr	r2, [pc, #144]	; (8003854 <HAL_ADC_ConfigChannel+0x690>)
 80037c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f7ff f87b 	bl	80028c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037d0:	e036      	b.n	8003840 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a28      	ldr	r2, [pc, #160]	; (8003878 <HAL_ADC_ConfigChannel+0x6b4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d131      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x67c>
 80037dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d12c      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <HAL_ADC_ConfigChannel+0x69c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d127      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a18      	ldr	r2, [pc, #96]	; (8003858 <HAL_ADC_ConfigChannel+0x694>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <HAL_ADC_ConfigChannel+0x640>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a17      	ldr	r2, [pc, #92]	; (800385c <HAL_ADC_ConfigChannel+0x698>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x644>
 8003804:	4a18      	ldr	r2, [pc, #96]	; (8003868 <HAL_ADC_ConfigChannel+0x6a4>)
 8003806:	e000      	b.n	800380a <HAL_ADC_ConfigChannel+0x646>
 8003808:	4a12      	ldr	r2, [pc, #72]	; (8003854 <HAL_ADC_ConfigChannel+0x690>)
 800380a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f7ff f857 	bl	80028c6 <LL_ADC_SetCommonPathInternalCh>
 8003818:	e012      	b.n	8003840 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381e:	f043 0220 	orr.w	r2, r3, #32
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800382c:	e008      	b.n	8003840 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003832:	f043 0220 	orr.w	r2, r3, #32
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003848:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800384c:	4618      	mov	r0, r3
 800384e:	3784      	adds	r7, #132	; 0x84
 8003850:	46bd      	mov	sp, r7
 8003852:	bd90      	pop	{r4, r7, pc}
 8003854:	58026300 	.word	0x58026300
 8003858:	40022000 	.word	0x40022000
 800385c:	40022100 	.word	0x40022100
 8003860:	58026000 	.word	0x58026000
 8003864:	cb840000 	.word	0xcb840000
 8003868:	40022300 	.word	0x40022300
 800386c:	24000088 	.word	0x24000088
 8003870:	053e2d63 	.word	0x053e2d63
 8003874:	c7520000 	.word	0xc7520000
 8003878:	cfb80000 	.word	0xcfb80000

0800387c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff f9b7 	bl	8002bfc <LL_ADC_IsEnabled>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d16e      	bne.n	8003972 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	4b38      	ldr	r3, [pc, #224]	; (800397c <ADC_Enable+0x100>)
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00d      	beq.n	80038be <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	f043 0210 	orr.w	r2, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	f043 0201 	orr.w	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e05a      	b.n	8003974 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff f972 	bl	8002bac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038c8:	f7fe ffac 	bl	8002824 <HAL_GetTick>
 80038cc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a2b      	ldr	r2, [pc, #172]	; (8003980 <ADC_Enable+0x104>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <ADC_Enable+0x66>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a29      	ldr	r2, [pc, #164]	; (8003984 <ADC_Enable+0x108>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d101      	bne.n	80038e6 <ADC_Enable+0x6a>
 80038e2:	4b29      	ldr	r3, [pc, #164]	; (8003988 <ADC_Enable+0x10c>)
 80038e4:	e000      	b.n	80038e8 <ADC_Enable+0x6c>
 80038e6:	4b29      	ldr	r3, [pc, #164]	; (800398c <ADC_Enable+0x110>)
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff f903 	bl	8002af4 <LL_ADC_GetMultimode>
 80038ee:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a23      	ldr	r2, [pc, #140]	; (8003984 <ADC_Enable+0x108>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d002      	beq.n	8003900 <ADC_Enable+0x84>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	e000      	b.n	8003902 <ADC_Enable+0x86>
 8003900:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <ADC_Enable+0x104>)
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	4293      	cmp	r3, r2
 8003908:	d02c      	beq.n	8003964 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d130      	bne.n	8003972 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003910:	e028      	b.n	8003964 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff f970 	bl	8002bfc <LL_ADC_IsEnabled>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d104      	bne.n	800392c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff f940 	bl	8002bac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800392c:	f7fe ff7a 	bl	8002824 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d914      	bls.n	8003964 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d00d      	beq.n	8003964 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394c:	f043 0210 	orr.w	r2, r3, #16
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	f043 0201 	orr.w	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e007      	b.n	8003974 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b01      	cmp	r3, #1
 8003970:	d1cf      	bne.n	8003912 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	8000003f 	.word	0x8000003f
 8003980:	40022000 	.word	0x40022000
 8003984:	40022100 	.word	0x40022100
 8003988:	40022300 	.word	0x40022300
 800398c:	58026300 	.word	0x58026300

08003990 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff f940 	bl	8002c22 <LL_ADC_IsDisableOngoing>
 80039a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff f927 	bl	8002bfc <LL_ADC_IsEnabled>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d047      	beq.n	8003a44 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d144      	bne.n	8003a44 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 030d 	and.w	r3, r3, #13
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d10c      	bne.n	80039e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff f901 	bl	8002bd4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2203      	movs	r2, #3
 80039d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039da:	f7fe ff23 	bl	8002824 <HAL_GetTick>
 80039de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039e0:	e029      	b.n	8003a36 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	f043 0210 	orr.w	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f2:	f043 0201 	orr.w	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e023      	b.n	8003a46 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039fe:	f7fe ff11 	bl	8002824 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d914      	bls.n	8003a36 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00d      	beq.n	8003a36 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	f043 0210 	orr.w	r2, r3, #16
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e007      	b.n	8003a46 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1dc      	bne.n	80039fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d14b      	bne.n	8003b00 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d021      	beq.n	8003ac6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe ff92 	bl	80029b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d032      	beq.n	8003af8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d12b      	bne.n	8003af8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d11f      	bne.n	8003af8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abc:	f043 0201 	orr.w	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54
 8003ac4:	e018      	b.n	8003af8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d111      	bne.n	8003af8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f7ff fb45 	bl	8003188 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003afe:	e00e      	b.n	8003b1e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f7ff fb4f 	bl	80031b0 <HAL_ADC_ErrorCallback>
}
 8003b12:	e004      	b.n	8003b1e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
}
 8003b1e:	bf00      	nop
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff fb31 	bl	800319c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f7ff fb21 	bl	80031b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a7a      	ldr	r2, [pc, #488]	; (8003d70 <ADC_ConfigureBoostMode+0x1f8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d004      	beq.n	8003b94 <ADC_ConfigureBoostMode+0x1c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a79      	ldr	r2, [pc, #484]	; (8003d74 <ADC_ConfigureBoostMode+0x1fc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d109      	bne.n	8003ba8 <ADC_ConfigureBoostMode+0x30>
 8003b94:	4b78      	ldr	r3, [pc, #480]	; (8003d78 <ADC_ConfigureBoostMode+0x200>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e008      	b.n	8003bba <ADC_ConfigureBoostMode+0x42>
 8003ba8:	4b74      	ldr	r3, [pc, #464]	; (8003d7c <ADC_ConfigureBoostMode+0x204>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01c      	beq.n	8003bf8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003bbe:	f005 fd33 	bl	8009628 <HAL_RCC_GetHCLKFreq>
 8003bc2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bcc:	d010      	beq.n	8003bf0 <ADC_ConfigureBoostMode+0x78>
 8003bce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bd2:	d873      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x144>
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd8:	d002      	beq.n	8003be0 <ADC_ConfigureBoostMode+0x68>
 8003bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bde:	d16d      	bne.n	8003cbc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	0c1b      	lsrs	r3, r3, #16
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	60fb      	str	r3, [r7, #12]
        break;
 8003bee:	e068      	b.n	8003cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	089b      	lsrs	r3, r3, #2
 8003bf4:	60fb      	str	r3, [r7, #12]
        break;
 8003bf6:	e064      	b.n	8003cc2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003bf8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003bfc:	f04f 0100 	mov.w	r1, #0
 8003c00:	f006 ff78 	bl	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c04:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003c0e:	d051      	beq.n	8003cb4 <ADC_ConfigureBoostMode+0x13c>
 8003c10:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003c14:	d854      	bhi.n	8003cc0 <ADC_ConfigureBoostMode+0x148>
 8003c16:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003c1a:	d047      	beq.n	8003cac <ADC_ConfigureBoostMode+0x134>
 8003c1c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003c20:	d84e      	bhi.n	8003cc0 <ADC_ConfigureBoostMode+0x148>
 8003c22:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c26:	d03d      	beq.n	8003ca4 <ADC_ConfigureBoostMode+0x12c>
 8003c28:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c2c:	d848      	bhi.n	8003cc0 <ADC_ConfigureBoostMode+0x148>
 8003c2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c32:	d033      	beq.n	8003c9c <ADC_ConfigureBoostMode+0x124>
 8003c34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c38:	d842      	bhi.n	8003cc0 <ADC_ConfigureBoostMode+0x148>
 8003c3a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c3e:	d029      	beq.n	8003c94 <ADC_ConfigureBoostMode+0x11c>
 8003c40:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c44:	d83c      	bhi.n	8003cc0 <ADC_ConfigureBoostMode+0x148>
 8003c46:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c4a:	d01a      	beq.n	8003c82 <ADC_ConfigureBoostMode+0x10a>
 8003c4c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c50:	d836      	bhi.n	8003cc0 <ADC_ConfigureBoostMode+0x148>
 8003c52:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c56:	d014      	beq.n	8003c82 <ADC_ConfigureBoostMode+0x10a>
 8003c58:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c5c:	d830      	bhi.n	8003cc0 <ADC_ConfigureBoostMode+0x148>
 8003c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c62:	d00e      	beq.n	8003c82 <ADC_ConfigureBoostMode+0x10a>
 8003c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c68:	d82a      	bhi.n	8003cc0 <ADC_ConfigureBoostMode+0x148>
 8003c6a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c6e:	d008      	beq.n	8003c82 <ADC_ConfigureBoostMode+0x10a>
 8003c70:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c74:	d824      	bhi.n	8003cc0 <ADC_ConfigureBoostMode+0x148>
 8003c76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c7a:	d002      	beq.n	8003c82 <ADC_ConfigureBoostMode+0x10a>
 8003c7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c80:	d11e      	bne.n	8003cc0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	0c9b      	lsrs	r3, r3, #18
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	60fb      	str	r3, [r7, #12]
        break;
 8003c92:	e016      	b.n	8003cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	091b      	lsrs	r3, r3, #4
 8003c98:	60fb      	str	r3, [r7, #12]
        break;
 8003c9a:	e012      	b.n	8003cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	60fb      	str	r3, [r7, #12]
        break;
 8003ca2:	e00e      	b.n	8003cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	099b      	lsrs	r3, r3, #6
 8003ca8:	60fb      	str	r3, [r7, #12]
        break;
 8003caa:	e00a      	b.n	8003cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	09db      	lsrs	r3, r3, #7
 8003cb0:	60fb      	str	r3, [r7, #12]
        break;
 8003cb2:	e006      	b.n	8003cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	60fb      	str	r3, [r7, #12]
        break;
 8003cba:	e002      	b.n	8003cc2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003cbc:	bf00      	nop
 8003cbe:	e000      	b.n	8003cc2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003cc0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003cc2:	f7fe fdcb 	bl	800285c <HAL_GetREVID>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d815      	bhi.n	8003cfc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4a2b      	ldr	r2, [pc, #172]	; (8003d80 <ADC_ConfigureBoostMode+0x208>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d908      	bls.n	8003cea <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ce8:	e03e      	b.n	8003d68 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cf8:	609a      	str	r2, [r3, #8]
}
 8003cfa:	e035      	b.n	8003d68 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	085b      	lsrs	r3, r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4a1f      	ldr	r2, [pc, #124]	; (8003d84 <ADC_ConfigureBoostMode+0x20c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d808      	bhi.n	8003d1c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d18:	609a      	str	r2, [r3, #8]
}
 8003d1a:	e025      	b.n	8003d68 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a1a      	ldr	r2, [pc, #104]	; (8003d88 <ADC_ConfigureBoostMode+0x210>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d80a      	bhi.n	8003d3a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d36:	609a      	str	r2, [r3, #8]
}
 8003d38:	e016      	b.n	8003d68 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <ADC_ConfigureBoostMode+0x214>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d80a      	bhi.n	8003d58 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d54:	609a      	str	r2, [r3, #8]
}
 8003d56:	e007      	b.n	8003d68 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003d66:	609a      	str	r2, [r3, #8]
}
 8003d68:	bf00      	nop
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40022000 	.word	0x40022000
 8003d74:	40022100 	.word	0x40022100
 8003d78:	40022300 	.word	0x40022300
 8003d7c:	58026300 	.word	0x58026300
 8003d80:	01312d00 	.word	0x01312d00
 8003d84:	005f5e10 	.word	0x005f5e10
 8003d88:	00bebc20 	.word	0x00bebc20
 8003d8c:	017d7840 	.word	0x017d7840

08003d90 <LL_ADC_IsEnabled>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <LL_ADC_IsEnabled+0x18>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <LL_ADC_IsEnabled+0x1a>
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <LL_ADC_StartCalibration>:
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <LL_ADC_StartCalibration+0x38>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	609a      	str	r2, [r3, #8]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	3ffeffc0 	.word	0x3ffeffc0

08003df4 <LL_ADC_IsCalibrationOnGoing>:
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e08:	d101      	bne.n	8003e0e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <LL_ADC_REG_IsConversionOngoing>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d101      	bne.n	8003e34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_ADCEx_Calibration_Start+0x1e>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e04c      	b.n	8003efc <HAL_ADCEx_Calibration_Start+0xb8>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f7ff fd90 	bl	8003990 <ADC_Disable>
 8003e70:	4603      	mov	r3, r0
 8003e72:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d135      	bne.n	8003ee6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e7e:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	f043 0202 	orr.w	r2, r3, #2
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff ff90 	bl	8003db8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e98:	e014      	b.n	8003ec4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d30d      	bcc.n	8003ec4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	f023 0312 	bic.w	r3, r3, #18
 8003eb0:	f043 0210 	orr.w	r2, r3, #16
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e01b      	b.n	8003efc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ff93 	bl	8003df4 <LL_ADC_IsCalibrationOnGoing>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e2      	bne.n	8003e9a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed8:	f023 0303 	bic.w	r3, r3, #3
 8003edc:	f043 0201 	orr.w	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
 8003ee4:	e005      	b.n	8003ef2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eea:	f043 0210 	orr.w	r2, r3, #16
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	ffffeefd 	.word	0xffffeefd
 8003f08:	25c3f800 	.word	0x25c3f800

08003f0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f0c:	b590      	push	{r4, r7, lr}
 8003f0e:	b09f      	sub	sp, #124	; 0x7c
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e0be      	b.n	80040a8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003f32:	2300      	movs	r3, #0
 8003f34:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a5c      	ldr	r2, [pc, #368]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d102      	bne.n	8003f4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f44:	4b5b      	ldr	r3, [pc, #364]	; (80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	e001      	b.n	8003f4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	f043 0220 	orr.w	r2, r3, #32
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e09d      	b.n	80040a8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff ff54 	bl	8003e1c <LL_ADC_REG_IsConversionOngoing>
 8003f74:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff ff4e 	bl	8003e1c <LL_ADC_REG_IsConversionOngoing>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d17f      	bne.n	8004086 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d17c      	bne.n	8004086 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a47      	ldr	r2, [pc, #284]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d004      	beq.n	8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a46      	ldr	r2, [pc, #280]	; (80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d101      	bne.n	8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003fa0:	4b45      	ldr	r3, [pc, #276]	; (80040b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003fa2:	e000      	b.n	8003fa6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003fa4:	4b45      	ldr	r3, [pc, #276]	; (80040bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fa6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d039      	beq.n	8004024 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a3a      	ldr	r2, [pc, #232]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d004      	beq.n	8003fd6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a38      	ldr	r2, [pc, #224]	; (80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003fd6:	4836      	ldr	r0, [pc, #216]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fd8:	f7ff feda 	bl	8003d90 <LL_ADC_IsEnabled>
 8003fdc:	4604      	mov	r4, r0
 8003fde:	4835      	ldr	r0, [pc, #212]	; (80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fe0:	f7ff fed6 	bl	8003d90 <LL_ADC_IsEnabled>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4323      	orrs	r3, r4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e008      	b.n	8004006 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003ff4:	4832      	ldr	r0, [pc, #200]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ff6:	f7ff fecb 	bl	8003d90 <LL_ADC_IsEnabled>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d047      	beq.n	800409a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800400a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	4b2d      	ldr	r3, [pc, #180]	; (80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004010:	4013      	ands	r3, r2
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	6811      	ldr	r1, [r2, #0]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	6892      	ldr	r2, [r2, #8]
 800401a:	430a      	orrs	r2, r1
 800401c:	431a      	orrs	r2, r3
 800401e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004020:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004022:	e03a      	b.n	800409a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800402c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1e      	ldr	r2, [pc, #120]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1d      	ldr	r2, [pc, #116]	; (80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d10e      	bne.n	8004062 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004044:	481a      	ldr	r0, [pc, #104]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004046:	f7ff fea3 	bl	8003d90 <LL_ADC_IsEnabled>
 800404a:	4604      	mov	r4, r0
 800404c:	4819      	ldr	r0, [pc, #100]	; (80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800404e:	f7ff fe9f 	bl	8003d90 <LL_ADC_IsEnabled>
 8004052:	4603      	mov	r3, r0
 8004054:	4323      	orrs	r3, r4
 8004056:	2b00      	cmp	r3, #0
 8004058:	bf0c      	ite	eq
 800405a:	2301      	moveq	r3, #1
 800405c:	2300      	movne	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	e008      	b.n	8004074 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004062:	4817      	ldr	r0, [pc, #92]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004064:	f7ff fe94 	bl	8003d90 <LL_ADC_IsEnabled>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	bf0c      	ite	eq
 800406e:	2301      	moveq	r3, #1
 8004070:	2300      	movne	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d010      	beq.n	800409a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800407e:	4013      	ands	r3, r2
 8004080:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004082:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004084:	e009      	b.n	800409a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	f043 0220 	orr.w	r2, r3, #32
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004098:	e000      	b.n	800409c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800409a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	377c      	adds	r7, #124	; 0x7c
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd90      	pop	{r4, r7, pc}
 80040b0:	40022000 	.word	0x40022000
 80040b4:	40022100 	.word	0x40022100
 80040b8:	40022300 	.word	0x40022300
 80040bc:	58026300 	.word	0x58026300
 80040c0:	58026000 	.word	0x58026000
 80040c4:	fffff0e0 	.word	0xfffff0e0

080040c8 <__NVIC_SetPriorityGrouping>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <__NVIC_SetPriorityGrouping+0x40>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e4:	4013      	ands	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <__NVIC_SetPriorityGrouping+0x44>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040f6:	4a04      	ldr	r2, [pc, #16]	; (8004108 <__NVIC_SetPriorityGrouping+0x40>)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	60d3      	str	r3, [r2, #12]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000ed00 	.word	0xe000ed00
 800410c:	05fa0000 	.word	0x05fa0000

08004110 <__NVIC_GetPriorityGrouping>:
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <__NVIC_GetPriorityGrouping+0x18>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	0a1b      	lsrs	r3, r3, #8
 800411a:	f003 0307 	and.w	r3, r3, #7
}
 800411e:	4618      	mov	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <__NVIC_EnableIRQ>:
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800413a:	2b00      	cmp	r3, #0
 800413c:	db0b      	blt.n	8004156 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	f003 021f 	and.w	r2, r3, #31
 8004144:	4907      	ldr	r1, [pc, #28]	; (8004164 <__NVIC_EnableIRQ+0x38>)
 8004146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2001      	movs	r0, #1
 800414e:	fa00 f202 	lsl.w	r2, r0, r2
 8004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	e000e100 	.word	0xe000e100

08004168 <__NVIC_SetPriority>:
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004178:	2b00      	cmp	r3, #0
 800417a:	db0a      	blt.n	8004192 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	490c      	ldr	r1, [pc, #48]	; (80041b4 <__NVIC_SetPriority+0x4c>)
 8004182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004186:	0112      	lsls	r2, r2, #4
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	440b      	add	r3, r1
 800418c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004190:	e00a      	b.n	80041a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4908      	ldr	r1, [pc, #32]	; (80041b8 <__NVIC_SetPriority+0x50>)
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	3b04      	subs	r3, #4
 80041a0:	0112      	lsls	r2, r2, #4
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	440b      	add	r3, r1
 80041a6:	761a      	strb	r2, [r3, #24]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000e100 	.word	0xe000e100
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <NVIC_EncodePriority>:
{
 80041bc:	b480      	push	{r7}
 80041be:	b089      	sub	sp, #36	; 0x24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f1c3 0307 	rsb	r3, r3, #7
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	bf28      	it	cs
 80041da:	2304      	movcs	r3, #4
 80041dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3304      	adds	r3, #4
 80041e2:	2b06      	cmp	r3, #6
 80041e4:	d902      	bls.n	80041ec <NVIC_EncodePriority+0x30>
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3b03      	subs	r3, #3
 80041ea:	e000      	b.n	80041ee <NVIC_EncodePriority+0x32>
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43da      	mvns	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	401a      	ands	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	43d9      	mvns	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004214:	4313      	orrs	r3, r2
}
 8004216:	4618      	mov	r0, r3
 8004218:	3724      	adds	r7, #36	; 0x24
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3b01      	subs	r3, #1
 8004230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004234:	d301      	bcc.n	800423a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004236:	2301      	movs	r3, #1
 8004238:	e00f      	b.n	800425a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800423a:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <SysTick_Config+0x40>)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3b01      	subs	r3, #1
 8004240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004242:	210f      	movs	r1, #15
 8004244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004248:	f7ff ff8e 	bl	8004168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <SysTick_Config+0x40>)
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004252:	4b04      	ldr	r3, [pc, #16]	; (8004264 <SysTick_Config+0x40>)
 8004254:	2207      	movs	r2, #7
 8004256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	e000e010 	.word	0xe000e010

08004268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff29 	bl	80040c8 <__NVIC_SetPriorityGrouping>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b086      	sub	sp, #24
 8004282:	af00      	add	r7, sp, #0
 8004284:	4603      	mov	r3, r0
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800428c:	f7ff ff40 	bl	8004110 <__NVIC_GetPriorityGrouping>
 8004290:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	6978      	ldr	r0, [r7, #20]
 8004298:	f7ff ff90 	bl	80041bc <NVIC_EncodePriority>
 800429c:	4602      	mov	r2, r0
 800429e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff5f 	bl	8004168 <__NVIC_SetPriority>
}
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	4603      	mov	r3, r0
 80042ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff33 	bl	800412c <__NVIC_EnableIRQ>
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ffa4 	bl	8004224 <SysTick_Config>
 80042dc:	4603      	mov	r3, r0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e014      	b.n	8004322 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	791b      	ldrb	r3, [r3, #4]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d105      	bne.n	800430e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7fd fdc3 	bl	8001e94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e046      	b.n	80043cc <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	795b      	ldrb	r3, [r3, #5]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_DAC_Start+0x20>
 8004346:	2302      	movs	r3, #2
 8004348:	e040      	b.n	80043cc <HAL_DAC_Start+0xa2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2201      	movs	r2, #1
 8004364:	409a      	lsls	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10f      	bne.n	8004394 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800437e:	2b02      	cmp	r3, #2
 8004380:	d11d      	bne.n	80043be <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0201 	orr.w	r2, r2, #1
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	e014      	b.n	80043be <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2102      	movs	r1, #2
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d107      	bne.n	80043be <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0202 	orr.w	r2, r2, #2
 80043bc:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0a2      	b.n	8004536 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	795b      	ldrb	r3, [r3, #5]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_DAC_Start_DMA+0x24>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e09c      	b.n	8004536 <HAL_DAC_Start_DMA+0x15e>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2202      	movs	r2, #2
 8004406:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d129      	bne.n	8004462 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	4a4b      	ldr	r2, [pc, #300]	; (8004540 <HAL_DAC_Start_DMA+0x168>)
 8004414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	4a4a      	ldr	r2, [pc, #296]	; (8004544 <HAL_DAC_Start_DMA+0x16c>)
 800441c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	4a49      	ldr	r2, [pc, #292]	; (8004548 <HAL_DAC_Start_DMA+0x170>)
 8004424:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004434:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_DAC_Start_DMA+0x6c>
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	2b04      	cmp	r3, #4
 8004440:	d005      	beq.n	800444e <HAL_DAC_Start_DMA+0x76>
 8004442:	e009      	b.n	8004458 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	613b      	str	r3, [r7, #16]
        break;
 800444c:	e033      	b.n	80044b6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	330c      	adds	r3, #12
 8004454:	613b      	str	r3, [r7, #16]
        break;
 8004456:	e02e      	b.n	80044b6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3310      	adds	r3, #16
 800445e:	613b      	str	r3, [r7, #16]
        break;
 8004460:	e029      	b.n	80044b6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	4a39      	ldr	r2, [pc, #228]	; (800454c <HAL_DAC_Start_DMA+0x174>)
 8004468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	4a38      	ldr	r2, [pc, #224]	; (8004550 <HAL_DAC_Start_DMA+0x178>)
 8004470:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	4a37      	ldr	r2, [pc, #220]	; (8004554 <HAL_DAC_Start_DMA+0x17c>)
 8004478:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004488:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_DAC_Start_DMA+0xc0>
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	2b04      	cmp	r3, #4
 8004494:	d005      	beq.n	80044a2 <HAL_DAC_Start_DMA+0xca>
 8004496:	e009      	b.n	80044ac <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3314      	adds	r3, #20
 800449e:	613b      	str	r3, [r7, #16]
        break;
 80044a0:	e009      	b.n	80044b6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3318      	adds	r3, #24
 80044a8:	613b      	str	r3, [r7, #16]
        break;
 80044aa:	e004      	b.n	80044b6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	331c      	adds	r3, #28
 80044b2:	613b      	str	r3, [r7, #16]
        break;
 80044b4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d111      	bne.n	80044e0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6898      	ldr	r0, [r3, #8]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	f000 fdfd 	bl	80050d4 <HAL_DMA_Start_IT>
 80044da:	4603      	mov	r3, r0
 80044dc:	75fb      	strb	r3, [r7, #23]
 80044de:	e010      	b.n	8004502 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80044ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	68d8      	ldr	r0, [r3, #12]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	f000 fdeb 	bl	80050d4 <HAL_DMA_Start_IT>
 80044fe:	4603      	mov	r3, r0
 8004500:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10c      	bne.n	8004528 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6819      	ldr	r1, [r3, #0]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2201      	movs	r2, #1
 800451c:	409a      	lsls	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e005      	b.n	8004534 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f043 0204 	orr.w	r2, r3, #4
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004534:	7dfb      	ldrb	r3, [r7, #23]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	08004909 	.word	0x08004909
 8004544:	0800492b 	.word	0x0800492b
 8004548:	08004947 	.word	0x08004947
 800454c:	080049b1 	.word	0x080049b1
 8004550:	080049d3 	.word	0x080049d3
 8004554:	080049ef 	.word	0x080049ef

08004558 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e03e      	b.n	80045ea <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6819      	ldr	r1, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43da      	mvns	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	400a      	ands	r2, r1
 8004588:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2201      	movs	r2, #1
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	43da      	mvns	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	400a      	ands	r2, r1
 80045a4:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10d      	bne.n	80045c8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fff9 	bl	80055a8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	e00c      	b.n	80045e2 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 ffeb 	bl	80055a8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80045e0:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b087      	sub	sp, #28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e015      	b.n	800463a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d105      	bne.n	8004626 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4413      	add	r3, r2
 8004620:	3308      	adds	r3, #8
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e004      	b.n	8004630 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	3314      	adds	r3, #20
 800462e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	461a      	mov	r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <HAL_DAC_ConfigChannel+0x1e>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e12a      	b.n	80048fc <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	795b      	ldrb	r3, [r3, #5]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_DAC_ConfigChannel+0x2e>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e124      	b.n	80048fc <HAL_DAC_ConfigChannel+0x278>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2202      	movs	r2, #2
 80046bc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d17a      	bne.n	80047bc <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80046c6:	f7fe f8ad 	bl	8002824 <HAL_GetTick>
 80046ca:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d13d      	bne.n	800474e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80046d2:	e018      	b.n	8004706 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80046d4:	f7fe f8a6 	bl	8002824 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d911      	bls.n	8004706 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e8:	4b86      	ldr	r3, [pc, #536]	; (8004904 <HAL_DAC_ConfigChannel+0x280>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f043 0208 	orr.w	r2, r3, #8
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2203      	movs	r2, #3
 8004700:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e0fa      	b.n	80048fc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800470c:	4b7d      	ldr	r3, [pc, #500]	; (8004904 <HAL_DAC_ConfigChannel+0x280>)
 800470e:	4013      	ands	r3, r2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1df      	bne.n	80046d4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	6992      	ldr	r2, [r2, #24]
 800471c:	641a      	str	r2, [r3, #64]	; 0x40
 800471e:	e020      	b.n	8004762 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004720:	f7fe f880 	bl	8002824 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b01      	cmp	r3, #1
 800472c:	d90f      	bls.n	800474e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004734:	2b00      	cmp	r3, #0
 8004736:	da0a      	bge.n	800474e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f043 0208 	orr.w	r2, r3, #8
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2203      	movs	r2, #3
 8004748:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e0d6      	b.n	80048fc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004754:	2b00      	cmp	r3, #0
 8004756:	dbe3      	blt.n	8004720 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	6992      	ldr	r2, [r2, #24]
 8004760:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004772:	fa01 f303 	lsl.w	r3, r1, r3
 8004776:	43db      	mvns	r3, r3
 8004778:	ea02 0103 	and.w	r1, r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f003 0310 	and.w	r3, r3, #16
 8004786:	409a      	lsls	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f003 0310 	and.w	r3, r3, #16
 800479c:	21ff      	movs	r1, #255	; 0xff
 800479e:	fa01 f303 	lsl.w	r3, r1, r3
 80047a2:	43db      	mvns	r3, r3
 80047a4:	ea02 0103 	and.w	r1, r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	6a1a      	ldr	r2, [r3, #32]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	409a      	lsls	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d11d      	bne.n	8004800 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	221f      	movs	r2, #31
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004806:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f003 0310 	and.w	r3, r3, #16
 800480e:	2207      	movs	r2, #7
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	43db      	mvns	r3, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4013      	ands	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d102      	bne.n	800482a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004824:	2300      	movs	r3, #0
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
 8004828:	e00f      	b.n	800484a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d102      	bne.n	8004838 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004832:	2301      	movs	r3, #1
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
 8004836:	e008      	b.n	800484a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004840:	2301      	movs	r3, #1
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
 8004844:	e001      	b.n	800484a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004846:	2300      	movs	r3, #0
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	4313      	orrs	r3, r2
 8004854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4313      	orrs	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6819      	ldr	r1, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43da      	mvns	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	400a      	ands	r2, r1
 8004890:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	43db      	mvns	r3, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4013      	ands	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	22c0      	movs	r2, #192	; 0xc0
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	43da      	mvns	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	400a      	ands	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80048f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3728      	adds	r7, #40	; 0x28
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20008000 	.word	0x20008000

08004908 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7ff fe95 	bl	8004646 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	711a      	strb	r2, [r3, #4]
}
 8004922:	bf00      	nop
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f7ff fe8e 	bl	800465a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800493e:	bf00      	nop
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f043 0204 	orr.w	r2, r3, #4
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f7ff fe84 	bl	800466e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	711a      	strb	r2, [r3, #4]
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7ff ffd8 	bl	8004974 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2201      	movs	r2, #1
 80049c8:	711a      	strb	r2, [r3, #4]
}
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f7ff ffd1 	bl	8004988 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f043 0204 	orr.w	r2, r3, #4
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f7ff ffc7 	bl	800499c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	711a      	strb	r2, [r3, #4]
}
 8004a14:	bf00      	nop
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004a24:	f7fd fefe 	bl	8002824 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e316      	b.n	8005062 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a66      	ldr	r2, [pc, #408]	; (8004bd4 <HAL_DMA_Init+0x1b8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d04a      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a65      	ldr	r2, [pc, #404]	; (8004bd8 <HAL_DMA_Init+0x1bc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d045      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a63      	ldr	r2, [pc, #396]	; (8004bdc <HAL_DMA_Init+0x1c0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d040      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a62      	ldr	r2, [pc, #392]	; (8004be0 <HAL_DMA_Init+0x1c4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d03b      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a60      	ldr	r2, [pc, #384]	; (8004be4 <HAL_DMA_Init+0x1c8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d036      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a5f      	ldr	r2, [pc, #380]	; (8004be8 <HAL_DMA_Init+0x1cc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d031      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a5d      	ldr	r2, [pc, #372]	; (8004bec <HAL_DMA_Init+0x1d0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d02c      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a5c      	ldr	r2, [pc, #368]	; (8004bf0 <HAL_DMA_Init+0x1d4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d027      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a5a      	ldr	r2, [pc, #360]	; (8004bf4 <HAL_DMA_Init+0x1d8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d022      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a59      	ldr	r2, [pc, #356]	; (8004bf8 <HAL_DMA_Init+0x1dc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d01d      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a57      	ldr	r2, [pc, #348]	; (8004bfc <HAL_DMA_Init+0x1e0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d018      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a56      	ldr	r2, [pc, #344]	; (8004c00 <HAL_DMA_Init+0x1e4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d013      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a54      	ldr	r2, [pc, #336]	; (8004c04 <HAL_DMA_Init+0x1e8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00e      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a53      	ldr	r2, [pc, #332]	; (8004c08 <HAL_DMA_Init+0x1ec>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a51      	ldr	r2, [pc, #324]	; (8004c0c <HAL_DMA_Init+0x1f0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_DMA_Init+0xb8>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a50      	ldr	r2, [pc, #320]	; (8004c10 <HAL_DMA_Init+0x1f4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d101      	bne.n	8004ad8 <HAL_DMA_Init+0xbc>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <HAL_DMA_Init+0xbe>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 813b 	beq.w	8004d56 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a37      	ldr	r2, [pc, #220]	; (8004bd4 <HAL_DMA_Init+0x1b8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d04a      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a36      	ldr	r2, [pc, #216]	; (8004bd8 <HAL_DMA_Init+0x1bc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d045      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a34      	ldr	r2, [pc, #208]	; (8004bdc <HAL_DMA_Init+0x1c0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d040      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a33      	ldr	r2, [pc, #204]	; (8004be0 <HAL_DMA_Init+0x1c4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d03b      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a31      	ldr	r2, [pc, #196]	; (8004be4 <HAL_DMA_Init+0x1c8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d036      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a30      	ldr	r2, [pc, #192]	; (8004be8 <HAL_DMA_Init+0x1cc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d031      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a2e      	ldr	r2, [pc, #184]	; (8004bec <HAL_DMA_Init+0x1d0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d02c      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a2d      	ldr	r2, [pc, #180]	; (8004bf0 <HAL_DMA_Init+0x1d4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d027      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a2b      	ldr	r2, [pc, #172]	; (8004bf4 <HAL_DMA_Init+0x1d8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d022      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a2a      	ldr	r2, [pc, #168]	; (8004bf8 <HAL_DMA_Init+0x1dc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d01d      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a28      	ldr	r2, [pc, #160]	; (8004bfc <HAL_DMA_Init+0x1e0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d018      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a27      	ldr	r2, [pc, #156]	; (8004c00 <HAL_DMA_Init+0x1e4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d013      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a25      	ldr	r2, [pc, #148]	; (8004c04 <HAL_DMA_Init+0x1e8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00e      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a24      	ldr	r2, [pc, #144]	; (8004c08 <HAL_DMA_Init+0x1ec>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d009      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a22      	ldr	r2, [pc, #136]	; (8004c0c <HAL_DMA_Init+0x1f0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d004      	beq.n	8004b90 <HAL_DMA_Init+0x174>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a21      	ldr	r2, [pc, #132]	; (8004c10 <HAL_DMA_Init+0x1f4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d108      	bne.n	8004ba2 <HAL_DMA_Init+0x186>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	e007      	b.n	8004bb2 <HAL_DMA_Init+0x196>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0201 	bic.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bb2:	e02f      	b.n	8004c14 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bb4:	f7fd fe36 	bl	8002824 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d928      	bls.n	8004c14 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2203      	movs	r2, #3
 8004bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e246      	b.n	8005062 <HAL_DMA_Init+0x646>
 8004bd4:	40020010 	.word	0x40020010
 8004bd8:	40020028 	.word	0x40020028
 8004bdc:	40020040 	.word	0x40020040
 8004be0:	40020058 	.word	0x40020058
 8004be4:	40020070 	.word	0x40020070
 8004be8:	40020088 	.word	0x40020088
 8004bec:	400200a0 	.word	0x400200a0
 8004bf0:	400200b8 	.word	0x400200b8
 8004bf4:	40020410 	.word	0x40020410
 8004bf8:	40020428 	.word	0x40020428
 8004bfc:	40020440 	.word	0x40020440
 8004c00:	40020458 	.word	0x40020458
 8004c04:	40020470 	.word	0x40020470
 8004c08:	40020488 	.word	0x40020488
 8004c0c:	400204a0 	.word	0x400204a0
 8004c10:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1c8      	bne.n	8004bb4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4b83      	ldr	r3, [pc, #524]	; (8004e3c <HAL_DMA_Init+0x420>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c46:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c52:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d107      	bne.n	8004c78 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	4313      	orrs	r3, r2
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004c78:	4b71      	ldr	r3, [pc, #452]	; (8004e40 <HAL_DMA_Init+0x424>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4b71      	ldr	r3, [pc, #452]	; (8004e44 <HAL_DMA_Init+0x428>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c84:	d328      	bcc.n	8004cd8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b28      	cmp	r3, #40	; 0x28
 8004c8c:	d903      	bls.n	8004c96 <HAL_DMA_Init+0x27a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b2e      	cmp	r3, #46	; 0x2e
 8004c94:	d917      	bls.n	8004cc6 <HAL_DMA_Init+0x2aa>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004c9c:	d903      	bls.n	8004ca6 <HAL_DMA_Init+0x28a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b42      	cmp	r3, #66	; 0x42
 8004ca4:	d90f      	bls.n	8004cc6 <HAL_DMA_Init+0x2aa>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b46      	cmp	r3, #70	; 0x46
 8004cac:	d903      	bls.n	8004cb6 <HAL_DMA_Init+0x29a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b48      	cmp	r3, #72	; 0x48
 8004cb4:	d907      	bls.n	8004cc6 <HAL_DMA_Init+0x2aa>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b4e      	cmp	r3, #78	; 0x4e
 8004cbc:	d905      	bls.n	8004cca <HAL_DMA_Init+0x2ae>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b52      	cmp	r3, #82	; 0x52
 8004cc4:	d801      	bhi.n	8004cca <HAL_DMA_Init+0x2ae>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <HAL_DMA_Init+0x2b0>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cd6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f023 0307 	bic.w	r3, r3, #7
 8004cee:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d117      	bne.n	8004d32 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00e      	beq.n	8004d32 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f002 fb33 	bl	8007380 <DMA_CheckFifoParam>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2240      	movs	r2, #64	; 0x40
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e197      	b.n	8005062 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f002 fa6e 	bl	800721c <DMA_CalcBaseAndBitshift>
 8004d40:	4603      	mov	r3, r0
 8004d42:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	223f      	movs	r2, #63	; 0x3f
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	e0cd      	b.n	8004ef2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a3b      	ldr	r2, [pc, #236]	; (8004e48 <HAL_DMA_Init+0x42c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d022      	beq.n	8004da6 <HAL_DMA_Init+0x38a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a39      	ldr	r2, [pc, #228]	; (8004e4c <HAL_DMA_Init+0x430>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d01d      	beq.n	8004da6 <HAL_DMA_Init+0x38a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a38      	ldr	r2, [pc, #224]	; (8004e50 <HAL_DMA_Init+0x434>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d018      	beq.n	8004da6 <HAL_DMA_Init+0x38a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a36      	ldr	r2, [pc, #216]	; (8004e54 <HAL_DMA_Init+0x438>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <HAL_DMA_Init+0x38a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a35      	ldr	r2, [pc, #212]	; (8004e58 <HAL_DMA_Init+0x43c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00e      	beq.n	8004da6 <HAL_DMA_Init+0x38a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a33      	ldr	r2, [pc, #204]	; (8004e5c <HAL_DMA_Init+0x440>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d009      	beq.n	8004da6 <HAL_DMA_Init+0x38a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a32      	ldr	r2, [pc, #200]	; (8004e60 <HAL_DMA_Init+0x444>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d004      	beq.n	8004da6 <HAL_DMA_Init+0x38a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a30      	ldr	r2, [pc, #192]	; (8004e64 <HAL_DMA_Init+0x448>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d101      	bne.n	8004daa <HAL_DMA_Init+0x38e>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <HAL_DMA_Init+0x390>
 8004daa:	2300      	movs	r3, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 8097 	beq.w	8004ee0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a24      	ldr	r2, [pc, #144]	; (8004e48 <HAL_DMA_Init+0x42c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d021      	beq.n	8004e00 <HAL_DMA_Init+0x3e4>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a22      	ldr	r2, [pc, #136]	; (8004e4c <HAL_DMA_Init+0x430>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d01c      	beq.n	8004e00 <HAL_DMA_Init+0x3e4>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a21      	ldr	r2, [pc, #132]	; (8004e50 <HAL_DMA_Init+0x434>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d017      	beq.n	8004e00 <HAL_DMA_Init+0x3e4>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1f      	ldr	r2, [pc, #124]	; (8004e54 <HAL_DMA_Init+0x438>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d012      	beq.n	8004e00 <HAL_DMA_Init+0x3e4>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <HAL_DMA_Init+0x43c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00d      	beq.n	8004e00 <HAL_DMA_Init+0x3e4>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1c      	ldr	r2, [pc, #112]	; (8004e5c <HAL_DMA_Init+0x440>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d008      	beq.n	8004e00 <HAL_DMA_Init+0x3e4>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1b      	ldr	r2, [pc, #108]	; (8004e60 <HAL_DMA_Init+0x444>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <HAL_DMA_Init+0x3e4>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a19      	ldr	r2, [pc, #100]	; (8004e64 <HAL_DMA_Init+0x448>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2202      	movs	r2, #2
 8004e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <HAL_DMA_Init+0x44c>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b40      	cmp	r3, #64	; 0x40
 8004e28:	d020      	beq.n	8004e6c <HAL_DMA_Init+0x450>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b80      	cmp	r3, #128	; 0x80
 8004e30:	d102      	bne.n	8004e38 <HAL_DMA_Init+0x41c>
 8004e32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e36:	e01a      	b.n	8004e6e <HAL_DMA_Init+0x452>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e018      	b.n	8004e6e <HAL_DMA_Init+0x452>
 8004e3c:	fe10803f 	.word	0xfe10803f
 8004e40:	5c001000 	.word	0x5c001000
 8004e44:	ffff0000 	.word	0xffff0000
 8004e48:	58025408 	.word	0x58025408
 8004e4c:	5802541c 	.word	0x5802541c
 8004e50:	58025430 	.word	0x58025430
 8004e54:	58025444 	.word	0x58025444
 8004e58:	58025458 	.word	0x58025458
 8004e5c:	5802546c 	.word	0x5802546c
 8004e60:	58025480 	.word	0x58025480
 8004e64:	58025494 	.word	0x58025494
 8004e68:	fffe000f 	.word	0xfffe000f
 8004e6c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68d2      	ldr	r2, [r2, #12]
 8004e72:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e9c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4b6e      	ldr	r3, [pc, #440]	; (800506c <HAL_DMA_Init+0x650>)
 8004eb4:	4413      	add	r3, r2
 8004eb6:	4a6e      	ldr	r2, [pc, #440]	; (8005070 <HAL_DMA_Init+0x654>)
 8004eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	009a      	lsls	r2, r3, #2
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f002 f9a9 	bl	800721c <DMA_CalcBaseAndBitshift>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	409a      	lsls	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	605a      	str	r2, [r3, #4]
 8004ede:	e008      	b.n	8004ef2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2240      	movs	r2, #64	; 0x40
 8004ee4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2203      	movs	r2, #3
 8004eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e0b7      	b.n	8005062 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a5f      	ldr	r2, [pc, #380]	; (8005074 <HAL_DMA_Init+0x658>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d072      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a5d      	ldr	r2, [pc, #372]	; (8005078 <HAL_DMA_Init+0x65c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d06d      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a5c      	ldr	r2, [pc, #368]	; (800507c <HAL_DMA_Init+0x660>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d068      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a5a      	ldr	r2, [pc, #360]	; (8005080 <HAL_DMA_Init+0x664>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d063      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a59      	ldr	r2, [pc, #356]	; (8005084 <HAL_DMA_Init+0x668>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d05e      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a57      	ldr	r2, [pc, #348]	; (8005088 <HAL_DMA_Init+0x66c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d059      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a56      	ldr	r2, [pc, #344]	; (800508c <HAL_DMA_Init+0x670>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d054      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a54      	ldr	r2, [pc, #336]	; (8005090 <HAL_DMA_Init+0x674>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d04f      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a53      	ldr	r2, [pc, #332]	; (8005094 <HAL_DMA_Init+0x678>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d04a      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a51      	ldr	r2, [pc, #324]	; (8005098 <HAL_DMA_Init+0x67c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d045      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a50      	ldr	r2, [pc, #320]	; (800509c <HAL_DMA_Init+0x680>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d040      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a4e      	ldr	r2, [pc, #312]	; (80050a0 <HAL_DMA_Init+0x684>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d03b      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a4d      	ldr	r2, [pc, #308]	; (80050a4 <HAL_DMA_Init+0x688>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d036      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a4b      	ldr	r2, [pc, #300]	; (80050a8 <HAL_DMA_Init+0x68c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d031      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a4a      	ldr	r2, [pc, #296]	; (80050ac <HAL_DMA_Init+0x690>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d02c      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a48      	ldr	r2, [pc, #288]	; (80050b0 <HAL_DMA_Init+0x694>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d027      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a47      	ldr	r2, [pc, #284]	; (80050b4 <HAL_DMA_Init+0x698>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d022      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a45      	ldr	r2, [pc, #276]	; (80050b8 <HAL_DMA_Init+0x69c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01d      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a44      	ldr	r2, [pc, #272]	; (80050bc <HAL_DMA_Init+0x6a0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d018      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a42      	ldr	r2, [pc, #264]	; (80050c0 <HAL_DMA_Init+0x6a4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a41      	ldr	r2, [pc, #260]	; (80050c4 <HAL_DMA_Init+0x6a8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a3f      	ldr	r2, [pc, #252]	; (80050c8 <HAL_DMA_Init+0x6ac>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d009      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a3e      	ldr	r2, [pc, #248]	; (80050cc <HAL_DMA_Init+0x6b0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <HAL_DMA_Init+0x5c6>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a3c      	ldr	r2, [pc, #240]	; (80050d0 <HAL_DMA_Init+0x6b4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d101      	bne.n	8004fe6 <HAL_DMA_Init+0x5ca>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_DMA_Init+0x5cc>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d032      	beq.n	8005052 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f002 fa43 	bl	8007478 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b80      	cmp	r3, #128	; 0x80
 8004ff8:	d102      	bne.n	8005000 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005014:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d010      	beq.n	8005040 <HAL_DMA_Init+0x624>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b08      	cmp	r3, #8
 8005024:	d80c      	bhi.n	8005040 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f002 fac0 	bl	80075ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	e008      	b.n	8005052 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	a7fdabf8 	.word	0xa7fdabf8
 8005070:	cccccccd 	.word	0xcccccccd
 8005074:	40020010 	.word	0x40020010
 8005078:	40020028 	.word	0x40020028
 800507c:	40020040 	.word	0x40020040
 8005080:	40020058 	.word	0x40020058
 8005084:	40020070 	.word	0x40020070
 8005088:	40020088 	.word	0x40020088
 800508c:	400200a0 	.word	0x400200a0
 8005090:	400200b8 	.word	0x400200b8
 8005094:	40020410 	.word	0x40020410
 8005098:	40020428 	.word	0x40020428
 800509c:	40020440 	.word	0x40020440
 80050a0:	40020458 	.word	0x40020458
 80050a4:	40020470 	.word	0x40020470
 80050a8:	40020488 	.word	0x40020488
 80050ac:	400204a0 	.word	0x400204a0
 80050b0:	400204b8 	.word	0x400204b8
 80050b4:	58025408 	.word	0x58025408
 80050b8:	5802541c 	.word	0x5802541c
 80050bc:	58025430 	.word	0x58025430
 80050c0:	58025444 	.word	0x58025444
 80050c4:	58025458 	.word	0x58025458
 80050c8:	5802546c 	.word	0x5802546c
 80050cc:	58025480 	.word	0x58025480
 80050d0:	58025494 	.word	0x58025494

080050d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e226      	b.n	800553e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_DMA_Start_IT+0x2a>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e21f      	b.n	800553e <HAL_DMA_Start_IT+0x46a>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	f040 820a 	bne.w	8005528 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a68      	ldr	r2, [pc, #416]	; (80052c8 <HAL_DMA_Start_IT+0x1f4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d04a      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a66      	ldr	r2, [pc, #408]	; (80052cc <HAL_DMA_Start_IT+0x1f8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d045      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a65      	ldr	r2, [pc, #404]	; (80052d0 <HAL_DMA_Start_IT+0x1fc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d040      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a63      	ldr	r2, [pc, #396]	; (80052d4 <HAL_DMA_Start_IT+0x200>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d03b      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a62      	ldr	r2, [pc, #392]	; (80052d8 <HAL_DMA_Start_IT+0x204>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d036      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a60      	ldr	r2, [pc, #384]	; (80052dc <HAL_DMA_Start_IT+0x208>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d031      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a5f      	ldr	r2, [pc, #380]	; (80052e0 <HAL_DMA_Start_IT+0x20c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d02c      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a5d      	ldr	r2, [pc, #372]	; (80052e4 <HAL_DMA_Start_IT+0x210>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d027      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a5c      	ldr	r2, [pc, #368]	; (80052e8 <HAL_DMA_Start_IT+0x214>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d022      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a5a      	ldr	r2, [pc, #360]	; (80052ec <HAL_DMA_Start_IT+0x218>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01d      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a59      	ldr	r2, [pc, #356]	; (80052f0 <HAL_DMA_Start_IT+0x21c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d018      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a57      	ldr	r2, [pc, #348]	; (80052f4 <HAL_DMA_Start_IT+0x220>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d013      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a56      	ldr	r2, [pc, #344]	; (80052f8 <HAL_DMA_Start_IT+0x224>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d00e      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a54      	ldr	r2, [pc, #336]	; (80052fc <HAL_DMA_Start_IT+0x228>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d009      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a53      	ldr	r2, [pc, #332]	; (8005300 <HAL_DMA_Start_IT+0x22c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d004      	beq.n	80051c2 <HAL_DMA_Start_IT+0xee>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a51      	ldr	r2, [pc, #324]	; (8005304 <HAL_DMA_Start_IT+0x230>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d108      	bne.n	80051d4 <HAL_DMA_Start_IT+0x100>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e007      	b.n	80051e4 <HAL_DMA_Start_IT+0x110>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0201 	bic.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f001 fe6a 	bl	8006ec4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a34      	ldr	r2, [pc, #208]	; (80052c8 <HAL_DMA_Start_IT+0x1f4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d04a      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a33      	ldr	r2, [pc, #204]	; (80052cc <HAL_DMA_Start_IT+0x1f8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d045      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a31      	ldr	r2, [pc, #196]	; (80052d0 <HAL_DMA_Start_IT+0x1fc>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d040      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a30      	ldr	r2, [pc, #192]	; (80052d4 <HAL_DMA_Start_IT+0x200>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d03b      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2e      	ldr	r2, [pc, #184]	; (80052d8 <HAL_DMA_Start_IT+0x204>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d036      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a2d      	ldr	r2, [pc, #180]	; (80052dc <HAL_DMA_Start_IT+0x208>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d031      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a2b      	ldr	r2, [pc, #172]	; (80052e0 <HAL_DMA_Start_IT+0x20c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d02c      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a2a      	ldr	r2, [pc, #168]	; (80052e4 <HAL_DMA_Start_IT+0x210>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d027      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a28      	ldr	r2, [pc, #160]	; (80052e8 <HAL_DMA_Start_IT+0x214>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d022      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a27      	ldr	r2, [pc, #156]	; (80052ec <HAL_DMA_Start_IT+0x218>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d01d      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a25      	ldr	r2, [pc, #148]	; (80052f0 <HAL_DMA_Start_IT+0x21c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d018      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a24      	ldr	r2, [pc, #144]	; (80052f4 <HAL_DMA_Start_IT+0x220>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a22      	ldr	r2, [pc, #136]	; (80052f8 <HAL_DMA_Start_IT+0x224>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00e      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a21      	ldr	r2, [pc, #132]	; (80052fc <HAL_DMA_Start_IT+0x228>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d009      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <HAL_DMA_Start_IT+0x22c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <HAL_DMA_Start_IT+0x1bc>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1e      	ldr	r2, [pc, #120]	; (8005304 <HAL_DMA_Start_IT+0x230>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d101      	bne.n	8005294 <HAL_DMA_Start_IT+0x1c0>
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <HAL_DMA_Start_IT+0x1c2>
 8005294:	2300      	movs	r3, #0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d036      	beq.n	8005308 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f023 021e 	bic.w	r2, r3, #30
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0216 	orr.w	r2, r2, #22
 80052ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d03e      	beq.n	8005334 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0208 	orr.w	r2, r2, #8
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e035      	b.n	8005334 <HAL_DMA_Start_IT+0x260>
 80052c8:	40020010 	.word	0x40020010
 80052cc:	40020028 	.word	0x40020028
 80052d0:	40020040 	.word	0x40020040
 80052d4:	40020058 	.word	0x40020058
 80052d8:	40020070 	.word	0x40020070
 80052dc:	40020088 	.word	0x40020088
 80052e0:	400200a0 	.word	0x400200a0
 80052e4:	400200b8 	.word	0x400200b8
 80052e8:	40020410 	.word	0x40020410
 80052ec:	40020428 	.word	0x40020428
 80052f0:	40020440 	.word	0x40020440
 80052f4:	40020458 	.word	0x40020458
 80052f8:	40020470 	.word	0x40020470
 80052fc:	40020488 	.word	0x40020488
 8005300:	400204a0 	.word	0x400204a0
 8005304:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f023 020e 	bic.w	r2, r3, #14
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 020a 	orr.w	r2, r2, #10
 800531a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0204 	orr.w	r2, r2, #4
 8005332:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a83      	ldr	r2, [pc, #524]	; (8005548 <HAL_DMA_Start_IT+0x474>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d072      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a82      	ldr	r2, [pc, #520]	; (800554c <HAL_DMA_Start_IT+0x478>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d06d      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a80      	ldr	r2, [pc, #512]	; (8005550 <HAL_DMA_Start_IT+0x47c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d068      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a7f      	ldr	r2, [pc, #508]	; (8005554 <HAL_DMA_Start_IT+0x480>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d063      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a7d      	ldr	r2, [pc, #500]	; (8005558 <HAL_DMA_Start_IT+0x484>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d05e      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a7c      	ldr	r2, [pc, #496]	; (800555c <HAL_DMA_Start_IT+0x488>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d059      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a7a      	ldr	r2, [pc, #488]	; (8005560 <HAL_DMA_Start_IT+0x48c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d054      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a79      	ldr	r2, [pc, #484]	; (8005564 <HAL_DMA_Start_IT+0x490>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d04f      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a77      	ldr	r2, [pc, #476]	; (8005568 <HAL_DMA_Start_IT+0x494>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d04a      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a76      	ldr	r2, [pc, #472]	; (800556c <HAL_DMA_Start_IT+0x498>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d045      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a74      	ldr	r2, [pc, #464]	; (8005570 <HAL_DMA_Start_IT+0x49c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d040      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a73      	ldr	r2, [pc, #460]	; (8005574 <HAL_DMA_Start_IT+0x4a0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d03b      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a71      	ldr	r2, [pc, #452]	; (8005578 <HAL_DMA_Start_IT+0x4a4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d036      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a70      	ldr	r2, [pc, #448]	; (800557c <HAL_DMA_Start_IT+0x4a8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d031      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a6e      	ldr	r2, [pc, #440]	; (8005580 <HAL_DMA_Start_IT+0x4ac>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d02c      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a6d      	ldr	r2, [pc, #436]	; (8005584 <HAL_DMA_Start_IT+0x4b0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d027      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a6b      	ldr	r2, [pc, #428]	; (8005588 <HAL_DMA_Start_IT+0x4b4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d022      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a6a      	ldr	r2, [pc, #424]	; (800558c <HAL_DMA_Start_IT+0x4b8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d01d      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a68      	ldr	r2, [pc, #416]	; (8005590 <HAL_DMA_Start_IT+0x4bc>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d018      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a67      	ldr	r2, [pc, #412]	; (8005594 <HAL_DMA_Start_IT+0x4c0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d013      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a65      	ldr	r2, [pc, #404]	; (8005598 <HAL_DMA_Start_IT+0x4c4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00e      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a64      	ldr	r2, [pc, #400]	; (800559c <HAL_DMA_Start_IT+0x4c8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a62      	ldr	r2, [pc, #392]	; (80055a0 <HAL_DMA_Start_IT+0x4cc>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d004      	beq.n	8005424 <HAL_DMA_Start_IT+0x350>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a61      	ldr	r2, [pc, #388]	; (80055a4 <HAL_DMA_Start_IT+0x4d0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d101      	bne.n	8005428 <HAL_DMA_Start_IT+0x354>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <HAL_DMA_Start_IT+0x356>
 8005428:	2300      	movs	r3, #0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d01a      	beq.n	8005464 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d007      	beq.n	800544c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800544a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800545e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005462:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a37      	ldr	r2, [pc, #220]	; (8005548 <HAL_DMA_Start_IT+0x474>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d04a      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a36      	ldr	r2, [pc, #216]	; (800554c <HAL_DMA_Start_IT+0x478>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d045      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a34      	ldr	r2, [pc, #208]	; (8005550 <HAL_DMA_Start_IT+0x47c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d040      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a33      	ldr	r2, [pc, #204]	; (8005554 <HAL_DMA_Start_IT+0x480>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d03b      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a31      	ldr	r2, [pc, #196]	; (8005558 <HAL_DMA_Start_IT+0x484>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d036      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a30      	ldr	r2, [pc, #192]	; (800555c <HAL_DMA_Start_IT+0x488>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d031      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a2e      	ldr	r2, [pc, #184]	; (8005560 <HAL_DMA_Start_IT+0x48c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d02c      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a2d      	ldr	r2, [pc, #180]	; (8005564 <HAL_DMA_Start_IT+0x490>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d027      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2b      	ldr	r2, [pc, #172]	; (8005568 <HAL_DMA_Start_IT+0x494>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d022      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a2a      	ldr	r2, [pc, #168]	; (800556c <HAL_DMA_Start_IT+0x498>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d01d      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a28      	ldr	r2, [pc, #160]	; (8005570 <HAL_DMA_Start_IT+0x49c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d018      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a27      	ldr	r2, [pc, #156]	; (8005574 <HAL_DMA_Start_IT+0x4a0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d013      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a25      	ldr	r2, [pc, #148]	; (8005578 <HAL_DMA_Start_IT+0x4a4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00e      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a24      	ldr	r2, [pc, #144]	; (800557c <HAL_DMA_Start_IT+0x4a8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d009      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a22      	ldr	r2, [pc, #136]	; (8005580 <HAL_DMA_Start_IT+0x4ac>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d004      	beq.n	8005504 <HAL_DMA_Start_IT+0x430>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a21      	ldr	r2, [pc, #132]	; (8005584 <HAL_DMA_Start_IT+0x4b0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d108      	bne.n	8005516 <HAL_DMA_Start_IT+0x442>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0201 	orr.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e012      	b.n	800553c <HAL_DMA_Start_IT+0x468>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0201 	orr.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	e009      	b.n	800553c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800552e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800553c:	7dfb      	ldrb	r3, [r7, #23]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40020010 	.word	0x40020010
 800554c:	40020028 	.word	0x40020028
 8005550:	40020040 	.word	0x40020040
 8005554:	40020058 	.word	0x40020058
 8005558:	40020070 	.word	0x40020070
 800555c:	40020088 	.word	0x40020088
 8005560:	400200a0 	.word	0x400200a0
 8005564:	400200b8 	.word	0x400200b8
 8005568:	40020410 	.word	0x40020410
 800556c:	40020428 	.word	0x40020428
 8005570:	40020440 	.word	0x40020440
 8005574:	40020458 	.word	0x40020458
 8005578:	40020470 	.word	0x40020470
 800557c:	40020488 	.word	0x40020488
 8005580:	400204a0 	.word	0x400204a0
 8005584:	400204b8 	.word	0x400204b8
 8005588:	58025408 	.word	0x58025408
 800558c:	5802541c 	.word	0x5802541c
 8005590:	58025430 	.word	0x58025430
 8005594:	58025444 	.word	0x58025444
 8005598:	58025458 	.word	0x58025458
 800559c:	5802546c 	.word	0x5802546c
 80055a0:	58025480 	.word	0x58025480
 80055a4:	58025494 	.word	0x58025494

080055a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80055b0:	f7fd f938 	bl	8002824 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e2dc      	b.n	8005b7a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d008      	beq.n	80055de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2280      	movs	r2, #128	; 0x80
 80055d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e2cd      	b.n	8005b7a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a76      	ldr	r2, [pc, #472]	; (80057bc <HAL_DMA_Abort+0x214>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d04a      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a74      	ldr	r2, [pc, #464]	; (80057c0 <HAL_DMA_Abort+0x218>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d045      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a73      	ldr	r2, [pc, #460]	; (80057c4 <HAL_DMA_Abort+0x21c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d040      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a71      	ldr	r2, [pc, #452]	; (80057c8 <HAL_DMA_Abort+0x220>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d03b      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a70      	ldr	r2, [pc, #448]	; (80057cc <HAL_DMA_Abort+0x224>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d036      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a6e      	ldr	r2, [pc, #440]	; (80057d0 <HAL_DMA_Abort+0x228>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d031      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a6d      	ldr	r2, [pc, #436]	; (80057d4 <HAL_DMA_Abort+0x22c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d02c      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a6b      	ldr	r2, [pc, #428]	; (80057d8 <HAL_DMA_Abort+0x230>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d027      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a6a      	ldr	r2, [pc, #424]	; (80057dc <HAL_DMA_Abort+0x234>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d022      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a68      	ldr	r2, [pc, #416]	; (80057e0 <HAL_DMA_Abort+0x238>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d01d      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a67      	ldr	r2, [pc, #412]	; (80057e4 <HAL_DMA_Abort+0x23c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d018      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a65      	ldr	r2, [pc, #404]	; (80057e8 <HAL_DMA_Abort+0x240>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d013      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a64      	ldr	r2, [pc, #400]	; (80057ec <HAL_DMA_Abort+0x244>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00e      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a62      	ldr	r2, [pc, #392]	; (80057f0 <HAL_DMA_Abort+0x248>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d009      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a61      	ldr	r2, [pc, #388]	; (80057f4 <HAL_DMA_Abort+0x24c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d004      	beq.n	800567e <HAL_DMA_Abort+0xd6>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a5f      	ldr	r2, [pc, #380]	; (80057f8 <HAL_DMA_Abort+0x250>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d101      	bne.n	8005682 <HAL_DMA_Abort+0xda>
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <HAL_DMA_Abort+0xdc>
 8005682:	2300      	movs	r3, #0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d013      	beq.n	80056b0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 021e 	bic.w	r2, r2, #30
 8005696:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056a6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	e00a      	b.n	80056c6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 020e 	bic.w	r2, r2, #14
 80056be:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a3c      	ldr	r2, [pc, #240]	; (80057bc <HAL_DMA_Abort+0x214>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d072      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a3a      	ldr	r2, [pc, #232]	; (80057c0 <HAL_DMA_Abort+0x218>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d06d      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a39      	ldr	r2, [pc, #228]	; (80057c4 <HAL_DMA_Abort+0x21c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d068      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a37      	ldr	r2, [pc, #220]	; (80057c8 <HAL_DMA_Abort+0x220>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d063      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a36      	ldr	r2, [pc, #216]	; (80057cc <HAL_DMA_Abort+0x224>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d05e      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a34      	ldr	r2, [pc, #208]	; (80057d0 <HAL_DMA_Abort+0x228>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d059      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a33      	ldr	r2, [pc, #204]	; (80057d4 <HAL_DMA_Abort+0x22c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d054      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a31      	ldr	r2, [pc, #196]	; (80057d8 <HAL_DMA_Abort+0x230>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d04f      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a30      	ldr	r2, [pc, #192]	; (80057dc <HAL_DMA_Abort+0x234>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d04a      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a2e      	ldr	r2, [pc, #184]	; (80057e0 <HAL_DMA_Abort+0x238>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d045      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a2d      	ldr	r2, [pc, #180]	; (80057e4 <HAL_DMA_Abort+0x23c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d040      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a2b      	ldr	r2, [pc, #172]	; (80057e8 <HAL_DMA_Abort+0x240>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d03b      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2a      	ldr	r2, [pc, #168]	; (80057ec <HAL_DMA_Abort+0x244>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d036      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a28      	ldr	r2, [pc, #160]	; (80057f0 <HAL_DMA_Abort+0x248>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d031      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a27      	ldr	r2, [pc, #156]	; (80057f4 <HAL_DMA_Abort+0x24c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d02c      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a25      	ldr	r2, [pc, #148]	; (80057f8 <HAL_DMA_Abort+0x250>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d027      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a24      	ldr	r2, [pc, #144]	; (80057fc <HAL_DMA_Abort+0x254>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d022      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a22      	ldr	r2, [pc, #136]	; (8005800 <HAL_DMA_Abort+0x258>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d01d      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a21      	ldr	r2, [pc, #132]	; (8005804 <HAL_DMA_Abort+0x25c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d018      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1f      	ldr	r2, [pc, #124]	; (8005808 <HAL_DMA_Abort+0x260>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1e      	ldr	r2, [pc, #120]	; (800580c <HAL_DMA_Abort+0x264>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00e      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1c      	ldr	r2, [pc, #112]	; (8005810 <HAL_DMA_Abort+0x268>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d009      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <HAL_DMA_Abort+0x26c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d004      	beq.n	80057b6 <HAL_DMA_Abort+0x20e>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a19      	ldr	r2, [pc, #100]	; (8005818 <HAL_DMA_Abort+0x270>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d132      	bne.n	800581c <HAL_DMA_Abort+0x274>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e031      	b.n	800581e <HAL_DMA_Abort+0x276>
 80057ba:	bf00      	nop
 80057bc:	40020010 	.word	0x40020010
 80057c0:	40020028 	.word	0x40020028
 80057c4:	40020040 	.word	0x40020040
 80057c8:	40020058 	.word	0x40020058
 80057cc:	40020070 	.word	0x40020070
 80057d0:	40020088 	.word	0x40020088
 80057d4:	400200a0 	.word	0x400200a0
 80057d8:	400200b8 	.word	0x400200b8
 80057dc:	40020410 	.word	0x40020410
 80057e0:	40020428 	.word	0x40020428
 80057e4:	40020440 	.word	0x40020440
 80057e8:	40020458 	.word	0x40020458
 80057ec:	40020470 	.word	0x40020470
 80057f0:	40020488 	.word	0x40020488
 80057f4:	400204a0 	.word	0x400204a0
 80057f8:	400204b8 	.word	0x400204b8
 80057fc:	58025408 	.word	0x58025408
 8005800:	5802541c 	.word	0x5802541c
 8005804:	58025430 	.word	0x58025430
 8005808:	58025444 	.word	0x58025444
 800580c:	58025458 	.word	0x58025458
 8005810:	5802546c 	.word	0x5802546c
 8005814:	58025480 	.word	0x58025480
 8005818:	58025494 	.word	0x58025494
 800581c:	2300      	movs	r3, #0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800582c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005830:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a6d      	ldr	r2, [pc, #436]	; (80059ec <HAL_DMA_Abort+0x444>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d04a      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a6b      	ldr	r2, [pc, #428]	; (80059f0 <HAL_DMA_Abort+0x448>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d045      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a6a      	ldr	r2, [pc, #424]	; (80059f4 <HAL_DMA_Abort+0x44c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d040      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a68      	ldr	r2, [pc, #416]	; (80059f8 <HAL_DMA_Abort+0x450>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d03b      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a67      	ldr	r2, [pc, #412]	; (80059fc <HAL_DMA_Abort+0x454>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d036      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a65      	ldr	r2, [pc, #404]	; (8005a00 <HAL_DMA_Abort+0x458>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d031      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a64      	ldr	r2, [pc, #400]	; (8005a04 <HAL_DMA_Abort+0x45c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d02c      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a62      	ldr	r2, [pc, #392]	; (8005a08 <HAL_DMA_Abort+0x460>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d027      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a61      	ldr	r2, [pc, #388]	; (8005a0c <HAL_DMA_Abort+0x464>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d022      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a5f      	ldr	r2, [pc, #380]	; (8005a10 <HAL_DMA_Abort+0x468>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d01d      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a5e      	ldr	r2, [pc, #376]	; (8005a14 <HAL_DMA_Abort+0x46c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d018      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a5c      	ldr	r2, [pc, #368]	; (8005a18 <HAL_DMA_Abort+0x470>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a5b      	ldr	r2, [pc, #364]	; (8005a1c <HAL_DMA_Abort+0x474>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00e      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a59      	ldr	r2, [pc, #356]	; (8005a20 <HAL_DMA_Abort+0x478>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d009      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a58      	ldr	r2, [pc, #352]	; (8005a24 <HAL_DMA_Abort+0x47c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d004      	beq.n	80058d2 <HAL_DMA_Abort+0x32a>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a56      	ldr	r2, [pc, #344]	; (8005a28 <HAL_DMA_Abort+0x480>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <HAL_DMA_Abort+0x33c>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0201 	bic.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e007      	b.n	80058f4 <HAL_DMA_Abort+0x34c>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0201 	bic.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80058f4:	e013      	b.n	800591e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058f6:	f7fc ff95 	bl	8002824 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b05      	cmp	r3, #5
 8005902:	d90c      	bls.n	800591e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2203      	movs	r2, #3
 800590e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e12d      	b.n	8005b7a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e5      	bne.n	80058f6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2f      	ldr	r2, [pc, #188]	; (80059ec <HAL_DMA_Abort+0x444>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d04a      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a2d      	ldr	r2, [pc, #180]	; (80059f0 <HAL_DMA_Abort+0x448>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d045      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a2c      	ldr	r2, [pc, #176]	; (80059f4 <HAL_DMA_Abort+0x44c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d040      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a2a      	ldr	r2, [pc, #168]	; (80059f8 <HAL_DMA_Abort+0x450>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d03b      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a29      	ldr	r2, [pc, #164]	; (80059fc <HAL_DMA_Abort+0x454>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d036      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a27      	ldr	r2, [pc, #156]	; (8005a00 <HAL_DMA_Abort+0x458>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d031      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a26      	ldr	r2, [pc, #152]	; (8005a04 <HAL_DMA_Abort+0x45c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d02c      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a24      	ldr	r2, [pc, #144]	; (8005a08 <HAL_DMA_Abort+0x460>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d027      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a23      	ldr	r2, [pc, #140]	; (8005a0c <HAL_DMA_Abort+0x464>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d022      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a21      	ldr	r2, [pc, #132]	; (8005a10 <HAL_DMA_Abort+0x468>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01d      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a20      	ldr	r2, [pc, #128]	; (8005a14 <HAL_DMA_Abort+0x46c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d018      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1e      	ldr	r2, [pc, #120]	; (8005a18 <HAL_DMA_Abort+0x470>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1d      	ldr	r2, [pc, #116]	; (8005a1c <HAL_DMA_Abort+0x474>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00e      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1b      	ldr	r2, [pc, #108]	; (8005a20 <HAL_DMA_Abort+0x478>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d009      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1a      	ldr	r2, [pc, #104]	; (8005a24 <HAL_DMA_Abort+0x47c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_DMA_Abort+0x422>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <HAL_DMA_Abort+0x480>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d101      	bne.n	80059ce <HAL_DMA_Abort+0x426>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <HAL_DMA_Abort+0x428>
 80059ce:	2300      	movs	r3, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02b      	beq.n	8005a2c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059de:	f003 031f 	and.w	r3, r3, #31
 80059e2:	223f      	movs	r2, #63	; 0x3f
 80059e4:	409a      	lsls	r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	609a      	str	r2, [r3, #8]
 80059ea:	e02a      	b.n	8005a42 <HAL_DMA_Abort+0x49a>
 80059ec:	40020010 	.word	0x40020010
 80059f0:	40020028 	.word	0x40020028
 80059f4:	40020040 	.word	0x40020040
 80059f8:	40020058 	.word	0x40020058
 80059fc:	40020070 	.word	0x40020070
 8005a00:	40020088 	.word	0x40020088
 8005a04:	400200a0 	.word	0x400200a0
 8005a08:	400200b8 	.word	0x400200b8
 8005a0c:	40020410 	.word	0x40020410
 8005a10:	40020428 	.word	0x40020428
 8005a14:	40020440 	.word	0x40020440
 8005a18:	40020458 	.word	0x40020458
 8005a1c:	40020470 	.word	0x40020470
 8005a20:	40020488 	.word	0x40020488
 8005a24:	400204a0 	.word	0x400204a0
 8005a28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a30:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	409a      	lsls	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a4f      	ldr	r2, [pc, #316]	; (8005b84 <HAL_DMA_Abort+0x5dc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d072      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a4d      	ldr	r2, [pc, #308]	; (8005b88 <HAL_DMA_Abort+0x5e0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d06d      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a4c      	ldr	r2, [pc, #304]	; (8005b8c <HAL_DMA_Abort+0x5e4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d068      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a4a      	ldr	r2, [pc, #296]	; (8005b90 <HAL_DMA_Abort+0x5e8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d063      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a49      	ldr	r2, [pc, #292]	; (8005b94 <HAL_DMA_Abort+0x5ec>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d05e      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a47      	ldr	r2, [pc, #284]	; (8005b98 <HAL_DMA_Abort+0x5f0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d059      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a46      	ldr	r2, [pc, #280]	; (8005b9c <HAL_DMA_Abort+0x5f4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d054      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a44      	ldr	r2, [pc, #272]	; (8005ba0 <HAL_DMA_Abort+0x5f8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d04f      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a43      	ldr	r2, [pc, #268]	; (8005ba4 <HAL_DMA_Abort+0x5fc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d04a      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a41      	ldr	r2, [pc, #260]	; (8005ba8 <HAL_DMA_Abort+0x600>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d045      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a40      	ldr	r2, [pc, #256]	; (8005bac <HAL_DMA_Abort+0x604>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d040      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a3e      	ldr	r2, [pc, #248]	; (8005bb0 <HAL_DMA_Abort+0x608>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d03b      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a3d      	ldr	r2, [pc, #244]	; (8005bb4 <HAL_DMA_Abort+0x60c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d036      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a3b      	ldr	r2, [pc, #236]	; (8005bb8 <HAL_DMA_Abort+0x610>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d031      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a3a      	ldr	r2, [pc, #232]	; (8005bbc <HAL_DMA_Abort+0x614>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d02c      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a38      	ldr	r2, [pc, #224]	; (8005bc0 <HAL_DMA_Abort+0x618>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d027      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a37      	ldr	r2, [pc, #220]	; (8005bc4 <HAL_DMA_Abort+0x61c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d022      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a35      	ldr	r2, [pc, #212]	; (8005bc8 <HAL_DMA_Abort+0x620>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d01d      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a34      	ldr	r2, [pc, #208]	; (8005bcc <HAL_DMA_Abort+0x624>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d018      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a32      	ldr	r2, [pc, #200]	; (8005bd0 <HAL_DMA_Abort+0x628>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d013      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a31      	ldr	r2, [pc, #196]	; (8005bd4 <HAL_DMA_Abort+0x62c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00e      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a2f      	ldr	r2, [pc, #188]	; (8005bd8 <HAL_DMA_Abort+0x630>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d009      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a2e      	ldr	r2, [pc, #184]	; (8005bdc <HAL_DMA_Abort+0x634>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d004      	beq.n	8005b32 <HAL_DMA_Abort+0x58a>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a2c      	ldr	r2, [pc, #176]	; (8005be0 <HAL_DMA_Abort+0x638>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d101      	bne.n	8005b36 <HAL_DMA_Abort+0x58e>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <HAL_DMA_Abort+0x590>
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d015      	beq.n	8005b68 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b44:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00c      	beq.n	8005b68 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b5c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b66:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	40020010 	.word	0x40020010
 8005b88:	40020028 	.word	0x40020028
 8005b8c:	40020040 	.word	0x40020040
 8005b90:	40020058 	.word	0x40020058
 8005b94:	40020070 	.word	0x40020070
 8005b98:	40020088 	.word	0x40020088
 8005b9c:	400200a0 	.word	0x400200a0
 8005ba0:	400200b8 	.word	0x400200b8
 8005ba4:	40020410 	.word	0x40020410
 8005ba8:	40020428 	.word	0x40020428
 8005bac:	40020440 	.word	0x40020440
 8005bb0:	40020458 	.word	0x40020458
 8005bb4:	40020470 	.word	0x40020470
 8005bb8:	40020488 	.word	0x40020488
 8005bbc:	400204a0 	.word	0x400204a0
 8005bc0:	400204b8 	.word	0x400204b8
 8005bc4:	58025408 	.word	0x58025408
 8005bc8:	5802541c 	.word	0x5802541c
 8005bcc:	58025430 	.word	0x58025430
 8005bd0:	58025444 	.word	0x58025444
 8005bd4:	58025458 	.word	0x58025458
 8005bd8:	5802546c 	.word	0x5802546c
 8005bdc:	58025480 	.word	0x58025480
 8005be0:	58025494 	.word	0x58025494

08005be4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e237      	b.n	8006066 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d004      	beq.n	8005c0c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2280      	movs	r2, #128	; 0x80
 8005c06:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e22c      	b.n	8006066 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a5c      	ldr	r2, [pc, #368]	; (8005d84 <HAL_DMA_Abort_IT+0x1a0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d04a      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a5b      	ldr	r2, [pc, #364]	; (8005d88 <HAL_DMA_Abort_IT+0x1a4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d045      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a59      	ldr	r2, [pc, #356]	; (8005d8c <HAL_DMA_Abort_IT+0x1a8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d040      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a58      	ldr	r2, [pc, #352]	; (8005d90 <HAL_DMA_Abort_IT+0x1ac>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d03b      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a56      	ldr	r2, [pc, #344]	; (8005d94 <HAL_DMA_Abort_IT+0x1b0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d036      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a55      	ldr	r2, [pc, #340]	; (8005d98 <HAL_DMA_Abort_IT+0x1b4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d031      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a53      	ldr	r2, [pc, #332]	; (8005d9c <HAL_DMA_Abort_IT+0x1b8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d02c      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a52      	ldr	r2, [pc, #328]	; (8005da0 <HAL_DMA_Abort_IT+0x1bc>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d027      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a50      	ldr	r2, [pc, #320]	; (8005da4 <HAL_DMA_Abort_IT+0x1c0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d022      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a4f      	ldr	r2, [pc, #316]	; (8005da8 <HAL_DMA_Abort_IT+0x1c4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d01d      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a4d      	ldr	r2, [pc, #308]	; (8005dac <HAL_DMA_Abort_IT+0x1c8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d018      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a4c      	ldr	r2, [pc, #304]	; (8005db0 <HAL_DMA_Abort_IT+0x1cc>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d013      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a4a      	ldr	r2, [pc, #296]	; (8005db4 <HAL_DMA_Abort_IT+0x1d0>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00e      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a49      	ldr	r2, [pc, #292]	; (8005db8 <HAL_DMA_Abort_IT+0x1d4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d009      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a47      	ldr	r2, [pc, #284]	; (8005dbc <HAL_DMA_Abort_IT+0x1d8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <HAL_DMA_Abort_IT+0xc8>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a46      	ldr	r2, [pc, #280]	; (8005dc0 <HAL_DMA_Abort_IT+0x1dc>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d101      	bne.n	8005cb0 <HAL_DMA_Abort_IT+0xcc>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <HAL_DMA_Abort_IT+0xce>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 8086 	beq.w	8005dc4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2204      	movs	r2, #4
 8005cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a2f      	ldr	r2, [pc, #188]	; (8005d84 <HAL_DMA_Abort_IT+0x1a0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d04a      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a2e      	ldr	r2, [pc, #184]	; (8005d88 <HAL_DMA_Abort_IT+0x1a4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d045      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a2c      	ldr	r2, [pc, #176]	; (8005d8c <HAL_DMA_Abort_IT+0x1a8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d040      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a2b      	ldr	r2, [pc, #172]	; (8005d90 <HAL_DMA_Abort_IT+0x1ac>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d03b      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a29      	ldr	r2, [pc, #164]	; (8005d94 <HAL_DMA_Abort_IT+0x1b0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d036      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a28      	ldr	r2, [pc, #160]	; (8005d98 <HAL_DMA_Abort_IT+0x1b4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d031      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a26      	ldr	r2, [pc, #152]	; (8005d9c <HAL_DMA_Abort_IT+0x1b8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d02c      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a25      	ldr	r2, [pc, #148]	; (8005da0 <HAL_DMA_Abort_IT+0x1bc>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d027      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a23      	ldr	r2, [pc, #140]	; (8005da4 <HAL_DMA_Abort_IT+0x1c0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d022      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a22      	ldr	r2, [pc, #136]	; (8005da8 <HAL_DMA_Abort_IT+0x1c4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d01d      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a20      	ldr	r2, [pc, #128]	; (8005dac <HAL_DMA_Abort_IT+0x1c8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d018      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1f      	ldr	r2, [pc, #124]	; (8005db0 <HAL_DMA_Abort_IT+0x1cc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <HAL_DMA_Abort_IT+0x1d0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00e      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <HAL_DMA_Abort_IT+0x1d4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d009      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <HAL_DMA_Abort_IT+0x1d8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d004      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x17c>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a19      	ldr	r2, [pc, #100]	; (8005dc0 <HAL_DMA_Abort_IT+0x1dc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d108      	bne.n	8005d72 <HAL_DMA_Abort_IT+0x18e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0201 	bic.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	e178      	b.n	8006064 <HAL_DMA_Abort_IT+0x480>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0201 	bic.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	e16f      	b.n	8006064 <HAL_DMA_Abort_IT+0x480>
 8005d84:	40020010 	.word	0x40020010
 8005d88:	40020028 	.word	0x40020028
 8005d8c:	40020040 	.word	0x40020040
 8005d90:	40020058 	.word	0x40020058
 8005d94:	40020070 	.word	0x40020070
 8005d98:	40020088 	.word	0x40020088
 8005d9c:	400200a0 	.word	0x400200a0
 8005da0:	400200b8 	.word	0x400200b8
 8005da4:	40020410 	.word	0x40020410
 8005da8:	40020428 	.word	0x40020428
 8005dac:	40020440 	.word	0x40020440
 8005db0:	40020458 	.word	0x40020458
 8005db4:	40020470 	.word	0x40020470
 8005db8:	40020488 	.word	0x40020488
 8005dbc:	400204a0 	.word	0x400204a0
 8005dc0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 020e 	bic.w	r2, r2, #14
 8005dd2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a6c      	ldr	r2, [pc, #432]	; (8005f8c <HAL_DMA_Abort_IT+0x3a8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d04a      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a6b      	ldr	r2, [pc, #428]	; (8005f90 <HAL_DMA_Abort_IT+0x3ac>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d045      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a69      	ldr	r2, [pc, #420]	; (8005f94 <HAL_DMA_Abort_IT+0x3b0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d040      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a68      	ldr	r2, [pc, #416]	; (8005f98 <HAL_DMA_Abort_IT+0x3b4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d03b      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a66      	ldr	r2, [pc, #408]	; (8005f9c <HAL_DMA_Abort_IT+0x3b8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d036      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a65      	ldr	r2, [pc, #404]	; (8005fa0 <HAL_DMA_Abort_IT+0x3bc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d031      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a63      	ldr	r2, [pc, #396]	; (8005fa4 <HAL_DMA_Abort_IT+0x3c0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d02c      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a62      	ldr	r2, [pc, #392]	; (8005fa8 <HAL_DMA_Abort_IT+0x3c4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d027      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a60      	ldr	r2, [pc, #384]	; (8005fac <HAL_DMA_Abort_IT+0x3c8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d022      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a5f      	ldr	r2, [pc, #380]	; (8005fb0 <HAL_DMA_Abort_IT+0x3cc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d01d      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a5d      	ldr	r2, [pc, #372]	; (8005fb4 <HAL_DMA_Abort_IT+0x3d0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d018      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a5c      	ldr	r2, [pc, #368]	; (8005fb8 <HAL_DMA_Abort_IT+0x3d4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d013      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a5a      	ldr	r2, [pc, #360]	; (8005fbc <HAL_DMA_Abort_IT+0x3d8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00e      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a59      	ldr	r2, [pc, #356]	; (8005fc0 <HAL_DMA_Abort_IT+0x3dc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d009      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a57      	ldr	r2, [pc, #348]	; (8005fc4 <HAL_DMA_Abort_IT+0x3e0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d004      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x290>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a56      	ldr	r2, [pc, #344]	; (8005fc8 <HAL_DMA_Abort_IT+0x3e4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d108      	bne.n	8005e86 <HAL_DMA_Abort_IT+0x2a2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0201 	bic.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	e007      	b.n	8005e96 <HAL_DMA_Abort_IT+0x2b2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0201 	bic.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a3c      	ldr	r2, [pc, #240]	; (8005f8c <HAL_DMA_Abort_IT+0x3a8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d072      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a3a      	ldr	r2, [pc, #232]	; (8005f90 <HAL_DMA_Abort_IT+0x3ac>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d06d      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a39      	ldr	r2, [pc, #228]	; (8005f94 <HAL_DMA_Abort_IT+0x3b0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d068      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a37      	ldr	r2, [pc, #220]	; (8005f98 <HAL_DMA_Abort_IT+0x3b4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d063      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a36      	ldr	r2, [pc, #216]	; (8005f9c <HAL_DMA_Abort_IT+0x3b8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d05e      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a34      	ldr	r2, [pc, #208]	; (8005fa0 <HAL_DMA_Abort_IT+0x3bc>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d059      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a33      	ldr	r2, [pc, #204]	; (8005fa4 <HAL_DMA_Abort_IT+0x3c0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d054      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a31      	ldr	r2, [pc, #196]	; (8005fa8 <HAL_DMA_Abort_IT+0x3c4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d04f      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a30      	ldr	r2, [pc, #192]	; (8005fac <HAL_DMA_Abort_IT+0x3c8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d04a      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a2e      	ldr	r2, [pc, #184]	; (8005fb0 <HAL_DMA_Abort_IT+0x3cc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d045      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2d      	ldr	r2, [pc, #180]	; (8005fb4 <HAL_DMA_Abort_IT+0x3d0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d040      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a2b      	ldr	r2, [pc, #172]	; (8005fb8 <HAL_DMA_Abort_IT+0x3d4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d03b      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a2a      	ldr	r2, [pc, #168]	; (8005fbc <HAL_DMA_Abort_IT+0x3d8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d036      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a28      	ldr	r2, [pc, #160]	; (8005fc0 <HAL_DMA_Abort_IT+0x3dc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d031      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a27      	ldr	r2, [pc, #156]	; (8005fc4 <HAL_DMA_Abort_IT+0x3e0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d02c      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a25      	ldr	r2, [pc, #148]	; (8005fc8 <HAL_DMA_Abort_IT+0x3e4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d027      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a24      	ldr	r2, [pc, #144]	; (8005fcc <HAL_DMA_Abort_IT+0x3e8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d022      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <HAL_DMA_Abort_IT+0x3ec>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d01d      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a21      	ldr	r2, [pc, #132]	; (8005fd4 <HAL_DMA_Abort_IT+0x3f0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d018      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1f      	ldr	r2, [pc, #124]	; (8005fd8 <HAL_DMA_Abort_IT+0x3f4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d013      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1e      	ldr	r2, [pc, #120]	; (8005fdc <HAL_DMA_Abort_IT+0x3f8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00e      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1c      	ldr	r2, [pc, #112]	; (8005fe0 <HAL_DMA_Abort_IT+0x3fc>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d009      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <HAL_DMA_Abort_IT+0x400>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d004      	beq.n	8005f86 <HAL_DMA_Abort_IT+0x3a2>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a19      	ldr	r2, [pc, #100]	; (8005fe8 <HAL_DMA_Abort_IT+0x404>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d132      	bne.n	8005fec <HAL_DMA_Abort_IT+0x408>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e031      	b.n	8005fee <HAL_DMA_Abort_IT+0x40a>
 8005f8a:	bf00      	nop
 8005f8c:	40020010 	.word	0x40020010
 8005f90:	40020028 	.word	0x40020028
 8005f94:	40020040 	.word	0x40020040
 8005f98:	40020058 	.word	0x40020058
 8005f9c:	40020070 	.word	0x40020070
 8005fa0:	40020088 	.word	0x40020088
 8005fa4:	400200a0 	.word	0x400200a0
 8005fa8:	400200b8 	.word	0x400200b8
 8005fac:	40020410 	.word	0x40020410
 8005fb0:	40020428 	.word	0x40020428
 8005fb4:	40020440 	.word	0x40020440
 8005fb8:	40020458 	.word	0x40020458
 8005fbc:	40020470 	.word	0x40020470
 8005fc0:	40020488 	.word	0x40020488
 8005fc4:	400204a0 	.word	0x400204a0
 8005fc8:	400204b8 	.word	0x400204b8
 8005fcc:	58025408 	.word	0x58025408
 8005fd0:	5802541c 	.word	0x5802541c
 8005fd4:	58025430 	.word	0x58025430
 8005fd8:	58025444 	.word	0x58025444
 8005fdc:	58025458 	.word	0x58025458
 8005fe0:	5802546c 	.word	0x5802546c
 8005fe4:	58025480 	.word	0x58025480
 8005fe8:	58025494 	.word	0x58025494
 8005fec:	2300      	movs	r3, #0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d028      	beq.n	8006044 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006000:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006006:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600c:	f003 031f 	and.w	r3, r3, #31
 8006010:	2201      	movs	r2, #1
 8006012:	409a      	lsls	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006020:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00c      	beq.n	8006044 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006038:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006042:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop

08006070 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b08a      	sub	sp, #40	; 0x28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800607c:	4b67      	ldr	r3, [pc, #412]	; (800621c <HAL_DMA_IRQHandler+0x1ac>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a67      	ldr	r2, [pc, #412]	; (8006220 <HAL_DMA_IRQHandler+0x1b0>)
 8006082:	fba2 2303 	umull	r2, r3, r2, r3
 8006086:	0a9b      	lsrs	r3, r3, #10
 8006088:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006094:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a5f      	ldr	r2, [pc, #380]	; (8006224 <HAL_DMA_IRQHandler+0x1b4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d04a      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a5d      	ldr	r2, [pc, #372]	; (8006228 <HAL_DMA_IRQHandler+0x1b8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d045      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a5c      	ldr	r2, [pc, #368]	; (800622c <HAL_DMA_IRQHandler+0x1bc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d040      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a5a      	ldr	r2, [pc, #360]	; (8006230 <HAL_DMA_IRQHandler+0x1c0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d03b      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a59      	ldr	r2, [pc, #356]	; (8006234 <HAL_DMA_IRQHandler+0x1c4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d036      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a57      	ldr	r2, [pc, #348]	; (8006238 <HAL_DMA_IRQHandler+0x1c8>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d031      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a56      	ldr	r2, [pc, #344]	; (800623c <HAL_DMA_IRQHandler+0x1cc>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d02c      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a54      	ldr	r2, [pc, #336]	; (8006240 <HAL_DMA_IRQHandler+0x1d0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d027      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a53      	ldr	r2, [pc, #332]	; (8006244 <HAL_DMA_IRQHandler+0x1d4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d022      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a51      	ldr	r2, [pc, #324]	; (8006248 <HAL_DMA_IRQHandler+0x1d8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01d      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a50      	ldr	r2, [pc, #320]	; (800624c <HAL_DMA_IRQHandler+0x1dc>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d018      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a4e      	ldr	r2, [pc, #312]	; (8006250 <HAL_DMA_IRQHandler+0x1e0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d013      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a4d      	ldr	r2, [pc, #308]	; (8006254 <HAL_DMA_IRQHandler+0x1e4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00e      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a4b      	ldr	r2, [pc, #300]	; (8006258 <HAL_DMA_IRQHandler+0x1e8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d009      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a4a      	ldr	r2, [pc, #296]	; (800625c <HAL_DMA_IRQHandler+0x1ec>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d004      	beq.n	8006142 <HAL_DMA_IRQHandler+0xd2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a48      	ldr	r2, [pc, #288]	; (8006260 <HAL_DMA_IRQHandler+0x1f0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d101      	bne.n	8006146 <HAL_DMA_IRQHandler+0xd6>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <HAL_DMA_IRQHandler+0xd8>
 8006146:	2300      	movs	r3, #0
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 842b 	beq.w	80069a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	2208      	movs	r2, #8
 8006158:	409a      	lsls	r2, r3
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	4013      	ands	r3, r2
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 80a2 	beq.w	80062a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a2e      	ldr	r2, [pc, #184]	; (8006224 <HAL_DMA_IRQHandler+0x1b4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d04a      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a2d      	ldr	r2, [pc, #180]	; (8006228 <HAL_DMA_IRQHandler+0x1b8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d045      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a2b      	ldr	r2, [pc, #172]	; (800622c <HAL_DMA_IRQHandler+0x1bc>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d040      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a2a      	ldr	r2, [pc, #168]	; (8006230 <HAL_DMA_IRQHandler+0x1c0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d03b      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a28      	ldr	r2, [pc, #160]	; (8006234 <HAL_DMA_IRQHandler+0x1c4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d036      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a27      	ldr	r2, [pc, #156]	; (8006238 <HAL_DMA_IRQHandler+0x1c8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d031      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a25      	ldr	r2, [pc, #148]	; (800623c <HAL_DMA_IRQHandler+0x1cc>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d02c      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a24      	ldr	r2, [pc, #144]	; (8006240 <HAL_DMA_IRQHandler+0x1d0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d027      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a22      	ldr	r2, [pc, #136]	; (8006244 <HAL_DMA_IRQHandler+0x1d4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d022      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a21      	ldr	r2, [pc, #132]	; (8006248 <HAL_DMA_IRQHandler+0x1d8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d01d      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a1f      	ldr	r2, [pc, #124]	; (800624c <HAL_DMA_IRQHandler+0x1dc>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d018      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a1e      	ldr	r2, [pc, #120]	; (8006250 <HAL_DMA_IRQHandler+0x1e0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d013      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1c      	ldr	r2, [pc, #112]	; (8006254 <HAL_DMA_IRQHandler+0x1e4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00e      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1b      	ldr	r2, [pc, #108]	; (8006258 <HAL_DMA_IRQHandler+0x1e8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d009      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a19      	ldr	r2, [pc, #100]	; (800625c <HAL_DMA_IRQHandler+0x1ec>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d004      	beq.n	8006204 <HAL_DMA_IRQHandler+0x194>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a18      	ldr	r2, [pc, #96]	; (8006260 <HAL_DMA_IRQHandler+0x1f0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d12f      	bne.n	8006264 <HAL_DMA_IRQHandler+0x1f4>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	bf14      	ite	ne
 8006212:	2301      	movne	r3, #1
 8006214:	2300      	moveq	r3, #0
 8006216:	b2db      	uxtb	r3, r3
 8006218:	e02e      	b.n	8006278 <HAL_DMA_IRQHandler+0x208>
 800621a:	bf00      	nop
 800621c:	24000088 	.word	0x24000088
 8006220:	1b4e81b5 	.word	0x1b4e81b5
 8006224:	40020010 	.word	0x40020010
 8006228:	40020028 	.word	0x40020028
 800622c:	40020040 	.word	0x40020040
 8006230:	40020058 	.word	0x40020058
 8006234:	40020070 	.word	0x40020070
 8006238:	40020088 	.word	0x40020088
 800623c:	400200a0 	.word	0x400200a0
 8006240:	400200b8 	.word	0x400200b8
 8006244:	40020410 	.word	0x40020410
 8006248:	40020428 	.word	0x40020428
 800624c:	40020440 	.word	0x40020440
 8006250:	40020458 	.word	0x40020458
 8006254:	40020470 	.word	0x40020470
 8006258:	40020488 	.word	0x40020488
 800625c:	400204a0 	.word	0x400204a0
 8006260:	400204b8 	.word	0x400204b8
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b00      	cmp	r3, #0
 8006270:	bf14      	ite	ne
 8006272:	2301      	movne	r3, #1
 8006274:	2300      	moveq	r3, #0
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d015      	beq.n	80062a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0204 	bic.w	r2, r2, #4
 800628a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006290:	f003 031f 	and.w	r3, r3, #31
 8006294:	2208      	movs	r2, #8
 8006296:	409a      	lsls	r2, r3
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a0:	f043 0201 	orr.w	r2, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	fa22 f303 	lsr.w	r3, r2, r3
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d06e      	beq.n	800639c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a69      	ldr	r2, [pc, #420]	; (8006468 <HAL_DMA_IRQHandler+0x3f8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d04a      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a67      	ldr	r2, [pc, #412]	; (800646c <HAL_DMA_IRQHandler+0x3fc>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d045      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a66      	ldr	r2, [pc, #408]	; (8006470 <HAL_DMA_IRQHandler+0x400>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d040      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a64      	ldr	r2, [pc, #400]	; (8006474 <HAL_DMA_IRQHandler+0x404>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d03b      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a63      	ldr	r2, [pc, #396]	; (8006478 <HAL_DMA_IRQHandler+0x408>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d036      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a61      	ldr	r2, [pc, #388]	; (800647c <HAL_DMA_IRQHandler+0x40c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d031      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a60      	ldr	r2, [pc, #384]	; (8006480 <HAL_DMA_IRQHandler+0x410>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d02c      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a5e      	ldr	r2, [pc, #376]	; (8006484 <HAL_DMA_IRQHandler+0x414>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d027      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a5d      	ldr	r2, [pc, #372]	; (8006488 <HAL_DMA_IRQHandler+0x418>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d022      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a5b      	ldr	r2, [pc, #364]	; (800648c <HAL_DMA_IRQHandler+0x41c>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d01d      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a5a      	ldr	r2, [pc, #360]	; (8006490 <HAL_DMA_IRQHandler+0x420>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d018      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a58      	ldr	r2, [pc, #352]	; (8006494 <HAL_DMA_IRQHandler+0x424>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d013      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a57      	ldr	r2, [pc, #348]	; (8006498 <HAL_DMA_IRQHandler+0x428>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00e      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a55      	ldr	r2, [pc, #340]	; (800649c <HAL_DMA_IRQHandler+0x42c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d009      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a54      	ldr	r2, [pc, #336]	; (80064a0 <HAL_DMA_IRQHandler+0x430>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d004      	beq.n	800635e <HAL_DMA_IRQHandler+0x2ee>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a52      	ldr	r2, [pc, #328]	; (80064a4 <HAL_DMA_IRQHandler+0x434>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d10a      	bne.n	8006374 <HAL_DMA_IRQHandler+0x304>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006368:	2b00      	cmp	r3, #0
 800636a:	bf14      	ite	ne
 800636c:	2301      	movne	r3, #1
 800636e:	2300      	moveq	r3, #0
 8006370:	b2db      	uxtb	r3, r3
 8006372:	e003      	b.n	800637c <HAL_DMA_IRQHandler+0x30c>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2300      	movs	r3, #0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00d      	beq.n	800639c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006384:	f003 031f 	and.w	r3, r3, #31
 8006388:	2201      	movs	r2, #1
 800638a:	409a      	lsls	r2, r3
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006394:	f043 0202 	orr.w	r2, r3, #2
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a0:	f003 031f 	and.w	r3, r3, #31
 80063a4:	2204      	movs	r2, #4
 80063a6:	409a      	lsls	r2, r3
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	4013      	ands	r3, r2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 808f 	beq.w	80064d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a2c      	ldr	r2, [pc, #176]	; (8006468 <HAL_DMA_IRQHandler+0x3f8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d04a      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a2a      	ldr	r2, [pc, #168]	; (800646c <HAL_DMA_IRQHandler+0x3fc>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d045      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a29      	ldr	r2, [pc, #164]	; (8006470 <HAL_DMA_IRQHandler+0x400>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d040      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a27      	ldr	r2, [pc, #156]	; (8006474 <HAL_DMA_IRQHandler+0x404>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d03b      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a26      	ldr	r2, [pc, #152]	; (8006478 <HAL_DMA_IRQHandler+0x408>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d036      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a24      	ldr	r2, [pc, #144]	; (800647c <HAL_DMA_IRQHandler+0x40c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d031      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a23      	ldr	r2, [pc, #140]	; (8006480 <HAL_DMA_IRQHandler+0x410>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d02c      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a21      	ldr	r2, [pc, #132]	; (8006484 <HAL_DMA_IRQHandler+0x414>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d027      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a20      	ldr	r2, [pc, #128]	; (8006488 <HAL_DMA_IRQHandler+0x418>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d022      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1e      	ldr	r2, [pc, #120]	; (800648c <HAL_DMA_IRQHandler+0x41c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d01d      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1d      	ldr	r2, [pc, #116]	; (8006490 <HAL_DMA_IRQHandler+0x420>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d018      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1b      	ldr	r2, [pc, #108]	; (8006494 <HAL_DMA_IRQHandler+0x424>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d013      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1a      	ldr	r2, [pc, #104]	; (8006498 <HAL_DMA_IRQHandler+0x428>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00e      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a18      	ldr	r2, [pc, #96]	; (800649c <HAL_DMA_IRQHandler+0x42c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d009      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a17      	ldr	r2, [pc, #92]	; (80064a0 <HAL_DMA_IRQHandler+0x430>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d004      	beq.n	8006452 <HAL_DMA_IRQHandler+0x3e2>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a15      	ldr	r2, [pc, #84]	; (80064a4 <HAL_DMA_IRQHandler+0x434>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d12a      	bne.n	80064a8 <HAL_DMA_IRQHandler+0x438>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	bf14      	ite	ne
 8006460:	2301      	movne	r3, #1
 8006462:	2300      	moveq	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	e023      	b.n	80064b0 <HAL_DMA_IRQHandler+0x440>
 8006468:	40020010 	.word	0x40020010
 800646c:	40020028 	.word	0x40020028
 8006470:	40020040 	.word	0x40020040
 8006474:	40020058 	.word	0x40020058
 8006478:	40020070 	.word	0x40020070
 800647c:	40020088 	.word	0x40020088
 8006480:	400200a0 	.word	0x400200a0
 8006484:	400200b8 	.word	0x400200b8
 8006488:	40020410 	.word	0x40020410
 800648c:	40020428 	.word	0x40020428
 8006490:	40020440 	.word	0x40020440
 8006494:	40020458 	.word	0x40020458
 8006498:	40020470 	.word	0x40020470
 800649c:	40020488 	.word	0x40020488
 80064a0:	400204a0 	.word	0x400204a0
 80064a4:	400204b8 	.word	0x400204b8
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2300      	movs	r3, #0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00d      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2204      	movs	r2, #4
 80064be:	409a      	lsls	r2, r3
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c8:	f043 0204 	orr.w	r2, r3, #4
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d4:	f003 031f 	and.w	r3, r3, #31
 80064d8:	2210      	movs	r2, #16
 80064da:	409a      	lsls	r2, r3
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	4013      	ands	r3, r2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80a6 	beq.w	8006632 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a85      	ldr	r2, [pc, #532]	; (8006700 <HAL_DMA_IRQHandler+0x690>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d04a      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a83      	ldr	r2, [pc, #524]	; (8006704 <HAL_DMA_IRQHandler+0x694>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d045      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a82      	ldr	r2, [pc, #520]	; (8006708 <HAL_DMA_IRQHandler+0x698>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d040      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a80      	ldr	r2, [pc, #512]	; (800670c <HAL_DMA_IRQHandler+0x69c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d03b      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a7f      	ldr	r2, [pc, #508]	; (8006710 <HAL_DMA_IRQHandler+0x6a0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d036      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a7d      	ldr	r2, [pc, #500]	; (8006714 <HAL_DMA_IRQHandler+0x6a4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d031      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a7c      	ldr	r2, [pc, #496]	; (8006718 <HAL_DMA_IRQHandler+0x6a8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d02c      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a7a      	ldr	r2, [pc, #488]	; (800671c <HAL_DMA_IRQHandler+0x6ac>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d027      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a79      	ldr	r2, [pc, #484]	; (8006720 <HAL_DMA_IRQHandler+0x6b0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d022      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a77      	ldr	r2, [pc, #476]	; (8006724 <HAL_DMA_IRQHandler+0x6b4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d01d      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a76      	ldr	r2, [pc, #472]	; (8006728 <HAL_DMA_IRQHandler+0x6b8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d018      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a74      	ldr	r2, [pc, #464]	; (800672c <HAL_DMA_IRQHandler+0x6bc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a73      	ldr	r2, [pc, #460]	; (8006730 <HAL_DMA_IRQHandler+0x6c0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00e      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a71      	ldr	r2, [pc, #452]	; (8006734 <HAL_DMA_IRQHandler+0x6c4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d009      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a70      	ldr	r2, [pc, #448]	; (8006738 <HAL_DMA_IRQHandler+0x6c8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d004      	beq.n	8006586 <HAL_DMA_IRQHandler+0x516>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a6e      	ldr	r2, [pc, #440]	; (800673c <HAL_DMA_IRQHandler+0x6cc>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d10a      	bne.n	800659c <HAL_DMA_IRQHandler+0x52c>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b00      	cmp	r3, #0
 8006592:	bf14      	ite	ne
 8006594:	2301      	movne	r3, #1
 8006596:	2300      	moveq	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	e009      	b.n	80065b0 <HAL_DMA_IRQHandler+0x540>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	bf14      	ite	ne
 80065aa:	2301      	movne	r3, #1
 80065ac:	2300      	moveq	r3, #0
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d03e      	beq.n	8006632 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b8:	f003 031f 	and.w	r3, r3, #31
 80065bc:	2210      	movs	r2, #16
 80065be:	409a      	lsls	r2, r3
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d018      	beq.n	8006604 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d108      	bne.n	80065f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d024      	beq.n	8006632 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	4798      	blx	r3
 80065f0:	e01f      	b.n	8006632 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01b      	beq.n	8006632 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	4798      	blx	r3
 8006602:	e016      	b.n	8006632 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660e:	2b00      	cmp	r3, #0
 8006610:	d107      	bne.n	8006622 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0208 	bic.w	r2, r2, #8
 8006620:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006636:	f003 031f 	and.w	r3, r3, #31
 800663a:	2220      	movs	r2, #32
 800663c:	409a      	lsls	r2, r3
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	4013      	ands	r3, r2
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 8110 	beq.w	8006868 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a2c      	ldr	r2, [pc, #176]	; (8006700 <HAL_DMA_IRQHandler+0x690>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d04a      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a2b      	ldr	r2, [pc, #172]	; (8006704 <HAL_DMA_IRQHandler+0x694>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d045      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a29      	ldr	r2, [pc, #164]	; (8006708 <HAL_DMA_IRQHandler+0x698>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d040      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a28      	ldr	r2, [pc, #160]	; (800670c <HAL_DMA_IRQHandler+0x69c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d03b      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a26      	ldr	r2, [pc, #152]	; (8006710 <HAL_DMA_IRQHandler+0x6a0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d036      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a25      	ldr	r2, [pc, #148]	; (8006714 <HAL_DMA_IRQHandler+0x6a4>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d031      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a23      	ldr	r2, [pc, #140]	; (8006718 <HAL_DMA_IRQHandler+0x6a8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d02c      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a22      	ldr	r2, [pc, #136]	; (800671c <HAL_DMA_IRQHandler+0x6ac>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d027      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a20      	ldr	r2, [pc, #128]	; (8006720 <HAL_DMA_IRQHandler+0x6b0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d022      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a1f      	ldr	r2, [pc, #124]	; (8006724 <HAL_DMA_IRQHandler+0x6b4>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d01d      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1d      	ldr	r2, [pc, #116]	; (8006728 <HAL_DMA_IRQHandler+0x6b8>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d018      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1c      	ldr	r2, [pc, #112]	; (800672c <HAL_DMA_IRQHandler+0x6bc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d013      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1a      	ldr	r2, [pc, #104]	; (8006730 <HAL_DMA_IRQHandler+0x6c0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00e      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a19      	ldr	r2, [pc, #100]	; (8006734 <HAL_DMA_IRQHandler+0x6c4>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d009      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a17      	ldr	r2, [pc, #92]	; (8006738 <HAL_DMA_IRQHandler+0x6c8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d004      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x678>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a16      	ldr	r2, [pc, #88]	; (800673c <HAL_DMA_IRQHandler+0x6cc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d12b      	bne.n	8006740 <HAL_DMA_IRQHandler+0x6d0>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bf14      	ite	ne
 80066f6:	2301      	movne	r3, #1
 80066f8:	2300      	moveq	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	e02a      	b.n	8006754 <HAL_DMA_IRQHandler+0x6e4>
 80066fe:	bf00      	nop
 8006700:	40020010 	.word	0x40020010
 8006704:	40020028 	.word	0x40020028
 8006708:	40020040 	.word	0x40020040
 800670c:	40020058 	.word	0x40020058
 8006710:	40020070 	.word	0x40020070
 8006714:	40020088 	.word	0x40020088
 8006718:	400200a0 	.word	0x400200a0
 800671c:	400200b8 	.word	0x400200b8
 8006720:	40020410 	.word	0x40020410
 8006724:	40020428 	.word	0x40020428
 8006728:	40020440 	.word	0x40020440
 800672c:	40020458 	.word	0x40020458
 8006730:	40020470 	.word	0x40020470
 8006734:	40020488 	.word	0x40020488
 8006738:	400204a0 	.word	0x400204a0
 800673c:	400204b8 	.word	0x400204b8
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	bf14      	ite	ne
 800674e:	2301      	movne	r3, #1
 8006750:	2300      	moveq	r3, #0
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8087 	beq.w	8006868 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	2220      	movs	r2, #32
 8006764:	409a      	lsls	r2, r3
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b04      	cmp	r3, #4
 8006774:	d139      	bne.n	80067ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0216 	bic.w	r2, r2, #22
 8006784:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695a      	ldr	r2, [r3, #20]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006794:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	d103      	bne.n	80067a6 <HAL_DMA_IRQHandler+0x736>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0208 	bic.w	r2, r2, #8
 80067b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ba:	f003 031f 	and.w	r3, r3, #31
 80067be:	223f      	movs	r2, #63	; 0x3f
 80067c0:	409a      	lsls	r2, r3
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 834a 	beq.w	8006e74 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	4798      	blx	r3
          }
          return;
 80067e8:	e344      	b.n	8006e74 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d018      	beq.n	800682a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d108      	bne.n	8006818 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680a:	2b00      	cmp	r3, #0
 800680c:	d02c      	beq.n	8006868 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	4798      	blx	r3
 8006816:	e027      	b.n	8006868 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d023      	beq.n	8006868 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	4798      	blx	r3
 8006828:	e01e      	b.n	8006868 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10f      	bne.n	8006858 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0210 	bic.w	r2, r2, #16
 8006846:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 8306 	beq.w	8006e7e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 8088 	beq.w	8006990 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2204      	movs	r2, #4
 8006884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a7a      	ldr	r2, [pc, #488]	; (8006a78 <HAL_DMA_IRQHandler+0xa08>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d04a      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a79      	ldr	r2, [pc, #484]	; (8006a7c <HAL_DMA_IRQHandler+0xa0c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d045      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a77      	ldr	r2, [pc, #476]	; (8006a80 <HAL_DMA_IRQHandler+0xa10>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d040      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a76      	ldr	r2, [pc, #472]	; (8006a84 <HAL_DMA_IRQHandler+0xa14>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d03b      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a74      	ldr	r2, [pc, #464]	; (8006a88 <HAL_DMA_IRQHandler+0xa18>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d036      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a73      	ldr	r2, [pc, #460]	; (8006a8c <HAL_DMA_IRQHandler+0xa1c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d031      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a71      	ldr	r2, [pc, #452]	; (8006a90 <HAL_DMA_IRQHandler+0xa20>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d02c      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a70      	ldr	r2, [pc, #448]	; (8006a94 <HAL_DMA_IRQHandler+0xa24>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d027      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a6e      	ldr	r2, [pc, #440]	; (8006a98 <HAL_DMA_IRQHandler+0xa28>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d022      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a6d      	ldr	r2, [pc, #436]	; (8006a9c <HAL_DMA_IRQHandler+0xa2c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d01d      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a6b      	ldr	r2, [pc, #428]	; (8006aa0 <HAL_DMA_IRQHandler+0xa30>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d018      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a6a      	ldr	r2, [pc, #424]	; (8006aa4 <HAL_DMA_IRQHandler+0xa34>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d013      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a68      	ldr	r2, [pc, #416]	; (8006aa8 <HAL_DMA_IRQHandler+0xa38>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00e      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a67      	ldr	r2, [pc, #412]	; (8006aac <HAL_DMA_IRQHandler+0xa3c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d009      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a65      	ldr	r2, [pc, #404]	; (8006ab0 <HAL_DMA_IRQHandler+0xa40>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d004      	beq.n	8006928 <HAL_DMA_IRQHandler+0x8b8>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a64      	ldr	r2, [pc, #400]	; (8006ab4 <HAL_DMA_IRQHandler+0xa44>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d108      	bne.n	800693a <HAL_DMA_IRQHandler+0x8ca>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 0201 	bic.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	e007      	b.n	800694a <HAL_DMA_IRQHandler+0x8da>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0201 	bic.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3301      	adds	r3, #1
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006952:	429a      	cmp	r2, r3
 8006954:	d307      	bcc.n	8006966 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1f2      	bne.n	800694a <HAL_DMA_IRQHandler+0x8da>
 8006964:	e000      	b.n	8006968 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006966:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d004      	beq.n	8006980 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2203      	movs	r2, #3
 800697a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800697e:	e003      	b.n	8006988 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 8272 	beq.w	8006e7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	4798      	blx	r3
 80069a2:	e26c      	b.n	8006e7e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a43      	ldr	r2, [pc, #268]	; (8006ab8 <HAL_DMA_IRQHandler+0xa48>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d022      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x984>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a42      	ldr	r2, [pc, #264]	; (8006abc <HAL_DMA_IRQHandler+0xa4c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d01d      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x984>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a40      	ldr	r2, [pc, #256]	; (8006ac0 <HAL_DMA_IRQHandler+0xa50>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d018      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x984>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a3f      	ldr	r2, [pc, #252]	; (8006ac4 <HAL_DMA_IRQHandler+0xa54>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x984>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a3d      	ldr	r2, [pc, #244]	; (8006ac8 <HAL_DMA_IRQHandler+0xa58>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00e      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x984>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a3c      	ldr	r2, [pc, #240]	; (8006acc <HAL_DMA_IRQHandler+0xa5c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d009      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x984>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a3a      	ldr	r2, [pc, #232]	; (8006ad0 <HAL_DMA_IRQHandler+0xa60>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x984>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a39      	ldr	r2, [pc, #228]	; (8006ad4 <HAL_DMA_IRQHandler+0xa64>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d101      	bne.n	80069f8 <HAL_DMA_IRQHandler+0x988>
 80069f4:	2301      	movs	r3, #1
 80069f6:	e000      	b.n	80069fa <HAL_DMA_IRQHandler+0x98a>
 80069f8:	2300      	movs	r3, #0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 823f 	beq.w	8006e7e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0c:	f003 031f 	and.w	r3, r3, #31
 8006a10:	2204      	movs	r2, #4
 8006a12:	409a      	lsls	r2, r3
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	4013      	ands	r3, r2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 80cd 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0xb48>
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 80c7 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	2204      	movs	r2, #4
 8006a34:	409a      	lsls	r2, r3
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d049      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d109      	bne.n	8006a62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 8210 	beq.w	8006e78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a60:	e20a      	b.n	8006e78 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 8206 	beq.w	8006e78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a74:	e200      	b.n	8006e78 <HAL_DMA_IRQHandler+0xe08>
 8006a76:	bf00      	nop
 8006a78:	40020010 	.word	0x40020010
 8006a7c:	40020028 	.word	0x40020028
 8006a80:	40020040 	.word	0x40020040
 8006a84:	40020058 	.word	0x40020058
 8006a88:	40020070 	.word	0x40020070
 8006a8c:	40020088 	.word	0x40020088
 8006a90:	400200a0 	.word	0x400200a0
 8006a94:	400200b8 	.word	0x400200b8
 8006a98:	40020410 	.word	0x40020410
 8006a9c:	40020428 	.word	0x40020428
 8006aa0:	40020440 	.word	0x40020440
 8006aa4:	40020458 	.word	0x40020458
 8006aa8:	40020470 	.word	0x40020470
 8006aac:	40020488 	.word	0x40020488
 8006ab0:	400204a0 	.word	0x400204a0
 8006ab4:	400204b8 	.word	0x400204b8
 8006ab8:	58025408 	.word	0x58025408
 8006abc:	5802541c 	.word	0x5802541c
 8006ac0:	58025430 	.word	0x58025430
 8006ac4:	58025444 	.word	0x58025444
 8006ac8:	58025458 	.word	0x58025458
 8006acc:	5802546c 	.word	0x5802546c
 8006ad0:	58025480 	.word	0x58025480
 8006ad4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d160      	bne.n	8006ba4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a7f      	ldr	r2, [pc, #508]	; (8006ce4 <HAL_DMA_IRQHandler+0xc74>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d04a      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a7d      	ldr	r2, [pc, #500]	; (8006ce8 <HAL_DMA_IRQHandler+0xc78>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d045      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a7c      	ldr	r2, [pc, #496]	; (8006cec <HAL_DMA_IRQHandler+0xc7c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d040      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a7a      	ldr	r2, [pc, #488]	; (8006cf0 <HAL_DMA_IRQHandler+0xc80>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d03b      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a79      	ldr	r2, [pc, #484]	; (8006cf4 <HAL_DMA_IRQHandler+0xc84>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d036      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a77      	ldr	r2, [pc, #476]	; (8006cf8 <HAL_DMA_IRQHandler+0xc88>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d031      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a76      	ldr	r2, [pc, #472]	; (8006cfc <HAL_DMA_IRQHandler+0xc8c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d02c      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a74      	ldr	r2, [pc, #464]	; (8006d00 <HAL_DMA_IRQHandler+0xc90>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d027      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a73      	ldr	r2, [pc, #460]	; (8006d04 <HAL_DMA_IRQHandler+0xc94>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d022      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a71      	ldr	r2, [pc, #452]	; (8006d08 <HAL_DMA_IRQHandler+0xc98>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d01d      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a70      	ldr	r2, [pc, #448]	; (8006d0c <HAL_DMA_IRQHandler+0xc9c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d018      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a6e      	ldr	r2, [pc, #440]	; (8006d10 <HAL_DMA_IRQHandler+0xca0>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d013      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a6d      	ldr	r2, [pc, #436]	; (8006d14 <HAL_DMA_IRQHandler+0xca4>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00e      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a6b      	ldr	r2, [pc, #428]	; (8006d18 <HAL_DMA_IRQHandler+0xca8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d009      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a6a      	ldr	r2, [pc, #424]	; (8006d1c <HAL_DMA_IRQHandler+0xcac>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d004      	beq.n	8006b82 <HAL_DMA_IRQHandler+0xb12>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a68      	ldr	r2, [pc, #416]	; (8006d20 <HAL_DMA_IRQHandler+0xcb0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d108      	bne.n	8006b94 <HAL_DMA_IRQHandler+0xb24>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0208 	bic.w	r2, r2, #8
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	e007      	b.n	8006ba4 <HAL_DMA_IRQHandler+0xb34>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0204 	bic.w	r2, r2, #4
 8006ba2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 8165 	beq.w	8006e78 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb6:	e15f      	b.n	8006e78 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	409a      	lsls	r2, r3
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 80c5 	beq.w	8006d58 <HAL_DMA_IRQHandler+0xce8>
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 80bf 	beq.w	8006d58 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bde:	f003 031f 	and.w	r3, r3, #31
 8006be2:	2202      	movs	r2, #2
 8006be4:	409a      	lsls	r2, r3
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d018      	beq.n	8006c26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d109      	bne.n	8006c12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 813a 	beq.w	8006e7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c10:	e134      	b.n	8006e7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 8130 	beq.w	8006e7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c24:	e12a      	b.n	8006e7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f040 8089 	bne.w	8006d44 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2b      	ldr	r2, [pc, #172]	; (8006ce4 <HAL_DMA_IRQHandler+0xc74>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d04a      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a29      	ldr	r2, [pc, #164]	; (8006ce8 <HAL_DMA_IRQHandler+0xc78>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d045      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a28      	ldr	r2, [pc, #160]	; (8006cec <HAL_DMA_IRQHandler+0xc7c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d040      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a26      	ldr	r2, [pc, #152]	; (8006cf0 <HAL_DMA_IRQHandler+0xc80>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d03b      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a25      	ldr	r2, [pc, #148]	; (8006cf4 <HAL_DMA_IRQHandler+0xc84>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d036      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a23      	ldr	r2, [pc, #140]	; (8006cf8 <HAL_DMA_IRQHandler+0xc88>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d031      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a22      	ldr	r2, [pc, #136]	; (8006cfc <HAL_DMA_IRQHandler+0xc8c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d02c      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a20      	ldr	r2, [pc, #128]	; (8006d00 <HAL_DMA_IRQHandler+0xc90>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d027      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1f      	ldr	r2, [pc, #124]	; (8006d04 <HAL_DMA_IRQHandler+0xc94>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d022      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a1d      	ldr	r2, [pc, #116]	; (8006d08 <HAL_DMA_IRQHandler+0xc98>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d01d      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1c      	ldr	r2, [pc, #112]	; (8006d0c <HAL_DMA_IRQHandler+0xc9c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d018      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a1a      	ldr	r2, [pc, #104]	; (8006d10 <HAL_DMA_IRQHandler+0xca0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d013      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a19      	ldr	r2, [pc, #100]	; (8006d14 <HAL_DMA_IRQHandler+0xca4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00e      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a17      	ldr	r2, [pc, #92]	; (8006d18 <HAL_DMA_IRQHandler+0xca8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d009      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a16      	ldr	r2, [pc, #88]	; (8006d1c <HAL_DMA_IRQHandler+0xcac>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d004      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xc62>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a14      	ldr	r2, [pc, #80]	; (8006d20 <HAL_DMA_IRQHandler+0xcb0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d128      	bne.n	8006d24 <HAL_DMA_IRQHandler+0xcb4>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0214 	bic.w	r2, r2, #20
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	e027      	b.n	8006d34 <HAL_DMA_IRQHandler+0xcc4>
 8006ce4:	40020010 	.word	0x40020010
 8006ce8:	40020028 	.word	0x40020028
 8006cec:	40020040 	.word	0x40020040
 8006cf0:	40020058 	.word	0x40020058
 8006cf4:	40020070 	.word	0x40020070
 8006cf8:	40020088 	.word	0x40020088
 8006cfc:	400200a0 	.word	0x400200a0
 8006d00:	400200b8 	.word	0x400200b8
 8006d04:	40020410 	.word	0x40020410
 8006d08:	40020428 	.word	0x40020428
 8006d0c:	40020440 	.word	0x40020440
 8006d10:	40020458 	.word	0x40020458
 8006d14:	40020470 	.word	0x40020470
 8006d18:	40020488 	.word	0x40020488
 8006d1c:	400204a0 	.word	0x400204a0
 8006d20:	400204b8 	.word	0x400204b8
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 020a 	bic.w	r2, r2, #10
 8006d32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 8097 	beq.w	8006e7c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d56:	e091      	b.n	8006e7c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	2208      	movs	r2, #8
 8006d62:	409a      	lsls	r2, r3
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	4013      	ands	r3, r2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 8088 	beq.w	8006e7e <HAL_DMA_IRQHandler+0xe0e>
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f003 0308 	and.w	r3, r3, #8
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 8082 	beq.w	8006e7e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a41      	ldr	r2, [pc, #260]	; (8006e84 <HAL_DMA_IRQHandler+0xe14>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d04a      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a3f      	ldr	r2, [pc, #252]	; (8006e88 <HAL_DMA_IRQHandler+0xe18>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d045      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a3e      	ldr	r2, [pc, #248]	; (8006e8c <HAL_DMA_IRQHandler+0xe1c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d040      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a3c      	ldr	r2, [pc, #240]	; (8006e90 <HAL_DMA_IRQHandler+0xe20>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d03b      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a3b      	ldr	r2, [pc, #236]	; (8006e94 <HAL_DMA_IRQHandler+0xe24>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d036      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a39      	ldr	r2, [pc, #228]	; (8006e98 <HAL_DMA_IRQHandler+0xe28>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d031      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a38      	ldr	r2, [pc, #224]	; (8006e9c <HAL_DMA_IRQHandler+0xe2c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d02c      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a36      	ldr	r2, [pc, #216]	; (8006ea0 <HAL_DMA_IRQHandler+0xe30>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d027      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a35      	ldr	r2, [pc, #212]	; (8006ea4 <HAL_DMA_IRQHandler+0xe34>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d022      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a33      	ldr	r2, [pc, #204]	; (8006ea8 <HAL_DMA_IRQHandler+0xe38>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d01d      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a32      	ldr	r2, [pc, #200]	; (8006eac <HAL_DMA_IRQHandler+0xe3c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d018      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a30      	ldr	r2, [pc, #192]	; (8006eb0 <HAL_DMA_IRQHandler+0xe40>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d013      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a2f      	ldr	r2, [pc, #188]	; (8006eb4 <HAL_DMA_IRQHandler+0xe44>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d00e      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a2d      	ldr	r2, [pc, #180]	; (8006eb8 <HAL_DMA_IRQHandler+0xe48>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d009      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a2c      	ldr	r2, [pc, #176]	; (8006ebc <HAL_DMA_IRQHandler+0xe4c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d004      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xdaa>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a2a      	ldr	r2, [pc, #168]	; (8006ec0 <HAL_DMA_IRQHandler+0xe50>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d108      	bne.n	8006e2c <HAL_DMA_IRQHandler+0xdbc>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 021c 	bic.w	r2, r2, #28
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	e007      	b.n	8006e3c <HAL_DMA_IRQHandler+0xdcc>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 020e 	bic.w	r2, r2, #14
 8006e3a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e40:	f003 031f 	and.w	r3, r3, #31
 8006e44:	2201      	movs	r2, #1
 8006e46:	409a      	lsls	r2, r3
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d009      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	4798      	blx	r3
 8006e72:	e004      	b.n	8006e7e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006e74:	bf00      	nop
 8006e76:	e002      	b.n	8006e7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e78:	bf00      	nop
 8006e7a:	e000      	b.n	8006e7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e7c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e7e:	3728      	adds	r7, #40	; 0x28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	40020010 	.word	0x40020010
 8006e88:	40020028 	.word	0x40020028
 8006e8c:	40020040 	.word	0x40020040
 8006e90:	40020058 	.word	0x40020058
 8006e94:	40020070 	.word	0x40020070
 8006e98:	40020088 	.word	0x40020088
 8006e9c:	400200a0 	.word	0x400200a0
 8006ea0:	400200b8 	.word	0x400200b8
 8006ea4:	40020410 	.word	0x40020410
 8006ea8:	40020428 	.word	0x40020428
 8006eac:	40020440 	.word	0x40020440
 8006eb0:	40020458 	.word	0x40020458
 8006eb4:	40020470 	.word	0x40020470
 8006eb8:	40020488 	.word	0x40020488
 8006ebc:	400204a0 	.word	0x400204a0
 8006ec0:	400204b8 	.word	0x400204b8

08006ec4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006edc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a7f      	ldr	r2, [pc, #508]	; (80070e0 <DMA_SetConfig+0x21c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d072      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a7d      	ldr	r2, [pc, #500]	; (80070e4 <DMA_SetConfig+0x220>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d06d      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a7c      	ldr	r2, [pc, #496]	; (80070e8 <DMA_SetConfig+0x224>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d068      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a7a      	ldr	r2, [pc, #488]	; (80070ec <DMA_SetConfig+0x228>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d063      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a79      	ldr	r2, [pc, #484]	; (80070f0 <DMA_SetConfig+0x22c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d05e      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a77      	ldr	r2, [pc, #476]	; (80070f4 <DMA_SetConfig+0x230>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d059      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a76      	ldr	r2, [pc, #472]	; (80070f8 <DMA_SetConfig+0x234>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d054      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a74      	ldr	r2, [pc, #464]	; (80070fc <DMA_SetConfig+0x238>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d04f      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a73      	ldr	r2, [pc, #460]	; (8007100 <DMA_SetConfig+0x23c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d04a      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a71      	ldr	r2, [pc, #452]	; (8007104 <DMA_SetConfig+0x240>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d045      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a70      	ldr	r2, [pc, #448]	; (8007108 <DMA_SetConfig+0x244>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d040      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a6e      	ldr	r2, [pc, #440]	; (800710c <DMA_SetConfig+0x248>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d03b      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a6d      	ldr	r2, [pc, #436]	; (8007110 <DMA_SetConfig+0x24c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d036      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a6b      	ldr	r2, [pc, #428]	; (8007114 <DMA_SetConfig+0x250>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d031      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a6a      	ldr	r2, [pc, #424]	; (8007118 <DMA_SetConfig+0x254>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d02c      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a68      	ldr	r2, [pc, #416]	; (800711c <DMA_SetConfig+0x258>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d027      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a67      	ldr	r2, [pc, #412]	; (8007120 <DMA_SetConfig+0x25c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d022      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a65      	ldr	r2, [pc, #404]	; (8007124 <DMA_SetConfig+0x260>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d01d      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a64      	ldr	r2, [pc, #400]	; (8007128 <DMA_SetConfig+0x264>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d018      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a62      	ldr	r2, [pc, #392]	; (800712c <DMA_SetConfig+0x268>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d013      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a61      	ldr	r2, [pc, #388]	; (8007130 <DMA_SetConfig+0x26c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00e      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a5f      	ldr	r2, [pc, #380]	; (8007134 <DMA_SetConfig+0x270>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d009      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a5e      	ldr	r2, [pc, #376]	; (8007138 <DMA_SetConfig+0x274>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d004      	beq.n	8006fce <DMA_SetConfig+0x10a>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a5c      	ldr	r2, [pc, #368]	; (800713c <DMA_SetConfig+0x278>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d101      	bne.n	8006fd2 <DMA_SetConfig+0x10e>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <DMA_SetConfig+0x110>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00d      	beq.n	8006ff4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fe0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d004      	beq.n	8006ff4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ff2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a39      	ldr	r2, [pc, #228]	; (80070e0 <DMA_SetConfig+0x21c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d04a      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a38      	ldr	r2, [pc, #224]	; (80070e4 <DMA_SetConfig+0x220>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d045      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a36      	ldr	r2, [pc, #216]	; (80070e8 <DMA_SetConfig+0x224>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d040      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a35      	ldr	r2, [pc, #212]	; (80070ec <DMA_SetConfig+0x228>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d03b      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a33      	ldr	r2, [pc, #204]	; (80070f0 <DMA_SetConfig+0x22c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d036      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a32      	ldr	r2, [pc, #200]	; (80070f4 <DMA_SetConfig+0x230>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d031      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a30      	ldr	r2, [pc, #192]	; (80070f8 <DMA_SetConfig+0x234>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d02c      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a2f      	ldr	r2, [pc, #188]	; (80070fc <DMA_SetConfig+0x238>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d027      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a2d      	ldr	r2, [pc, #180]	; (8007100 <DMA_SetConfig+0x23c>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d022      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a2c      	ldr	r2, [pc, #176]	; (8007104 <DMA_SetConfig+0x240>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d01d      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a2a      	ldr	r2, [pc, #168]	; (8007108 <DMA_SetConfig+0x244>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d018      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a29      	ldr	r2, [pc, #164]	; (800710c <DMA_SetConfig+0x248>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d013      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a27      	ldr	r2, [pc, #156]	; (8007110 <DMA_SetConfig+0x24c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00e      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a26      	ldr	r2, [pc, #152]	; (8007114 <DMA_SetConfig+0x250>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d009      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a24      	ldr	r2, [pc, #144]	; (8007118 <DMA_SetConfig+0x254>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d004      	beq.n	8007094 <DMA_SetConfig+0x1d0>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a23      	ldr	r2, [pc, #140]	; (800711c <DMA_SetConfig+0x258>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d101      	bne.n	8007098 <DMA_SetConfig+0x1d4>
 8007094:	2301      	movs	r3, #1
 8007096:	e000      	b.n	800709a <DMA_SetConfig+0x1d6>
 8007098:	2300      	movs	r3, #0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d059      	beq.n	8007152 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a2:	f003 031f 	and.w	r3, r3, #31
 80070a6:	223f      	movs	r2, #63	; 0x3f
 80070a8:	409a      	lsls	r2, r3
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	2b40      	cmp	r3, #64	; 0x40
 80070cc:	d138      	bne.n	8007140 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070de:	e086      	b.n	80071ee <DMA_SetConfig+0x32a>
 80070e0:	40020010 	.word	0x40020010
 80070e4:	40020028 	.word	0x40020028
 80070e8:	40020040 	.word	0x40020040
 80070ec:	40020058 	.word	0x40020058
 80070f0:	40020070 	.word	0x40020070
 80070f4:	40020088 	.word	0x40020088
 80070f8:	400200a0 	.word	0x400200a0
 80070fc:	400200b8 	.word	0x400200b8
 8007100:	40020410 	.word	0x40020410
 8007104:	40020428 	.word	0x40020428
 8007108:	40020440 	.word	0x40020440
 800710c:	40020458 	.word	0x40020458
 8007110:	40020470 	.word	0x40020470
 8007114:	40020488 	.word	0x40020488
 8007118:	400204a0 	.word	0x400204a0
 800711c:	400204b8 	.word	0x400204b8
 8007120:	58025408 	.word	0x58025408
 8007124:	5802541c 	.word	0x5802541c
 8007128:	58025430 	.word	0x58025430
 800712c:	58025444 	.word	0x58025444
 8007130:	58025458 	.word	0x58025458
 8007134:	5802546c 	.word	0x5802546c
 8007138:	58025480 	.word	0x58025480
 800713c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	60da      	str	r2, [r3, #12]
}
 8007150:	e04d      	b.n	80071ee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a29      	ldr	r2, [pc, #164]	; (80071fc <DMA_SetConfig+0x338>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d022      	beq.n	80071a2 <DMA_SetConfig+0x2de>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a27      	ldr	r2, [pc, #156]	; (8007200 <DMA_SetConfig+0x33c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d01d      	beq.n	80071a2 <DMA_SetConfig+0x2de>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a26      	ldr	r2, [pc, #152]	; (8007204 <DMA_SetConfig+0x340>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d018      	beq.n	80071a2 <DMA_SetConfig+0x2de>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a24      	ldr	r2, [pc, #144]	; (8007208 <DMA_SetConfig+0x344>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d013      	beq.n	80071a2 <DMA_SetConfig+0x2de>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a23      	ldr	r2, [pc, #140]	; (800720c <DMA_SetConfig+0x348>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d00e      	beq.n	80071a2 <DMA_SetConfig+0x2de>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a21      	ldr	r2, [pc, #132]	; (8007210 <DMA_SetConfig+0x34c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d009      	beq.n	80071a2 <DMA_SetConfig+0x2de>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a20      	ldr	r2, [pc, #128]	; (8007214 <DMA_SetConfig+0x350>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d004      	beq.n	80071a2 <DMA_SetConfig+0x2de>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a1e      	ldr	r2, [pc, #120]	; (8007218 <DMA_SetConfig+0x354>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d101      	bne.n	80071a6 <DMA_SetConfig+0x2e2>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e000      	b.n	80071a8 <DMA_SetConfig+0x2e4>
 80071a6:	2300      	movs	r3, #0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d020      	beq.n	80071ee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b0:	f003 031f 	and.w	r3, r3, #31
 80071b4:	2201      	movs	r2, #1
 80071b6:	409a      	lsls	r2, r3
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	2b40      	cmp	r3, #64	; 0x40
 80071ca:	d108      	bne.n	80071de <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	60da      	str	r2, [r3, #12]
}
 80071dc:	e007      	b.n	80071ee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	60da      	str	r2, [r3, #12]
}
 80071ee:	bf00      	nop
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	58025408 	.word	0x58025408
 8007200:	5802541c 	.word	0x5802541c
 8007204:	58025430 	.word	0x58025430
 8007208:	58025444 	.word	0x58025444
 800720c:	58025458 	.word	0x58025458
 8007210:	5802546c 	.word	0x5802546c
 8007214:	58025480 	.word	0x58025480
 8007218:	58025494 	.word	0x58025494

0800721c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a42      	ldr	r2, [pc, #264]	; (8007334 <DMA_CalcBaseAndBitshift+0x118>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d04a      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a41      	ldr	r2, [pc, #260]	; (8007338 <DMA_CalcBaseAndBitshift+0x11c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d045      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a3f      	ldr	r2, [pc, #252]	; (800733c <DMA_CalcBaseAndBitshift+0x120>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d040      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a3e      	ldr	r2, [pc, #248]	; (8007340 <DMA_CalcBaseAndBitshift+0x124>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d03b      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a3c      	ldr	r2, [pc, #240]	; (8007344 <DMA_CalcBaseAndBitshift+0x128>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d036      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a3b      	ldr	r2, [pc, #236]	; (8007348 <DMA_CalcBaseAndBitshift+0x12c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d031      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a39      	ldr	r2, [pc, #228]	; (800734c <DMA_CalcBaseAndBitshift+0x130>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d02c      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a38      	ldr	r2, [pc, #224]	; (8007350 <DMA_CalcBaseAndBitshift+0x134>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d027      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a36      	ldr	r2, [pc, #216]	; (8007354 <DMA_CalcBaseAndBitshift+0x138>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d022      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a35      	ldr	r2, [pc, #212]	; (8007358 <DMA_CalcBaseAndBitshift+0x13c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d01d      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a33      	ldr	r2, [pc, #204]	; (800735c <DMA_CalcBaseAndBitshift+0x140>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d018      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a32      	ldr	r2, [pc, #200]	; (8007360 <DMA_CalcBaseAndBitshift+0x144>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d013      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a30      	ldr	r2, [pc, #192]	; (8007364 <DMA_CalcBaseAndBitshift+0x148>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d00e      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a2f      	ldr	r2, [pc, #188]	; (8007368 <DMA_CalcBaseAndBitshift+0x14c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d009      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a2d      	ldr	r2, [pc, #180]	; (800736c <DMA_CalcBaseAndBitshift+0x150>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d004      	beq.n	80072c4 <DMA_CalcBaseAndBitshift+0xa8>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a2c      	ldr	r2, [pc, #176]	; (8007370 <DMA_CalcBaseAndBitshift+0x154>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d101      	bne.n	80072c8 <DMA_CalcBaseAndBitshift+0xac>
 80072c4:	2301      	movs	r3, #1
 80072c6:	e000      	b.n	80072ca <DMA_CalcBaseAndBitshift+0xae>
 80072c8:	2300      	movs	r3, #0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d024      	beq.n	8007318 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	3b10      	subs	r3, #16
 80072d6:	4a27      	ldr	r2, [pc, #156]	; (8007374 <DMA_CalcBaseAndBitshift+0x158>)
 80072d8:	fba2 2303 	umull	r2, r3, r2, r3
 80072dc:	091b      	lsrs	r3, r3, #4
 80072de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	4a24      	ldr	r2, [pc, #144]	; (8007378 <DMA_CalcBaseAndBitshift+0x15c>)
 80072e8:	5cd3      	ldrb	r3, [r2, r3]
 80072ea:	461a      	mov	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d908      	bls.n	8007308 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	4b1f      	ldr	r3, [pc, #124]	; (800737c <DMA_CalcBaseAndBitshift+0x160>)
 80072fe:	4013      	ands	r3, r2
 8007300:	1d1a      	adds	r2, r3, #4
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	659a      	str	r2, [r3, #88]	; 0x58
 8007306:	e00d      	b.n	8007324 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	461a      	mov	r2, r3
 800730e:	4b1b      	ldr	r3, [pc, #108]	; (800737c <DMA_CalcBaseAndBitshift+0x160>)
 8007310:	4013      	ands	r3, r2
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6593      	str	r3, [r2, #88]	; 0x58
 8007316:	e005      	b.n	8007324 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	40020010 	.word	0x40020010
 8007338:	40020028 	.word	0x40020028
 800733c:	40020040 	.word	0x40020040
 8007340:	40020058 	.word	0x40020058
 8007344:	40020070 	.word	0x40020070
 8007348:	40020088 	.word	0x40020088
 800734c:	400200a0 	.word	0x400200a0
 8007350:	400200b8 	.word	0x400200b8
 8007354:	40020410 	.word	0x40020410
 8007358:	40020428 	.word	0x40020428
 800735c:	40020440 	.word	0x40020440
 8007360:	40020458 	.word	0x40020458
 8007364:	40020470 	.word	0x40020470
 8007368:	40020488 	.word	0x40020488
 800736c:	400204a0 	.word	0x400204a0
 8007370:	400204b8 	.word	0x400204b8
 8007374:	aaaaaaab 	.word	0xaaaaaaab
 8007378:	08010f28 	.word	0x08010f28
 800737c:	fffffc00 	.word	0xfffffc00

08007380 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d120      	bne.n	80073d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007398:	2b03      	cmp	r3, #3
 800739a:	d858      	bhi.n	800744e <DMA_CheckFifoParam+0xce>
 800739c:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <DMA_CheckFifoParam+0x24>)
 800739e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a2:	bf00      	nop
 80073a4:	080073b5 	.word	0x080073b5
 80073a8:	080073c7 	.word	0x080073c7
 80073ac:	080073b5 	.word	0x080073b5
 80073b0:	0800744f 	.word	0x0800744f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d048      	beq.n	8007452 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073c4:	e045      	b.n	8007452 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073ce:	d142      	bne.n	8007456 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073d4:	e03f      	b.n	8007456 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073de:	d123      	bne.n	8007428 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e4:	2b03      	cmp	r3, #3
 80073e6:	d838      	bhi.n	800745a <DMA_CheckFifoParam+0xda>
 80073e8:	a201      	add	r2, pc, #4	; (adr r2, 80073f0 <DMA_CheckFifoParam+0x70>)
 80073ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ee:	bf00      	nop
 80073f0:	08007401 	.word	0x08007401
 80073f4:	08007407 	.word	0x08007407
 80073f8:	08007401 	.word	0x08007401
 80073fc:	08007419 	.word	0x08007419
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	73fb      	strb	r3, [r7, #15]
        break;
 8007404:	e030      	b.n	8007468 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d025      	beq.n	800745e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007416:	e022      	b.n	800745e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007420:	d11f      	bne.n	8007462 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007426:	e01c      	b.n	8007462 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742c:	2b02      	cmp	r3, #2
 800742e:	d902      	bls.n	8007436 <DMA_CheckFifoParam+0xb6>
 8007430:	2b03      	cmp	r3, #3
 8007432:	d003      	beq.n	800743c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007434:	e018      	b.n	8007468 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	73fb      	strb	r3, [r7, #15]
        break;
 800743a:	e015      	b.n	8007468 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00e      	beq.n	8007466 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	73fb      	strb	r3, [r7, #15]
    break;
 800744c:	e00b      	b.n	8007466 <DMA_CheckFifoParam+0xe6>
        break;
 800744e:	bf00      	nop
 8007450:	e00a      	b.n	8007468 <DMA_CheckFifoParam+0xe8>
        break;
 8007452:	bf00      	nop
 8007454:	e008      	b.n	8007468 <DMA_CheckFifoParam+0xe8>
        break;
 8007456:	bf00      	nop
 8007458:	e006      	b.n	8007468 <DMA_CheckFifoParam+0xe8>
        break;
 800745a:	bf00      	nop
 800745c:	e004      	b.n	8007468 <DMA_CheckFifoParam+0xe8>
        break;
 800745e:	bf00      	nop
 8007460:	e002      	b.n	8007468 <DMA_CheckFifoParam+0xe8>
        break;
 8007462:	bf00      	nop
 8007464:	e000      	b.n	8007468 <DMA_CheckFifoParam+0xe8>
    break;
 8007466:	bf00      	nop
    }
  }

  return status;
 8007468:	7bfb      	ldrb	r3, [r7, #15]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop

08007478 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a38      	ldr	r2, [pc, #224]	; (800756c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d022      	beq.n	80074d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a36      	ldr	r2, [pc, #216]	; (8007570 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d01d      	beq.n	80074d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a35      	ldr	r2, [pc, #212]	; (8007574 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d018      	beq.n	80074d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a33      	ldr	r2, [pc, #204]	; (8007578 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d013      	beq.n	80074d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a32      	ldr	r2, [pc, #200]	; (800757c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d00e      	beq.n	80074d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a30      	ldr	r2, [pc, #192]	; (8007580 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d009      	beq.n	80074d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a2f      	ldr	r2, [pc, #188]	; (8007584 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d004      	beq.n	80074d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a2d      	ldr	r2, [pc, #180]	; (8007588 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d101      	bne.n	80074da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80074d6:	2301      	movs	r3, #1
 80074d8:	e000      	b.n	80074dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80074da:	2300      	movs	r3, #0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d01a      	beq.n	8007516 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	3b08      	subs	r3, #8
 80074e8:	4a28      	ldr	r2, [pc, #160]	; (800758c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80074ea:	fba2 2303 	umull	r2, r3, r2, r3
 80074ee:	091b      	lsrs	r3, r3, #4
 80074f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4b26      	ldr	r3, [pc, #152]	; (8007590 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	461a      	mov	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a24      	ldr	r2, [pc, #144]	; (8007594 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007504:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f003 031f 	and.w	r3, r3, #31
 800750c:	2201      	movs	r2, #1
 800750e:	409a      	lsls	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007514:	e024      	b.n	8007560 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	3b10      	subs	r3, #16
 800751e:	4a1e      	ldr	r2, [pc, #120]	; (8007598 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007520:	fba2 2303 	umull	r2, r3, r2, r3
 8007524:	091b      	lsrs	r3, r3, #4
 8007526:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	4a1c      	ldr	r2, [pc, #112]	; (800759c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d806      	bhi.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	4a1b      	ldr	r2, [pc, #108]	; (80075a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d902      	bls.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3308      	adds	r3, #8
 800753c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4b18      	ldr	r3, [pc, #96]	; (80075a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007542:	4413      	add	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	461a      	mov	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a16      	ldr	r2, [pc, #88]	; (80075a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007550:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f003 031f 	and.w	r3, r3, #31
 8007558:	2201      	movs	r2, #1
 800755a:	409a      	lsls	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007560:	bf00      	nop
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	58025408 	.word	0x58025408
 8007570:	5802541c 	.word	0x5802541c
 8007574:	58025430 	.word	0x58025430
 8007578:	58025444 	.word	0x58025444
 800757c:	58025458 	.word	0x58025458
 8007580:	5802546c 	.word	0x5802546c
 8007584:	58025480 	.word	0x58025480
 8007588:	58025494 	.word	0x58025494
 800758c:	cccccccd 	.word	0xcccccccd
 8007590:	16009600 	.word	0x16009600
 8007594:	58025880 	.word	0x58025880
 8007598:	aaaaaaab 	.word	0xaaaaaaab
 800759c:	400204b8 	.word	0x400204b8
 80075a0:	4002040f 	.word	0x4002040f
 80075a4:	10008200 	.word	0x10008200
 80075a8:	40020880 	.word	0x40020880

080075ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d04a      	beq.n	8007658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b08      	cmp	r3, #8
 80075c6:	d847      	bhi.n	8007658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a25      	ldr	r2, [pc, #148]	; (8007664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d022      	beq.n	8007618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a24      	ldr	r2, [pc, #144]	; (8007668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d01d      	beq.n	8007618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a22      	ldr	r2, [pc, #136]	; (800766c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d018      	beq.n	8007618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a21      	ldr	r2, [pc, #132]	; (8007670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d013      	beq.n	8007618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a1f      	ldr	r2, [pc, #124]	; (8007674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00e      	beq.n	8007618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a1e      	ldr	r2, [pc, #120]	; (8007678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d009      	beq.n	8007618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a1c      	ldr	r2, [pc, #112]	; (800767c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d004      	beq.n	8007618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1b      	ldr	r2, [pc, #108]	; (8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d101      	bne.n	800761c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007618:	2301      	movs	r3, #1
 800761a:	e000      	b.n	800761e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800761c:	2300      	movs	r3, #0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	4b17      	ldr	r3, [pc, #92]	; (8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	461a      	mov	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a15      	ldr	r2, [pc, #84]	; (8007688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007634:	671a      	str	r2, [r3, #112]	; 0x70
 8007636:	e009      	b.n	800764c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	4b14      	ldr	r3, [pc, #80]	; (800768c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	461a      	mov	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a11      	ldr	r2, [pc, #68]	; (8007690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800764a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3b01      	subs	r3, #1
 8007650:	2201      	movs	r2, #1
 8007652:	409a      	lsls	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	58025408 	.word	0x58025408
 8007668:	5802541c 	.word	0x5802541c
 800766c:	58025430 	.word	0x58025430
 8007670:	58025444 	.word	0x58025444
 8007674:	58025458 	.word	0x58025458
 8007678:	5802546c 	.word	0x5802546c
 800767c:	58025480 	.word	0x58025480
 8007680:	58025494 	.word	0x58025494
 8007684:	1600963f 	.word	0x1600963f
 8007688:	58025940 	.word	0x58025940
 800768c:	1000823f 	.word	0x1000823f
 8007690:	40020940 	.word	0x40020940

08007694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007694:	b480      	push	{r7}
 8007696:	b089      	sub	sp, #36	; 0x24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800769e:	2300      	movs	r3, #0
 80076a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80076a2:	4b89      	ldr	r3, [pc, #548]	; (80078c8 <HAL_GPIO_Init+0x234>)
 80076a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076a6:	e194      	b.n	80079d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	2101      	movs	r1, #1
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	fa01 f303 	lsl.w	r3, r1, r3
 80076b4:	4013      	ands	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 8186 	beq.w	80079cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f003 0303 	and.w	r3, r3, #3
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d005      	beq.n	80076d8 <HAL_GPIO_Init+0x44>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f003 0303 	and.w	r3, r3, #3
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d130      	bne.n	800773a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	2203      	movs	r2, #3
 80076e4:	fa02 f303 	lsl.w	r3, r2, r3
 80076e8:	43db      	mvns	r3, r3
 80076ea:	69ba      	ldr	r2, [r7, #24]
 80076ec:	4013      	ands	r3, r2
 80076ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	fa02 f303 	lsl.w	r3, r2, r3
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	4313      	orrs	r3, r2
 8007700:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800770e:	2201      	movs	r2, #1
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	fa02 f303 	lsl.w	r3, r2, r3
 8007716:	43db      	mvns	r3, r3
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	4013      	ands	r3, r2
 800771c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	091b      	lsrs	r3, r3, #4
 8007724:	f003 0201 	and.w	r2, r3, #1
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	fa02 f303 	lsl.w	r3, r2, r3
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	4313      	orrs	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	2b03      	cmp	r3, #3
 8007744:	d017      	beq.n	8007776 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	2203      	movs	r2, #3
 8007752:	fa02 f303 	lsl.w	r3, r2, r3
 8007756:	43db      	mvns	r3, r3
 8007758:	69ba      	ldr	r2, [r7, #24]
 800775a:	4013      	ands	r3, r2
 800775c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	689a      	ldr	r2, [r3, #8]
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	fa02 f303 	lsl.w	r3, r2, r3
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	4313      	orrs	r3, r2
 800776e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	2b02      	cmp	r3, #2
 8007780:	d123      	bne.n	80077ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	08da      	lsrs	r2, r3, #3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3208      	adds	r2, #8
 800778a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	220f      	movs	r2, #15
 800779a:	fa02 f303 	lsl.w	r3, r2, r3
 800779e:	43db      	mvns	r3, r3
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	4013      	ands	r3, r2
 80077a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	691a      	ldr	r2, [r3, #16]
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	f003 0307 	and.w	r3, r3, #7
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	fa02 f303 	lsl.w	r3, r2, r3
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	08da      	lsrs	r2, r3, #3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3208      	adds	r2, #8
 80077c4:	69b9      	ldr	r1, [r7, #24]
 80077c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	2203      	movs	r2, #3
 80077d6:	fa02 f303 	lsl.w	r3, r2, r3
 80077da:	43db      	mvns	r3, r3
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	4013      	ands	r3, r2
 80077e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f003 0203 	and.w	r2, r3, #3
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	fa02 f303 	lsl.w	r3, r2, r3
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 80e0 	beq.w	80079cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800780c:	4b2f      	ldr	r3, [pc, #188]	; (80078cc <HAL_GPIO_Init+0x238>)
 800780e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007812:	4a2e      	ldr	r2, [pc, #184]	; (80078cc <HAL_GPIO_Init+0x238>)
 8007814:	f043 0302 	orr.w	r3, r3, #2
 8007818:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800781c:	4b2b      	ldr	r3, [pc, #172]	; (80078cc <HAL_GPIO_Init+0x238>)
 800781e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800782a:	4a29      	ldr	r2, [pc, #164]	; (80078d0 <HAL_GPIO_Init+0x23c>)
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	089b      	lsrs	r3, r3, #2
 8007830:	3302      	adds	r3, #2
 8007832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	f003 0303 	and.w	r3, r3, #3
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	220f      	movs	r2, #15
 8007842:	fa02 f303 	lsl.w	r3, r2, r3
 8007846:	43db      	mvns	r3, r3
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	4013      	ands	r3, r2
 800784c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a20      	ldr	r2, [pc, #128]	; (80078d4 <HAL_GPIO_Init+0x240>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d052      	beq.n	80078fc <HAL_GPIO_Init+0x268>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a1f      	ldr	r2, [pc, #124]	; (80078d8 <HAL_GPIO_Init+0x244>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d031      	beq.n	80078c2 <HAL_GPIO_Init+0x22e>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a1e      	ldr	r2, [pc, #120]	; (80078dc <HAL_GPIO_Init+0x248>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d02b      	beq.n	80078be <HAL_GPIO_Init+0x22a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a1d      	ldr	r2, [pc, #116]	; (80078e0 <HAL_GPIO_Init+0x24c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d025      	beq.n	80078ba <HAL_GPIO_Init+0x226>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a1c      	ldr	r2, [pc, #112]	; (80078e4 <HAL_GPIO_Init+0x250>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d01f      	beq.n	80078b6 <HAL_GPIO_Init+0x222>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a1b      	ldr	r2, [pc, #108]	; (80078e8 <HAL_GPIO_Init+0x254>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d019      	beq.n	80078b2 <HAL_GPIO_Init+0x21e>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a1a      	ldr	r2, [pc, #104]	; (80078ec <HAL_GPIO_Init+0x258>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d013      	beq.n	80078ae <HAL_GPIO_Init+0x21a>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a19      	ldr	r2, [pc, #100]	; (80078f0 <HAL_GPIO_Init+0x25c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00d      	beq.n	80078aa <HAL_GPIO_Init+0x216>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a18      	ldr	r2, [pc, #96]	; (80078f4 <HAL_GPIO_Init+0x260>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d007      	beq.n	80078a6 <HAL_GPIO_Init+0x212>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a17      	ldr	r2, [pc, #92]	; (80078f8 <HAL_GPIO_Init+0x264>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d101      	bne.n	80078a2 <HAL_GPIO_Init+0x20e>
 800789e:	2309      	movs	r3, #9
 80078a0:	e02d      	b.n	80078fe <HAL_GPIO_Init+0x26a>
 80078a2:	230a      	movs	r3, #10
 80078a4:	e02b      	b.n	80078fe <HAL_GPIO_Init+0x26a>
 80078a6:	2308      	movs	r3, #8
 80078a8:	e029      	b.n	80078fe <HAL_GPIO_Init+0x26a>
 80078aa:	2307      	movs	r3, #7
 80078ac:	e027      	b.n	80078fe <HAL_GPIO_Init+0x26a>
 80078ae:	2306      	movs	r3, #6
 80078b0:	e025      	b.n	80078fe <HAL_GPIO_Init+0x26a>
 80078b2:	2305      	movs	r3, #5
 80078b4:	e023      	b.n	80078fe <HAL_GPIO_Init+0x26a>
 80078b6:	2304      	movs	r3, #4
 80078b8:	e021      	b.n	80078fe <HAL_GPIO_Init+0x26a>
 80078ba:	2303      	movs	r3, #3
 80078bc:	e01f      	b.n	80078fe <HAL_GPIO_Init+0x26a>
 80078be:	2302      	movs	r3, #2
 80078c0:	e01d      	b.n	80078fe <HAL_GPIO_Init+0x26a>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e01b      	b.n	80078fe <HAL_GPIO_Init+0x26a>
 80078c6:	bf00      	nop
 80078c8:	58000080 	.word	0x58000080
 80078cc:	58024400 	.word	0x58024400
 80078d0:	58000400 	.word	0x58000400
 80078d4:	58020000 	.word	0x58020000
 80078d8:	58020400 	.word	0x58020400
 80078dc:	58020800 	.word	0x58020800
 80078e0:	58020c00 	.word	0x58020c00
 80078e4:	58021000 	.word	0x58021000
 80078e8:	58021400 	.word	0x58021400
 80078ec:	58021800 	.word	0x58021800
 80078f0:	58021c00 	.word	0x58021c00
 80078f4:	58022000 	.word	0x58022000
 80078f8:	58022400 	.word	0x58022400
 80078fc:	2300      	movs	r3, #0
 80078fe:	69fa      	ldr	r2, [r7, #28]
 8007900:	f002 0203 	and.w	r2, r2, #3
 8007904:	0092      	lsls	r2, r2, #2
 8007906:	4093      	lsls	r3, r2
 8007908:	69ba      	ldr	r2, [r7, #24]
 800790a:	4313      	orrs	r3, r2
 800790c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800790e:	4938      	ldr	r1, [pc, #224]	; (80079f0 <HAL_GPIO_Init+0x35c>)
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	089b      	lsrs	r3, r3, #2
 8007914:	3302      	adds	r3, #2
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800791c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	43db      	mvns	r3, r3
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	4013      	ands	r3, r2
 800792c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	4313      	orrs	r3, r2
 8007940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800794a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	43db      	mvns	r3, r3
 8007956:	69ba      	ldr	r2, [r7, #24]
 8007958:	4013      	ands	r3, r2
 800795a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	4313      	orrs	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	43db      	mvns	r3, r3
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	4013      	ands	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	4313      	orrs	r3, r2
 800799a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	43db      	mvns	r3, r3
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	4013      	ands	r3, r2
 80079b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	3301      	adds	r3, #1
 80079d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	fa22 f303 	lsr.w	r3, r2, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f47f ae63 	bne.w	80076a8 <HAL_GPIO_Init+0x14>
  }
}
 80079e2:	bf00      	nop
 80079e4:	bf00      	nop
 80079e6:	3724      	adds	r7, #36	; 0x24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	58000400 	.word	0x58000400

080079f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691a      	ldr	r2, [r3, #16]
 8007a04:	887b      	ldrh	r3, [r7, #2]
 8007a06:	4013      	ands	r3, r2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	73fb      	strb	r3, [r7, #15]
 8007a10:	e001      	b.n	8007a16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	807b      	strh	r3, [r7, #2]
 8007a30:	4613      	mov	r3, r2
 8007a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a34:	787b      	ldrb	r3, [r7, #1]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a3a:	887a      	ldrh	r2, [r7, #2]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a40:	e003      	b.n	8007a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a42:	887b      	ldrh	r3, [r7, #2]
 8007a44:	041a      	lsls	r2, r3, #16
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	619a      	str	r2, [r3, #24]
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
	...

08007a58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e08b      	b.n	8007b82 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d106      	bne.n	8007a84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7fa fa82 	bl	8001f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2224      	movs	r2, #36	; 0x24
 8007a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0201 	bic.w	r2, r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007aa8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ab8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d107      	bne.n	8007ad2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ace:	609a      	str	r2, [r3, #8]
 8007ad0:	e006      	b.n	8007ae0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689a      	ldr	r2, [r3, #8]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007ade:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d108      	bne.n	8007afa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007af6:	605a      	str	r2, [r3, #4]
 8007af8:	e007      	b.n	8007b0a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6859      	ldr	r1, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	4b1d      	ldr	r3, [pc, #116]	; (8007b8c <HAL_I2C_Init+0x134>)
 8007b16:	430b      	orrs	r3, r1
 8007b18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691a      	ldr	r2, [r3, #16]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	69d9      	ldr	r1, [r3, #28]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f042 0201 	orr.w	r2, r2, #1
 8007b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	02008000 	.word	0x02008000

08007b90 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	607a      	str	r2, [r7, #4]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	817b      	strh	r3, [r7, #10]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b20      	cmp	r3, #32
 8007bae:	f040 80fd 	bne.w	8007dac <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_I2C_Master_Transmit+0x30>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e0f6      	b.n	8007dae <HAL_I2C_Master_Transmit+0x21e>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007bc8:	f7fa fe2c 	bl	8002824 <HAL_GetTick>
 8007bcc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	2319      	movs	r3, #25
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 fa0a 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e0e1      	b.n	8007dae <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2221      	movs	r2, #33	; 0x21
 8007bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2210      	movs	r2, #16
 8007bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	893a      	ldrh	r2, [r7, #8]
 8007c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	2bff      	cmp	r3, #255	; 0xff
 8007c1a:	d906      	bls.n	8007c2a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	22ff      	movs	r2, #255	; 0xff
 8007c20:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007c22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	e007      	b.n	8007c3a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007c34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c38:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d024      	beq.n	8007c8c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	781a      	ldrb	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	1c5a      	adds	r2, r3, #1
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	3301      	adds	r3, #1
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	8979      	ldrh	r1, [r7, #10]
 8007c7e:	4b4e      	ldr	r3, [pc, #312]	; (8007db8 <HAL_I2C_Master_Transmit+0x228>)
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 fc05 	bl	8008494 <I2C_TransferConfig>
 8007c8a:	e066      	b.n	8007d5a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	8979      	ldrh	r1, [r7, #10]
 8007c94:	4b48      	ldr	r3, [pc, #288]	; (8007db8 <HAL_I2C_Master_Transmit+0x228>)
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 fbfa 	bl	8008494 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007ca0:	e05b      	b.n	8007d5a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	6a39      	ldr	r1, [r7, #32]
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 f9fd 	bl	80080a6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e07b      	b.n	8007dae <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	781a      	ldrb	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d034      	beq.n	8007d5a <HAL_I2C_Master_Transmit+0x1ca>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d130      	bne.n	8007d5a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2180      	movs	r1, #128	; 0x80
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 f976 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e04d      	b.n	8007dae <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2bff      	cmp	r3, #255	; 0xff
 8007d1a:	d90e      	bls.n	8007d3a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	22ff      	movs	r2, #255	; 0xff
 8007d20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	8979      	ldrh	r1, [r7, #10]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 fbae 	bl	8008494 <I2C_TransferConfig>
 8007d38:	e00f      	b.n	8007d5a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	8979      	ldrh	r1, [r7, #10]
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 fb9d 	bl	8008494 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d19e      	bne.n	8007ca2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	6a39      	ldr	r1, [r7, #32]
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 f9e3 	bl	8008134 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e01a      	b.n	8007dae <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6859      	ldr	r1, [r3, #4]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <HAL_I2C_Master_Transmit+0x22c>)
 8007d8c:	400b      	ands	r3, r1
 8007d8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	e000      	b.n	8007dae <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007dac:	2302      	movs	r3, #2
  }
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3718      	adds	r7, #24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	80002000 	.word	0x80002000
 8007dbc:	fe00e800 	.word	0xfe00e800

08007dc0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b088      	sub	sp, #32
 8007dc4:	af02      	add	r7, sp, #8
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	607a      	str	r2, [r7, #4]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	460b      	mov	r3, r1
 8007dce:	817b      	strh	r3, [r7, #10]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	f040 80db 	bne.w	8007f98 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_I2C_Master_Receive+0x30>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e0d4      	b.n	8007f9a <HAL_I2C_Master_Receive+0x1da>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007df8:	f7fa fd14 	bl	8002824 <HAL_GetTick>
 8007dfc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	2319      	movs	r3, #25
 8007e04:	2201      	movs	r2, #1
 8007e06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f000 f8f2 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e0bf      	b.n	8007f9a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2222      	movs	r2, #34	; 0x22
 8007e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2210      	movs	r2, #16
 8007e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	893a      	ldrh	r2, [r7, #8]
 8007e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2bff      	cmp	r3, #255	; 0xff
 8007e4a:	d90e      	bls.n	8007e6a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	22ff      	movs	r2, #255	; 0xff
 8007e50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	8979      	ldrh	r1, [r7, #10]
 8007e5a:	4b52      	ldr	r3, [pc, #328]	; (8007fa4 <HAL_I2C_Master_Receive+0x1e4>)
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 fb16 	bl	8008494 <I2C_TransferConfig>
 8007e68:	e06d      	b.n	8007f46 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	8979      	ldrh	r1, [r7, #10]
 8007e7c:	4b49      	ldr	r3, [pc, #292]	; (8007fa4 <HAL_I2C_Master_Receive+0x1e4>)
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 fb05 	bl	8008494 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007e8a:	e05c      	b.n	8007f46 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	6a39      	ldr	r1, [r7, #32]
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 f993 	bl	80081bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e07c      	b.n	8007f9a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	b2d2      	uxtb	r2, r2
 8007eac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	1c5a      	adds	r2, r3, #1
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d034      	beq.n	8007f46 <HAL_I2C_Master_Receive+0x186>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d130      	bne.n	8007f46 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	2200      	movs	r2, #0
 8007eec:	2180      	movs	r1, #128	; 0x80
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 f880 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e04d      	b.n	8007f9a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	2bff      	cmp	r3, #255	; 0xff
 8007f06:	d90e      	bls.n	8007f26 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	22ff      	movs	r2, #255	; 0xff
 8007f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	8979      	ldrh	r1, [r7, #10]
 8007f16:	2300      	movs	r3, #0
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 fab8 	bl	8008494 <I2C_TransferConfig>
 8007f24:	e00f      	b.n	8007f46 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	8979      	ldrh	r1, [r7, #10]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 faa7 	bl	8008494 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d19d      	bne.n	8007e8c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	6a39      	ldr	r1, [r7, #32]
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 f8ed 	bl	8008134 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e01a      	b.n	8007f9a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6859      	ldr	r1, [r3, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	4b0c      	ldr	r3, [pc, #48]	; (8007fa8 <HAL_I2C_Master_Receive+0x1e8>)
 8007f78:	400b      	ands	r3, r1
 8007f7a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2220      	movs	r2, #32
 8007f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	e000      	b.n	8007f9a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007f98:	2302      	movs	r3, #2
  }
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	80002400 	.word	0x80002400
 8007fa8:	fe00e800 	.word	0xfe00e800

08007fac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d103      	bne.n	8007fca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d007      	beq.n	8007fe8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699a      	ldr	r2, [r3, #24]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f042 0201 	orr.w	r2, r2, #1
 8007fe6:	619a      	str	r2, [r3, #24]
  }
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	4613      	mov	r3, r2
 8008002:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008004:	e03b      	b.n	800807e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 f962 	bl	80082d4 <I2C_IsErrorOccurred>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e041      	b.n	800809e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008020:	d02d      	beq.n	800807e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008022:	f7fa fbff 	bl	8002824 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d302      	bcc.n	8008038 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d122      	bne.n	800807e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	699a      	ldr	r2, [r3, #24]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	4013      	ands	r3, r2
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	429a      	cmp	r2, r3
 8008046:	bf0c      	ite	eq
 8008048:	2301      	moveq	r3, #1
 800804a:	2300      	movne	r3, #0
 800804c:	b2db      	uxtb	r3, r3
 800804e:	461a      	mov	r2, r3
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	429a      	cmp	r2, r3
 8008054:	d113      	bne.n	800807e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805a:	f043 0220 	orr.w	r2, r3, #32
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2220      	movs	r2, #32
 8008066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e00f      	b.n	800809e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	699a      	ldr	r2, [r3, #24]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	4013      	ands	r3, r2
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	429a      	cmp	r2, r3
 800808c:	bf0c      	ite	eq
 800808e:	2301      	moveq	r3, #1
 8008090:	2300      	movne	r3, #0
 8008092:	b2db      	uxtb	r3, r3
 8008094:	461a      	mov	r2, r3
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	429a      	cmp	r2, r3
 800809a:	d0b4      	beq.n	8008006 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080b2:	e033      	b.n	800811c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	68b9      	ldr	r1, [r7, #8]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 f90b 	bl	80082d4 <I2C_IsErrorOccurred>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e031      	b.n	800812c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080ce:	d025      	beq.n	800811c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d0:	f7fa fba8 	bl	8002824 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d302      	bcc.n	80080e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d11a      	bne.n	800811c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d013      	beq.n	800811c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f8:	f043 0220 	orr.w	r2, r3, #32
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2220      	movs	r2, #32
 8008104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e007      	b.n	800812c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b02      	cmp	r3, #2
 8008128:	d1c4      	bne.n	80080b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008140:	e02f      	b.n	80081a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	68b9      	ldr	r1, [r7, #8]
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 f8c4 	bl	80082d4 <I2C_IsErrorOccurred>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e02d      	b.n	80081b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008156:	f7fa fb65 	bl	8002824 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	429a      	cmp	r2, r3
 8008164:	d302      	bcc.n	800816c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d11a      	bne.n	80081a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	f003 0320 	and.w	r3, r3, #32
 8008176:	2b20      	cmp	r3, #32
 8008178:	d013      	beq.n	80081a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817e:	f043 0220 	orr.w	r2, r3, #32
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2220      	movs	r2, #32
 800818a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e007      	b.n	80081b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b20      	cmp	r3, #32
 80081ae:	d1c8      	bne.n	8008142 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
	...

080081bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80081cc:	e071      	b.n	80082b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 f87e 	bl	80082d4 <I2C_IsErrorOccurred>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	f003 0320 	and.w	r3, r3, #32
 80081ec:	2b20      	cmp	r3, #32
 80081ee:	d13b      	bne.n	8008268 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d138      	bne.n	8008268 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b04      	cmp	r3, #4
 8008202:	d105      	bne.n	8008210 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	f003 0310 	and.w	r3, r3, #16
 800821a:	2b10      	cmp	r3, #16
 800821c:	d121      	bne.n	8008262 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2210      	movs	r2, #16
 8008224:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2204      	movs	r2, #4
 800822a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2220      	movs	r2, #32
 8008232:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6859      	ldr	r1, [r3, #4]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4b24      	ldr	r3, [pc, #144]	; (80082d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008240:	400b      	ands	r3, r1
 8008242:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2220      	movs	r2, #32
 8008248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	75fb      	strb	r3, [r7, #23]
 8008260:	e002      	b.n	8008268 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008268:	f7fa fadc 	bl	8002824 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	429a      	cmp	r2, r3
 8008276:	d302      	bcc.n	800827e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d119      	bne.n	80082b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800827e:	7dfb      	ldrb	r3, [r7, #23]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d116      	bne.n	80082b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	2b04      	cmp	r3, #4
 8008290:	d00f      	beq.n	80082b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008296:	f043 0220 	orr.w	r2, r3, #32
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2220      	movs	r2, #32
 80082a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d002      	beq.n	80082c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d083      	beq.n	80081ce <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	fe00e800 	.word	0xfe00e800

080082d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08a      	sub	sp, #40	; 0x28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	f003 0310 	and.w	r3, r3, #16
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d068      	beq.n	80083d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2210      	movs	r2, #16
 8008306:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008308:	e049      	b.n	800839e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008310:	d045      	beq.n	800839e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008312:	f7fa fa87 	bl	8002824 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	429a      	cmp	r2, r3
 8008320:	d302      	bcc.n	8008328 <I2C_IsErrorOccurred+0x54>
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d13a      	bne.n	800839e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008332:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800833a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800834a:	d121      	bne.n	8008390 <I2C_IsErrorOccurred+0xbc>
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008352:	d01d      	beq.n	8008390 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008354:	7cfb      	ldrb	r3, [r7, #19]
 8008356:	2b20      	cmp	r3, #32
 8008358:	d01a      	beq.n	8008390 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008368:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800836a:	f7fa fa5b 	bl	8002824 <HAL_GetTick>
 800836e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008370:	e00e      	b.n	8008390 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008372:	f7fa fa57 	bl	8002824 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b19      	cmp	r3, #25
 800837e:	d907      	bls.n	8008390 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	f043 0320 	orr.w	r3, r3, #32
 8008386:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800838e:	e006      	b.n	800839e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	f003 0320 	and.w	r3, r3, #32
 800839a:	2b20      	cmp	r3, #32
 800839c:	d1e9      	bne.n	8008372 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	f003 0320 	and.w	r3, r3, #32
 80083a8:	2b20      	cmp	r3, #32
 80083aa:	d003      	beq.n	80083b4 <I2C_IsErrorOccurred+0xe0>
 80083ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d0aa      	beq.n	800830a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80083b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d103      	bne.n	80083c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2220      	movs	r2, #32
 80083c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	f043 0304 	orr.w	r3, r3, #4
 80083ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00b      	beq.n	80083fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00b      	beq.n	800841e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	f043 0308 	orr.w	r3, r3, #8
 800840c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008416:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00b      	beq.n	8008440 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	f043 0302 	orr.w	r3, r3, #2
 800842e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008438:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01c      	beq.n	8008482 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f7ff fdaf 	bl	8007fac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6859      	ldr	r1, [r3, #4]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	4b0d      	ldr	r3, [pc, #52]	; (8008490 <I2C_IsErrorOccurred+0x1bc>)
 800845a:	400b      	ands	r3, r1
 800845c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	431a      	orrs	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2220      	movs	r2, #32
 800846e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008486:	4618      	mov	r0, r3
 8008488:	3728      	adds	r7, #40	; 0x28
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	fe00e800 	.word	0xfe00e800

08008494 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	607b      	str	r3, [r7, #4]
 800849e:	460b      	mov	r3, r1
 80084a0:	817b      	strh	r3, [r7, #10]
 80084a2:	4613      	mov	r3, r2
 80084a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084a6:	897b      	ldrh	r3, [r7, #10]
 80084a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084ac:	7a7b      	ldrb	r3, [r7, #9]
 80084ae:	041b      	lsls	r3, r3, #16
 80084b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	4313      	orrs	r3, r2
 80084be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	0d5b      	lsrs	r3, r3, #21
 80084ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80084d2:	4b08      	ldr	r3, [pc, #32]	; (80084f4 <I2C_TransferConfig+0x60>)
 80084d4:	430b      	orrs	r3, r1
 80084d6:	43db      	mvns	r3, r3
 80084d8:	ea02 0103 	and.w	r1, r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80084e6:	bf00      	nop
 80084e8:	371c      	adds	r7, #28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	03ff63ff 	.word	0x03ff63ff

080084f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b20      	cmp	r3, #32
 800850c:	d138      	bne.n	8008580 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008518:	2302      	movs	r3, #2
 800851a:	e032      	b.n	8008582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2224      	movs	r2, #36	; 0x24
 8008528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 0201 	bic.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800854a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6819      	ldr	r1, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0201 	orr.w	r2, r2, #1
 800856a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2220      	movs	r2, #32
 8008570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	e000      	b.n	8008582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008580:	2302      	movs	r3, #2
  }
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800858e:	b480      	push	{r7}
 8008590:	b085      	sub	sp, #20
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b20      	cmp	r3, #32
 80085a2:	d139      	bne.n	8008618 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d101      	bne.n	80085b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80085ae:	2302      	movs	r3, #2
 80085b0:	e033      	b.n	800861a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2224      	movs	r2, #36	; 0x24
 80085be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0201 	bic.w	r2, r2, #1
 80085d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80085e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	021b      	lsls	r3, r3, #8
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0201 	orr.w	r2, r2, #1
 8008602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	e000      	b.n	800861a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008618:	2302      	movs	r3, #2
  }
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
	...

08008628 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008634:	4b18      	ldr	r3, [pc, #96]	; (8008698 <HAL_PWR_EnterSTOPMode+0x70>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f023 0201 	bic.w	r2, r3, #1
 800863c:	4916      	ldr	r1, [pc, #88]	; (8008698 <HAL_PWR_EnterSTOPMode+0x70>)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4313      	orrs	r3, r2
 8008642:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008644:	4b14      	ldr	r3, [pc, #80]	; (8008698 <HAL_PWR_EnterSTOPMode+0x70>)
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	4a13      	ldr	r2, [pc, #76]	; (8008698 <HAL_PWR_EnterSTOPMode+0x70>)
 800864a:	f023 0305 	bic.w	r3, r3, #5
 800864e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8008650:	4b11      	ldr	r3, [pc, #68]	; (8008698 <HAL_PWR_EnterSTOPMode+0x70>)
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	4a10      	ldr	r2, [pc, #64]	; (8008698 <HAL_PWR_EnterSTOPMode+0x70>)
 8008656:	f023 0302 	bic.w	r3, r3, #2
 800865a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800865c:	4b0f      	ldr	r3, [pc, #60]	; (800869c <HAL_PWR_EnterSTOPMode+0x74>)
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	4a0e      	ldr	r2, [pc, #56]	; (800869c <HAL_PWR_EnterSTOPMode+0x74>)
 8008662:	f043 0304 	orr.w	r3, r3, #4
 8008666:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8008668:	f3bf 8f4f 	dsb	sy
}
 800866c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800866e:	f3bf 8f6f 	isb	sy
}
 8008672:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d101      	bne.n	800867e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800867a:	bf30      	wfi
 800867c:	e000      	b.n	8008680 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800867e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008680:	4b06      	ldr	r3, [pc, #24]	; (800869c <HAL_PWR_EnterSTOPMode+0x74>)
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	4a05      	ldr	r2, [pc, #20]	; (800869c <HAL_PWR_EnterSTOPMode+0x74>)
 8008686:	f023 0304 	bic.w	r3, r3, #4
 800868a:	6113      	str	r3, [r2, #16]
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	58024800 	.word	0x58024800
 800869c:	e000ed00 	.word	0xe000ed00

080086a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80086a8:	4b19      	ldr	r3, [pc, #100]	; (8008710 <HAL_PWREx_ConfigSupply+0x70>)
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f003 0304 	and.w	r3, r3, #4
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	d00a      	beq.n	80086ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80086b4:	4b16      	ldr	r3, [pc, #88]	; (8008710 <HAL_PWREx_ConfigSupply+0x70>)
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f003 0307 	and.w	r3, r3, #7
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d001      	beq.n	80086c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e01f      	b.n	8008706 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	e01d      	b.n	8008706 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80086ca:	4b11      	ldr	r3, [pc, #68]	; (8008710 <HAL_PWREx_ConfigSupply+0x70>)
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f023 0207 	bic.w	r2, r3, #7
 80086d2:	490f      	ldr	r1, [pc, #60]	; (8008710 <HAL_PWREx_ConfigSupply+0x70>)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80086da:	f7fa f8a3 	bl	8002824 <HAL_GetTick>
 80086de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086e0:	e009      	b.n	80086f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80086e2:	f7fa f89f 	bl	8002824 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086f0:	d901      	bls.n	80086f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e007      	b.n	8008706 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086f6:	4b06      	ldr	r3, [pc, #24]	; (8008710 <HAL_PWREx_ConfigSupply+0x70>)
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008702:	d1ee      	bne.n	80086e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	58024800 	.word	0x58024800

08008714 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08c      	sub	sp, #48	; 0x30
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d102      	bne.n	8008728 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	f000 bc48 	b.w	8008fb8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 8088 	beq.w	8008846 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008736:	4b99      	ldr	r3, [pc, #612]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800873e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008740:	4b96      	ldr	r3, [pc, #600]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008744:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	2b10      	cmp	r3, #16
 800874a:	d007      	beq.n	800875c <HAL_RCC_OscConfig+0x48>
 800874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874e:	2b18      	cmp	r3, #24
 8008750:	d111      	bne.n	8008776 <HAL_RCC_OscConfig+0x62>
 8008752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008754:	f003 0303 	and.w	r3, r3, #3
 8008758:	2b02      	cmp	r3, #2
 800875a:	d10c      	bne.n	8008776 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800875c:	4b8f      	ldr	r3, [pc, #572]	; (800899c <HAL_RCC_OscConfig+0x288>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d06d      	beq.n	8008844 <HAL_RCC_OscConfig+0x130>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d169      	bne.n	8008844 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	f000 bc21 	b.w	8008fb8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800877e:	d106      	bne.n	800878e <HAL_RCC_OscConfig+0x7a>
 8008780:	4b86      	ldr	r3, [pc, #536]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a85      	ldr	r2, [pc, #532]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	e02e      	b.n	80087ec <HAL_RCC_OscConfig+0xd8>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10c      	bne.n	80087b0 <HAL_RCC_OscConfig+0x9c>
 8008796:	4b81      	ldr	r3, [pc, #516]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a80      	ldr	r2, [pc, #512]	; (800899c <HAL_RCC_OscConfig+0x288>)
 800879c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	4b7e      	ldr	r3, [pc, #504]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a7d      	ldr	r2, [pc, #500]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	e01d      	b.n	80087ec <HAL_RCC_OscConfig+0xd8>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087b8:	d10c      	bne.n	80087d4 <HAL_RCC_OscConfig+0xc0>
 80087ba:	4b78      	ldr	r3, [pc, #480]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a77      	ldr	r2, [pc, #476]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	4b75      	ldr	r3, [pc, #468]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a74      	ldr	r2, [pc, #464]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	e00b      	b.n	80087ec <HAL_RCC_OscConfig+0xd8>
 80087d4:	4b71      	ldr	r3, [pc, #452]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a70      	ldr	r2, [pc, #448]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	4b6e      	ldr	r3, [pc, #440]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a6d      	ldr	r2, [pc, #436]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d013      	beq.n	800881c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f4:	f7fa f816 	bl	8002824 <HAL_GetTick>
 80087f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087fa:	e008      	b.n	800880e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087fc:	f7fa f812 	bl	8002824 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b64      	cmp	r3, #100	; 0x64
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e3d4      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800880e:	4b63      	ldr	r3, [pc, #396]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0f0      	beq.n	80087fc <HAL_RCC_OscConfig+0xe8>
 800881a:	e014      	b.n	8008846 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881c:	f7fa f802 	bl	8002824 <HAL_GetTick>
 8008820:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008824:	f7f9 fffe 	bl	8002824 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b64      	cmp	r3, #100	; 0x64
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e3c0      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008836:	4b59      	ldr	r3, [pc, #356]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f0      	bne.n	8008824 <HAL_RCC_OscConfig+0x110>
 8008842:	e000      	b.n	8008846 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 80ca 	beq.w	80089e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008854:	4b51      	ldr	r3, [pc, #324]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800885c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800885e:	4b4f      	ldr	r3, [pc, #316]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008862:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d007      	beq.n	800887a <HAL_RCC_OscConfig+0x166>
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	2b18      	cmp	r3, #24
 800886e:	d156      	bne.n	800891e <HAL_RCC_OscConfig+0x20a>
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d151      	bne.n	800891e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800887a:	4b48      	ldr	r3, [pc, #288]	; (800899c <HAL_RCC_OscConfig+0x288>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0304 	and.w	r3, r3, #4
 8008882:	2b00      	cmp	r3, #0
 8008884:	d005      	beq.n	8008892 <HAL_RCC_OscConfig+0x17e>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e392      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008892:	4b42      	ldr	r3, [pc, #264]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f023 0219 	bic.w	r2, r3, #25
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	493f      	ldr	r1, [pc, #252]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80088a0:	4313      	orrs	r3, r2
 80088a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a4:	f7f9 ffbe 	bl	8002824 <HAL_GetTick>
 80088a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088aa:	e008      	b.n	80088be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088ac:	f7f9 ffba 	bl	8002824 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d901      	bls.n	80088be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e37c      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088be:	4b37      	ldr	r3, [pc, #220]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0f0      	beq.n	80088ac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ca:	f7f9 ffc7 	bl	800285c <HAL_GetREVID>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d817      	bhi.n	8008908 <HAL_RCC_OscConfig+0x1f4>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	2b40      	cmp	r3, #64	; 0x40
 80088de:	d108      	bne.n	80088f2 <HAL_RCC_OscConfig+0x1de>
 80088e0:	4b2e      	ldr	r3, [pc, #184]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088e8:	4a2c      	ldr	r2, [pc, #176]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80088ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088ee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088f0:	e07a      	b.n	80089e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088f2:	4b2a      	ldr	r3, [pc, #168]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	031b      	lsls	r3, r3, #12
 8008900:	4926      	ldr	r1, [pc, #152]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008902:	4313      	orrs	r3, r2
 8008904:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008906:	e06f      	b.n	80089e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008908:	4b24      	ldr	r3, [pc, #144]	; (800899c <HAL_RCC_OscConfig+0x288>)
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	061b      	lsls	r3, r3, #24
 8008916:	4921      	ldr	r1, [pc, #132]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008918:	4313      	orrs	r3, r2
 800891a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800891c:	e064      	b.n	80089e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d047      	beq.n	80089b6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008926:	4b1d      	ldr	r3, [pc, #116]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f023 0219 	bic.w	r2, r3, #25
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	491a      	ldr	r1, [pc, #104]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008934:	4313      	orrs	r3, r2
 8008936:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008938:	f7f9 ff74 	bl	8002824 <HAL_GetTick>
 800893c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800893e:	e008      	b.n	8008952 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008940:	f7f9 ff70 	bl	8002824 <HAL_GetTick>
 8008944:	4602      	mov	r2, r0
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	2b02      	cmp	r3, #2
 800894c:	d901      	bls.n	8008952 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e332      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008952:	4b12      	ldr	r3, [pc, #72]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0304 	and.w	r3, r3, #4
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0f0      	beq.n	8008940 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800895e:	f7f9 ff7d 	bl	800285c <HAL_GetREVID>
 8008962:	4603      	mov	r3, r0
 8008964:	f241 0203 	movw	r2, #4099	; 0x1003
 8008968:	4293      	cmp	r3, r2
 800896a:	d819      	bhi.n	80089a0 <HAL_RCC_OscConfig+0x28c>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	2b40      	cmp	r3, #64	; 0x40
 8008972:	d108      	bne.n	8008986 <HAL_RCC_OscConfig+0x272>
 8008974:	4b09      	ldr	r3, [pc, #36]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800897c:	4a07      	ldr	r2, [pc, #28]	; (800899c <HAL_RCC_OscConfig+0x288>)
 800897e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008982:	6053      	str	r3, [r2, #4]
 8008984:	e030      	b.n	80089e8 <HAL_RCC_OscConfig+0x2d4>
 8008986:	4b05      	ldr	r3, [pc, #20]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	031b      	lsls	r3, r3, #12
 8008994:	4901      	ldr	r1, [pc, #4]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008996:	4313      	orrs	r3, r2
 8008998:	604b      	str	r3, [r1, #4]
 800899a:	e025      	b.n	80089e8 <HAL_RCC_OscConfig+0x2d4>
 800899c:	58024400 	.word	0x58024400
 80089a0:	4b9a      	ldr	r3, [pc, #616]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	061b      	lsls	r3, r3, #24
 80089ae:	4997      	ldr	r1, [pc, #604]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	604b      	str	r3, [r1, #4]
 80089b4:	e018      	b.n	80089e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089b6:	4b95      	ldr	r3, [pc, #596]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a94      	ldr	r2, [pc, #592]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 80089bc:	f023 0301 	bic.w	r3, r3, #1
 80089c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c2:	f7f9 ff2f 	bl	8002824 <HAL_GetTick>
 80089c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089c8:	e008      	b.n	80089dc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089ca:	f7f9 ff2b 	bl	8002824 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d901      	bls.n	80089dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e2ed      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089dc:	4b8b      	ldr	r3, [pc, #556]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1f0      	bne.n	80089ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0310 	and.w	r3, r3, #16
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 80a9 	beq.w	8008b48 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089f6:	4b85      	ldr	r3, [pc, #532]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a00:	4b82      	ldr	r3, [pc, #520]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a04:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d007      	beq.n	8008a1c <HAL_RCC_OscConfig+0x308>
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	2b18      	cmp	r3, #24
 8008a10:	d13a      	bne.n	8008a88 <HAL_RCC_OscConfig+0x374>
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f003 0303 	and.w	r3, r3, #3
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d135      	bne.n	8008a88 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a1c:	4b7b      	ldr	r3, [pc, #492]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d005      	beq.n	8008a34 <HAL_RCC_OscConfig+0x320>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	69db      	ldr	r3, [r3, #28]
 8008a2c:	2b80      	cmp	r3, #128	; 0x80
 8008a2e:	d001      	beq.n	8008a34 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e2c1      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a34:	f7f9 ff12 	bl	800285c <HAL_GetREVID>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d817      	bhi.n	8008a72 <HAL_RCC_OscConfig+0x35e>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	2b20      	cmp	r3, #32
 8008a48:	d108      	bne.n	8008a5c <HAL_RCC_OscConfig+0x348>
 8008a4a:	4b70      	ldr	r3, [pc, #448]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a52:	4a6e      	ldr	r2, [pc, #440]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008a54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a58:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a5a:	e075      	b.n	8008b48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a5c:	4b6b      	ldr	r3, [pc, #428]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a1b      	ldr	r3, [r3, #32]
 8008a68:	069b      	lsls	r3, r3, #26
 8008a6a:	4968      	ldr	r1, [pc, #416]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a70:	e06a      	b.n	8008b48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a72:	4b66      	ldr	r3, [pc, #408]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	061b      	lsls	r3, r3, #24
 8008a80:	4962      	ldr	r1, [pc, #392]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a86:	e05f      	b.n	8008b48 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d042      	beq.n	8008b16 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a90:	4b5e      	ldr	r3, [pc, #376]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a5d      	ldr	r2, [pc, #372]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a9c:	f7f9 fec2 	bl	8002824 <HAL_GetTick>
 8008aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008aa2:	e008      	b.n	8008ab6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008aa4:	f7f9 febe 	bl	8002824 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e280      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ab6:	4b55      	ldr	r3, [pc, #340]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0f0      	beq.n	8008aa4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ac2:	f7f9 fecb 	bl	800285c <HAL_GetREVID>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	f241 0203 	movw	r2, #4099	; 0x1003
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d817      	bhi.n	8008b00 <HAL_RCC_OscConfig+0x3ec>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a1b      	ldr	r3, [r3, #32]
 8008ad4:	2b20      	cmp	r3, #32
 8008ad6:	d108      	bne.n	8008aea <HAL_RCC_OscConfig+0x3d6>
 8008ad8:	4b4c      	ldr	r3, [pc, #304]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008ae0:	4a4a      	ldr	r2, [pc, #296]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008ae2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ae6:	6053      	str	r3, [r2, #4]
 8008ae8:	e02e      	b.n	8008b48 <HAL_RCC_OscConfig+0x434>
 8008aea:	4b48      	ldr	r3, [pc, #288]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	069b      	lsls	r3, r3, #26
 8008af8:	4944      	ldr	r1, [pc, #272]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	604b      	str	r3, [r1, #4]
 8008afe:	e023      	b.n	8008b48 <HAL_RCC_OscConfig+0x434>
 8008b00:	4b42      	ldr	r3, [pc, #264]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	061b      	lsls	r3, r3, #24
 8008b0e:	493f      	ldr	r1, [pc, #252]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	60cb      	str	r3, [r1, #12]
 8008b14:	e018      	b.n	8008b48 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b16:	4b3d      	ldr	r3, [pc, #244]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a3c      	ldr	r2, [pc, #240]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b22:	f7f9 fe7f 	bl	8002824 <HAL_GetTick>
 8008b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b28:	e008      	b.n	8008b3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008b2a:	f7f9 fe7b 	bl	8002824 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d901      	bls.n	8008b3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e23d      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b3c:	4b33      	ldr	r3, [pc, #204]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1f0      	bne.n	8008b2a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0308 	and.w	r3, r3, #8
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d036      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d019      	beq.n	8008b90 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b5c:	4b2b      	ldr	r3, [pc, #172]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b60:	4a2a      	ldr	r2, [pc, #168]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008b62:	f043 0301 	orr.w	r3, r3, #1
 8008b66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b68:	f7f9 fe5c 	bl	8002824 <HAL_GetTick>
 8008b6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b6e:	e008      	b.n	8008b82 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b70:	f7f9 fe58 	bl	8002824 <HAL_GetTick>
 8008b74:	4602      	mov	r2, r0
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d901      	bls.n	8008b82 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e21a      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b82:	4b22      	ldr	r3, [pc, #136]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b86:	f003 0302 	and.w	r3, r3, #2
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d0f0      	beq.n	8008b70 <HAL_RCC_OscConfig+0x45c>
 8008b8e:	e018      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b90:	4b1e      	ldr	r3, [pc, #120]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b94:	4a1d      	ldr	r2, [pc, #116]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008b96:	f023 0301 	bic.w	r3, r3, #1
 8008b9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b9c:	f7f9 fe42 	bl	8002824 <HAL_GetTick>
 8008ba0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ba2:	e008      	b.n	8008bb6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ba4:	f7f9 fe3e 	bl	8002824 <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d901      	bls.n	8008bb6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e200      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bb6:	4b15      	ldr	r3, [pc, #84]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1f0      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0320 	and.w	r3, r3, #32
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d039      	beq.n	8008c42 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d01c      	beq.n	8008c10 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bd6:	4b0d      	ldr	r3, [pc, #52]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a0c      	ldr	r2, [pc, #48]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008bdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008be0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008be2:	f7f9 fe1f 	bl	8002824 <HAL_GetTick>
 8008be6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008be8:	e008      	b.n	8008bfc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bea:	f7f9 fe1b 	bl	8002824 <HAL_GetTick>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d901      	bls.n	8008bfc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e1dd      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bfc:	4b03      	ldr	r3, [pc, #12]	; (8008c0c <HAL_RCC_OscConfig+0x4f8>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0f0      	beq.n	8008bea <HAL_RCC_OscConfig+0x4d6>
 8008c08:	e01b      	b.n	8008c42 <HAL_RCC_OscConfig+0x52e>
 8008c0a:	bf00      	nop
 8008c0c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c10:	4b9b      	ldr	r3, [pc, #620]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a9a      	ldr	r2, [pc, #616]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c1c:	f7f9 fe02 	bl	8002824 <HAL_GetTick>
 8008c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c22:	e008      	b.n	8008c36 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c24:	f7f9 fdfe 	bl	8002824 <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d901      	bls.n	8008c36 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e1c0      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c36:	4b92      	ldr	r3, [pc, #584]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f0      	bne.n	8008c24 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f000 8081 	beq.w	8008d52 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c50:	4b8c      	ldr	r3, [pc, #560]	; (8008e84 <HAL_RCC_OscConfig+0x770>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a8b      	ldr	r2, [pc, #556]	; (8008e84 <HAL_RCC_OscConfig+0x770>)
 8008c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c5c:	f7f9 fde2 	bl	8002824 <HAL_GetTick>
 8008c60:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c62:	e008      	b.n	8008c76 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c64:	f7f9 fdde 	bl	8002824 <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	2b64      	cmp	r3, #100	; 0x64
 8008c70:	d901      	bls.n	8008c76 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e1a0      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c76:	4b83      	ldr	r3, [pc, #524]	; (8008e84 <HAL_RCC_OscConfig+0x770>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0f0      	beq.n	8008c64 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d106      	bne.n	8008c98 <HAL_RCC_OscConfig+0x584>
 8008c8a:	4b7d      	ldr	r3, [pc, #500]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8e:	4a7c      	ldr	r2, [pc, #496]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008c90:	f043 0301 	orr.w	r3, r3, #1
 8008c94:	6713      	str	r3, [r2, #112]	; 0x70
 8008c96:	e02d      	b.n	8008cf4 <HAL_RCC_OscConfig+0x5e0>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10c      	bne.n	8008cba <HAL_RCC_OscConfig+0x5a6>
 8008ca0:	4b77      	ldr	r3, [pc, #476]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca4:	4a76      	ldr	r2, [pc, #472]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008ca6:	f023 0301 	bic.w	r3, r3, #1
 8008caa:	6713      	str	r3, [r2, #112]	; 0x70
 8008cac:	4b74      	ldr	r3, [pc, #464]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb0:	4a73      	ldr	r2, [pc, #460]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008cb2:	f023 0304 	bic.w	r3, r3, #4
 8008cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8008cb8:	e01c      	b.n	8008cf4 <HAL_RCC_OscConfig+0x5e0>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	2b05      	cmp	r3, #5
 8008cc0:	d10c      	bne.n	8008cdc <HAL_RCC_OscConfig+0x5c8>
 8008cc2:	4b6f      	ldr	r3, [pc, #444]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc6:	4a6e      	ldr	r2, [pc, #440]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008cc8:	f043 0304 	orr.w	r3, r3, #4
 8008ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8008cce:	4b6c      	ldr	r3, [pc, #432]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd2:	4a6b      	ldr	r2, [pc, #428]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008cd4:	f043 0301 	orr.w	r3, r3, #1
 8008cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8008cda:	e00b      	b.n	8008cf4 <HAL_RCC_OscConfig+0x5e0>
 8008cdc:	4b68      	ldr	r3, [pc, #416]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce0:	4a67      	ldr	r2, [pc, #412]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008ce2:	f023 0301 	bic.w	r3, r3, #1
 8008ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ce8:	4b65      	ldr	r3, [pc, #404]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cec:	4a64      	ldr	r2, [pc, #400]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008cee:	f023 0304 	bic.w	r3, r3, #4
 8008cf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d015      	beq.n	8008d28 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cfc:	f7f9 fd92 	bl	8002824 <HAL_GetTick>
 8008d00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d02:	e00a      	b.n	8008d1a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d04:	f7f9 fd8e 	bl	8002824 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d901      	bls.n	8008d1a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e14e      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d1a:	4b59      	ldr	r3, [pc, #356]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0ee      	beq.n	8008d04 <HAL_RCC_OscConfig+0x5f0>
 8008d26:	e014      	b.n	8008d52 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d28:	f7f9 fd7c 	bl	8002824 <HAL_GetTick>
 8008d2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d2e:	e00a      	b.n	8008d46 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d30:	f7f9 fd78 	bl	8002824 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d901      	bls.n	8008d46 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e138      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d46:	4b4e      	ldr	r3, [pc, #312]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1ee      	bne.n	8008d30 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f000 812d 	beq.w	8008fb6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d5c:	4b48      	ldr	r3, [pc, #288]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d64:	2b18      	cmp	r3, #24
 8008d66:	f000 80bd 	beq.w	8008ee4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	f040 809e 	bne.w	8008eb0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d74:	4b42      	ldr	r3, [pc, #264]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a41      	ldr	r2, [pc, #260]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d80:	f7f9 fd50 	bl	8002824 <HAL_GetTick>
 8008d84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d86:	e008      	b.n	8008d9a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d88:	f7f9 fd4c 	bl	8002824 <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d901      	bls.n	8008d9a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e10e      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d9a:	4b39      	ldr	r3, [pc, #228]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1f0      	bne.n	8008d88 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008da6:	4b36      	ldr	r3, [pc, #216]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008daa:	4b37      	ldr	r3, [pc, #220]	; (8008e88 <HAL_RCC_OscConfig+0x774>)
 8008dac:	4013      	ands	r3, r2
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008db6:	0112      	lsls	r2, r2, #4
 8008db8:	430a      	orrs	r2, r1
 8008dba:	4931      	ldr	r1, [pc, #196]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	628b      	str	r3, [r1, #40]	; 0x28
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	025b      	lsls	r3, r3, #9
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	041b      	lsls	r3, r3, #16
 8008dde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008de2:	431a      	orrs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de8:	3b01      	subs	r3, #1
 8008dea:	061b      	lsls	r3, r3, #24
 8008dec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008df0:	4923      	ldr	r1, [pc, #140]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008df6:	4b22      	ldr	r3, [pc, #136]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfa:	4a21      	ldr	r2, [pc, #132]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008dfc:	f023 0301 	bic.w	r3, r3, #1
 8008e00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e02:	4b1f      	ldr	r3, [pc, #124]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e06:	4b21      	ldr	r3, [pc, #132]	; (8008e8c <HAL_RCC_OscConfig+0x778>)
 8008e08:	4013      	ands	r3, r2
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e0e:	00d2      	lsls	r2, r2, #3
 8008e10:	491b      	ldr	r1, [pc, #108]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e16:	4b1a      	ldr	r3, [pc, #104]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1a:	f023 020c 	bic.w	r2, r3, #12
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e22:	4917      	ldr	r1, [pc, #92]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e28:	4b15      	ldr	r3, [pc, #84]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	f023 0202 	bic.w	r2, r3, #2
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e34:	4912      	ldr	r1, [pc, #72]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e3a:	4b11      	ldr	r3, [pc, #68]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3e:	4a10      	ldr	r2, [pc, #64]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e46:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4a:	4a0d      	ldr	r2, [pc, #52]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e52:	4b0b      	ldr	r3, [pc, #44]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e56:	4a0a      	ldr	r2, [pc, #40]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008e5e:	4b08      	ldr	r3, [pc, #32]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	4a07      	ldr	r2, [pc, #28]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e64:	f043 0301 	orr.w	r3, r3, #1
 8008e68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e6a:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a04      	ldr	r2, [pc, #16]	; (8008e80 <HAL_RCC_OscConfig+0x76c>)
 8008e70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e76:	f7f9 fcd5 	bl	8002824 <HAL_GetTick>
 8008e7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e7c:	e011      	b.n	8008ea2 <HAL_RCC_OscConfig+0x78e>
 8008e7e:	bf00      	nop
 8008e80:	58024400 	.word	0x58024400
 8008e84:	58024800 	.word	0x58024800
 8008e88:	fffffc0c 	.word	0xfffffc0c
 8008e8c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e90:	f7f9 fcc8 	bl	8002824 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d901      	bls.n	8008ea2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e08a      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ea2:	4b47      	ldr	r3, [pc, #284]	; (8008fc0 <HAL_RCC_OscConfig+0x8ac>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0f0      	beq.n	8008e90 <HAL_RCC_OscConfig+0x77c>
 8008eae:	e082      	b.n	8008fb6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eb0:	4b43      	ldr	r3, [pc, #268]	; (8008fc0 <HAL_RCC_OscConfig+0x8ac>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a42      	ldr	r2, [pc, #264]	; (8008fc0 <HAL_RCC_OscConfig+0x8ac>)
 8008eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ebc:	f7f9 fcb2 	bl	8002824 <HAL_GetTick>
 8008ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ec2:	e008      	b.n	8008ed6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ec4:	f7f9 fcae 	bl	8002824 <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d901      	bls.n	8008ed6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e070      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ed6:	4b3a      	ldr	r3, [pc, #232]	; (8008fc0 <HAL_RCC_OscConfig+0x8ac>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1f0      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x7b0>
 8008ee2:	e068      	b.n	8008fb6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ee4:	4b36      	ldr	r3, [pc, #216]	; (8008fc0 <HAL_RCC_OscConfig+0x8ac>)
 8008ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008eea:	4b35      	ldr	r3, [pc, #212]	; (8008fc0 <HAL_RCC_OscConfig+0x8ac>)
 8008eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d031      	beq.n	8008f5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	f003 0203 	and.w	r2, r3, #3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d12a      	bne.n	8008f5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	091b      	lsrs	r3, r3, #4
 8008f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d122      	bne.n	8008f5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d11a      	bne.n	8008f5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	0a5b      	lsrs	r3, r3, #9
 8008f2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d111      	bne.n	8008f5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	0c1b      	lsrs	r3, r3, #16
 8008f3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d108      	bne.n	8008f5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	0e1b      	lsrs	r3, r3, #24
 8008f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d001      	beq.n	8008f60 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e02b      	b.n	8008fb8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008f60:	4b17      	ldr	r3, [pc, #92]	; (8008fc0 <HAL_RCC_OscConfig+0x8ac>)
 8008f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f64:	08db      	lsrs	r3, r3, #3
 8008f66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d01f      	beq.n	8008fb6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008f76:	4b12      	ldr	r3, [pc, #72]	; (8008fc0 <HAL_RCC_OscConfig+0x8ac>)
 8008f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7a:	4a11      	ldr	r2, [pc, #68]	; (8008fc0 <HAL_RCC_OscConfig+0x8ac>)
 8008f7c:	f023 0301 	bic.w	r3, r3, #1
 8008f80:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f82:	f7f9 fc4f 	bl	8002824 <HAL_GetTick>
 8008f86:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008f88:	bf00      	nop
 8008f8a:	f7f9 fc4b 	bl	8002824 <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d0f9      	beq.n	8008f8a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f96:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <HAL_RCC_OscConfig+0x8ac>)
 8008f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f9a:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <HAL_RCC_OscConfig+0x8b0>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008fa2:	00d2      	lsls	r2, r2, #3
 8008fa4:	4906      	ldr	r1, [pc, #24]	; (8008fc0 <HAL_RCC_OscConfig+0x8ac>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008faa:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <HAL_RCC_OscConfig+0x8ac>)
 8008fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fae:	4a04      	ldr	r2, [pc, #16]	; (8008fc0 <HAL_RCC_OscConfig+0x8ac>)
 8008fb0:	f043 0301 	orr.w	r3, r3, #1
 8008fb4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3730      	adds	r7, #48	; 0x30
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	58024400 	.word	0x58024400
 8008fc4:	ffff0007 	.word	0xffff0007

08008fc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e19c      	b.n	8009316 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fdc:	4b8a      	ldr	r3, [pc, #552]	; (8009208 <HAL_RCC_ClockConfig+0x240>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 030f 	and.w	r3, r3, #15
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d910      	bls.n	800900c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fea:	4b87      	ldr	r3, [pc, #540]	; (8009208 <HAL_RCC_ClockConfig+0x240>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f023 020f 	bic.w	r2, r3, #15
 8008ff2:	4985      	ldr	r1, [pc, #532]	; (8009208 <HAL_RCC_ClockConfig+0x240>)
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ffa:	4b83      	ldr	r3, [pc, #524]	; (8009208 <HAL_RCC_ClockConfig+0x240>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 030f 	and.w	r3, r3, #15
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	429a      	cmp	r2, r3
 8009006:	d001      	beq.n	800900c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e184      	b.n	8009316 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0304 	and.w	r3, r3, #4
 8009014:	2b00      	cmp	r3, #0
 8009016:	d010      	beq.n	800903a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691a      	ldr	r2, [r3, #16]
 800901c:	4b7b      	ldr	r3, [pc, #492]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009024:	429a      	cmp	r2, r3
 8009026:	d908      	bls.n	800903a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009028:	4b78      	ldr	r3, [pc, #480]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	4975      	ldr	r1, [pc, #468]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 8009036:	4313      	orrs	r3, r2
 8009038:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0308 	and.w	r3, r3, #8
 8009042:	2b00      	cmp	r3, #0
 8009044:	d010      	beq.n	8009068 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	695a      	ldr	r2, [r3, #20]
 800904a:	4b70      	ldr	r3, [pc, #448]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009052:	429a      	cmp	r2, r3
 8009054:	d908      	bls.n	8009068 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009056:	4b6d      	ldr	r3, [pc, #436]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	496a      	ldr	r1, [pc, #424]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 8009064:	4313      	orrs	r3, r2
 8009066:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0310 	and.w	r3, r3, #16
 8009070:	2b00      	cmp	r3, #0
 8009072:	d010      	beq.n	8009096 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	699a      	ldr	r2, [r3, #24]
 8009078:	4b64      	ldr	r3, [pc, #400]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009080:	429a      	cmp	r2, r3
 8009082:	d908      	bls.n	8009096 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009084:	4b61      	ldr	r3, [pc, #388]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	495e      	ldr	r1, [pc, #376]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 8009092:	4313      	orrs	r3, r2
 8009094:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d010      	beq.n	80090c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	69da      	ldr	r2, [r3, #28]
 80090a6:	4b59      	ldr	r3, [pc, #356]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d908      	bls.n	80090c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80090b2:	4b56      	ldr	r3, [pc, #344]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	4953      	ldr	r1, [pc, #332]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 80090c0:	4313      	orrs	r3, r2
 80090c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0302 	and.w	r3, r3, #2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d010      	beq.n	80090f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68da      	ldr	r2, [r3, #12]
 80090d4:	4b4d      	ldr	r3, [pc, #308]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	f003 030f 	and.w	r3, r3, #15
 80090dc:	429a      	cmp	r2, r3
 80090de:	d908      	bls.n	80090f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090e0:	4b4a      	ldr	r3, [pc, #296]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	f023 020f 	bic.w	r2, r3, #15
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	4947      	ldr	r1, [pc, #284]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d055      	beq.n	80091aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80090fe:	4b43      	ldr	r3, [pc, #268]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	4940      	ldr	r1, [pc, #256]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 800910c:	4313      	orrs	r3, r2
 800910e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	2b02      	cmp	r3, #2
 8009116:	d107      	bne.n	8009128 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009118:	4b3c      	ldr	r3, [pc, #240]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d121      	bne.n	8009168 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e0f6      	b.n	8009316 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	2b03      	cmp	r3, #3
 800912e:	d107      	bne.n	8009140 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009130:	4b36      	ldr	r3, [pc, #216]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d115      	bne.n	8009168 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e0ea      	b.n	8009316 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d107      	bne.n	8009158 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009148:	4b30      	ldr	r3, [pc, #192]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009150:	2b00      	cmp	r3, #0
 8009152:	d109      	bne.n	8009168 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e0de      	b.n	8009316 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009158:	4b2c      	ldr	r3, [pc, #176]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0304 	and.w	r3, r3, #4
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e0d6      	b.n	8009316 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009168:	4b28      	ldr	r3, [pc, #160]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	f023 0207 	bic.w	r2, r3, #7
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	4925      	ldr	r1, [pc, #148]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 8009176:	4313      	orrs	r3, r2
 8009178:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800917a:	f7f9 fb53 	bl	8002824 <HAL_GetTick>
 800917e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009180:	e00a      	b.n	8009198 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009182:	f7f9 fb4f 	bl	8002824 <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009190:	4293      	cmp	r3, r2
 8009192:	d901      	bls.n	8009198 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e0be      	b.n	8009316 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009198:	4b1c      	ldr	r3, [pc, #112]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	00db      	lsls	r3, r3, #3
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d1eb      	bne.n	8009182 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d010      	beq.n	80091d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	4b14      	ldr	r3, [pc, #80]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	f003 030f 	and.w	r3, r3, #15
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d208      	bcs.n	80091d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091c6:	4b11      	ldr	r3, [pc, #68]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	f023 020f 	bic.w	r2, r3, #15
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	490e      	ldr	r1, [pc, #56]	; (800920c <HAL_RCC_ClockConfig+0x244>)
 80091d4:	4313      	orrs	r3, r2
 80091d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091d8:	4b0b      	ldr	r3, [pc, #44]	; (8009208 <HAL_RCC_ClockConfig+0x240>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d214      	bcs.n	8009210 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091e6:	4b08      	ldr	r3, [pc, #32]	; (8009208 <HAL_RCC_ClockConfig+0x240>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f023 020f 	bic.w	r2, r3, #15
 80091ee:	4906      	ldr	r1, [pc, #24]	; (8009208 <HAL_RCC_ClockConfig+0x240>)
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091f6:	4b04      	ldr	r3, [pc, #16]	; (8009208 <HAL_RCC_ClockConfig+0x240>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 030f 	and.w	r3, r3, #15
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	429a      	cmp	r2, r3
 8009202:	d005      	beq.n	8009210 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e086      	b.n	8009316 <HAL_RCC_ClockConfig+0x34e>
 8009208:	52002000 	.word	0x52002000
 800920c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0304 	and.w	r3, r3, #4
 8009218:	2b00      	cmp	r3, #0
 800921a:	d010      	beq.n	800923e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	691a      	ldr	r2, [r3, #16]
 8009220:	4b3f      	ldr	r3, [pc, #252]	; (8009320 <HAL_RCC_ClockConfig+0x358>)
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009228:	429a      	cmp	r2, r3
 800922a:	d208      	bcs.n	800923e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800922c:	4b3c      	ldr	r3, [pc, #240]	; (8009320 <HAL_RCC_ClockConfig+0x358>)
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	4939      	ldr	r1, [pc, #228]	; (8009320 <HAL_RCC_ClockConfig+0x358>)
 800923a:	4313      	orrs	r3, r2
 800923c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 0308 	and.w	r3, r3, #8
 8009246:	2b00      	cmp	r3, #0
 8009248:	d010      	beq.n	800926c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	695a      	ldr	r2, [r3, #20]
 800924e:	4b34      	ldr	r3, [pc, #208]	; (8009320 <HAL_RCC_ClockConfig+0x358>)
 8009250:	69db      	ldr	r3, [r3, #28]
 8009252:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009256:	429a      	cmp	r2, r3
 8009258:	d208      	bcs.n	800926c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800925a:	4b31      	ldr	r3, [pc, #196]	; (8009320 <HAL_RCC_ClockConfig+0x358>)
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	492e      	ldr	r1, [pc, #184]	; (8009320 <HAL_RCC_ClockConfig+0x358>)
 8009268:	4313      	orrs	r3, r2
 800926a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 0310 	and.w	r3, r3, #16
 8009274:	2b00      	cmp	r3, #0
 8009276:	d010      	beq.n	800929a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	699a      	ldr	r2, [r3, #24]
 800927c:	4b28      	ldr	r3, [pc, #160]	; (8009320 <HAL_RCC_ClockConfig+0x358>)
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009284:	429a      	cmp	r2, r3
 8009286:	d208      	bcs.n	800929a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009288:	4b25      	ldr	r3, [pc, #148]	; (8009320 <HAL_RCC_ClockConfig+0x358>)
 800928a:	69db      	ldr	r3, [r3, #28]
 800928c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	4922      	ldr	r1, [pc, #136]	; (8009320 <HAL_RCC_ClockConfig+0x358>)
 8009296:	4313      	orrs	r3, r2
 8009298:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0320 	and.w	r3, r3, #32
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d010      	beq.n	80092c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	69da      	ldr	r2, [r3, #28]
 80092aa:	4b1d      	ldr	r3, [pc, #116]	; (8009320 <HAL_RCC_ClockConfig+0x358>)
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d208      	bcs.n	80092c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80092b6:	4b1a      	ldr	r3, [pc, #104]	; (8009320 <HAL_RCC_ClockConfig+0x358>)
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	4917      	ldr	r1, [pc, #92]	; (8009320 <HAL_RCC_ClockConfig+0x358>)
 80092c4:	4313      	orrs	r3, r2
 80092c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80092c8:	f000 f834 	bl	8009334 <HAL_RCC_GetSysClockFreq>
 80092cc:	4602      	mov	r2, r0
 80092ce:	4b14      	ldr	r3, [pc, #80]	; (8009320 <HAL_RCC_ClockConfig+0x358>)
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	0a1b      	lsrs	r3, r3, #8
 80092d4:	f003 030f 	and.w	r3, r3, #15
 80092d8:	4912      	ldr	r1, [pc, #72]	; (8009324 <HAL_RCC_ClockConfig+0x35c>)
 80092da:	5ccb      	ldrb	r3, [r1, r3]
 80092dc:	f003 031f 	and.w	r3, r3, #31
 80092e0:	fa22 f303 	lsr.w	r3, r2, r3
 80092e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092e6:	4b0e      	ldr	r3, [pc, #56]	; (8009320 <HAL_RCC_ClockConfig+0x358>)
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	f003 030f 	and.w	r3, r3, #15
 80092ee:	4a0d      	ldr	r2, [pc, #52]	; (8009324 <HAL_RCC_ClockConfig+0x35c>)
 80092f0:	5cd3      	ldrb	r3, [r2, r3]
 80092f2:	f003 031f 	and.w	r3, r3, #31
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	fa22 f303 	lsr.w	r3, r2, r3
 80092fc:	4a0a      	ldr	r2, [pc, #40]	; (8009328 <HAL_RCC_ClockConfig+0x360>)
 80092fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009300:	4a0a      	ldr	r2, [pc, #40]	; (800932c <HAL_RCC_ClockConfig+0x364>)
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009306:	4b0a      	ldr	r3, [pc, #40]	; (8009330 <HAL_RCC_ClockConfig+0x368>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4618      	mov	r0, r3
 800930c:	f7f9 fa40 	bl	8002790 <HAL_InitTick>
 8009310:	4603      	mov	r3, r0
 8009312:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009314:	7bfb      	ldrb	r3, [r7, #15]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	58024400 	.word	0x58024400
 8009324:	08010f18 	.word	0x08010f18
 8009328:	2400008c 	.word	0x2400008c
 800932c:	24000088 	.word	0x24000088
 8009330:	24000090 	.word	0x24000090

08009334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009334:	b480      	push	{r7}
 8009336:	b089      	sub	sp, #36	; 0x24
 8009338:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800933a:	4bb3      	ldr	r3, [pc, #716]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009342:	2b18      	cmp	r3, #24
 8009344:	f200 8155 	bhi.w	80095f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009348:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <HAL_RCC_GetSysClockFreq+0x1c>)
 800934a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934e:	bf00      	nop
 8009350:	080093b5 	.word	0x080093b5
 8009354:	080095f3 	.word	0x080095f3
 8009358:	080095f3 	.word	0x080095f3
 800935c:	080095f3 	.word	0x080095f3
 8009360:	080095f3 	.word	0x080095f3
 8009364:	080095f3 	.word	0x080095f3
 8009368:	080095f3 	.word	0x080095f3
 800936c:	080095f3 	.word	0x080095f3
 8009370:	080093db 	.word	0x080093db
 8009374:	080095f3 	.word	0x080095f3
 8009378:	080095f3 	.word	0x080095f3
 800937c:	080095f3 	.word	0x080095f3
 8009380:	080095f3 	.word	0x080095f3
 8009384:	080095f3 	.word	0x080095f3
 8009388:	080095f3 	.word	0x080095f3
 800938c:	080095f3 	.word	0x080095f3
 8009390:	080093e1 	.word	0x080093e1
 8009394:	080095f3 	.word	0x080095f3
 8009398:	080095f3 	.word	0x080095f3
 800939c:	080095f3 	.word	0x080095f3
 80093a0:	080095f3 	.word	0x080095f3
 80093a4:	080095f3 	.word	0x080095f3
 80093a8:	080095f3 	.word	0x080095f3
 80093ac:	080095f3 	.word	0x080095f3
 80093b0:	080093e7 	.word	0x080093e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093b4:	4b94      	ldr	r3, [pc, #592]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0320 	and.w	r3, r3, #32
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d009      	beq.n	80093d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093c0:	4b91      	ldr	r3, [pc, #580]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	08db      	lsrs	r3, r3, #3
 80093c6:	f003 0303 	and.w	r3, r3, #3
 80093ca:	4a90      	ldr	r2, [pc, #576]	; (800960c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093cc:	fa22 f303 	lsr.w	r3, r2, r3
 80093d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80093d2:	e111      	b.n	80095f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80093d4:	4b8d      	ldr	r3, [pc, #564]	; (800960c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093d6:	61bb      	str	r3, [r7, #24]
      break;
 80093d8:	e10e      	b.n	80095f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80093da:	4b8d      	ldr	r3, [pc, #564]	; (8009610 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093dc:	61bb      	str	r3, [r7, #24]
      break;
 80093de:	e10b      	b.n	80095f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80093e0:	4b8c      	ldr	r3, [pc, #560]	; (8009614 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80093e2:	61bb      	str	r3, [r7, #24]
      break;
 80093e4:	e108      	b.n	80095f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093e6:	4b88      	ldr	r3, [pc, #544]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80093f0:	4b85      	ldr	r3, [pc, #532]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f4:	091b      	lsrs	r3, r3, #4
 80093f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80093fc:	4b82      	ldr	r3, [pc, #520]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009406:	4b80      	ldr	r3, [pc, #512]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940a:	08db      	lsrs	r3, r3, #3
 800940c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	fb02 f303 	mul.w	r3, r2, r3
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	f000 80e1 	beq.w	80095ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b02      	cmp	r3, #2
 800942e:	f000 8083 	beq.w	8009538 <HAL_RCC_GetSysClockFreq+0x204>
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2b02      	cmp	r3, #2
 8009436:	f200 80a1 	bhi.w	800957c <HAL_RCC_GetSysClockFreq+0x248>
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d003      	beq.n	8009448 <HAL_RCC_GetSysClockFreq+0x114>
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	2b01      	cmp	r3, #1
 8009444:	d056      	beq.n	80094f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009446:	e099      	b.n	800957c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009448:	4b6f      	ldr	r3, [pc, #444]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0320 	and.w	r3, r3, #32
 8009450:	2b00      	cmp	r3, #0
 8009452:	d02d      	beq.n	80094b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009454:	4b6c      	ldr	r3, [pc, #432]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	08db      	lsrs	r3, r3, #3
 800945a:	f003 0303 	and.w	r3, r3, #3
 800945e:	4a6b      	ldr	r2, [pc, #428]	; (800960c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009460:	fa22 f303 	lsr.w	r3, r2, r3
 8009464:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	ee07 3a90 	vmov	s15, r3
 800946c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800947e:	4b62      	ldr	r3, [pc, #392]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009492:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009618 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800949e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80094ae:	e087      	b.n	80095c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800961c <HAL_RCC_GetSysClockFreq+0x2e8>
 80094be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c2:	4b51      	ldr	r3, [pc, #324]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80094d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009618 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094f2:	e065      	b.n	80095c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	ee07 3a90 	vmov	s15, r3
 80094fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009620 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009506:	4b40      	ldr	r3, [pc, #256]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009516:	ed97 6a02 	vldr	s12, [r7, #8]
 800951a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009618 <HAL_RCC_GetSysClockFreq+0x2e4>
 800951e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800952a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800952e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009532:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009536:	e043      	b.n	80095c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	ee07 3a90 	vmov	s15, r3
 800953e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009542:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009624 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954a:	4b2f      	ldr	r3, [pc, #188]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800954c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009552:	ee07 3a90 	vmov	s15, r3
 8009556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800955a:	ed97 6a02 	vldr	s12, [r7, #8]
 800955e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009618 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800956a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800956e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009576:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800957a:	e021      	b.n	80095c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009586:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009620 <HAL_RCC_GetSysClockFreq+0x2ec>
 800958a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800958e:	4b1e      	ldr	r3, [pc, #120]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009596:	ee07 3a90 	vmov	s15, r3
 800959a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800959e:	ed97 6a02 	vldr	s12, [r7, #8]
 80095a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009618 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80095c0:	4b11      	ldr	r3, [pc, #68]	; (8009608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c4:	0a5b      	lsrs	r3, r3, #9
 80095c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ca:	3301      	adds	r3, #1
 80095cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	ee07 3a90 	vmov	s15, r3
 80095d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80095dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095e4:	ee17 3a90 	vmov	r3, s15
 80095e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80095ea:	e005      	b.n	80095f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	61bb      	str	r3, [r7, #24]
      break;
 80095f0:	e002      	b.n	80095f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80095f2:	4b07      	ldr	r3, [pc, #28]	; (8009610 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80095f4:	61bb      	str	r3, [r7, #24]
      break;
 80095f6:	bf00      	nop
  }

  return sysclockfreq;
 80095f8:	69bb      	ldr	r3, [r7, #24]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3724      	adds	r7, #36	; 0x24
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	58024400 	.word	0x58024400
 800960c:	03d09000 	.word	0x03d09000
 8009610:	003d0900 	.word	0x003d0900
 8009614:	017d7840 	.word	0x017d7840
 8009618:	46000000 	.word	0x46000000
 800961c:	4c742400 	.word	0x4c742400
 8009620:	4a742400 	.word	0x4a742400
 8009624:	4bbebc20 	.word	0x4bbebc20

08009628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800962e:	f7ff fe81 	bl	8009334 <HAL_RCC_GetSysClockFreq>
 8009632:	4602      	mov	r2, r0
 8009634:	4b10      	ldr	r3, [pc, #64]	; (8009678 <HAL_RCC_GetHCLKFreq+0x50>)
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	0a1b      	lsrs	r3, r3, #8
 800963a:	f003 030f 	and.w	r3, r3, #15
 800963e:	490f      	ldr	r1, [pc, #60]	; (800967c <HAL_RCC_GetHCLKFreq+0x54>)
 8009640:	5ccb      	ldrb	r3, [r1, r3]
 8009642:	f003 031f 	and.w	r3, r3, #31
 8009646:	fa22 f303 	lsr.w	r3, r2, r3
 800964a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800964c:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <HAL_RCC_GetHCLKFreq+0x50>)
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	f003 030f 	and.w	r3, r3, #15
 8009654:	4a09      	ldr	r2, [pc, #36]	; (800967c <HAL_RCC_GetHCLKFreq+0x54>)
 8009656:	5cd3      	ldrb	r3, [r2, r3]
 8009658:	f003 031f 	and.w	r3, r3, #31
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	fa22 f303 	lsr.w	r3, r2, r3
 8009662:	4a07      	ldr	r2, [pc, #28]	; (8009680 <HAL_RCC_GetHCLKFreq+0x58>)
 8009664:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009666:	4a07      	ldr	r2, [pc, #28]	; (8009684 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800966c:	4b04      	ldr	r3, [pc, #16]	; (8009680 <HAL_RCC_GetHCLKFreq+0x58>)
 800966e:	681b      	ldr	r3, [r3, #0]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	58024400 	.word	0x58024400
 800967c:	08010f18 	.word	0x08010f18
 8009680:	2400008c 	.word	0x2400008c
 8009684:	24000088 	.word	0x24000088

08009688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800968c:	f7ff ffcc 	bl	8009628 <HAL_RCC_GetHCLKFreq>
 8009690:	4602      	mov	r2, r0
 8009692:	4b06      	ldr	r3, [pc, #24]	; (80096ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	091b      	lsrs	r3, r3, #4
 8009698:	f003 0307 	and.w	r3, r3, #7
 800969c:	4904      	ldr	r1, [pc, #16]	; (80096b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800969e:	5ccb      	ldrb	r3, [r1, r3]
 80096a0:	f003 031f 	and.w	r3, r3, #31
 80096a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	58024400 	.word	0x58024400
 80096b0:	08010f18 	.word	0x08010f18

080096b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80096b8:	f7ff ffb6 	bl	8009628 <HAL_RCC_GetHCLKFreq>
 80096bc:	4602      	mov	r2, r0
 80096be:	4b06      	ldr	r3, [pc, #24]	; (80096d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	0a1b      	lsrs	r3, r3, #8
 80096c4:	f003 0307 	and.w	r3, r3, #7
 80096c8:	4904      	ldr	r1, [pc, #16]	; (80096dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80096ca:	5ccb      	ldrb	r3, [r1, r3]
 80096cc:	f003 031f 	and.w	r3, r3, #31
 80096d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	58024400 	.word	0x58024400
 80096dc:	08010f18 	.word	0x08010f18

080096e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096e4:	b0ca      	sub	sp, #296	; 0x128
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096ec:	2300      	movs	r3, #0
 80096ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096f2:	2300      	movs	r3, #0
 80096f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009700:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009704:	2500      	movs	r5, #0
 8009706:	ea54 0305 	orrs.w	r3, r4, r5
 800970a:	d049      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800970c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009712:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009716:	d02f      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009718:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800971c:	d828      	bhi.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800971e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009722:	d01a      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009724:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009728:	d822      	bhi.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800972a:	2b00      	cmp	r3, #0
 800972c:	d003      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800972e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009732:	d007      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009734:	e01c      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009736:	4bb8      	ldr	r3, [pc, #736]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973a:	4ab7      	ldr	r2, [pc, #732]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800973c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009740:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009742:	e01a      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009748:	3308      	adds	r3, #8
 800974a:	2102      	movs	r1, #2
 800974c:	4618      	mov	r0, r3
 800974e:	f002 fb61 	bl	800be14 <RCCEx_PLL2_Config>
 8009752:	4603      	mov	r3, r0
 8009754:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009758:	e00f      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800975a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800975e:	3328      	adds	r3, #40	; 0x28
 8009760:	2102      	movs	r1, #2
 8009762:	4618      	mov	r0, r3
 8009764:	f002 fc08 	bl	800bf78 <RCCEx_PLL3_Config>
 8009768:	4603      	mov	r3, r0
 800976a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800976e:	e004      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009776:	e000      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800977a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10a      	bne.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009782:	4ba5      	ldr	r3, [pc, #660]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009786:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800978a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800978e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009790:	4aa1      	ldr	r2, [pc, #644]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009792:	430b      	orrs	r3, r1
 8009794:	6513      	str	r3, [r2, #80]	; 0x50
 8009796:	e003      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800979c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80097a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80097ac:	f04f 0900 	mov.w	r9, #0
 80097b0:	ea58 0309 	orrs.w	r3, r8, r9
 80097b4:	d047      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80097b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097bc:	2b04      	cmp	r3, #4
 80097be:	d82a      	bhi.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80097c0:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80097c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c6:	bf00      	nop
 80097c8:	080097dd 	.word	0x080097dd
 80097cc:	080097eb 	.word	0x080097eb
 80097d0:	08009801 	.word	0x08009801
 80097d4:	0800981f 	.word	0x0800981f
 80097d8:	0800981f 	.word	0x0800981f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097dc:	4b8e      	ldr	r3, [pc, #568]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e0:	4a8d      	ldr	r2, [pc, #564]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097e8:	e01a      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ee:	3308      	adds	r3, #8
 80097f0:	2100      	movs	r1, #0
 80097f2:	4618      	mov	r0, r3
 80097f4:	f002 fb0e 	bl	800be14 <RCCEx_PLL2_Config>
 80097f8:	4603      	mov	r3, r0
 80097fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097fe:	e00f      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009804:	3328      	adds	r3, #40	; 0x28
 8009806:	2100      	movs	r1, #0
 8009808:	4618      	mov	r0, r3
 800980a:	f002 fbb5 	bl	800bf78 <RCCEx_PLL3_Config>
 800980e:	4603      	mov	r3, r0
 8009810:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009814:	e004      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800981c:	e000      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800981e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009820:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10a      	bne.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009828:	4b7b      	ldr	r3, [pc, #492]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800982a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800982c:	f023 0107 	bic.w	r1, r3, #7
 8009830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009836:	4a78      	ldr	r2, [pc, #480]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009838:	430b      	orrs	r3, r1
 800983a:	6513      	str	r3, [r2, #80]	; 0x50
 800983c:	e003      	b.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800983e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009842:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009852:	f04f 0b00 	mov.w	fp, #0
 8009856:	ea5a 030b 	orrs.w	r3, sl, fp
 800985a:	d04c      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800985c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009866:	d030      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800986c:	d829      	bhi.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800986e:	2bc0      	cmp	r3, #192	; 0xc0
 8009870:	d02d      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009872:	2bc0      	cmp	r3, #192	; 0xc0
 8009874:	d825      	bhi.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009876:	2b80      	cmp	r3, #128	; 0x80
 8009878:	d018      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800987a:	2b80      	cmp	r3, #128	; 0x80
 800987c:	d821      	bhi.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800987e:	2b00      	cmp	r3, #0
 8009880:	d002      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009882:	2b40      	cmp	r3, #64	; 0x40
 8009884:	d007      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009886:	e01c      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009888:	4b63      	ldr	r3, [pc, #396]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988c:	4a62      	ldr	r2, [pc, #392]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800988e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009892:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009894:	e01c      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800989a:	3308      	adds	r3, #8
 800989c:	2100      	movs	r1, #0
 800989e:	4618      	mov	r0, r3
 80098a0:	f002 fab8 	bl	800be14 <RCCEx_PLL2_Config>
 80098a4:	4603      	mov	r3, r0
 80098a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80098aa:	e011      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b0:	3328      	adds	r3, #40	; 0x28
 80098b2:	2100      	movs	r1, #0
 80098b4:	4618      	mov	r0, r3
 80098b6:	f002 fb5f 	bl	800bf78 <RCCEx_PLL3_Config>
 80098ba:	4603      	mov	r3, r0
 80098bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80098c0:	e006      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098c8:	e002      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80098ca:	bf00      	nop
 80098cc:	e000      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80098ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10a      	bne.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80098d8:	4b4f      	ldr	r3, [pc, #316]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098dc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80098e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e6:	4a4c      	ldr	r2, [pc, #304]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098e8:	430b      	orrs	r3, r1
 80098ea:	6513      	str	r3, [r2, #80]	; 0x50
 80098ec:	e003      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80098f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009902:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009906:	2300      	movs	r3, #0
 8009908:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800990c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009910:	460b      	mov	r3, r1
 8009912:	4313      	orrs	r3, r2
 8009914:	d053      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800991a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800991e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009922:	d035      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009924:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009928:	d82e      	bhi.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800992a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800992e:	d031      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009930:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009934:	d828      	bhi.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800993a:	d01a      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800993c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009940:	d822      	bhi.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009946:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800994a:	d007      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800994c:	e01c      	b.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800994e:	4b32      	ldr	r3, [pc, #200]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009952:	4a31      	ldr	r2, [pc, #196]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009958:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800995a:	e01c      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800995c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009960:	3308      	adds	r3, #8
 8009962:	2100      	movs	r1, #0
 8009964:	4618      	mov	r0, r3
 8009966:	f002 fa55 	bl	800be14 <RCCEx_PLL2_Config>
 800996a:	4603      	mov	r3, r0
 800996c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009970:	e011      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009976:	3328      	adds	r3, #40	; 0x28
 8009978:	2100      	movs	r1, #0
 800997a:	4618      	mov	r0, r3
 800997c:	f002 fafc 	bl	800bf78 <RCCEx_PLL3_Config>
 8009980:	4603      	mov	r3, r0
 8009982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009986:	e006      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800998e:	e002      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009990:	bf00      	nop
 8009992:	e000      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10b      	bne.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800999e:	4b1e      	ldr	r3, [pc, #120]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099a2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80099a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80099ae:	4a1a      	ldr	r2, [pc, #104]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099b0:	430b      	orrs	r3, r1
 80099b2:	6593      	str	r3, [r2, #88]	; 0x58
 80099b4:	e003      	b.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80099be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80099ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80099ce:	2300      	movs	r3, #0
 80099d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80099d4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80099d8:	460b      	mov	r3, r1
 80099da:	4313      	orrs	r3, r2
 80099dc:	d056      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80099de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099ea:	d038      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80099ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099f0:	d831      	bhi.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099f6:	d034      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80099f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099fc:	d82b      	bhi.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a02:	d01d      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009a04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a08:	d825      	bhi.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d006      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009a0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a12:	d00a      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009a14:	e01f      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a16:	bf00      	nop
 8009a18:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a1c:	4ba2      	ldr	r3, [pc, #648]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a20:	4aa1      	ldr	r2, [pc, #644]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a28:	e01c      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a2e:	3308      	adds	r3, #8
 8009a30:	2100      	movs	r1, #0
 8009a32:	4618      	mov	r0, r3
 8009a34:	f002 f9ee 	bl	800be14 <RCCEx_PLL2_Config>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009a3e:	e011      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a44:	3328      	adds	r3, #40	; 0x28
 8009a46:	2100      	movs	r1, #0
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f002 fa95 	bl	800bf78 <RCCEx_PLL3_Config>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a54:	e006      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a5c:	e002      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009a5e:	bf00      	nop
 8009a60:	e000      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10b      	bne.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009a6c:	4b8e      	ldr	r3, [pc, #568]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a70:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a7c:	4a8a      	ldr	r2, [pc, #552]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a7e:	430b      	orrs	r3, r1
 8009a80:	6593      	str	r3, [r2, #88]	; 0x58
 8009a82:	e003      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009a98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009aa2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	d03a      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ab2:	2b30      	cmp	r3, #48	; 0x30
 8009ab4:	d01f      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009ab6:	2b30      	cmp	r3, #48	; 0x30
 8009ab8:	d819      	bhi.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009aba:	2b20      	cmp	r3, #32
 8009abc:	d00c      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009abe:	2b20      	cmp	r3, #32
 8009ac0:	d815      	bhi.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d019      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009ac6:	2b10      	cmp	r3, #16
 8009ac8:	d111      	bne.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aca:	4b77      	ldr	r3, [pc, #476]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ace:	4a76      	ldr	r2, [pc, #472]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009ad6:	e011      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009adc:	3308      	adds	r3, #8
 8009ade:	2102      	movs	r1, #2
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f002 f997 	bl	800be14 <RCCEx_PLL2_Config>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009aec:	e006      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009af4:	e002      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009af6:	bf00      	nop
 8009af8:	e000      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009afc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10a      	bne.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009b04:	4b68      	ldr	r3, [pc, #416]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b08:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b12:	4a65      	ldr	r2, [pc, #404]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b14:	430b      	orrs	r3, r1
 8009b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b18:	e003      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009b2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009b32:	2300      	movs	r3, #0
 8009b34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b38:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	d051      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b4c:	d035      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b52:	d82e      	bhi.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b58:	d031      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009b5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b5e:	d828      	bhi.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b64:	d01a      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b6a:	d822      	bhi.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b74:	d007      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009b76:	e01c      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b78:	4b4b      	ldr	r3, [pc, #300]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7c:	4a4a      	ldr	r2, [pc, #296]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b84:	e01c      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b8a:	3308      	adds	r3, #8
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f002 f940 	bl	800be14 <RCCEx_PLL2_Config>
 8009b94:	4603      	mov	r3, r0
 8009b96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b9a:	e011      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba0:	3328      	adds	r3, #40	; 0x28
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f002 f9e7 	bl	800bf78 <RCCEx_PLL3_Config>
 8009baa:	4603      	mov	r3, r0
 8009bac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009bb0:	e006      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bb8:	e002      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009bba:	bf00      	nop
 8009bbc:	e000      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10a      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009bc8:	4b37      	ldr	r3, [pc, #220]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bcc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bd6:	4a34      	ldr	r2, [pc, #208]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bd8:	430b      	orrs	r3, r1
 8009bda:	6513      	str	r3, [r2, #80]	; 0x50
 8009bdc:	e003      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009be2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009bfc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009c00:	460b      	mov	r3, r1
 8009c02:	4313      	orrs	r3, r2
 8009c04:	d056      	beq.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c10:	d033      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009c12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c16:	d82c      	bhi.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c1c:	d02f      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009c1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c22:	d826      	bhi.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c28:	d02b      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009c2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c2e:	d820      	bhi.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c34:	d012      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009c36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c3a:	d81a      	bhi.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d022      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c44:	d115      	bne.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c4a:	3308      	adds	r3, #8
 8009c4c:	2101      	movs	r1, #1
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f002 f8e0 	bl	800be14 <RCCEx_PLL2_Config>
 8009c54:	4603      	mov	r3, r0
 8009c56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009c5a:	e015      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c60:	3328      	adds	r3, #40	; 0x28
 8009c62:	2101      	movs	r1, #1
 8009c64:	4618      	mov	r0, r3
 8009c66:	f002 f987 	bl	800bf78 <RCCEx_PLL3_Config>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009c70:	e00a      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c78:	e006      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c7a:	bf00      	nop
 8009c7c:	e004      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c7e:	bf00      	nop
 8009c80:	e002      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c82:	bf00      	nop
 8009c84:	e000      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d10d      	bne.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009c90:	4b05      	ldr	r3, [pc, #20]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c94:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c9e:	4a02      	ldr	r2, [pc, #8]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ca0:	430b      	orrs	r3, r1
 8009ca2:	6513      	str	r3, [r2, #80]	; 0x50
 8009ca4:	e006      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009ca6:	bf00      	nop
 8009ca8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009cca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	d055      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ce0:	d033      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ce6:	d82c      	bhi.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cec:	d02f      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cf2:	d826      	bhi.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009cf4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cf8:	d02b      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009cfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cfe:	d820      	bhi.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d04:	d012      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009d06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d0a:	d81a      	bhi.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d022      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009d10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d14:	d115      	bne.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d1a:	3308      	adds	r3, #8
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f002 f878 	bl	800be14 <RCCEx_PLL2_Config>
 8009d24:	4603      	mov	r3, r0
 8009d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d2a:	e015      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d30:	3328      	adds	r3, #40	; 0x28
 8009d32:	2101      	movs	r1, #1
 8009d34:	4618      	mov	r0, r3
 8009d36:	f002 f91f 	bl	800bf78 <RCCEx_PLL3_Config>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d40:	e00a      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d48:	e006      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d4a:	bf00      	nop
 8009d4c:	e004      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d4e:	bf00      	nop
 8009d50:	e002      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d52:	bf00      	nop
 8009d54:	e000      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10b      	bne.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009d60:	4ba3      	ldr	r3, [pc, #652]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d64:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d70:	4a9f      	ldr	r2, [pc, #636]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d72:	430b      	orrs	r3, r1
 8009d74:	6593      	str	r3, [r2, #88]	; 0x58
 8009d76:	e003      	b.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d88:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d90:	2300      	movs	r3, #0
 8009d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	d037      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009daa:	d00e      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009db0:	d816      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d018      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009db6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dba:	d111      	bne.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dbc:	4b8c      	ldr	r3, [pc, #560]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	4a8b      	ldr	r2, [pc, #556]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009dc8:	e00f      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dce:	3308      	adds	r3, #8
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f002 f81e 	bl	800be14 <RCCEx_PLL2_Config>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009dde:	e004      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009de6:	e000      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10a      	bne.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009df2:	4b7f      	ldr	r3, [pc, #508]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e00:	4a7b      	ldr	r2, [pc, #492]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e02:	430b      	orrs	r3, r1
 8009e04:	6513      	str	r3, [r2, #80]	; 0x50
 8009e06:	e003      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e20:	2300      	movs	r3, #0
 8009e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e26:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	d039      	beq.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e36:	2b03      	cmp	r3, #3
 8009e38:	d81c      	bhi.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009e3a:	a201      	add	r2, pc, #4	; (adr r2, 8009e40 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e40:	08009e7d 	.word	0x08009e7d
 8009e44:	08009e51 	.word	0x08009e51
 8009e48:	08009e5f 	.word	0x08009e5f
 8009e4c:	08009e7d 	.word	0x08009e7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e50:	4b67      	ldr	r3, [pc, #412]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e54:	4a66      	ldr	r2, [pc, #408]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009e5c:	e00f      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e62:	3308      	adds	r3, #8
 8009e64:	2102      	movs	r1, #2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f001 ffd4 	bl	800be14 <RCCEx_PLL2_Config>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009e72:	e004      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e7a:	e000      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10a      	bne.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009e86:	4b5a      	ldr	r3, [pc, #360]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e8a:	f023 0103 	bic.w	r1, r3, #3
 8009e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e94:	4a56      	ldr	r2, [pc, #344]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e96:	430b      	orrs	r3, r1
 8009e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e9a:	e003      	b.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ea0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009eba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	f000 809f 	beq.w	800a004 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ec6:	4b4b      	ldr	r3, [pc, #300]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a4a      	ldr	r2, [pc, #296]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ed0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ed2:	f7f8 fca7 	bl	8002824 <HAL_GetTick>
 8009ed6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009eda:	e00b      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009edc:	f7f8 fca2 	bl	8002824 <HAL_GetTick>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	2b64      	cmp	r3, #100	; 0x64
 8009eea:	d903      	bls.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009eec:	2303      	movs	r3, #3
 8009eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ef2:	e005      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ef4:	4b3f      	ldr	r3, [pc, #252]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d0ed      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009f00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d179      	bne.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f08:	4b39      	ldr	r3, [pc, #228]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f14:	4053      	eors	r3, r2
 8009f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d015      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f1e:	4b34      	ldr	r3, [pc, #208]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f2a:	4b31      	ldr	r3, [pc, #196]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f2e:	4a30      	ldr	r2, [pc, #192]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f34:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f36:	4b2e      	ldr	r3, [pc, #184]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f3a:	4a2d      	ldr	r2, [pc, #180]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f40:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009f42:	4a2b      	ldr	r2, [pc, #172]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009f48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f56:	d118      	bne.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f58:	f7f8 fc64 	bl	8002824 <HAL_GetTick>
 8009f5c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f60:	e00d      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f62:	f7f8 fc5f 	bl	8002824 <HAL_GetTick>
 8009f66:	4602      	mov	r2, r0
 8009f68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009f6c:	1ad2      	subs	r2, r2, r3
 8009f6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d903      	bls.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009f76:	2303      	movs	r3, #3
 8009f78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009f7c:	e005      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f7e:	4b1c      	ldr	r3, [pc, #112]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f82:	f003 0302 	and.w	r3, r3, #2
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0eb      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d129      	bne.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fa2:	d10e      	bne.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009fa4:	4b12      	ldr	r3, [pc, #72]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009fb4:	091a      	lsrs	r2, r3, #4
 8009fb6:	4b10      	ldr	r3, [pc, #64]	; (8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009fb8:	4013      	ands	r3, r2
 8009fba:	4a0d      	ldr	r2, [pc, #52]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fbc:	430b      	orrs	r3, r1
 8009fbe:	6113      	str	r3, [r2, #16]
 8009fc0:	e005      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009fc2:	4b0b      	ldr	r3, [pc, #44]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	4a0a      	ldr	r2, [pc, #40]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009fcc:	6113      	str	r3, [r2, #16]
 8009fce:	4b08      	ldr	r3, [pc, #32]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fd0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fde:	4a04      	ldr	r2, [pc, #16]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fe0:	430b      	orrs	r3, r1
 8009fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8009fe4:	e00e      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009fee:	e009      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009ff0:	58024400 	.word	0x58024400
 8009ff4:	58024800 	.word	0x58024800
 8009ff8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a000:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	f002 0301 	and.w	r3, r2, #1
 800a010:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a014:	2300      	movs	r3, #0
 800a016:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a01a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a01e:	460b      	mov	r3, r1
 800a020:	4313      	orrs	r3, r2
 800a022:	f000 8089 	beq.w	800a138 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a02a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a02c:	2b28      	cmp	r3, #40	; 0x28
 800a02e:	d86b      	bhi.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a030:	a201      	add	r2, pc, #4	; (adr r2, 800a038 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a036:	bf00      	nop
 800a038:	0800a111 	.word	0x0800a111
 800a03c:	0800a109 	.word	0x0800a109
 800a040:	0800a109 	.word	0x0800a109
 800a044:	0800a109 	.word	0x0800a109
 800a048:	0800a109 	.word	0x0800a109
 800a04c:	0800a109 	.word	0x0800a109
 800a050:	0800a109 	.word	0x0800a109
 800a054:	0800a109 	.word	0x0800a109
 800a058:	0800a0dd 	.word	0x0800a0dd
 800a05c:	0800a109 	.word	0x0800a109
 800a060:	0800a109 	.word	0x0800a109
 800a064:	0800a109 	.word	0x0800a109
 800a068:	0800a109 	.word	0x0800a109
 800a06c:	0800a109 	.word	0x0800a109
 800a070:	0800a109 	.word	0x0800a109
 800a074:	0800a109 	.word	0x0800a109
 800a078:	0800a0f3 	.word	0x0800a0f3
 800a07c:	0800a109 	.word	0x0800a109
 800a080:	0800a109 	.word	0x0800a109
 800a084:	0800a109 	.word	0x0800a109
 800a088:	0800a109 	.word	0x0800a109
 800a08c:	0800a109 	.word	0x0800a109
 800a090:	0800a109 	.word	0x0800a109
 800a094:	0800a109 	.word	0x0800a109
 800a098:	0800a111 	.word	0x0800a111
 800a09c:	0800a109 	.word	0x0800a109
 800a0a0:	0800a109 	.word	0x0800a109
 800a0a4:	0800a109 	.word	0x0800a109
 800a0a8:	0800a109 	.word	0x0800a109
 800a0ac:	0800a109 	.word	0x0800a109
 800a0b0:	0800a109 	.word	0x0800a109
 800a0b4:	0800a109 	.word	0x0800a109
 800a0b8:	0800a111 	.word	0x0800a111
 800a0bc:	0800a109 	.word	0x0800a109
 800a0c0:	0800a109 	.word	0x0800a109
 800a0c4:	0800a109 	.word	0x0800a109
 800a0c8:	0800a109 	.word	0x0800a109
 800a0cc:	0800a109 	.word	0x0800a109
 800a0d0:	0800a109 	.word	0x0800a109
 800a0d4:	0800a109 	.word	0x0800a109
 800a0d8:	0800a111 	.word	0x0800a111
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e0:	3308      	adds	r3, #8
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f001 fe95 	bl	800be14 <RCCEx_PLL2_Config>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a0f0:	e00f      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0f6:	3328      	adds	r3, #40	; 0x28
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f001 ff3c 	bl	800bf78 <RCCEx_PLL3_Config>
 800a100:	4603      	mov	r3, r0
 800a102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a106:	e004      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a10e:	e000      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a110:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10a      	bne.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a11a:	4bbf      	ldr	r3, [pc, #764]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a11c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a11e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a128:	4abb      	ldr	r2, [pc, #748]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a12a:	430b      	orrs	r3, r1
 800a12c:	6553      	str	r3, [r2, #84]	; 0x54
 800a12e:	e003      	b.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a130:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a134:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a140:	f002 0302 	and.w	r3, r2, #2
 800a144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a148:	2300      	movs	r3, #0
 800a14a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a14e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a152:	460b      	mov	r3, r1
 800a154:	4313      	orrs	r3, r2
 800a156:	d041      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a15c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a15e:	2b05      	cmp	r3, #5
 800a160:	d824      	bhi.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a162:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a168:	0800a1b5 	.word	0x0800a1b5
 800a16c:	0800a181 	.word	0x0800a181
 800a170:	0800a197 	.word	0x0800a197
 800a174:	0800a1b5 	.word	0x0800a1b5
 800a178:	0800a1b5 	.word	0x0800a1b5
 800a17c:	0800a1b5 	.word	0x0800a1b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a184:	3308      	adds	r3, #8
 800a186:	2101      	movs	r1, #1
 800a188:	4618      	mov	r0, r3
 800a18a:	f001 fe43 	bl	800be14 <RCCEx_PLL2_Config>
 800a18e:	4603      	mov	r3, r0
 800a190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a194:	e00f      	b.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a19a:	3328      	adds	r3, #40	; 0x28
 800a19c:	2101      	movs	r1, #1
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f001 feea 	bl	800bf78 <RCCEx_PLL3_Config>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a1aa:	e004      	b.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1b2:	e000      	b.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a1b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10a      	bne.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a1be:	4b96      	ldr	r3, [pc, #600]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1c2:	f023 0107 	bic.w	r1, r3, #7
 800a1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1cc:	4a92      	ldr	r2, [pc, #584]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1ce:	430b      	orrs	r3, r1
 800a1d0:	6553      	str	r3, [r2, #84]	; 0x54
 800a1d2:	e003      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	f002 0304 	and.w	r3, r2, #4
 800a1e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	d044      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a204:	2b05      	cmp	r3, #5
 800a206:	d825      	bhi.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a208:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a25d 	.word	0x0800a25d
 800a214:	0800a229 	.word	0x0800a229
 800a218:	0800a23f 	.word	0x0800a23f
 800a21c:	0800a25d 	.word	0x0800a25d
 800a220:	0800a25d 	.word	0x0800a25d
 800a224:	0800a25d 	.word	0x0800a25d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22c:	3308      	adds	r3, #8
 800a22e:	2101      	movs	r1, #1
 800a230:	4618      	mov	r0, r3
 800a232:	f001 fdef 	bl	800be14 <RCCEx_PLL2_Config>
 800a236:	4603      	mov	r3, r0
 800a238:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a23c:	e00f      	b.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a242:	3328      	adds	r3, #40	; 0x28
 800a244:	2101      	movs	r1, #1
 800a246:	4618      	mov	r0, r3
 800a248:	f001 fe96 	bl	800bf78 <RCCEx_PLL3_Config>
 800a24c:	4603      	mov	r3, r0
 800a24e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a252:	e004      	b.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a25a:	e000      	b.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a25c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a25e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10b      	bne.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a266:	4b6c      	ldr	r3, [pc, #432]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a26a:	f023 0107 	bic.w	r1, r3, #7
 800a26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a276:	4a68      	ldr	r2, [pc, #416]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a278:	430b      	orrs	r3, r1
 800a27a:	6593      	str	r3, [r2, #88]	; 0x58
 800a27c:	e003      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a27e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a282:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	f002 0320 	and.w	r3, r2, #32
 800a292:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a296:	2300      	movs	r3, #0
 800a298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a29c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	d055      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2b2:	d033      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a2b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2b8:	d82c      	bhi.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2be:	d02f      	beq.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a2c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2c4:	d826      	bhi.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a2c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2ca:	d02b      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a2cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2d0:	d820      	bhi.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a2d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2d6:	d012      	beq.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a2d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2dc:	d81a      	bhi.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d022      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a2e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2e6:	d115      	bne.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ec:	3308      	adds	r3, #8
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f001 fd8f 	bl	800be14 <RCCEx_PLL2_Config>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a2fc:	e015      	b.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a302:	3328      	adds	r3, #40	; 0x28
 800a304:	2102      	movs	r1, #2
 800a306:	4618      	mov	r0, r3
 800a308:	f001 fe36 	bl	800bf78 <RCCEx_PLL3_Config>
 800a30c:	4603      	mov	r3, r0
 800a30e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a312:	e00a      	b.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a31a:	e006      	b.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a31c:	bf00      	nop
 800a31e:	e004      	b.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a320:	bf00      	nop
 800a322:	e002      	b.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a324:	bf00      	nop
 800a326:	e000      	b.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a32a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10b      	bne.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a332:	4b39      	ldr	r3, [pc, #228]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a336:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a342:	4a35      	ldr	r2, [pc, #212]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a344:	430b      	orrs	r3, r1
 800a346:	6553      	str	r3, [r2, #84]	; 0x54
 800a348:	e003      	b.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a34a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a34e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a35e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a362:	2300      	movs	r3, #0
 800a364:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a368:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4313      	orrs	r3, r2
 800a370:	d058      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a376:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a37a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a37e:	d033      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a380:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a384:	d82c      	bhi.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a38a:	d02f      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a38c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a390:	d826      	bhi.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a392:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a396:	d02b      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a398:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a39c:	d820      	bhi.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a39e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3a2:	d012      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a3a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3a8:	d81a      	bhi.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d022      	beq.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a3ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3b2:	d115      	bne.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f001 fd29 	bl	800be14 <RCCEx_PLL2_Config>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a3c8:	e015      	b.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ce:	3328      	adds	r3, #40	; 0x28
 800a3d0:	2102      	movs	r1, #2
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f001 fdd0 	bl	800bf78 <RCCEx_PLL3_Config>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a3de:	e00a      	b.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3e6:	e006      	b.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3e8:	bf00      	nop
 800a3ea:	e004      	b.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3ec:	bf00      	nop
 800a3ee:	e002      	b.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3f0:	bf00      	nop
 800a3f2:	e000      	b.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10e      	bne.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a3fe:	4b06      	ldr	r3, [pc, #24]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a402:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a40a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a40e:	4a02      	ldr	r2, [pc, #8]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a410:	430b      	orrs	r3, r1
 800a412:	6593      	str	r3, [r2, #88]	; 0x58
 800a414:	e006      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a416:	bf00      	nop
 800a418:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a41c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a420:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a434:	2300      	movs	r3, #0
 800a436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a43a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a43e:	460b      	mov	r3, r1
 800a440:	4313      	orrs	r3, r2
 800a442:	d055      	beq.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a448:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a44c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a450:	d033      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a452:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a456:	d82c      	bhi.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a45c:	d02f      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a45e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a462:	d826      	bhi.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a464:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a468:	d02b      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a46a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a46e:	d820      	bhi.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a474:	d012      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a47a:	d81a      	bhi.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d022      	beq.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a484:	d115      	bne.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a48a:	3308      	adds	r3, #8
 800a48c:	2100      	movs	r1, #0
 800a48e:	4618      	mov	r0, r3
 800a490:	f001 fcc0 	bl	800be14 <RCCEx_PLL2_Config>
 800a494:	4603      	mov	r3, r0
 800a496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a49a:	e015      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a0:	3328      	adds	r3, #40	; 0x28
 800a4a2:	2102      	movs	r1, #2
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f001 fd67 	bl	800bf78 <RCCEx_PLL3_Config>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a4b0:	e00a      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a4b8:	e006      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a4ba:	bf00      	nop
 800a4bc:	e004      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a4be:	bf00      	nop
 800a4c0:	e002      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a4c2:	bf00      	nop
 800a4c4:	e000      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a4c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10b      	bne.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a4d0:	4ba1      	ldr	r3, [pc, #644]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4d4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a4e0:	4a9d      	ldr	r2, [pc, #628]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4e2:	430b      	orrs	r3, r1
 800a4e4:	6593      	str	r3, [r2, #88]	; 0x58
 800a4e6:	e003      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f8:	f002 0308 	and.w	r3, r2, #8
 800a4fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a500:	2300      	movs	r3, #0
 800a502:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a506:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a50a:	460b      	mov	r3, r1
 800a50c:	4313      	orrs	r3, r2
 800a50e:	d01e      	beq.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a51c:	d10c      	bne.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a522:	3328      	adds	r3, #40	; 0x28
 800a524:	2102      	movs	r1, #2
 800a526:	4618      	mov	r0, r3
 800a528:	f001 fd26 	bl	800bf78 <RCCEx_PLL3_Config>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d002      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a538:	4b87      	ldr	r3, [pc, #540]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a53a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a53c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a548:	4a83      	ldr	r2, [pc, #524]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a54a:	430b      	orrs	r3, r1
 800a54c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a54e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a556:	f002 0310 	and.w	r3, r2, #16
 800a55a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a55e:	2300      	movs	r3, #0
 800a560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a564:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a568:	460b      	mov	r3, r1
 800a56a:	4313      	orrs	r3, r2
 800a56c:	d01e      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a57a:	d10c      	bne.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a580:	3328      	adds	r3, #40	; 0x28
 800a582:	2102      	movs	r1, #2
 800a584:	4618      	mov	r0, r3
 800a586:	f001 fcf7 	bl	800bf78 <RCCEx_PLL3_Config>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d002      	beq.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a596:	4b70      	ldr	r3, [pc, #448]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a59a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5a6:	4a6c      	ldr	r2, [pc, #432]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5a8:	430b      	orrs	r3, r1
 800a5aa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a5b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a5c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	d03e      	beq.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a5d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5d8:	d022      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a5da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5de:	d81b      	bhi.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d003      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a5e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5e8:	d00b      	beq.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a5ea:	e015      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f001 fc0d 	bl	800be14 <RCCEx_PLL2_Config>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a600:	e00f      	b.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a606:	3328      	adds	r3, #40	; 0x28
 800a608:	2102      	movs	r1, #2
 800a60a:	4618      	mov	r0, r3
 800a60c:	f001 fcb4 	bl	800bf78 <RCCEx_PLL3_Config>
 800a610:	4603      	mov	r3, r0
 800a612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a616:	e004      	b.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a61e:	e000      	b.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a620:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10b      	bne.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a62a:	4b4b      	ldr	r3, [pc, #300]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a62c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a62e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a636:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a63a:	4a47      	ldr	r2, [pc, #284]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a63c:	430b      	orrs	r3, r1
 800a63e:	6593      	str	r3, [r2, #88]	; 0x58
 800a640:	e003      	b.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a646:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a652:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a656:	67bb      	str	r3, [r7, #120]	; 0x78
 800a658:	2300      	movs	r3, #0
 800a65a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a65c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a660:	460b      	mov	r3, r1
 800a662:	4313      	orrs	r3, r2
 800a664:	d03b      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a66a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a66e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a672:	d01f      	beq.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a674:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a678:	d818      	bhi.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a67a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a67e:	d003      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a680:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a684:	d007      	beq.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a686:	e011      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a688:	4b33      	ldr	r3, [pc, #204]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68c:	4a32      	ldr	r2, [pc, #200]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a68e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a692:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a694:	e00f      	b.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a69a:	3328      	adds	r3, #40	; 0x28
 800a69c:	2101      	movs	r1, #1
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f001 fc6a 	bl	800bf78 <RCCEx_PLL3_Config>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a6aa:	e004      	b.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6b2:	e000      	b.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a6b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10b      	bne.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a6be:	4b26      	ldr	r3, [pc, #152]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a6c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ce:	4a22      	ldr	r2, [pc, #136]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6d0:	430b      	orrs	r3, r1
 800a6d2:	6553      	str	r3, [r2, #84]	; 0x54
 800a6d4:	e003      	b.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a6ea:	673b      	str	r3, [r7, #112]	; 0x70
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	677b      	str	r3, [r7, #116]	; 0x74
 800a6f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	d034      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a6fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a700:	2b00      	cmp	r3, #0
 800a702:	d003      	beq.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a708:	d007      	beq.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a70a:	e011      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a70c:	4b12      	ldr	r3, [pc, #72]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a710:	4a11      	ldr	r2, [pc, #68]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a716:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a718:	e00e      	b.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71e:	3308      	adds	r3, #8
 800a720:	2102      	movs	r1, #2
 800a722:	4618      	mov	r0, r3
 800a724:	f001 fb76 	bl	800be14 <RCCEx_PLL2_Config>
 800a728:	4603      	mov	r3, r0
 800a72a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a72e:	e003      	b.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a736:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a738:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10d      	bne.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a740:	4b05      	ldr	r3, [pc, #20]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a744:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a74e:	4a02      	ldr	r2, [pc, #8]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a750:	430b      	orrs	r3, r1
 800a752:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a754:	e006      	b.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a756:	bf00      	nop
 800a758:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a75c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a760:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a770:	66bb      	str	r3, [r7, #104]	; 0x68
 800a772:	2300      	movs	r3, #0
 800a774:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a776:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a77a:	460b      	mov	r3, r1
 800a77c:	4313      	orrs	r3, r2
 800a77e:	d00c      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a784:	3328      	adds	r3, #40	; 0x28
 800a786:	2102      	movs	r1, #2
 800a788:	4618      	mov	r0, r3
 800a78a:	f001 fbf5 	bl	800bf78 <RCCEx_PLL3_Config>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a7a6:	663b      	str	r3, [r7, #96]	; 0x60
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	667b      	str	r3, [r7, #100]	; 0x64
 800a7ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	d038      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7c2:	d018      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a7c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7c8:	d811      	bhi.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a7ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7ce:	d014      	beq.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a7d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7d4:	d80b      	bhi.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d011      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a7da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7de:	d106      	bne.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7e0:	4bc3      	ldr	r3, [pc, #780]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e4:	4ac2      	ldr	r2, [pc, #776]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a7ec:	e008      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7f4:	e004      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7f6:	bf00      	nop
 800a7f8:	e002      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7fa:	bf00      	nop
 800a7fc:	e000      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a800:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10b      	bne.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a808:	4bb9      	ldr	r3, [pc, #740]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a80a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a80c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a818:	4ab5      	ldr	r2, [pc, #724]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a81a:	430b      	orrs	r3, r1
 800a81c:	6553      	str	r3, [r2, #84]	; 0x54
 800a81e:	e003      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a820:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a824:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a834:	65bb      	str	r3, [r7, #88]	; 0x58
 800a836:	2300      	movs	r3, #0
 800a838:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a83a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a83e:	460b      	mov	r3, r1
 800a840:	4313      	orrs	r3, r2
 800a842:	d009      	beq.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a844:	4baa      	ldr	r3, [pc, #680]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a848:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a84c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a852:	4aa7      	ldr	r2, [pc, #668]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a854:	430b      	orrs	r3, r1
 800a856:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a860:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a864:	653b      	str	r3, [r7, #80]	; 0x50
 800a866:	2300      	movs	r3, #0
 800a868:	657b      	str	r3, [r7, #84]	; 0x54
 800a86a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a86e:	460b      	mov	r3, r1
 800a870:	4313      	orrs	r3, r2
 800a872:	d00a      	beq.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a874:	4b9e      	ldr	r3, [pc, #632]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a87c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a880:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a884:	4a9a      	ldr	r2, [pc, #616]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a886:	430b      	orrs	r3, r1
 800a888:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a892:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a896:	64bb      	str	r3, [r7, #72]	; 0x48
 800a898:	2300      	movs	r3, #0
 800a89a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a89c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	d009      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a8a6:	4b92      	ldr	r3, [pc, #584]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8aa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8b4:	4a8e      	ldr	r2, [pc, #568]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8b6:	430b      	orrs	r3, r1
 800a8b8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a8ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a8c6:	643b      	str	r3, [r7, #64]	; 0x40
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	647b      	str	r3, [r7, #68]	; 0x44
 800a8cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	d00e      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a8d6:	4b86      	ldr	r3, [pc, #536]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	4a85      	ldr	r2, [pc, #532]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8e0:	6113      	str	r3, [r2, #16]
 800a8e2:	4b83      	ldr	r3, [pc, #524]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8e4:	6919      	ldr	r1, [r3, #16]
 800a8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a8ee:	4a80      	ldr	r2, [pc, #512]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8f0:	430b      	orrs	r3, r1
 800a8f2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a900:	63bb      	str	r3, [r7, #56]	; 0x38
 800a902:	2300      	movs	r3, #0
 800a904:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a906:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a90a:	460b      	mov	r3, r1
 800a90c:	4313      	orrs	r3, r2
 800a90e:	d009      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a910:	4b77      	ldr	r3, [pc, #476]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a914:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a91e:	4a74      	ldr	r2, [pc, #464]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a920:	430b      	orrs	r3, r1
 800a922:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a930:	633b      	str	r3, [r7, #48]	; 0x30
 800a932:	2300      	movs	r3, #0
 800a934:	637b      	str	r3, [r7, #52]	; 0x34
 800a936:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a93a:	460b      	mov	r3, r1
 800a93c:	4313      	orrs	r3, r2
 800a93e:	d00a      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a940:	4b6b      	ldr	r3, [pc, #428]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a944:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a94c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a950:	4a67      	ldr	r2, [pc, #412]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a952:	430b      	orrs	r3, r1
 800a954:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	2100      	movs	r1, #0
 800a960:	62b9      	str	r1, [r7, #40]	; 0x28
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a968:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a96c:	460b      	mov	r3, r1
 800a96e:	4313      	orrs	r3, r2
 800a970:	d011      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a976:	3308      	adds	r3, #8
 800a978:	2100      	movs	r1, #0
 800a97a:	4618      	mov	r0, r3
 800a97c:	f001 fa4a 	bl	800be14 <RCCEx_PLL2_Config>
 800a980:	4603      	mov	r3, r0
 800a982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d003      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a98e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a992:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	2100      	movs	r1, #0
 800a9a0:	6239      	str	r1, [r7, #32]
 800a9a2:	f003 0302 	and.w	r3, r3, #2
 800a9a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a9a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	d011      	beq.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9b6:	3308      	adds	r3, #8
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f001 fa2a 	bl	800be14 <RCCEx_PLL2_Config>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a9c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	2100      	movs	r1, #0
 800a9e0:	61b9      	str	r1, [r7, #24]
 800a9e2:	f003 0304 	and.w	r3, r3, #4
 800a9e6:	61fb      	str	r3, [r7, #28]
 800a9e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	d011      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9f6:	3308      	adds	r3, #8
 800a9f8:	2102      	movs	r1, #2
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f001 fa0a 	bl	800be14 <RCCEx_PLL2_Config>
 800aa00:	4603      	mov	r3, r0
 800aa02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d003      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aa16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	2100      	movs	r1, #0
 800aa20:	6139      	str	r1, [r7, #16]
 800aa22:	f003 0308 	and.w	r3, r3, #8
 800aa26:	617b      	str	r3, [r7, #20]
 800aa28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	d011      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa36:	3328      	adds	r3, #40	; 0x28
 800aa38:	2100      	movs	r1, #0
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f001 fa9c 	bl	800bf78 <RCCEx_PLL3_Config>
 800aa40:	4603      	mov	r3, r0
 800aa42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800aa46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d003      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aa56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5e:	2100      	movs	r1, #0
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	f003 0310 	and.w	r3, r3, #16
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	d011      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa76:	3328      	adds	r3, #40	; 0x28
 800aa78:	2101      	movs	r1, #1
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f001 fa7c 	bl	800bf78 <RCCEx_PLL3_Config>
 800aa80:	4603      	mov	r3, r0
 800aa82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d003      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aa96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	6039      	str	r1, [r7, #0]
 800aaa2:	f003 0320 	and.w	r3, r3, #32
 800aaa6:	607b      	str	r3, [r7, #4]
 800aaa8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aaac:	460b      	mov	r3, r1
 800aaae:	4313      	orrs	r3, r2
 800aab0:	d011      	beq.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aab6:	3328      	adds	r3, #40	; 0x28
 800aab8:	2102      	movs	r1, #2
 800aaba:	4618      	mov	r0, r3
 800aabc:	f001 fa5c 	bl	800bf78 <RCCEx_PLL3_Config>
 800aac0:	4603      	mov	r3, r0
 800aac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aad2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800aad6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	e000      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800aaea:	46bd      	mov	sp, r7
 800aaec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aaf0:	58024400 	.word	0x58024400

0800aaf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b090      	sub	sp, #64	; 0x40
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aafe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab02:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ab06:	430b      	orrs	r3, r1
 800ab08:	f040 8094 	bne.w	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ab0c:	4b9e      	ldr	r3, [pc, #632]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab10:	f003 0307 	and.w	r3, r3, #7
 800ab14:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ab16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	f200 8087 	bhi.w	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ab1e:	a201      	add	r2, pc, #4	; (adr r2, 800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ab20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab24:	0800ab39 	.word	0x0800ab39
 800ab28:	0800ab61 	.word	0x0800ab61
 800ab2c:	0800ab89 	.word	0x0800ab89
 800ab30:	0800ac25 	.word	0x0800ac25
 800ab34:	0800abb1 	.word	0x0800abb1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab38:	4b93      	ldr	r3, [pc, #588]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab44:	d108      	bne.n	800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f001 f810 	bl	800bb70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab54:	f000 bd45 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab5c:	f000 bd41 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab60:	4b89      	ldr	r3, [pc, #548]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab6c:	d108      	bne.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab6e:	f107 0318 	add.w	r3, r7, #24
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 fd54 	bl	800b620 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab7c:	f000 bd31 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab84:	f000 bd2d 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab88:	4b7f      	ldr	r3, [pc, #508]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab94:	d108      	bne.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab96:	f107 030c 	add.w	r3, r7, #12
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f000 fe94 	bl	800b8c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aba4:	f000 bd1d 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aba8:	2300      	movs	r3, #0
 800abaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abac:	f000 bd19 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abb0:	4b75      	ldr	r3, [pc, #468]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abb8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abba:	4b73      	ldr	r3, [pc, #460]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f003 0304 	and.w	r3, r3, #4
 800abc2:	2b04      	cmp	r3, #4
 800abc4:	d10c      	bne.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800abc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d109      	bne.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abcc:	4b6e      	ldr	r3, [pc, #440]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	08db      	lsrs	r3, r3, #3
 800abd2:	f003 0303 	and.w	r3, r3, #3
 800abd6:	4a6d      	ldr	r2, [pc, #436]	; (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800abd8:	fa22 f303 	lsr.w	r3, r2, r3
 800abdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abde:	e01f      	b.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abe0:	4b69      	ldr	r3, [pc, #420]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abec:	d106      	bne.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800abee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abf4:	d102      	bne.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800abf6:	4b66      	ldr	r3, [pc, #408]	; (800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800abf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abfa:	e011      	b.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abfc:	4b62      	ldr	r3, [pc, #392]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac08:	d106      	bne.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ac0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac10:	d102      	bne.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac12:	4b60      	ldr	r3, [pc, #384]	; (800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ac14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac16:	e003      	b.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac1c:	f000 bce1 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac20:	f000 bcdf 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac24:	4b5c      	ldr	r3, [pc, #368]	; (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac28:	f000 bcdb 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac30:	f000 bcd7 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ac34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac38:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ac3c:	430b      	orrs	r3, r1
 800ac3e:	f040 80ad 	bne.w	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ac42:	4b51      	ldr	r3, [pc, #324]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac46:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ac4a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac52:	d056      	beq.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ac54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac5a:	f200 8090 	bhi.w	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	2bc0      	cmp	r3, #192	; 0xc0
 800ac62:	f000 8088 	beq.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ac66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac68:	2bc0      	cmp	r3, #192	; 0xc0
 800ac6a:	f200 8088 	bhi.w	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	2b80      	cmp	r3, #128	; 0x80
 800ac72:	d032      	beq.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ac74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac76:	2b80      	cmp	r3, #128	; 0x80
 800ac78:	f200 8081 	bhi.w	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d003      	beq.n	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ac82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac84:	2b40      	cmp	r3, #64	; 0x40
 800ac86:	d014      	beq.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ac88:	e079      	b.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac8a:	4b3f      	ldr	r3, [pc, #252]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac96:	d108      	bne.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 ff67 	bl	800bb70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aca6:	f000 bc9c 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acae:	f000 bc98 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acb2:	4b35      	ldr	r3, [pc, #212]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acbe:	d108      	bne.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acc0:	f107 0318 	add.w	r3, r7, #24
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 fcab 	bl	800b620 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acce:	f000 bc88 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acd6:	f000 bc84 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acda:	4b2b      	ldr	r3, [pc, #172]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ace2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ace6:	d108      	bne.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ace8:	f107 030c 	add.w	r3, r7, #12
 800acec:	4618      	mov	r0, r3
 800acee:	f000 fdeb 	bl	800b8c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf6:	f000 bc74 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acfe:	f000 bc70 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad02:	4b21      	ldr	r3, [pc, #132]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad0c:	4b1e      	ldr	r3, [pc, #120]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0304 	and.w	r3, r3, #4
 800ad14:	2b04      	cmp	r3, #4
 800ad16:	d10c      	bne.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ad18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d109      	bne.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad1e:	4b1a      	ldr	r3, [pc, #104]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	08db      	lsrs	r3, r3, #3
 800ad24:	f003 0303 	and.w	r3, r3, #3
 800ad28:	4a18      	ldr	r2, [pc, #96]	; (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ad2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad30:	e01f      	b.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad32:	4b15      	ldr	r3, [pc, #84]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad3e:	d106      	bne.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ad40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad46:	d102      	bne.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad48:	4b11      	ldr	r3, [pc, #68]	; (800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ad4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad4c:	e011      	b.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad4e:	4b0e      	ldr	r3, [pc, #56]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad5a:	d106      	bne.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ad5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad62:	d102      	bne.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad64:	4b0b      	ldr	r3, [pc, #44]	; (800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ad66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad68:	e003      	b.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad6e:	f000 bc38 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad72:	f000 bc36 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad76:	4b08      	ldr	r3, [pc, #32]	; (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ad78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad7a:	f000 bc32 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad82:	f000 bc2e 	b.w	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad86:	bf00      	nop
 800ad88:	58024400 	.word	0x58024400
 800ad8c:	03d09000 	.word	0x03d09000
 800ad90:	003d0900 	.word	0x003d0900
 800ad94:	017d7840 	.word	0x017d7840
 800ad98:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ad9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ada0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ada4:	430b      	orrs	r3, r1
 800ada6:	f040 809c 	bne.w	800aee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800adaa:	4b9e      	ldr	r3, [pc, #632]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800adb2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800adb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adba:	d054      	beq.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800adbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adc2:	f200 808b 	bhi.w	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800adcc:	f000 8083 	beq.w	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800add6:	f200 8081 	bhi.w	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800adda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800addc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ade0:	d02f      	beq.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ade2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ade8:	d878      	bhi.n	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	2b00      	cmp	r3, #0
 800adee:	d004      	beq.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800adf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adf6:	d012      	beq.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800adf8:	e070      	b.n	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adfa:	4b8a      	ldr	r3, [pc, #552]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae06:	d107      	bne.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 feaf 	bl	800bb70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae16:	e3e4      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae1c:	e3e1      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae1e:	4b81      	ldr	r3, [pc, #516]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae2a:	d107      	bne.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae2c:	f107 0318 	add.w	r3, r7, #24
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 fbf5 	bl	800b620 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae3a:	e3d2      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae40:	e3cf      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae42:	4b78      	ldr	r3, [pc, #480]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae4e:	d107      	bne.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae50:	f107 030c 	add.w	r3, r7, #12
 800ae54:	4618      	mov	r0, r3
 800ae56:	f000 fd37 	bl	800b8c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae5e:	e3c0      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae60:	2300      	movs	r3, #0
 800ae62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae64:	e3bd      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae66:	4b6f      	ldr	r3, [pc, #444]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae6e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae70:	4b6c      	ldr	r3, [pc, #432]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 0304 	and.w	r3, r3, #4
 800ae78:	2b04      	cmp	r3, #4
 800ae7a:	d10c      	bne.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ae7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d109      	bne.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae82:	4b68      	ldr	r3, [pc, #416]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	08db      	lsrs	r3, r3, #3
 800ae88:	f003 0303 	and.w	r3, r3, #3
 800ae8c:	4a66      	ldr	r2, [pc, #408]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ae8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae94:	e01e      	b.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae96:	4b63      	ldr	r3, [pc, #396]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aea2:	d106      	bne.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800aea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aeaa:	d102      	bne.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aeac:	4b5f      	ldr	r3, [pc, #380]	; (800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aeae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeb0:	e010      	b.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aeb2:	4b5c      	ldr	r3, [pc, #368]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aebe:	d106      	bne.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800aec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aec6:	d102      	bne.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aec8:	4b59      	ldr	r3, [pc, #356]	; (800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aeca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aecc:	e002      	b.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aece:	2300      	movs	r3, #0
 800aed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aed2:	e386      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aed4:	e385      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aed6:	4b57      	ldr	r3, [pc, #348]	; (800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeda:	e382      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aedc:	2300      	movs	r3, #0
 800aede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aee0:	e37f      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aee6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800aeea:	430b      	orrs	r3, r1
 800aeec:	f040 80a7 	bne.w	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800aef0:	4b4c      	ldr	r3, [pc, #304]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aef4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800aef8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af00:	d055      	beq.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800af02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af08:	f200 8096 	bhi.w	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af12:	f000 8084 	beq.w	800b01e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af1c:	f200 808c 	bhi.w	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af26:	d030      	beq.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800af28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af2e:	f200 8083 	bhi.w	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af34:	2b00      	cmp	r3, #0
 800af36:	d004      	beq.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af3e:	d012      	beq.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800af40:	e07a      	b.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af42:	4b38      	ldr	r3, [pc, #224]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af4e:	d107      	bne.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af54:	4618      	mov	r0, r3
 800af56:	f000 fe0b 	bl	800bb70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af5e:	e340      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af60:	2300      	movs	r3, #0
 800af62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af64:	e33d      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af66:	4b2f      	ldr	r3, [pc, #188]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af72:	d107      	bne.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af74:	f107 0318 	add.w	r3, r7, #24
 800af78:	4618      	mov	r0, r3
 800af7a:	f000 fb51 	bl	800b620 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af82:	e32e      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af88:	e32b      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af8a:	4b26      	ldr	r3, [pc, #152]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af96:	d107      	bne.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af98:	f107 030c 	add.w	r3, r7, #12
 800af9c:	4618      	mov	r0, r3
 800af9e:	f000 fc93 	bl	800b8c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afa6:	e31c      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afac:	e319      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afae:	4b1d      	ldr	r3, [pc, #116]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afb6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afb8:	4b1a      	ldr	r3, [pc, #104]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 0304 	and.w	r3, r3, #4
 800afc0:	2b04      	cmp	r3, #4
 800afc2:	d10c      	bne.n	800afde <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800afc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d109      	bne.n	800afde <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afca:	4b16      	ldr	r3, [pc, #88]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	08db      	lsrs	r3, r3, #3
 800afd0:	f003 0303 	and.w	r3, r3, #3
 800afd4:	4a14      	ldr	r2, [pc, #80]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800afd6:	fa22 f303 	lsr.w	r3, r2, r3
 800afda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afdc:	e01e      	b.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afde:	4b11      	ldr	r3, [pc, #68]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afea:	d106      	bne.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800afec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aff2:	d102      	bne.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aff4:	4b0d      	ldr	r3, [pc, #52]	; (800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aff8:	e010      	b.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800affa:	4b0a      	ldr	r3, [pc, #40]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b006:	d106      	bne.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b00a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b00e:	d102      	bne.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b010:	4b07      	ldr	r3, [pc, #28]	; (800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b012:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b014:	e002      	b.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b016:	2300      	movs	r3, #0
 800b018:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b01a:	e2e2      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b01c:	e2e1      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b01e:	4b05      	ldr	r3, [pc, #20]	; (800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b020:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b022:	e2de      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b024:	58024400 	.word	0x58024400
 800b028:	03d09000 	.word	0x03d09000
 800b02c:	003d0900 	.word	0x003d0900
 800b030:	017d7840 	.word	0x017d7840
 800b034:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b03c:	e2d1      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b03e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b042:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b046:	430b      	orrs	r3, r1
 800b048:	f040 809c 	bne.w	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b04c:	4b93      	ldr	r3, [pc, #588]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b04e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b050:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b054:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b05c:	d054      	beq.n	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b064:	f200 808b 	bhi.w	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b06e:	f000 8083 	beq.w	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b074:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b078:	f200 8081 	bhi.w	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b082:	d02f      	beq.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b08a:	d878      	bhi.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d004      	beq.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b098:	d012      	beq.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b09a:	e070      	b.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b09c:	4b7f      	ldr	r3, [pc, #508]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0a8:	d107      	bne.n	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f000 fd5e 	bl	800bb70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0b8:	e293      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0be:	e290      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0c0:	4b76      	ldr	r3, [pc, #472]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0cc:	d107      	bne.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0ce:	f107 0318 	add.w	r3, r7, #24
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 faa4 	bl	800b620 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0dc:	e281      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0e2:	e27e      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0e4:	4b6d      	ldr	r3, [pc, #436]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0f0:	d107      	bne.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0f2:	f107 030c 	add.w	r3, r7, #12
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 fbe6 	bl	800b8c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b100:	e26f      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b102:	2300      	movs	r3, #0
 800b104:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b106:	e26c      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b108:	4b64      	ldr	r3, [pc, #400]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b10a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b10c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b110:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b112:	4b62      	ldr	r3, [pc, #392]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 0304 	and.w	r3, r3, #4
 800b11a:	2b04      	cmp	r3, #4
 800b11c:	d10c      	bne.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b120:	2b00      	cmp	r3, #0
 800b122:	d109      	bne.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b124:	4b5d      	ldr	r3, [pc, #372]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	08db      	lsrs	r3, r3, #3
 800b12a:	f003 0303 	and.w	r3, r3, #3
 800b12e:	4a5c      	ldr	r2, [pc, #368]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b130:	fa22 f303 	lsr.w	r3, r2, r3
 800b134:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b136:	e01e      	b.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b138:	4b58      	ldr	r3, [pc, #352]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b144:	d106      	bne.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b14c:	d102      	bne.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b14e:	4b55      	ldr	r3, [pc, #340]	; (800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b150:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b152:	e010      	b.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b154:	4b51      	ldr	r3, [pc, #324]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b15c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b160:	d106      	bne.n	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b168:	d102      	bne.n	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b16a:	4b4f      	ldr	r3, [pc, #316]	; (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b16c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b16e:	e002      	b.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b170:	2300      	movs	r3, #0
 800b172:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b174:	e235      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b176:	e234      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b178:	4b4c      	ldr	r3, [pc, #304]	; (800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b17c:	e231      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b182:	e22e      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b184:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b188:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b18c:	430b      	orrs	r3, r1
 800b18e:	f040 808f 	bne.w	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b192:	4b42      	ldr	r3, [pc, #264]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b196:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b19a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1a2:	d06b      	beq.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1aa:	d874      	bhi.n	800b296 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1b2:	d056      	beq.n	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1ba:	d86c      	bhi.n	800b296 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1c2:	d03b      	beq.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1ca:	d864      	bhi.n	800b296 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1d2:	d021      	beq.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1da:	d85c      	bhi.n	800b296 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d004      	beq.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1e8:	d004      	beq.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b1ea:	e054      	b.n	800b296 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b1ec:	f7fe fa4c 	bl	8009688 <HAL_RCC_GetPCLK1Freq>
 800b1f0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1f2:	e1f6      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1f4:	4b29      	ldr	r3, [pc, #164]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b200:	d107      	bne.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b202:	f107 0318 	add.w	r3, r7, #24
 800b206:	4618      	mov	r0, r3
 800b208:	f000 fa0a 	bl	800b620 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b210:	e1e7      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b212:	2300      	movs	r3, #0
 800b214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b216:	e1e4      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b218:	4b20      	ldr	r3, [pc, #128]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b224:	d107      	bne.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b226:	f107 030c 	add.w	r3, r7, #12
 800b22a:	4618      	mov	r0, r3
 800b22c:	f000 fb4c 	bl	800b8c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b234:	e1d5      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b23a:	e1d2      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b23c:	4b17      	ldr	r3, [pc, #92]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f003 0304 	and.w	r3, r3, #4
 800b244:	2b04      	cmp	r3, #4
 800b246:	d109      	bne.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b248:	4b14      	ldr	r3, [pc, #80]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	08db      	lsrs	r3, r3, #3
 800b24e:	f003 0303 	and.w	r3, r3, #3
 800b252:	4a13      	ldr	r2, [pc, #76]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b254:	fa22 f303 	lsr.w	r3, r2, r3
 800b258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b25a:	e1c2      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b25c:	2300      	movs	r3, #0
 800b25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b260:	e1bf      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b262:	4b0e      	ldr	r3, [pc, #56]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b26a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b26e:	d102      	bne.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b270:	4b0c      	ldr	r3, [pc, #48]	; (800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b274:	e1b5      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b276:	2300      	movs	r3, #0
 800b278:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b27a:	e1b2      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b27c:	4b07      	ldr	r3, [pc, #28]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b288:	d102      	bne.n	800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b28a:	4b07      	ldr	r3, [pc, #28]	; (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b28e:	e1a8      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b290:	2300      	movs	r3, #0
 800b292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b294:	e1a5      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b29a:	e1a2      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b29c:	58024400 	.word	0x58024400
 800b2a0:	03d09000 	.word	0x03d09000
 800b2a4:	003d0900 	.word	0x003d0900
 800b2a8:	017d7840 	.word	0x017d7840
 800b2ac:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b2b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2b4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b2b8:	430b      	orrs	r3, r1
 800b2ba:	d173      	bne.n	800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b2bc:	4b9c      	ldr	r3, [pc, #624]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b2c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2cc:	d02f      	beq.n	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2d4:	d863      	bhi.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d004      	beq.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2e2:	d012      	beq.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b2e4:	e05b      	b.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2e6:	4b92      	ldr	r3, [pc, #584]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2f2:	d107      	bne.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2f4:	f107 0318 	add.w	r3, r7, #24
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 f991 	bl	800b620 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b302:	e16e      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b308:	e16b      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b30a:	4b89      	ldr	r3, [pc, #548]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b316:	d107      	bne.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b318:	f107 030c 	add.w	r3, r7, #12
 800b31c:	4618      	mov	r0, r3
 800b31e:	f000 fad3 	bl	800b8c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b326:	e15c      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b328:	2300      	movs	r3, #0
 800b32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b32c:	e159      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b32e:	4b80      	ldr	r3, [pc, #512]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b332:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b336:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b338:	4b7d      	ldr	r3, [pc, #500]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 0304 	and.w	r3, r3, #4
 800b340:	2b04      	cmp	r3, #4
 800b342:	d10c      	bne.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b346:	2b00      	cmp	r3, #0
 800b348:	d109      	bne.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b34a:	4b79      	ldr	r3, [pc, #484]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	08db      	lsrs	r3, r3, #3
 800b350:	f003 0303 	and.w	r3, r3, #3
 800b354:	4a77      	ldr	r2, [pc, #476]	; (800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b356:	fa22 f303 	lsr.w	r3, r2, r3
 800b35a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b35c:	e01e      	b.n	800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b35e:	4b74      	ldr	r3, [pc, #464]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b36a:	d106      	bne.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b36e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b372:	d102      	bne.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b374:	4b70      	ldr	r3, [pc, #448]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b376:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b378:	e010      	b.n	800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b37a:	4b6d      	ldr	r3, [pc, #436]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b386:	d106      	bne.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b38e:	d102      	bne.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b390:	4b6a      	ldr	r3, [pc, #424]	; (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b392:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b394:	e002      	b.n	800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b396:	2300      	movs	r3, #0
 800b398:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b39a:	e122      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b39c:	e121      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3a2:	e11e      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b3a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3a8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b3ac:	430b      	orrs	r3, r1
 800b3ae:	d133      	bne.n	800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b3b0:	4b5f      	ldr	r3, [pc, #380]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d004      	beq.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3c6:	d012      	beq.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b3c8:	e023      	b.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3ca:	4b59      	ldr	r3, [pc, #356]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3d6:	d107      	bne.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f000 fbc7 	bl	800bb70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3e6:	e0fc      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ec:	e0f9      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3ee:	4b50      	ldr	r3, [pc, #320]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3fa:	d107      	bne.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3fc:	f107 0318 	add.w	r3, r7, #24
 800b400:	4618      	mov	r0, r3
 800b402:	f000 f90d 	bl	800b620 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b406:	6a3b      	ldr	r3, [r7, #32]
 800b408:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b40a:	e0ea      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b40c:	2300      	movs	r3, #0
 800b40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b410:	e0e7      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b412:	2300      	movs	r3, #0
 800b414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b416:	e0e4      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b41c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b420:	430b      	orrs	r3, r1
 800b422:	f040 808d 	bne.w	800b540 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b426:	4b42      	ldr	r3, [pc, #264]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b42a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b42e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b436:	d06b      	beq.n	800b510 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b43e:	d874      	bhi.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b446:	d056      	beq.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b44e:	d86c      	bhi.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b452:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b456:	d03b      	beq.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b45e:	d864      	bhi.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b466:	d021      	beq.n	800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b46e:	d85c      	bhi.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b472:	2b00      	cmp	r3, #0
 800b474:	d004      	beq.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b47c:	d004      	beq.n	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b47e:	e054      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b480:	f000 f8b8 	bl	800b5f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b484:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b486:	e0ac      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b488:	4b29      	ldr	r3, [pc, #164]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b494:	d107      	bne.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b496:	f107 0318 	add.w	r3, r7, #24
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 f8c0 	bl	800b620 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4a4:	e09d      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4aa:	e09a      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4ac:	4b20      	ldr	r3, [pc, #128]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4b8:	d107      	bne.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4ba:	f107 030c 	add.w	r3, r7, #12
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f000 fa02 	bl	800b8c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4c8:	e08b      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4ce:	e088      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b4d0:	4b17      	ldr	r3, [pc, #92]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0304 	and.w	r3, r3, #4
 800b4d8:	2b04      	cmp	r3, #4
 800b4da:	d109      	bne.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4dc:	4b14      	ldr	r3, [pc, #80]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	08db      	lsrs	r3, r3, #3
 800b4e2:	f003 0303 	and.w	r3, r3, #3
 800b4e6:	4a13      	ldr	r2, [pc, #76]	; (800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b4e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ee:	e078      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4f4:	e075      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b4f6:	4b0e      	ldr	r3, [pc, #56]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b502:	d102      	bne.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b504:	4b0c      	ldr	r3, [pc, #48]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b508:	e06b      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b50a:	2300      	movs	r3, #0
 800b50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b50e:	e068      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b510:	4b07      	ldr	r3, [pc, #28]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b51c:	d102      	bne.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b51e:	4b07      	ldr	r3, [pc, #28]	; (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b520:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b522:	e05e      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b524:	2300      	movs	r3, #0
 800b526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b528:	e05b      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b52e:	e058      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b530:	58024400 	.word	0x58024400
 800b534:	03d09000 	.word	0x03d09000
 800b538:	003d0900 	.word	0x003d0900
 800b53c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b540:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b544:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b548:	430b      	orrs	r3, r1
 800b54a:	d148      	bne.n	800b5de <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b54c:	4b27      	ldr	r3, [pc, #156]	; (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b550:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b554:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b55c:	d02a      	beq.n	800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b564:	d838      	bhi.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d004      	beq.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b572:	d00d      	beq.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b574:	e030      	b.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b576:	4b1d      	ldr	r3, [pc, #116]	; (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b57e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b582:	d102      	bne.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b584:	4b1a      	ldr	r3, [pc, #104]	; (800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b588:	e02b      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b58e:	e028      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b590:	4b16      	ldr	r3, [pc, #88]	; (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b598:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b59c:	d107      	bne.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b59e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f000 fae4 	bl	800bb70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5ac:	e019      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5b2:	e016      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5b4:	4b0d      	ldr	r3, [pc, #52]	; (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5c0:	d107      	bne.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5c2:	f107 0318 	add.w	r3, r7, #24
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 f82a 	bl	800b620 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5d0:	e007      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5d6:	e004      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5dc:	e001      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3740      	adds	r7, #64	; 0x40
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	58024400 	.word	0x58024400
 800b5f0:	017d7840 	.word	0x017d7840

0800b5f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b5f8:	f7fe f816 	bl	8009628 <HAL_RCC_GetHCLKFreq>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	4b06      	ldr	r3, [pc, #24]	; (800b618 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	091b      	lsrs	r3, r3, #4
 800b604:	f003 0307 	and.w	r3, r3, #7
 800b608:	4904      	ldr	r1, [pc, #16]	; (800b61c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b60a:	5ccb      	ldrb	r3, [r1, r3]
 800b60c:	f003 031f 	and.w	r3, r3, #31
 800b610:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b614:	4618      	mov	r0, r3
 800b616:	bd80      	pop	{r7, pc}
 800b618:	58024400 	.word	0x58024400
 800b61c:	08010f18 	.word	0x08010f18

0800b620 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b620:	b480      	push	{r7}
 800b622:	b089      	sub	sp, #36	; 0x24
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b628:	4ba1      	ldr	r3, [pc, #644]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62c:	f003 0303 	and.w	r3, r3, #3
 800b630:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b632:	4b9f      	ldr	r3, [pc, #636]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b636:	0b1b      	lsrs	r3, r3, #12
 800b638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b63c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b63e:	4b9c      	ldr	r3, [pc, #624]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b642:	091b      	lsrs	r3, r3, #4
 800b644:	f003 0301 	and.w	r3, r3, #1
 800b648:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b64a:	4b99      	ldr	r3, [pc, #612]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b64e:	08db      	lsrs	r3, r3, #3
 800b650:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b654:	693a      	ldr	r2, [r7, #16]
 800b656:	fb02 f303 	mul.w	r3, r2, r3
 800b65a:	ee07 3a90 	vmov	s15, r3
 800b65e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b662:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 8111 	beq.w	800b890 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	2b02      	cmp	r3, #2
 800b672:	f000 8083 	beq.w	800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	2b02      	cmp	r3, #2
 800b67a:	f200 80a1 	bhi.w	800b7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d003      	beq.n	800b68c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	2b01      	cmp	r3, #1
 800b688:	d056      	beq.n	800b738 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b68a:	e099      	b.n	800b7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b68c:	4b88      	ldr	r3, [pc, #544]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f003 0320 	and.w	r3, r3, #32
 800b694:	2b00      	cmp	r3, #0
 800b696:	d02d      	beq.n	800b6f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b698:	4b85      	ldr	r3, [pc, #532]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	08db      	lsrs	r3, r3, #3
 800b69e:	f003 0303 	and.w	r3, r3, #3
 800b6a2:	4a84      	ldr	r2, [pc, #528]	; (800b8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b6a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b6a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	ee07 3a90 	vmov	s15, r3
 800b6b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	ee07 3a90 	vmov	s15, r3
 800b6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6c2:	4b7b      	ldr	r3, [pc, #492]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ca:	ee07 3a90 	vmov	s15, r3
 800b6ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b6f2:	e087      	b.n	800b804 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	ee07 3a90 	vmov	s15, r3
 800b6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b8bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b706:	4b6a      	ldr	r3, [pc, #424]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b70e:	ee07 3a90 	vmov	s15, r3
 800b712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b716:	ed97 6a03 	vldr	s12, [r7, #12]
 800b71a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b71e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b72a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b72e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b736:	e065      	b.n	800b804 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	ee07 3a90 	vmov	s15, r3
 800b73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b742:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b74a:	4b59      	ldr	r3, [pc, #356]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b752:	ee07 3a90 	vmov	s15, r3
 800b756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b75a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b75e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b76a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b76e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b772:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b77a:	e043      	b.n	800b804 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	ee07 3a90 	vmov	s15, r3
 800b782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b786:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b8c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b78a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b78e:	4b48      	ldr	r3, [pc, #288]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b796:	ee07 3a90 	vmov	s15, r3
 800b79a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b79e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7be:	e021      	b.n	800b804 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	ee07 3a90 	vmov	s15, r3
 800b7c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b7ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7d2:	4b37      	ldr	r3, [pc, #220]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7da:	ee07 3a90 	vmov	s15, r3
 800b7de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b802:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b804:	4b2a      	ldr	r3, [pc, #168]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b808:	0a5b      	lsrs	r3, r3, #9
 800b80a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b80e:	ee07 3a90 	vmov	s15, r3
 800b812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b81a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b81e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b82a:	ee17 2a90 	vmov	r2, s15
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b832:	4b1f      	ldr	r3, [pc, #124]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b836:	0c1b      	lsrs	r3, r3, #16
 800b838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b83c:	ee07 3a90 	vmov	s15, r3
 800b840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b844:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b848:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b84c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b858:	ee17 2a90 	vmov	r2, s15
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b860:	4b13      	ldr	r3, [pc, #76]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b864:	0e1b      	lsrs	r3, r3, #24
 800b866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b86a:	ee07 3a90 	vmov	s15, r3
 800b86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b87a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b87e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b886:	ee17 2a90 	vmov	r2, s15
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b88e:	e008      	b.n	800b8a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	609a      	str	r2, [r3, #8]
}
 800b8a2:	bf00      	nop
 800b8a4:	3724      	adds	r7, #36	; 0x24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	58024400 	.word	0x58024400
 800b8b4:	03d09000 	.word	0x03d09000
 800b8b8:	46000000 	.word	0x46000000
 800b8bc:	4c742400 	.word	0x4c742400
 800b8c0:	4a742400 	.word	0x4a742400
 800b8c4:	4bbebc20 	.word	0x4bbebc20

0800b8c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b089      	sub	sp, #36	; 0x24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8d0:	4ba1      	ldr	r3, [pc, #644]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d4:	f003 0303 	and.w	r3, r3, #3
 800b8d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b8da:	4b9f      	ldr	r3, [pc, #636]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8de:	0d1b      	lsrs	r3, r3, #20
 800b8e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b8e6:	4b9c      	ldr	r3, [pc, #624]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ea:	0a1b      	lsrs	r3, r3, #8
 800b8ec:	f003 0301 	and.w	r3, r3, #1
 800b8f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b8f2:	4b99      	ldr	r3, [pc, #612]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8f6:	08db      	lsrs	r3, r3, #3
 800b8f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8fc:	693a      	ldr	r2, [r7, #16]
 800b8fe:	fb02 f303 	mul.w	r3, r2, r3
 800b902:	ee07 3a90 	vmov	s15, r3
 800b906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b90a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	2b00      	cmp	r3, #0
 800b912:	f000 8111 	beq.w	800bb38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	2b02      	cmp	r3, #2
 800b91a:	f000 8083 	beq.w	800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	2b02      	cmp	r3, #2
 800b922:	f200 80a1 	bhi.w	800ba68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d003      	beq.n	800b934 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d056      	beq.n	800b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b932:	e099      	b.n	800ba68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b934:	4b88      	ldr	r3, [pc, #544]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 0320 	and.w	r3, r3, #32
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d02d      	beq.n	800b99c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b940:	4b85      	ldr	r3, [pc, #532]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	08db      	lsrs	r3, r3, #3
 800b946:	f003 0303 	and.w	r3, r3, #3
 800b94a:	4a84      	ldr	r2, [pc, #528]	; (800bb5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b94c:	fa22 f303 	lsr.w	r3, r2, r3
 800b950:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	ee07 3a90 	vmov	s15, r3
 800b958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	ee07 3a90 	vmov	s15, r3
 800b962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b96a:	4b7b      	ldr	r3, [pc, #492]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b972:	ee07 3a90 	vmov	s15, r3
 800b976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b97a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b97e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bb60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b98a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b98e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b992:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b996:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b99a:	e087      	b.n	800baac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	ee07 3a90 	vmov	s15, r3
 800b9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bb64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b9aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9ae:	4b6a      	ldr	r3, [pc, #424]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9b6:	ee07 3a90 	vmov	s15, r3
 800b9ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bb60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9de:	e065      	b.n	800baac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	ee07 3a90 	vmov	s15, r3
 800b9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bb68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b9ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9f2:	4b59      	ldr	r3, [pc, #356]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9fa:	ee07 3a90 	vmov	s15, r3
 800b9fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba06:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bb60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba22:	e043      	b.n	800baac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	ee07 3a90 	vmov	s15, r3
 800ba2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bb6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ba32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba36:	4b48      	ldr	r3, [pc, #288]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba3e:	ee07 3a90 	vmov	s15, r3
 800ba42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba46:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bb60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba66:	e021      	b.n	800baac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	ee07 3a90 	vmov	s15, r3
 800ba6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bb68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba7a:	4b37      	ldr	r3, [pc, #220]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba82:	ee07 3a90 	vmov	s15, r3
 800ba86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bb60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800baaa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800baac:	4b2a      	ldr	r3, [pc, #168]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab0:	0a5b      	lsrs	r3, r3, #9
 800bab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bab6:	ee07 3a90 	vmov	s15, r3
 800baba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800babe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bac2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bac6:	edd7 6a07 	vldr	s13, [r7, #28]
 800baca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bad2:	ee17 2a90 	vmov	r2, s15
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bada:	4b1f      	ldr	r3, [pc, #124]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800badc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bade:	0c1b      	lsrs	r3, r3, #16
 800bae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bae4:	ee07 3a90 	vmov	s15, r3
 800bae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800baf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800baf4:	edd7 6a07 	vldr	s13, [r7, #28]
 800baf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bafc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb00:	ee17 2a90 	vmov	r2, s15
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bb08:	4b13      	ldr	r3, [pc, #76]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0c:	0e1b      	lsrs	r3, r3, #24
 800bb0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb12:	ee07 3a90 	vmov	s15, r3
 800bb16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb22:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb2e:	ee17 2a90 	vmov	r2, s15
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bb36:	e008      	b.n	800bb4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	609a      	str	r2, [r3, #8]
}
 800bb4a:	bf00      	nop
 800bb4c:	3724      	adds	r7, #36	; 0x24
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop
 800bb58:	58024400 	.word	0x58024400
 800bb5c:	03d09000 	.word	0x03d09000
 800bb60:	46000000 	.word	0x46000000
 800bb64:	4c742400 	.word	0x4c742400
 800bb68:	4a742400 	.word	0x4a742400
 800bb6c:	4bbebc20 	.word	0x4bbebc20

0800bb70 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b089      	sub	sp, #36	; 0x24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb78:	4ba0      	ldr	r3, [pc, #640]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb7c:	f003 0303 	and.w	r3, r3, #3
 800bb80:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bb82:	4b9e      	ldr	r3, [pc, #632]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb86:	091b      	lsrs	r3, r3, #4
 800bb88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb8c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bb8e:	4b9b      	ldr	r3, [pc, #620]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb92:	f003 0301 	and.w	r3, r3, #1
 800bb96:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bb98:	4b98      	ldr	r3, [pc, #608]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb9c:	08db      	lsrs	r3, r3, #3
 800bb9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bba2:	693a      	ldr	r2, [r7, #16]
 800bba4:	fb02 f303 	mul.w	r3, r2, r3
 800bba8:	ee07 3a90 	vmov	s15, r3
 800bbac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbb0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 8111 	beq.w	800bdde <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	f000 8083 	beq.w	800bcca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	f200 80a1 	bhi.w	800bd0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d003      	beq.n	800bbda <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d056      	beq.n	800bc86 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bbd8:	e099      	b.n	800bd0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbda:	4b88      	ldr	r3, [pc, #544]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f003 0320 	and.w	r3, r3, #32
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d02d      	beq.n	800bc42 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbe6:	4b85      	ldr	r3, [pc, #532]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	08db      	lsrs	r3, r3, #3
 800bbec:	f003 0303 	and.w	r3, r3, #3
 800bbf0:	4a83      	ldr	r2, [pc, #524]	; (800be00 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bbf2:	fa22 f303 	lsr.w	r3, r2, r3
 800bbf6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	ee07 3a90 	vmov	s15, r3
 800bbfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	ee07 3a90 	vmov	s15, r3
 800bc08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc10:	4b7a      	ldr	r3, [pc, #488]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc18:	ee07 3a90 	vmov	s15, r3
 800bc1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc20:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc24:	eddf 5a77 	vldr	s11, [pc, #476]	; 800be04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc3c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc40:	e087      	b.n	800bd52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	ee07 3a90 	vmov	s15, r3
 800bc48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc4c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800be08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bc50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc54:	4b69      	ldr	r3, [pc, #420]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc5c:	ee07 3a90 	vmov	s15, r3
 800bc60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc64:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc68:	eddf 5a66 	vldr	s11, [pc, #408]	; 800be04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc84:	e065      	b.n	800bd52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	ee07 3a90 	vmov	s15, r3
 800bc8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc90:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800be0c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bc94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc98:	4b58      	ldr	r3, [pc, #352]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca0:	ee07 3a90 	vmov	s15, r3
 800bca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bca8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcac:	eddf 5a55 	vldr	s11, [pc, #340]	; 800be04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcc8:	e043      	b.n	800bd52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	ee07 3a90 	vmov	s15, r3
 800bcd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800be10 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bcd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcdc:	4b47      	ldr	r3, [pc, #284]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bce4:	ee07 3a90 	vmov	s15, r3
 800bce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcec:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcf0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800be04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd0c:	e021      	b.n	800bd52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	ee07 3a90 	vmov	s15, r3
 800bd14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd18:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800be08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd20:	4b36      	ldr	r3, [pc, #216]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd28:	ee07 3a90 	vmov	s15, r3
 800bd2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd30:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd34:	eddf 5a33 	vldr	s11, [pc, #204]	; 800be04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd50:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bd52:	4b2a      	ldr	r3, [pc, #168]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd56:	0a5b      	lsrs	r3, r3, #9
 800bd58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd5c:	ee07 3a90 	vmov	s15, r3
 800bd60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd78:	ee17 2a90 	vmov	r2, s15
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bd80:	4b1e      	ldr	r3, [pc, #120]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd84:	0c1b      	lsrs	r3, r3, #16
 800bd86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd8a:	ee07 3a90 	vmov	s15, r3
 800bd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bda2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bda6:	ee17 2a90 	vmov	r2, s15
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bdae:	4b13      	ldr	r3, [pc, #76]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb2:	0e1b      	lsrs	r3, r3, #24
 800bdb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdb8:	ee07 3a90 	vmov	s15, r3
 800bdbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdd4:	ee17 2a90 	vmov	r2, s15
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bddc:	e008      	b.n	800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	609a      	str	r2, [r3, #8]
}
 800bdf0:	bf00      	nop
 800bdf2:	3724      	adds	r7, #36	; 0x24
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	58024400 	.word	0x58024400
 800be00:	03d09000 	.word	0x03d09000
 800be04:	46000000 	.word	0x46000000
 800be08:	4c742400 	.word	0x4c742400
 800be0c:	4a742400 	.word	0x4a742400
 800be10:	4bbebc20 	.word	0x4bbebc20

0800be14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be22:	4b53      	ldr	r3, [pc, #332]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800be24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be26:	f003 0303 	and.w	r3, r3, #3
 800be2a:	2b03      	cmp	r3, #3
 800be2c:	d101      	bne.n	800be32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e099      	b.n	800bf66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800be32:	4b4f      	ldr	r3, [pc, #316]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a4e      	ldr	r2, [pc, #312]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800be38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be3e:	f7f6 fcf1 	bl	8002824 <HAL_GetTick>
 800be42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be44:	e008      	b.n	800be58 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be46:	f7f6 fced 	bl	8002824 <HAL_GetTick>
 800be4a:	4602      	mov	r2, r0
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	1ad3      	subs	r3, r2, r3
 800be50:	2b02      	cmp	r3, #2
 800be52:	d901      	bls.n	800be58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be54:	2303      	movs	r3, #3
 800be56:	e086      	b.n	800bf66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be58:	4b45      	ldr	r3, [pc, #276]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1f0      	bne.n	800be46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800be64:	4b42      	ldr	r3, [pc, #264]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800be66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	031b      	lsls	r3, r3, #12
 800be72:	493f      	ldr	r1, [pc, #252]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800be74:	4313      	orrs	r3, r2
 800be76:	628b      	str	r3, [r1, #40]	; 0x28
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	3b01      	subs	r3, #1
 800be7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	3b01      	subs	r3, #1
 800be88:	025b      	lsls	r3, r3, #9
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	431a      	orrs	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	3b01      	subs	r3, #1
 800be94:	041b      	lsls	r3, r3, #16
 800be96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be9a:	431a      	orrs	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	691b      	ldr	r3, [r3, #16]
 800bea0:	3b01      	subs	r3, #1
 800bea2:	061b      	lsls	r3, r3, #24
 800bea4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bea8:	4931      	ldr	r1, [pc, #196]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800beaa:	4313      	orrs	r3, r2
 800beac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800beae:	4b30      	ldr	r3, [pc, #192]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800beb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	695b      	ldr	r3, [r3, #20]
 800beba:	492d      	ldr	r1, [pc, #180]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bebc:	4313      	orrs	r3, r2
 800bebe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bec0:	4b2b      	ldr	r3, [pc, #172]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec4:	f023 0220 	bic.w	r2, r3, #32
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	4928      	ldr	r1, [pc, #160]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bece:	4313      	orrs	r3, r2
 800bed0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bed2:	4b27      	ldr	r3, [pc, #156]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed6:	4a26      	ldr	r2, [pc, #152]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bed8:	f023 0310 	bic.w	r3, r3, #16
 800bedc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bede:	4b24      	ldr	r3, [pc, #144]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bee2:	4b24      	ldr	r3, [pc, #144]	; (800bf74 <RCCEx_PLL2_Config+0x160>)
 800bee4:	4013      	ands	r3, r2
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	69d2      	ldr	r2, [r2, #28]
 800beea:	00d2      	lsls	r2, r2, #3
 800beec:	4920      	ldr	r1, [pc, #128]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800beee:	4313      	orrs	r3, r2
 800bef0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bef2:	4b1f      	ldr	r3, [pc, #124]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef6:	4a1e      	ldr	r2, [pc, #120]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bef8:	f043 0310 	orr.w	r3, r3, #16
 800befc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d106      	bne.n	800bf12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bf04:	4b1a      	ldr	r3, [pc, #104]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf08:	4a19      	ldr	r2, [pc, #100]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bf0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf10:	e00f      	b.n	800bf32 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d106      	bne.n	800bf26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bf18:	4b15      	ldr	r3, [pc, #84]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1c:	4a14      	ldr	r2, [pc, #80]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bf1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf22:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf24:	e005      	b.n	800bf32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bf26:	4b12      	ldr	r3, [pc, #72]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bf28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2a:	4a11      	ldr	r2, [pc, #68]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bf2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bf30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bf32:	4b0f      	ldr	r3, [pc, #60]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a0e      	ldr	r2, [pc, #56]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bf38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf3e:	f7f6 fc71 	bl	8002824 <HAL_GetTick>
 800bf42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf44:	e008      	b.n	800bf58 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bf46:	f7f6 fc6d 	bl	8002824 <HAL_GetTick>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	1ad3      	subs	r3, r2, r3
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	d901      	bls.n	800bf58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf54:	2303      	movs	r3, #3
 800bf56:	e006      	b.n	800bf66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf58:	4b05      	ldr	r3, [pc, #20]	; (800bf70 <RCCEx_PLL2_Config+0x15c>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d0f0      	beq.n	800bf46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bf64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	58024400 	.word	0x58024400
 800bf74:	ffff0007 	.word	0xffff0007

0800bf78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf86:	4b53      	ldr	r3, [pc, #332]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800bf88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf8a:	f003 0303 	and.w	r3, r3, #3
 800bf8e:	2b03      	cmp	r3, #3
 800bf90:	d101      	bne.n	800bf96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	e099      	b.n	800c0ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bf96:	4b4f      	ldr	r3, [pc, #316]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a4e      	ldr	r2, [pc, #312]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800bf9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfa2:	f7f6 fc3f 	bl	8002824 <HAL_GetTick>
 800bfa6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bfa8:	e008      	b.n	800bfbc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bfaa:	f7f6 fc3b 	bl	8002824 <HAL_GetTick>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	1ad3      	subs	r3, r2, r3
 800bfb4:	2b02      	cmp	r3, #2
 800bfb6:	d901      	bls.n	800bfbc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bfb8:	2303      	movs	r3, #3
 800bfba:	e086      	b.n	800c0ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bfbc:	4b45      	ldr	r3, [pc, #276]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1f0      	bne.n	800bfaa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bfc8:	4b42      	ldr	r3, [pc, #264]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800bfca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfcc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	051b      	lsls	r3, r3, #20
 800bfd6:	493f      	ldr	r1, [pc, #252]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	628b      	str	r3, [r1, #40]	; 0x28
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	3b01      	subs	r3, #1
 800bfec:	025b      	lsls	r3, r3, #9
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	431a      	orrs	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	3b01      	subs	r3, #1
 800bff8:	041b      	lsls	r3, r3, #16
 800bffa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bffe:	431a      	orrs	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	3b01      	subs	r3, #1
 800c006:	061b      	lsls	r3, r3, #24
 800c008:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c00c:	4931      	ldr	r1, [pc, #196]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c00e:	4313      	orrs	r3, r2
 800c010:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c012:	4b30      	ldr	r3, [pc, #192]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c016:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	695b      	ldr	r3, [r3, #20]
 800c01e:	492d      	ldr	r1, [pc, #180]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c020:	4313      	orrs	r3, r2
 800c022:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c024:	4b2b      	ldr	r3, [pc, #172]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c028:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	699b      	ldr	r3, [r3, #24]
 800c030:	4928      	ldr	r1, [pc, #160]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c032:	4313      	orrs	r3, r2
 800c034:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c036:	4b27      	ldr	r3, [pc, #156]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03a:	4a26      	ldr	r2, [pc, #152]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c03c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c040:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c042:	4b24      	ldr	r3, [pc, #144]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c046:	4b24      	ldr	r3, [pc, #144]	; (800c0d8 <RCCEx_PLL3_Config+0x160>)
 800c048:	4013      	ands	r3, r2
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	69d2      	ldr	r2, [r2, #28]
 800c04e:	00d2      	lsls	r2, r2, #3
 800c050:	4920      	ldr	r1, [pc, #128]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c052:	4313      	orrs	r3, r2
 800c054:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c056:	4b1f      	ldr	r3, [pc, #124]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05a:	4a1e      	ldr	r2, [pc, #120]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c05c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c060:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d106      	bne.n	800c076 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c068:	4b1a      	ldr	r3, [pc, #104]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06c:	4a19      	ldr	r2, [pc, #100]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c06e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c072:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c074:	e00f      	b.n	800c096 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d106      	bne.n	800c08a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c07c:	4b15      	ldr	r3, [pc, #84]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c080:	4a14      	ldr	r2, [pc, #80]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c082:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c086:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c088:	e005      	b.n	800c096 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c08a:	4b12      	ldr	r3, [pc, #72]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08e:	4a11      	ldr	r2, [pc, #68]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c094:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c096:	4b0f      	ldr	r3, [pc, #60]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a0e      	ldr	r2, [pc, #56]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c09c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0a2:	f7f6 fbbf 	bl	8002824 <HAL_GetTick>
 800c0a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c0a8:	e008      	b.n	800c0bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c0aa:	f7f6 fbbb 	bl	8002824 <HAL_GetTick>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	2b02      	cmp	r3, #2
 800c0b6:	d901      	bls.n	800c0bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	e006      	b.n	800c0ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c0bc:	4b05      	ldr	r3, [pc, #20]	; (800c0d4 <RCCEx_PLL3_Config+0x15c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d0f0      	beq.n	800c0aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	58024400 	.word	0x58024400
 800c0d8:	ffff0007 	.word	0xffff0007

0800c0dc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d101      	bne.n	800c0ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e10f      	b.n	800c30e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a87      	ldr	r2, [pc, #540]	; (800c318 <HAL_SPI_Init+0x23c>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d00f      	beq.n	800c11e <HAL_SPI_Init+0x42>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a86      	ldr	r2, [pc, #536]	; (800c31c <HAL_SPI_Init+0x240>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d00a      	beq.n	800c11e <HAL_SPI_Init+0x42>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a84      	ldr	r2, [pc, #528]	; (800c320 <HAL_SPI_Init+0x244>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d005      	beq.n	800c11e <HAL_SPI_Init+0x42>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	2b0f      	cmp	r3, #15
 800c118:	d901      	bls.n	800c11e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
 800c11c:	e0f7      	b.n	800c30e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fc12 	bl	800c948 <SPI_GetPacketSize>
 800c124:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a7b      	ldr	r2, [pc, #492]	; (800c318 <HAL_SPI_Init+0x23c>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d00c      	beq.n	800c14a <HAL_SPI_Init+0x6e>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a79      	ldr	r2, [pc, #484]	; (800c31c <HAL_SPI_Init+0x240>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d007      	beq.n	800c14a <HAL_SPI_Init+0x6e>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a78      	ldr	r2, [pc, #480]	; (800c320 <HAL_SPI_Init+0x244>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d002      	beq.n	800c14a <HAL_SPI_Init+0x6e>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b08      	cmp	r3, #8
 800c148:	d811      	bhi.n	800c16e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c14e:	4a72      	ldr	r2, [pc, #456]	; (800c318 <HAL_SPI_Init+0x23c>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d009      	beq.n	800c168 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a70      	ldr	r2, [pc, #448]	; (800c31c <HAL_SPI_Init+0x240>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d004      	beq.n	800c168 <HAL_SPI_Init+0x8c>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a6f      	ldr	r2, [pc, #444]	; (800c320 <HAL_SPI_Init+0x244>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d104      	bne.n	800c172 <HAL_SPI_Init+0x96>
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b10      	cmp	r3, #16
 800c16c:	d901      	bls.n	800c172 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e0cd      	b.n	800c30e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d106      	bne.n	800c18c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7f5 ff68 	bl	800205c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2202      	movs	r2, #2
 800c190:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f022 0201 	bic.w	r2, r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c1ae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1b8:	d119      	bne.n	800c1ee <HAL_SPI_Init+0x112>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1c2:	d103      	bne.n	800c1cc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d008      	beq.n	800c1de <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d10c      	bne.n	800c1ee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c1d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1dc:	d107      	bne.n	800c1ee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c1ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00f      	beq.n	800c21a <HAL_SPI_Init+0x13e>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	2b06      	cmp	r3, #6
 800c200:	d90b      	bls.n	800c21a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	430a      	orrs	r2, r1
 800c216:	601a      	str	r2, [r3, #0]
 800c218:	e007      	b.n	800c22a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c228:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	69da      	ldr	r2, [r3, #28]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c232:	431a      	orrs	r2, r3
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	431a      	orrs	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c23c:	ea42 0103 	orr.w	r1, r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	68da      	ldr	r2, [r3, #12]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	430a      	orrs	r2, r1
 800c24a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c254:	431a      	orrs	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25a:	431a      	orrs	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	699b      	ldr	r3, [r3, #24]
 800c260:	431a      	orrs	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	431a      	orrs	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	695b      	ldr	r3, [r3, #20]
 800c26c:	431a      	orrs	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a1b      	ldr	r3, [r3, #32]
 800c272:	431a      	orrs	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	431a      	orrs	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c27e:	431a      	orrs	r2, r3
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	431a      	orrs	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c28a:	ea42 0103 	orr.w	r1, r2, r3
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	430a      	orrs	r2, r1
 800c298:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d113      	bne.n	800c2ca <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	689b      	ldr	r3, [r3, #8]
 800c2a8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2b4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c2c8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f022 0201 	bic.w	r2, r2, #1
 800c2d8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00a      	beq.n	800c2fc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	430a      	orrs	r2, r1
 800c2fa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	40013000 	.word	0x40013000
 800c31c:	40003800 	.word	0x40003800
 800c320:	40003c00 	.word	0x40003c00

0800c324 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b088      	sub	sp, #32
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	603b      	str	r3, [r7, #0]
 800c330:	4613      	mov	r3, r2
 800c332:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c338:	095b      	lsrs	r3, r3, #5
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	3301      	adds	r3, #1
 800c33e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	3330      	adds	r3, #48	; 0x30
 800c346:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c348:	f7f6 fa6c 	bl	8002824 <HAL_GetTick>
 800c34c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c354:	b2db      	uxtb	r3, r3
 800c356:	2b01      	cmp	r3, #1
 800c358:	d001      	beq.n	800c35e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c35a:	2302      	movs	r3, #2
 800c35c:	e250      	b.n	800c800 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d002      	beq.n	800c36a <HAL_SPI_Receive+0x46>
 800c364:	88fb      	ldrh	r3, [r7, #6]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d101      	bne.n	800c36e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c36a:	2301      	movs	r3, #1
 800c36c:	e248      	b.n	800c800 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c374:	2b01      	cmp	r3, #1
 800c376:	d101      	bne.n	800c37c <HAL_SPI_Receive+0x58>
 800c378:	2302      	movs	r3, #2
 800c37a:	e241      	b.n	800c800 <HAL_SPI_Receive+0x4dc>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2201      	movs	r2, #1
 800c380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2204      	movs	r2, #4
 800c388:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	68ba      	ldr	r2, [r7, #8]
 800c398:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	88fa      	ldrh	r2, [r7, #6]
 800c39e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	88fa      	ldrh	r2, [r7, #6]
 800c3a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c3d4:	d108      	bne.n	800c3e8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c3e4:	601a      	str	r2, [r3, #0]
 800c3e6:	e009      	b.n	800c3fc <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c3fa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	685a      	ldr	r2, [r3, #4]
 800c402:	4b95      	ldr	r3, [pc, #596]	; (800c658 <HAL_SPI_Receive+0x334>)
 800c404:	4013      	ands	r3, r2
 800c406:	88f9      	ldrh	r1, [r7, #6]
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	6812      	ldr	r2, [r2, #0]
 800c40c:	430b      	orrs	r3, r1
 800c40e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f042 0201 	orr.w	r2, r2, #1
 800c41e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c428:	d107      	bne.n	800c43a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c438:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	2b0f      	cmp	r3, #15
 800c440:	d96c      	bls.n	800c51c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c442:	e064      	b.n	800c50e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	695b      	ldr	r3, [r3, #20]
 800c44a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	f003 0301 	and.w	r3, r3, #1
 800c456:	2b01      	cmp	r3, #1
 800c458:	d114      	bne.n	800c484 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c462:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c464:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c46a:	1d1a      	adds	r2, r3, #4
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c476:	b29b      	uxth	r3, r3
 800c478:	3b01      	subs	r3, #1
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c482:	e044      	b.n	800c50e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	8bfa      	ldrh	r2, [r7, #30]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d919      	bls.n	800c4c6 <HAL_SPI_Receive+0x1a2>
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d014      	beq.n	800c4c6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c4a6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4ac:	1d1a      	adds	r2, r3, #4
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c4c4:	e023      	b.n	800c50e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4c6:	f7f6 f9ad 	bl	8002824 <HAL_GetTick>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	1ad3      	subs	r3, r2, r3
 800c4d0:	683a      	ldr	r2, [r7, #0]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d803      	bhi.n	800c4de <HAL_SPI_Receive+0x1ba>
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4dc:	d102      	bne.n	800c4e4 <HAL_SPI_Receive+0x1c0>
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d114      	bne.n	800c50e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f000 f98f 	bl	800c808 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2200      	movs	r2, #0
 800c506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c50a:	2303      	movs	r3, #3
 800c50c:	e178      	b.n	800c800 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c514:	b29b      	uxth	r3, r3
 800c516:	2b00      	cmp	r3, #0
 800c518:	d194      	bne.n	800c444 <HAL_SPI_Receive+0x120>
 800c51a:	e15e      	b.n	800c7da <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	2b07      	cmp	r3, #7
 800c522:	f240 8153 	bls.w	800c7cc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c526:	e08f      	b.n	800c648 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	695b      	ldr	r3, [r3, #20]
 800c52e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	695b      	ldr	r3, [r3, #20]
 800c536:	f003 0301 	and.w	r3, r3, #1
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d114      	bne.n	800c568 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c542:	69ba      	ldr	r2, [r7, #24]
 800c544:	8812      	ldrh	r2, [r2, #0]
 800c546:	b292      	uxth	r2, r2
 800c548:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c54e:	1c9a      	adds	r2, r3, #2
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	3b01      	subs	r3, #1
 800c55e:	b29a      	uxth	r2, r3
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c566:	e06f      	b.n	800c648 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c56e:	b29b      	uxth	r3, r3
 800c570:	8bfa      	ldrh	r2, [r7, #30]
 800c572:	429a      	cmp	r2, r3
 800c574:	d924      	bls.n	800c5c0 <HAL_SPI_Receive+0x29c>
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d01f      	beq.n	800c5c0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c584:	69ba      	ldr	r2, [r7, #24]
 800c586:	8812      	ldrh	r2, [r2, #0]
 800c588:	b292      	uxth	r2, r2
 800c58a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c590:	1c9a      	adds	r2, r3, #2
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c59a:	69ba      	ldr	r2, [r7, #24]
 800c59c:	8812      	ldrh	r2, [r2, #0]
 800c59e:	b292      	uxth	r2, r2
 800c5a0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5a6:	1c9a      	adds	r2, r3, #2
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	3b02      	subs	r3, #2
 800c5b6:	b29a      	uxth	r2, r3
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c5be:	e043      	b.n	800c648 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d119      	bne.n	800c600 <HAL_SPI_Receive+0x2dc>
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d014      	beq.n	800c600 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5da:	69ba      	ldr	r2, [r7, #24]
 800c5dc:	8812      	ldrh	r2, [r2, #0]
 800c5de:	b292      	uxth	r2, r2
 800c5e0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5e6:	1c9a      	adds	r2, r3, #2
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	3b01      	subs	r3, #1
 800c5f6:	b29a      	uxth	r2, r3
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c5fe:	e023      	b.n	800c648 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c600:	f7f6 f910 	bl	8002824 <HAL_GetTick>
 800c604:	4602      	mov	r2, r0
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d803      	bhi.n	800c618 <HAL_SPI_Receive+0x2f4>
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c616:	d102      	bne.n	800c61e <HAL_SPI_Receive+0x2fa>
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d114      	bne.n	800c648 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c61e:	68f8      	ldr	r0, [r7, #12]
 800c620:	f000 f8f2 	bl	800c808 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c62a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2200      	movs	r2, #0
 800c640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c644:	2303      	movs	r3, #3
 800c646:	e0db      	b.n	800c800 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c64e:	b29b      	uxth	r3, r3
 800c650:	2b00      	cmp	r3, #0
 800c652:	f47f af69 	bne.w	800c528 <HAL_SPI_Receive+0x204>
 800c656:	e0c0      	b.n	800c7da <HAL_SPI_Receive+0x4b6>
 800c658:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	695b      	ldr	r3, [r3, #20]
 800c66a:	f003 0301 	and.w	r3, r3, #1
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d117      	bne.n	800c6a2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c67e:	7812      	ldrb	r2, [r2, #0]
 800c680:	b2d2      	uxtb	r2, r2
 800c682:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c688:	1c5a      	adds	r2, r3, #1
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c694:	b29b      	uxth	r3, r3
 800c696:	3b01      	subs	r3, #1
 800c698:	b29a      	uxth	r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c6a0:	e094      	b.n	800c7cc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	8bfa      	ldrh	r2, [r7, #30]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d946      	bls.n	800c73e <HAL_SPI_Receive+0x41a>
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d041      	beq.n	800c73e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6c6:	7812      	ldrb	r2, [r2, #0]
 800c6c8:	b2d2      	uxtb	r2, r2
 800c6ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6d0:	1c5a      	adds	r2, r3, #1
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6e2:	7812      	ldrb	r2, [r2, #0]
 800c6e4:	b2d2      	uxtb	r2, r2
 800c6e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6ec:	1c5a      	adds	r2, r3, #1
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6fe:	7812      	ldrb	r2, [r2, #0]
 800c700:	b2d2      	uxtb	r2, r2
 800c702:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c708:	1c5a      	adds	r2, r3, #1
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c71a:	7812      	ldrb	r2, [r2, #0]
 800c71c:	b2d2      	uxtb	r2, r2
 800c71e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c724:	1c5a      	adds	r2, r3, #1
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c730:	b29b      	uxth	r3, r3
 800c732:	3b04      	subs	r3, #4
 800c734:	b29a      	uxth	r2, r3
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c73c:	e046      	b.n	800c7cc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c744:	b29b      	uxth	r3, r3
 800c746:	2b03      	cmp	r3, #3
 800c748:	d81c      	bhi.n	800c784 <HAL_SPI_Receive+0x460>
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d017      	beq.n	800c784 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c760:	7812      	ldrb	r2, [r2, #0]
 800c762:	b2d2      	uxtb	r2, r2
 800c764:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c76a:	1c5a      	adds	r2, r3, #1
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c776:	b29b      	uxth	r3, r3
 800c778:	3b01      	subs	r3, #1
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c782:	e023      	b.n	800c7cc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c784:	f7f6 f84e 	bl	8002824 <HAL_GetTick>
 800c788:	4602      	mov	r2, r0
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	1ad3      	subs	r3, r2, r3
 800c78e:	683a      	ldr	r2, [r7, #0]
 800c790:	429a      	cmp	r2, r3
 800c792:	d803      	bhi.n	800c79c <HAL_SPI_Receive+0x478>
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c79a:	d102      	bne.n	800c7a2 <HAL_SPI_Receive+0x47e>
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d114      	bne.n	800c7cc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	f000 f830 	bl	800c808 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	e019      	b.n	800c800 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f47f af41 	bne.w	800c65c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c7da:	68f8      	ldr	r0, [r7, #12]
 800c7dc:	f000 f814 	bl	800c808 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d001      	beq.n	800c7fe <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e000      	b.n	800c800 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c7fe:	2300      	movs	r3, #0
  }
}
 800c800:	4618      	mov	r0, r3
 800c802:	3720      	adds	r7, #32
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	695b      	ldr	r3, [r3, #20]
 800c816:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	699a      	ldr	r2, [r3, #24]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f042 0208 	orr.w	r2, r2, #8
 800c826:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	699a      	ldr	r2, [r3, #24]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f042 0210 	orr.w	r2, r2, #16
 800c836:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f022 0201 	bic.w	r2, r2, #1
 800c846:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6919      	ldr	r1, [r3, #16]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	4b3c      	ldr	r3, [pc, #240]	; (800c944 <SPI_CloseTransfer+0x13c>)
 800c854:	400b      	ands	r3, r1
 800c856:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	689a      	ldr	r2, [r3, #8]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c866:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	2b04      	cmp	r3, #4
 800c872:	d014      	beq.n	800c89e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f003 0320 	and.w	r3, r3, #32
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00f      	beq.n	800c89e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c884:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	699a      	ldr	r2, [r3, #24]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f042 0220 	orr.w	r2, r2, #32
 800c89c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	2b03      	cmp	r3, #3
 800c8a8:	d014      	beq.n	800c8d4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00f      	beq.n	800c8d4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8ba:	f043 0204 	orr.w	r2, r3, #4
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	699a      	ldr	r2, [r3, #24]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d00f      	beq.n	800c8fe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8e4:	f043 0201 	orr.w	r2, r3, #1
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	699a      	ldr	r2, [r3, #24]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00f      	beq.n	800c928 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c90e:	f043 0208 	orr.w	r2, r3, #8
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	699a      	ldr	r2, [r3, #24]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c926:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c938:	bf00      	nop
 800c93a:	3714      	adds	r7, #20
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr
 800c944:	fffffc90 	.word	0xfffffc90

0800c948 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c954:	095b      	lsrs	r3, r3, #5
 800c956:	3301      	adds	r3, #1
 800c958:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	3301      	adds	r3, #1
 800c960:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	3307      	adds	r3, #7
 800c966:	08db      	lsrs	r3, r3, #3
 800c968:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c972:	4618      	mov	r0, r3
 800c974:	3714      	adds	r7, #20
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr

0800c97e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b082      	sub	sp, #8
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d101      	bne.n	800c990 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c98c:	2301      	movs	r3, #1
 800c98e:	e049      	b.n	800ca24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c996:	b2db      	uxtb	r3, r3
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d106      	bne.n	800c9aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7f5 fc4f 	bl	8002248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2202      	movs	r2, #2
 800c9ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	3304      	adds	r3, #4
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	4610      	mov	r0, r2
 800c9be:	f000 ffad 	bl	800d91c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2201      	movs	r2, #1
 800ca06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2201      	movs	r2, #1
 800ca16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d001      	beq.n	800ca44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ca40:	2301      	movs	r3, #1
 800ca42:	e04c      	b.n	800cade <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2202      	movs	r2, #2
 800ca48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a26      	ldr	r2, [pc, #152]	; (800caec <HAL_TIM_Base_Start+0xc0>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d022      	beq.n	800ca9c <HAL_TIM_Base_Start+0x70>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca5e:	d01d      	beq.n	800ca9c <HAL_TIM_Base_Start+0x70>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a22      	ldr	r2, [pc, #136]	; (800caf0 <HAL_TIM_Base_Start+0xc4>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d018      	beq.n	800ca9c <HAL_TIM_Base_Start+0x70>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a21      	ldr	r2, [pc, #132]	; (800caf4 <HAL_TIM_Base_Start+0xc8>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d013      	beq.n	800ca9c <HAL_TIM_Base_Start+0x70>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a1f      	ldr	r2, [pc, #124]	; (800caf8 <HAL_TIM_Base_Start+0xcc>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d00e      	beq.n	800ca9c <HAL_TIM_Base_Start+0x70>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a1e      	ldr	r2, [pc, #120]	; (800cafc <HAL_TIM_Base_Start+0xd0>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d009      	beq.n	800ca9c <HAL_TIM_Base_Start+0x70>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a1c      	ldr	r2, [pc, #112]	; (800cb00 <HAL_TIM_Base_Start+0xd4>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d004      	beq.n	800ca9c <HAL_TIM_Base_Start+0x70>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4a1b      	ldr	r2, [pc, #108]	; (800cb04 <HAL_TIM_Base_Start+0xd8>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d115      	bne.n	800cac8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	689a      	ldr	r2, [r3, #8]
 800caa2:	4b19      	ldr	r3, [pc, #100]	; (800cb08 <HAL_TIM_Base_Start+0xdc>)
 800caa4:	4013      	ands	r3, r2
 800caa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2b06      	cmp	r3, #6
 800caac:	d015      	beq.n	800cada <HAL_TIM_Base_Start+0xae>
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cab4:	d011      	beq.n	800cada <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f042 0201 	orr.w	r2, r2, #1
 800cac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cac6:	e008      	b.n	800cada <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f042 0201 	orr.w	r2, r2, #1
 800cad6:	601a      	str	r2, [r3, #0]
 800cad8:	e000      	b.n	800cadc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cada:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	40010000 	.word	0x40010000
 800caf0:	40000400 	.word	0x40000400
 800caf4:	40000800 	.word	0x40000800
 800caf8:	40000c00 	.word	0x40000c00
 800cafc:	40010400 	.word	0x40010400
 800cb00:	40001800 	.word	0x40001800
 800cb04:	40014000 	.word	0x40014000
 800cb08:	00010007 	.word	0x00010007

0800cb0c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	6a1a      	ldr	r2, [r3, #32]
 800cb1a:	f241 1311 	movw	r3, #4369	; 0x1111
 800cb1e:	4013      	ands	r3, r2
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10f      	bne.n	800cb44 <HAL_TIM_Base_Stop+0x38>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	6a1a      	ldr	r2, [r3, #32]
 800cb2a:	f240 4344 	movw	r3, #1092	; 0x444
 800cb2e:	4013      	ands	r3, r2
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d107      	bne.n	800cb44 <HAL_TIM_Base_Stop+0x38>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f022 0201 	bic.w	r2, r2, #1
 800cb42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2201      	movs	r2, #1
 800cb48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	370c      	adds	r7, #12
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr
	...

0800cb5c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb66:	2300      	movs	r3, #0
 800cb68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d109      	bne.n	800cb84 <HAL_TIM_OC_Start_IT+0x28>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	bf14      	ite	ne
 800cb7c:	2301      	movne	r3, #1
 800cb7e:	2300      	moveq	r3, #0
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	e03c      	b.n	800cbfe <HAL_TIM_OC_Start_IT+0xa2>
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	2b04      	cmp	r3, #4
 800cb88:	d109      	bne.n	800cb9e <HAL_TIM_OC_Start_IT+0x42>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	bf14      	ite	ne
 800cb96:	2301      	movne	r3, #1
 800cb98:	2300      	moveq	r3, #0
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	e02f      	b.n	800cbfe <HAL_TIM_OC_Start_IT+0xa2>
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	2b08      	cmp	r3, #8
 800cba2:	d109      	bne.n	800cbb8 <HAL_TIM_OC_Start_IT+0x5c>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	bf14      	ite	ne
 800cbb0:	2301      	movne	r3, #1
 800cbb2:	2300      	moveq	r3, #0
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	e022      	b.n	800cbfe <HAL_TIM_OC_Start_IT+0xa2>
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2b0c      	cmp	r3, #12
 800cbbc:	d109      	bne.n	800cbd2 <HAL_TIM_OC_Start_IT+0x76>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	bf14      	ite	ne
 800cbca:	2301      	movne	r3, #1
 800cbcc:	2300      	moveq	r3, #0
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	e015      	b.n	800cbfe <HAL_TIM_OC_Start_IT+0xa2>
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	2b10      	cmp	r3, #16
 800cbd6:	d109      	bne.n	800cbec <HAL_TIM_OC_Start_IT+0x90>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	bf14      	ite	ne
 800cbe4:	2301      	movne	r3, #1
 800cbe6:	2300      	moveq	r3, #0
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	e008      	b.n	800cbfe <HAL_TIM_OC_Start_IT+0xa2>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	bf14      	ite	ne
 800cbf8:	2301      	movne	r3, #1
 800cbfa:	2300      	moveq	r3, #0
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d001      	beq.n	800cc06 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	e0ec      	b.n	800cde0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d104      	bne.n	800cc16 <HAL_TIM_OC_Start_IT+0xba>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2202      	movs	r2, #2
 800cc10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cc14:	e023      	b.n	800cc5e <HAL_TIM_OC_Start_IT+0x102>
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	2b04      	cmp	r3, #4
 800cc1a:	d104      	bne.n	800cc26 <HAL_TIM_OC_Start_IT+0xca>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2202      	movs	r2, #2
 800cc20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cc24:	e01b      	b.n	800cc5e <HAL_TIM_OC_Start_IT+0x102>
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	2b08      	cmp	r3, #8
 800cc2a:	d104      	bne.n	800cc36 <HAL_TIM_OC_Start_IT+0xda>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2202      	movs	r2, #2
 800cc30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc34:	e013      	b.n	800cc5e <HAL_TIM_OC_Start_IT+0x102>
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	2b0c      	cmp	r3, #12
 800cc3a:	d104      	bne.n	800cc46 <HAL_TIM_OC_Start_IT+0xea>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2202      	movs	r2, #2
 800cc40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cc44:	e00b      	b.n	800cc5e <HAL_TIM_OC_Start_IT+0x102>
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	2b10      	cmp	r3, #16
 800cc4a:	d104      	bne.n	800cc56 <HAL_TIM_OC_Start_IT+0xfa>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2202      	movs	r2, #2
 800cc50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cc54:	e003      	b.n	800cc5e <HAL_TIM_OC_Start_IT+0x102>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2202      	movs	r2, #2
 800cc5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	2b0c      	cmp	r3, #12
 800cc62:	d841      	bhi.n	800cce8 <HAL_TIM_OC_Start_IT+0x18c>
 800cc64:	a201      	add	r2, pc, #4	; (adr r2, 800cc6c <HAL_TIM_OC_Start_IT+0x110>)
 800cc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc6a:	bf00      	nop
 800cc6c:	0800cca1 	.word	0x0800cca1
 800cc70:	0800cce9 	.word	0x0800cce9
 800cc74:	0800cce9 	.word	0x0800cce9
 800cc78:	0800cce9 	.word	0x0800cce9
 800cc7c:	0800ccb3 	.word	0x0800ccb3
 800cc80:	0800cce9 	.word	0x0800cce9
 800cc84:	0800cce9 	.word	0x0800cce9
 800cc88:	0800cce9 	.word	0x0800cce9
 800cc8c:	0800ccc5 	.word	0x0800ccc5
 800cc90:	0800cce9 	.word	0x0800cce9
 800cc94:	0800cce9 	.word	0x0800cce9
 800cc98:	0800cce9 	.word	0x0800cce9
 800cc9c:	0800ccd7 	.word	0x0800ccd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	68da      	ldr	r2, [r3, #12]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f042 0202 	orr.w	r2, r2, #2
 800ccae:	60da      	str	r2, [r3, #12]
      break;
 800ccb0:	e01d      	b.n	800ccee <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68da      	ldr	r2, [r3, #12]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f042 0204 	orr.w	r2, r2, #4
 800ccc0:	60da      	str	r2, [r3, #12]
      break;
 800ccc2:	e014      	b.n	800ccee <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	68da      	ldr	r2, [r3, #12]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f042 0208 	orr.w	r2, r2, #8
 800ccd2:	60da      	str	r2, [r3, #12]
      break;
 800ccd4:	e00b      	b.n	800ccee <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	68da      	ldr	r2, [r3, #12]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f042 0210 	orr.w	r2, r2, #16
 800cce4:	60da      	str	r2, [r3, #12]
      break;
 800cce6:	e002      	b.n	800ccee <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cce8:	2301      	movs	r3, #1
 800ccea:	73fb      	strb	r3, [r7, #15]
      break;
 800ccec:	bf00      	nop
  }

  if (status == HAL_OK)
 800ccee:	7bfb      	ldrb	r3, [r7, #15]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d174      	bne.n	800cdde <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	6839      	ldr	r1, [r7, #0]
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f001 fa27 	bl	800e150 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a38      	ldr	r2, [pc, #224]	; (800cde8 <HAL_TIM_OC_Start_IT+0x28c>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d013      	beq.n	800cd34 <HAL_TIM_OC_Start_IT+0x1d8>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a36      	ldr	r2, [pc, #216]	; (800cdec <HAL_TIM_OC_Start_IT+0x290>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d00e      	beq.n	800cd34 <HAL_TIM_OC_Start_IT+0x1d8>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a35      	ldr	r2, [pc, #212]	; (800cdf0 <HAL_TIM_OC_Start_IT+0x294>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d009      	beq.n	800cd34 <HAL_TIM_OC_Start_IT+0x1d8>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a33      	ldr	r2, [pc, #204]	; (800cdf4 <HAL_TIM_OC_Start_IT+0x298>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d004      	beq.n	800cd34 <HAL_TIM_OC_Start_IT+0x1d8>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4a32      	ldr	r2, [pc, #200]	; (800cdf8 <HAL_TIM_OC_Start_IT+0x29c>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d101      	bne.n	800cd38 <HAL_TIM_OC_Start_IT+0x1dc>
 800cd34:	2301      	movs	r3, #1
 800cd36:	e000      	b.n	800cd3a <HAL_TIM_OC_Start_IT+0x1de>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d007      	beq.n	800cd4e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cd4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4a25      	ldr	r2, [pc, #148]	; (800cde8 <HAL_TIM_OC_Start_IT+0x28c>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d022      	beq.n	800cd9e <HAL_TIM_OC_Start_IT+0x242>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd60:	d01d      	beq.n	800cd9e <HAL_TIM_OC_Start_IT+0x242>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4a25      	ldr	r2, [pc, #148]	; (800cdfc <HAL_TIM_OC_Start_IT+0x2a0>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d018      	beq.n	800cd9e <HAL_TIM_OC_Start_IT+0x242>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4a23      	ldr	r2, [pc, #140]	; (800ce00 <HAL_TIM_OC_Start_IT+0x2a4>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d013      	beq.n	800cd9e <HAL_TIM_OC_Start_IT+0x242>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a22      	ldr	r2, [pc, #136]	; (800ce04 <HAL_TIM_OC_Start_IT+0x2a8>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d00e      	beq.n	800cd9e <HAL_TIM_OC_Start_IT+0x242>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a19      	ldr	r2, [pc, #100]	; (800cdec <HAL_TIM_OC_Start_IT+0x290>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d009      	beq.n	800cd9e <HAL_TIM_OC_Start_IT+0x242>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a1e      	ldr	r2, [pc, #120]	; (800ce08 <HAL_TIM_OC_Start_IT+0x2ac>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d004      	beq.n	800cd9e <HAL_TIM_OC_Start_IT+0x242>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a15      	ldr	r2, [pc, #84]	; (800cdf0 <HAL_TIM_OC_Start_IT+0x294>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d115      	bne.n	800cdca <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	689a      	ldr	r2, [r3, #8]
 800cda4:	4b19      	ldr	r3, [pc, #100]	; (800ce0c <HAL_TIM_OC_Start_IT+0x2b0>)
 800cda6:	4013      	ands	r3, r2
 800cda8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	2b06      	cmp	r3, #6
 800cdae:	d015      	beq.n	800cddc <HAL_TIM_OC_Start_IT+0x280>
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdb6:	d011      	beq.n	800cddc <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f042 0201 	orr.w	r2, r2, #1
 800cdc6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdc8:	e008      	b.n	800cddc <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f042 0201 	orr.w	r2, r2, #1
 800cdd8:	601a      	str	r2, [r3, #0]
 800cdda:	e000      	b.n	800cdde <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cddc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cdde:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3710      	adds	r7, #16
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	40010000 	.word	0x40010000
 800cdec:	40010400 	.word	0x40010400
 800cdf0:	40014000 	.word	0x40014000
 800cdf4:	40014400 	.word	0x40014400
 800cdf8:	40014800 	.word	0x40014800
 800cdfc:	40000400 	.word	0x40000400
 800ce00:	40000800 	.word	0x40000800
 800ce04:	40000c00 	.word	0x40000c00
 800ce08:	40001800 	.word	0x40001800
 800ce0c:	00010007 	.word	0x00010007

0800ce10 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	2b0c      	cmp	r3, #12
 800ce22:	d841      	bhi.n	800cea8 <HAL_TIM_OC_Stop_IT+0x98>
 800ce24:	a201      	add	r2, pc, #4	; (adr r2, 800ce2c <HAL_TIM_OC_Stop_IT+0x1c>)
 800ce26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce2a:	bf00      	nop
 800ce2c:	0800ce61 	.word	0x0800ce61
 800ce30:	0800cea9 	.word	0x0800cea9
 800ce34:	0800cea9 	.word	0x0800cea9
 800ce38:	0800cea9 	.word	0x0800cea9
 800ce3c:	0800ce73 	.word	0x0800ce73
 800ce40:	0800cea9 	.word	0x0800cea9
 800ce44:	0800cea9 	.word	0x0800cea9
 800ce48:	0800cea9 	.word	0x0800cea9
 800ce4c:	0800ce85 	.word	0x0800ce85
 800ce50:	0800cea9 	.word	0x0800cea9
 800ce54:	0800cea9 	.word	0x0800cea9
 800ce58:	0800cea9 	.word	0x0800cea9
 800ce5c:	0800ce97 	.word	0x0800ce97
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	68da      	ldr	r2, [r3, #12]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f022 0202 	bic.w	r2, r2, #2
 800ce6e:	60da      	str	r2, [r3, #12]
      break;
 800ce70:	e01d      	b.n	800ceae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68da      	ldr	r2, [r3, #12]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f022 0204 	bic.w	r2, r2, #4
 800ce80:	60da      	str	r2, [r3, #12]
      break;
 800ce82:	e014      	b.n	800ceae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	68da      	ldr	r2, [r3, #12]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f022 0208 	bic.w	r2, r2, #8
 800ce92:	60da      	str	r2, [r3, #12]
      break;
 800ce94:	e00b      	b.n	800ceae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68da      	ldr	r2, [r3, #12]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f022 0210 	bic.w	r2, r2, #16
 800cea4:	60da      	str	r2, [r3, #12]
      break;
 800cea6:	e002      	b.n	800ceae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ceac:	bf00      	nop
  }

  if (status == HAL_OK)
 800ceae:	7bfb      	ldrb	r3, [r7, #15]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f040 8081 	bne.w	800cfb8 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2200      	movs	r2, #0
 800cebc:	6839      	ldr	r1, [r7, #0]
 800cebe:	4618      	mov	r0, r3
 800cec0:	f001 f946 	bl	800e150 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a3e      	ldr	r2, [pc, #248]	; (800cfc4 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d013      	beq.n	800cef6 <HAL_TIM_OC_Stop_IT+0xe6>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4a3d      	ldr	r2, [pc, #244]	; (800cfc8 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d00e      	beq.n	800cef6 <HAL_TIM_OC_Stop_IT+0xe6>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4a3b      	ldr	r2, [pc, #236]	; (800cfcc <HAL_TIM_OC_Stop_IT+0x1bc>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d009      	beq.n	800cef6 <HAL_TIM_OC_Stop_IT+0xe6>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a3a      	ldr	r2, [pc, #232]	; (800cfd0 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d004      	beq.n	800cef6 <HAL_TIM_OC_Stop_IT+0xe6>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a38      	ldr	r2, [pc, #224]	; (800cfd4 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d101      	bne.n	800cefa <HAL_TIM_OC_Stop_IT+0xea>
 800cef6:	2301      	movs	r3, #1
 800cef8:	e000      	b.n	800cefc <HAL_TIM_OC_Stop_IT+0xec>
 800cefa:	2300      	movs	r3, #0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d017      	beq.n	800cf30 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	6a1a      	ldr	r2, [r3, #32]
 800cf06:	f241 1311 	movw	r3, #4369	; 0x1111
 800cf0a:	4013      	ands	r3, r2
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d10f      	bne.n	800cf30 <HAL_TIM_OC_Stop_IT+0x120>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	6a1a      	ldr	r2, [r3, #32]
 800cf16:	f240 4344 	movw	r3, #1092	; 0x444
 800cf1a:	4013      	ands	r3, r2
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d107      	bne.n	800cf30 <HAL_TIM_OC_Stop_IT+0x120>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf2e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	6a1a      	ldr	r2, [r3, #32]
 800cf36:	f241 1311 	movw	r3, #4369	; 0x1111
 800cf3a:	4013      	ands	r3, r2
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d10f      	bne.n	800cf60 <HAL_TIM_OC_Stop_IT+0x150>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	6a1a      	ldr	r2, [r3, #32]
 800cf46:	f240 4344 	movw	r3, #1092	; 0x444
 800cf4a:	4013      	ands	r3, r2
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d107      	bne.n	800cf60 <HAL_TIM_OC_Stop_IT+0x150>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f022 0201 	bic.w	r2, r2, #1
 800cf5e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d104      	bne.n	800cf70 <HAL_TIM_OC_Stop_IT+0x160>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf6e:	e023      	b.n	800cfb8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	2b04      	cmp	r3, #4
 800cf74:	d104      	bne.n	800cf80 <HAL_TIM_OC_Stop_IT+0x170>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf7e:	e01b      	b.n	800cfb8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	2b08      	cmp	r3, #8
 800cf84:	d104      	bne.n	800cf90 <HAL_TIM_OC_Stop_IT+0x180>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf8e:	e013      	b.n	800cfb8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	2b0c      	cmp	r3, #12
 800cf94:	d104      	bne.n	800cfa0 <HAL_TIM_OC_Stop_IT+0x190>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf9e:	e00b      	b.n	800cfb8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	2b10      	cmp	r3, #16
 800cfa4:	d104      	bne.n	800cfb0 <HAL_TIM_OC_Stop_IT+0x1a0>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cfae:	e003      	b.n	800cfb8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800cfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	40010000 	.word	0x40010000
 800cfc8:	40010400 	.word	0x40010400
 800cfcc:	40014000 	.word	0x40014000
 800cfd0:	40014400 	.word	0x40014400
 800cfd4:	40014800 	.word	0x40014800

0800cfd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d101      	bne.n	800cfea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e049      	b.n	800d07e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d106      	bne.n	800d004 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f7f5 f8e2 	bl	80021c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2202      	movs	r2, #2
 800d008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	3304      	adds	r3, #4
 800d014:	4619      	mov	r1, r3
 800d016:	4610      	mov	r0, r2
 800d018:	f000 fc80 	bl	800d91c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2201      	movs	r2, #1
 800d020:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2201      	movs	r2, #1
 800d040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2201      	movs	r2, #1
 800d050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2201      	movs	r2, #1
 800d058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2201      	movs	r2, #1
 800d060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2201      	movs	r2, #1
 800d070:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2201      	movs	r2, #1
 800d078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d07c:	2300      	movs	r3, #0
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
	...

0800d088 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d109      	bne.n	800d0ac <HAL_TIM_PWM_Start+0x24>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	bf14      	ite	ne
 800d0a4:	2301      	movne	r3, #1
 800d0a6:	2300      	moveq	r3, #0
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	e03c      	b.n	800d126 <HAL_TIM_PWM_Start+0x9e>
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	2b04      	cmp	r3, #4
 800d0b0:	d109      	bne.n	800d0c6 <HAL_TIM_PWM_Start+0x3e>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	bf14      	ite	ne
 800d0be:	2301      	movne	r3, #1
 800d0c0:	2300      	moveq	r3, #0
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	e02f      	b.n	800d126 <HAL_TIM_PWM_Start+0x9e>
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	2b08      	cmp	r3, #8
 800d0ca:	d109      	bne.n	800d0e0 <HAL_TIM_PWM_Start+0x58>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	bf14      	ite	ne
 800d0d8:	2301      	movne	r3, #1
 800d0da:	2300      	moveq	r3, #0
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	e022      	b.n	800d126 <HAL_TIM_PWM_Start+0x9e>
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	2b0c      	cmp	r3, #12
 800d0e4:	d109      	bne.n	800d0fa <HAL_TIM_PWM_Start+0x72>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	bf14      	ite	ne
 800d0f2:	2301      	movne	r3, #1
 800d0f4:	2300      	moveq	r3, #0
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	e015      	b.n	800d126 <HAL_TIM_PWM_Start+0x9e>
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2b10      	cmp	r3, #16
 800d0fe:	d109      	bne.n	800d114 <HAL_TIM_PWM_Start+0x8c>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d106:	b2db      	uxtb	r3, r3
 800d108:	2b01      	cmp	r3, #1
 800d10a:	bf14      	ite	ne
 800d10c:	2301      	movne	r3, #1
 800d10e:	2300      	moveq	r3, #0
 800d110:	b2db      	uxtb	r3, r3
 800d112:	e008      	b.n	800d126 <HAL_TIM_PWM_Start+0x9e>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	bf14      	ite	ne
 800d120:	2301      	movne	r3, #1
 800d122:	2300      	moveq	r3, #0
 800d124:	b2db      	uxtb	r3, r3
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e0a1      	b.n	800d272 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d104      	bne.n	800d13e <HAL_TIM_PWM_Start+0xb6>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2202      	movs	r2, #2
 800d138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d13c:	e023      	b.n	800d186 <HAL_TIM_PWM_Start+0xfe>
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	2b04      	cmp	r3, #4
 800d142:	d104      	bne.n	800d14e <HAL_TIM_PWM_Start+0xc6>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2202      	movs	r2, #2
 800d148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d14c:	e01b      	b.n	800d186 <HAL_TIM_PWM_Start+0xfe>
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	2b08      	cmp	r3, #8
 800d152:	d104      	bne.n	800d15e <HAL_TIM_PWM_Start+0xd6>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2202      	movs	r2, #2
 800d158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d15c:	e013      	b.n	800d186 <HAL_TIM_PWM_Start+0xfe>
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	2b0c      	cmp	r3, #12
 800d162:	d104      	bne.n	800d16e <HAL_TIM_PWM_Start+0xe6>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2202      	movs	r2, #2
 800d168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d16c:	e00b      	b.n	800d186 <HAL_TIM_PWM_Start+0xfe>
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	2b10      	cmp	r3, #16
 800d172:	d104      	bne.n	800d17e <HAL_TIM_PWM_Start+0xf6>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2202      	movs	r2, #2
 800d178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d17c:	e003      	b.n	800d186 <HAL_TIM_PWM_Start+0xfe>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2202      	movs	r2, #2
 800d182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2201      	movs	r2, #1
 800d18c:	6839      	ldr	r1, [r7, #0]
 800d18e:	4618      	mov	r0, r3
 800d190:	f000 ffde 	bl	800e150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a38      	ldr	r2, [pc, #224]	; (800d27c <HAL_TIM_PWM_Start+0x1f4>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d013      	beq.n	800d1c6 <HAL_TIM_PWM_Start+0x13e>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a37      	ldr	r2, [pc, #220]	; (800d280 <HAL_TIM_PWM_Start+0x1f8>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d00e      	beq.n	800d1c6 <HAL_TIM_PWM_Start+0x13e>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a35      	ldr	r2, [pc, #212]	; (800d284 <HAL_TIM_PWM_Start+0x1fc>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d009      	beq.n	800d1c6 <HAL_TIM_PWM_Start+0x13e>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a34      	ldr	r2, [pc, #208]	; (800d288 <HAL_TIM_PWM_Start+0x200>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d004      	beq.n	800d1c6 <HAL_TIM_PWM_Start+0x13e>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a32      	ldr	r2, [pc, #200]	; (800d28c <HAL_TIM_PWM_Start+0x204>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d101      	bne.n	800d1ca <HAL_TIM_PWM_Start+0x142>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e000      	b.n	800d1cc <HAL_TIM_PWM_Start+0x144>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d007      	beq.n	800d1e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a25      	ldr	r2, [pc, #148]	; (800d27c <HAL_TIM_PWM_Start+0x1f4>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d022      	beq.n	800d230 <HAL_TIM_PWM_Start+0x1a8>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1f2:	d01d      	beq.n	800d230 <HAL_TIM_PWM_Start+0x1a8>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a25      	ldr	r2, [pc, #148]	; (800d290 <HAL_TIM_PWM_Start+0x208>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d018      	beq.n	800d230 <HAL_TIM_PWM_Start+0x1a8>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4a24      	ldr	r2, [pc, #144]	; (800d294 <HAL_TIM_PWM_Start+0x20c>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d013      	beq.n	800d230 <HAL_TIM_PWM_Start+0x1a8>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a22      	ldr	r2, [pc, #136]	; (800d298 <HAL_TIM_PWM_Start+0x210>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d00e      	beq.n	800d230 <HAL_TIM_PWM_Start+0x1a8>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4a1a      	ldr	r2, [pc, #104]	; (800d280 <HAL_TIM_PWM_Start+0x1f8>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d009      	beq.n	800d230 <HAL_TIM_PWM_Start+0x1a8>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a1e      	ldr	r2, [pc, #120]	; (800d29c <HAL_TIM_PWM_Start+0x214>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d004      	beq.n	800d230 <HAL_TIM_PWM_Start+0x1a8>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a16      	ldr	r2, [pc, #88]	; (800d284 <HAL_TIM_PWM_Start+0x1fc>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d115      	bne.n	800d25c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	689a      	ldr	r2, [r3, #8]
 800d236:	4b1a      	ldr	r3, [pc, #104]	; (800d2a0 <HAL_TIM_PWM_Start+0x218>)
 800d238:	4013      	ands	r3, r2
 800d23a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2b06      	cmp	r3, #6
 800d240:	d015      	beq.n	800d26e <HAL_TIM_PWM_Start+0x1e6>
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d248:	d011      	beq.n	800d26e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f042 0201 	orr.w	r2, r2, #1
 800d258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d25a:	e008      	b.n	800d26e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f042 0201 	orr.w	r2, r2, #1
 800d26a:	601a      	str	r2, [r3, #0]
 800d26c:	e000      	b.n	800d270 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d26e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	40010000 	.word	0x40010000
 800d280:	40010400 	.word	0x40010400
 800d284:	40014000 	.word	0x40014000
 800d288:	40014400 	.word	0x40014400
 800d28c:	40014800 	.word	0x40014800
 800d290:	40000400 	.word	0x40000400
 800d294:	40000800 	.word	0x40000800
 800d298:	40000c00 	.word	0x40000c00
 800d29c:	40001800 	.word	0x40001800
 800d2a0:	00010007 	.word	0x00010007

0800d2a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	691b      	ldr	r3, [r3, #16]
 800d2ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	f003 0302 	and.w	r3, r3, #2
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d020      	beq.n	800d308 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f003 0302 	and.w	r3, r3, #2
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d01b      	beq.n	800d308 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f06f 0202 	mvn.w	r2, #2
 800d2d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	699b      	ldr	r3, [r3, #24]
 800d2e6:	f003 0303 	and.w	r3, r3, #3
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d003      	beq.n	800d2f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 faf6 	bl	800d8e0 <HAL_TIM_IC_CaptureCallback>
 800d2f4:	e005      	b.n	800d302 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f7f3 fc6a 	bl	8000bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 faf9 	bl	800d8f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	f003 0304 	and.w	r3, r3, #4
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d020      	beq.n	800d354 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f003 0304 	and.w	r3, r3, #4
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d01b      	beq.n	800d354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f06f 0204 	mvn.w	r2, #4
 800d324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2202      	movs	r2, #2
 800d32a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	699b      	ldr	r3, [r3, #24]
 800d332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d336:	2b00      	cmp	r3, #0
 800d338:	d003      	beq.n	800d342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 fad0 	bl	800d8e0 <HAL_TIM_IC_CaptureCallback>
 800d340:	e005      	b.n	800d34e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f7f3 fc44 	bl	8000bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 fad3 	bl	800d8f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	f003 0308 	and.w	r3, r3, #8
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d020      	beq.n	800d3a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f003 0308 	and.w	r3, r3, #8
 800d364:	2b00      	cmp	r3, #0
 800d366:	d01b      	beq.n	800d3a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f06f 0208 	mvn.w	r2, #8
 800d370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2204      	movs	r2, #4
 800d376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	69db      	ldr	r3, [r3, #28]
 800d37e:	f003 0303 	and.w	r3, r3, #3
 800d382:	2b00      	cmp	r3, #0
 800d384:	d003      	beq.n	800d38e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 faaa 	bl	800d8e0 <HAL_TIM_IC_CaptureCallback>
 800d38c:	e005      	b.n	800d39a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f7f3 fc1e 	bl	8000bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 faad 	bl	800d8f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	f003 0310 	and.w	r3, r3, #16
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d020      	beq.n	800d3ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f003 0310 	and.w	r3, r3, #16
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d01b      	beq.n	800d3ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f06f 0210 	mvn.w	r2, #16
 800d3bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2208      	movs	r2, #8
 800d3c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	69db      	ldr	r3, [r3, #28]
 800d3ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d003      	beq.n	800d3da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 fa84 	bl	800d8e0 <HAL_TIM_IC_CaptureCallback>
 800d3d8:	e005      	b.n	800d3e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f7f3 fbf8 	bl	8000bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 fa87 	bl	800d8f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	f003 0301 	and.w	r3, r3, #1
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00c      	beq.n	800d410 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f003 0301 	and.w	r3, r3, #1
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d007      	beq.n	800d410 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f06f 0201 	mvn.w	r2, #1
 800d408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 fa5e 	bl	800d8cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d416:	2b00      	cmp	r3, #0
 800d418:	d104      	bne.n	800d424 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00c      	beq.n	800d43e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d007      	beq.n	800d43e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 ffc5 	bl	800e3c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d444:	2b00      	cmp	r3, #0
 800d446:	d00c      	beq.n	800d462 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d007      	beq.n	800d462 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d45a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 ffbd 	bl	800e3dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00c      	beq.n	800d486 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d472:	2b00      	cmp	r3, #0
 800d474:	d007      	beq.n	800d486 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d47e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 fa41 	bl	800d908 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	f003 0320 	and.w	r3, r3, #32
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00c      	beq.n	800d4aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f003 0320 	and.w	r3, r3, #32
 800d496:	2b00      	cmp	r3, #0
 800d498:	d007      	beq.n	800d4aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f06f 0220 	mvn.w	r2, #32
 800d4a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 ff85 	bl	800e3b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d4aa:	bf00      	nop
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
	...

0800d4b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b086      	sub	sp, #24
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d101      	bne.n	800d4d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d4ce:	2302      	movs	r3, #2
 800d4d0:	e0ff      	b.n	800d6d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2b14      	cmp	r3, #20
 800d4de:	f200 80f0 	bhi.w	800d6c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d4e2:	a201      	add	r2, pc, #4	; (adr r2, 800d4e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e8:	0800d53d 	.word	0x0800d53d
 800d4ec:	0800d6c3 	.word	0x0800d6c3
 800d4f0:	0800d6c3 	.word	0x0800d6c3
 800d4f4:	0800d6c3 	.word	0x0800d6c3
 800d4f8:	0800d57d 	.word	0x0800d57d
 800d4fc:	0800d6c3 	.word	0x0800d6c3
 800d500:	0800d6c3 	.word	0x0800d6c3
 800d504:	0800d6c3 	.word	0x0800d6c3
 800d508:	0800d5bf 	.word	0x0800d5bf
 800d50c:	0800d6c3 	.word	0x0800d6c3
 800d510:	0800d6c3 	.word	0x0800d6c3
 800d514:	0800d6c3 	.word	0x0800d6c3
 800d518:	0800d5ff 	.word	0x0800d5ff
 800d51c:	0800d6c3 	.word	0x0800d6c3
 800d520:	0800d6c3 	.word	0x0800d6c3
 800d524:	0800d6c3 	.word	0x0800d6c3
 800d528:	0800d641 	.word	0x0800d641
 800d52c:	0800d6c3 	.word	0x0800d6c3
 800d530:	0800d6c3 	.word	0x0800d6c3
 800d534:	0800d6c3 	.word	0x0800d6c3
 800d538:	0800d681 	.word	0x0800d681
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	68b9      	ldr	r1, [r7, #8]
 800d542:	4618      	mov	r0, r3
 800d544:	f000 fa90 	bl	800da68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	699a      	ldr	r2, [r3, #24]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f042 0208 	orr.w	r2, r2, #8
 800d556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	699a      	ldr	r2, [r3, #24]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f022 0204 	bic.w	r2, r2, #4
 800d566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	6999      	ldr	r1, [r3, #24]
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	691a      	ldr	r2, [r3, #16]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	430a      	orrs	r2, r1
 800d578:	619a      	str	r2, [r3, #24]
      break;
 800d57a:	e0a5      	b.n	800d6c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	68b9      	ldr	r1, [r7, #8]
 800d582:	4618      	mov	r0, r3
 800d584:	f000 fb00 	bl	800db88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	699a      	ldr	r2, [r3, #24]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	699a      	ldr	r2, [r3, #24]
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	6999      	ldr	r1, [r3, #24]
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	021a      	lsls	r2, r3, #8
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	430a      	orrs	r2, r1
 800d5ba:	619a      	str	r2, [r3, #24]
      break;
 800d5bc:	e084      	b.n	800d6c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	68b9      	ldr	r1, [r7, #8]
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f000 fb69 	bl	800dc9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	69da      	ldr	r2, [r3, #28]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f042 0208 	orr.w	r2, r2, #8
 800d5d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	69da      	ldr	r2, [r3, #28]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f022 0204 	bic.w	r2, r2, #4
 800d5e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	69d9      	ldr	r1, [r3, #28]
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	691a      	ldr	r2, [r3, #16]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	430a      	orrs	r2, r1
 800d5fa:	61da      	str	r2, [r3, #28]
      break;
 800d5fc:	e064      	b.n	800d6c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	68b9      	ldr	r1, [r7, #8]
 800d604:	4618      	mov	r0, r3
 800d606:	f000 fbd1 	bl	800ddac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	69da      	ldr	r2, [r3, #28]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	69da      	ldr	r2, [r3, #28]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	69d9      	ldr	r1, [r3, #28]
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	691b      	ldr	r3, [r3, #16]
 800d634:	021a      	lsls	r2, r3, #8
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	430a      	orrs	r2, r1
 800d63c:	61da      	str	r2, [r3, #28]
      break;
 800d63e:	e043      	b.n	800d6c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	68b9      	ldr	r1, [r7, #8]
 800d646:	4618      	mov	r0, r3
 800d648:	f000 fc1a 	bl	800de80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f042 0208 	orr.w	r2, r2, #8
 800d65a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f022 0204 	bic.w	r2, r2, #4
 800d66a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	691a      	ldr	r2, [r3, #16]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	430a      	orrs	r2, r1
 800d67c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d67e:	e023      	b.n	800d6c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	68b9      	ldr	r1, [r7, #8]
 800d686:	4618      	mov	r0, r3
 800d688:	f000 fc5e 	bl	800df48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d69a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	691b      	ldr	r3, [r3, #16]
 800d6b6:	021a      	lsls	r2, r3, #8
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	430a      	orrs	r2, r1
 800d6be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d6c0:	e002      	b.n	800d6c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	75fb      	strb	r3, [r7, #23]
      break;
 800d6c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3718      	adds	r7, #24
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop

0800d6dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d101      	bne.n	800d6f8 <HAL_TIM_ConfigClockSource+0x1c>
 800d6f4:	2302      	movs	r3, #2
 800d6f6:	e0dc      	b.n	800d8b2 <HAL_TIM_ConfigClockSource+0x1d6>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2202      	movs	r2, #2
 800d704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d710:	68ba      	ldr	r2, [r7, #8]
 800d712:	4b6a      	ldr	r3, [pc, #424]	; (800d8bc <HAL_TIM_ConfigClockSource+0x1e0>)
 800d714:	4013      	ands	r3, r2
 800d716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d71e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	68ba      	ldr	r2, [r7, #8]
 800d726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a64      	ldr	r2, [pc, #400]	; (800d8c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	f000 80a9 	beq.w	800d886 <HAL_TIM_ConfigClockSource+0x1aa>
 800d734:	4a62      	ldr	r2, [pc, #392]	; (800d8c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d736:	4293      	cmp	r3, r2
 800d738:	f200 80ae 	bhi.w	800d898 <HAL_TIM_ConfigClockSource+0x1bc>
 800d73c:	4a61      	ldr	r2, [pc, #388]	; (800d8c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	f000 80a1 	beq.w	800d886 <HAL_TIM_ConfigClockSource+0x1aa>
 800d744:	4a5f      	ldr	r2, [pc, #380]	; (800d8c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d746:	4293      	cmp	r3, r2
 800d748:	f200 80a6 	bhi.w	800d898 <HAL_TIM_ConfigClockSource+0x1bc>
 800d74c:	4a5e      	ldr	r2, [pc, #376]	; (800d8c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	f000 8099 	beq.w	800d886 <HAL_TIM_ConfigClockSource+0x1aa>
 800d754:	4a5c      	ldr	r2, [pc, #368]	; (800d8c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d756:	4293      	cmp	r3, r2
 800d758:	f200 809e 	bhi.w	800d898 <HAL_TIM_ConfigClockSource+0x1bc>
 800d75c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d760:	f000 8091 	beq.w	800d886 <HAL_TIM_ConfigClockSource+0x1aa>
 800d764:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d768:	f200 8096 	bhi.w	800d898 <HAL_TIM_ConfigClockSource+0x1bc>
 800d76c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d770:	f000 8089 	beq.w	800d886 <HAL_TIM_ConfigClockSource+0x1aa>
 800d774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d778:	f200 808e 	bhi.w	800d898 <HAL_TIM_ConfigClockSource+0x1bc>
 800d77c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d780:	d03e      	beq.n	800d800 <HAL_TIM_ConfigClockSource+0x124>
 800d782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d786:	f200 8087 	bhi.w	800d898 <HAL_TIM_ConfigClockSource+0x1bc>
 800d78a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d78e:	f000 8086 	beq.w	800d89e <HAL_TIM_ConfigClockSource+0x1c2>
 800d792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d796:	d87f      	bhi.n	800d898 <HAL_TIM_ConfigClockSource+0x1bc>
 800d798:	2b70      	cmp	r3, #112	; 0x70
 800d79a:	d01a      	beq.n	800d7d2 <HAL_TIM_ConfigClockSource+0xf6>
 800d79c:	2b70      	cmp	r3, #112	; 0x70
 800d79e:	d87b      	bhi.n	800d898 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7a0:	2b60      	cmp	r3, #96	; 0x60
 800d7a2:	d050      	beq.n	800d846 <HAL_TIM_ConfigClockSource+0x16a>
 800d7a4:	2b60      	cmp	r3, #96	; 0x60
 800d7a6:	d877      	bhi.n	800d898 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7a8:	2b50      	cmp	r3, #80	; 0x50
 800d7aa:	d03c      	beq.n	800d826 <HAL_TIM_ConfigClockSource+0x14a>
 800d7ac:	2b50      	cmp	r3, #80	; 0x50
 800d7ae:	d873      	bhi.n	800d898 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7b0:	2b40      	cmp	r3, #64	; 0x40
 800d7b2:	d058      	beq.n	800d866 <HAL_TIM_ConfigClockSource+0x18a>
 800d7b4:	2b40      	cmp	r3, #64	; 0x40
 800d7b6:	d86f      	bhi.n	800d898 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7b8:	2b30      	cmp	r3, #48	; 0x30
 800d7ba:	d064      	beq.n	800d886 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7bc:	2b30      	cmp	r3, #48	; 0x30
 800d7be:	d86b      	bhi.n	800d898 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7c0:	2b20      	cmp	r3, #32
 800d7c2:	d060      	beq.n	800d886 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7c4:	2b20      	cmp	r3, #32
 800d7c6:	d867      	bhi.n	800d898 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d05c      	beq.n	800d886 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7cc:	2b10      	cmp	r3, #16
 800d7ce:	d05a      	beq.n	800d886 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7d0:	e062      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6818      	ldr	r0, [r3, #0]
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	6899      	ldr	r1, [r3, #8]
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	685a      	ldr	r2, [r3, #4]
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	f000 fc95 	bl	800e110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d7f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	68ba      	ldr	r2, [r7, #8]
 800d7fc:	609a      	str	r2, [r3, #8]
      break;
 800d7fe:	e04f      	b.n	800d8a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6818      	ldr	r0, [r3, #0]
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	6899      	ldr	r1, [r3, #8]
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	685a      	ldr	r2, [r3, #4]
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	f000 fc7e 	bl	800e110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	689a      	ldr	r2, [r3, #8]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d822:	609a      	str	r2, [r3, #8]
      break;
 800d824:	e03c      	b.n	800d8a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6818      	ldr	r0, [r3, #0]
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	6859      	ldr	r1, [r3, #4]
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	461a      	mov	r2, r3
 800d834:	f000 fbee 	bl	800e014 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2150      	movs	r1, #80	; 0x50
 800d83e:	4618      	mov	r0, r3
 800d840:	f000 fc48 	bl	800e0d4 <TIM_ITRx_SetConfig>
      break;
 800d844:	e02c      	b.n	800d8a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6818      	ldr	r0, [r3, #0]
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	6859      	ldr	r1, [r3, #4]
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	461a      	mov	r2, r3
 800d854:	f000 fc0d 	bl	800e072 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2160      	movs	r1, #96	; 0x60
 800d85e:	4618      	mov	r0, r3
 800d860:	f000 fc38 	bl	800e0d4 <TIM_ITRx_SetConfig>
      break;
 800d864:	e01c      	b.n	800d8a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6818      	ldr	r0, [r3, #0]
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	6859      	ldr	r1, [r3, #4]
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	461a      	mov	r2, r3
 800d874:	f000 fbce 	bl	800e014 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2140      	movs	r1, #64	; 0x40
 800d87e:	4618      	mov	r0, r3
 800d880:	f000 fc28 	bl	800e0d4 <TIM_ITRx_SetConfig>
      break;
 800d884:	e00c      	b.n	800d8a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4619      	mov	r1, r3
 800d890:	4610      	mov	r0, r2
 800d892:	f000 fc1f 	bl	800e0d4 <TIM_ITRx_SetConfig>
      break;
 800d896:	e003      	b.n	800d8a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d898:	2301      	movs	r3, #1
 800d89a:	73fb      	strb	r3, [r7, #15]
      break;
 800d89c:	e000      	b.n	800d8a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d89e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	ffceff88 	.word	0xffceff88
 800d8c0:	00100040 	.word	0x00100040
 800d8c4:	00100030 	.word	0x00100030
 800d8c8:	00100020 	.word	0x00100020

0800d8cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d8d4:	bf00      	nop
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d8e8:	bf00      	nop
 800d8ea:	370c      	adds	r7, #12
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d8fc:	bf00      	nop
 800d8fe:	370c      	adds	r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d910:	bf00      	nop
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	4a46      	ldr	r2, [pc, #280]	; (800da48 <TIM_Base_SetConfig+0x12c>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d013      	beq.n	800d95c <TIM_Base_SetConfig+0x40>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d93a:	d00f      	beq.n	800d95c <TIM_Base_SetConfig+0x40>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	4a43      	ldr	r2, [pc, #268]	; (800da4c <TIM_Base_SetConfig+0x130>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d00b      	beq.n	800d95c <TIM_Base_SetConfig+0x40>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	4a42      	ldr	r2, [pc, #264]	; (800da50 <TIM_Base_SetConfig+0x134>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d007      	beq.n	800d95c <TIM_Base_SetConfig+0x40>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	4a41      	ldr	r2, [pc, #260]	; (800da54 <TIM_Base_SetConfig+0x138>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d003      	beq.n	800d95c <TIM_Base_SetConfig+0x40>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4a40      	ldr	r2, [pc, #256]	; (800da58 <TIM_Base_SetConfig+0x13c>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d108      	bne.n	800d96e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	4313      	orrs	r3, r2
 800d96c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	4a35      	ldr	r2, [pc, #212]	; (800da48 <TIM_Base_SetConfig+0x12c>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d01f      	beq.n	800d9b6 <TIM_Base_SetConfig+0x9a>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d97c:	d01b      	beq.n	800d9b6 <TIM_Base_SetConfig+0x9a>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4a32      	ldr	r2, [pc, #200]	; (800da4c <TIM_Base_SetConfig+0x130>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d017      	beq.n	800d9b6 <TIM_Base_SetConfig+0x9a>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4a31      	ldr	r2, [pc, #196]	; (800da50 <TIM_Base_SetConfig+0x134>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d013      	beq.n	800d9b6 <TIM_Base_SetConfig+0x9a>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	4a30      	ldr	r2, [pc, #192]	; (800da54 <TIM_Base_SetConfig+0x138>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d00f      	beq.n	800d9b6 <TIM_Base_SetConfig+0x9a>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4a2f      	ldr	r2, [pc, #188]	; (800da58 <TIM_Base_SetConfig+0x13c>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d00b      	beq.n	800d9b6 <TIM_Base_SetConfig+0x9a>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4a2e      	ldr	r2, [pc, #184]	; (800da5c <TIM_Base_SetConfig+0x140>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d007      	beq.n	800d9b6 <TIM_Base_SetConfig+0x9a>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4a2d      	ldr	r2, [pc, #180]	; (800da60 <TIM_Base_SetConfig+0x144>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d003      	beq.n	800d9b6 <TIM_Base_SetConfig+0x9a>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4a2c      	ldr	r2, [pc, #176]	; (800da64 <TIM_Base_SetConfig+0x148>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d108      	bne.n	800d9c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	695b      	ldr	r3, [r3, #20]
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	68fa      	ldr	r2, [r7, #12]
 800d9da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	689a      	ldr	r2, [r3, #8]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	4a16      	ldr	r2, [pc, #88]	; (800da48 <TIM_Base_SetConfig+0x12c>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d00f      	beq.n	800da14 <TIM_Base_SetConfig+0xf8>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	4a18      	ldr	r2, [pc, #96]	; (800da58 <TIM_Base_SetConfig+0x13c>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d00b      	beq.n	800da14 <TIM_Base_SetConfig+0xf8>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	4a17      	ldr	r2, [pc, #92]	; (800da5c <TIM_Base_SetConfig+0x140>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d007      	beq.n	800da14 <TIM_Base_SetConfig+0xf8>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	4a16      	ldr	r2, [pc, #88]	; (800da60 <TIM_Base_SetConfig+0x144>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d003      	beq.n	800da14 <TIM_Base_SetConfig+0xf8>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	4a15      	ldr	r2, [pc, #84]	; (800da64 <TIM_Base_SetConfig+0x148>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d103      	bne.n	800da1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	691a      	ldr	r2, [r3, #16]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2201      	movs	r2, #1
 800da20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	f003 0301 	and.w	r3, r3, #1
 800da2a:	2b01      	cmp	r3, #1
 800da2c:	d105      	bne.n	800da3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	f023 0201 	bic.w	r2, r3, #1
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	611a      	str	r2, [r3, #16]
  }
}
 800da3a:	bf00      	nop
 800da3c:	3714      	adds	r7, #20
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	40010000 	.word	0x40010000
 800da4c:	40000400 	.word	0x40000400
 800da50:	40000800 	.word	0x40000800
 800da54:	40000c00 	.word	0x40000c00
 800da58:	40010400 	.word	0x40010400
 800da5c:	40014000 	.word	0x40014000
 800da60:	40014400 	.word	0x40014400
 800da64:	40014800 	.word	0x40014800

0800da68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da68:	b480      	push	{r7}
 800da6a:	b087      	sub	sp, #28
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6a1b      	ldr	r3, [r3, #32]
 800da76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6a1b      	ldr	r3, [r3, #32]
 800da7c:	f023 0201 	bic.w	r2, r3, #1
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	699b      	ldr	r3, [r3, #24]
 800da8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800da90:	68fa      	ldr	r2, [r7, #12]
 800da92:	4b37      	ldr	r3, [pc, #220]	; (800db70 <TIM_OC1_SetConfig+0x108>)
 800da94:	4013      	ands	r3, r2
 800da96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f023 0303 	bic.w	r3, r3, #3
 800da9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	68fa      	ldr	r2, [r7, #12]
 800daa6:	4313      	orrs	r3, r2
 800daa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	f023 0302 	bic.w	r3, r3, #2
 800dab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	697a      	ldr	r2, [r7, #20]
 800dab8:	4313      	orrs	r3, r2
 800daba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	4a2d      	ldr	r2, [pc, #180]	; (800db74 <TIM_OC1_SetConfig+0x10c>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d00f      	beq.n	800dae4 <TIM_OC1_SetConfig+0x7c>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	4a2c      	ldr	r2, [pc, #176]	; (800db78 <TIM_OC1_SetConfig+0x110>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d00b      	beq.n	800dae4 <TIM_OC1_SetConfig+0x7c>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	4a2b      	ldr	r2, [pc, #172]	; (800db7c <TIM_OC1_SetConfig+0x114>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d007      	beq.n	800dae4 <TIM_OC1_SetConfig+0x7c>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a2a      	ldr	r2, [pc, #168]	; (800db80 <TIM_OC1_SetConfig+0x118>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d003      	beq.n	800dae4 <TIM_OC1_SetConfig+0x7c>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4a29      	ldr	r2, [pc, #164]	; (800db84 <TIM_OC1_SetConfig+0x11c>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d10c      	bne.n	800dafe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	f023 0308 	bic.w	r3, r3, #8
 800daea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	697a      	ldr	r2, [r7, #20]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	f023 0304 	bic.w	r3, r3, #4
 800dafc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a1c      	ldr	r2, [pc, #112]	; (800db74 <TIM_OC1_SetConfig+0x10c>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d00f      	beq.n	800db26 <TIM_OC1_SetConfig+0xbe>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4a1b      	ldr	r2, [pc, #108]	; (800db78 <TIM_OC1_SetConfig+0x110>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d00b      	beq.n	800db26 <TIM_OC1_SetConfig+0xbe>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4a1a      	ldr	r2, [pc, #104]	; (800db7c <TIM_OC1_SetConfig+0x114>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d007      	beq.n	800db26 <TIM_OC1_SetConfig+0xbe>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4a19      	ldr	r2, [pc, #100]	; (800db80 <TIM_OC1_SetConfig+0x118>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d003      	beq.n	800db26 <TIM_OC1_SetConfig+0xbe>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4a18      	ldr	r2, [pc, #96]	; (800db84 <TIM_OC1_SetConfig+0x11c>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d111      	bne.n	800db4a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800db34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	695b      	ldr	r3, [r3, #20]
 800db3a:	693a      	ldr	r2, [r7, #16]
 800db3c:	4313      	orrs	r3, r2
 800db3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	699b      	ldr	r3, [r3, #24]
 800db44:	693a      	ldr	r2, [r7, #16]
 800db46:	4313      	orrs	r3, r2
 800db48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	693a      	ldr	r2, [r7, #16]
 800db4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	685a      	ldr	r2, [r3, #4]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	697a      	ldr	r2, [r7, #20]
 800db62:	621a      	str	r2, [r3, #32]
}
 800db64:	bf00      	nop
 800db66:	371c      	adds	r7, #28
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr
 800db70:	fffeff8f 	.word	0xfffeff8f
 800db74:	40010000 	.word	0x40010000
 800db78:	40010400 	.word	0x40010400
 800db7c:	40014000 	.word	0x40014000
 800db80:	40014400 	.word	0x40014400
 800db84:	40014800 	.word	0x40014800

0800db88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db88:	b480      	push	{r7}
 800db8a:	b087      	sub	sp, #28
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6a1b      	ldr	r3, [r3, #32]
 800db96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a1b      	ldr	r3, [r3, #32]
 800db9c:	f023 0210 	bic.w	r2, r3, #16
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	699b      	ldr	r3, [r3, #24]
 800dbae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	4b34      	ldr	r3, [pc, #208]	; (800dc84 <TIM_OC2_SetConfig+0xfc>)
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	021b      	lsls	r3, r3, #8
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	f023 0320 	bic.w	r3, r3, #32
 800dbd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	011b      	lsls	r3, r3, #4
 800dbda:	697a      	ldr	r2, [r7, #20]
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	4a29      	ldr	r2, [pc, #164]	; (800dc88 <TIM_OC2_SetConfig+0x100>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d003      	beq.n	800dbf0 <TIM_OC2_SetConfig+0x68>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4a28      	ldr	r2, [pc, #160]	; (800dc8c <TIM_OC2_SetConfig+0x104>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d10d      	bne.n	800dc0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	68db      	ldr	r3, [r3, #12]
 800dbfc:	011b      	lsls	r3, r3, #4
 800dbfe:	697a      	ldr	r2, [r7, #20]
 800dc00:	4313      	orrs	r3, r2
 800dc02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	4a1e      	ldr	r2, [pc, #120]	; (800dc88 <TIM_OC2_SetConfig+0x100>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d00f      	beq.n	800dc34 <TIM_OC2_SetConfig+0xac>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	4a1d      	ldr	r2, [pc, #116]	; (800dc8c <TIM_OC2_SetConfig+0x104>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d00b      	beq.n	800dc34 <TIM_OC2_SetConfig+0xac>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	4a1c      	ldr	r2, [pc, #112]	; (800dc90 <TIM_OC2_SetConfig+0x108>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d007      	beq.n	800dc34 <TIM_OC2_SetConfig+0xac>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	4a1b      	ldr	r2, [pc, #108]	; (800dc94 <TIM_OC2_SetConfig+0x10c>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d003      	beq.n	800dc34 <TIM_OC2_SetConfig+0xac>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	4a1a      	ldr	r2, [pc, #104]	; (800dc98 <TIM_OC2_SetConfig+0x110>)
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d113      	bne.n	800dc5c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dc3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dc42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	695b      	ldr	r3, [r3, #20]
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	693a      	ldr	r2, [r7, #16]
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	699b      	ldr	r3, [r3, #24]
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	693a      	ldr	r2, [r7, #16]
 800dc58:	4313      	orrs	r3, r2
 800dc5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	693a      	ldr	r2, [r7, #16]
 800dc60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	685a      	ldr	r2, [r3, #4]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	697a      	ldr	r2, [r7, #20]
 800dc74:	621a      	str	r2, [r3, #32]
}
 800dc76:	bf00      	nop
 800dc78:	371c      	adds	r7, #28
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	feff8fff 	.word	0xfeff8fff
 800dc88:	40010000 	.word	0x40010000
 800dc8c:	40010400 	.word	0x40010400
 800dc90:	40014000 	.word	0x40014000
 800dc94:	40014400 	.word	0x40014400
 800dc98:	40014800 	.word	0x40014800

0800dc9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b087      	sub	sp, #28
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6a1b      	ldr	r3, [r3, #32]
 800dcaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6a1b      	ldr	r3, [r3, #32]
 800dcb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	69db      	ldr	r3, [r3, #28]
 800dcc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dcc4:	68fa      	ldr	r2, [r7, #12]
 800dcc6:	4b33      	ldr	r3, [pc, #204]	; (800dd94 <TIM_OC3_SetConfig+0xf8>)
 800dcc8:	4013      	ands	r3, r2
 800dcca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f023 0303 	bic.w	r3, r3, #3
 800dcd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	68fa      	ldr	r2, [r7, #12]
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	021b      	lsls	r3, r3, #8
 800dcec:	697a      	ldr	r2, [r7, #20]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4a28      	ldr	r2, [pc, #160]	; (800dd98 <TIM_OC3_SetConfig+0xfc>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d003      	beq.n	800dd02 <TIM_OC3_SetConfig+0x66>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	4a27      	ldr	r2, [pc, #156]	; (800dd9c <TIM_OC3_SetConfig+0x100>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d10d      	bne.n	800dd1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	021b      	lsls	r3, r3, #8
 800dd10:	697a      	ldr	r2, [r7, #20]
 800dd12:	4313      	orrs	r3, r2
 800dd14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dd1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	4a1d      	ldr	r2, [pc, #116]	; (800dd98 <TIM_OC3_SetConfig+0xfc>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d00f      	beq.n	800dd46 <TIM_OC3_SetConfig+0xaa>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	4a1c      	ldr	r2, [pc, #112]	; (800dd9c <TIM_OC3_SetConfig+0x100>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d00b      	beq.n	800dd46 <TIM_OC3_SetConfig+0xaa>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	4a1b      	ldr	r2, [pc, #108]	; (800dda0 <TIM_OC3_SetConfig+0x104>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d007      	beq.n	800dd46 <TIM_OC3_SetConfig+0xaa>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	4a1a      	ldr	r2, [pc, #104]	; (800dda4 <TIM_OC3_SetConfig+0x108>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d003      	beq.n	800dd46 <TIM_OC3_SetConfig+0xaa>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	4a19      	ldr	r2, [pc, #100]	; (800dda8 <TIM_OC3_SetConfig+0x10c>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d113      	bne.n	800dd6e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dd54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	695b      	ldr	r3, [r3, #20]
 800dd5a:	011b      	lsls	r3, r3, #4
 800dd5c:	693a      	ldr	r2, [r7, #16]
 800dd5e:	4313      	orrs	r3, r2
 800dd60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	699b      	ldr	r3, [r3, #24]
 800dd66:	011b      	lsls	r3, r3, #4
 800dd68:	693a      	ldr	r2, [r7, #16]
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	693a      	ldr	r2, [r7, #16]
 800dd72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	68fa      	ldr	r2, [r7, #12]
 800dd78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	685a      	ldr	r2, [r3, #4]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	697a      	ldr	r2, [r7, #20]
 800dd86:	621a      	str	r2, [r3, #32]
}
 800dd88:	bf00      	nop
 800dd8a:	371c      	adds	r7, #28
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr
 800dd94:	fffeff8f 	.word	0xfffeff8f
 800dd98:	40010000 	.word	0x40010000
 800dd9c:	40010400 	.word	0x40010400
 800dda0:	40014000 	.word	0x40014000
 800dda4:	40014400 	.word	0x40014400
 800dda8:	40014800 	.word	0x40014800

0800ddac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b087      	sub	sp, #28
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6a1b      	ldr	r3, [r3, #32]
 800ddba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6a1b      	ldr	r3, [r3, #32]
 800ddc0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	69db      	ldr	r3, [r3, #28]
 800ddd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ddd4:	68fa      	ldr	r2, [r7, #12]
 800ddd6:	4b24      	ldr	r3, [pc, #144]	; (800de68 <TIM_OC4_SetConfig+0xbc>)
 800ddd8:	4013      	ands	r3, r2
 800ddda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dde2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	021b      	lsls	r3, r3, #8
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ddf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	031b      	lsls	r3, r3, #12
 800ddfe:	693a      	ldr	r2, [r7, #16]
 800de00:	4313      	orrs	r3, r2
 800de02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a19      	ldr	r2, [pc, #100]	; (800de6c <TIM_OC4_SetConfig+0xc0>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d00f      	beq.n	800de2c <TIM_OC4_SetConfig+0x80>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4a18      	ldr	r2, [pc, #96]	; (800de70 <TIM_OC4_SetConfig+0xc4>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d00b      	beq.n	800de2c <TIM_OC4_SetConfig+0x80>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4a17      	ldr	r2, [pc, #92]	; (800de74 <TIM_OC4_SetConfig+0xc8>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d007      	beq.n	800de2c <TIM_OC4_SetConfig+0x80>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4a16      	ldr	r2, [pc, #88]	; (800de78 <TIM_OC4_SetConfig+0xcc>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d003      	beq.n	800de2c <TIM_OC4_SetConfig+0x80>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	4a15      	ldr	r2, [pc, #84]	; (800de7c <TIM_OC4_SetConfig+0xd0>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d109      	bne.n	800de40 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800de32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	695b      	ldr	r3, [r3, #20]
 800de38:	019b      	lsls	r3, r3, #6
 800de3a:	697a      	ldr	r2, [r7, #20]
 800de3c:	4313      	orrs	r3, r2
 800de3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	697a      	ldr	r2, [r7, #20]
 800de44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	68fa      	ldr	r2, [r7, #12]
 800de4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	685a      	ldr	r2, [r3, #4]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	693a      	ldr	r2, [r7, #16]
 800de58:	621a      	str	r2, [r3, #32]
}
 800de5a:	bf00      	nop
 800de5c:	371c      	adds	r7, #28
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr
 800de66:	bf00      	nop
 800de68:	feff8fff 	.word	0xfeff8fff
 800de6c:	40010000 	.word	0x40010000
 800de70:	40010400 	.word	0x40010400
 800de74:	40014000 	.word	0x40014000
 800de78:	40014400 	.word	0x40014400
 800de7c:	40014800 	.word	0x40014800

0800de80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800de80:	b480      	push	{r7}
 800de82:	b087      	sub	sp, #28
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6a1b      	ldr	r3, [r3, #32]
 800de8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6a1b      	ldr	r3, [r3, #32]
 800de94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	4b21      	ldr	r3, [pc, #132]	; (800df30 <TIM_OC5_SetConfig+0xb0>)
 800deac:	4013      	ands	r3, r2
 800deae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	68fa      	ldr	r2, [r7, #12]
 800deb6:	4313      	orrs	r3, r2
 800deb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dec0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	041b      	lsls	r3, r3, #16
 800dec8:	693a      	ldr	r2, [r7, #16]
 800deca:	4313      	orrs	r3, r2
 800decc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	4a18      	ldr	r2, [pc, #96]	; (800df34 <TIM_OC5_SetConfig+0xb4>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d00f      	beq.n	800def6 <TIM_OC5_SetConfig+0x76>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	4a17      	ldr	r2, [pc, #92]	; (800df38 <TIM_OC5_SetConfig+0xb8>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d00b      	beq.n	800def6 <TIM_OC5_SetConfig+0x76>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	4a16      	ldr	r2, [pc, #88]	; (800df3c <TIM_OC5_SetConfig+0xbc>)
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d007      	beq.n	800def6 <TIM_OC5_SetConfig+0x76>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	4a15      	ldr	r2, [pc, #84]	; (800df40 <TIM_OC5_SetConfig+0xc0>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d003      	beq.n	800def6 <TIM_OC5_SetConfig+0x76>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	4a14      	ldr	r2, [pc, #80]	; (800df44 <TIM_OC5_SetConfig+0xc4>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d109      	bne.n	800df0a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800defc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	695b      	ldr	r3, [r3, #20]
 800df02:	021b      	lsls	r3, r3, #8
 800df04:	697a      	ldr	r2, [r7, #20]
 800df06:	4313      	orrs	r3, r2
 800df08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	697a      	ldr	r2, [r7, #20]
 800df0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	68fa      	ldr	r2, [r7, #12]
 800df14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	685a      	ldr	r2, [r3, #4]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	693a      	ldr	r2, [r7, #16]
 800df22:	621a      	str	r2, [r3, #32]
}
 800df24:	bf00      	nop
 800df26:	371c      	adds	r7, #28
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr
 800df30:	fffeff8f 	.word	0xfffeff8f
 800df34:	40010000 	.word	0x40010000
 800df38:	40010400 	.word	0x40010400
 800df3c:	40014000 	.word	0x40014000
 800df40:	40014400 	.word	0x40014400
 800df44:	40014800 	.word	0x40014800

0800df48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800df48:	b480      	push	{r7}
 800df4a:	b087      	sub	sp, #28
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6a1b      	ldr	r3, [r3, #32]
 800df56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6a1b      	ldr	r3, [r3, #32]
 800df5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800df70:	68fa      	ldr	r2, [r7, #12]
 800df72:	4b22      	ldr	r3, [pc, #136]	; (800dffc <TIM_OC6_SetConfig+0xb4>)
 800df74:	4013      	ands	r3, r2
 800df76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	021b      	lsls	r3, r3, #8
 800df7e:	68fa      	ldr	r2, [r7, #12]
 800df80:	4313      	orrs	r3, r2
 800df82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800df8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	689b      	ldr	r3, [r3, #8]
 800df90:	051b      	lsls	r3, r3, #20
 800df92:	693a      	ldr	r2, [r7, #16]
 800df94:	4313      	orrs	r3, r2
 800df96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	4a19      	ldr	r2, [pc, #100]	; (800e000 <TIM_OC6_SetConfig+0xb8>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d00f      	beq.n	800dfc0 <TIM_OC6_SetConfig+0x78>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	4a18      	ldr	r2, [pc, #96]	; (800e004 <TIM_OC6_SetConfig+0xbc>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d00b      	beq.n	800dfc0 <TIM_OC6_SetConfig+0x78>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	4a17      	ldr	r2, [pc, #92]	; (800e008 <TIM_OC6_SetConfig+0xc0>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d007      	beq.n	800dfc0 <TIM_OC6_SetConfig+0x78>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	4a16      	ldr	r2, [pc, #88]	; (800e00c <TIM_OC6_SetConfig+0xc4>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d003      	beq.n	800dfc0 <TIM_OC6_SetConfig+0x78>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	4a15      	ldr	r2, [pc, #84]	; (800e010 <TIM_OC6_SetConfig+0xc8>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d109      	bne.n	800dfd4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dfc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	695b      	ldr	r3, [r3, #20]
 800dfcc:	029b      	lsls	r3, r3, #10
 800dfce:	697a      	ldr	r2, [r7, #20]
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	697a      	ldr	r2, [r7, #20]
 800dfd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	68fa      	ldr	r2, [r7, #12]
 800dfde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	685a      	ldr	r2, [r3, #4]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	693a      	ldr	r2, [r7, #16]
 800dfec:	621a      	str	r2, [r3, #32]
}
 800dfee:	bf00      	nop
 800dff0:	371c      	adds	r7, #28
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr
 800dffa:	bf00      	nop
 800dffc:	feff8fff 	.word	0xfeff8fff
 800e000:	40010000 	.word	0x40010000
 800e004:	40010400 	.word	0x40010400
 800e008:	40014000 	.word	0x40014000
 800e00c:	40014400 	.word	0x40014400
 800e010:	40014800 	.word	0x40014800

0800e014 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e014:	b480      	push	{r7}
 800e016:	b087      	sub	sp, #28
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6a1b      	ldr	r3, [r3, #32]
 800e024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	6a1b      	ldr	r3, [r3, #32]
 800e02a:	f023 0201 	bic.w	r2, r3, #1
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	699b      	ldr	r3, [r3, #24]
 800e036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e03e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	011b      	lsls	r3, r3, #4
 800e044:	693a      	ldr	r2, [r7, #16]
 800e046:	4313      	orrs	r3, r2
 800e048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	f023 030a 	bic.w	r3, r3, #10
 800e050:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e052:	697a      	ldr	r2, [r7, #20]
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	4313      	orrs	r3, r2
 800e058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	693a      	ldr	r2, [r7, #16]
 800e05e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	697a      	ldr	r2, [r7, #20]
 800e064:	621a      	str	r2, [r3, #32]
}
 800e066:	bf00      	nop
 800e068:	371c      	adds	r7, #28
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr

0800e072 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e072:	b480      	push	{r7}
 800e074:	b087      	sub	sp, #28
 800e076:	af00      	add	r7, sp, #0
 800e078:	60f8      	str	r0, [r7, #12]
 800e07a:	60b9      	str	r1, [r7, #8]
 800e07c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6a1b      	ldr	r3, [r3, #32]
 800e082:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	6a1b      	ldr	r3, [r3, #32]
 800e088:	f023 0210 	bic.w	r2, r3, #16
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	699b      	ldr	r3, [r3, #24]
 800e094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e09c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	031b      	lsls	r3, r3, #12
 800e0a2:	693a      	ldr	r2, [r7, #16]
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e0ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	011b      	lsls	r3, r3, #4
 800e0b4:	697a      	ldr	r2, [r7, #20]
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	693a      	ldr	r2, [r7, #16]
 800e0be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	697a      	ldr	r2, [r7, #20]
 800e0c4:	621a      	str	r2, [r3, #32]
}
 800e0c6:	bf00      	nop
 800e0c8:	371c      	adds	r7, #28
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr
	...

0800e0d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b085      	sub	sp, #20
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e0e4:	68fa      	ldr	r2, [r7, #12]
 800e0e6:	4b09      	ldr	r3, [pc, #36]	; (800e10c <TIM_ITRx_SetConfig+0x38>)
 800e0e8:	4013      	ands	r3, r2
 800e0ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e0ec:	683a      	ldr	r2, [r7, #0]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	f043 0307 	orr.w	r3, r3, #7
 800e0f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	68fa      	ldr	r2, [r7, #12]
 800e0fc:	609a      	str	r2, [r3, #8]
}
 800e0fe:	bf00      	nop
 800e100:	3714      	adds	r7, #20
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr
 800e10a:	bf00      	nop
 800e10c:	ffcfff8f 	.word	0xffcfff8f

0800e110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e110:	b480      	push	{r7}
 800e112:	b087      	sub	sp, #28
 800e114:	af00      	add	r7, sp, #0
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	60b9      	str	r1, [r7, #8]
 800e11a:	607a      	str	r2, [r7, #4]
 800e11c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	689b      	ldr	r3, [r3, #8]
 800e122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e12a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	021a      	lsls	r2, r3, #8
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	431a      	orrs	r2, r3
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	4313      	orrs	r3, r2
 800e138:	697a      	ldr	r2, [r7, #20]
 800e13a:	4313      	orrs	r3, r2
 800e13c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	697a      	ldr	r2, [r7, #20]
 800e142:	609a      	str	r2, [r3, #8]
}
 800e144:	bf00      	nop
 800e146:	371c      	adds	r7, #28
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e150:	b480      	push	{r7}
 800e152:	b087      	sub	sp, #28
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	f003 031f 	and.w	r3, r3, #31
 800e162:	2201      	movs	r2, #1
 800e164:	fa02 f303 	lsl.w	r3, r2, r3
 800e168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	6a1a      	ldr	r2, [r3, #32]
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	43db      	mvns	r3, r3
 800e172:	401a      	ands	r2, r3
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6a1a      	ldr	r2, [r3, #32]
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	f003 031f 	and.w	r3, r3, #31
 800e182:	6879      	ldr	r1, [r7, #4]
 800e184:	fa01 f303 	lsl.w	r3, r1, r3
 800e188:	431a      	orrs	r2, r3
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	621a      	str	r2, [r3, #32]
}
 800e18e:	bf00      	nop
 800e190:	371c      	adds	r7, #28
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr
	...

0800e19c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b085      	sub	sp, #20
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d101      	bne.n	800e1b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e1b0:	2302      	movs	r3, #2
 800e1b2:	e06d      	b.n	800e290 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2202      	movs	r2, #2
 800e1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	689b      	ldr	r3, [r3, #8]
 800e1d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a30      	ldr	r2, [pc, #192]	; (800e29c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d004      	beq.n	800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a2f      	ldr	r2, [pc, #188]	; (800e2a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d108      	bne.n	800e1fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e1ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	68fa      	ldr	r2, [r7, #12]
 800e1f6:	4313      	orrs	r3, r2
 800e1f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e200:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	68fa      	ldr	r2, [r7, #12]
 800e208:	4313      	orrs	r3, r2
 800e20a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	68fa      	ldr	r2, [r7, #12]
 800e212:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4a20      	ldr	r2, [pc, #128]	; (800e29c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d022      	beq.n	800e264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e226:	d01d      	beq.n	800e264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a1d      	ldr	r2, [pc, #116]	; (800e2a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d018      	beq.n	800e264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4a1c      	ldr	r2, [pc, #112]	; (800e2a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d013      	beq.n	800e264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4a1a      	ldr	r2, [pc, #104]	; (800e2ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d00e      	beq.n	800e264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4a15      	ldr	r2, [pc, #84]	; (800e2a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d009      	beq.n	800e264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4a16      	ldr	r2, [pc, #88]	; (800e2b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d004      	beq.n	800e264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	4a15      	ldr	r2, [pc, #84]	; (800e2b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d10c      	bne.n	800e27e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e26a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	689b      	ldr	r3, [r3, #8]
 800e270:	68ba      	ldr	r2, [r7, #8]
 800e272:	4313      	orrs	r3, r2
 800e274:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	68ba      	ldr	r2, [r7, #8]
 800e27c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2201      	movs	r2, #1
 800e282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e28e:	2300      	movs	r3, #0
}
 800e290:	4618      	mov	r0, r3
 800e292:	3714      	adds	r7, #20
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr
 800e29c:	40010000 	.word	0x40010000
 800e2a0:	40010400 	.word	0x40010400
 800e2a4:	40000400 	.word	0x40000400
 800e2a8:	40000800 	.word	0x40000800
 800e2ac:	40000c00 	.word	0x40000c00
 800e2b0:	40001800 	.word	0x40001800
 800e2b4:	40014000 	.word	0x40014000

0800e2b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b085      	sub	sp, #20
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d101      	bne.n	800e2d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	e065      	b.n	800e3a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	4313      	orrs	r3, r2
 800e304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4313      	orrs	r3, r2
 800e312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	691b      	ldr	r3, [r3, #16]
 800e31e:	4313      	orrs	r3, r2
 800e320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	695b      	ldr	r3, [r3, #20]
 800e32c:	4313      	orrs	r3, r2
 800e32e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e33a:	4313      	orrs	r3, r2
 800e33c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	699b      	ldr	r3, [r3, #24]
 800e348:	041b      	lsls	r3, r3, #16
 800e34a:	4313      	orrs	r3, r2
 800e34c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4a16      	ldr	r2, [pc, #88]	; (800e3ac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d004      	beq.n	800e362 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4a14      	ldr	r2, [pc, #80]	; (800e3b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d115      	bne.n	800e38e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36c:	051b      	lsls	r3, r3, #20
 800e36e:	4313      	orrs	r3, r2
 800e370:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	69db      	ldr	r3, [r3, #28]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	6a1b      	ldr	r3, [r3, #32]
 800e38a:	4313      	orrs	r3, r2
 800e38c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	68fa      	ldr	r2, [r7, #12]
 800e394:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2200      	movs	r2, #0
 800e39a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3714      	adds	r7, #20
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr
 800e3ac:	40010000 	.word	0x40010000
 800e3b0:	40010400 	.word	0x40010400

0800e3b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e3bc:	bf00      	nop
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e3d0:	bf00      	nop
 800e3d2:	370c      	adds	r7, #12
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e3e4:	bf00      	nop
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d101      	bne.n	800e402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3fe:	2301      	movs	r3, #1
 800e400:	e042      	b.n	800e488 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d106      	bne.n	800e41a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7f3 ffa1 	bl	800235c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2224      	movs	r2, #36	; 0x24
 800e41e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f022 0201 	bic.w	r2, r2, #1
 800e430:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e436:	2b00      	cmp	r3, #0
 800e438:	d002      	beq.n	800e440 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f001 fa44 	bl	800f8c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 fcd9 	bl	800edf8 <UART_SetConfig>
 800e446:	4603      	mov	r3, r0
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d101      	bne.n	800e450 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e44c:	2301      	movs	r3, #1
 800e44e:	e01b      	b.n	800e488 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	685a      	ldr	r2, [r3, #4]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e45e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	689a      	ldr	r2, [r3, #8]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e46e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f042 0201 	orr.w	r2, r2, #1
 800e47e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f001 fac3 	bl	800fa0c <UART_CheckIdleState>
 800e486:	4603      	mov	r3, r0
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3708      	adds	r7, #8
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b08a      	sub	sp, #40	; 0x28
 800e494:	af02      	add	r7, sp, #8
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	603b      	str	r3, [r7, #0]
 800e49c:	4613      	mov	r3, r2
 800e49e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4a6:	2b20      	cmp	r3, #32
 800e4a8:	d17b      	bne.n	800e5a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d002      	beq.n	800e4b6 <HAL_UART_Transmit+0x26>
 800e4b0:	88fb      	ldrh	r3, [r7, #6]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d101      	bne.n	800e4ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e074      	b.n	800e5a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2221      	movs	r2, #33	; 0x21
 800e4c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e4ca:	f7f4 f9ab 	bl	8002824 <HAL_GetTick>
 800e4ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	88fa      	ldrh	r2, [r7, #6]
 800e4d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	88fa      	ldrh	r2, [r7, #6]
 800e4dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	689b      	ldr	r3, [r3, #8]
 800e4e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4e8:	d108      	bne.n	800e4fc <HAL_UART_Transmit+0x6c>
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	691b      	ldr	r3, [r3, #16]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d104      	bne.n	800e4fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	61bb      	str	r3, [r7, #24]
 800e4fa:	e003      	b.n	800e504 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e500:	2300      	movs	r3, #0
 800e502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e504:	e030      	b.n	800e568 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	2200      	movs	r2, #0
 800e50e:	2180      	movs	r1, #128	; 0x80
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f001 fb25 	bl	800fb60 <UART_WaitOnFlagUntilTimeout>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d005      	beq.n	800e528 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2220      	movs	r2, #32
 800e520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e524:	2303      	movs	r3, #3
 800e526:	e03d      	b.n	800e5a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d10b      	bne.n	800e546 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	881b      	ldrh	r3, [r3, #0]
 800e532:	461a      	mov	r2, r3
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e53c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	3302      	adds	r3, #2
 800e542:	61bb      	str	r3, [r7, #24]
 800e544:	e007      	b.n	800e556 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e546:	69fb      	ldr	r3, [r7, #28]
 800e548:	781a      	ldrb	r2, [r3, #0]
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	3301      	adds	r3, #1
 800e554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	3b01      	subs	r3, #1
 800e560:	b29a      	uxth	r2, r3
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e56e:	b29b      	uxth	r3, r3
 800e570:	2b00      	cmp	r3, #0
 800e572:	d1c8      	bne.n	800e506 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	9300      	str	r3, [sp, #0]
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	2200      	movs	r2, #0
 800e57c:	2140      	movs	r1, #64	; 0x40
 800e57e:	68f8      	ldr	r0, [r7, #12]
 800e580:	f001 faee 	bl	800fb60 <UART_WaitOnFlagUntilTimeout>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d005      	beq.n	800e596 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2220      	movs	r2, #32
 800e58e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e592:	2303      	movs	r3, #3
 800e594:	e006      	b.n	800e5a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2220      	movs	r2, #32
 800e59a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	e000      	b.n	800e5a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e5a2:	2302      	movs	r3, #2
  }
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3720      	adds	r7, #32
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b08a      	sub	sp, #40	; 0x28
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	60b9      	str	r1, [r7, #8]
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5c0:	2b20      	cmp	r3, #32
 800e5c2:	d137      	bne.n	800e634 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d002      	beq.n	800e5d0 <HAL_UART_Receive_IT+0x24>
 800e5ca:	88fb      	ldrh	r3, [r7, #6]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d101      	bne.n	800e5d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e030      	b.n	800e636 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	4a18      	ldr	r2, [pc, #96]	; (800e640 <HAL_UART_Receive_IT+0x94>)
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	d01f      	beq.n	800e624 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d018      	beq.n	800e624 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	e853 3f00 	ldrex	r3, [r3]
 800e5fe:	613b      	str	r3, [r7, #16]
   return(result);
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e606:	627b      	str	r3, [r7, #36]	; 0x24
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	461a      	mov	r2, r3
 800e60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e610:	623b      	str	r3, [r7, #32]
 800e612:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e614:	69f9      	ldr	r1, [r7, #28]
 800e616:	6a3a      	ldr	r2, [r7, #32]
 800e618:	e841 2300 	strex	r3, r2, [r1]
 800e61c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e61e:	69bb      	ldr	r3, [r7, #24]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1e6      	bne.n	800e5f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e624:	88fb      	ldrh	r3, [r7, #6]
 800e626:	461a      	mov	r2, r3
 800e628:	68b9      	ldr	r1, [r7, #8]
 800e62a:	68f8      	ldr	r0, [r7, #12]
 800e62c:	f001 fb06 	bl	800fc3c <UART_Start_Receive_IT>
 800e630:	4603      	mov	r3, r0
 800e632:	e000      	b.n	800e636 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e634:	2302      	movs	r3, #2
  }
}
 800e636:	4618      	mov	r0, r3
 800e638:	3728      	adds	r7, #40	; 0x28
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	58000c00 	.word	0x58000c00

0800e644 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b0ba      	sub	sp, #232	; 0xe8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	69db      	ldr	r3, [r3, #28]
 800e652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e66a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e66e:	f640 030f 	movw	r3, #2063	; 0x80f
 800e672:	4013      	ands	r3, r2
 800e674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d11b      	bne.n	800e6b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e684:	f003 0320 	and.w	r3, r3, #32
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d015      	beq.n	800e6b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e68c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e690:	f003 0320 	and.w	r3, r3, #32
 800e694:	2b00      	cmp	r3, #0
 800e696:	d105      	bne.n	800e6a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e69c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d009      	beq.n	800e6b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	f000 8377 	beq.w	800ed9c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	4798      	blx	r3
      }
      return;
 800e6b6:	e371      	b.n	800ed9c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e6b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 8123 	beq.w	800e908 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e6c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e6c6:	4b8d      	ldr	r3, [pc, #564]	; (800e8fc <HAL_UART_IRQHandler+0x2b8>)
 800e6c8:	4013      	ands	r3, r2
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d106      	bne.n	800e6dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e6ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e6d2:	4b8b      	ldr	r3, [pc, #556]	; (800e900 <HAL_UART_IRQHandler+0x2bc>)
 800e6d4:	4013      	ands	r3, r2
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	f000 8116 	beq.w	800e908 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6e0:	f003 0301 	and.w	r3, r3, #1
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d011      	beq.n	800e70c <HAL_UART_IRQHandler+0xc8>
 800e6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d00b      	beq.n	800e70c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e702:	f043 0201 	orr.w	r2, r3, #1
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e710:	f003 0302 	and.w	r3, r3, #2
 800e714:	2b00      	cmp	r3, #0
 800e716:	d011      	beq.n	800e73c <HAL_UART_IRQHandler+0xf8>
 800e718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e71c:	f003 0301 	and.w	r3, r3, #1
 800e720:	2b00      	cmp	r3, #0
 800e722:	d00b      	beq.n	800e73c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2202      	movs	r2, #2
 800e72a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e732:	f043 0204 	orr.w	r2, r3, #4
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e740:	f003 0304 	and.w	r3, r3, #4
 800e744:	2b00      	cmp	r3, #0
 800e746:	d011      	beq.n	800e76c <HAL_UART_IRQHandler+0x128>
 800e748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e74c:	f003 0301 	and.w	r3, r3, #1
 800e750:	2b00      	cmp	r3, #0
 800e752:	d00b      	beq.n	800e76c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2204      	movs	r2, #4
 800e75a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e762:	f043 0202 	orr.w	r2, r3, #2
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e770:	f003 0308 	and.w	r3, r3, #8
 800e774:	2b00      	cmp	r3, #0
 800e776:	d017      	beq.n	800e7a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e77c:	f003 0320 	and.w	r3, r3, #32
 800e780:	2b00      	cmp	r3, #0
 800e782:	d105      	bne.n	800e790 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e784:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e788:	4b5c      	ldr	r3, [pc, #368]	; (800e8fc <HAL_UART_IRQHandler+0x2b8>)
 800e78a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d00b      	beq.n	800e7a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2208      	movs	r2, #8
 800e796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e79e:	f043 0208 	orr.w	r2, r3, #8
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d012      	beq.n	800e7da <HAL_UART_IRQHandler+0x196>
 800e7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00c      	beq.n	800e7da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e7c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7d0:	f043 0220 	orr.w	r2, r3, #32
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	f000 82dd 	beq.w	800eda0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7ea:	f003 0320 	and.w	r3, r3, #32
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d013      	beq.n	800e81a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e7f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7f6:	f003 0320 	and.w	r3, r3, #32
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d105      	bne.n	800e80a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e7fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e806:	2b00      	cmp	r3, #0
 800e808:	d007      	beq.n	800e81a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d003      	beq.n	800e81a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e820:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	689b      	ldr	r3, [r3, #8]
 800e82a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e82e:	2b40      	cmp	r3, #64	; 0x40
 800e830:	d005      	beq.n	800e83e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e836:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d054      	beq.n	800e8e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f001 fb1e 	bl	800fe80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	689b      	ldr	r3, [r3, #8]
 800e84a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e84e:	2b40      	cmp	r3, #64	; 0x40
 800e850:	d146      	bne.n	800e8e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	3308      	adds	r3, #8
 800e858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e85c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e860:	e853 3f00 	ldrex	r3, [r3]
 800e864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e868:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e86c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	3308      	adds	r3, #8
 800e87a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e87e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e886:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e88a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e88e:	e841 2300 	strex	r3, r2, [r1]
 800e892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d1d9      	bne.n	800e852 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d017      	beq.n	800e8d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8ae:	4a15      	ldr	r2, [pc, #84]	; (800e904 <HAL_UART_IRQHandler+0x2c0>)
 800e8b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7f7 f993 	bl	8005be4 <HAL_DMA_Abort_IT>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d019      	beq.n	800e8f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e8d2:	4610      	mov	r0, r2
 800e8d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8d6:	e00f      	b.n	800e8f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 fa77 	bl	800edcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8de:	e00b      	b.n	800e8f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f000 fa73 	bl	800edcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8e6:	e007      	b.n	800e8f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f000 fa6f 	bl	800edcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e8f6:	e253      	b.n	800eda0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8f8:	bf00      	nop
    return;
 800e8fa:	e251      	b.n	800eda0 <HAL_UART_IRQHandler+0x75c>
 800e8fc:	10000001 	.word	0x10000001
 800e900:	04000120 	.word	0x04000120
 800e904:	0800ff4d 	.word	0x0800ff4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	f040 81e7 	bne.w	800ece0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e916:	f003 0310 	and.w	r3, r3, #16
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f000 81e0 	beq.w	800ece0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e924:	f003 0310 	and.w	r3, r3, #16
 800e928:	2b00      	cmp	r3, #0
 800e92a:	f000 81d9 	beq.w	800ece0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	2210      	movs	r2, #16
 800e934:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	689b      	ldr	r3, [r3, #8]
 800e93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e940:	2b40      	cmp	r3, #64	; 0x40
 800e942:	f040 8151 	bne.w	800ebe8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	4a96      	ldr	r2, [pc, #600]	; (800eba8 <HAL_UART_IRQHandler+0x564>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d068      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4a93      	ldr	r2, [pc, #588]	; (800ebac <HAL_UART_IRQHandler+0x568>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d061      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a91      	ldr	r2, [pc, #580]	; (800ebb0 <HAL_UART_IRQHandler+0x56c>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d05a      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4a8e      	ldr	r2, [pc, #568]	; (800ebb4 <HAL_UART_IRQHandler+0x570>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d053      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4a8c      	ldr	r2, [pc, #560]	; (800ebb8 <HAL_UART_IRQHandler+0x574>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d04c      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a89      	ldr	r2, [pc, #548]	; (800ebbc <HAL_UART_IRQHandler+0x578>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d045      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	4a87      	ldr	r2, [pc, #540]	; (800ebc0 <HAL_UART_IRQHandler+0x57c>)
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	d03e      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4a84      	ldr	r2, [pc, #528]	; (800ebc4 <HAL_UART_IRQHandler+0x580>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d037      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	4a82      	ldr	r2, [pc, #520]	; (800ebc8 <HAL_UART_IRQHandler+0x584>)
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d030      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a7f      	ldr	r2, [pc, #508]	; (800ebcc <HAL_UART_IRQHandler+0x588>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d029      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a7d      	ldr	r2, [pc, #500]	; (800ebd0 <HAL_UART_IRQHandler+0x58c>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d022      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a7a      	ldr	r2, [pc, #488]	; (800ebd4 <HAL_UART_IRQHandler+0x590>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d01b      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4a78      	ldr	r2, [pc, #480]	; (800ebd8 <HAL_UART_IRQHandler+0x594>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d014      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4a75      	ldr	r2, [pc, #468]	; (800ebdc <HAL_UART_IRQHandler+0x598>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d00d      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a73      	ldr	r2, [pc, #460]	; (800ebe0 <HAL_UART_IRQHandler+0x59c>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d006      	beq.n	800ea26 <HAL_UART_IRQHandler+0x3e2>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4a70      	ldr	r2, [pc, #448]	; (800ebe4 <HAL_UART_IRQHandler+0x5a0>)
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d106      	bne.n	800ea34 <HAL_UART_IRQHandler+0x3f0>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	e005      	b.n	800ea40 <HAL_UART_IRQHandler+0x3fc>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ea44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	f000 81ab 	beq.w	800eda4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ea54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	f080 81a3 	bcs.w	800eda4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ea64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea6e:	69db      	ldr	r3, [r3, #28]
 800ea70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea74:	f000 8087 	beq.w	800eb86 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ea84:	e853 3f00 	ldrex	r3, [r3]
 800ea88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ea8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eaa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800eaa6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800eaae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800eab2:	e841 2300 	strex	r3, r2, [r1]
 800eab6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800eaba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d1da      	bne.n	800ea78 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	3308      	adds	r3, #8
 800eac8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eacc:	e853 3f00 	ldrex	r3, [r3]
 800ead0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ead2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ead4:	f023 0301 	bic.w	r3, r3, #1
 800ead8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	3308      	adds	r3, #8
 800eae2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800eae6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800eaea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800eaee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eaf2:	e841 2300 	strex	r3, r2, [r1]
 800eaf6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800eaf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d1e1      	bne.n	800eac2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	3308      	adds	r3, #8
 800eb04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb08:	e853 3f00 	ldrex	r3, [r3]
 800eb0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800eb0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	3308      	adds	r3, #8
 800eb1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800eb22:	66fa      	str	r2, [r7, #108]	; 0x6c
 800eb24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eb28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eb2a:	e841 2300 	strex	r3, r2, [r1]
 800eb2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eb30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d1e3      	bne.n	800eafe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2220      	movs	r2, #32
 800eb3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb4c:	e853 3f00 	ldrex	r3, [r3]
 800eb50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eb52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb54:	f023 0310 	bic.w	r3, r3, #16
 800eb58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	461a      	mov	r2, r3
 800eb62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eb66:	65bb      	str	r3, [r7, #88]	; 0x58
 800eb68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eb6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb6e:	e841 2300 	strex	r3, r2, [r1]
 800eb72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eb74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d1e4      	bne.n	800eb44 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7f6 fd11 	bl	80055a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2202      	movs	r2, #2
 800eb8a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb98:	b29b      	uxth	r3, r3
 800eb9a:	1ad3      	subs	r3, r2, r3
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	4619      	mov	r1, r3
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f000 f91d 	bl	800ede0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eba6:	e0fd      	b.n	800eda4 <HAL_UART_IRQHandler+0x760>
 800eba8:	40020010 	.word	0x40020010
 800ebac:	40020028 	.word	0x40020028
 800ebb0:	40020040 	.word	0x40020040
 800ebb4:	40020058 	.word	0x40020058
 800ebb8:	40020070 	.word	0x40020070
 800ebbc:	40020088 	.word	0x40020088
 800ebc0:	400200a0 	.word	0x400200a0
 800ebc4:	400200b8 	.word	0x400200b8
 800ebc8:	40020410 	.word	0x40020410
 800ebcc:	40020428 	.word	0x40020428
 800ebd0:	40020440 	.word	0x40020440
 800ebd4:	40020458 	.word	0x40020458
 800ebd8:	40020470 	.word	0x40020470
 800ebdc:	40020488 	.word	0x40020488
 800ebe0:	400204a0 	.word	0x400204a0
 800ebe4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebf4:	b29b      	uxth	r3, r3
 800ebf6:	1ad3      	subs	r3, r2, r3
 800ebf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	f000 80cf 	beq.w	800eda8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ec0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f000 80ca 	beq.w	800eda8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1c:	e853 3f00 	ldrex	r3, [r3]
 800ec20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ec22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	461a      	mov	r2, r3
 800ec32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ec36:	647b      	str	r3, [r7, #68]	; 0x44
 800ec38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec3e:	e841 2300 	strex	r3, r2, [r1]
 800ec42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d1e4      	bne.n	800ec14 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	3308      	adds	r3, #8
 800ec50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec54:	e853 3f00 	ldrex	r3, [r3]
 800ec58:	623b      	str	r3, [r7, #32]
   return(result);
 800ec5a:	6a3a      	ldr	r2, [r7, #32]
 800ec5c:	4b55      	ldr	r3, [pc, #340]	; (800edb4 <HAL_UART_IRQHandler+0x770>)
 800ec5e:	4013      	ands	r3, r2
 800ec60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	3308      	adds	r3, #8
 800ec6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ec6e:	633a      	str	r2, [r7, #48]	; 0x30
 800ec70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec76:	e841 2300 	strex	r3, r2, [r1]
 800ec7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1e3      	bne.n	800ec4a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2220      	movs	r2, #32
 800ec86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2200      	movs	r2, #0
 800ec94:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	e853 3f00 	ldrex	r3, [r3]
 800eca2:	60fb      	str	r3, [r7, #12]
   return(result);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f023 0310 	bic.w	r3, r3, #16
 800ecaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ecb8:	61fb      	str	r3, [r7, #28]
 800ecba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecbc:	69b9      	ldr	r1, [r7, #24]
 800ecbe:	69fa      	ldr	r2, [r7, #28]
 800ecc0:	e841 2300 	strex	r3, r2, [r1]
 800ecc4:	617b      	str	r3, [r7, #20]
   return(result);
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d1e4      	bne.n	800ec96 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2202      	movs	r2, #2
 800ecd0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ecd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f000 f881 	bl	800ede0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ecde:	e063      	b.n	800eda8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ece0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ece4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d00e      	beq.n	800ed0a <HAL_UART_IRQHandler+0x6c6>
 800ecec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ecf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d008      	beq.n	800ed0a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ed00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f001 fe80 	bl	8010a08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ed08:	e051      	b.n	800edae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ed0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d014      	beq.n	800ed40 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ed16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d105      	bne.n	800ed2e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ed22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d008      	beq.n	800ed40 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d03a      	beq.n	800edac <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	4798      	blx	r3
    }
    return;
 800ed3e:	e035      	b.n	800edac <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ed40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d009      	beq.n	800ed60 <HAL_UART_IRQHandler+0x71c>
 800ed4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d003      	beq.n	800ed60 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f001 f90d 	bl	800ff78 <UART_EndTransmit_IT>
    return;
 800ed5e:	e026      	b.n	800edae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ed60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d009      	beq.n	800ed80 <HAL_UART_IRQHandler+0x73c>
 800ed6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d003      	beq.n	800ed80 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f001 fe59 	bl	8010a30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ed7e:	e016      	b.n	800edae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ed80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d010      	beq.n	800edae <HAL_UART_IRQHandler+0x76a>
 800ed8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	da0c      	bge.n	800edae <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f001 fe41 	bl	8010a1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ed9a:	e008      	b.n	800edae <HAL_UART_IRQHandler+0x76a>
      return;
 800ed9c:	bf00      	nop
 800ed9e:	e006      	b.n	800edae <HAL_UART_IRQHandler+0x76a>
    return;
 800eda0:	bf00      	nop
 800eda2:	e004      	b.n	800edae <HAL_UART_IRQHandler+0x76a>
      return;
 800eda4:	bf00      	nop
 800eda6:	e002      	b.n	800edae <HAL_UART_IRQHandler+0x76a>
      return;
 800eda8:	bf00      	nop
 800edaa:	e000      	b.n	800edae <HAL_UART_IRQHandler+0x76a>
    return;
 800edac:	bf00      	nop
  }
}
 800edae:	37e8      	adds	r7, #232	; 0xe8
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}
 800edb4:	effffffe 	.word	0xeffffffe

0800edb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800edb8:	b480      	push	{r7}
 800edba:	b083      	sub	sp, #12
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800edc0:	bf00      	nop
 800edc2:	370c      	adds	r7, #12
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr

0800edcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800edd4:	bf00      	nop
 800edd6:	370c      	adds	r7, #12
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr

0800ede0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	460b      	mov	r3, r1
 800edea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800edec:	bf00      	nop
 800edee:	370c      	adds	r7, #12
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr

0800edf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800edf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800edfc:	b092      	sub	sp, #72	; 0x48
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ee02:	2300      	movs	r3, #0
 800ee04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	689a      	ldr	r2, [r3, #8]
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	691b      	ldr	r3, [r3, #16]
 800ee10:	431a      	orrs	r2, r3
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	695b      	ldr	r3, [r3, #20]
 800ee16:	431a      	orrs	r2, r3
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	69db      	ldr	r3, [r3, #28]
 800ee1c:	4313      	orrs	r3, r2
 800ee1e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	4bbe      	ldr	r3, [pc, #760]	; (800f120 <UART_SetConfig+0x328>)
 800ee28:	4013      	ands	r3, r2
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	6812      	ldr	r2, [r2, #0]
 800ee2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee30:	430b      	orrs	r3, r1
 800ee32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	68da      	ldr	r2, [r3, #12]
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	430a      	orrs	r2, r1
 800ee48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	699b      	ldr	r3, [r3, #24]
 800ee4e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	4ab3      	ldr	r2, [pc, #716]	; (800f124 <UART_SetConfig+0x32c>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d004      	beq.n	800ee64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee60:	4313      	orrs	r3, r2
 800ee62:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	689a      	ldr	r2, [r3, #8]
 800ee6a:	4baf      	ldr	r3, [pc, #700]	; (800f128 <UART_SetConfig+0x330>)
 800ee6c:	4013      	ands	r3, r2
 800ee6e:	697a      	ldr	r2, [r7, #20]
 800ee70:	6812      	ldr	r2, [r2, #0]
 800ee72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee74:	430b      	orrs	r3, r1
 800ee76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee7e:	f023 010f 	bic.w	r1, r3, #15
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	430a      	orrs	r2, r1
 800ee8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	4aa6      	ldr	r2, [pc, #664]	; (800f12c <UART_SetConfig+0x334>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d177      	bne.n	800ef88 <UART_SetConfig+0x190>
 800ee98:	4ba5      	ldr	r3, [pc, #660]	; (800f130 <UART_SetConfig+0x338>)
 800ee9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eea0:	2b28      	cmp	r3, #40	; 0x28
 800eea2:	d86d      	bhi.n	800ef80 <UART_SetConfig+0x188>
 800eea4:	a201      	add	r2, pc, #4	; (adr r2, 800eeac <UART_SetConfig+0xb4>)
 800eea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeaa:	bf00      	nop
 800eeac:	0800ef51 	.word	0x0800ef51
 800eeb0:	0800ef81 	.word	0x0800ef81
 800eeb4:	0800ef81 	.word	0x0800ef81
 800eeb8:	0800ef81 	.word	0x0800ef81
 800eebc:	0800ef81 	.word	0x0800ef81
 800eec0:	0800ef81 	.word	0x0800ef81
 800eec4:	0800ef81 	.word	0x0800ef81
 800eec8:	0800ef81 	.word	0x0800ef81
 800eecc:	0800ef59 	.word	0x0800ef59
 800eed0:	0800ef81 	.word	0x0800ef81
 800eed4:	0800ef81 	.word	0x0800ef81
 800eed8:	0800ef81 	.word	0x0800ef81
 800eedc:	0800ef81 	.word	0x0800ef81
 800eee0:	0800ef81 	.word	0x0800ef81
 800eee4:	0800ef81 	.word	0x0800ef81
 800eee8:	0800ef81 	.word	0x0800ef81
 800eeec:	0800ef61 	.word	0x0800ef61
 800eef0:	0800ef81 	.word	0x0800ef81
 800eef4:	0800ef81 	.word	0x0800ef81
 800eef8:	0800ef81 	.word	0x0800ef81
 800eefc:	0800ef81 	.word	0x0800ef81
 800ef00:	0800ef81 	.word	0x0800ef81
 800ef04:	0800ef81 	.word	0x0800ef81
 800ef08:	0800ef81 	.word	0x0800ef81
 800ef0c:	0800ef69 	.word	0x0800ef69
 800ef10:	0800ef81 	.word	0x0800ef81
 800ef14:	0800ef81 	.word	0x0800ef81
 800ef18:	0800ef81 	.word	0x0800ef81
 800ef1c:	0800ef81 	.word	0x0800ef81
 800ef20:	0800ef81 	.word	0x0800ef81
 800ef24:	0800ef81 	.word	0x0800ef81
 800ef28:	0800ef81 	.word	0x0800ef81
 800ef2c:	0800ef71 	.word	0x0800ef71
 800ef30:	0800ef81 	.word	0x0800ef81
 800ef34:	0800ef81 	.word	0x0800ef81
 800ef38:	0800ef81 	.word	0x0800ef81
 800ef3c:	0800ef81 	.word	0x0800ef81
 800ef40:	0800ef81 	.word	0x0800ef81
 800ef44:	0800ef81 	.word	0x0800ef81
 800ef48:	0800ef81 	.word	0x0800ef81
 800ef4c:	0800ef79 	.word	0x0800ef79
 800ef50:	2301      	movs	r3, #1
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef56:	e222      	b.n	800f39e <UART_SetConfig+0x5a6>
 800ef58:	2304      	movs	r3, #4
 800ef5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef5e:	e21e      	b.n	800f39e <UART_SetConfig+0x5a6>
 800ef60:	2308      	movs	r3, #8
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef66:	e21a      	b.n	800f39e <UART_SetConfig+0x5a6>
 800ef68:	2310      	movs	r3, #16
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6e:	e216      	b.n	800f39e <UART_SetConfig+0x5a6>
 800ef70:	2320      	movs	r3, #32
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef76:	e212      	b.n	800f39e <UART_SetConfig+0x5a6>
 800ef78:	2340      	movs	r3, #64	; 0x40
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7e:	e20e      	b.n	800f39e <UART_SetConfig+0x5a6>
 800ef80:	2380      	movs	r3, #128	; 0x80
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef86:	e20a      	b.n	800f39e <UART_SetConfig+0x5a6>
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a69      	ldr	r2, [pc, #420]	; (800f134 <UART_SetConfig+0x33c>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d130      	bne.n	800eff4 <UART_SetConfig+0x1fc>
 800ef92:	4b67      	ldr	r3, [pc, #412]	; (800f130 <UART_SetConfig+0x338>)
 800ef94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef96:	f003 0307 	and.w	r3, r3, #7
 800ef9a:	2b05      	cmp	r3, #5
 800ef9c:	d826      	bhi.n	800efec <UART_SetConfig+0x1f4>
 800ef9e:	a201      	add	r2, pc, #4	; (adr r2, 800efa4 <UART_SetConfig+0x1ac>)
 800efa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa4:	0800efbd 	.word	0x0800efbd
 800efa8:	0800efc5 	.word	0x0800efc5
 800efac:	0800efcd 	.word	0x0800efcd
 800efb0:	0800efd5 	.word	0x0800efd5
 800efb4:	0800efdd 	.word	0x0800efdd
 800efb8:	0800efe5 	.word	0x0800efe5
 800efbc:	2300      	movs	r3, #0
 800efbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efc2:	e1ec      	b.n	800f39e <UART_SetConfig+0x5a6>
 800efc4:	2304      	movs	r3, #4
 800efc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efca:	e1e8      	b.n	800f39e <UART_SetConfig+0x5a6>
 800efcc:	2308      	movs	r3, #8
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efd2:	e1e4      	b.n	800f39e <UART_SetConfig+0x5a6>
 800efd4:	2310      	movs	r3, #16
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efda:	e1e0      	b.n	800f39e <UART_SetConfig+0x5a6>
 800efdc:	2320      	movs	r3, #32
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efe2:	e1dc      	b.n	800f39e <UART_SetConfig+0x5a6>
 800efe4:	2340      	movs	r3, #64	; 0x40
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efea:	e1d8      	b.n	800f39e <UART_SetConfig+0x5a6>
 800efec:	2380      	movs	r3, #128	; 0x80
 800efee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eff2:	e1d4      	b.n	800f39e <UART_SetConfig+0x5a6>
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4a4f      	ldr	r2, [pc, #316]	; (800f138 <UART_SetConfig+0x340>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d130      	bne.n	800f060 <UART_SetConfig+0x268>
 800effe:	4b4c      	ldr	r3, [pc, #304]	; (800f130 <UART_SetConfig+0x338>)
 800f000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f002:	f003 0307 	and.w	r3, r3, #7
 800f006:	2b05      	cmp	r3, #5
 800f008:	d826      	bhi.n	800f058 <UART_SetConfig+0x260>
 800f00a:	a201      	add	r2, pc, #4	; (adr r2, 800f010 <UART_SetConfig+0x218>)
 800f00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f010:	0800f029 	.word	0x0800f029
 800f014:	0800f031 	.word	0x0800f031
 800f018:	0800f039 	.word	0x0800f039
 800f01c:	0800f041 	.word	0x0800f041
 800f020:	0800f049 	.word	0x0800f049
 800f024:	0800f051 	.word	0x0800f051
 800f028:	2300      	movs	r3, #0
 800f02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f02e:	e1b6      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f030:	2304      	movs	r3, #4
 800f032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f036:	e1b2      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f038:	2308      	movs	r3, #8
 800f03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03e:	e1ae      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f040:	2310      	movs	r3, #16
 800f042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f046:	e1aa      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f048:	2320      	movs	r3, #32
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04e:	e1a6      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f050:	2340      	movs	r3, #64	; 0x40
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f056:	e1a2      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f058:	2380      	movs	r3, #128	; 0x80
 800f05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05e:	e19e      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4a35      	ldr	r2, [pc, #212]	; (800f13c <UART_SetConfig+0x344>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d130      	bne.n	800f0cc <UART_SetConfig+0x2d4>
 800f06a:	4b31      	ldr	r3, [pc, #196]	; (800f130 <UART_SetConfig+0x338>)
 800f06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f06e:	f003 0307 	and.w	r3, r3, #7
 800f072:	2b05      	cmp	r3, #5
 800f074:	d826      	bhi.n	800f0c4 <UART_SetConfig+0x2cc>
 800f076:	a201      	add	r2, pc, #4	; (adr r2, 800f07c <UART_SetConfig+0x284>)
 800f078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f07c:	0800f095 	.word	0x0800f095
 800f080:	0800f09d 	.word	0x0800f09d
 800f084:	0800f0a5 	.word	0x0800f0a5
 800f088:	0800f0ad 	.word	0x0800f0ad
 800f08c:	0800f0b5 	.word	0x0800f0b5
 800f090:	0800f0bd 	.word	0x0800f0bd
 800f094:	2300      	movs	r3, #0
 800f096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f09a:	e180      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f09c:	2304      	movs	r3, #4
 800f09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0a2:	e17c      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f0a4:	2308      	movs	r3, #8
 800f0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0aa:	e178      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f0ac:	2310      	movs	r3, #16
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0b2:	e174      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f0b4:	2320      	movs	r3, #32
 800f0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ba:	e170      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f0bc:	2340      	movs	r3, #64	; 0x40
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c2:	e16c      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f0c4:	2380      	movs	r3, #128	; 0x80
 800f0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ca:	e168      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	4a1b      	ldr	r2, [pc, #108]	; (800f140 <UART_SetConfig+0x348>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d142      	bne.n	800f15c <UART_SetConfig+0x364>
 800f0d6:	4b16      	ldr	r3, [pc, #88]	; (800f130 <UART_SetConfig+0x338>)
 800f0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0da:	f003 0307 	and.w	r3, r3, #7
 800f0de:	2b05      	cmp	r3, #5
 800f0e0:	d838      	bhi.n	800f154 <UART_SetConfig+0x35c>
 800f0e2:	a201      	add	r2, pc, #4	; (adr r2, 800f0e8 <UART_SetConfig+0x2f0>)
 800f0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e8:	0800f101 	.word	0x0800f101
 800f0ec:	0800f109 	.word	0x0800f109
 800f0f0:	0800f111 	.word	0x0800f111
 800f0f4:	0800f119 	.word	0x0800f119
 800f0f8:	0800f145 	.word	0x0800f145
 800f0fc:	0800f14d 	.word	0x0800f14d
 800f100:	2300      	movs	r3, #0
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f106:	e14a      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f108:	2304      	movs	r3, #4
 800f10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f10e:	e146      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f110:	2308      	movs	r3, #8
 800f112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f116:	e142      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f118:	2310      	movs	r3, #16
 800f11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f11e:	e13e      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f120:	cfff69f3 	.word	0xcfff69f3
 800f124:	58000c00 	.word	0x58000c00
 800f128:	11fff4ff 	.word	0x11fff4ff
 800f12c:	40011000 	.word	0x40011000
 800f130:	58024400 	.word	0x58024400
 800f134:	40004400 	.word	0x40004400
 800f138:	40004800 	.word	0x40004800
 800f13c:	40004c00 	.word	0x40004c00
 800f140:	40005000 	.word	0x40005000
 800f144:	2320      	movs	r3, #32
 800f146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f14a:	e128      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f14c:	2340      	movs	r3, #64	; 0x40
 800f14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f152:	e124      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f154:	2380      	movs	r3, #128	; 0x80
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f15a:	e120      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4acb      	ldr	r2, [pc, #812]	; (800f490 <UART_SetConfig+0x698>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d176      	bne.n	800f254 <UART_SetConfig+0x45c>
 800f166:	4bcb      	ldr	r3, [pc, #812]	; (800f494 <UART_SetConfig+0x69c>)
 800f168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f16a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f16e:	2b28      	cmp	r3, #40	; 0x28
 800f170:	d86c      	bhi.n	800f24c <UART_SetConfig+0x454>
 800f172:	a201      	add	r2, pc, #4	; (adr r2, 800f178 <UART_SetConfig+0x380>)
 800f174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f178:	0800f21d 	.word	0x0800f21d
 800f17c:	0800f24d 	.word	0x0800f24d
 800f180:	0800f24d 	.word	0x0800f24d
 800f184:	0800f24d 	.word	0x0800f24d
 800f188:	0800f24d 	.word	0x0800f24d
 800f18c:	0800f24d 	.word	0x0800f24d
 800f190:	0800f24d 	.word	0x0800f24d
 800f194:	0800f24d 	.word	0x0800f24d
 800f198:	0800f225 	.word	0x0800f225
 800f19c:	0800f24d 	.word	0x0800f24d
 800f1a0:	0800f24d 	.word	0x0800f24d
 800f1a4:	0800f24d 	.word	0x0800f24d
 800f1a8:	0800f24d 	.word	0x0800f24d
 800f1ac:	0800f24d 	.word	0x0800f24d
 800f1b0:	0800f24d 	.word	0x0800f24d
 800f1b4:	0800f24d 	.word	0x0800f24d
 800f1b8:	0800f22d 	.word	0x0800f22d
 800f1bc:	0800f24d 	.word	0x0800f24d
 800f1c0:	0800f24d 	.word	0x0800f24d
 800f1c4:	0800f24d 	.word	0x0800f24d
 800f1c8:	0800f24d 	.word	0x0800f24d
 800f1cc:	0800f24d 	.word	0x0800f24d
 800f1d0:	0800f24d 	.word	0x0800f24d
 800f1d4:	0800f24d 	.word	0x0800f24d
 800f1d8:	0800f235 	.word	0x0800f235
 800f1dc:	0800f24d 	.word	0x0800f24d
 800f1e0:	0800f24d 	.word	0x0800f24d
 800f1e4:	0800f24d 	.word	0x0800f24d
 800f1e8:	0800f24d 	.word	0x0800f24d
 800f1ec:	0800f24d 	.word	0x0800f24d
 800f1f0:	0800f24d 	.word	0x0800f24d
 800f1f4:	0800f24d 	.word	0x0800f24d
 800f1f8:	0800f23d 	.word	0x0800f23d
 800f1fc:	0800f24d 	.word	0x0800f24d
 800f200:	0800f24d 	.word	0x0800f24d
 800f204:	0800f24d 	.word	0x0800f24d
 800f208:	0800f24d 	.word	0x0800f24d
 800f20c:	0800f24d 	.word	0x0800f24d
 800f210:	0800f24d 	.word	0x0800f24d
 800f214:	0800f24d 	.word	0x0800f24d
 800f218:	0800f245 	.word	0x0800f245
 800f21c:	2301      	movs	r3, #1
 800f21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f222:	e0bc      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f224:	2304      	movs	r3, #4
 800f226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f22a:	e0b8      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f22c:	2308      	movs	r3, #8
 800f22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f232:	e0b4      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f234:	2310      	movs	r3, #16
 800f236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f23a:	e0b0      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f23c:	2320      	movs	r3, #32
 800f23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f242:	e0ac      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f244:	2340      	movs	r3, #64	; 0x40
 800f246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f24a:	e0a8      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f24c:	2380      	movs	r3, #128	; 0x80
 800f24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f252:	e0a4      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4a8f      	ldr	r2, [pc, #572]	; (800f498 <UART_SetConfig+0x6a0>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d130      	bne.n	800f2c0 <UART_SetConfig+0x4c8>
 800f25e:	4b8d      	ldr	r3, [pc, #564]	; (800f494 <UART_SetConfig+0x69c>)
 800f260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f262:	f003 0307 	and.w	r3, r3, #7
 800f266:	2b05      	cmp	r3, #5
 800f268:	d826      	bhi.n	800f2b8 <UART_SetConfig+0x4c0>
 800f26a:	a201      	add	r2, pc, #4	; (adr r2, 800f270 <UART_SetConfig+0x478>)
 800f26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f270:	0800f289 	.word	0x0800f289
 800f274:	0800f291 	.word	0x0800f291
 800f278:	0800f299 	.word	0x0800f299
 800f27c:	0800f2a1 	.word	0x0800f2a1
 800f280:	0800f2a9 	.word	0x0800f2a9
 800f284:	0800f2b1 	.word	0x0800f2b1
 800f288:	2300      	movs	r3, #0
 800f28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f28e:	e086      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f290:	2304      	movs	r3, #4
 800f292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f296:	e082      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f298:	2308      	movs	r3, #8
 800f29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f29e:	e07e      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f2a0:	2310      	movs	r3, #16
 800f2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2a6:	e07a      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f2a8:	2320      	movs	r3, #32
 800f2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ae:	e076      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f2b0:	2340      	movs	r3, #64	; 0x40
 800f2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2b6:	e072      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f2b8:	2380      	movs	r3, #128	; 0x80
 800f2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2be:	e06e      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4a75      	ldr	r2, [pc, #468]	; (800f49c <UART_SetConfig+0x6a4>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d130      	bne.n	800f32c <UART_SetConfig+0x534>
 800f2ca:	4b72      	ldr	r3, [pc, #456]	; (800f494 <UART_SetConfig+0x69c>)
 800f2cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2ce:	f003 0307 	and.w	r3, r3, #7
 800f2d2:	2b05      	cmp	r3, #5
 800f2d4:	d826      	bhi.n	800f324 <UART_SetConfig+0x52c>
 800f2d6:	a201      	add	r2, pc, #4	; (adr r2, 800f2dc <UART_SetConfig+0x4e4>)
 800f2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2dc:	0800f2f5 	.word	0x0800f2f5
 800f2e0:	0800f2fd 	.word	0x0800f2fd
 800f2e4:	0800f305 	.word	0x0800f305
 800f2e8:	0800f30d 	.word	0x0800f30d
 800f2ec:	0800f315 	.word	0x0800f315
 800f2f0:	0800f31d 	.word	0x0800f31d
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2fa:	e050      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f2fc:	2304      	movs	r3, #4
 800f2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f302:	e04c      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f304:	2308      	movs	r3, #8
 800f306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f30a:	e048      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f30c:	2310      	movs	r3, #16
 800f30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f312:	e044      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f314:	2320      	movs	r3, #32
 800f316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f31a:	e040      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f31c:	2340      	movs	r3, #64	; 0x40
 800f31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f322:	e03c      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f324:	2380      	movs	r3, #128	; 0x80
 800f326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f32a:	e038      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4a5b      	ldr	r2, [pc, #364]	; (800f4a0 <UART_SetConfig+0x6a8>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d130      	bne.n	800f398 <UART_SetConfig+0x5a0>
 800f336:	4b57      	ldr	r3, [pc, #348]	; (800f494 <UART_SetConfig+0x69c>)
 800f338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f33a:	f003 0307 	and.w	r3, r3, #7
 800f33e:	2b05      	cmp	r3, #5
 800f340:	d826      	bhi.n	800f390 <UART_SetConfig+0x598>
 800f342:	a201      	add	r2, pc, #4	; (adr r2, 800f348 <UART_SetConfig+0x550>)
 800f344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f348:	0800f361 	.word	0x0800f361
 800f34c:	0800f369 	.word	0x0800f369
 800f350:	0800f371 	.word	0x0800f371
 800f354:	0800f379 	.word	0x0800f379
 800f358:	0800f381 	.word	0x0800f381
 800f35c:	0800f389 	.word	0x0800f389
 800f360:	2302      	movs	r3, #2
 800f362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f366:	e01a      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f368:	2304      	movs	r3, #4
 800f36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f36e:	e016      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f370:	2308      	movs	r3, #8
 800f372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f376:	e012      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f378:	2310      	movs	r3, #16
 800f37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f37e:	e00e      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f380:	2320      	movs	r3, #32
 800f382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f386:	e00a      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f388:	2340      	movs	r3, #64	; 0x40
 800f38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f38e:	e006      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f390:	2380      	movs	r3, #128	; 0x80
 800f392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f396:	e002      	b.n	800f39e <UART_SetConfig+0x5a6>
 800f398:	2380      	movs	r3, #128	; 0x80
 800f39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4a3f      	ldr	r2, [pc, #252]	; (800f4a0 <UART_SetConfig+0x6a8>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	f040 80f8 	bne.w	800f59a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f3aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f3ae:	2b20      	cmp	r3, #32
 800f3b0:	dc46      	bgt.n	800f440 <UART_SetConfig+0x648>
 800f3b2:	2b02      	cmp	r3, #2
 800f3b4:	f2c0 8082 	blt.w	800f4bc <UART_SetConfig+0x6c4>
 800f3b8:	3b02      	subs	r3, #2
 800f3ba:	2b1e      	cmp	r3, #30
 800f3bc:	d87e      	bhi.n	800f4bc <UART_SetConfig+0x6c4>
 800f3be:	a201      	add	r2, pc, #4	; (adr r2, 800f3c4 <UART_SetConfig+0x5cc>)
 800f3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3c4:	0800f447 	.word	0x0800f447
 800f3c8:	0800f4bd 	.word	0x0800f4bd
 800f3cc:	0800f44f 	.word	0x0800f44f
 800f3d0:	0800f4bd 	.word	0x0800f4bd
 800f3d4:	0800f4bd 	.word	0x0800f4bd
 800f3d8:	0800f4bd 	.word	0x0800f4bd
 800f3dc:	0800f45f 	.word	0x0800f45f
 800f3e0:	0800f4bd 	.word	0x0800f4bd
 800f3e4:	0800f4bd 	.word	0x0800f4bd
 800f3e8:	0800f4bd 	.word	0x0800f4bd
 800f3ec:	0800f4bd 	.word	0x0800f4bd
 800f3f0:	0800f4bd 	.word	0x0800f4bd
 800f3f4:	0800f4bd 	.word	0x0800f4bd
 800f3f8:	0800f4bd 	.word	0x0800f4bd
 800f3fc:	0800f46f 	.word	0x0800f46f
 800f400:	0800f4bd 	.word	0x0800f4bd
 800f404:	0800f4bd 	.word	0x0800f4bd
 800f408:	0800f4bd 	.word	0x0800f4bd
 800f40c:	0800f4bd 	.word	0x0800f4bd
 800f410:	0800f4bd 	.word	0x0800f4bd
 800f414:	0800f4bd 	.word	0x0800f4bd
 800f418:	0800f4bd 	.word	0x0800f4bd
 800f41c:	0800f4bd 	.word	0x0800f4bd
 800f420:	0800f4bd 	.word	0x0800f4bd
 800f424:	0800f4bd 	.word	0x0800f4bd
 800f428:	0800f4bd 	.word	0x0800f4bd
 800f42c:	0800f4bd 	.word	0x0800f4bd
 800f430:	0800f4bd 	.word	0x0800f4bd
 800f434:	0800f4bd 	.word	0x0800f4bd
 800f438:	0800f4bd 	.word	0x0800f4bd
 800f43c:	0800f4af 	.word	0x0800f4af
 800f440:	2b40      	cmp	r3, #64	; 0x40
 800f442:	d037      	beq.n	800f4b4 <UART_SetConfig+0x6bc>
 800f444:	e03a      	b.n	800f4bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f446:	f7fc f8d5 	bl	800b5f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f44a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f44c:	e03c      	b.n	800f4c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f44e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f452:	4618      	mov	r0, r3
 800f454:	f7fc f8e4 	bl	800b620 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f45c:	e034      	b.n	800f4c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f45e:	f107 0318 	add.w	r3, r7, #24
 800f462:	4618      	mov	r0, r3
 800f464:	f7fc fa30 	bl	800b8c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f46c:	e02c      	b.n	800f4c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f46e:	4b09      	ldr	r3, [pc, #36]	; (800f494 <UART_SetConfig+0x69c>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f003 0320 	and.w	r3, r3, #32
 800f476:	2b00      	cmp	r3, #0
 800f478:	d016      	beq.n	800f4a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f47a:	4b06      	ldr	r3, [pc, #24]	; (800f494 <UART_SetConfig+0x69c>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	08db      	lsrs	r3, r3, #3
 800f480:	f003 0303 	and.w	r3, r3, #3
 800f484:	4a07      	ldr	r2, [pc, #28]	; (800f4a4 <UART_SetConfig+0x6ac>)
 800f486:	fa22 f303 	lsr.w	r3, r2, r3
 800f48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f48c:	e01c      	b.n	800f4c8 <UART_SetConfig+0x6d0>
 800f48e:	bf00      	nop
 800f490:	40011400 	.word	0x40011400
 800f494:	58024400 	.word	0x58024400
 800f498:	40007800 	.word	0x40007800
 800f49c:	40007c00 	.word	0x40007c00
 800f4a0:	58000c00 	.word	0x58000c00
 800f4a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f4a8:	4b9d      	ldr	r3, [pc, #628]	; (800f720 <UART_SetConfig+0x928>)
 800f4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4ac:	e00c      	b.n	800f4c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f4ae:	4b9d      	ldr	r3, [pc, #628]	; (800f724 <UART_SetConfig+0x92c>)
 800f4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4b2:	e009      	b.n	800f4c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4ba:	e005      	b.n	800f4c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f4c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	f000 81de 	beq.w	800f88c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d4:	4a94      	ldr	r2, [pc, #592]	; (800f728 <UART_SetConfig+0x930>)
 800f4d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4de:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4e2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	685a      	ldr	r2, [r3, #4]
 800f4e8:	4613      	mov	r3, r2
 800f4ea:	005b      	lsls	r3, r3, #1
 800f4ec:	4413      	add	r3, r2
 800f4ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d305      	bcc.n	800f500 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f4fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d903      	bls.n	800f508 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f500:	2301      	movs	r3, #1
 800f502:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f506:	e1c1      	b.n	800f88c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f50a:	2200      	movs	r2, #0
 800f50c:	60bb      	str	r3, [r7, #8]
 800f50e:	60fa      	str	r2, [r7, #12]
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f514:	4a84      	ldr	r2, [pc, #528]	; (800f728 <UART_SetConfig+0x930>)
 800f516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	2200      	movs	r2, #0
 800f51e:	603b      	str	r3, [r7, #0]
 800f520:	607a      	str	r2, [r7, #4]
 800f522:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f526:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f52a:	f7f0 fed5 	bl	80002d8 <__aeabi_uldivmod>
 800f52e:	4602      	mov	r2, r0
 800f530:	460b      	mov	r3, r1
 800f532:	4610      	mov	r0, r2
 800f534:	4619      	mov	r1, r3
 800f536:	f04f 0200 	mov.w	r2, #0
 800f53a:	f04f 0300 	mov.w	r3, #0
 800f53e:	020b      	lsls	r3, r1, #8
 800f540:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f544:	0202      	lsls	r2, r0, #8
 800f546:	6979      	ldr	r1, [r7, #20]
 800f548:	6849      	ldr	r1, [r1, #4]
 800f54a:	0849      	lsrs	r1, r1, #1
 800f54c:	2000      	movs	r0, #0
 800f54e:	460c      	mov	r4, r1
 800f550:	4605      	mov	r5, r0
 800f552:	eb12 0804 	adds.w	r8, r2, r4
 800f556:	eb43 0905 	adc.w	r9, r3, r5
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	2200      	movs	r2, #0
 800f560:	469a      	mov	sl, r3
 800f562:	4693      	mov	fp, r2
 800f564:	4652      	mov	r2, sl
 800f566:	465b      	mov	r3, fp
 800f568:	4640      	mov	r0, r8
 800f56a:	4649      	mov	r1, r9
 800f56c:	f7f0 feb4 	bl	80002d8 <__aeabi_uldivmod>
 800f570:	4602      	mov	r2, r0
 800f572:	460b      	mov	r3, r1
 800f574:	4613      	mov	r3, r2
 800f576:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f57e:	d308      	bcc.n	800f592 <UART_SetConfig+0x79a>
 800f580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f586:	d204      	bcs.n	800f592 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f58e:	60da      	str	r2, [r3, #12]
 800f590:	e17c      	b.n	800f88c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f592:	2301      	movs	r3, #1
 800f594:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f598:	e178      	b.n	800f88c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	69db      	ldr	r3, [r3, #28]
 800f59e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5a2:	f040 80c5 	bne.w	800f730 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f5a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f5aa:	2b20      	cmp	r3, #32
 800f5ac:	dc48      	bgt.n	800f640 <UART_SetConfig+0x848>
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	db7b      	blt.n	800f6aa <UART_SetConfig+0x8b2>
 800f5b2:	2b20      	cmp	r3, #32
 800f5b4:	d879      	bhi.n	800f6aa <UART_SetConfig+0x8b2>
 800f5b6:	a201      	add	r2, pc, #4	; (adr r2, 800f5bc <UART_SetConfig+0x7c4>)
 800f5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5bc:	0800f647 	.word	0x0800f647
 800f5c0:	0800f64f 	.word	0x0800f64f
 800f5c4:	0800f6ab 	.word	0x0800f6ab
 800f5c8:	0800f6ab 	.word	0x0800f6ab
 800f5cc:	0800f657 	.word	0x0800f657
 800f5d0:	0800f6ab 	.word	0x0800f6ab
 800f5d4:	0800f6ab 	.word	0x0800f6ab
 800f5d8:	0800f6ab 	.word	0x0800f6ab
 800f5dc:	0800f667 	.word	0x0800f667
 800f5e0:	0800f6ab 	.word	0x0800f6ab
 800f5e4:	0800f6ab 	.word	0x0800f6ab
 800f5e8:	0800f6ab 	.word	0x0800f6ab
 800f5ec:	0800f6ab 	.word	0x0800f6ab
 800f5f0:	0800f6ab 	.word	0x0800f6ab
 800f5f4:	0800f6ab 	.word	0x0800f6ab
 800f5f8:	0800f6ab 	.word	0x0800f6ab
 800f5fc:	0800f677 	.word	0x0800f677
 800f600:	0800f6ab 	.word	0x0800f6ab
 800f604:	0800f6ab 	.word	0x0800f6ab
 800f608:	0800f6ab 	.word	0x0800f6ab
 800f60c:	0800f6ab 	.word	0x0800f6ab
 800f610:	0800f6ab 	.word	0x0800f6ab
 800f614:	0800f6ab 	.word	0x0800f6ab
 800f618:	0800f6ab 	.word	0x0800f6ab
 800f61c:	0800f6ab 	.word	0x0800f6ab
 800f620:	0800f6ab 	.word	0x0800f6ab
 800f624:	0800f6ab 	.word	0x0800f6ab
 800f628:	0800f6ab 	.word	0x0800f6ab
 800f62c:	0800f6ab 	.word	0x0800f6ab
 800f630:	0800f6ab 	.word	0x0800f6ab
 800f634:	0800f6ab 	.word	0x0800f6ab
 800f638:	0800f6ab 	.word	0x0800f6ab
 800f63c:	0800f69d 	.word	0x0800f69d
 800f640:	2b40      	cmp	r3, #64	; 0x40
 800f642:	d02e      	beq.n	800f6a2 <UART_SetConfig+0x8aa>
 800f644:	e031      	b.n	800f6aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f646:	f7fa f81f 	bl	8009688 <HAL_RCC_GetPCLK1Freq>
 800f64a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f64c:	e033      	b.n	800f6b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f64e:	f7fa f831 	bl	80096b4 <HAL_RCC_GetPCLK2Freq>
 800f652:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f654:	e02f      	b.n	800f6b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fb ffe0 	bl	800b620 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f664:	e027      	b.n	800f6b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f666:	f107 0318 	add.w	r3, r7, #24
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fc f92c 	bl	800b8c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f674:	e01f      	b.n	800f6b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f676:	4b2d      	ldr	r3, [pc, #180]	; (800f72c <UART_SetConfig+0x934>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f003 0320 	and.w	r3, r3, #32
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d009      	beq.n	800f696 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f682:	4b2a      	ldr	r3, [pc, #168]	; (800f72c <UART_SetConfig+0x934>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	08db      	lsrs	r3, r3, #3
 800f688:	f003 0303 	and.w	r3, r3, #3
 800f68c:	4a24      	ldr	r2, [pc, #144]	; (800f720 <UART_SetConfig+0x928>)
 800f68e:	fa22 f303 	lsr.w	r3, r2, r3
 800f692:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f694:	e00f      	b.n	800f6b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f696:	4b22      	ldr	r3, [pc, #136]	; (800f720 <UART_SetConfig+0x928>)
 800f698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f69a:	e00c      	b.n	800f6b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f69c:	4b21      	ldr	r3, [pc, #132]	; (800f724 <UART_SetConfig+0x92c>)
 800f69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6a0:	e009      	b.n	800f6b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6a8:	e005      	b.n	800f6b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f6b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f6b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f000 80e7 	beq.w	800f88c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c2:	4a19      	ldr	r2, [pc, #100]	; (800f728 <UART_SetConfig+0x930>)
 800f6c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6d0:	005a      	lsls	r2, r3, #1
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	685b      	ldr	r3, [r3, #4]
 800f6d6:	085b      	lsrs	r3, r3, #1
 800f6d8:	441a      	add	r2, r3
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e6:	2b0f      	cmp	r3, #15
 800f6e8:	d916      	bls.n	800f718 <UART_SetConfig+0x920>
 800f6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6f0:	d212      	bcs.n	800f718 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	f023 030f 	bic.w	r3, r3, #15
 800f6fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6fe:	085b      	lsrs	r3, r3, #1
 800f700:	b29b      	uxth	r3, r3
 800f702:	f003 0307 	and.w	r3, r3, #7
 800f706:	b29a      	uxth	r2, r3
 800f708:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f70a:	4313      	orrs	r3, r2
 800f70c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f714:	60da      	str	r2, [r3, #12]
 800f716:	e0b9      	b.n	800f88c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f718:	2301      	movs	r3, #1
 800f71a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f71e:	e0b5      	b.n	800f88c <UART_SetConfig+0xa94>
 800f720:	03d09000 	.word	0x03d09000
 800f724:	003d0900 	.word	0x003d0900
 800f728:	08010f30 	.word	0x08010f30
 800f72c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f730:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f734:	2b20      	cmp	r3, #32
 800f736:	dc49      	bgt.n	800f7cc <UART_SetConfig+0x9d4>
 800f738:	2b00      	cmp	r3, #0
 800f73a:	db7c      	blt.n	800f836 <UART_SetConfig+0xa3e>
 800f73c:	2b20      	cmp	r3, #32
 800f73e:	d87a      	bhi.n	800f836 <UART_SetConfig+0xa3e>
 800f740:	a201      	add	r2, pc, #4	; (adr r2, 800f748 <UART_SetConfig+0x950>)
 800f742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f746:	bf00      	nop
 800f748:	0800f7d3 	.word	0x0800f7d3
 800f74c:	0800f7db 	.word	0x0800f7db
 800f750:	0800f837 	.word	0x0800f837
 800f754:	0800f837 	.word	0x0800f837
 800f758:	0800f7e3 	.word	0x0800f7e3
 800f75c:	0800f837 	.word	0x0800f837
 800f760:	0800f837 	.word	0x0800f837
 800f764:	0800f837 	.word	0x0800f837
 800f768:	0800f7f3 	.word	0x0800f7f3
 800f76c:	0800f837 	.word	0x0800f837
 800f770:	0800f837 	.word	0x0800f837
 800f774:	0800f837 	.word	0x0800f837
 800f778:	0800f837 	.word	0x0800f837
 800f77c:	0800f837 	.word	0x0800f837
 800f780:	0800f837 	.word	0x0800f837
 800f784:	0800f837 	.word	0x0800f837
 800f788:	0800f803 	.word	0x0800f803
 800f78c:	0800f837 	.word	0x0800f837
 800f790:	0800f837 	.word	0x0800f837
 800f794:	0800f837 	.word	0x0800f837
 800f798:	0800f837 	.word	0x0800f837
 800f79c:	0800f837 	.word	0x0800f837
 800f7a0:	0800f837 	.word	0x0800f837
 800f7a4:	0800f837 	.word	0x0800f837
 800f7a8:	0800f837 	.word	0x0800f837
 800f7ac:	0800f837 	.word	0x0800f837
 800f7b0:	0800f837 	.word	0x0800f837
 800f7b4:	0800f837 	.word	0x0800f837
 800f7b8:	0800f837 	.word	0x0800f837
 800f7bc:	0800f837 	.word	0x0800f837
 800f7c0:	0800f837 	.word	0x0800f837
 800f7c4:	0800f837 	.word	0x0800f837
 800f7c8:	0800f829 	.word	0x0800f829
 800f7cc:	2b40      	cmp	r3, #64	; 0x40
 800f7ce:	d02e      	beq.n	800f82e <UART_SetConfig+0xa36>
 800f7d0:	e031      	b.n	800f836 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f7d2:	f7f9 ff59 	bl	8009688 <HAL_RCC_GetPCLK1Freq>
 800f7d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f7d8:	e033      	b.n	800f842 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f7da:	f7f9 ff6b 	bl	80096b4 <HAL_RCC_GetPCLK2Freq>
 800f7de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f7e0:	e02f      	b.n	800f842 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f7e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fb ff1a 	bl	800b620 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7f0:	e027      	b.n	800f842 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7f2:	f107 0318 	add.w	r3, r7, #24
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fc f866 	bl	800b8c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f800:	e01f      	b.n	800f842 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f802:	4b2d      	ldr	r3, [pc, #180]	; (800f8b8 <UART_SetConfig+0xac0>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f003 0320 	and.w	r3, r3, #32
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d009      	beq.n	800f822 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f80e:	4b2a      	ldr	r3, [pc, #168]	; (800f8b8 <UART_SetConfig+0xac0>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	08db      	lsrs	r3, r3, #3
 800f814:	f003 0303 	and.w	r3, r3, #3
 800f818:	4a28      	ldr	r2, [pc, #160]	; (800f8bc <UART_SetConfig+0xac4>)
 800f81a:	fa22 f303 	lsr.w	r3, r2, r3
 800f81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f820:	e00f      	b.n	800f842 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f822:	4b26      	ldr	r3, [pc, #152]	; (800f8bc <UART_SetConfig+0xac4>)
 800f824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f826:	e00c      	b.n	800f842 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f828:	4b25      	ldr	r3, [pc, #148]	; (800f8c0 <UART_SetConfig+0xac8>)
 800f82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f82c:	e009      	b.n	800f842 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f82e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f834:	e005      	b.n	800f842 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f836:	2300      	movs	r3, #0
 800f838:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f83a:	2301      	movs	r3, #1
 800f83c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f840:	bf00      	nop
    }

    if (pclk != 0U)
 800f842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f844:	2b00      	cmp	r3, #0
 800f846:	d021      	beq.n	800f88c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f84c:	4a1d      	ldr	r2, [pc, #116]	; (800f8c4 <UART_SetConfig+0xacc>)
 800f84e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f852:	461a      	mov	r2, r3
 800f854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f856:	fbb3 f2f2 	udiv	r2, r3, r2
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	085b      	lsrs	r3, r3, #1
 800f860:	441a      	add	r2, r3
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	fbb2 f3f3 	udiv	r3, r2, r3
 800f86a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f86e:	2b0f      	cmp	r3, #15
 800f870:	d909      	bls.n	800f886 <UART_SetConfig+0xa8e>
 800f872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f878:	d205      	bcs.n	800f886 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87c:	b29a      	uxth	r2, r3
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	60da      	str	r2, [r3, #12]
 800f884:	e002      	b.n	800f88c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f886:	2301      	movs	r3, #1
 800f888:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	2201      	movs	r2, #1
 800f890:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	2201      	movs	r2, #1
 800f898:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f8a8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3748      	adds	r7, #72	; 0x48
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f8b6:	bf00      	nop
 800f8b8:	58024400 	.word	0x58024400
 800f8bc:	03d09000 	.word	0x03d09000
 800f8c0:	003d0900 	.word	0x003d0900
 800f8c4:	08010f30 	.word	0x08010f30

0800f8c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b083      	sub	sp, #12
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8d4:	f003 0308 	and.w	r3, r3, #8
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d00a      	beq.n	800f8f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	430a      	orrs	r2, r1
 800f8f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8f6:	f003 0301 	and.w	r3, r3, #1
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d00a      	beq.n	800f914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	430a      	orrs	r2, r1
 800f912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f918:	f003 0302 	and.w	r3, r3, #2
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d00a      	beq.n	800f936 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	430a      	orrs	r2, r1
 800f934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f93a:	f003 0304 	and.w	r3, r3, #4
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00a      	beq.n	800f958 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	430a      	orrs	r2, r1
 800f956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f95c:	f003 0310 	and.w	r3, r3, #16
 800f960:	2b00      	cmp	r3, #0
 800f962:	d00a      	beq.n	800f97a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	689b      	ldr	r3, [r3, #8]
 800f96a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	430a      	orrs	r2, r1
 800f978:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f97e:	f003 0320 	and.w	r3, r3, #32
 800f982:	2b00      	cmp	r3, #0
 800f984:	d00a      	beq.n	800f99c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	430a      	orrs	r2, r1
 800f99a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d01a      	beq.n	800f9de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	430a      	orrs	r2, r1
 800f9bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f9c6:	d10a      	bne.n	800f9de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	685b      	ldr	r3, [r3, #4]
 800f9ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	430a      	orrs	r2, r1
 800f9dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d00a      	beq.n	800fa00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	430a      	orrs	r2, r1
 800f9fe:	605a      	str	r2, [r3, #4]
  }
}
 800fa00:	bf00      	nop
 800fa02:	370c      	adds	r7, #12
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr

0800fa0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b098      	sub	sp, #96	; 0x60
 800fa10:	af02      	add	r7, sp, #8
 800fa12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2200      	movs	r2, #0
 800fa18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa1c:	f7f2 ff02 	bl	8002824 <HAL_GetTick>
 800fa20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f003 0308 	and.w	r3, r3, #8
 800fa2c:	2b08      	cmp	r3, #8
 800fa2e:	d12f      	bne.n	800fa90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fa34:	9300      	str	r3, [sp, #0]
 800fa36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa38:	2200      	movs	r2, #0
 800fa3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f000 f88e 	bl	800fb60 <UART_WaitOnFlagUntilTimeout>
 800fa44:	4603      	mov	r3, r0
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d022      	beq.n	800fa90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa52:	e853 3f00 	ldrex	r3, [r3]
 800fa56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fa58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa5e:	653b      	str	r3, [r7, #80]	; 0x50
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	461a      	mov	r2, r3
 800fa66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa68:	647b      	str	r3, [r7, #68]	; 0x44
 800fa6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa70:	e841 2300 	strex	r3, r2, [r1]
 800fa74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fa76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d1e6      	bne.n	800fa4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2220      	movs	r2, #32
 800fa80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2200      	movs	r2, #0
 800fa88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa8c:	2303      	movs	r3, #3
 800fa8e:	e063      	b.n	800fb58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f003 0304 	and.w	r3, r3, #4
 800fa9a:	2b04      	cmp	r3, #4
 800fa9c:	d149      	bne.n	800fb32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800faa2:	9300      	str	r3, [sp, #0]
 800faa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800faa6:	2200      	movs	r2, #0
 800faa8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f000 f857 	bl	800fb60 <UART_WaitOnFlagUntilTimeout>
 800fab2:	4603      	mov	r3, r0
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d03c      	beq.n	800fb32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac0:	e853 3f00 	ldrex	r3, [r3]
 800fac4:	623b      	str	r3, [r7, #32]
   return(result);
 800fac6:	6a3b      	ldr	r3, [r7, #32]
 800fac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800facc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	461a      	mov	r2, r3
 800fad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fad6:	633b      	str	r3, [r7, #48]	; 0x30
 800fad8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fadc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fade:	e841 2300 	strex	r3, r2, [r1]
 800fae2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d1e6      	bne.n	800fab8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	3308      	adds	r3, #8
 800faf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	e853 3f00 	ldrex	r3, [r3]
 800faf8:	60fb      	str	r3, [r7, #12]
   return(result);
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	f023 0301 	bic.w	r3, r3, #1
 800fb00:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	3308      	adds	r3, #8
 800fb08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb0a:	61fa      	str	r2, [r7, #28]
 800fb0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb0e:	69b9      	ldr	r1, [r7, #24]
 800fb10:	69fa      	ldr	r2, [r7, #28]
 800fb12:	e841 2300 	strex	r3, r2, [r1]
 800fb16:	617b      	str	r3, [r7, #20]
   return(result);
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d1e5      	bne.n	800faea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2220      	movs	r2, #32
 800fb22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb2e:	2303      	movs	r3, #3
 800fb30:	e012      	b.n	800fb58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2220      	movs	r2, #32
 800fb36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2220      	movs	r2, #32
 800fb3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2200      	movs	r2, #0
 800fb52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fb56:	2300      	movs	r3, #0
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3758      	adds	r7, #88	; 0x58
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b084      	sub	sp, #16
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	603b      	str	r3, [r7, #0]
 800fb6c:	4613      	mov	r3, r2
 800fb6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb70:	e04f      	b.n	800fc12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb72:	69bb      	ldr	r3, [r7, #24]
 800fb74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb78:	d04b      	beq.n	800fc12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb7a:	f7f2 fe53 	bl	8002824 <HAL_GetTick>
 800fb7e:	4602      	mov	r2, r0
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	1ad3      	subs	r3, r2, r3
 800fb84:	69ba      	ldr	r2, [r7, #24]
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d302      	bcc.n	800fb90 <UART_WaitOnFlagUntilTimeout+0x30>
 800fb8a:	69bb      	ldr	r3, [r7, #24]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d101      	bne.n	800fb94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fb90:	2303      	movs	r3, #3
 800fb92:	e04e      	b.n	800fc32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f003 0304 	and.w	r3, r3, #4
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d037      	beq.n	800fc12 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	2b80      	cmp	r3, #128	; 0x80
 800fba6:	d034      	beq.n	800fc12 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	2b40      	cmp	r3, #64	; 0x40
 800fbac:	d031      	beq.n	800fc12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	69db      	ldr	r3, [r3, #28]
 800fbb4:	f003 0308 	and.w	r3, r3, #8
 800fbb8:	2b08      	cmp	r3, #8
 800fbba:	d110      	bne.n	800fbde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	2208      	movs	r2, #8
 800fbc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fbc4:	68f8      	ldr	r0, [r7, #12]
 800fbc6:	f000 f95b 	bl	800fe80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2208      	movs	r2, #8
 800fbce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800fbda:	2301      	movs	r3, #1
 800fbdc:	e029      	b.n	800fc32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	69db      	ldr	r3, [r3, #28]
 800fbe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fbe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fbec:	d111      	bne.n	800fc12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fbf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	f000 f941 	bl	800fe80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2220      	movs	r2, #32
 800fc02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fc0e:	2303      	movs	r3, #3
 800fc10:	e00f      	b.n	800fc32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	69da      	ldr	r2, [r3, #28]
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	4013      	ands	r3, r2
 800fc1c:	68ba      	ldr	r2, [r7, #8]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	bf0c      	ite	eq
 800fc22:	2301      	moveq	r3, #1
 800fc24:	2300      	movne	r3, #0
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	461a      	mov	r2, r3
 800fc2a:	79fb      	ldrb	r3, [r7, #7]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d0a0      	beq.n	800fb72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3710      	adds	r7, #16
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
	...

0800fc3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b0a3      	sub	sp, #140	; 0x8c
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	4613      	mov	r3, r2
 800fc48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	68ba      	ldr	r2, [r7, #8]
 800fc4e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	88fa      	ldrh	r2, [r7, #6]
 800fc54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	88fa      	ldrh	r2, [r7, #6]
 800fc5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2200      	movs	r2, #0
 800fc64:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	689b      	ldr	r3, [r3, #8]
 800fc6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc6e:	d10e      	bne.n	800fc8e <UART_Start_Receive_IT+0x52>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	691b      	ldr	r3, [r3, #16]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d105      	bne.n	800fc84 <UART_Start_Receive_IT+0x48>
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fc7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc82:	e02d      	b.n	800fce0 <UART_Start_Receive_IT+0xa4>
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	22ff      	movs	r2, #255	; 0xff
 800fc88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc8c:	e028      	b.n	800fce0 <UART_Start_Receive_IT+0xa4>
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	689b      	ldr	r3, [r3, #8]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d10d      	bne.n	800fcb2 <UART_Start_Receive_IT+0x76>
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	691b      	ldr	r3, [r3, #16]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d104      	bne.n	800fca8 <UART_Start_Receive_IT+0x6c>
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	22ff      	movs	r2, #255	; 0xff
 800fca2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fca6:	e01b      	b.n	800fce0 <UART_Start_Receive_IT+0xa4>
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	227f      	movs	r2, #127	; 0x7f
 800fcac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcb0:	e016      	b.n	800fce0 <UART_Start_Receive_IT+0xa4>
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	689b      	ldr	r3, [r3, #8]
 800fcb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fcba:	d10d      	bne.n	800fcd8 <UART_Start_Receive_IT+0x9c>
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	691b      	ldr	r3, [r3, #16]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d104      	bne.n	800fcce <UART_Start_Receive_IT+0x92>
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	227f      	movs	r2, #127	; 0x7f
 800fcc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fccc:	e008      	b.n	800fce0 <UART_Start_Receive_IT+0xa4>
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	223f      	movs	r2, #63	; 0x3f
 800fcd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcd6:	e003      	b.n	800fce0 <UART_Start_Receive_IT+0xa4>
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2200      	movs	r2, #0
 800fce4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2222      	movs	r2, #34	; 0x22
 800fcec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	3308      	adds	r3, #8
 800fcf6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcfa:	e853 3f00 	ldrex	r3, [r3]
 800fcfe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fd00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd02:	f043 0301 	orr.w	r3, r3, #1
 800fd06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	3308      	adds	r3, #8
 800fd10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fd14:	673a      	str	r2, [r7, #112]	; 0x70
 800fd16:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd18:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fd1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fd1c:	e841 2300 	strex	r3, r2, [r1]
 800fd20:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fd22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d1e3      	bne.n	800fcf0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fd30:	d14f      	bne.n	800fdd2 <UART_Start_Receive_IT+0x196>
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd38:	88fa      	ldrh	r2, [r7, #6]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d349      	bcc.n	800fdd2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	689b      	ldr	r3, [r3, #8]
 800fd42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd46:	d107      	bne.n	800fd58 <UART_Start_Receive_IT+0x11c>
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	691b      	ldr	r3, [r3, #16]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d103      	bne.n	800fd58 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	4a47      	ldr	r2, [pc, #284]	; (800fe70 <UART_Start_Receive_IT+0x234>)
 800fd54:	675a      	str	r2, [r3, #116]	; 0x74
 800fd56:	e002      	b.n	800fd5e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	4a46      	ldr	r2, [pc, #280]	; (800fe74 <UART_Start_Receive_IT+0x238>)
 800fd5c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	691b      	ldr	r3, [r3, #16]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d01a      	beq.n	800fd9c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd6e:	e853 3f00 	ldrex	r3, [r3]
 800fd72:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fd74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	461a      	mov	r2, r3
 800fd84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fd88:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd8a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fd8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd90:	e841 2300 	strex	r3, r2, [r1]
 800fd94:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fd96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d1e4      	bne.n	800fd66 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	3308      	adds	r3, #8
 800fda2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fda4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fda6:	e853 3f00 	ldrex	r3, [r3]
 800fdaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fdb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	3308      	adds	r3, #8
 800fdba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fdbc:	64ba      	str	r2, [r7, #72]	; 0x48
 800fdbe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fdc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdc4:	e841 2300 	strex	r3, r2, [r1]
 800fdc8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fdca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d1e5      	bne.n	800fd9c <UART_Start_Receive_IT+0x160>
 800fdd0:	e046      	b.n	800fe60 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	689b      	ldr	r3, [r3, #8]
 800fdd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdda:	d107      	bne.n	800fdec <UART_Start_Receive_IT+0x1b0>
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	691b      	ldr	r3, [r3, #16]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d103      	bne.n	800fdec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	4a24      	ldr	r2, [pc, #144]	; (800fe78 <UART_Start_Receive_IT+0x23c>)
 800fde8:	675a      	str	r2, [r3, #116]	; 0x74
 800fdea:	e002      	b.n	800fdf2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	4a23      	ldr	r2, [pc, #140]	; (800fe7c <UART_Start_Receive_IT+0x240>)
 800fdf0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	691b      	ldr	r3, [r3, #16]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d019      	beq.n	800fe2e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe02:	e853 3f00 	ldrex	r3, [r3]
 800fe06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe0a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fe0e:	677b      	str	r3, [r7, #116]	; 0x74
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	461a      	mov	r2, r3
 800fe16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe18:	637b      	str	r3, [r7, #52]	; 0x34
 800fe1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe20:	e841 2300 	strex	r3, r2, [r1]
 800fe24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fe26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d1e6      	bne.n	800fdfa <UART_Start_Receive_IT+0x1be>
 800fe2c:	e018      	b.n	800fe60 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	e853 3f00 	ldrex	r3, [r3]
 800fe3a:	613b      	str	r3, [r7, #16]
   return(result);
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	f043 0320 	orr.w	r3, r3, #32
 800fe42:	67bb      	str	r3, [r7, #120]	; 0x78
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	461a      	mov	r2, r3
 800fe4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe4c:	623b      	str	r3, [r7, #32]
 800fe4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe50:	69f9      	ldr	r1, [r7, #28]
 800fe52:	6a3a      	ldr	r2, [r7, #32]
 800fe54:	e841 2300 	strex	r3, r2, [r1]
 800fe58:	61bb      	str	r3, [r7, #24]
   return(result);
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d1e6      	bne.n	800fe2e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fe60:	2300      	movs	r3, #0
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	378c      	adds	r7, #140	; 0x8c
 800fe66:	46bd      	mov	sp, r7
 800fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6c:	4770      	bx	lr
 800fe6e:	bf00      	nop
 800fe70:	080106a1 	.word	0x080106a1
 800fe74:	08010341 	.word	0x08010341
 800fe78:	08010189 	.word	0x08010189
 800fe7c:	0800ffd1 	.word	0x0800ffd1

0800fe80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b095      	sub	sp, #84	; 0x54
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe90:	e853 3f00 	ldrex	r3, [r3]
 800fe94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fe96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	461a      	mov	r2, r3
 800fea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fea6:	643b      	str	r3, [r7, #64]	; 0x40
 800fea8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800feac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800feae:	e841 2300 	strex	r3, r2, [r1]
 800feb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800feb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d1e6      	bne.n	800fe88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	3308      	adds	r3, #8
 800fec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fec2:	6a3b      	ldr	r3, [r7, #32]
 800fec4:	e853 3f00 	ldrex	r3, [r3]
 800fec8:	61fb      	str	r3, [r7, #28]
   return(result);
 800feca:	69fa      	ldr	r2, [r7, #28]
 800fecc:	4b1e      	ldr	r3, [pc, #120]	; (800ff48 <UART_EndRxTransfer+0xc8>)
 800fece:	4013      	ands	r3, r2
 800fed0:	64bb      	str	r3, [r7, #72]	; 0x48
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	3308      	adds	r3, #8
 800fed8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800feda:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fedc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fee2:	e841 2300 	strex	r3, r2, [r1]
 800fee6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feea:	2b00      	cmp	r3, #0
 800feec:	d1e5      	bne.n	800feba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fef2:	2b01      	cmp	r3, #1
 800fef4:	d118      	bne.n	800ff28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	e853 3f00 	ldrex	r3, [r3]
 800ff02:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	f023 0310 	bic.w	r3, r3, #16
 800ff0a:	647b      	str	r3, [r7, #68]	; 0x44
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	461a      	mov	r2, r3
 800ff12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff14:	61bb      	str	r3, [r7, #24]
 800ff16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff18:	6979      	ldr	r1, [r7, #20]
 800ff1a:	69ba      	ldr	r2, [r7, #24]
 800ff1c:	e841 2300 	strex	r3, r2, [r1]
 800ff20:	613b      	str	r3, [r7, #16]
   return(result);
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d1e6      	bne.n	800fef6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2220      	movs	r2, #32
 800ff2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2200      	movs	r2, #0
 800ff34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ff3c:	bf00      	nop
 800ff3e:	3754      	adds	r7, #84	; 0x54
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr
 800ff48:	effffffe 	.word	0xeffffffe

0800ff4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2200      	movs	r2, #0
 800ff66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ff6a:	68f8      	ldr	r0, [r7, #12]
 800ff6c:	f7fe ff2e 	bl	800edcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff70:	bf00      	nop
 800ff72:	3710      	adds	r7, #16
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b088      	sub	sp, #32
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	e853 3f00 	ldrex	r3, [r3]
 800ff8c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff94:	61fb      	str	r3, [r7, #28]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	461a      	mov	r2, r3
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	61bb      	str	r3, [r7, #24]
 800ffa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffa2:	6979      	ldr	r1, [r7, #20]
 800ffa4:	69ba      	ldr	r2, [r7, #24]
 800ffa6:	e841 2300 	strex	r3, r2, [r1]
 800ffaa:	613b      	str	r3, [r7, #16]
   return(result);
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d1e6      	bne.n	800ff80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2220      	movs	r2, #32
 800ffb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f7fe fef9 	bl	800edb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ffc6:	bf00      	nop
 800ffc8:	3720      	adds	r7, #32
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
	...

0800ffd0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b09c      	sub	sp, #112	; 0x70
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffde:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffe8:	2b22      	cmp	r3, #34	; 0x22
 800ffea:	f040 80be 	bne.w	801016a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fff8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fffc:	b2d9      	uxtb	r1, r3
 800fffe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010002:	b2da      	uxtb	r2, r3
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010008:	400a      	ands	r2, r1
 801000a:	b2d2      	uxtb	r2, r2
 801000c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010012:	1c5a      	adds	r2, r3, #1
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801001e:	b29b      	uxth	r3, r3
 8010020:	3b01      	subs	r3, #1
 8010022:	b29a      	uxth	r2, r3
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010030:	b29b      	uxth	r3, r3
 8010032:	2b00      	cmp	r3, #0
 8010034:	f040 80a1 	bne.w	801017a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801003e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010040:	e853 3f00 	ldrex	r3, [r3]
 8010044:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801004c:	66bb      	str	r3, [r7, #104]	; 0x68
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	461a      	mov	r2, r3
 8010054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010056:	65bb      	str	r3, [r7, #88]	; 0x58
 8010058:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801005a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801005c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801005e:	e841 2300 	strex	r3, r2, [r1]
 8010062:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010066:	2b00      	cmp	r3, #0
 8010068:	d1e6      	bne.n	8010038 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	3308      	adds	r3, #8
 8010070:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010074:	e853 3f00 	ldrex	r3, [r3]
 8010078:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801007a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801007c:	f023 0301 	bic.w	r3, r3, #1
 8010080:	667b      	str	r3, [r7, #100]	; 0x64
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	3308      	adds	r3, #8
 8010088:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801008a:	647a      	str	r2, [r7, #68]	; 0x44
 801008c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801008e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010090:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010092:	e841 2300 	strex	r3, r2, [r1]
 8010096:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801009a:	2b00      	cmp	r3, #0
 801009c:	d1e5      	bne.n	801006a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2220      	movs	r2, #32
 80100a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2200      	movs	r2, #0
 80100aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2200      	movs	r2, #0
 80100b0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	4a33      	ldr	r2, [pc, #204]	; (8010184 <UART_RxISR_8BIT+0x1b4>)
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d01f      	beq.n	80100fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d018      	beq.n	80100fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d2:	e853 3f00 	ldrex	r3, [r3]
 80100d6:	623b      	str	r3, [r7, #32]
   return(result);
 80100d8:	6a3b      	ldr	r3, [r7, #32]
 80100da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80100de:	663b      	str	r3, [r7, #96]	; 0x60
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	461a      	mov	r2, r3
 80100e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80100e8:	633b      	str	r3, [r7, #48]	; 0x30
 80100ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100f0:	e841 2300 	strex	r3, r2, [r1]
 80100f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80100f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d1e6      	bne.n	80100ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010100:	2b01      	cmp	r3, #1
 8010102:	d12e      	bne.n	8010162 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	e853 3f00 	ldrex	r3, [r3]
 8010116:	60fb      	str	r3, [r7, #12]
   return(result);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f023 0310 	bic.w	r3, r3, #16
 801011e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	461a      	mov	r2, r3
 8010126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010128:	61fb      	str	r3, [r7, #28]
 801012a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801012c:	69b9      	ldr	r1, [r7, #24]
 801012e:	69fa      	ldr	r2, [r7, #28]
 8010130:	e841 2300 	strex	r3, r2, [r1]
 8010134:	617b      	str	r3, [r7, #20]
   return(result);
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d1e6      	bne.n	801010a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	69db      	ldr	r3, [r3, #28]
 8010142:	f003 0310 	and.w	r3, r3, #16
 8010146:	2b10      	cmp	r3, #16
 8010148:	d103      	bne.n	8010152 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	2210      	movs	r2, #16
 8010150:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010158:	4619      	mov	r1, r3
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f7fe fe40 	bl	800ede0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010160:	e00b      	b.n	801017a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f7f0 fdc2 	bl	8000cec <HAL_UART_RxCpltCallback>
}
 8010168:	e007      	b.n	801017a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	699a      	ldr	r2, [r3, #24]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f042 0208 	orr.w	r2, r2, #8
 8010178:	619a      	str	r2, [r3, #24]
}
 801017a:	bf00      	nop
 801017c:	3770      	adds	r7, #112	; 0x70
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
 8010182:	bf00      	nop
 8010184:	58000c00 	.word	0x58000c00

08010188 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b09c      	sub	sp, #112	; 0x70
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010196:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80101a0:	2b22      	cmp	r3, #34	; 0x22
 80101a2:	f040 80be 	bne.w	8010322 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101b4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80101b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80101ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80101be:	4013      	ands	r3, r2
 80101c0:	b29a      	uxth	r2, r3
 80101c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101ca:	1c9a      	adds	r2, r3, #2
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	3b01      	subs	r3, #1
 80101da:	b29a      	uxth	r2, r3
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	f040 80a1 	bne.w	8010332 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101f8:	e853 3f00 	ldrex	r3, [r3]
 80101fc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80101fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010204:	667b      	str	r3, [r7, #100]	; 0x64
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	461a      	mov	r2, r3
 801020c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801020e:	657b      	str	r3, [r7, #84]	; 0x54
 8010210:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010212:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010214:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010216:	e841 2300 	strex	r3, r2, [r1]
 801021a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801021c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801021e:	2b00      	cmp	r3, #0
 8010220:	d1e6      	bne.n	80101f0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	3308      	adds	r3, #8
 8010228:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801022a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801022c:	e853 3f00 	ldrex	r3, [r3]
 8010230:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010234:	f023 0301 	bic.w	r3, r3, #1
 8010238:	663b      	str	r3, [r7, #96]	; 0x60
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	3308      	adds	r3, #8
 8010240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010242:	643a      	str	r2, [r7, #64]	; 0x40
 8010244:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010246:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010248:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801024a:	e841 2300 	strex	r3, r2, [r1]
 801024e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010252:	2b00      	cmp	r3, #0
 8010254:	d1e5      	bne.n	8010222 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2220      	movs	r2, #32
 801025a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2200      	movs	r2, #0
 8010262:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2200      	movs	r2, #0
 8010268:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	4a33      	ldr	r2, [pc, #204]	; (801033c <UART_RxISR_16BIT+0x1b4>)
 8010270:	4293      	cmp	r3, r2
 8010272:	d01f      	beq.n	80102b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801027e:	2b00      	cmp	r3, #0
 8010280:	d018      	beq.n	80102b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010288:	6a3b      	ldr	r3, [r7, #32]
 801028a:	e853 3f00 	ldrex	r3, [r3]
 801028e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	461a      	mov	r2, r3
 801029e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80102a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102a8:	e841 2300 	strex	r3, r2, [r1]
 80102ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80102ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d1e6      	bne.n	8010282 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d12e      	bne.n	801031a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2200      	movs	r2, #0
 80102c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	e853 3f00 	ldrex	r3, [r3]
 80102ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	f023 0310 	bic.w	r3, r3, #16
 80102d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	461a      	mov	r2, r3
 80102de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102e0:	61bb      	str	r3, [r7, #24]
 80102e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102e4:	6979      	ldr	r1, [r7, #20]
 80102e6:	69ba      	ldr	r2, [r7, #24]
 80102e8:	e841 2300 	strex	r3, r2, [r1]
 80102ec:	613b      	str	r3, [r7, #16]
   return(result);
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d1e6      	bne.n	80102c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	69db      	ldr	r3, [r3, #28]
 80102fa:	f003 0310 	and.w	r3, r3, #16
 80102fe:	2b10      	cmp	r3, #16
 8010300:	d103      	bne.n	801030a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	2210      	movs	r2, #16
 8010308:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010310:	4619      	mov	r1, r3
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f7fe fd64 	bl	800ede0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010318:	e00b      	b.n	8010332 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f7f0 fce6 	bl	8000cec <HAL_UART_RxCpltCallback>
}
 8010320:	e007      	b.n	8010332 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	699a      	ldr	r2, [r3, #24]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f042 0208 	orr.w	r2, r2, #8
 8010330:	619a      	str	r2, [r3, #24]
}
 8010332:	bf00      	nop
 8010334:	3770      	adds	r7, #112	; 0x70
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
 801033a:	bf00      	nop
 801033c:	58000c00 	.word	0x58000c00

08010340 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b0ac      	sub	sp, #176	; 0xb0
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801034e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	69db      	ldr	r3, [r3, #28]
 8010358:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	689b      	ldr	r3, [r3, #8]
 801036c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010376:	2b22      	cmp	r3, #34	; 0x22
 8010378:	f040 8180 	bne.w	801067c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010382:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010386:	e123      	b.n	80105d0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801038e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010392:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8010396:	b2d9      	uxtb	r1, r3
 8010398:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801039c:	b2da      	uxtb	r2, r3
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103a2:	400a      	ands	r2, r1
 80103a4:	b2d2      	uxtb	r2, r2
 80103a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103ac:	1c5a      	adds	r2, r3, #1
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	3b01      	subs	r3, #1
 80103bc:	b29a      	uxth	r2, r3
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	69db      	ldr	r3, [r3, #28]
 80103ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80103ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103d2:	f003 0307 	and.w	r3, r3, #7
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d053      	beq.n	8010482 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80103da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103de:	f003 0301 	and.w	r3, r3, #1
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d011      	beq.n	801040a <UART_RxISR_8BIT_FIFOEN+0xca>
 80103e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80103ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d00b      	beq.n	801040a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2201      	movs	r2, #1
 80103f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010400:	f043 0201 	orr.w	r2, r3, #1
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801040a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801040e:	f003 0302 	and.w	r3, r3, #2
 8010412:	2b00      	cmp	r3, #0
 8010414:	d011      	beq.n	801043a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801041a:	f003 0301 	and.w	r3, r3, #1
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00b      	beq.n	801043a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2202      	movs	r2, #2
 8010428:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010430:	f043 0204 	orr.w	r2, r3, #4
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801043a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801043e:	f003 0304 	and.w	r3, r3, #4
 8010442:	2b00      	cmp	r3, #0
 8010444:	d011      	beq.n	801046a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801044a:	f003 0301 	and.w	r3, r3, #1
 801044e:	2b00      	cmp	r3, #0
 8010450:	d00b      	beq.n	801046a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	2204      	movs	r2, #4
 8010458:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010460:	f043 0202 	orr.w	r2, r3, #2
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010470:	2b00      	cmp	r3, #0
 8010472:	d006      	beq.n	8010482 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f7fe fca9 	bl	800edcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2200      	movs	r2, #0
 801047e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010488:	b29b      	uxth	r3, r3
 801048a:	2b00      	cmp	r3, #0
 801048c:	f040 80a0 	bne.w	80105d0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010498:	e853 3f00 	ldrex	r3, [r3]
 801049c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801049e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	461a      	mov	r2, r3
 80104ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80104b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80104b4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80104b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80104ba:	e841 2300 	strex	r3, r2, [r1]
 80104be:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80104c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d1e4      	bne.n	8010490 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	3308      	adds	r3, #8
 80104cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104d0:	e853 3f00 	ldrex	r3, [r3]
 80104d4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80104d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104d8:	4b6e      	ldr	r3, [pc, #440]	; (8010694 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80104da:	4013      	ands	r3, r2
 80104dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	3308      	adds	r3, #8
 80104e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80104ea:	66ba      	str	r2, [r7, #104]	; 0x68
 80104ec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80104f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80104f2:	e841 2300 	strex	r3, r2, [r1]
 80104f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80104f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d1e3      	bne.n	80104c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2220      	movs	r2, #32
 8010502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2200      	movs	r2, #0
 801050a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2200      	movs	r2, #0
 8010510:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	4a60      	ldr	r2, [pc, #384]	; (8010698 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d021      	beq.n	8010560 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	685b      	ldr	r3, [r3, #4]
 8010522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010526:	2b00      	cmp	r3, #0
 8010528:	d01a      	beq.n	8010560 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010532:	e853 3f00 	ldrex	r3, [r3]
 8010536:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801053a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801053e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	461a      	mov	r2, r3
 8010548:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801054c:	657b      	str	r3, [r7, #84]	; 0x54
 801054e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010550:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010552:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010554:	e841 2300 	strex	r3, r2, [r1]
 8010558:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801055a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801055c:	2b00      	cmp	r3, #0
 801055e:	d1e4      	bne.n	801052a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010564:	2b01      	cmp	r3, #1
 8010566:	d130      	bne.n	80105ca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2200      	movs	r2, #0
 801056c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010576:	e853 3f00 	ldrex	r3, [r3]
 801057a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801057c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801057e:	f023 0310 	bic.w	r3, r3, #16
 8010582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	461a      	mov	r2, r3
 801058c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010590:	643b      	str	r3, [r7, #64]	; 0x40
 8010592:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010594:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010598:	e841 2300 	strex	r3, r2, [r1]
 801059c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801059e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d1e4      	bne.n	801056e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	69db      	ldr	r3, [r3, #28]
 80105aa:	f003 0310 	and.w	r3, r3, #16
 80105ae:	2b10      	cmp	r3, #16
 80105b0:	d103      	bne.n	80105ba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	2210      	movs	r2, #16
 80105b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80105c0:	4619      	mov	r1, r3
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f7fe fc0c 	bl	800ede0 <HAL_UARTEx_RxEventCallback>
 80105c8:	e002      	b.n	80105d0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f7f0 fb8e 	bl	8000cec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80105d0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d006      	beq.n	80105e6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80105d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80105dc:	f003 0320 	and.w	r3, r3, #32
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	f47f aed1 	bne.w	8010388 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80105f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d049      	beq.n	801068c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80105fe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8010602:	429a      	cmp	r2, r3
 8010604:	d242      	bcs.n	801068c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	3308      	adds	r3, #8
 801060c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801060e:	6a3b      	ldr	r3, [r7, #32]
 8010610:	e853 3f00 	ldrex	r3, [r3]
 8010614:	61fb      	str	r3, [r7, #28]
   return(result);
 8010616:	69fb      	ldr	r3, [r7, #28]
 8010618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801061c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	3308      	adds	r3, #8
 8010626:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801062a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801062c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010632:	e841 2300 	strex	r3, r2, [r1]
 8010636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801063a:	2b00      	cmp	r3, #0
 801063c:	d1e3      	bne.n	8010606 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	4a16      	ldr	r2, [pc, #88]	; (801069c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010642:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	e853 3f00 	ldrex	r3, [r3]
 8010650:	60bb      	str	r3, [r7, #8]
   return(result);
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	f043 0320 	orr.w	r3, r3, #32
 8010658:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	461a      	mov	r2, r3
 8010662:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010666:	61bb      	str	r3, [r7, #24]
 8010668:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801066a:	6979      	ldr	r1, [r7, #20]
 801066c:	69ba      	ldr	r2, [r7, #24]
 801066e:	e841 2300 	strex	r3, r2, [r1]
 8010672:	613b      	str	r3, [r7, #16]
   return(result);
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d1e4      	bne.n	8010644 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801067a:	e007      	b.n	801068c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	699a      	ldr	r2, [r3, #24]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f042 0208 	orr.w	r2, r2, #8
 801068a:	619a      	str	r2, [r3, #24]
}
 801068c:	bf00      	nop
 801068e:	37b0      	adds	r7, #176	; 0xb0
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}
 8010694:	effffffe 	.word	0xeffffffe
 8010698:	58000c00 	.word	0x58000c00
 801069c:	0800ffd1 	.word	0x0800ffd1

080106a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b0ae      	sub	sp, #184	; 0xb8
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80106ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	69db      	ldr	r3, [r3, #28]
 80106b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	689b      	ldr	r3, [r3, #8]
 80106cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106d6:	2b22      	cmp	r3, #34	; 0x22
 80106d8:	f040 8184 	bne.w	80109e4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80106e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80106e6:	e127      	b.n	8010938 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80106fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80106fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8010702:	4013      	ands	r3, r2
 8010704:	b29a      	uxth	r2, r3
 8010706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801070a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010710:	1c9a      	adds	r2, r3, #2
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801071c:	b29b      	uxth	r3, r3
 801071e:	3b01      	subs	r3, #1
 8010720:	b29a      	uxth	r2, r3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	69db      	ldr	r3, [r3, #28]
 801072e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010732:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010736:	f003 0307 	and.w	r3, r3, #7
 801073a:	2b00      	cmp	r3, #0
 801073c:	d053      	beq.n	80107e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801073e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010742:	f003 0301 	and.w	r3, r3, #1
 8010746:	2b00      	cmp	r3, #0
 8010748:	d011      	beq.n	801076e <UART_RxISR_16BIT_FIFOEN+0xce>
 801074a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801074e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00b      	beq.n	801076e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	2201      	movs	r2, #1
 801075c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010764:	f043 0201 	orr.w	r2, r3, #1
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801076e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010772:	f003 0302 	and.w	r3, r3, #2
 8010776:	2b00      	cmp	r3, #0
 8010778:	d011      	beq.n	801079e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801077a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801077e:	f003 0301 	and.w	r3, r3, #1
 8010782:	2b00      	cmp	r3, #0
 8010784:	d00b      	beq.n	801079e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	2202      	movs	r2, #2
 801078c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010794:	f043 0204 	orr.w	r2, r3, #4
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801079e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80107a2:	f003 0304 	and.w	r3, r3, #4
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d011      	beq.n	80107ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80107aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80107ae:	f003 0301 	and.w	r3, r3, #1
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d00b      	beq.n	80107ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	2204      	movs	r2, #4
 80107bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107c4:	f043 0202 	orr.w	r2, r3, #2
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d006      	beq.n	80107e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f7fe faf7 	bl	800edcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2200      	movs	r2, #0
 80107e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	f040 80a2 	bne.w	8010938 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80107fc:	e853 3f00 	ldrex	r3, [r3]
 8010800:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	461a      	mov	r2, r3
 8010812:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010816:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801081a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801081c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801081e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010822:	e841 2300 	strex	r3, r2, [r1]
 8010826:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801082a:	2b00      	cmp	r3, #0
 801082c:	d1e2      	bne.n	80107f4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	3308      	adds	r3, #8
 8010834:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010838:	e853 3f00 	ldrex	r3, [r3]
 801083c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801083e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010840:	4b6e      	ldr	r3, [pc, #440]	; (80109fc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010842:	4013      	ands	r3, r2
 8010844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	3308      	adds	r3, #8
 801084e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010852:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010854:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010856:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010858:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801085a:	e841 2300 	strex	r3, r2, [r1]
 801085e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010862:	2b00      	cmp	r3, #0
 8010864:	d1e3      	bne.n	801082e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2220      	movs	r2, #32
 801086a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2200      	movs	r2, #0
 8010872:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2200      	movs	r2, #0
 8010878:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	4a60      	ldr	r2, [pc, #384]	; (8010a00 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010880:	4293      	cmp	r3, r2
 8010882:	d021      	beq.n	80108c8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801088e:	2b00      	cmp	r3, #0
 8010890:	d01a      	beq.n	80108c8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801089a:	e853 3f00 	ldrex	r3, [r3]
 801089e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80108a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80108a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	461a      	mov	r2, r3
 80108b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80108b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80108ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80108bc:	e841 2300 	strex	r3, r2, [r1]
 80108c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80108c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d1e4      	bne.n	8010892 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	d130      	bne.n	8010932 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2200      	movs	r2, #0
 80108d4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108de:	e853 3f00 	ldrex	r3, [r3]
 80108e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80108e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e6:	f023 0310 	bic.w	r3, r3, #16
 80108ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	461a      	mov	r2, r3
 80108f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108f8:	647b      	str	r3, [r7, #68]	; 0x44
 80108fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80108fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010900:	e841 2300 	strex	r3, r2, [r1]
 8010904:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010908:	2b00      	cmp	r3, #0
 801090a:	d1e4      	bne.n	80108d6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	69db      	ldr	r3, [r3, #28]
 8010912:	f003 0310 	and.w	r3, r3, #16
 8010916:	2b10      	cmp	r3, #16
 8010918:	d103      	bne.n	8010922 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	2210      	movs	r2, #16
 8010920:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010928:	4619      	mov	r1, r3
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f7fe fa58 	bl	800ede0 <HAL_UARTEx_RxEventCallback>
 8010930:	e002      	b.n	8010938 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f7f0 f9da 	bl	8000cec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010938:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801093c:	2b00      	cmp	r3, #0
 801093e:	d006      	beq.n	801094e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010940:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010944:	f003 0320 	and.w	r3, r3, #32
 8010948:	2b00      	cmp	r3, #0
 801094a:	f47f aecd 	bne.w	80106e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010954:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010958:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801095c:	2b00      	cmp	r3, #0
 801095e:	d049      	beq.n	80109f4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010966:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801096a:	429a      	cmp	r2, r3
 801096c:	d242      	bcs.n	80109f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	3308      	adds	r3, #8
 8010974:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010978:	e853 3f00 	ldrex	r3, [r3]
 801097c:	623b      	str	r3, [r7, #32]
   return(result);
 801097e:	6a3b      	ldr	r3, [r7, #32]
 8010980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	3308      	adds	r3, #8
 801098e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010992:	633a      	str	r2, [r7, #48]	; 0x30
 8010994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801099a:	e841 2300 	strex	r3, r2, [r1]
 801099e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80109a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d1e3      	bne.n	801096e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4a16      	ldr	r2, [pc, #88]	; (8010a04 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80109aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	e853 3f00 	ldrex	r3, [r3]
 80109b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f043 0320 	orr.w	r3, r3, #32
 80109c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	461a      	mov	r2, r3
 80109ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80109ce:	61fb      	str	r3, [r7, #28]
 80109d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109d2:	69b9      	ldr	r1, [r7, #24]
 80109d4:	69fa      	ldr	r2, [r7, #28]
 80109d6:	e841 2300 	strex	r3, r2, [r1]
 80109da:	617b      	str	r3, [r7, #20]
   return(result);
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d1e4      	bne.n	80109ac <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80109e2:	e007      	b.n	80109f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	699a      	ldr	r2, [r3, #24]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f042 0208 	orr.w	r2, r2, #8
 80109f2:	619a      	str	r2, [r3, #24]
}
 80109f4:	bf00      	nop
 80109f6:	37b8      	adds	r7, #184	; 0xb8
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}
 80109fc:	effffffe 	.word	0xeffffffe
 8010a00:	58000c00 	.word	0x58000c00
 8010a04:	08010189 	.word	0x08010189

08010a08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b083      	sub	sp, #12
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010a10:	bf00      	nop
 8010a12:	370c      	adds	r7, #12
 8010a14:	46bd      	mov	sp, r7
 8010a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1a:	4770      	bx	lr

08010a1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b083      	sub	sp, #12
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010a24:	bf00      	nop
 8010a26:	370c      	adds	r7, #12
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr

08010a30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010a38:	bf00      	nop
 8010a3a:	370c      	adds	r7, #12
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr

08010a44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b085      	sub	sp, #20
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d101      	bne.n	8010a5a <HAL_UARTEx_DisableFifoMode+0x16>
 8010a56:	2302      	movs	r3, #2
 8010a58:	e027      	b.n	8010aaa <HAL_UARTEx_DisableFifoMode+0x66>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2224      	movs	r2, #36	; 0x24
 8010a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	681a      	ldr	r2, [r3, #0]
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f022 0201 	bic.w	r2, r2, #1
 8010a80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010a88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	68fa      	ldr	r2, [r7, #12]
 8010a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2220      	movs	r2, #32
 8010a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010aa8:	2300      	movs	r3, #0
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3714      	adds	r7, #20
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab4:	4770      	bx	lr

08010ab6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ab6:	b580      	push	{r7, lr}
 8010ab8:	b084      	sub	sp, #16
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	6078      	str	r0, [r7, #4]
 8010abe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d101      	bne.n	8010ace <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010aca:	2302      	movs	r3, #2
 8010acc:	e02d      	b.n	8010b2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2201      	movs	r2, #1
 8010ad2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2224      	movs	r2, #36	; 0x24
 8010ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	681a      	ldr	r2, [r3, #0]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f022 0201 	bic.w	r2, r2, #1
 8010af4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	689b      	ldr	r3, [r3, #8]
 8010afc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	683a      	ldr	r2, [r7, #0]
 8010b06:	430a      	orrs	r2, r1
 8010b08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f000 f850 	bl	8010bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	68fa      	ldr	r2, [r7, #12]
 8010b16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2220      	movs	r2, #32
 8010b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2200      	movs	r2, #0
 8010b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010b28:	2300      	movs	r3, #0
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3710      	adds	r7, #16
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}

08010b32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b32:	b580      	push	{r7, lr}
 8010b34:	b084      	sub	sp, #16
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	6078      	str	r0, [r7, #4]
 8010b3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010b42:	2b01      	cmp	r3, #1
 8010b44:	d101      	bne.n	8010b4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010b46:	2302      	movs	r3, #2
 8010b48:	e02d      	b.n	8010ba6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2201      	movs	r2, #1
 8010b4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2224      	movs	r2, #36	; 0x24
 8010b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f022 0201 	bic.w	r2, r2, #1
 8010b70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	689b      	ldr	r3, [r3, #8]
 8010b78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	683a      	ldr	r2, [r7, #0]
 8010b82:	430a      	orrs	r2, r1
 8010b84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f000 f812 	bl	8010bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	68fa      	ldr	r2, [r7, #12]
 8010b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2220      	movs	r2, #32
 8010b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010ba4:	2300      	movs	r3, #0
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3710      	adds	r7, #16
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
	...

08010bb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	b085      	sub	sp, #20
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d108      	bne.n	8010bd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2201      	movs	r2, #1
 8010bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2201      	movs	r2, #1
 8010bcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010bd0:	e031      	b.n	8010c36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010bd2:	2310      	movs	r3, #16
 8010bd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010bd6:	2310      	movs	r3, #16
 8010bd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	689b      	ldr	r3, [r3, #8]
 8010be0:	0e5b      	lsrs	r3, r3, #25
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	f003 0307 	and.w	r3, r3, #7
 8010be8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	689b      	ldr	r3, [r3, #8]
 8010bf0:	0f5b      	lsrs	r3, r3, #29
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	f003 0307 	and.w	r3, r3, #7
 8010bf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010bfa:	7bbb      	ldrb	r3, [r7, #14]
 8010bfc:	7b3a      	ldrb	r2, [r7, #12]
 8010bfe:	4911      	ldr	r1, [pc, #68]	; (8010c44 <UARTEx_SetNbDataToProcess+0x94>)
 8010c00:	5c8a      	ldrb	r2, [r1, r2]
 8010c02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010c06:	7b3a      	ldrb	r2, [r7, #12]
 8010c08:	490f      	ldr	r1, [pc, #60]	; (8010c48 <UARTEx_SetNbDataToProcess+0x98>)
 8010c0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c10:	b29a      	uxth	r2, r3
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c18:	7bfb      	ldrb	r3, [r7, #15]
 8010c1a:	7b7a      	ldrb	r2, [r7, #13]
 8010c1c:	4909      	ldr	r1, [pc, #36]	; (8010c44 <UARTEx_SetNbDataToProcess+0x94>)
 8010c1e:	5c8a      	ldrb	r2, [r1, r2]
 8010c20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010c24:	7b7a      	ldrb	r2, [r7, #13]
 8010c26:	4908      	ldr	r1, [pc, #32]	; (8010c48 <UARTEx_SetNbDataToProcess+0x98>)
 8010c28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c2e:	b29a      	uxth	r2, r3
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010c36:	bf00      	nop
 8010c38:	3714      	adds	r7, #20
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr
 8010c42:	bf00      	nop
 8010c44:	08010f48 	.word	0x08010f48
 8010c48:	08010f50 	.word	0x08010f50

08010c4c <__errno>:
 8010c4c:	4b01      	ldr	r3, [pc, #4]	; (8010c54 <__errno+0x8>)
 8010c4e:	6818      	ldr	r0, [r3, #0]
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	24000098 	.word	0x24000098

08010c58 <__libc_init_array>:
 8010c58:	b570      	push	{r4, r5, r6, lr}
 8010c5a:	4d0d      	ldr	r5, [pc, #52]	; (8010c90 <__libc_init_array+0x38>)
 8010c5c:	4c0d      	ldr	r4, [pc, #52]	; (8010c94 <__libc_init_array+0x3c>)
 8010c5e:	1b64      	subs	r4, r4, r5
 8010c60:	10a4      	asrs	r4, r4, #2
 8010c62:	2600      	movs	r6, #0
 8010c64:	42a6      	cmp	r6, r4
 8010c66:	d109      	bne.n	8010c7c <__libc_init_array+0x24>
 8010c68:	4d0b      	ldr	r5, [pc, #44]	; (8010c98 <__libc_init_array+0x40>)
 8010c6a:	4c0c      	ldr	r4, [pc, #48]	; (8010c9c <__libc_init_array+0x44>)
 8010c6c:	f000 f93c 	bl	8010ee8 <_init>
 8010c70:	1b64      	subs	r4, r4, r5
 8010c72:	10a4      	asrs	r4, r4, #2
 8010c74:	2600      	movs	r6, #0
 8010c76:	42a6      	cmp	r6, r4
 8010c78:	d105      	bne.n	8010c86 <__libc_init_array+0x2e>
 8010c7a:	bd70      	pop	{r4, r5, r6, pc}
 8010c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c80:	4798      	blx	r3
 8010c82:	3601      	adds	r6, #1
 8010c84:	e7ee      	b.n	8010c64 <__libc_init_array+0xc>
 8010c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c8a:	4798      	blx	r3
 8010c8c:	3601      	adds	r6, #1
 8010c8e:	e7f2      	b.n	8010c76 <__libc_init_array+0x1e>
 8010c90:	08010f60 	.word	0x08010f60
 8010c94:	08010f60 	.word	0x08010f60
 8010c98:	08010f60 	.word	0x08010f60
 8010c9c:	08010f64 	.word	0x08010f64

08010ca0 <malloc>:
 8010ca0:	4b02      	ldr	r3, [pc, #8]	; (8010cac <malloc+0xc>)
 8010ca2:	4601      	mov	r1, r0
 8010ca4:	6818      	ldr	r0, [r3, #0]
 8010ca6:	f000 b88d 	b.w	8010dc4 <_malloc_r>
 8010caa:	bf00      	nop
 8010cac:	24000098 	.word	0x24000098

08010cb0 <free>:
 8010cb0:	4b02      	ldr	r3, [pc, #8]	; (8010cbc <free+0xc>)
 8010cb2:	4601      	mov	r1, r0
 8010cb4:	6818      	ldr	r0, [r3, #0]
 8010cb6:	f000 b819 	b.w	8010cec <_free_r>
 8010cba:	bf00      	nop
 8010cbc:	24000098 	.word	0x24000098

08010cc0 <memcpy>:
 8010cc0:	440a      	add	r2, r1
 8010cc2:	4291      	cmp	r1, r2
 8010cc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010cc8:	d100      	bne.n	8010ccc <memcpy+0xc>
 8010cca:	4770      	bx	lr
 8010ccc:	b510      	push	{r4, lr}
 8010cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010cd6:	4291      	cmp	r1, r2
 8010cd8:	d1f9      	bne.n	8010cce <memcpy+0xe>
 8010cda:	bd10      	pop	{r4, pc}

08010cdc <memset>:
 8010cdc:	4402      	add	r2, r0
 8010cde:	4603      	mov	r3, r0
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	d100      	bne.n	8010ce6 <memset+0xa>
 8010ce4:	4770      	bx	lr
 8010ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8010cea:	e7f9      	b.n	8010ce0 <memset+0x4>

08010cec <_free_r>:
 8010cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010cee:	2900      	cmp	r1, #0
 8010cf0:	d044      	beq.n	8010d7c <_free_r+0x90>
 8010cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010cf6:	9001      	str	r0, [sp, #4]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	f1a1 0404 	sub.w	r4, r1, #4
 8010cfe:	bfb8      	it	lt
 8010d00:	18e4      	addlt	r4, r4, r3
 8010d02:	f000 f8e3 	bl	8010ecc <__malloc_lock>
 8010d06:	4a1e      	ldr	r2, [pc, #120]	; (8010d80 <_free_r+0x94>)
 8010d08:	9801      	ldr	r0, [sp, #4]
 8010d0a:	6813      	ldr	r3, [r2, #0]
 8010d0c:	b933      	cbnz	r3, 8010d1c <_free_r+0x30>
 8010d0e:	6063      	str	r3, [r4, #4]
 8010d10:	6014      	str	r4, [r2, #0]
 8010d12:	b003      	add	sp, #12
 8010d14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d18:	f000 b8de 	b.w	8010ed8 <__malloc_unlock>
 8010d1c:	42a3      	cmp	r3, r4
 8010d1e:	d908      	bls.n	8010d32 <_free_r+0x46>
 8010d20:	6825      	ldr	r5, [r4, #0]
 8010d22:	1961      	adds	r1, r4, r5
 8010d24:	428b      	cmp	r3, r1
 8010d26:	bf01      	itttt	eq
 8010d28:	6819      	ldreq	r1, [r3, #0]
 8010d2a:	685b      	ldreq	r3, [r3, #4]
 8010d2c:	1949      	addeq	r1, r1, r5
 8010d2e:	6021      	streq	r1, [r4, #0]
 8010d30:	e7ed      	b.n	8010d0e <_free_r+0x22>
 8010d32:	461a      	mov	r2, r3
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	b10b      	cbz	r3, 8010d3c <_free_r+0x50>
 8010d38:	42a3      	cmp	r3, r4
 8010d3a:	d9fa      	bls.n	8010d32 <_free_r+0x46>
 8010d3c:	6811      	ldr	r1, [r2, #0]
 8010d3e:	1855      	adds	r5, r2, r1
 8010d40:	42a5      	cmp	r5, r4
 8010d42:	d10b      	bne.n	8010d5c <_free_r+0x70>
 8010d44:	6824      	ldr	r4, [r4, #0]
 8010d46:	4421      	add	r1, r4
 8010d48:	1854      	adds	r4, r2, r1
 8010d4a:	42a3      	cmp	r3, r4
 8010d4c:	6011      	str	r1, [r2, #0]
 8010d4e:	d1e0      	bne.n	8010d12 <_free_r+0x26>
 8010d50:	681c      	ldr	r4, [r3, #0]
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	6053      	str	r3, [r2, #4]
 8010d56:	4421      	add	r1, r4
 8010d58:	6011      	str	r1, [r2, #0]
 8010d5a:	e7da      	b.n	8010d12 <_free_r+0x26>
 8010d5c:	d902      	bls.n	8010d64 <_free_r+0x78>
 8010d5e:	230c      	movs	r3, #12
 8010d60:	6003      	str	r3, [r0, #0]
 8010d62:	e7d6      	b.n	8010d12 <_free_r+0x26>
 8010d64:	6825      	ldr	r5, [r4, #0]
 8010d66:	1961      	adds	r1, r4, r5
 8010d68:	428b      	cmp	r3, r1
 8010d6a:	bf04      	itt	eq
 8010d6c:	6819      	ldreq	r1, [r3, #0]
 8010d6e:	685b      	ldreq	r3, [r3, #4]
 8010d70:	6063      	str	r3, [r4, #4]
 8010d72:	bf04      	itt	eq
 8010d74:	1949      	addeq	r1, r1, r5
 8010d76:	6021      	streq	r1, [r4, #0]
 8010d78:	6054      	str	r4, [r2, #4]
 8010d7a:	e7ca      	b.n	8010d12 <_free_r+0x26>
 8010d7c:	b003      	add	sp, #12
 8010d7e:	bd30      	pop	{r4, r5, pc}
 8010d80:	240006a0 	.word	0x240006a0

08010d84 <sbrk_aligned>:
 8010d84:	b570      	push	{r4, r5, r6, lr}
 8010d86:	4e0e      	ldr	r6, [pc, #56]	; (8010dc0 <sbrk_aligned+0x3c>)
 8010d88:	460c      	mov	r4, r1
 8010d8a:	6831      	ldr	r1, [r6, #0]
 8010d8c:	4605      	mov	r5, r0
 8010d8e:	b911      	cbnz	r1, 8010d96 <sbrk_aligned+0x12>
 8010d90:	f000 f88c 	bl	8010eac <_sbrk_r>
 8010d94:	6030      	str	r0, [r6, #0]
 8010d96:	4621      	mov	r1, r4
 8010d98:	4628      	mov	r0, r5
 8010d9a:	f000 f887 	bl	8010eac <_sbrk_r>
 8010d9e:	1c43      	adds	r3, r0, #1
 8010da0:	d00a      	beq.n	8010db8 <sbrk_aligned+0x34>
 8010da2:	1cc4      	adds	r4, r0, #3
 8010da4:	f024 0403 	bic.w	r4, r4, #3
 8010da8:	42a0      	cmp	r0, r4
 8010daa:	d007      	beq.n	8010dbc <sbrk_aligned+0x38>
 8010dac:	1a21      	subs	r1, r4, r0
 8010dae:	4628      	mov	r0, r5
 8010db0:	f000 f87c 	bl	8010eac <_sbrk_r>
 8010db4:	3001      	adds	r0, #1
 8010db6:	d101      	bne.n	8010dbc <sbrk_aligned+0x38>
 8010db8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	bd70      	pop	{r4, r5, r6, pc}
 8010dc0:	240006a4 	.word	0x240006a4

08010dc4 <_malloc_r>:
 8010dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dc8:	1ccd      	adds	r5, r1, #3
 8010dca:	f025 0503 	bic.w	r5, r5, #3
 8010dce:	3508      	adds	r5, #8
 8010dd0:	2d0c      	cmp	r5, #12
 8010dd2:	bf38      	it	cc
 8010dd4:	250c      	movcc	r5, #12
 8010dd6:	2d00      	cmp	r5, #0
 8010dd8:	4607      	mov	r7, r0
 8010dda:	db01      	blt.n	8010de0 <_malloc_r+0x1c>
 8010ddc:	42a9      	cmp	r1, r5
 8010dde:	d905      	bls.n	8010dec <_malloc_r+0x28>
 8010de0:	230c      	movs	r3, #12
 8010de2:	603b      	str	r3, [r7, #0]
 8010de4:	2600      	movs	r6, #0
 8010de6:	4630      	mov	r0, r6
 8010de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dec:	4e2e      	ldr	r6, [pc, #184]	; (8010ea8 <_malloc_r+0xe4>)
 8010dee:	f000 f86d 	bl	8010ecc <__malloc_lock>
 8010df2:	6833      	ldr	r3, [r6, #0]
 8010df4:	461c      	mov	r4, r3
 8010df6:	bb34      	cbnz	r4, 8010e46 <_malloc_r+0x82>
 8010df8:	4629      	mov	r1, r5
 8010dfa:	4638      	mov	r0, r7
 8010dfc:	f7ff ffc2 	bl	8010d84 <sbrk_aligned>
 8010e00:	1c43      	adds	r3, r0, #1
 8010e02:	4604      	mov	r4, r0
 8010e04:	d14d      	bne.n	8010ea2 <_malloc_r+0xde>
 8010e06:	6834      	ldr	r4, [r6, #0]
 8010e08:	4626      	mov	r6, r4
 8010e0a:	2e00      	cmp	r6, #0
 8010e0c:	d140      	bne.n	8010e90 <_malloc_r+0xcc>
 8010e0e:	6823      	ldr	r3, [r4, #0]
 8010e10:	4631      	mov	r1, r6
 8010e12:	4638      	mov	r0, r7
 8010e14:	eb04 0803 	add.w	r8, r4, r3
 8010e18:	f000 f848 	bl	8010eac <_sbrk_r>
 8010e1c:	4580      	cmp	r8, r0
 8010e1e:	d13a      	bne.n	8010e96 <_malloc_r+0xd2>
 8010e20:	6821      	ldr	r1, [r4, #0]
 8010e22:	3503      	adds	r5, #3
 8010e24:	1a6d      	subs	r5, r5, r1
 8010e26:	f025 0503 	bic.w	r5, r5, #3
 8010e2a:	3508      	adds	r5, #8
 8010e2c:	2d0c      	cmp	r5, #12
 8010e2e:	bf38      	it	cc
 8010e30:	250c      	movcc	r5, #12
 8010e32:	4629      	mov	r1, r5
 8010e34:	4638      	mov	r0, r7
 8010e36:	f7ff ffa5 	bl	8010d84 <sbrk_aligned>
 8010e3a:	3001      	adds	r0, #1
 8010e3c:	d02b      	beq.n	8010e96 <_malloc_r+0xd2>
 8010e3e:	6823      	ldr	r3, [r4, #0]
 8010e40:	442b      	add	r3, r5
 8010e42:	6023      	str	r3, [r4, #0]
 8010e44:	e00e      	b.n	8010e64 <_malloc_r+0xa0>
 8010e46:	6822      	ldr	r2, [r4, #0]
 8010e48:	1b52      	subs	r2, r2, r5
 8010e4a:	d41e      	bmi.n	8010e8a <_malloc_r+0xc6>
 8010e4c:	2a0b      	cmp	r2, #11
 8010e4e:	d916      	bls.n	8010e7e <_malloc_r+0xba>
 8010e50:	1961      	adds	r1, r4, r5
 8010e52:	42a3      	cmp	r3, r4
 8010e54:	6025      	str	r5, [r4, #0]
 8010e56:	bf18      	it	ne
 8010e58:	6059      	strne	r1, [r3, #4]
 8010e5a:	6863      	ldr	r3, [r4, #4]
 8010e5c:	bf08      	it	eq
 8010e5e:	6031      	streq	r1, [r6, #0]
 8010e60:	5162      	str	r2, [r4, r5]
 8010e62:	604b      	str	r3, [r1, #4]
 8010e64:	4638      	mov	r0, r7
 8010e66:	f104 060b 	add.w	r6, r4, #11
 8010e6a:	f000 f835 	bl	8010ed8 <__malloc_unlock>
 8010e6e:	f026 0607 	bic.w	r6, r6, #7
 8010e72:	1d23      	adds	r3, r4, #4
 8010e74:	1af2      	subs	r2, r6, r3
 8010e76:	d0b6      	beq.n	8010de6 <_malloc_r+0x22>
 8010e78:	1b9b      	subs	r3, r3, r6
 8010e7a:	50a3      	str	r3, [r4, r2]
 8010e7c:	e7b3      	b.n	8010de6 <_malloc_r+0x22>
 8010e7e:	6862      	ldr	r2, [r4, #4]
 8010e80:	42a3      	cmp	r3, r4
 8010e82:	bf0c      	ite	eq
 8010e84:	6032      	streq	r2, [r6, #0]
 8010e86:	605a      	strne	r2, [r3, #4]
 8010e88:	e7ec      	b.n	8010e64 <_malloc_r+0xa0>
 8010e8a:	4623      	mov	r3, r4
 8010e8c:	6864      	ldr	r4, [r4, #4]
 8010e8e:	e7b2      	b.n	8010df6 <_malloc_r+0x32>
 8010e90:	4634      	mov	r4, r6
 8010e92:	6876      	ldr	r6, [r6, #4]
 8010e94:	e7b9      	b.n	8010e0a <_malloc_r+0x46>
 8010e96:	230c      	movs	r3, #12
 8010e98:	603b      	str	r3, [r7, #0]
 8010e9a:	4638      	mov	r0, r7
 8010e9c:	f000 f81c 	bl	8010ed8 <__malloc_unlock>
 8010ea0:	e7a1      	b.n	8010de6 <_malloc_r+0x22>
 8010ea2:	6025      	str	r5, [r4, #0]
 8010ea4:	e7de      	b.n	8010e64 <_malloc_r+0xa0>
 8010ea6:	bf00      	nop
 8010ea8:	240006a0 	.word	0x240006a0

08010eac <_sbrk_r>:
 8010eac:	b538      	push	{r3, r4, r5, lr}
 8010eae:	4d06      	ldr	r5, [pc, #24]	; (8010ec8 <_sbrk_r+0x1c>)
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	4608      	mov	r0, r1
 8010eb6:	602b      	str	r3, [r5, #0]
 8010eb8:	f7f1 fb46 	bl	8002548 <_sbrk>
 8010ebc:	1c43      	adds	r3, r0, #1
 8010ebe:	d102      	bne.n	8010ec6 <_sbrk_r+0x1a>
 8010ec0:	682b      	ldr	r3, [r5, #0]
 8010ec2:	b103      	cbz	r3, 8010ec6 <_sbrk_r+0x1a>
 8010ec4:	6023      	str	r3, [r4, #0]
 8010ec6:	bd38      	pop	{r3, r4, r5, pc}
 8010ec8:	240006a8 	.word	0x240006a8

08010ecc <__malloc_lock>:
 8010ecc:	4801      	ldr	r0, [pc, #4]	; (8010ed4 <__malloc_lock+0x8>)
 8010ece:	f000 b809 	b.w	8010ee4 <__retarget_lock_acquire_recursive>
 8010ed2:	bf00      	nop
 8010ed4:	240006ac 	.word	0x240006ac

08010ed8 <__malloc_unlock>:
 8010ed8:	4801      	ldr	r0, [pc, #4]	; (8010ee0 <__malloc_unlock+0x8>)
 8010eda:	f000 b804 	b.w	8010ee6 <__retarget_lock_release_recursive>
 8010ede:	bf00      	nop
 8010ee0:	240006ac 	.word	0x240006ac

08010ee4 <__retarget_lock_acquire_recursive>:
 8010ee4:	4770      	bx	lr

08010ee6 <__retarget_lock_release_recursive>:
 8010ee6:	4770      	bx	lr

08010ee8 <_init>:
 8010ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eea:	bf00      	nop
 8010eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010eee:	bc08      	pop	{r3}
 8010ef0:	469e      	mov	lr, r3
 8010ef2:	4770      	bx	lr

08010ef4 <_fini>:
 8010ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ef6:	bf00      	nop
 8010ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010efa:	bc08      	pop	{r3}
 8010efc:	469e      	mov	lr, r3
 8010efe:	4770      	bx	lr
