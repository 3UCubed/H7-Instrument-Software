
H7-Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb80  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800fe18  0800fe18  0001fe18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fe70  0800fe70  0001fe70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fe78  0800fe78  0001fe78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fe7c  0800fe7c  0001fe7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  0800fe80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000534  240000a0  0800ff20  000200a0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240005d4  0800ff20  000205d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000239fc  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036dd  00000000  00000000  00043aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b50  00000000  00000000  000471a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a38  00000000  00000000  00048cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b205  00000000  00000000  0004a730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023fc1  00000000  00000000  00085935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018060f  00000000  00000000  000a98f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00229f05  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007938  00000000  00000000  00229f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000a0 	.word	0x240000a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800fe00 	.word	0x0800fe00

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000a4 	.word	0x240000a4
 80002d4:	0800fe00 	.word	0x0800fe00

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  int16_t output;
  uint8_t buf[2];
  HAL_StatusTypeDef ret;
  buf[0] = REG_TEMP;
 8000612:	2300      	movs	r3, #0
 8000614:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1,
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b299      	uxth	r1, r3
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <poll_i2c_sensor+0x94>)
 8000628:	f007 f91a 	bl	8007860 <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
                                1000);
  if (ret != HAL_OK)
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <poll_i2c_sensor+0x42>
  {
    strcpy((char *)buf, "Error Tx\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <poll_i2c_sensor+0x98>)
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e022      	b.n	8000690 <poll_i2c_sensor+0x88>
  }
  else
  {
    /* Read 2 bytes from the temperature register */
    ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2,
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b299      	uxth	r1, r3
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <poll_i2c_sensor+0x94>)
 800065c:	f007 f9f4 	bl	8007a48 <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
                                 1000);
    if (ret != HAL_OK)
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <poll_i2c_sensor+0x76>
    {
      strcpy((char *)buf, "Error Rx\r\n");
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <poll_i2c_sensor+0x9c>)
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	c303      	stmia	r3!, {r0, r1}
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	3302      	adds	r3, #2
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e008      	b.n	8000690 <poll_i2c_sensor+0x88>
    }
    else
    {
      output = (int16_t)(buf[0] << 8);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	81fb      	strh	r3, [r7, #14]
      output = (output | buf[1]) >> 3;
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	7a7a      	ldrb	r2, [r7, #9]
 800068a:	4313      	orrs	r3, r2
 800068c:	10db      	asrs	r3, r3, #3
 800068e:	81fb      	strh	r3, [r7, #14]
    }
  }
  return output;
 8000690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	24000288 	.word	0x24000288
 80006a0:	0800fe18 	.word	0x0800fe18
 80006a4:	0800fe24 	.word	0x0800fe24

080006a8 <i2c>:
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t *i2c()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa9 	bl	8000608 <poll_i2c_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
  int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006ba:	2394      	movs	r3, #148	; 0x94
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa3 	bl	8000608 <poll_i2c_sensor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
  int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006c6:	2392      	movs	r3, #146	; 0x92
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9d 	bl	8000608 <poll_i2c_sensor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
  int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006d2:	2396      	movs	r3, #150	; 0x96
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff97 	bl	8000608 <poll_i2c_sensor>
 80006da:	4603      	mov	r3, r0
 80006dc:	813b      	strh	r3, [r7, #8]

  int16_t *results = malloc(4 * sizeof(int16_t));
 80006de:	2008      	movs	r0, #8
 80006e0:	f00f fa6a 	bl	800fbb8 <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
  results[0] = output1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	89fa      	ldrh	r2, [r7, #14]
 80006ec:	801a      	strh	r2, [r3, #0]
  results[1] = output2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3302      	adds	r3, #2
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	801a      	strh	r2, [r3, #0]
  results[2] = output3;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	897a      	ldrh	r2, [r7, #10]
 80006fc:	801a      	strh	r2, [r3, #0]
  results[3] = output4;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	893a      	ldrh	r2, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
  return results;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <do_auto_sweep>:
/**
 * @brief if auto sweep is enabled, will increase step
 *
 */
void do_auto_sweep()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	if (step == 9)
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <do_auto_sweep+0x80>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b09      	cmp	r3, #9
 800071a:	d109      	bne.n	8000730 <do_auto_sweep+0x20>
	  {
		  is_increasing = 0;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <do_auto_sweep+0x84>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
		  step--;
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <do_auto_sweep+0x80>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	3b01      	subs	r3, #1
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <do_auto_sweep+0x80>)
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e00c      	b.n	800074a <do_auto_sweep+0x3a>
	  }
	  else if (step == 0)
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <do_auto_sweep+0x80>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d108      	bne.n	800074a <do_auto_sweep+0x3a>
	  {
	    is_increasing = 1;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <do_auto_sweep+0x84>)
 800073a:	2201      	movs	r2, #1
 800073c:	601a      	str	r2, [r3, #0]
	    step++;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <do_auto_sweep+0x80>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <do_auto_sweep+0x80>)
 8000748:	701a      	strb	r2, [r3, #0]
	  }

	  if (is_increasing)
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <do_auto_sweep+0x84>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d006      	beq.n	8000760 <do_auto_sweep+0x50>
	  {
	    step++;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <do_auto_sweep+0x80>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <do_auto_sweep+0x80>)
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	e005      	b.n	800076c <do_auto_sweep+0x5c>
	  }
	  else
	  {
	    step--;
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <do_auto_sweep+0x80>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3b01      	subs	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <do_auto_sweep+0x80>)
 800076a:	701a      	strb	r2, [r3, #0]
	  }

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <do_auto_sweep+0x80>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <do_auto_sweep+0x88>)
 8000774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	4807      	ldr	r0, [pc, #28]	; (800079c <do_auto_sweep+0x8c>)
 800077e:	f003 fe6c 	bl	800445a <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000782:	2100      	movs	r1, #0
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <do_auto_sweep+0x8c>)
 8000786:	f003 fe16 	bl	80043b6 <HAL_DAC_Start>

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	240005a8 	.word	0x240005a8
 8000794:	24000028 	.word	0x24000028
 8000798:	24000000 	.word	0x24000000
 800079c:	24000274 	.word	0x24000274

080007a0 <spi>:
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi)
{
 80007a0:	b084      	sub	sp, #16
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	f107 0c18 	add.w	ip, r7, #24
 80007ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi,(uint8_t *)spiRxBuffer, 1, 1);
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	2301      	movs	r3, #1
 80007b4:	2201      	movs	r2, #1
 80007b6:	f107 0018 	add.w	r0, r7, #24
 80007ba:	f00b f80d 	bl	800b7d8 <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 80007c2:	797b      	ldrb	r3, [r7, #5]
 80007c4:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007d0:	601a      	str	r2, [r3, #0]
	uint8_t* results = malloc(2 * sizeof(uint8_t));
 80007d2:	2002      	movs	r0, #2
 80007d4:	f00f f9f0 	bl	800fbb8 <malloc>
 80007d8:	4603      	mov	r3, r0
 80007da:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	7bba      	ldrb	r2, [r7, #14]
 80007e0:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3301      	adds	r3, #1
 80007e6:	7bfa      	ldrb	r2, [r7, #15]
 80007e8:	701a      	strb	r2, [r3, #0]
	return results;
 80007ea:	68bb      	ldr	r3, [r7, #8]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f6:	b004      	add	sp, #16
 80007f8:	4770      	bx	lr
	...

080007fc <set_erpa_sweep>:
/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <set_erpa_sweep+0x28>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <set_erpa_sweep+0x2c>)
 8000808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <set_erpa_sweep+0x30>)
 8000812:	f003 fe22 	bl	800445a <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000816:	2100      	movs	r1, #0
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <set_erpa_sweep+0x30>)
 800081a:	f003 fdcc 	bl	80043b6 <HAL_DAC_Start>

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	240005a8 	.word	0x240005a8
 8000828:	24000000 	.word	0x24000000
 800082c:	24000274 	.word	0x24000274

08000830 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0

	uint16_t PA0 = ADC1Data[10]; 			// ENDmon -- verified
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <erpa_adc+0x44>)
 8000838:	8a9b      	ldrh	r3, [r3, #20]
 800083a:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3]; 			// SWPmon -- verified
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <erpa_adc+0x44>)
 800083e:	88db      	ldrh	r3, [r3, #6]
 8000840:	81bb      	strh	r3, [r7, #12]
	uint16_t PB0 = ADC1Data[5]; 			// TEMP1 -- verified
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <erpa_adc+0x44>)
 8000844:	895b      	ldrh	r3, [r3, #10]
 8000846:	817b      	strh	r3, [r7, #10]

	uint16_t* results = malloc(3 * sizeof(uint16_t));
 8000848:	2006      	movs	r0, #6
 800084a:	f00f f9b5 	bl	800fbb8 <malloc>
 800084e:	4603      	mov	r3, r0
 8000850:	607b      	str	r3, [r7, #4]
	results[0] = PA0;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	89fa      	ldrh	r2, [r7, #14]
 8000856:	801a      	strh	r2, [r3, #0]
	results[1] = PA7;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3302      	adds	r3, #2
 800085c:	89ba      	ldrh	r2, [r7, #12]
 800085e:	801a      	strh	r2, [r3, #0]
	results[2] = PB0;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3304      	adds	r3, #4
 8000864:	897a      	ldrh	r2, [r7, #10]
 8000866:	801a      	strh	r2, [r3, #0]

	return results;
 8000868:	687b      	ldr	r3, [r7, #4]


}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	24000580 	.word	0x24000580

08000878 <hk_adc1>:

uint16_t* hk_adc1() {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[11];			// BUSVmon -- verified
 800087e:	4b24      	ldr	r3, [pc, #144]	; (8000910 <hk_adc1+0x98>)
 8000880:	8adb      	ldrh	r3, [r3, #22]
 8000882:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[8];				// BUSImon -- verified
 8000884:	4b22      	ldr	r3, [pc, #136]	; (8000910 <hk_adc1+0x98>)
 8000886:	8a1b      	ldrh	r3, [r3, #16]
 8000888:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];				// 2v5mon -- verified
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <hk_adc1+0x98>)
 800088c:	899b      	ldrh	r3, [r3, #12]
 800088e:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// 3v3mon -- verified
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <hk_adc1+0x98>)
 8000892:	8a5b      	ldrh	r3, [r3, #18]
 8000894:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[2];				// n200v -- verified
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <hk_adc1+0x98>)
 8000898:	889b      	ldrh	r3, [r3, #4]
 800089a:	81fb      	strh	r3, [r7, #14]
	uint16_t PA6 = ADC1Data[0];				// n800v -- verified
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <hk_adc1+0x98>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// n5vmon -- verified
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <hk_adc1+0x98>)
 80008a4:	89db      	ldrh	r3, [r3, #14]
 80008a6:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];				// 15vmon -- verified
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <hk_adc1+0x98>)
 80008aa:	891b      	ldrh	r3, [r3, #8]
 80008ac:	813b      	strh	r3, [r7, #8]
	uint16_t PC4 = ADC1Data[1];				// 5vrefmon -- verified
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <hk_adc1+0x98>)
 80008b0:	885b      	ldrh	r3, [r3, #2]
 80008b2:	80fb      	strh	r3, [r7, #6]

	uint16_t* results = malloc(9 * sizeof(uint16_t));
 80008b4:	2012      	movs	r0, #18
 80008b6:	f00f f97f 	bl	800fbb8 <malloc>
 80008ba:	4603      	mov	r3, r0
 80008bc:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	8afa      	ldrh	r2, [r7, #22]
 80008c2:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	3302      	adds	r3, #2
 80008c8:	8aba      	ldrh	r2, [r7, #20]
 80008ca:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	3304      	adds	r3, #4
 80008d0:	8a7a      	ldrh	r2, [r7, #18]
 80008d2:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	3306      	adds	r3, #6
 80008d8:	8a3a      	ldrh	r2, [r7, #16]
 80008da:	801a      	strh	r2, [r3, #0]
	results[4] = PB1;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	3308      	adds	r3, #8
 80008e0:	89fa      	ldrh	r2, [r7, #14]
 80008e2:	801a      	strh	r2, [r3, #0]
	results[5] = PA6;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	330a      	adds	r3, #10
 80008e8:	89ba      	ldrh	r2, [r7, #12]
 80008ea:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	330c      	adds	r3, #12
 80008f0:	897a      	ldrh	r2, [r7, #10]
 80008f2:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	330e      	adds	r3, #14
 80008f8:	893a      	ldrh	r2, [r7, #8]
 80008fa:	801a      	strh	r2, [r3, #0]
	results[8] = PC4;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	3310      	adds	r3, #16
 8000900:	88fa      	ldrh	r2, [r7, #6]
 8000902:	801a      	strh	r2, [r3, #0]

	return results;
 8000904:	683b      	ldr	r3, [r7, #0]

}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	24000580 	.word	0x24000580

08000914 <hk_adc3>:

uint16_t* hk_adc3() {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[0];
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <hk_adc3+0x50>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[1];
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <hk_adc3+0x50>)
 8000922:	885b      	ldrh	r3, [r3, #2]
 8000924:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3Data[2]; 		// 5vmon --
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <hk_adc3+0x50>)
 8000928:	889b      	ldrh	r3, [r3, #4]
 800092a:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3Data[3];			// n3v3mon
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <hk_adc3+0x50>)
 800092e:	88db      	ldrh	r3, [r3, #6]
 8000930:	813b      	strh	r3, [r7, #8]

	uint16_t* results = malloc(4 * sizeof(uint16_t));
 8000932:	2008      	movs	r0, #8
 8000934:	f00f f940 	bl	800fbb8 <malloc>
 8000938:	4603      	mov	r3, r0
 800093a:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	89fa      	ldrh	r2, [r7, #14]
 8000940:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3302      	adds	r3, #2
 8000946:	89ba      	ldrh	r2, [r7, #12]
 8000948:	801a      	strh	r2, [r3, #0]
	results[2] = PC2;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3304      	adds	r3, #4
 800094e:	897a      	ldrh	r2, [r7, #10]
 8000950:	801a      	strh	r2, [r3, #0]
	results[3] = PC3;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3306      	adds	r3, #6
 8000956:	893a      	ldrh	r2, [r7, #8]
 8000958:	801a      	strh	r2, [r3, #0]

	return results;
 800095a:	687b      	ldr	r3, [r7, #4]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	240005a0 	.word	0x240005a0

08000968 <send_erpa_packet>:
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t* erpa_spi, uint16_t *erpa_adc_results)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  						// ERPA SYNC 0xAA MSB
 8000972:	23aa      	movs	r3, #170	; 0xaa
 8000974:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  						// ERPA SYNC 0xAA LSB
 8000976:	23aa      	movs	r3, #170	; 0xaa
 8000978:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 						// ERPA SEQ # MSB
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <send_erpa_packet+0xa0>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	b29b      	uxth	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          						// ERPA SEQ # MSB
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <send_erpa_packet+0xa0>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((erpa_adc_results[0] & 0xFF00) >> 8); 	  		// ENDmon MSB
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	b29b      	uxth	r3, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (erpa_adc_results[0] & 0xFF);               		// ENDmon LSB
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[1] & 0xFF00) >> 8);      		// SWP Monitored MSB
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	3302      	adds	r3, #2
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[1] & 0xFF);               		// SWP Monitored LSB
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	3302      	adds	r3, #2
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[2] & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	3304      	adds	r3, #4
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[2] & 0xFF);               		// TEMPURATURE 1 LSB
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	3304      	adds	r3, #4
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     						// TEMPURATURE 2 MSB
 80009d2:	2300      	movs	r3, #0
 80009d4:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    					// TEMPURATURE 2 LSB
 80009d6:	2300      	movs	r3, #0
 80009d8:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];										// ERPA eADC MSB
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];										// ERPA eADC LSB
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	785b      	ldrb	r3, [r3, #1]
 80009e4:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80009e6:	f107 0108 	add.w	r1, r7, #8
 80009ea:	2364      	movs	r3, #100	; 0x64
 80009ec:	220e      	movs	r2, #14
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <send_erpa_packet+0xa4>)
 80009f0:	f00c fda0 	bl	800d534 <HAL_UART_Transmit>
	erpa_seq++;
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <send_erpa_packet+0xa0>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <send_erpa_packet+0xa0>)
 80009fe:	801a      	strh	r2, [r3, #0]

}
 8000a00:	bf00      	nop
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	240005b0 	.word	0x240005b0
 8000a0c:	2400047c 	.word	0x2400047c

08000a10 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results, uint16_t *hk_adc3_results)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	; 0x38
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];

	hk_buf[0] = hk_sync;                     		// HK SYNC 0xCC MSB					0 SYNC
 8000a1c:	23cc      	movs	r3, #204	; 0xcc
 8000a1e:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     		// HK SYNC 0xCC LSB
 8000a20:	23cc      	movs	r3, #204	; 0xcc
 8000a22:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    		// HK SEQ # MSB		1 SEQUENCE
 8000a24:	4b7d      	ldr	r3, [pc, #500]	; (8000c1c <send_hk_packet+0x20c>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             		// HK SEQ # LSB
 8000a30:	4b7a      	ldr	r3, [pc, #488]	; (8000c1c <send_hk_packet+0x20c>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3302      	adds	r3, #2
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a6a:	121b      	asrs	r3, r3, #8
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a82:	121b      	asrs	r3, r3, #8
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3304      	adds	r3, #4
 8000a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a9c:	121b      	asrs	r3, r3, #8
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3306      	adds	r3, #6
 8000ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab6:	121b      	asrs	r3, r3, #8
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3306      	adds	r3, #6
 8000ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	3302      	adds	r3, #2
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	3304      	adds	r3, #4
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	3304      	adds	r3, #4
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc1_results[3] & 0xFF00) >> 8);
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3306      	adds	r3, #6
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc1_results[3] & 0xFF);
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	3306      	adds	r3, #6
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc3_results[2] & 0xFF00) >> 8);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3304      	adds	r3, #4
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc3_results[2] & 0xFF);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3304      	adds	r3, #4
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc3_results[3] & 0xFF00) >> 8);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3306      	adds	r3, #6
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	0a1b      	lsrs	r3, r3, #8
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc3_results[3] & 0xFF);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3306      	adds	r3, #6
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc1_results[6] & 0xFF00) >> 8);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	330c      	adds	r3, #12
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	0a1b      	lsrs	r3, r3, #8
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc1_results[6] & 0xFF);
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	330c      	adds	r3, #12
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	330e      	adds	r3, #14
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	0a1b      	lsrs	r3, r3, #8
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	330e      	adds	r3, #14
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	3310      	adds	r3, #16
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	0a1b      	lsrs	r3, r3, #8
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	3310      	adds	r3, #16
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	3308      	adds	r3, #8
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	0a1b      	lsrs	r3, r3, #8
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[4] & 0xFF);
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	3308      	adds	r3, #8
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	330a      	adds	r3, #10
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	0a1b      	lsrs	r3, r3, #8
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc1_results[5] & 0xFF);
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	330a      	adds	r3, #10
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000bf8:	f107 0110 	add.w	r1, r7, #16
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	2226      	movs	r2, #38	; 0x26
 8000c00:	4807      	ldr	r0, [pc, #28]	; (8000c20 <send_hk_packet+0x210>)
 8000c02:	f00c fc97 	bl	800d534 <HAL_UART_Transmit>
	hk_seq++;
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <send_hk_packet+0x20c>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <send_hk_packet+0x20c>)
 8000c10:	801a      	strh	r2, [r3, #0]


}
 8000c12:	bf00      	nop
 8000c14:	3738      	adds	r7, #56	; 0x38
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	240005b4 	.word	0x240005b4
 8000c20:	2400047c 	.word	0x2400047c

08000c24 <send_pmt_packet>:
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t* pmt_spi)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;
 8000c2c:	23bb      	movs	r3, #187	; 0xbb
 8000c2e:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;
 8000c30:	23bb      	movs	r3, #187	; 0xbb
 8000c32:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <send_pmt_packet+0x54>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <send_pmt_packet+0x54>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	785b      	ldrb	r3, [r3, #1]
 8000c52:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000c54:	f107 0108 	add.w	r1, r7, #8
 8000c58:	2364      	movs	r3, #100	; 0x64
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	4807      	ldr	r0, [pc, #28]	; (8000c7c <send_pmt_packet+0x58>)
 8000c5e:	f00c fc69 	bl	800d534 <HAL_UART_Transmit>
	pmt_seq++;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <send_pmt_packet+0x54>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <send_pmt_packet+0x54>)
 8000c6c:	801a      	strh	r2, [r3, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	240005b2 	.word	0x240005b2
 8000c7c:	2400047c 	.word	0x2400047c

08000c80 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b0a7      	sub	sp, #156	; 0x9c
 8000c84:	af1e      	add	r7, sp, #120	; 0x78
 8000c86:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a3b      	ldr	r2, [pc, #236]	; (8000d78 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d14b      	bne.n	8000d28 <HAL_TIM_OC_DelayElapsedCallback+0xa8>
  {
      if (ERPA_ON)
 8000c90:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d02b      	beq.n	8000cf0 <HAL_TIM_OC_DelayElapsedCallback+0x70>
      {


		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {}
 8000c98:	bf00      	nop
 8000c9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c9e:	4838      	ldr	r0, [pc, #224]	; (8000d80 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000ca0:	f006 fd1c 	bl	80076dc <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f7      	bne.n	8000c9a <HAL_TIM_OC_DelayElapsedCallback+0x1a>

		uint8_t* spi2_results = spi(hspi2);
 8000caa:	4c36      	ldr	r4, [pc, #216]	; (8000d84 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000cac:	4668      	mov	r0, sp
 8000cae:	f104 0310 	add.w	r3, r4, #16
 8000cb2:	2278      	movs	r2, #120	; 0x78
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f00e ff8f 	bl	800fbd8 <memcpy>
 8000cba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cbe:	f7ff fd6f 	bl	80007a0 <spi>
 8000cc2:	61b8      	str	r0, [r7, #24]
        uint16_t *erpa_adc_results = erpa_adc();
 8000cc4:	f7ff fdb4 	bl	8000830 <erpa_adc>
 8000cc8:	6178      	str	r0, [r7, #20]

        if (auto_sweep)
 8000cca:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x58>
		{
		  do_auto_sweep();
 8000cd2:	f7ff fd1d 	bl	8000710 <do_auto_sweep>
 8000cd6:	e001      	b.n	8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x5c>
		} else {
		  set_erpa_sweep();
 8000cd8:	f7ff fd90 	bl	80007fc <set_erpa_sweep>
		}


		send_erpa_packet(spi2_results, erpa_adc_results);
 8000cdc:	6979      	ldr	r1, [r7, #20]
 8000cde:	69b8      	ldr	r0, [r7, #24]
 8000ce0:	f7ff fe42 	bl	8000968 <send_erpa_packet>

		free(spi2_results);
 8000ce4:	69b8      	ldr	r0, [r7, #24]
 8000ce6:	f00e ff6f 	bl	800fbc8 <free>
		free(erpa_adc_results);
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f00e ff6c 	bl	800fbc8 <free>
      }
      if (HK_ON)
 8000cf0:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d03b      	beq.n	8000d70 <HAL_TIM_OC_DelayElapsedCallback+0xf0>
      {
    	  int16_t *i2c_values = i2c();
 8000cf8:	f7ff fcd6 	bl	80006a8 <i2c>
 8000cfc:	6138      	str	r0, [r7, #16]
    	  uint16_t* hk_adc1_results = hk_adc1();
 8000cfe:	f7ff fdbb 	bl	8000878 <hk_adc1>
 8000d02:	60f8      	str	r0, [r7, #12]
    	  uint16_t* hk_adc3_results = hk_adc3();
 8000d04:	f7ff fe06 	bl	8000914 <hk_adc3>
 8000d08:	60b8      	str	r0, [r7, #8]


    	  send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	68f9      	ldr	r1, [r7, #12]
 8000d0e:	6938      	ldr	r0, [r7, #16]
 8000d10:	f7ff fe7e 	bl	8000a10 <send_hk_packet>


          free(i2c_values);
 8000d14:	6938      	ldr	r0, [r7, #16]
 8000d16:	f00e ff57 	bl	800fbc8 <free>
          free(hk_adc1_results);
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f00e ff54 	bl	800fbc8 <free>
          free(hk_adc3_results);
 8000d20:	68b8      	ldr	r0, [r7, #8]
 8000d22:	f00e ff51 	bl	800fbc8 <free>
  		send_pmt_packet(spi1_results);

		free(spi1_results);
      }
  }
}
 8000d26:	e023      	b.n	8000d70 <HAL_TIM_OC_DelayElapsedCallback+0xf0>
  else if (htim == &htim1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d11f      	bne.n	8000d70 <HAL_TIM_OC_DelayElapsedCallback+0xf0>
      if (PMT_ON)
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d01b      	beq.n	8000d70 <HAL_TIM_OC_DelayElapsedCallback+0xf0>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {}
 8000d38:	bf00      	nop
 8000d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3e:	4816      	ldr	r0, [pc, #88]	; (8000d98 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8000d40:	f006 fccc 	bl	80076dc <HAL_GPIO_ReadPin>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1f7      	bne.n	8000d3a <HAL_TIM_OC_DelayElapsedCallback+0xba>
  		uint8_t* spi1_results = spi(hspi1);
 8000d4a:	4c14      	ldr	r4, [pc, #80]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8000d4c:	4668      	mov	r0, sp
 8000d4e:	f104 0310 	add.w	r3, r4, #16
 8000d52:	2278      	movs	r2, #120	; 0x78
 8000d54:	4619      	mov	r1, r3
 8000d56:	f00e ff3f 	bl	800fbd8 <memcpy>
 8000d5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d5e:	f7ff fd1f 	bl	80007a0 <spi>
 8000d62:	61f8      	str	r0, [r7, #28]
  		send_pmt_packet(spi1_results);
 8000d64:	69f8      	ldr	r0, [r7, #28]
 8000d66:	f7ff ff5d 	bl	8000c24 <send_pmt_packet>
		free(spi1_results);
 8000d6a:	69f8      	ldr	r0, [r7, #28]
 8000d6c:	f00e ff2c 	bl	800fbc8 <free>
}
 8000d70:	bf00      	nop
 8000d72:	3724      	adds	r7, #36	; 0x24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	24000430 	.word	0x24000430
 8000d7c:	240005b7 	.word	0x240005b7
 8000d80:	58020400 	.word	0x58020400
 8000d84:	2400035c 	.word	0x2400035c
 8000d88:	240005ac 	.word	0x240005ac
 8000d8c:	240005b8 	.word	0x240005b8
 8000d90:	240003e4 	.word	0x240003e4
 8000d94:	240005b6 	.word	0x240005b6
 8000d98:	58020000 	.word	0x58020000
 8000d9c:	240002d4 	.word	0x240002d4

08000da0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000da8:	2201      	movs	r2, #1
 8000daa:	49a0      	ldr	r1, [pc, #640]	; (800102c <HAL_UART_RxCpltCallback+0x28c>)
 8000dac:	48a0      	ldr	r0, [pc, #640]	; (8001030 <HAL_UART_RxCpltCallback+0x290>)
 8000dae:	f00c fc57 	bl	800d660 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000db2:	4b9e      	ldr	r3, [pc, #632]	; (800102c <HAL_UART_RxCpltCallback+0x28c>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2b1d      	cmp	r3, #29
 8000dbc:	f200 8131 	bhi.w	8001022 <HAL_UART_RxCpltCallback+0x282>
 8000dc0:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <HAL_UART_RxCpltCallback+0x28>)
 8000dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc6:	bf00      	nop
 8000dc8:	08000ecd 	.word	0x08000ecd
 8000dcc:	08000ee9 	.word	0x08000ee9
 8000dd0:	08000f05 	.word	0x08000f05
 8000dd4:	08000f25 	.word	0x08000f25
 8000dd8:	08000f45 	.word	0x08000f45
 8000ddc:	08000f61 	.word	0x08000f61
 8000de0:	08000f81 	.word	0x08000f81
 8000de4:	08000fa1 	.word	0x08000fa1
 8000de8:	08000e5d 	.word	0x08000e5d
 8000dec:	08000e6b 	.word	0x08000e6b
 8000df0:	08000e4f 	.word	0x08000e4f
 8000df4:	08000e41 	.word	0x08000e41
 8000df8:	08000fbd 	.word	0x08000fbd
 8000dfc:	08000fcd 	.word	0x08000fcd
 8000e00:	08000fed 	.word	0x08000fed
 8000e04:	0800100d 	.word	0x0800100d
 8000e08:	08000fdd 	.word	0x08000fdd
 8000e0c:	08000ffd 	.word	0x08000ffd
 8000e10:	08001015 	.word	0x08001015
 8000e14:	08000edb 	.word	0x08000edb
 8000e18:	08000ef7 	.word	0x08000ef7
 8000e1c:	08000f15 	.word	0x08000f15
 8000e20:	08000f35 	.word	0x08000f35
 8000e24:	08000f53 	.word	0x08000f53
 8000e28:	08000f71 	.word	0x08000f71
 8000e2c:	08000f91 	.word	0x08000f91
 8000e30:	08000faf 	.word	0x08000faf
 8000e34:	08000e79 	.word	0x08000e79
 8000e38:	08000e91 	.word	0x08000e91
 8000e3c:	08000ea9 	.word	0x08000ea9
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000e40:	4b7c      	ldr	r3, [pc, #496]	; (8001034 <HAL_UART_RxCpltCallback+0x294>)
 8000e42:	2140      	movs	r1, #64	; 0x40
 8000e44:	2201      	movs	r2, #1
 8000e46:	4618      	mov	r0, r3
 8000e48:	f006 fc60 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000e4c:	e0e9      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000e4e:	4b79      	ldr	r3, [pc, #484]	; (8001034 <HAL_UART_RxCpltCallback+0x294>)
 8000e50:	2140      	movs	r1, #64	; 0x40
 8000e52:	2200      	movs	r2, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f006 fc59 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000e5a:	e0e2      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000e5c:	4b75      	ldr	r3, [pc, #468]	; (8001034 <HAL_UART_RxCpltCallback+0x294>)
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	2201      	movs	r2, #1
 8000e62:	4618      	mov	r0, r3
 8000e64:	f006 fc52 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000e68:	e0db      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000e6a:	4b72      	ldr	r3, [pc, #456]	; (8001034 <HAL_UART_RxCpltCallback+0x294>)
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f006 fc4b 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000e76:	e0d4      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x1B:
  {
	  if (step < 9)
 8000e78:	4b6f      	ldr	r3, [pc, #444]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	f200 80cd 	bhi.w	800101c <HAL_UART_RxCpltCallback+0x27c>
	  {
		step++;
 8000e82:	4b6d      	ldr	r3, [pc, #436]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b6b      	ldr	r3, [pc, #428]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000e8c:	701a      	strb	r2, [r3, #0]
	  }
	  break;
 8000e8e:	e0c5      	b.n	800101c <HAL_UART_RxCpltCallback+0x27c>
  }
  case 0x1C:
  {
    if (step > 0)
 8000e90:	4b69      	ldr	r3, [pc, #420]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 80c3 	beq.w	8001020 <HAL_UART_RxCpltCallback+0x280>
    {
      step--;
 8000e9a:	4b67      	ldr	r3, [pc, #412]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b65      	ldr	r3, [pc, #404]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000ea4:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000ea6:	e0bb      	b.n	8001020 <HAL_UART_RxCpltCallback+0x280>
  }
  case 0x1D: {
	if (!auto_sweep) {
 8000ea8:	4b64      	ldr	r3, [pc, #400]	; (800103c <HAL_UART_RxCpltCallback+0x29c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d106      	bne.n	8000ebe <HAL_UART_RxCpltCallback+0x11e>
		auto_sweep = 1;
 8000eb0:	4b62      	ldr	r3, [pc, #392]	; (800103c <HAL_UART_RxCpltCallback+0x29c>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
		step = 0;
 8000eb6:	4b60      	ldr	r3, [pc, #384]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
	} else {
		auto_sweep = 0;
		step = 0;
	}
  	break;
 8000ebc:	e0b1      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
		auto_sweep = 0;
 8000ebe:	4b5f      	ldr	r3, [pc, #380]	; (800103c <HAL_UART_RxCpltCallback+0x29c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
		step = 0;
 8000ec4:	4b5c      	ldr	r3, [pc, #368]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
  	break;
 8000eca:	e0aa      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
   }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000ecc:	4b5c      	ldr	r3, [pc, #368]	; (8001040 <HAL_UART_RxCpltCallback+0x2a0>)
 8000ece:	2120      	movs	r1, #32
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f006 fc1a 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000ed8:	e0a3      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000eda:	4b59      	ldr	r3, [pc, #356]	; (8001040 <HAL_UART_RxCpltCallback+0x2a0>)
 8000edc:	2120      	movs	r1, #32
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f006 fc13 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000ee6:	e09c      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000ee8:	4b55      	ldr	r3, [pc, #340]	; (8001040 <HAL_UART_RxCpltCallback+0x2a0>)
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	2201      	movs	r2, #1
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f006 fc0c 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000ef4:	e095      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000ef6:	4b52      	ldr	r3, [pc, #328]	; (8001040 <HAL_UART_RxCpltCallback+0x2a0>)
 8000ef8:	2140      	movs	r1, #64	; 0x40
 8000efa:	2200      	movs	r2, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f006 fc05 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000f02:	e08e      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000f04:	4b4f      	ldr	r3, [pc, #316]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f006 fbfd 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000f12:	e086      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000f14:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f006 fbf5 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000f22:	e07e      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000f24:	4b47      	ldr	r3, [pc, #284]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f006 fbed 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000f32:	e076      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000f34:	4b43      	ldr	r3, [pc, #268]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f006 fbe5 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000f42:	e06e      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000f44:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f006 fbde 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000f50:	e067      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000f52:	4b3c      	ldr	r3, [pc, #240]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	2200      	movs	r2, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f006 fbd7 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000f5e:	e060      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000f60:	4b38      	ldr	r3, [pc, #224]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f66:	2201      	movs	r2, #1
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f006 fbcf 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000f6e:	e058      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000f70:	4b34      	ldr	r3, [pc, #208]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f76:	2200      	movs	r2, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 fbc7 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000f7e:	e050      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f86:	2201      	movs	r2, #1
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f006 fbbf 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000f8e:	e048      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000f90:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f96:	2200      	movs	r2, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f006 fbb7 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000f9e:	e040      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000fa0:	4b28      	ldr	r3, [pc, #160]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 fbb0 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000fac:	e039      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000fb0:	2140      	movs	r1, #64	; 0x40
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f006 fba9 	bl	800770c <HAL_GPIO_WritePin>
    break;
 8000fba:	e032      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000fbc:	f001 fc9c 	bl	80028f8 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f007 f946 	bl	8008254 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000fc8:	f7ff fb08 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	481d      	ldr	r0, [pc, #116]	; (800104c <HAL_UART_RxCpltCallback+0x2ac>)
 8000fd6:	f00b f8ad 	bl	800c134 <HAL_TIM_OC_Start_IT>
    break;
 8000fda:	e022      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4819      	ldr	r0, [pc, #100]	; (800104c <HAL_UART_RxCpltCallback+0x2ac>)
 8000fe6:	f00b f9ff 	bl	800c3e8 <HAL_TIM_OC_Stop_IT>

    break;
 8000fea:	e01a      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_UART_RxCpltCallback+0x2b0>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000ff2:	210c      	movs	r1, #12
 8000ff4:	4817      	ldr	r0, [pc, #92]	; (8001054 <HAL_UART_RxCpltCallback+0x2b4>)
 8000ff6:	f00b f89d 	bl	800c134 <HAL_TIM_OC_Start_IT>
    break;
 8000ffa:	e012      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_UART_RxCpltCallback+0x2b0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001002:	210c      	movs	r1, #12
 8001004:	4813      	ldr	r0, [pc, #76]	; (8001054 <HAL_UART_RxCpltCallback+0x2b4>)
 8001006:	f00b f9ef 	bl	800c3e8 <HAL_TIM_OC_Stop_IT>

    break;
 800100a:	e00a      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x0F:
  {
    HK_ON = 1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_UART_RxCpltCallback+0x2b8>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
    break;
 8001012:	e006      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x12:
  {
    HK_ON = 0;
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_UART_RxCpltCallback+0x2b8>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
    break;
 800101a:	e002      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
	  break;
 800101c:	bf00      	nop
 800101e:	e000      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
    break;
 8001020:	bf00      	nop
  }
  }
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2400050c 	.word	0x2400050c
 8001030:	2400047c 	.word	0x2400047c
 8001034:	58021400 	.word	0x58021400
 8001038:	240005a8 	.word	0x240005a8
 800103c:	240005ac 	.word	0x240005ac
 8001040:	58020400 	.word	0x58020400
 8001044:	58020800 	.word	0x58020800
 8001048:	240005b6 	.word	0x240005b6
 800104c:	240003e4 	.word	0x240003e4
 8001050:	240005b7 	.word	0x240005b7
 8001054:	24000430 	.word	0x24000430
 8001058:	240005b8 	.word	0x240005b8

0800105c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001060:	f001 fb94 	bl	800278c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001064:	f000 f868 	bl	8001138 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001068:	f000 f8ec 	bl	8001244 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106c:	f000 fd5c 	bl	8001b28 <MX_GPIO_Init>
  MX_DAC1_Init();
 8001070:	f000 fada 	bl	8001628 <MX_DAC1_Init>
  MX_TIM1_Init();
 8001074:	f000 fbfa 	bl	800186c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001078:	f000 fc88 	bl	800198c <MX_TIM2_Init>
  MX_I2C1_Init();
 800107c:	f000 fb06 	bl	800168c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001080:	f000 fb44 	bl	800170c <MX_SPI1_Init>
  MX_DMA_Init();
 8001084:	f000 fd28 	bl	8001ad8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001088:	f000 f90a 	bl	80012a0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800108c:	f000 fcd8 	bl	8001a40 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8001090:	f000 fa38 	bl	8001504 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001094:	f000 fb92 	bl	80017bc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

//  SYSCFG->PMCR &= ~(1 << 27);
//  SYSCFG->PMCR &= ~(1 << 26);

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8001098:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800109c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010a0:	481f      	ldr	r0, [pc, #124]	; (8001120 <main+0xc4>)
 80010a2:	f002 ff15 	bl	8003ed0 <HAL_ADCEx_Calibration_Start>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <main+0x54>
  {
    /* Calibration Error */
    Error_Handler();
 80010ac:	f000 fe46 	bl	8001d3c <Error_Handler>
  }

  if (HAL_ADC_Start_DMA(&hadc1,
 80010b0:	220c      	movs	r2, #12
 80010b2:	491c      	ldr	r1, [pc, #112]	; (8001124 <main+0xc8>)
 80010b4:	481a      	ldr	r0, [pc, #104]	; (8001120 <main+0xc4>)
 80010b6:	f002 f801 	bl	80030bc <HAL_ADC_Start_DMA>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <main+0x68>
		  (uint32_t *)ADC1Data,
		  ADC1NumChannels
		  ) != HAL_OK) {
	  Error_Handler();
 80010c0:	f000 fe3c 	bl	8001d3c <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80010c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010cc:	4816      	ldr	r0, [pc, #88]	; (8001128 <main+0xcc>)
 80010ce:	f002 feff 	bl	8003ed0 <HAL_ADCEx_Calibration_Start>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <main+0x80>
  {
	/* Calibration Error */
	Error_Handler();
 80010d8:	f000 fe30 	bl	8001d3c <Error_Handler>
  }

  if (HAL_ADC_Start_DMA(&hadc3,
 80010dc:	2204      	movs	r2, #4
 80010de:	4913      	ldr	r1, [pc, #76]	; (800112c <main+0xd0>)
 80010e0:	4811      	ldr	r0, [pc, #68]	; (8001128 <main+0xcc>)
 80010e2:	f001 ffeb 	bl	80030bc <HAL_ADC_Start_DMA>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <main+0x94>
		  (uint32_t *)ADC3Data,
		  ADC3NumChannels)
		  != HAL_OK) {
	  Error_Handler();
 80010ec:	f000 fe26 	bl	8001d3c <Error_Handler>
  }


  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80010f0:	bf00      	nop
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <main+0xd4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d0f7      	beq.n	80010f2 <main+0x96>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001102:	bf00      	nop
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <main+0xd4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001112:	d1f7      	bne.n	8001104 <main+0xa8>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8001114:	2201      	movs	r2, #1
 8001116:	4907      	ldr	r1, [pc, #28]	; (8001134 <main+0xd8>)
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <main+0xd4>)
 800111a:	f00c faa1 	bl	800d660 <HAL_UART_Receive_IT>
 800111e:	e7f9      	b.n	8001114 <main+0xb8>
 8001120:	240000bc 	.word	0x240000bc
 8001124:	24000580 	.word	0x24000580
 8001128:	24000120 	.word	0x24000120
 800112c:	240005a0 	.word	0x240005a0
 8001130:	2400047c 	.word	0x2400047c
 8001134:	2400050c 	.word	0x2400050c

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b09c      	sub	sp, #112	; 0x70
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	224c      	movs	r2, #76	; 0x4c
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f00e fd54 	bl	800fbf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2220      	movs	r2, #32
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f00e fd4e 	bl	800fbf4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001158:	2002      	movs	r0, #2
 800115a:	f007 f8b7 	bl	80082cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	4b35      	ldr	r3, [pc, #212]	; (8001238 <SystemClock_Config+0x100>)
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001166:	4a34      	ldr	r2, [pc, #208]	; (8001238 <SystemClock_Config+0x100>)
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800116e:	4b32      	ldr	r3, [pc, #200]	; (8001238 <SystemClock_Config+0x100>)
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	4b30      	ldr	r3, [pc, #192]	; (800123c <SystemClock_Config+0x104>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001180:	4a2e      	ldr	r2, [pc, #184]	; (800123c <SystemClock_Config+0x104>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b2c      	ldr	r3, [pc, #176]	; (800123c <SystemClock_Config+0x104>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001194:	bf00      	nop
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <SystemClock_Config+0x104>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800119e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a2:	d1f8      	bne.n	8001196 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <SystemClock_Config+0x108>)
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	4a25      	ldr	r2, [pc, #148]	; (8001240 <SystemClock_Config+0x108>)
 80011aa:	f023 0303 	bic.w	r3, r3, #3
 80011ae:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b0:	2302      	movs	r3, #2
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2340      	movs	r3, #64	; 0x40
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c0:	2300      	movs	r3, #0
 80011c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011c4:	2304      	movs	r3, #4
 80011c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80011c8:	230c      	movs	r3, #12
 80011ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011d8:	230c      	movs	r3, #12
 80011da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011dc:	2300      	movs	r3, #0
 80011de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	4618      	mov	r0, r3
 80011ea:	f007 f8a9 	bl	8008340 <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011f4:	f000 fda2 	bl	8001d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	233f      	movs	r3, #63	; 0x3f
 80011fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2303      	movs	r3, #3
 80011fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001204:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2101      	movs	r1, #1
 800121e:	4618      	mov	r0, r3
 8001220:	f007 fcbc 	bl	8008b9c <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800122a:	f000 fd87 	bl	8001d3c <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3770      	adds	r7, #112	; 0x70
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	58000400 	.word	0x58000400
 800123c:	58024800 	.word	0x58024800
 8001240:	58024400 	.word	0x58024400

08001244 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0b0      	sub	sp, #192	; 0xc0
 8001248:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	22bc      	movs	r2, #188	; 0xbc
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f00e fccf 	bl	800fbf4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001256:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800125a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800125c:	2304      	movs	r3, #4
 800125e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001260:	2309      	movs	r3, #9
 8001262:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001268:	2302      	movs	r3, #2
 800126a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800126c:	2302      	movs	r3, #2
 800126e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001270:	23c0      	movs	r3, #192	; 0xc0
 8001272:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001274:	2320      	movs	r3, #32
 8001276:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001278:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4618      	mov	r0, r3
 8001288:	f008 f814 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8001292:	f000 fd53 	bl	8001d3c <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	37c0      	adds	r7, #192	; 0xc0
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b2:	463b      	mov	r3, r7
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
 80012c0:	615a      	str	r2, [r3, #20]
 80012c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012c4:	4b81      	ldr	r3, [pc, #516]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012c6:	4a82      	ldr	r2, [pc, #520]	; (80014d0 <MX_ADC1_Init+0x230>)
 80012c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012ca:	4b80      	ldr	r3, [pc, #512]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d2:	4b7e      	ldr	r3, [pc, #504]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012d4:	2208      	movs	r2, #8
 80012d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012d8:	4b7c      	ldr	r3, [pc, #496]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012da:	2201      	movs	r2, #1
 80012dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012de:	4b7b      	ldr	r3, [pc, #492]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012e0:	2204      	movs	r2, #4
 80012e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012e4:	4b79      	ldr	r3, [pc, #484]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ea:	4b78      	ldr	r3, [pc, #480]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 12;
 80012f0:	4b76      	ldr	r3, [pc, #472]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f6:	4b75      	ldr	r3, [pc, #468]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012fc:	4b73      	ldr	r3, [pc, #460]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001302:	4b72      	ldr	r3, [pc, #456]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001308:	4b70      	ldr	r3, [pc, #448]	; (80014cc <MX_ADC1_Init+0x22c>)
 800130a:	2203      	movs	r2, #3
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800130e:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001310:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001314:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001316:	4b6d      	ldr	r3, [pc, #436]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001318:	2200      	movs	r2, #0
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800131c:	4b6b      	ldr	r3, [pc, #428]	; (80014cc <MX_ADC1_Init+0x22c>)
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001324:	4869      	ldr	r0, [pc, #420]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001326:	f001 fd27 	bl	8002d78 <HAL_ADC_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001330:	f000 fd04 	bl	8001d3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4863      	ldr	r0, [pc, #396]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001340:	f002 fe2a 	bl	8003f98 <HAL_ADCEx_MultiModeConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800134a:	f000 fcf7 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800134e:	4b61      	ldr	r3, [pc, #388]	; (80014d4 <MX_ADC1_Init+0x234>)
 8001350:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001352:	2306      	movs	r3, #6
 8001354:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001356:	2307      	movs	r3, #7
 8001358:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800135a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800135e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001360:	2304      	movs	r3, #4
 8001362:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4856      	ldr	r0, [pc, #344]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001372:	f001 ff7b 	bl	800326c <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800137c:	f000 fcde 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001380:	4b55      	ldr	r3, [pc, #340]	; (80014d8 <MX_ADC1_Init+0x238>)
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001384:	230c      	movs	r3, #12
 8001386:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	484f      	ldr	r0, [pc, #316]	; (80014cc <MX_ADC1_Init+0x22c>)
 800138e:	f001 ff6d 	bl	800326c <HAL_ADC_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001398:	f000 fcd0 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800139c:	4b4f      	ldr	r3, [pc, #316]	; (80014dc <MX_ADC1_Init+0x23c>)
 800139e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013a0:	2312      	movs	r3, #18
 80013a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4848      	ldr	r0, [pc, #288]	; (80014cc <MX_ADC1_Init+0x22c>)
 80013aa:	f001 ff5f 	bl	800326c <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80013b4:	f000 fcc2 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013b8:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <MX_ADC1_Init+0x240>)
 80013ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013bc:	2318      	movs	r3, #24
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4841      	ldr	r0, [pc, #260]	; (80014cc <MX_ADC1_Init+0x22c>)
 80013c6:	f001 ff51 	bl	800326c <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80013d0:	f000 fcb4 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013d4:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <MX_ADC1_Init+0x244>)
 80013d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	483a      	ldr	r0, [pc, #232]	; (80014cc <MX_ADC1_Init+0x22c>)
 80013e4:	f001 ff42 	bl	800326c <HAL_ADC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80013ee:	f000 fca5 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013f2:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <MX_ADC1_Init+0x248>)
 80013f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013f6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	4619      	mov	r1, r3
 8001400:	4832      	ldr	r0, [pc, #200]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001402:	f001 ff33 	bl	800326c <HAL_ADC_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800140c:	f000 fc96 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <MX_ADC1_Init+0x24c>)
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001414:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001418:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	482b      	ldr	r0, [pc, #172]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001420:	f001 ff24 	bl	800326c <HAL_ADC_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800142a:	f000 fc87 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <MX_ADC1_Init+0x250>)
 8001430:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001432:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001436:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4823      	ldr	r0, [pc, #140]	; (80014cc <MX_ADC1_Init+0x22c>)
 800143e:	f001 ff15 	bl	800326c <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001448:	f000 fc78 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <MX_ADC1_Init+0x254>)
 800144e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001450:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001454:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001456:	463b      	mov	r3, r7
 8001458:	4619      	mov	r1, r3
 800145a:	481c      	ldr	r0, [pc, #112]	; (80014cc <MX_ADC1_Init+0x22c>)
 800145c:	f001 ff06 	bl	800326c <HAL_ADC_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001466:	f000 fc69 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <MX_ADC1_Init+0x258>)
 800146c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800146e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001472:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001474:	463b      	mov	r3, r7
 8001476:	4619      	mov	r1, r3
 8001478:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_ADC1_Init+0x22c>)
 800147a:	f001 fef7 	bl	800326c <HAL_ADC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001484:	f000 fc5a 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_ADC1_Init+0x25c>)
 800148a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800148c:	f240 2306 	movw	r3, #518	; 0x206
 8001490:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001498:	f001 fee8 	bl	800326c <HAL_ADC_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80014a2:	f000 fc4b 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_ADC1_Init+0x260>)
 80014a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80014aa:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_ADC1_Init+0x22c>)
 80014b6:	f001 fed9 	bl	800326c <HAL_ADC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 80014c0:	f000 fc3c 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	240000bc 	.word	0x240000bc
 80014d0:	40022000 	.word	0x40022000
 80014d4:	0c900008 	.word	0x0c900008
 80014d8:	10c00010 	.word	0x10c00010
 80014dc:	14f00020 	.word	0x14f00020
 80014e0:	1d500080 	.word	0x1d500080
 80014e4:	21800100 	.word	0x21800100
 80014e8:	25b00200 	.word	0x25b00200
 80014ec:	2a000400 	.word	0x2a000400
 80014f0:	2e300800 	.word	0x2e300800
 80014f4:	3ac04000 	.word	0x3ac04000
 80014f8:	3ef08000 	.word	0x3ef08000
 80014fc:	43210000 	.word	0x43210000
 8001500:	47520000 	.word	0x47520000

08001504 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	615a      	str	r2, [r3, #20]
 800151a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800151c:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <MX_ADC3_Init+0x110>)
 800151e:	4a3e      	ldr	r2, [pc, #248]	; (8001618 <MX_ADC3_Init+0x114>)
 8001520:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001522:	4b3c      	ldr	r3, [pc, #240]	; (8001614 <MX_ADC3_Init+0x110>)
 8001524:	2208      	movs	r2, #8
 8001526:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001528:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <MX_ADC3_Init+0x110>)
 800152a:	2201      	movs	r2, #1
 800152c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <MX_ADC3_Init+0x110>)
 8001530:	2204      	movs	r2, #4
 8001532:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001534:	4b37      	ldr	r3, [pc, #220]	; (8001614 <MX_ADC3_Init+0x110>)
 8001536:	2200      	movs	r2, #0
 8001538:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800153a:	4b36      	ldr	r3, [pc, #216]	; (8001614 <MX_ADC3_Init+0x110>)
 800153c:	2201      	movs	r2, #1
 800153e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001540:	4b34      	ldr	r3, [pc, #208]	; (8001614 <MX_ADC3_Init+0x110>)
 8001542:	2204      	movs	r2, #4
 8001544:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <MX_ADC3_Init+0x110>)
 8001548:	2200      	movs	r2, #0
 800154a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800154c:	4b31      	ldr	r3, [pc, #196]	; (8001614 <MX_ADC3_Init+0x110>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001552:	4b30      	ldr	r3, [pc, #192]	; (8001614 <MX_ADC3_Init+0x110>)
 8001554:	2200      	movs	r2, #0
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <MX_ADC3_Init+0x110>)
 800155a:	2203      	movs	r2, #3
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800155e:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <MX_ADC3_Init+0x110>)
 8001560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <MX_ADC3_Init+0x110>)
 8001568:	2200      	movs	r2, #0
 800156a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800156c:	4b29      	ldr	r3, [pc, #164]	; (8001614 <MX_ADC3_Init+0x110>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001574:	4827      	ldr	r0, [pc, #156]	; (8001614 <MX_ADC3_Init+0x110>)
 8001576:	f001 fbff 	bl	8002d78 <HAL_ADC_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001580:	f000 fbdc 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001584:	4b25      	ldr	r3, [pc, #148]	; (800161c <MX_ADC3_Init+0x118>)
 8001586:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001588:	2306      	movs	r3, #6
 800158a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800158c:	2307      	movs	r3, #7
 800158e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001590:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001594:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001596:	2304      	movs	r3, #4
 8001598:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	481b      	ldr	r0, [pc, #108]	; (8001614 <MX_ADC3_Init+0x110>)
 80015a8:	f001 fe60 	bl	800326c <HAL_ADC_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80015b2:	f000 fbc3 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MX_ADC3_Init+0x11c>)
 80015b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015ba:	230c      	movs	r3, #12
 80015bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4814      	ldr	r0, [pc, #80]	; (8001614 <MX_ADC3_Init+0x110>)
 80015c4:	f001 fe52 	bl	800326c <HAL_ADC_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80015ce:	f000 fbb5 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015d2:	2301      	movs	r3, #1
 80015d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015d6:	2312      	movs	r3, #18
 80015d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_ADC3_Init+0x110>)
 80015e0:	f001 fe44 	bl	800326c <HAL_ADC_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015ea:	f000 fba7 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <MX_ADC3_Init+0x120>)
 80015f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015f2:	2318      	movs	r3, #24
 80015f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_ADC3_Init+0x110>)
 80015fc:	f001 fe36 	bl	800326c <HAL_ADC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001606:	f000 fb99 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	24000120 	.word	0x24000120
 8001618:	58026000 	.word	0x58026000
 800161c:	cfb80000 	.word	0xcfb80000
 8001620:	cb840000 	.word	0xcb840000
 8001624:	04300002 	.word	0x04300002

08001628 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2224      	movs	r2, #36	; 0x24
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f00e fadd 	bl	800fbf4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_DAC1_Init+0x5c>)
 800163c:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_DAC1_Init+0x60>)
 800163e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001640:	4810      	ldr	r0, [pc, #64]	; (8001684 <MX_DAC1_Init+0x5c>)
 8001642:	f002 fe96 	bl	8004372 <HAL_DAC_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800164c:	f000 fb76 	bl	8001d3c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001654:	2302      	movs	r3, #2
 8001656:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800165c:	2301      	movs	r3, #1
 800165e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_DAC1_Init+0x5c>)
 800166c:	f002 ff1a 	bl	80044a4 <HAL_DAC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001676:	f000 fb61 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	24000274 	.word	0x24000274
 8001688:	40007400 	.word	0x40007400

0800168c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_I2C1_Init+0x74>)
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <MX_I2C1_Init+0x78>)
 8001694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_I2C1_Init+0x74>)
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <MX_I2C1_Init+0x7c>)
 800169a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_I2C1_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_I2C1_Init+0x74>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_I2C1_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_I2C1_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x74>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c6:	480e      	ldr	r0, [pc, #56]	; (8001700 <MX_I2C1_Init+0x74>)
 80016c8:	f006 f83a 	bl	8007740 <HAL_I2C_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016d2:	f000 fb33 	bl	8001d3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016d6:	2100      	movs	r1, #0
 80016d8:	4809      	ldr	r0, [pc, #36]	; (8001700 <MX_I2C1_Init+0x74>)
 80016da:	f006 fd23 	bl	8008124 <HAL_I2CEx_ConfigAnalogFilter>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016e4:	f000 fb2a 	bl	8001d3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016e8:	2100      	movs	r1, #0
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_I2C1_Init+0x74>)
 80016ec:	f006 fd65 	bl	80081ba <HAL_I2CEx_ConfigDigitalFilter>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016f6:	f000 fb21 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	24000288 	.word	0x24000288
 8001704:	40005400 	.word	0x40005400
 8001708:	20303e5d 	.word	0x20303e5d

0800170c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <MX_SPI1_Init+0xa8>)
 8001712:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <MX_SPI1_Init+0xac>)
 8001714:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <MX_SPI1_Init+0xa8>)
 8001718:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800171c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <MX_SPI1_Init+0xa8>)
 8001720:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001724:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <MX_SPI1_Init+0xa8>)
 8001728:	220f      	movs	r2, #15
 800172a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <MX_SPI1_Init+0xa8>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <MX_SPI1_Init+0xa8>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <MX_SPI1_Init+0xa8>)
 800173a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800173e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <MX_SPI1_Init+0xa8>)
 8001742:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_SPI1_Init+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <MX_SPI1_Init+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_SPI1_Init+0xa8>)
 8001756:	2200      	movs	r2, #0
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_SPI1_Init+0xa8>)
 800175c:	2200      	movs	r2, #0
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_SPI1_Init+0xa8>)
 8001762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_SPI1_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_SPI1_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_SPI1_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_SPI1_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_SPI1_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_SPI1_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_SPI1_Init+0xa8>)
 800178e:	2200      	movs	r2, #0
 8001790:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_SPI1_Init+0xa8>)
 8001794:	2200      	movs	r2, #0
 8001796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_SPI1_Init+0xa8>)
 800179a:	2200      	movs	r2, #0
 800179c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_SPI1_Init+0xa8>)
 80017a0:	f009 ff14 	bl	800b5cc <HAL_SPI_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80017aa:	f000 fac7 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	240002d4 	.word	0x240002d4
 80017b8:	40013000 	.word	0x40013000

080017bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c0:	4b28      	ldr	r3, [pc, #160]	; (8001864 <MX_SPI2_Init+0xa8>)
 80017c2:	4a29      	ldr	r2, [pc, #164]	; (8001868 <MX_SPI2_Init+0xac>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <MX_SPI2_Init+0xa8>)
 80017c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017ce:	4b25      	ldr	r3, [pc, #148]	; (8001864 <MX_SPI2_Init+0xa8>)
 80017d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017d4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80017d6:	4b23      	ldr	r3, [pc, #140]	; (8001864 <MX_SPI2_Init+0xa8>)
 80017d8:	220f      	movs	r2, #15
 80017da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <MX_SPI2_Init+0xa8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <MX_SPI2_Init+0xa8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <MX_SPI2_Init+0xa8>)
 80017ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017f0:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <MX_SPI2_Init+0xa8>)
 80017f2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <MX_SPI2_Init+0xa8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <MX_SPI2_Init+0xa8>)
 8001800:	2200      	movs	r2, #0
 8001802:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <MX_SPI2_Init+0xa8>)
 8001806:	2200      	movs	r2, #0
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <MX_SPI2_Init+0xa8>)
 800180c:	2200      	movs	r2, #0
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <MX_SPI2_Init+0xa8>)
 8001812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001816:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_SPI2_Init+0xa8>)
 800181a:	2200      	movs	r2, #0
 800181c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_SPI2_Init+0xa8>)
 8001820:	2200      	movs	r2, #0
 8001822:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <MX_SPI2_Init+0xa8>)
 8001826:	2200      	movs	r2, #0
 8001828:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_SPI2_Init+0xa8>)
 800182c:	2200      	movs	r2, #0
 800182e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_SPI2_Init+0xa8>)
 8001832:	2200      	movs	r2, #0
 8001834:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <MX_SPI2_Init+0xa8>)
 8001838:	2200      	movs	r2, #0
 800183a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_SPI2_Init+0xa8>)
 800183e:	2200      	movs	r2, #0
 8001840:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <MX_SPI2_Init+0xa8>)
 8001844:	2200      	movs	r2, #0
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_SPI2_Init+0xa8>)
 800184a:	2200      	movs	r2, #0
 800184c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <MX_SPI2_Init+0xa8>)
 8001850:	f009 febc 	bl	800b5cc <HAL_SPI_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800185a:	f000 fa6f 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2400035c 	.word	0x2400035c
 8001868:	40003800 	.word	0x40003800

0800186c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b096      	sub	sp, #88	; 0x58
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001872:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800187e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]
 800188e:	615a      	str	r2, [r3, #20]
 8001890:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	222c      	movs	r2, #44	; 0x2c
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f00e f9ab 	bl	800fbf4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800189e:	4b39      	ldr	r3, [pc, #228]	; (8001984 <MX_TIM1_Init+0x118>)
 80018a0:	4a39      	ldr	r2, [pc, #228]	; (8001988 <MX_TIM1_Init+0x11c>)
 80018a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 80018a4:	4b37      	ldr	r3, [pc, #220]	; (8001984 <MX_TIM1_Init+0x118>)
 80018a6:	2263      	movs	r2, #99	; 0x63
 80018a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018aa:	4b36      	ldr	r3, [pc, #216]	; (8001984 <MX_TIM1_Init+0x118>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 80018b0:	4b34      	ldr	r3, [pc, #208]	; (8001984 <MX_TIM1_Init+0x118>)
 80018b2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80018b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b8:	4b32      	ldr	r3, [pc, #200]	; (8001984 <MX_TIM1_Init+0x118>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <MX_TIM1_Init+0x118>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <MX_TIM1_Init+0x118>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018ca:	482e      	ldr	r0, [pc, #184]	; (8001984 <MX_TIM1_Init+0x118>)
 80018cc:	f00a fe70 	bl	800c5b0 <HAL_TIM_PWM_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80018d6:	f000 fa31 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ea:	4619      	mov	r1, r3
 80018ec:	4825      	ldr	r0, [pc, #148]	; (8001984 <MX_TIM1_Init+0x118>)
 80018ee:	f00b fca7 	bl	800d240 <HAL_TIMEx_MasterConfigSynchronization>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018f8:	f000 fa20 	bl	8001d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fc:	2360      	movs	r3, #96	; 0x60
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 -1;
 8001900:	f240 13df 	movw	r3, #479	; 0x1df
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001906:	2300      	movs	r3, #0
 8001908:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800190a:	2300      	movs	r3, #0
 800190c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800191a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800191e:	2200      	movs	r2, #0
 8001920:	4619      	mov	r1, r3
 8001922:	4818      	ldr	r0, [pc, #96]	; (8001984 <MX_TIM1_Init+0x118>)
 8001924:	f00a ffba 	bl	800c89c <HAL_TIM_PWM_ConfigChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800192e:	f000 fa05 	bl	8001d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001954:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4619      	mov	r1, r3
 8001966:	4807      	ldr	r0, [pc, #28]	; (8001984 <MX_TIM1_Init+0x118>)
 8001968:	f00b fcf8 	bl	800d35c <HAL_TIMEx_ConfigBreakDeadTime>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001972:	f000 f9e3 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001976:	4803      	ldr	r0, [pc, #12]	; (8001984 <MX_TIM1_Init+0x118>)
 8001978:	f000 fcd4 	bl	8002324 <HAL_TIM_MspPostInit>

}
 800197c:	bf00      	nop
 800197e:	3758      	adds	r7, #88	; 0x58
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	240003e4 	.word	0x240003e4
 8001988:	40010000 	.word	0x40010000

0800198c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199e:	463b      	mov	r3, r7
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
 80019ac:	615a      	str	r2, [r3, #20]
 80019ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 -1;
 80019b8:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019ba:	2263      	movs	r2, #99	; 0x63
 80019bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000 - 1;
 80019c4:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019c6:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80019ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019d8:	4818      	ldr	r0, [pc, #96]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019da:	f00a fde9 	bl	800c5b0 <HAL_TIM_PWM_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80019e4:	f000 f9aa 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	4619      	mov	r1, r3
 80019f6:	4811      	ldr	r0, [pc, #68]	; (8001a3c <MX_TIM2_Init+0xb0>)
 80019f8:	f00b fc22 	bl	800d240 <HAL_TIMEx_MasterConfigSynchronization>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001a02:	f000 f99b 	bl	8001d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a06:	2360      	movs	r3, #96	; 0x60
 8001a08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 480 - 1;
 8001a0a:	f240 13df 	movw	r3, #479	; 0x1df
 8001a0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4807      	ldr	r0, [pc, #28]	; (8001a3c <MX_TIM2_Init+0xb0>)
 8001a20:	f00a ff3c 	bl	800c89c <HAL_TIM_PWM_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001a2a:	f000 f987 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a2e:	4803      	ldr	r0, [pc, #12]	; (8001a3c <MX_TIM2_Init+0xb0>)
 8001a30:	f000 fc78 	bl	8002324 <HAL_TIM_MspPostInit>

}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	; 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	24000430 	.word	0x24000430

08001a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a44:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a46:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <MX_USART1_UART_Init+0x94>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001a4a:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a4c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a88:	4811      	ldr	r0, [pc, #68]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a8a:	f00b fd03 	bl	800d494 <HAL_UART_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a94:	f000 f952 	bl	8001d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a98:	2100      	movs	r1, #0
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a9c:	f00d ff97 	bl	800f9ce <HAL_UARTEx_SetTxFifoThreshold>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001aa6:	f000 f949 	bl	8001d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001aae:	f00d ffcc 	bl	800fa4a <HAL_UARTEx_SetRxFifoThreshold>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ab8:	f000 f940 	bl	8001d3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001abc:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001abe:	f00d ff4d 	bl	800f95c <HAL_UARTEx_DisableFifoMode>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ac8:	f000 f938 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	2400047c 	.word	0x2400047c
 8001ad4:	40011000 	.word	0x40011000

08001ad8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_DMA_Init+0x4c>)
 8001ae0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <MX_DMA_Init+0x4c>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <MX_DMA_Init+0x4c>)
 8001af0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2100      	movs	r1, #0
 8001b00:	200b      	movs	r0, #11
 8001b02:	f002 fc02 	bl	800430a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b06:	200b      	movs	r0, #11
 8001b08:	f002 fc19 	bl	800433e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	200c      	movs	r0, #12
 8001b12:	f002 fbfa 	bl	800430a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b16:	200c      	movs	r0, #12
 8001b18:	f002 fc11 	bl	800433e <HAL_NVIC_EnableIRQ>

}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	58024400 	.word	0x58024400

08001b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	4b45      	ldr	r3, [pc, #276]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b44:	4a43      	ldr	r2, [pc, #268]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b5c:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b62:	4a3c      	ldr	r2, [pc, #240]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001b64:	f043 0320 	orr.w	r3, r3, #32
 8001b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b6c:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b7a:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b80:	4a34      	ldr	r2, [pc, #208]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8a:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b2e      	ldr	r3, [pc, #184]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9e:	4a2d      	ldr	r2, [pc, #180]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	4a25      	ldr	r2, [pc, #148]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001bbe:	f043 0302 	orr.w	r3, r3, #2
 8001bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc6:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <MX_GPIO_Init+0x12c>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	21c0      	movs	r1, #192	; 0xc0
 8001bd8:	481f      	ldr	r0, [pc, #124]	; (8001c58 <MX_GPIO_Init+0x130>)
 8001bda:	f005 fd97 	bl	800770c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001bde:	2200      	movs	r2, #0
 8001be0:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001be4:	481d      	ldr	r0, [pc, #116]	; (8001c5c <MX_GPIO_Init+0x134>)
 8001be6:	f005 fd91 	bl	800770c <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2160      	movs	r1, #96	; 0x60
 8001bee:	481c      	ldr	r0, [pc, #112]	; (8001c60 <MX_GPIO_Init+0x138>)
 8001bf0:	f005 fd8c 	bl	800770c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bf4:	23c0      	movs	r3, #192	; 0xc0
 8001bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4813      	ldr	r0, [pc, #76]	; (8001c58 <MX_GPIO_Init+0x130>)
 8001c0c:	f005 fbb6 	bl	800737c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001c10:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c14:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <MX_GPIO_Init+0x134>)
 8001c2a:	f005 fba7 	bl	800737c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c2e:	2360      	movs	r3, #96	; 0x60
 8001c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4806      	ldr	r0, [pc, #24]	; (8001c60 <MX_GPIO_Init+0x138>)
 8001c46:	f005 fb99 	bl	800737c <HAL_GPIO_Init>

}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	58024400 	.word	0x58024400
 8001c58:	58021400 	.word	0x58021400
 8001c5c:	58020800 	.word	0x58020800
 8001c60:	58020400 	.word	0x58020400

08001c64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b08b      	sub	sp, #44	; 0x2c
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a2e      	ldr	r2, [pc, #184]	; (8001d28 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d125      	bne.n	8001cc0 <HAL_ADC_ConvCpltCallback+0x5c>
 8001c74:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <HAL_ADC_ConvCpltCallback+0xc8>)
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	230c      	movs	r3, #12
 8001c7a:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	dd48      	ble.n	8001d14 <HAL_ADC_ConvCpltCallback+0xb0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c92:	f3bf 8f4f 	dsb	sy
}
 8001c96:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001c98:	4a25      	ldr	r2, [pc, #148]	; (8001d30 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	3320      	adds	r3, #32
 8001ca4:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b20      	subs	r3, #32
 8001caa:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	dcf2      	bgt.n	8001c98 <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cb2:	f3bf 8f4f 	dsb	sy
}
 8001cb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb8:	f3bf 8f6f 	isb	sy
}
 8001cbc:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001cbe:	e029      	b.n	8001d14 <HAL_ADC_ConvCpltCallback+0xb0>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC1Data[ADC1NumChannels/2], ADC1NumChannels);
	} else if (hadc == &hadc3) {
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a1c      	ldr	r2, [pc, #112]	; (8001d34 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d128      	bne.n	8001d1a <HAL_ADC_ConvCpltCallback+0xb6>
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	2304      	movs	r3, #4
 8001cce:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	dd20      	ble.n	8001d18 <HAL_ADC_ConvCpltCallback+0xb4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4413      	add	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce6:	f3bf 8f4f 	dsb	sy
}
 8001cea:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001cec:	4a10      	ldr	r2, [pc, #64]	; (8001d30 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	3320      	adds	r3, #32
 8001cf8:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3b20      	subs	r3, #32
 8001cfe:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	dcf2      	bgt.n	8001cec <HAL_ADC_ConvCpltCallback+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d06:	f3bf 8f4f 	dsb	sy
}
 8001d0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0c:	f3bf 8f6f 	isb	sy
}
 8001d10:	bf00      	nop
}
 8001d12:	e001      	b.n	8001d18 <HAL_ADC_ConvCpltCallback+0xb4>
 8001d14:	bf00      	nop
 8001d16:	e000      	b.n	8001d1a <HAL_ADC_ConvCpltCallback+0xb6>
 8001d18:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC3Data[ADC3NumChannels/2], ADC3NumChannels);

	}

}
 8001d1a:	bf00      	nop
 8001d1c:	372c      	adds	r7, #44	; 0x2c
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	240000bc 	.word	0x240000bc
 8001d2c:	2400058c 	.word	0x2400058c
 8001d30:	e000ed00 	.word	0xe000ed00
 8001d34:	24000120 	.word	0x24000120
 8001d38:	240005a4 	.word	0x240005a4

08001d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d40:	b672      	cpsid	i
}
 8001d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <Error_Handler+0x8>
	...

08001d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_MspInit+0x30>)
 8001d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d54:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_MspInit+0x30>)
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_MspInit+0x30>)
 8001d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	58024400 	.word	0x58024400

08001d7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08e      	sub	sp, #56	; 0x38
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a7b      	ldr	r2, [pc, #492]	; (8001f88 <HAL_ADC_MspInit+0x20c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	f040 8091 	bne.w	8001ec2 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001da0:	4b7a      	ldr	r3, [pc, #488]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001da2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001da6:	4a79      	ldr	r2, [pc, #484]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001da8:	f043 0320 	orr.w	r3, r3, #32
 8001dac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001db0:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001db2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	623b      	str	r3, [r7, #32]
 8001dbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	4b73      	ldr	r3, [pc, #460]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	4a71      	ldr	r2, [pc, #452]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dce:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b6b      	ldr	r3, [pc, #428]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	4a6a      	ldr	r2, [pc, #424]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dec:	4b67      	ldr	r3, [pc, #412]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	4b64      	ldr	r3, [pc, #400]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e00:	4a62      	ldr	r2, [pc, #392]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0a:	4b60      	ldr	r3, [pc, #384]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001e18:	2333      	movs	r3, #51	; 0x33
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4859      	ldr	r0, [pc, #356]	; (8001f90 <HAL_ADC_MspInit+0x214>)
 8001e2c:	f005 faa6 	bl	800737c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e30:	23cf      	movs	r3, #207	; 0xcf
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e34:	2303      	movs	r3, #3
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e40:	4619      	mov	r1, r3
 8001e42:	4854      	ldr	r0, [pc, #336]	; (8001f94 <HAL_ADC_MspInit+0x218>)
 8001e44:	f005 fa9a 	bl	800737c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e58:	4619      	mov	r1, r3
 8001e5a:	484f      	ldr	r0, [pc, #316]	; (8001f98 <HAL_ADC_MspInit+0x21c>)
 8001e5c:	f005 fa8e 	bl	800737c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001e60:	4b4e      	ldr	r3, [pc, #312]	; (8001f9c <HAL_ADC_MspInit+0x220>)
 8001e62:	4a4f      	ldr	r2, [pc, #316]	; (8001fa0 <HAL_ADC_MspInit+0x224>)
 8001e64:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e66:	4b4d      	ldr	r3, [pc, #308]	; (8001f9c <HAL_ADC_MspInit+0x220>)
 8001e68:	2209      	movs	r2, #9
 8001e6a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e6c:	4b4b      	ldr	r3, [pc, #300]	; (8001f9c <HAL_ADC_MspInit+0x220>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e72:	4b4a      	ldr	r3, [pc, #296]	; (8001f9c <HAL_ADC_MspInit+0x220>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e78:	4b48      	ldr	r3, [pc, #288]	; (8001f9c <HAL_ADC_MspInit+0x220>)
 8001e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e7e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e80:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_ADC_MspInit+0x220>)
 8001e82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e86:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e88:	4b44      	ldr	r3, [pc, #272]	; (8001f9c <HAL_ADC_MspInit+0x220>)
 8001e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e8e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e90:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <HAL_ADC_MspInit+0x220>)
 8001e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e96:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e98:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_ADC_MspInit+0x220>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_ADC_MspInit+0x220>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ea4:	483d      	ldr	r0, [pc, #244]	; (8001f9c <HAL_ADC_MspInit+0x220>)
 8001ea6:	f002 fc2d 	bl	8004704 <HAL_DMA_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001eb0:	f7ff ff44 	bl	8001d3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a39      	ldr	r2, [pc, #228]	; (8001f9c <HAL_ADC_MspInit+0x220>)
 8001eb8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eba:	4a38      	ldr	r2, [pc, #224]	; (8001f9c <HAL_ADC_MspInit+0x220>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ec0:	e05e      	b.n	8001f80 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a37      	ldr	r2, [pc, #220]	; (8001fa4 <HAL_ADC_MspInit+0x228>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d159      	bne.n	8001f80 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed2:	4a2e      	ldr	r2, [pc, #184]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001ed4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eea:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_ADC_MspInit+0x210>)
 8001efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001f08:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001f0c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f10:	f000 fd0e 	bl	8002930 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001f14:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001f18:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001f1c:	f000 fd08 	bl	8002930 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001f20:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <HAL_ADC_MspInit+0x22c>)
 8001f22:	4a22      	ldr	r2, [pc, #136]	; (8001fac <HAL_ADC_MspInit+0x230>)
 8001f24:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <HAL_ADC_MspInit+0x22c>)
 8001f28:	2273      	movs	r2, #115	; 0x73
 8001f2a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <HAL_ADC_MspInit+0x22c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <HAL_ADC_MspInit+0x22c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_ADC_MspInit+0x22c>)
 8001f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f3e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_ADC_MspInit+0x22c>)
 8001f42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f46:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <HAL_ADC_MspInit+0x22c>)
 8001f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f4e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_ADC_MspInit+0x22c>)
 8001f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f56:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_ADC_MspInit+0x22c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_ADC_MspInit+0x22c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001f64:	4810      	ldr	r0, [pc, #64]	; (8001fa8 <HAL_ADC_MspInit+0x22c>)
 8001f66:	f002 fbcd 	bl	8004704 <HAL_DMA_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001f70:	f7ff fee4 	bl	8001d3c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a0c      	ldr	r2, [pc, #48]	; (8001fa8 <HAL_ADC_MspInit+0x22c>)
 8001f78:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <HAL_ADC_MspInit+0x22c>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f80:	bf00      	nop
 8001f82:	3738      	adds	r7, #56	; 0x38
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40022000 	.word	0x40022000
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	58020800 	.word	0x58020800
 8001f94:	58020000 	.word	0x58020000
 8001f98:	58020400 	.word	0x58020400
 8001f9c:	24000184 	.word	0x24000184
 8001fa0:	40020010 	.word	0x40020010
 8001fa4:	58026000 	.word	0x58026000
 8001fa8:	240001fc 	.word	0x240001fc
 8001fac:	40020028 	.word	0x40020028

08001fb0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a18      	ldr	r2, [pc, #96]	; (8002030 <HAL_DAC_MspInit+0x80>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d129      	bne.n	8002026 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001fd2:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_DAC_MspInit+0x84>)
 8001fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fd8:	4a16      	ldr	r2, [pc, #88]	; (8002034 <HAL_DAC_MspInit+0x84>)
 8001fda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_DAC_MspInit+0x84>)
 8001fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff0:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_DAC_MspInit+0x84>)
 8001ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_DAC_MspInit+0x84>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <HAL_DAC_MspInit+0x84>)
 8002002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800200e:	2310      	movs	r3, #16
 8002010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002012:	2303      	movs	r3, #3
 8002014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <HAL_DAC_MspInit+0x88>)
 8002022:	f005 f9ab 	bl	800737c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002026:	bf00      	nop
 8002028:	3728      	adds	r7, #40	; 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40007400 	.word	0x40007400
 8002034:	58024400 	.word	0x58024400
 8002038:	58020000 	.word	0x58020000

0800203c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b0b8      	sub	sp, #224	; 0xe0
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	22bc      	movs	r2, #188	; 0xbc
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f00d fdc9 	bl	800fbf4 <memset>
  if(hi2c->Instance==I2C1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a25      	ldr	r2, [pc, #148]	; (80020fc <HAL_I2C_MspInit+0xc0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d142      	bne.n	80020f2 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800206c:	2308      	movs	r3, #8
 800206e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	4618      	mov	r0, r3
 800207c:	f007 f91a 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002086:	f7ff fe59 	bl	8001d3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_I2C_MspInit+0xc4>)
 800208c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002090:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <HAL_I2C_MspInit+0xc4>)
 8002092:	f043 0302 	orr.w	r3, r3, #2
 8002096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_I2C_MspInit+0xc4>)
 800209c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b0:	2312      	movs	r3, #18
 80020b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020c2:	2304      	movs	r3, #4
 80020c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020cc:	4619      	mov	r1, r3
 80020ce:	480d      	ldr	r0, [pc, #52]	; (8002104 <HAL_I2C_MspInit+0xc8>)
 80020d0:	f005 f954 	bl	800737c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_I2C_MspInit+0xc4>)
 80020d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_I2C_MspInit+0xc4>)
 80020dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_I2C_MspInit+0xc4>)
 80020e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020f2:	bf00      	nop
 80020f4:	37e0      	adds	r7, #224	; 0xe0
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40005400 	.word	0x40005400
 8002100:	58024400 	.word	0x58024400
 8002104:	58020400 	.word	0x58020400

08002108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b0ba      	sub	sp, #232	; 0xe8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002120:	f107 0318 	add.w	r3, r7, #24
 8002124:	22bc      	movs	r2, #188	; 0xbc
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f00d fd63 	bl	800fbf4 <memset>
  if(hspi->Instance==SPI1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a49      	ldr	r2, [pc, #292]	; (8002258 <HAL_SPI_MspInit+0x150>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d142      	bne.n	80021be <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800213e:	2300      	movs	r3, #0
 8002140:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002142:	f107 0318 	add.w	r3, r7, #24
 8002146:	4618      	mov	r0, r3
 8002148:	f007 f8b4 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002152:	f7ff fdf3 	bl	8001d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_SPI_MspInit+0x154>)
 8002158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800215c:	4a3f      	ldr	r2, [pc, #252]	; (800225c <HAL_SPI_MspInit+0x154>)
 800215e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002162:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_SPI_MspInit+0x154>)
 8002168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800216c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002174:	4b39      	ldr	r3, [pc, #228]	; (800225c <HAL_SPI_MspInit+0x154>)
 8002176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217a:	4a38      	ldr	r2, [pc, #224]	; (800225c <HAL_SPI_MspInit+0x154>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002184:	4b35      	ldr	r3, [pc, #212]	; (800225c <HAL_SPI_MspInit+0x154>)
 8002186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002192:	2318      	movs	r3, #24
 8002194:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021aa:	2305      	movs	r3, #5
 80021ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021b4:	4619      	mov	r1, r3
 80021b6:	482a      	ldr	r0, [pc, #168]	; (8002260 <HAL_SPI_MspInit+0x158>)
 80021b8:	f005 f8e0 	bl	800737c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021bc:	e047      	b.n	800224e <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a28      	ldr	r2, [pc, #160]	; (8002264 <HAL_SPI_MspInit+0x15c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d142      	bne.n	800224e <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80021c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021d2:	f107 0318 	add.w	r3, r7, #24
 80021d6:	4618      	mov	r0, r3
 80021d8:	f007 f86c 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 80021e2:	f7ff fdab 	bl	8001d3c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_SPI_MspInit+0x154>)
 80021e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021ec:	4a1b      	ldr	r2, [pc, #108]	; (800225c <HAL_SPI_MspInit+0x154>)
 80021ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_SPI_MspInit+0x154>)
 80021f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002204:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_SPI_MspInit+0x154>)
 8002206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220a:	4a14      	ldr	r2, [pc, #80]	; (800225c <HAL_SPI_MspInit+0x154>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_SPI_MspInit+0x154>)
 8002216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002222:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800223c:	2305      	movs	r3, #5
 800223e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002242:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002246:	4619      	mov	r1, r3
 8002248:	4805      	ldr	r0, [pc, #20]	; (8002260 <HAL_SPI_MspInit+0x158>)
 800224a:	f005 f897 	bl	800737c <HAL_GPIO_Init>
}
 800224e:	bf00      	nop
 8002250:	37e8      	adds	r7, #232	; 0xe8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40013000 	.word	0x40013000
 800225c:	58024400 	.word	0x58024400
 8002260:	58020400 	.word	0x58020400
 8002264:	40003800 	.word	0x40003800

08002268 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a29      	ldr	r2, [pc, #164]	; (800231c <HAL_TIM_PWM_MspInit+0xb4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d12f      	bne.n	80022da <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800227a:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_TIM_PWM_MspInit+0xb8>)
 800227c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002280:	4a27      	ldr	r2, [pc, #156]	; (8002320 <HAL_TIM_PWM_MspInit+0xb8>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800228a:	4b25      	ldr	r3, [pc, #148]	; (8002320 <HAL_TIM_PWM_MspInit+0xb8>)
 800228c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002298:	2200      	movs	r2, #0
 800229a:	2100      	movs	r1, #0
 800229c:	2018      	movs	r0, #24
 800229e:	f002 f834 	bl	800430a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80022a2:	2018      	movs	r0, #24
 80022a4:	f002 f84b 	bl	800433e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2100      	movs	r1, #0
 80022ac:	2019      	movs	r0, #25
 80022ae:	f002 f82c 	bl	800430a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022b2:	2019      	movs	r0, #25
 80022b4:	f002 f843 	bl	800433e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80022b8:	2200      	movs	r2, #0
 80022ba:	2100      	movs	r1, #0
 80022bc:	201a      	movs	r0, #26
 80022be:	f002 f824 	bl	800430a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80022c2:	201a      	movs	r0, #26
 80022c4:	f002 f83b 	bl	800433e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2100      	movs	r1, #0
 80022cc:	201b      	movs	r0, #27
 80022ce:	f002 f81c 	bl	800430a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022d2:	201b      	movs	r0, #27
 80022d4:	f002 f833 	bl	800433e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022d8:	e01b      	b.n	8002312 <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e2:	d116      	bne.n	8002312 <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022e4:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <HAL_TIM_PWM_MspInit+0xb8>)
 80022e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ea:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <HAL_TIM_PWM_MspInit+0xb8>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_TIM_PWM_MspInit+0xb8>)
 80022f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2100      	movs	r1, #0
 8002306:	201c      	movs	r0, #28
 8002308:	f001 ffff 	bl	800430a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800230c:	201c      	movs	r0, #28
 800230e:	f002 f816 	bl	800433e <HAL_NVIC_EnableIRQ>
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40010000 	.word	0x40010000
 8002320:	58024400 	.word	0x58024400

08002324 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a26      	ldr	r2, [pc, #152]	; (80023dc <HAL_TIM_MspPostInit+0xb8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d120      	bne.n	8002388 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <HAL_TIM_MspPostInit+0xbc>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234c:	4a24      	ldr	r2, [pc, #144]	; (80023e0 <HAL_TIM_MspPostInit+0xbc>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002356:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_TIM_MspPostInit+0xbc>)
 8002358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002376:	2301      	movs	r3, #1
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4619      	mov	r1, r3
 8002380:	4818      	ldr	r0, [pc, #96]	; (80023e4 <HAL_TIM_MspPostInit+0xc0>)
 8002382:	f004 fffb 	bl	800737c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002386:	e024      	b.n	80023d2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002390:	d11f      	bne.n	80023d2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <HAL_TIM_MspPostInit+0xbc>)
 8002394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002398:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <HAL_TIM_MspPostInit+0xbc>)
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a2:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <HAL_TIM_MspPostInit+0xbc>)
 80023a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023be:	2300      	movs	r3, #0
 80023c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023c2:	2301      	movs	r3, #1
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	4619      	mov	r1, r3
 80023cc:	4806      	ldr	r0, [pc, #24]	; (80023e8 <HAL_TIM_MspPostInit+0xc4>)
 80023ce:	f004 ffd5 	bl	800737c <HAL_GPIO_Init>
}
 80023d2:	bf00      	nop
 80023d4:	3728      	adds	r7, #40	; 0x28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40010000 	.word	0x40010000
 80023e0:	58024400 	.word	0x58024400
 80023e4:	58020000 	.word	0x58020000
 80023e8:	58020400 	.word	0x58020400

080023ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b0b8      	sub	sp, #224	; 0xe0
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	22bc      	movs	r2, #188	; 0xbc
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f00d fbf1 	bl	800fbf4 <memset>
  if(huart->Instance==USART1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a29      	ldr	r2, [pc, #164]	; (80024bc <HAL_UART_MspInit+0xd0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d14a      	bne.n	80024b2 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800241c:	2301      	movs	r3, #1
 800241e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	4618      	mov	r0, r3
 800242c:	f006 ff42 	bl	80092b4 <HAL_RCCEx_PeriphCLKConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002436:	f7ff fc81 	bl	8001d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <HAL_UART_MspInit+0xd4>)
 800243c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002440:	4a1f      	ldr	r2, [pc, #124]	; (80024c0 <HAL_UART_MspInit+0xd4>)
 8002442:	f043 0310 	orr.w	r3, r3, #16
 8002446:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800244a:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_UART_MspInit+0xd4>)
 800244c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_UART_MspInit+0xd4>)
 800245a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245e:	4a18      	ldr	r2, [pc, #96]	; (80024c0 <HAL_UART_MspInit+0xd4>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002468:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_UART_MspInit+0xd4>)
 800246a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002476:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800247a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002490:	2307      	movs	r3, #7
 8002492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002496:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800249a:	4619      	mov	r1, r3
 800249c:	4809      	ldr	r0, [pc, #36]	; (80024c4 <HAL_UART_MspInit+0xd8>)
 800249e:	f004 ff6d 	bl	800737c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	2025      	movs	r0, #37	; 0x25
 80024a8:	f001 ff2f 	bl	800430a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024ac:	2025      	movs	r0, #37	; 0x25
 80024ae:	f001 ff46 	bl	800433e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024b2:	bf00      	nop
 80024b4:	37e0      	adds	r7, #224	; 0xe0
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40011000 	.word	0x40011000
 80024c0:	58024400 	.word	0x58024400
 80024c4:	58020000 	.word	0x58020000

080024c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <NMI_Handler+0x4>

080024ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d2:	e7fe      	b.n	80024d2 <HardFault_Handler+0x4>

080024d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <MemManage_Handler+0x4>

080024da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024de:	e7fe      	b.n	80024de <BusFault_Handler+0x4>

080024e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <UsageFault_Handler+0x4>

080024e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002514:	f000 f9ac 	bl	8002870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <DMA1_Stream0_IRQHandler+0x10>)
 8002522:	f003 fc19 	bl	8005d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	24000184 	.word	0x24000184

08002530 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <DMA1_Stream1_IRQHandler+0x10>)
 8002536:	f003 fc0f 	bl	8005d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	240001fc 	.word	0x240001fc

08002544 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <TIM1_BRK_IRQHandler+0x10>)
 800254a:	f00a f888 	bl	800c65e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	240003e4 	.word	0x240003e4

08002558 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <TIM1_UP_IRQHandler+0x10>)
 800255e:	f00a f87e 	bl	800c65e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	240003e4 	.word	0x240003e4

0800256c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002572:	f00a f874 	bl	800c65e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	240003e4 	.word	0x240003e4

08002580 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <TIM1_CC_IRQHandler+0x10>)
 8002586:	f00a f86a 	bl	800c65e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	240003e4 	.word	0x240003e4

08002594 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <TIM2_IRQHandler+0x10>)
 800259a:	f00a f860 	bl	800c65e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	24000430 	.word	0x24000430

080025a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <USART1_IRQHandler+0x10>)
 80025ae:	f00b f8ad 	bl	800d70c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	2400047c 	.word	0x2400047c

080025bc <_sbrk>:
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	4a14      	ldr	r2, [pc, #80]	; (8002618 <_sbrk+0x5c>)
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <_sbrk+0x60>)
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <_sbrk+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <_sbrk+0x22>
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <_sbrk+0x64>)
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <_sbrk+0x68>)
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d207      	bcs.n	80025fc <_sbrk+0x40>
 80025ec:	f00d faba 	bl	800fb64 <__errno>
 80025f0:	4603      	mov	r3, r0
 80025f2:	220c      	movs	r2, #12
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025fa:	e009      	b.n	8002610 <_sbrk+0x54>
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <_sbrk+0x64>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <_sbrk+0x64>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <_sbrk+0x64>)
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	24080000 	.word	0x24080000
 800261c:	00000400 	.word	0x00000400
 8002620:	240005bc 	.word	0x240005bc
 8002624:	240005d8 	.word	0x240005d8

08002628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800262c:	4b37      	ldr	r3, [pc, #220]	; (800270c <SystemInit+0xe4>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	4a36      	ldr	r2, [pc, #216]	; (800270c <SystemInit+0xe4>)
 8002634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800263c:	4b34      	ldr	r3, [pc, #208]	; (8002710 <SystemInit+0xe8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	2b06      	cmp	r3, #6
 8002646:	d807      	bhi.n	8002658 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002648:	4b31      	ldr	r3, [pc, #196]	; (8002710 <SystemInit+0xe8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 030f 	bic.w	r3, r3, #15
 8002650:	4a2f      	ldr	r2, [pc, #188]	; (8002710 <SystemInit+0xe8>)
 8002652:	f043 0307 	orr.w	r3, r3, #7
 8002656:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002658:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <SystemInit+0xec>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a2d      	ldr	r2, [pc, #180]	; (8002714 <SystemInit+0xec>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002664:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <SystemInit+0xec>)
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800266a:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <SystemInit+0xec>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4929      	ldr	r1, [pc, #164]	; (8002714 <SystemInit+0xec>)
 8002670:	4b29      	ldr	r3, [pc, #164]	; (8002718 <SystemInit+0xf0>)
 8002672:	4013      	ands	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002676:	4b26      	ldr	r3, [pc, #152]	; (8002710 <SystemInit+0xe8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002682:	4b23      	ldr	r3, [pc, #140]	; (8002710 <SystemInit+0xe8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 030f 	bic.w	r3, r3, #15
 800268a:	4a21      	ldr	r2, [pc, #132]	; (8002710 <SystemInit+0xe8>)
 800268c:	f043 0307 	orr.w	r3, r3, #7
 8002690:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <SystemInit+0xec>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002698:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <SystemInit+0xec>)
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <SystemInit+0xec>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <SystemInit+0xec>)
 80026a6:	4a1d      	ldr	r2, [pc, #116]	; (800271c <SystemInit+0xf4>)
 80026a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026aa:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <SystemInit+0xec>)
 80026ac:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <SystemInit+0xf8>)
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <SystemInit+0xec>)
 80026b2:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <SystemInit+0xfc>)
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026b6:	4b17      	ldr	r3, [pc, #92]	; (8002714 <SystemInit+0xec>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <SystemInit+0xec>)
 80026be:	4a19      	ldr	r2, [pc, #100]	; (8002724 <SystemInit+0xfc>)
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <SystemInit+0xec>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <SystemInit+0xec>)
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <SystemInit+0xfc>)
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <SystemInit+0xec>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <SystemInit+0xec>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <SystemInit+0xec>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <SystemInit+0xec>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <SystemInit+0x100>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <SystemInit+0x104>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f2:	d202      	bcs.n	80026fa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80026f4:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <SystemInit+0x108>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <SystemInit+0x10c>)
 80026fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002700:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000ed00 	.word	0xe000ed00
 8002710:	52002000 	.word	0x52002000
 8002714:	58024400 	.word	0x58024400
 8002718:	eaf6ed7f 	.word	0xeaf6ed7f
 800271c:	02020200 	.word	0x02020200
 8002720:	01ff0000 	.word	0x01ff0000
 8002724:	01010280 	.word	0x01010280
 8002728:	5c001000 	.word	0x5c001000
 800272c:	ffff0000 	.word	0xffff0000
 8002730:	51008108 	.word	0x51008108
 8002734:	52004000 	.word	0x52004000

08002738 <Reset_Handler>:
 8002738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002770 <LoopFillZerobss+0xe>
 800273c:	f7ff ff74 	bl	8002628 <SystemInit>
 8002740:	480c      	ldr	r0, [pc, #48]	; (8002774 <LoopFillZerobss+0x12>)
 8002742:	490d      	ldr	r1, [pc, #52]	; (8002778 <LoopFillZerobss+0x16>)
 8002744:	4a0d      	ldr	r2, [pc, #52]	; (800277c <LoopFillZerobss+0x1a>)
 8002746:	2300      	movs	r3, #0
 8002748:	e002      	b.n	8002750 <LoopCopyDataInit>

0800274a <CopyDataInit>:
 800274a:	58d4      	ldr	r4, [r2, r3]
 800274c:	50c4      	str	r4, [r0, r3]
 800274e:	3304      	adds	r3, #4

08002750 <LoopCopyDataInit>:
 8002750:	18c4      	adds	r4, r0, r3
 8002752:	428c      	cmp	r4, r1
 8002754:	d3f9      	bcc.n	800274a <CopyDataInit>
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <LoopFillZerobss+0x1e>)
 8002758:	4c0a      	ldr	r4, [pc, #40]	; (8002784 <LoopFillZerobss+0x22>)
 800275a:	2300      	movs	r3, #0
 800275c:	e001      	b.n	8002762 <LoopFillZerobss>

0800275e <FillZerobss>:
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	3204      	adds	r2, #4

08002762 <LoopFillZerobss>:
 8002762:	42a2      	cmp	r2, r4
 8002764:	d3fb      	bcc.n	800275e <FillZerobss>
 8002766:	f00d fa03 	bl	800fb70 <__libc_init_array>
 800276a:	f7fe fc77 	bl	800105c <main>
 800276e:	4770      	bx	lr
 8002770:	24080000 	.word	0x24080000
 8002774:	24000000 	.word	0x24000000
 8002778:	240000a0 	.word	0x240000a0
 800277c:	0800fe80 	.word	0x0800fe80
 8002780:	240000a0 	.word	0x240000a0
 8002784:	240005d4 	.word	0x240005d4

08002788 <ADC3_IRQHandler>:
 8002788:	e7fe      	b.n	8002788 <ADC3_IRQHandler>
	...

0800278c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002792:	2003      	movs	r0, #3
 8002794:	f001 fdae 	bl	80042f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002798:	f006 fbb6 	bl	8008f08 <HAL_RCC_GetSysClockFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_Init+0x68>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	4913      	ldr	r1, [pc, #76]	; (80027f8 <HAL_Init+0x6c>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
 80027b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <HAL_Init+0x68>)
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <HAL_Init+0x6c>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
 80027cc:	4a0b      	ldr	r2, [pc, #44]	; (80027fc <HAL_Init+0x70>)
 80027ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027d0:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <HAL_Init+0x74>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027d6:	200f      	movs	r0, #15
 80027d8:	f000 f814 	bl	8002804 <HAL_InitTick>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e002      	b.n	80027ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027e6:	f7ff faaf 	bl	8001d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	58024400 	.word	0x58024400
 80027f8:	0800fe30 	.word	0x0800fe30
 80027fc:	24000030 	.word	0x24000030
 8002800:	2400002c 	.word	0x2400002c

08002804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800280c:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_InitTick+0x60>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e021      	b.n	800285c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_InitTick+0x64>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_InitTick+0x60>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4619      	mov	r1, r3
 8002822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002826:	fbb3 f3f1 	udiv	r3, r3, r1
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	4618      	mov	r0, r3
 8002830:	f001 fd93 	bl	800435a <HAL_SYSTICK_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e00e      	b.n	800285c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b0f      	cmp	r3, #15
 8002842:	d80a      	bhi.n	800285a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002844:	2200      	movs	r2, #0
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800284c:	f001 fd5d 	bl	800430a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002850:	4a06      	ldr	r2, [pc, #24]	; (800286c <HAL_InitTick+0x68>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e000      	b.n	800285c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	24000038 	.word	0x24000038
 8002868:	2400002c 	.word	0x2400002c
 800286c:	24000034 	.word	0x24000034

08002870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_IncTick+0x20>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_IncTick+0x24>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4413      	add	r3, r2
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <HAL_IncTick+0x24>)
 8002882:	6013      	str	r3, [r2, #0]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	24000038 	.word	0x24000038
 8002894:	240005c0 	.word	0x240005c0

08002898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return uwTick;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_GetTick+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	240005c0 	.word	0x240005c0

080028b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b8:	f7ff ffee 	bl	8002898 <HAL_GetTick>
 80028bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c8:	d005      	beq.n	80028d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_Delay+0x44>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028d6:	bf00      	nop
 80028d8:	f7ff ffde 	bl	8002898 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d8f7      	bhi.n	80028d8 <HAL_Delay+0x28>
  {
  }
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	24000038 	.word	0x24000038

080028f8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_SuspendTick+0x1c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a04      	ldr	r2, [pc, #16]	; (8002914 <HAL_SuspendTick+0x1c>)
 8002902:	f023 0302 	bic.w	r3, r3, #2
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000e010 	.word	0xe000e010

08002918 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <HAL_GetREVID+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0c1b      	lsrs	r3, r3, #16
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	5c001000 	.word	0x5c001000

08002930 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	43db      	mvns	r3, r3
 8002942:	401a      	ands	r2, r3
 8002944:	4904      	ldr	r1, [pc, #16]	; (8002958 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	58000400 	.word	0x58000400

0800295c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	609a      	str	r2, [r3, #8]
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3360      	adds	r3, #96	; 0x60
 80029d6:	461a      	mov	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	431a      	orrs	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	611a      	str	r2, [r3, #16]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b087      	sub	sp, #28
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3360      	adds	r3, #96	; 0x60
 8002a46:	461a      	mov	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	601a      	str	r2, [r3, #0]
  }
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b087      	sub	sp, #28
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3330      	adds	r3, #48	; 0x30
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	0a1b      	lsrs	r3, r3, #8
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	4413      	add	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	211f      	movs	r1, #31
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	401a      	ands	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	0e9b      	lsrs	r3, r3, #26
 8002aca:	f003 011f 	and.w	r1, r3, #31
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f023 0203 	bic.w	r2, r3, #3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	60da      	str	r2, [r3, #12]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3314      	adds	r3, #20
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	0e5b      	lsrs	r3, r3, #25
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	4413      	add	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	0d1b      	lsrs	r3, r3, #20
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	2107      	movs	r1, #7
 8002b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	401a      	ands	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	0d1b      	lsrs	r3, r3, #20
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	431a      	orrs	r2, r3
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b80:	43db      	mvns	r3, r3
 8002b82:	401a      	ands	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0318 	and.w	r3, r3, #24
 8002b8a:	4908      	ldr	r1, [pc, #32]	; (8002bac <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b8c:	40d9      	lsrs	r1, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	400b      	ands	r3, r1
 8002b92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b96:	431a      	orrs	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	000fffff 	.word	0x000fffff

08002bb0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 031f 	and.w	r3, r3, #31
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <LL_ADC_DisableDeepPowerDown+0x20>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6093      	str	r3, [r2, #8]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	5fffffc0 	.word	0x5fffffc0

08002bf0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c04:	d101      	bne.n	8002c0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <LL_ADC_EnableInternalRegulator+0x24>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	6fffffc0 	.word	0x6fffffc0

08002c40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c54:	d101      	bne.n	8002c5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <LL_ADC_Enable+0x24>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	7fffffc0 	.word	0x7fffffc0

08002c90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <LL_ADC_Disable+0x24>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	f043 0202 	orr.w	r2, r3, #2
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	7fffffc0 	.word	0x7fffffc0

08002cb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <LL_ADC_IsEnabled+0x18>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <LL_ADC_IsEnabled+0x1a>
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d101      	bne.n	8002cf6 <LL_ADC_IsDisableOngoing+0x18>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <LL_ADC_IsDisableOngoing+0x1a>
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <LL_ADC_REG_StartConversion+0x24>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	f043 0204 	orr.w	r2, r3, #4
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	7fffffc0 	.word	0x7fffffc0

08002d2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d101      	bne.n	8002d44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d101      	bne.n	8002d6a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e18f      	b.n	80030b2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7fe ffeb 	bl	8001d7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff19 	bl	8002bf0 <LL_ADC_IsDeepPowerDownEnabled>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d004      	beq.n	8002dce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff feff 	bl	8002bcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ff34 	bl	8002c40 <LL_ADC_IsInternalRegulatorEnabled>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d114      	bne.n	8002e08 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff ff18 	bl	8002c18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002de8:	4b87      	ldr	r3, [pc, #540]	; (8003008 <HAL_ADC_Init+0x290>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	4a87      	ldr	r2, [pc, #540]	; (800300c <HAL_ADC_Init+0x294>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	3301      	adds	r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dfa:	e002      	b.n	8002e02 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f9      	bne.n	8002dfc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff17 	bl	8002c40 <LL_ADC_IsInternalRegulatorEnabled>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10d      	bne.n	8002e34 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	f043 0210 	orr.w	r2, r3, #16
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	f043 0201 	orr.w	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff77 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 8002e3e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f040 8129 	bne.w	80030a0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f040 8125 	bne.w	80030a0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e5e:	f043 0202 	orr.w	r2, r3, #2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff24 	bl	8002cb8 <LL_ADC_IsEnabled>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d136      	bne.n	8002ee4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a65      	ldr	r2, [pc, #404]	; (8003010 <HAL_ADC_Init+0x298>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d004      	beq.n	8002e8a <HAL_ADC_Init+0x112>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a63      	ldr	r2, [pc, #396]	; (8003014 <HAL_ADC_Init+0x29c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10e      	bne.n	8002ea8 <HAL_ADC_Init+0x130>
 8002e8a:	4861      	ldr	r0, [pc, #388]	; (8003010 <HAL_ADC_Init+0x298>)
 8002e8c:	f7ff ff14 	bl	8002cb8 <LL_ADC_IsEnabled>
 8002e90:	4604      	mov	r4, r0
 8002e92:	4860      	ldr	r0, [pc, #384]	; (8003014 <HAL_ADC_Init+0x29c>)
 8002e94:	f7ff ff10 	bl	8002cb8 <LL_ADC_IsEnabled>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4323      	orrs	r3, r4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e008      	b.n	8002eba <HAL_ADC_Init+0x142>
 8002ea8:	485b      	ldr	r0, [pc, #364]	; (8003018 <HAL_ADC_Init+0x2a0>)
 8002eaa:	f7ff ff05 	bl	8002cb8 <LL_ADC_IsEnabled>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d012      	beq.n	8002ee4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a53      	ldr	r2, [pc, #332]	; (8003010 <HAL_ADC_Init+0x298>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_ADC_Init+0x15a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a51      	ldr	r2, [pc, #324]	; (8003014 <HAL_ADC_Init+0x29c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_Init+0x15e>
 8002ed2:	4a52      	ldr	r2, [pc, #328]	; (800301c <HAL_ADC_Init+0x2a4>)
 8002ed4:	e000      	b.n	8002ed8 <HAL_ADC_Init+0x160>
 8002ed6:	4a52      	ldr	r2, [pc, #328]	; (8003020 <HAL_ADC_Init+0x2a8>)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4619      	mov	r1, r3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	f7ff fd3c 	bl	800295c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002ee4:	f7ff fd18 	bl	8002918 <HAL_GetREVID>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f241 0203 	movw	r2, #4099	; 0x1003
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d914      	bls.n	8002f1c <HAL_ADC_Init+0x1a4>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d110      	bne.n	8002f1c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7d5b      	ldrb	r3, [r3, #21]
 8002efe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f04:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f0a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7f1b      	ldrb	r3, [r3, #28]
 8002f10:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f12:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f14:	f043 030c 	orr.w	r3, r3, #12
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	e00d      	b.n	8002f38 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	7d5b      	ldrb	r3, [r3, #21]
 8002f20:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f26:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f2c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7f1b      	ldrb	r3, [r3, #28]
 8002f32:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7f1b      	ldrb	r3, [r3, #28]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d106      	bne.n	8002f4e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	045b      	lsls	r3, r3, #17
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	4b2c      	ldr	r3, [pc, #176]	; (8003024 <HAL_ADC_Init+0x2ac>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	69b9      	ldr	r1, [r7, #24]
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fed2 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 8002f88:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fedf 	bl	8002d52 <LL_ADC_INJ_IsConversionOngoing>
 8002f94:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d15f      	bne.n	800305c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d15c      	bne.n	800305c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7d1b      	ldrb	r3, [r3, #20]
 8002fa6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <HAL_ADC_Init+0x2b0>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	69b9      	ldr	r1, [r7, #24]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d130      	bne.n	8003030 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	4b14      	ldr	r3, [pc, #80]	; (800302c <HAL_ADC_Init+0x2b4>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fe2:	3a01      	subs	r2, #1
 8002fe4:	0411      	lsls	r1, r2, #16
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fea:	4311      	orrs	r1, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ff0:	4311      	orrs	r1, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	611a      	str	r2, [r3, #16]
 8003004:	e01c      	b.n	8003040 <HAL_ADC_Init+0x2c8>
 8003006:	bf00      	nop
 8003008:	2400002c 	.word	0x2400002c
 800300c:	053e2d63 	.word	0x053e2d63
 8003010:	40022000 	.word	0x40022000
 8003014:	40022100 	.word	0x40022100
 8003018:	58026000 	.word	0x58026000
 800301c:	40022300 	.word	0x40022300
 8003020:	58026300 	.word	0x58026300
 8003024:	fff0c003 	.word	0xfff0c003
 8003028:	ffffbffc 	.word	0xffffbffc
 800302c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fdd6 	bl	8003c08 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10c      	bne.n	800307e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f023 010f 	bic.w	r1, r3, #15
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	1e5a      	subs	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
 800307c:	e007      	b.n	800308e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 020f 	bic.w	r2, r2, #15
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
 800309e:	e007      	b.n	80030b0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	f043 0210 	orr.w	r2, r3, #16
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3724      	adds	r7, #36	; 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd90      	pop	{r4, r7, pc}
 80030ba:	bf00      	nop

080030bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a55      	ldr	r2, [pc, #340]	; (8003224 <HAL_ADC_Start_DMA+0x168>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d004      	beq.n	80030dc <HAL_ADC_Start_DMA+0x20>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a54      	ldr	r2, [pc, #336]	; (8003228 <HAL_ADC_Start_DMA+0x16c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d101      	bne.n	80030e0 <HAL_ADC_Start_DMA+0x24>
 80030dc:	4b53      	ldr	r3, [pc, #332]	; (800322c <HAL_ADC_Start_DMA+0x170>)
 80030de:	e000      	b.n	80030e2 <HAL_ADC_Start_DMA+0x26>
 80030e0:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_ADC_Start_DMA+0x174>)
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fd64 	bl	8002bb0 <LL_ADC_GetMultimode>
 80030e8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fe1c 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f040 808c 	bne.w	8003214 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_ADC_Start_DMA+0x4e>
 8003106:	2302      	movs	r3, #2
 8003108:	e087      	b.n	800321a <HAL_ADC_Start_DMA+0x15e>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2b05      	cmp	r3, #5
 800311c:	d002      	beq.n	8003124 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b09      	cmp	r3, #9
 8003122:	d170      	bne.n	8003206 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fbf1 	bl	800390c <ADC_Enable>
 800312a:	4603      	mov	r3, r0
 800312c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800312e:	7dfb      	ldrb	r3, [r7, #23]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d163      	bne.n	80031fc <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003138:	4b3e      	ldr	r3, [pc, #248]	; (8003234 <HAL_ADC_Start_DMA+0x178>)
 800313a:	4013      	ands	r3, r2
 800313c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a37      	ldr	r2, [pc, #220]	; (8003228 <HAL_ADC_Start_DMA+0x16c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d002      	beq.n	8003154 <HAL_ADC_Start_DMA+0x98>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	e000      	b.n	8003156 <HAL_ADC_Start_DMA+0x9a>
 8003154:	4b33      	ldr	r3, [pc, #204]	; (8003224 <HAL_ADC_Start_DMA+0x168>)
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	4293      	cmp	r3, r2
 800315c:	d002      	beq.n	8003164 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d105      	bne.n	8003170 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003168:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d006      	beq.n	800318a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	f023 0206 	bic.w	r2, r3, #6
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	659a      	str	r2, [r3, #88]	; 0x58
 8003188:	e002      	b.n	8003190 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003194:	4a28      	ldr	r2, [pc, #160]	; (8003238 <HAL_ADC_Start_DMA+0x17c>)
 8003196:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319c:	4a27      	ldr	r2, [pc, #156]	; (800323c <HAL_ADC_Start_DMA+0x180>)
 800319e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a4:	4a26      	ldr	r2, [pc, #152]	; (8003240 <HAL_ADC_Start_DMA+0x184>)
 80031a6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	221c      	movs	r2, #28
 80031ae:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0210 	orr.w	r2, r2, #16
 80031c6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f7ff fc89 	bl	8002aea <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3340      	adds	r3, #64	; 0x40
 80031e2:	4619      	mov	r1, r3
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f001 fde8 	bl	8004dbc <HAL_DMA_Start_IT>
 80031ec:	4603      	mov	r3, r0
 80031ee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fd85 	bl	8002d04 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80031fa:	e00d      	b.n	8003218 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003204:	e008      	b.n	8003218 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003212:	e001      	b.n	8003218 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003214:	2302      	movs	r3, #2
 8003216:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003218:	7dfb      	ldrb	r3, [r7, #23]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40022000 	.word	0x40022000
 8003228:	40022100 	.word	0x40022100
 800322c:	40022300 	.word	0x40022300
 8003230:	58026300 	.word	0x58026300
 8003234:	fffff0fe 	.word	0xfffff0fe
 8003238:	08003adf 	.word	0x08003adf
 800323c:	08003bb7 	.word	0x08003bb7
 8003240:	08003bd3 	.word	0x08003bd3

08003244 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800326c:	b590      	push	{r4, r7, lr}
 800326e:	b0a1      	sub	sp, #132	; 0x84
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a9d      	ldr	r2, [pc, #628]	; (80034fc <HAL_ADC_ConfigChannel+0x290>)
 8003286:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x2a>
 8003292:	2302      	movs	r3, #2
 8003294:	e321      	b.n	80038da <HAL_ADC_ConfigChannel+0x66e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fd42 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 8306 	bne.w	80038bc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d108      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x62>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0e9b      	lsrs	r3, r3, #26
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	2201      	movs	r2, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	e016      	b.n	80032fc <HAL_ADC_ConfigChannel+0x90>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032de:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80032e6:	2320      	movs	r3, #32
 80032e8:	e003      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80032ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2201      	movs	r2, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	69d1      	ldr	r1, [r2, #28]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	430b      	orrs	r3, r1
 8003308:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6859      	ldr	r1, [r3, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	f7ff fbbb 	bl	8002a92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fd03 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 8003326:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fd10 	bl	8002d52 <LL_ADC_INJ_IsConversionOngoing>
 8003332:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 80b3 	bne.w	80034a2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800333c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 80af 	bne.w	80034a2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6819      	ldr	r1, [r3, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	461a      	mov	r2, r3
 8003352:	f7ff fbdd 	bl	8002b10 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003356:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <HAL_ADC_ConfigChannel+0x294>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800335e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003362:	d10b      	bne.n	800337c <HAL_ADC_ConfigChannel+0x110>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	e01d      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x14c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x136>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	089b      	lsrs	r3, r3, #2
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	e00a      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x14c>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d027      	beq.n	8003412 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6919      	ldr	r1, [r3, #16]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033d0:	f7ff faf8 	bl	80029c4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6919      	ldr	r1, [r3, #16]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	7e5b      	ldrb	r3, [r3, #25]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d102      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x17e>
 80033e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80033e8:	e000      	b.n	80033ec <HAL_ADC_ConfigChannel+0x180>
 80033ea:	2300      	movs	r3, #0
 80033ec:	461a      	mov	r2, r3
 80033ee:	f7ff fb22 	bl	8002a36 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6919      	ldr	r1, [r3, #16]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	7e1b      	ldrb	r3, [r3, #24]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d102      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x19c>
 8003402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003406:	e000      	b.n	800340a <HAL_ADC_ConfigChannel+0x19e>
 8003408:	2300      	movs	r3, #0
 800340a:	461a      	mov	r2, r3
 800340c:	f7ff fafa 	bl	8002a04 <LL_ADC_SetDataRightShift>
 8003410:	e047      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003418:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	069b      	lsls	r3, r3, #26
 8003422:	429a      	cmp	r2, r3
 8003424:	d107      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003434:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800343c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	069b      	lsls	r3, r3, #26
 8003446:	429a      	cmp	r2, r3
 8003448:	d107      	bne.n	800345a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003458:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003460:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	069b      	lsls	r3, r3, #26
 800346a:	429a      	cmp	r2, r3
 800346c:	d107      	bne.n	800347e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800347c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003484:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	069b      	lsls	r3, r3, #26
 800348e:	429a      	cmp	r2, r3
 8003490:	d107      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034a0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fc06 	bl	8002cb8 <LL_ADC_IsEnabled>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 820d 	bne.w	80038ce <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6819      	ldr	r1, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	461a      	mov	r2, r3
 80034c2:	f7ff fb51 	bl	8002b68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	4a0c      	ldr	r2, [pc, #48]	; (80034fc <HAL_ADC_ConfigChannel+0x290>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	f040 8133 	bne.w	8003738 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d110      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x298>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	0e9b      	lsrs	r3, r3, #26
 80034e8:	3301      	adds	r3, #1
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	2b09      	cmp	r3, #9
 80034f0:	bf94      	ite	ls
 80034f2:	2301      	movls	r3, #1
 80034f4:	2300      	movhi	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	e01e      	b.n	8003538 <HAL_ADC_ConfigChannel+0x2cc>
 80034fa:	bf00      	nop
 80034fc:	47ff0000 	.word	0x47ff0000
 8003500:	5c001000 	.word	0x5c001000
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003514:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800351c:	2320      	movs	r3, #32
 800351e:	e003      	b.n	8003528 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	3301      	adds	r3, #1
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2b09      	cmp	r3, #9
 8003530:	bf94      	ite	ls
 8003532:	2301      	movls	r3, #1
 8003534:	2300      	movhi	r3, #0
 8003536:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003538:	2b00      	cmp	r3, #0
 800353a:	d079      	beq.n	8003630 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003544:	2b00      	cmp	r3, #0
 8003546:	d107      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x2ec>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0e9b      	lsrs	r3, r3, #26
 800354e:	3301      	adds	r3, #1
 8003550:	069b      	lsls	r3, r3, #26
 8003552:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003556:	e015      	b.n	8003584 <HAL_ADC_ConfigChannel+0x318>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003568:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800356a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003570:	2320      	movs	r3, #32
 8003572:	e003      	b.n	800357c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	3301      	adds	r3, #1
 800357e:	069b      	lsls	r3, r3, #26
 8003580:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x338>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	3301      	adds	r3, #1
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	2101      	movs	r1, #1
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	e017      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x368>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80035b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80035b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80035bc:	2320      	movs	r3, #32
 80035be:	e003      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80035c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	3301      	adds	r3, #1
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	ea42 0103 	orr.w	r1, r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10a      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x38e>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0e9b      	lsrs	r3, r3, #26
 80035ea:	3301      	adds	r3, #1
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	051b      	lsls	r3, r3, #20
 80035f8:	e018      	b.n	800362c <HAL_ADC_ConfigChannel+0x3c0>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800360c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003612:	2320      	movs	r3, #32
 8003614:	e003      	b.n	800361e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003618:	fab3 f383 	clz	r3, r3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	3301      	adds	r3, #1
 8003620:	f003 021f 	and.w	r2, r3, #31
 8003624:	4613      	mov	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4413      	add	r3, r2
 800362a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800362c:	430b      	orrs	r3, r1
 800362e:	e07e      	b.n	800372e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <HAL_ADC_ConfigChannel+0x3e0>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	0e9b      	lsrs	r3, r3, #26
 8003642:	3301      	adds	r3, #1
 8003644:	069b      	lsls	r3, r3, #26
 8003646:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800364a:	e015      	b.n	8003678 <HAL_ADC_ConfigChannel+0x40c>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003664:	2320      	movs	r3, #32
 8003666:	e003      	b.n	8003670 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3301      	adds	r3, #1
 8003672:	069b      	lsls	r3, r3, #26
 8003674:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003680:	2b00      	cmp	r3, #0
 8003682:	d109      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x42c>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0e9b      	lsrs	r3, r3, #26
 800368a:	3301      	adds	r3, #1
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	2101      	movs	r1, #1
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	e017      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x45c>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	61bb      	str	r3, [r7, #24]
  return result;
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80036b0:	2320      	movs	r3, #32
 80036b2:	e003      	b.n	80036bc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	3301      	adds	r3, #1
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2101      	movs	r1, #1
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	ea42 0103 	orr.w	r1, r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10d      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x488>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0e9b      	lsrs	r3, r3, #26
 80036de:	3301      	adds	r3, #1
 80036e0:	f003 021f 	and.w	r2, r3, #31
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	3b1e      	subs	r3, #30
 80036ec:	051b      	lsls	r3, r3, #20
 80036ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036f2:	e01b      	b.n	800372c <HAL_ADC_ConfigChannel+0x4c0>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	60fb      	str	r3, [r7, #12]
  return result;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800370c:	2320      	movs	r3, #32
 800370e:	e003      	b.n	8003718 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	3301      	adds	r3, #1
 800371a:	f003 021f 	and.w	r2, r3, #31
 800371e:	4613      	mov	r3, r2
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4413      	add	r3, r2
 8003724:	3b1e      	subs	r3, #30
 8003726:	051b      	lsls	r3, r3, #20
 8003728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800372c:	430b      	orrs	r3, r1
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	6892      	ldr	r2, [r2, #8]
 8003732:	4619      	mov	r1, r3
 8003734:	f7ff f9ec 	bl	8002b10 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	f280 80c6 	bge.w	80038ce <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a67      	ldr	r2, [pc, #412]	; (80038e4 <HAL_ADC_ConfigChannel+0x678>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_ADC_ConfigChannel+0x4ea>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a65      	ldr	r2, [pc, #404]	; (80038e8 <HAL_ADC_ConfigChannel+0x67c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_ADC_ConfigChannel+0x4ee>
 8003756:	4b65      	ldr	r3, [pc, #404]	; (80038ec <HAL_ADC_ConfigChannel+0x680>)
 8003758:	e000      	b.n	800375c <HAL_ADC_ConfigChannel+0x4f0>
 800375a:	4b65      	ldr	r3, [pc, #404]	; (80038f0 <HAL_ADC_ConfigChannel+0x684>)
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff f923 	bl	80029a8 <LL_ADC_GetCommonPathInternalCh>
 8003762:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a5e      	ldr	r2, [pc, #376]	; (80038e4 <HAL_ADC_ConfigChannel+0x678>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <HAL_ADC_ConfigChannel+0x50c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a5d      	ldr	r2, [pc, #372]	; (80038e8 <HAL_ADC_ConfigChannel+0x67c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d10e      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x52a>
 8003778:	485a      	ldr	r0, [pc, #360]	; (80038e4 <HAL_ADC_ConfigChannel+0x678>)
 800377a:	f7ff fa9d 	bl	8002cb8 <LL_ADC_IsEnabled>
 800377e:	4604      	mov	r4, r0
 8003780:	4859      	ldr	r0, [pc, #356]	; (80038e8 <HAL_ADC_ConfigChannel+0x67c>)
 8003782:	f7ff fa99 	bl	8002cb8 <LL_ADC_IsEnabled>
 8003786:	4603      	mov	r3, r0
 8003788:	4323      	orrs	r3, r4
 800378a:	2b00      	cmp	r3, #0
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	e008      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x53c>
 8003796:	4857      	ldr	r0, [pc, #348]	; (80038f4 <HAL_ADC_ConfigChannel+0x688>)
 8003798:	f7ff fa8e 	bl	8002cb8 <LL_ADC_IsEnabled>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d07d      	beq.n	80038a8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a51      	ldr	r2, [pc, #324]	; (80038f8 <HAL_ADC_ConfigChannel+0x68c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d130      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x5ac>
 80037b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d12b      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a4b      	ldr	r2, [pc, #300]	; (80038f4 <HAL_ADC_ConfigChannel+0x688>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	f040 8081 	bne.w	80038ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a44      	ldr	r2, [pc, #272]	; (80038e4 <HAL_ADC_ConfigChannel+0x678>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d004      	beq.n	80037e0 <HAL_ADC_ConfigChannel+0x574>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a43      	ldr	r2, [pc, #268]	; (80038e8 <HAL_ADC_ConfigChannel+0x67c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d101      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x578>
 80037e0:	4a42      	ldr	r2, [pc, #264]	; (80038ec <HAL_ADC_ConfigChannel+0x680>)
 80037e2:	e000      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x57a>
 80037e4:	4a42      	ldr	r2, [pc, #264]	; (80038f0 <HAL_ADC_ConfigChannel+0x684>)
 80037e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f7ff f8c7 	bl	8002982 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037f4:	4b41      	ldr	r3, [pc, #260]	; (80038fc <HAL_ADC_ConfigChannel+0x690>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	099b      	lsrs	r3, r3, #6
 80037fa:	4a41      	ldr	r2, [pc, #260]	; (8003900 <HAL_ADC_ConfigChannel+0x694>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	3301      	adds	r3, #1
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003808:	e002      	b.n	8003810 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	3b01      	subs	r3, #1
 800380e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f9      	bne.n	800380a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003816:	e05a      	b.n	80038ce <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a39      	ldr	r2, [pc, #228]	; (8003904 <HAL_ADC_ConfigChannel+0x698>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d11e      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x5f4>
 8003822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d119      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a30      	ldr	r2, [pc, #192]	; (80038f4 <HAL_ADC_ConfigChannel+0x688>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d14b      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a2a      	ldr	r2, [pc, #168]	; (80038e4 <HAL_ADC_ConfigChannel+0x678>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d004      	beq.n	800384a <HAL_ADC_ConfigChannel+0x5de>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a28      	ldr	r2, [pc, #160]	; (80038e8 <HAL_ADC_ConfigChannel+0x67c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_ADC_ConfigChannel+0x5e2>
 800384a:	4a28      	ldr	r2, [pc, #160]	; (80038ec <HAL_ADC_ConfigChannel+0x680>)
 800384c:	e000      	b.n	8003850 <HAL_ADC_ConfigChannel+0x5e4>
 800384e:	4a28      	ldr	r2, [pc, #160]	; (80038f0 <HAL_ADC_ConfigChannel+0x684>)
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003856:	4619      	mov	r1, r3
 8003858:	4610      	mov	r0, r2
 800385a:	f7ff f892 	bl	8002982 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800385e:	e036      	b.n	80038ce <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a28      	ldr	r2, [pc, #160]	; (8003908 <HAL_ADC_ConfigChannel+0x69c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d131      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x662>
 800386a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d12c      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a1e      	ldr	r2, [pc, #120]	; (80038f4 <HAL_ADC_ConfigChannel+0x688>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d127      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <HAL_ADC_ConfigChannel+0x678>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_ADC_ConfigChannel+0x626>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <HAL_ADC_ConfigChannel+0x67c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x62a>
 8003892:	4a16      	ldr	r2, [pc, #88]	; (80038ec <HAL_ADC_ConfigChannel+0x680>)
 8003894:	e000      	b.n	8003898 <HAL_ADC_ConfigChannel+0x62c>
 8003896:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <HAL_ADC_ConfigChannel+0x684>)
 8003898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800389e:	4619      	mov	r1, r3
 80038a0:	4610      	mov	r0, r2
 80038a2:	f7ff f86e 	bl	8002982 <LL_ADC_SetCommonPathInternalCh>
 80038a6:	e012      	b.n	80038ce <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80038ba:	e008      	b.n	80038ce <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80038d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3784      	adds	r7, #132	; 0x84
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd90      	pop	{r4, r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40022000 	.word	0x40022000
 80038e8:	40022100 	.word	0x40022100
 80038ec:	40022300 	.word	0x40022300
 80038f0:	58026300 	.word	0x58026300
 80038f4:	58026000 	.word	0x58026000
 80038f8:	cb840000 	.word	0xcb840000
 80038fc:	2400002c 	.word	0x2400002c
 8003900:	053e2d63 	.word	0x053e2d63
 8003904:	c7520000 	.word	0xc7520000
 8003908:	cfb80000 	.word	0xcfb80000

0800390c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff f9cd 	bl	8002cb8 <LL_ADC_IsEnabled>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d16e      	bne.n	8003a02 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	4b38      	ldr	r3, [pc, #224]	; (8003a0c <ADC_Enable+0x100>)
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003936:	f043 0210 	orr.w	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	f043 0201 	orr.w	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e05a      	b.n	8003a04 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff f988 	bl	8002c68 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003958:	f7fe ff9e 	bl	8002898 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a2b      	ldr	r2, [pc, #172]	; (8003a10 <ADC_Enable+0x104>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d004      	beq.n	8003972 <ADC_Enable+0x66>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a29      	ldr	r2, [pc, #164]	; (8003a14 <ADC_Enable+0x108>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d101      	bne.n	8003976 <ADC_Enable+0x6a>
 8003972:	4b29      	ldr	r3, [pc, #164]	; (8003a18 <ADC_Enable+0x10c>)
 8003974:	e000      	b.n	8003978 <ADC_Enable+0x6c>
 8003976:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <ADC_Enable+0x110>)
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff f919 	bl	8002bb0 <LL_ADC_GetMultimode>
 800397e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a23      	ldr	r2, [pc, #140]	; (8003a14 <ADC_Enable+0x108>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d002      	beq.n	8003990 <ADC_Enable+0x84>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	e000      	b.n	8003992 <ADC_Enable+0x86>
 8003990:	4b1f      	ldr	r3, [pc, #124]	; (8003a10 <ADC_Enable+0x104>)
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	4293      	cmp	r3, r2
 8003998:	d02c      	beq.n	80039f4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d130      	bne.n	8003a02 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039a0:	e028      	b.n	80039f4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff f986 	bl	8002cb8 <LL_ADC_IsEnabled>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d104      	bne.n	80039bc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff f956 	bl	8002c68 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039bc:	f7fe ff6c 	bl	8002898 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d914      	bls.n	80039f4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d00d      	beq.n	80039f4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039dc:	f043 0210 	orr.w	r2, r3, #16
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e8:	f043 0201 	orr.w	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e007      	b.n	8003a04 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d1cf      	bne.n	80039a2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	8000003f 	.word	0x8000003f
 8003a10:	40022000 	.word	0x40022000
 8003a14:	40022100 	.word	0x40022100
 8003a18:	40022300 	.word	0x40022300
 8003a1c:	58026300 	.word	0x58026300

08003a20 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff f956 	bl	8002cde <LL_ADC_IsDisableOngoing>
 8003a32:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff f93d 	bl	8002cb8 <LL_ADC_IsEnabled>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d047      	beq.n	8003ad4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d144      	bne.n	8003ad4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030d 	and.w	r3, r3, #13
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d10c      	bne.n	8003a72 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff f917 	bl	8002c90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2203      	movs	r2, #3
 8003a68:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a6a:	f7fe ff15 	bl	8002898 <HAL_GetTick>
 8003a6e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a70:	e029      	b.n	8003ac6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a76:	f043 0210 	orr.w	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a82:	f043 0201 	orr.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e023      	b.n	8003ad6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a8e:	f7fe ff03 	bl	8002898 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d914      	bls.n	8003ac6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	f043 0210 	orr.w	r2, r3, #16
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	f043 0201 	orr.w	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e007      	b.n	8003ad6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1dc      	bne.n	8003a8e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d14b      	bne.n	8003b90 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d021      	beq.n	8003b56 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe ffa8 	bl	8002a6c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d032      	beq.n	8003b88 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d12b      	bne.n	8003b88 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d11f      	bne.n	8003b88 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	f043 0201 	orr.w	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
 8003b54:	e018      	b.n	8003b88 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d111      	bne.n	8003b88 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	f043 0201 	orr.w	r2, r3, #1
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f7fe f86b 	bl	8001c64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b8e:	e00e      	b.n	8003bae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff fb5b 	bl	8003258 <HAL_ADC_ErrorCallback>
}
 8003ba2:	e004      	b.n	8003bae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
}
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f7ff fb3d 	bl	8003244 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	f043 0204 	orr.w	r2, r3, #4
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7ff fb2d 	bl	8003258 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a79      	ldr	r2, [pc, #484]	; (8003dfc <ADC_ConfigureBoostMode+0x1f4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d004      	beq.n	8003c24 <ADC_ConfigureBoostMode+0x1c>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a78      	ldr	r2, [pc, #480]	; (8003e00 <ADC_ConfigureBoostMode+0x1f8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d109      	bne.n	8003c38 <ADC_ConfigureBoostMode+0x30>
 8003c24:	4b77      	ldr	r3, [pc, #476]	; (8003e04 <ADC_ConfigureBoostMode+0x1fc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf14      	ite	ne
 8003c30:	2301      	movne	r3, #1
 8003c32:	2300      	moveq	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e008      	b.n	8003c4a <ADC_ConfigureBoostMode+0x42>
 8003c38:	4b73      	ldr	r3, [pc, #460]	; (8003e08 <ADC_ConfigureBoostMode+0x200>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01c      	beq.n	8003c88 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003c4e:	f005 fad5 	bl	80091fc <HAL_RCC_GetHCLKFreq>
 8003c52:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c5c:	d010      	beq.n	8003c80 <ADC_ConfigureBoostMode+0x78>
 8003c5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c62:	d871      	bhi.n	8003d48 <ADC_ConfigureBoostMode+0x140>
 8003c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c68:	d002      	beq.n	8003c70 <ADC_ConfigureBoostMode+0x68>
 8003c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c6e:	d16b      	bne.n	8003d48 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	60fb      	str	r3, [r7, #12]
        break;
 8003c7e:	e066      	b.n	8003d4e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	089b      	lsrs	r3, r3, #2
 8003c84:	60fb      	str	r3, [r7, #12]
        break;
 8003c86:	e062      	b.n	8003d4e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003c88:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003c8c:	f006 fa58 	bl	800a140 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c90:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003c9a:	d051      	beq.n	8003d40 <ADC_ConfigureBoostMode+0x138>
 8003c9c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ca0:	d854      	bhi.n	8003d4c <ADC_ConfigureBoostMode+0x144>
 8003ca2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ca6:	d047      	beq.n	8003d38 <ADC_ConfigureBoostMode+0x130>
 8003ca8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003cac:	d84e      	bhi.n	8003d4c <ADC_ConfigureBoostMode+0x144>
 8003cae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003cb2:	d03d      	beq.n	8003d30 <ADC_ConfigureBoostMode+0x128>
 8003cb4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003cb8:	d848      	bhi.n	8003d4c <ADC_ConfigureBoostMode+0x144>
 8003cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cbe:	d033      	beq.n	8003d28 <ADC_ConfigureBoostMode+0x120>
 8003cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cc4:	d842      	bhi.n	8003d4c <ADC_ConfigureBoostMode+0x144>
 8003cc6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003cca:	d029      	beq.n	8003d20 <ADC_ConfigureBoostMode+0x118>
 8003ccc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003cd0:	d83c      	bhi.n	8003d4c <ADC_ConfigureBoostMode+0x144>
 8003cd2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003cd6:	d01a      	beq.n	8003d0e <ADC_ConfigureBoostMode+0x106>
 8003cd8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003cdc:	d836      	bhi.n	8003d4c <ADC_ConfigureBoostMode+0x144>
 8003cde:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003ce2:	d014      	beq.n	8003d0e <ADC_ConfigureBoostMode+0x106>
 8003ce4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003ce8:	d830      	bhi.n	8003d4c <ADC_ConfigureBoostMode+0x144>
 8003cea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cee:	d00e      	beq.n	8003d0e <ADC_ConfigureBoostMode+0x106>
 8003cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf4:	d82a      	bhi.n	8003d4c <ADC_ConfigureBoostMode+0x144>
 8003cf6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cfa:	d008      	beq.n	8003d0e <ADC_ConfigureBoostMode+0x106>
 8003cfc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d00:	d824      	bhi.n	8003d4c <ADC_ConfigureBoostMode+0x144>
 8003d02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d06:	d002      	beq.n	8003d0e <ADC_ConfigureBoostMode+0x106>
 8003d08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d0c:	d11e      	bne.n	8003d4c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	0c9b      	lsrs	r3, r3, #18
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	60fb      	str	r3, [r7, #12]
        break;
 8003d1e:	e016      	b.n	8003d4e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	60fb      	str	r3, [r7, #12]
        break;
 8003d26:	e012      	b.n	8003d4e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	60fb      	str	r3, [r7, #12]
        break;
 8003d2e:	e00e      	b.n	8003d4e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	60fb      	str	r3, [r7, #12]
        break;
 8003d36:	e00a      	b.n	8003d4e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	09db      	lsrs	r3, r3, #7
 8003d3c:	60fb      	str	r3, [r7, #12]
        break;
 8003d3e:	e006      	b.n	8003d4e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	60fb      	str	r3, [r7, #12]
        break;
 8003d46:	e002      	b.n	8003d4e <ADC_ConfigureBoostMode+0x146>
        break;
 8003d48:	bf00      	nop
 8003d4a:	e000      	b.n	8003d4e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003d4c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003d4e:	f7fe fde3 	bl	8002918 <HAL_GetREVID>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d815      	bhi.n	8003d88 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <ADC_ConfigureBoostMode+0x204>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d908      	bls.n	8003d76 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d72:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003d74:	e03e      	b.n	8003df4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d84:	609a      	str	r2, [r3, #8]
}
 8003d86:	e035      	b.n	8003df4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <ADC_ConfigureBoostMode+0x208>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d808      	bhi.n	8003da8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003da4:	609a      	str	r2, [r3, #8]
}
 8003da6:	e025      	b.n	8003df4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4a1a      	ldr	r2, [pc, #104]	; (8003e14 <ADC_ConfigureBoostMode+0x20c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d80a      	bhi.n	8003dc6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc2:	609a      	str	r2, [r3, #8]
}
 8003dc4:	e016      	b.n	8003df4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <ADC_ConfigureBoostMode+0x210>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d80a      	bhi.n	8003de4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de0:	609a      	str	r2, [r3, #8]
}
 8003de2:	e007      	b.n	8003df4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003df2:	609a      	str	r2, [r3, #8]
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40022000 	.word	0x40022000
 8003e00:	40022100 	.word	0x40022100
 8003e04:	40022300 	.word	0x40022300
 8003e08:	58026300 	.word	0x58026300
 8003e0c:	01312d00 	.word	0x01312d00
 8003e10:	005f5e10 	.word	0x005f5e10
 8003e14:	00bebc20 	.word	0x00bebc20
 8003e18:	017d7840 	.word	0x017d7840

08003e1c <LL_ADC_IsEnabled>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <LL_ADC_IsEnabled+0x18>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <LL_ADC_IsEnabled+0x1a>
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <LL_ADC_StartCalibration>:
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <LL_ADC_StartCalibration+0x38>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e64:	430a      	orrs	r2, r1
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	609a      	str	r2, [r3, #8]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	3ffeffc0 	.word	0x3ffeffc0

08003e80 <LL_ADC_IsCalibrationOnGoing>:
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e94:	d101      	bne.n	8003e9a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d101      	bne.n	8003ec0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_ADCEx_Calibration_Start+0x1e>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e04c      	b.n	8003f88 <HAL_ADCEx_Calibration_Start+0xb8>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff fd92 	bl	8003a20 <ADC_Disable>
 8003efc:	4603      	mov	r3, r0
 8003efe:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d135      	bne.n	8003f72 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f0a:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	f043 0202 	orr.w	r2, r3, #2
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ff90 	bl	8003e44 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f24:	e014      	b.n	8003f50 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d30d      	bcc.n	8003f50 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	f023 0312 	bic.w	r3, r3, #18
 8003f3c:	f043 0210 	orr.w	r2, r3, #16
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e01b      	b.n	8003f88 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ff93 	bl	8003e80 <LL_ADC_IsCalibrationOnGoing>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e2      	bne.n	8003f26 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f64:	f023 0303 	bic.w	r3, r3, #3
 8003f68:	f043 0201 	orr.w	r2, r3, #1
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54
 8003f70:	e005      	b.n	8003f7e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	f043 0210 	orr.w	r2, r3, #16
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	ffffeefd 	.word	0xffffeefd
 8003f94:	25c3f800 	.word	0x25c3f800

08003f98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b09f      	sub	sp, #124	; 0x7c
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e0be      	b.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a5c      	ldr	r2, [pc, #368]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d102      	bne.n	8003fd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003fd0:	4b5b      	ldr	r3, [pc, #364]	; (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	e001      	b.n	8003fda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe4:	f043 0220 	orr.w	r2, r3, #32
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e09d      	b.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ff54 	bl	8003ea8 <LL_ADC_REG_IsConversionOngoing>
 8004000:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff ff4e 	bl	8003ea8 <LL_ADC_REG_IsConversionOngoing>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d17f      	bne.n	8004112 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004014:	2b00      	cmp	r3, #0
 8004016:	d17c      	bne.n	8004112 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a47      	ldr	r2, [pc, #284]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d004      	beq.n	800402c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a46      	ldr	r2, [pc, #280]	; (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d101      	bne.n	8004030 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800402c:	4b45      	ldr	r3, [pc, #276]	; (8004144 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800402e:	e000      	b.n	8004032 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004030:	4b45      	ldr	r3, [pc, #276]	; (8004148 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004032:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d039      	beq.n	80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800403c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	431a      	orrs	r2, r3
 800404a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a3a      	ldr	r2, [pc, #232]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a38      	ldr	r2, [pc, #224]	; (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10e      	bne.n	8004080 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004062:	4836      	ldr	r0, [pc, #216]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004064:	f7ff feda 	bl	8003e1c <LL_ADC_IsEnabled>
 8004068:	4604      	mov	r4, r0
 800406a:	4835      	ldr	r0, [pc, #212]	; (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800406c:	f7ff fed6 	bl	8003e1c <LL_ADC_IsEnabled>
 8004070:	4603      	mov	r3, r0
 8004072:	4323      	orrs	r3, r4
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e008      	b.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004080:	4832      	ldr	r0, [pc, #200]	; (800414c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004082:	f7ff fecb 	bl	8003e1c <LL_ADC_IsEnabled>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d047      	beq.n	8004126 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800409c:	4013      	ands	r3, r2
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	6811      	ldr	r1, [r2, #0]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	6892      	ldr	r2, [r2, #8]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	431a      	orrs	r2, r3
 80040aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040ae:	e03a      	b.n	8004126 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80040b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1e      	ldr	r2, [pc, #120]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d10e      	bne.n	80040ee <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80040d0:	481a      	ldr	r0, [pc, #104]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040d2:	f7ff fea3 	bl	8003e1c <LL_ADC_IsEnabled>
 80040d6:	4604      	mov	r4, r0
 80040d8:	4819      	ldr	r0, [pc, #100]	; (8004140 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040da:	f7ff fe9f 	bl	8003e1c <LL_ADC_IsEnabled>
 80040de:	4603      	mov	r3, r0
 80040e0:	4323      	orrs	r3, r4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf0c      	ite	eq
 80040e6:	2301      	moveq	r3, #1
 80040e8:	2300      	movne	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	e008      	b.n	8004100 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80040ee:	4817      	ldr	r0, [pc, #92]	; (800414c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80040f0:	f7ff fe94 	bl	8003e1c <LL_ADC_IsEnabled>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	bf0c      	ite	eq
 80040fa:	2301      	moveq	r3, #1
 80040fc:	2300      	movne	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d010      	beq.n	8004126 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	4b11      	ldr	r3, [pc, #68]	; (8004150 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800410a:	4013      	ands	r3, r2
 800410c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800410e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004110:	e009      	b.n	8004126 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	f043 0220 	orr.w	r2, r3, #32
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004124:	e000      	b.n	8004128 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004126:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004130:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004134:	4618      	mov	r0, r3
 8004136:	377c      	adds	r7, #124	; 0x7c
 8004138:	46bd      	mov	sp, r7
 800413a:	bd90      	pop	{r4, r7, pc}
 800413c:	40022000 	.word	0x40022000
 8004140:	40022100 	.word	0x40022100
 8004144:	40022300 	.word	0x40022300
 8004148:	58026300 	.word	0x58026300
 800414c:	58026000 	.word	0x58026000
 8004150:	fffff0e0 	.word	0xfffff0e0

08004154 <__NVIC_SetPriorityGrouping>:
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004164:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <__NVIC_SetPriorityGrouping+0x40>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004170:	4013      	ands	r3, r2
 8004172:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <__NVIC_SetPriorityGrouping+0x44>)
 800417e:	4313      	orrs	r3, r2
 8004180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004182:	4a04      	ldr	r2, [pc, #16]	; (8004194 <__NVIC_SetPriorityGrouping+0x40>)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	60d3      	str	r3, [r2, #12]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000ed00 	.word	0xe000ed00
 8004198:	05fa0000 	.word	0x05fa0000

0800419c <__NVIC_GetPriorityGrouping>:
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <__NVIC_GetPriorityGrouping+0x18>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	0a1b      	lsrs	r3, r3, #8
 80041a6:	f003 0307 	and.w	r3, r3, #7
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <__NVIC_EnableIRQ>:
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	db0b      	blt.n	80041e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	f003 021f 	and.w	r2, r3, #31
 80041d0:	4907      	ldr	r1, [pc, #28]	; (80041f0 <__NVIC_EnableIRQ+0x38>)
 80041d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	2001      	movs	r0, #1
 80041da:	fa00 f202 	lsl.w	r2, r0, r2
 80041de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	e000e100 	.word	0xe000e100

080041f4 <__NVIC_SetPriority>:
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	6039      	str	r1, [r7, #0]
 80041fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004204:	2b00      	cmp	r3, #0
 8004206:	db0a      	blt.n	800421e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	b2da      	uxtb	r2, r3
 800420c:	490c      	ldr	r1, [pc, #48]	; (8004240 <__NVIC_SetPriority+0x4c>)
 800420e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	440b      	add	r3, r1
 8004218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800421c:	e00a      	b.n	8004234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	b2da      	uxtb	r2, r3
 8004222:	4908      	ldr	r1, [pc, #32]	; (8004244 <__NVIC_SetPriority+0x50>)
 8004224:	88fb      	ldrh	r3, [r7, #6]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	3b04      	subs	r3, #4
 800422c:	0112      	lsls	r2, r2, #4
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	440b      	add	r3, r1
 8004232:	761a      	strb	r2, [r3, #24]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	e000e100 	.word	0xe000e100
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <NVIC_EncodePriority>:
{
 8004248:	b480      	push	{r7}
 800424a:	b089      	sub	sp, #36	; 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f1c3 0307 	rsb	r3, r3, #7
 8004262:	2b04      	cmp	r3, #4
 8004264:	bf28      	it	cs
 8004266:	2304      	movcs	r3, #4
 8004268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3304      	adds	r3, #4
 800426e:	2b06      	cmp	r3, #6
 8004270:	d902      	bls.n	8004278 <NVIC_EncodePriority+0x30>
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3b03      	subs	r3, #3
 8004276:	e000      	b.n	800427a <NVIC_EncodePriority+0x32>
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800427c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43da      	mvns	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	401a      	ands	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004290:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	fa01 f303 	lsl.w	r3, r1, r3
 800429a:	43d9      	mvns	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a0:	4313      	orrs	r3, r2
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3724      	adds	r7, #36	; 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042c0:	d301      	bcc.n	80042c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042c2:	2301      	movs	r3, #1
 80042c4:	e00f      	b.n	80042e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042c6:	4a0a      	ldr	r2, [pc, #40]	; (80042f0 <SysTick_Config+0x40>)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ce:	210f      	movs	r1, #15
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042d4:	f7ff ff8e 	bl	80041f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <SysTick_Config+0x40>)
 80042da:	2200      	movs	r2, #0
 80042dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042de:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <SysTick_Config+0x40>)
 80042e0:	2207      	movs	r2, #7
 80042e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	e000e010 	.word	0xe000e010

080042f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff ff29 	bl	8004154 <__NVIC_SetPriorityGrouping>
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b086      	sub	sp, #24
 800430e:	af00      	add	r7, sp, #0
 8004310:	4603      	mov	r3, r0
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004318:	f7ff ff40 	bl	800419c <__NVIC_GetPriorityGrouping>
 800431c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	6978      	ldr	r0, [r7, #20]
 8004324:	f7ff ff90 	bl	8004248 <NVIC_EncodePriority>
 8004328:	4602      	mov	r2, r0
 800432a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff ff5f 	bl	80041f4 <__NVIC_SetPriority>
}
 8004336:	bf00      	nop
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	4603      	mov	r3, r0
 8004346:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004348:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff ff33 	bl	80041b8 <__NVIC_EnableIRQ>
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff ffa4 	bl	80042b0 <SysTick_Config>
 8004368:	4603      	mov	r3, r0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e014      	b.n	80043ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	791b      	ldrb	r3, [r3, #4]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d105      	bne.n	800439a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7fd fe0b 	bl	8001fb0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	795b      	ldrb	r3, [r3, #5]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_DAC_Start+0x16>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e040      	b.n	800444e <HAL_DAC_Start+0x98>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6819      	ldr	r1, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2201      	movs	r2, #1
 80043e6:	409a      	lsls	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10f      	bne.n	8004416 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004400:	2b02      	cmp	r3, #2
 8004402:	d11d      	bne.n	8004440 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	605a      	str	r2, [r3, #4]
 8004414:	e014      	b.n	8004440 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2102      	movs	r1, #2
 8004428:	fa01 f303 	lsl.w	r3, r1, r3
 800442c:	429a      	cmp	r2, r3
 800442e:	d107      	bne.n	8004440 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0202 	orr.w	r2, r2, #2
 800443e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800445a:	b480      	push	{r7}
 800445c:	b087      	sub	sp, #28
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d105      	bne.n	8004484 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4413      	add	r3, r2
 800447e:	3308      	adds	r3, #8
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	e004      	b.n	800448e <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	3314      	adds	r3, #20
 800448c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	461a      	mov	r2, r3
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	795b      	ldrb	r3, [r3, #5]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_DAC_ConfigChannel+0x18>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e11d      	b.n	80046f8 <HAL_DAC_ConfigChannel+0x254>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2202      	movs	r2, #2
 80044c6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d174      	bne.n	80045ba <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80044d0:	f7fe f9e2 	bl	8002898 <HAL_GetTick>
 80044d4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d134      	bne.n	8004546 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80044dc:	e011      	b.n	8004502 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80044de:	f7fe f9db 	bl	8002898 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d90a      	bls.n	8004502 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f043 0208 	orr.w	r2, r3, #8
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2203      	movs	r2, #3
 80044fc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e0fa      	b.n	80046f8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004508:	4b7d      	ldr	r3, [pc, #500]	; (8004700 <HAL_DAC_ConfigChannel+0x25c>)
 800450a:	4013      	ands	r3, r2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e6      	bne.n	80044de <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004510:	2001      	movs	r0, #1
 8004512:	f7fe f9cd 	bl	80028b0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	6992      	ldr	r2, [r2, #24]
 800451e:	641a      	str	r2, [r3, #64]	; 0x40
 8004520:	e01e      	b.n	8004560 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004522:	f7fe f9b9 	bl	8002898 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d90a      	bls.n	8004546 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f043 0208 	orr.w	r2, r3, #8
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2203      	movs	r2, #3
 8004540:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e0d8      	b.n	80046f8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	2b00      	cmp	r3, #0
 800454e:	dbe8      	blt.n	8004522 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004550:	2001      	movs	r0, #1
 8004552:	f7fe f9ad 	bl	80028b0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	6992      	ldr	r2, [r2, #24]
 800455e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	ea02 0103 	and.w	r1, r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	409a      	lsls	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	21ff      	movs	r1, #255	; 0xff
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	ea02 0103 	and.w	r1, r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6a1a      	ldr	r2, [r3, #32]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	409a      	lsls	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d11d      	bne.n	80045fe <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	221f      	movs	r2, #31
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4013      	ands	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004604:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2207      	movs	r2, #7
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43db      	mvns	r3, r3
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4013      	ands	r3, r2
 8004618:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d102      	bne.n	8004628 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	e00f      	b.n	8004648 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d102      	bne.n	8004636 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004630:	2301      	movs	r3, #1
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	e008      	b.n	8004648 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800463e:	2301      	movs	r3, #1
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	e001      	b.n	8004648 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4313      	orrs	r3, r2
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6819      	ldr	r1, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43da      	mvns	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	400a      	ands	r2, r1
 800468e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	f640 72fe 	movw	r2, #4094	; 0xffe
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4013      	ands	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6819      	ldr	r1, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	22c0      	movs	r2, #192	; 0xc0
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43da      	mvns	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	400a      	ands	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3720      	adds	r7, #32
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20008000 	.word	0x20008000

08004704 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800470c:	f7fe f8c4 	bl	8002898 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e316      	b.n	8004d4a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a66      	ldr	r2, [pc, #408]	; (80048bc <HAL_DMA_Init+0x1b8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d04a      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a65      	ldr	r2, [pc, #404]	; (80048c0 <HAL_DMA_Init+0x1bc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d045      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a63      	ldr	r2, [pc, #396]	; (80048c4 <HAL_DMA_Init+0x1c0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d040      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a62      	ldr	r2, [pc, #392]	; (80048c8 <HAL_DMA_Init+0x1c4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d03b      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a60      	ldr	r2, [pc, #384]	; (80048cc <HAL_DMA_Init+0x1c8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d036      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a5f      	ldr	r2, [pc, #380]	; (80048d0 <HAL_DMA_Init+0x1cc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d031      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a5d      	ldr	r2, [pc, #372]	; (80048d4 <HAL_DMA_Init+0x1d0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d02c      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a5c      	ldr	r2, [pc, #368]	; (80048d8 <HAL_DMA_Init+0x1d4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d027      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a5a      	ldr	r2, [pc, #360]	; (80048dc <HAL_DMA_Init+0x1d8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d022      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a59      	ldr	r2, [pc, #356]	; (80048e0 <HAL_DMA_Init+0x1dc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d01d      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a57      	ldr	r2, [pc, #348]	; (80048e4 <HAL_DMA_Init+0x1e0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d018      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a56      	ldr	r2, [pc, #344]	; (80048e8 <HAL_DMA_Init+0x1e4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a54      	ldr	r2, [pc, #336]	; (80048ec <HAL_DMA_Init+0x1e8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a53      	ldr	r2, [pc, #332]	; (80048f0 <HAL_DMA_Init+0x1ec>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a51      	ldr	r2, [pc, #324]	; (80048f4 <HAL_DMA_Init+0x1f0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_DMA_Init+0xb8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a50      	ldr	r2, [pc, #320]	; (80048f8 <HAL_DMA_Init+0x1f4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d101      	bne.n	80047c0 <HAL_DMA_Init+0xbc>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <HAL_DMA_Init+0xbe>
 80047c0:	2300      	movs	r3, #0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 813b 	beq.w	8004a3e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a37      	ldr	r2, [pc, #220]	; (80048bc <HAL_DMA_Init+0x1b8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d04a      	beq.n	8004878 <HAL_DMA_Init+0x174>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a36      	ldr	r2, [pc, #216]	; (80048c0 <HAL_DMA_Init+0x1bc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d045      	beq.n	8004878 <HAL_DMA_Init+0x174>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a34      	ldr	r2, [pc, #208]	; (80048c4 <HAL_DMA_Init+0x1c0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d040      	beq.n	8004878 <HAL_DMA_Init+0x174>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a33      	ldr	r2, [pc, #204]	; (80048c8 <HAL_DMA_Init+0x1c4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d03b      	beq.n	8004878 <HAL_DMA_Init+0x174>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a31      	ldr	r2, [pc, #196]	; (80048cc <HAL_DMA_Init+0x1c8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d036      	beq.n	8004878 <HAL_DMA_Init+0x174>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a30      	ldr	r2, [pc, #192]	; (80048d0 <HAL_DMA_Init+0x1cc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d031      	beq.n	8004878 <HAL_DMA_Init+0x174>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a2e      	ldr	r2, [pc, #184]	; (80048d4 <HAL_DMA_Init+0x1d0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d02c      	beq.n	8004878 <HAL_DMA_Init+0x174>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a2d      	ldr	r2, [pc, #180]	; (80048d8 <HAL_DMA_Init+0x1d4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d027      	beq.n	8004878 <HAL_DMA_Init+0x174>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a2b      	ldr	r2, [pc, #172]	; (80048dc <HAL_DMA_Init+0x1d8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d022      	beq.n	8004878 <HAL_DMA_Init+0x174>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a2a      	ldr	r2, [pc, #168]	; (80048e0 <HAL_DMA_Init+0x1dc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d01d      	beq.n	8004878 <HAL_DMA_Init+0x174>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a28      	ldr	r2, [pc, #160]	; (80048e4 <HAL_DMA_Init+0x1e0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d018      	beq.n	8004878 <HAL_DMA_Init+0x174>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a27      	ldr	r2, [pc, #156]	; (80048e8 <HAL_DMA_Init+0x1e4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <HAL_DMA_Init+0x174>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a25      	ldr	r2, [pc, #148]	; (80048ec <HAL_DMA_Init+0x1e8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00e      	beq.n	8004878 <HAL_DMA_Init+0x174>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a24      	ldr	r2, [pc, #144]	; (80048f0 <HAL_DMA_Init+0x1ec>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_DMA_Init+0x174>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a22      	ldr	r2, [pc, #136]	; (80048f4 <HAL_DMA_Init+0x1f0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_DMA_Init+0x174>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a21      	ldr	r2, [pc, #132]	; (80048f8 <HAL_DMA_Init+0x1f4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d108      	bne.n	800488a <HAL_DMA_Init+0x186>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	e007      	b.n	800489a <HAL_DMA_Init+0x196>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800489a:	e02f      	b.n	80048fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800489c:	f7fd fffc 	bl	8002898 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b05      	cmp	r3, #5
 80048a8:	d928      	bls.n	80048fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2203      	movs	r2, #3
 80048b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e246      	b.n	8004d4a <HAL_DMA_Init+0x646>
 80048bc:	40020010 	.word	0x40020010
 80048c0:	40020028 	.word	0x40020028
 80048c4:	40020040 	.word	0x40020040
 80048c8:	40020058 	.word	0x40020058
 80048cc:	40020070 	.word	0x40020070
 80048d0:	40020088 	.word	0x40020088
 80048d4:	400200a0 	.word	0x400200a0
 80048d8:	400200b8 	.word	0x400200b8
 80048dc:	40020410 	.word	0x40020410
 80048e0:	40020428 	.word	0x40020428
 80048e4:	40020440 	.word	0x40020440
 80048e8:	40020458 	.word	0x40020458
 80048ec:	40020470 	.word	0x40020470
 80048f0:	40020488 	.word	0x40020488
 80048f4:	400204a0 	.word	0x400204a0
 80048f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1c8      	bne.n	800489c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4b83      	ldr	r3, [pc, #524]	; (8004b24 <HAL_DMA_Init+0x420>)
 8004916:	4013      	ands	r3, r2
 8004918:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004922:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800492e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800493a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	2b04      	cmp	r3, #4
 800494e:	d107      	bne.n	8004960 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	4313      	orrs	r3, r2
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004960:	4b71      	ldr	r3, [pc, #452]	; (8004b28 <HAL_DMA_Init+0x424>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b71      	ldr	r3, [pc, #452]	; (8004b2c <HAL_DMA_Init+0x428>)
 8004966:	4013      	ands	r3, r2
 8004968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800496c:	d328      	bcc.n	80049c0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b28      	cmp	r3, #40	; 0x28
 8004974:	d903      	bls.n	800497e <HAL_DMA_Init+0x27a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b2e      	cmp	r3, #46	; 0x2e
 800497c:	d917      	bls.n	80049ae <HAL_DMA_Init+0x2aa>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b3e      	cmp	r3, #62	; 0x3e
 8004984:	d903      	bls.n	800498e <HAL_DMA_Init+0x28a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b42      	cmp	r3, #66	; 0x42
 800498c:	d90f      	bls.n	80049ae <HAL_DMA_Init+0x2aa>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b46      	cmp	r3, #70	; 0x46
 8004994:	d903      	bls.n	800499e <HAL_DMA_Init+0x29a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b48      	cmp	r3, #72	; 0x48
 800499c:	d907      	bls.n	80049ae <HAL_DMA_Init+0x2aa>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b4e      	cmp	r3, #78	; 0x4e
 80049a4:	d905      	bls.n	80049b2 <HAL_DMA_Init+0x2ae>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b52      	cmp	r3, #82	; 0x52
 80049ac:	d801      	bhi.n	80049b2 <HAL_DMA_Init+0x2ae>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <HAL_DMA_Init+0x2b0>
 80049b2:	2300      	movs	r3, #0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049be:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0307 	bic.w	r3, r3, #7
 80049d6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d117      	bne.n	8004a1a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00e      	beq.n	8004a1a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f002 fb33 	bl	8007068 <DMA_CheckFifoParam>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2240      	movs	r2, #64	; 0x40
 8004a0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e197      	b.n	8004d4a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f002 fa6e 	bl	8006f04 <DMA_CalcBaseAndBitshift>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	223f      	movs	r2, #63	; 0x3f
 8004a36:	409a      	lsls	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	e0cd      	b.n	8004bda <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a3b      	ldr	r2, [pc, #236]	; (8004b30 <HAL_DMA_Init+0x42c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d022      	beq.n	8004a8e <HAL_DMA_Init+0x38a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a39      	ldr	r2, [pc, #228]	; (8004b34 <HAL_DMA_Init+0x430>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d01d      	beq.n	8004a8e <HAL_DMA_Init+0x38a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a38      	ldr	r2, [pc, #224]	; (8004b38 <HAL_DMA_Init+0x434>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d018      	beq.n	8004a8e <HAL_DMA_Init+0x38a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a36      	ldr	r2, [pc, #216]	; (8004b3c <HAL_DMA_Init+0x438>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d013      	beq.n	8004a8e <HAL_DMA_Init+0x38a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a35      	ldr	r2, [pc, #212]	; (8004b40 <HAL_DMA_Init+0x43c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00e      	beq.n	8004a8e <HAL_DMA_Init+0x38a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a33      	ldr	r2, [pc, #204]	; (8004b44 <HAL_DMA_Init+0x440>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d009      	beq.n	8004a8e <HAL_DMA_Init+0x38a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a32      	ldr	r2, [pc, #200]	; (8004b48 <HAL_DMA_Init+0x444>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d004      	beq.n	8004a8e <HAL_DMA_Init+0x38a>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <HAL_DMA_Init+0x448>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d101      	bne.n	8004a92 <HAL_DMA_Init+0x38e>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <HAL_DMA_Init+0x390>
 8004a92:	2300      	movs	r3, #0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8097 	beq.w	8004bc8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a24      	ldr	r2, [pc, #144]	; (8004b30 <HAL_DMA_Init+0x42c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d021      	beq.n	8004ae8 <HAL_DMA_Init+0x3e4>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a22      	ldr	r2, [pc, #136]	; (8004b34 <HAL_DMA_Init+0x430>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d01c      	beq.n	8004ae8 <HAL_DMA_Init+0x3e4>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a21      	ldr	r2, [pc, #132]	; (8004b38 <HAL_DMA_Init+0x434>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d017      	beq.n	8004ae8 <HAL_DMA_Init+0x3e4>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1f      	ldr	r2, [pc, #124]	; (8004b3c <HAL_DMA_Init+0x438>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d012      	beq.n	8004ae8 <HAL_DMA_Init+0x3e4>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1e      	ldr	r2, [pc, #120]	; (8004b40 <HAL_DMA_Init+0x43c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00d      	beq.n	8004ae8 <HAL_DMA_Init+0x3e4>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <HAL_DMA_Init+0x440>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d008      	beq.n	8004ae8 <HAL_DMA_Init+0x3e4>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1b      	ldr	r2, [pc, #108]	; (8004b48 <HAL_DMA_Init+0x444>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d003      	beq.n	8004ae8 <HAL_DMA_Init+0x3e4>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a19      	ldr	r2, [pc, #100]	; (8004b4c <HAL_DMA_Init+0x448>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <HAL_DMA_Init+0x44c>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	d020      	beq.n	8004b54 <HAL_DMA_Init+0x450>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b80      	cmp	r3, #128	; 0x80
 8004b18:	d102      	bne.n	8004b20 <HAL_DMA_Init+0x41c>
 8004b1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b1e:	e01a      	b.n	8004b56 <HAL_DMA_Init+0x452>
 8004b20:	2300      	movs	r3, #0
 8004b22:	e018      	b.n	8004b56 <HAL_DMA_Init+0x452>
 8004b24:	fe10803f 	.word	0xfe10803f
 8004b28:	5c001000 	.word	0x5c001000
 8004b2c:	ffff0000 	.word	0xffff0000
 8004b30:	58025408 	.word	0x58025408
 8004b34:	5802541c 	.word	0x5802541c
 8004b38:	58025430 	.word	0x58025430
 8004b3c:	58025444 	.word	0x58025444
 8004b40:	58025458 	.word	0x58025458
 8004b44:	5802546c 	.word	0x5802546c
 8004b48:	58025480 	.word	0x58025480
 8004b4c:	58025494 	.word	0x58025494
 8004b50:	fffe000f 	.word	0xfffe000f
 8004b54:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68d2      	ldr	r2, [r2, #12]
 8004b5a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b84:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4b6e      	ldr	r3, [pc, #440]	; (8004d54 <HAL_DMA_Init+0x650>)
 8004b9c:	4413      	add	r3, r2
 8004b9e:	4a6e      	ldr	r2, [pc, #440]	; (8004d58 <HAL_DMA_Init+0x654>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	009a      	lsls	r2, r3, #2
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f002 f9a9 	bl	8006f04 <DMA_CalcBaseAndBitshift>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	e008      	b.n	8004bda <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2240      	movs	r2, #64	; 0x40
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e0b7      	b.n	8004d4a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a5f      	ldr	r2, [pc, #380]	; (8004d5c <HAL_DMA_Init+0x658>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d072      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a5d      	ldr	r2, [pc, #372]	; (8004d60 <HAL_DMA_Init+0x65c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d06d      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a5c      	ldr	r2, [pc, #368]	; (8004d64 <HAL_DMA_Init+0x660>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d068      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a5a      	ldr	r2, [pc, #360]	; (8004d68 <HAL_DMA_Init+0x664>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d063      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a59      	ldr	r2, [pc, #356]	; (8004d6c <HAL_DMA_Init+0x668>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d05e      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a57      	ldr	r2, [pc, #348]	; (8004d70 <HAL_DMA_Init+0x66c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d059      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a56      	ldr	r2, [pc, #344]	; (8004d74 <HAL_DMA_Init+0x670>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d054      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a54      	ldr	r2, [pc, #336]	; (8004d78 <HAL_DMA_Init+0x674>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d04f      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a53      	ldr	r2, [pc, #332]	; (8004d7c <HAL_DMA_Init+0x678>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d04a      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a51      	ldr	r2, [pc, #324]	; (8004d80 <HAL_DMA_Init+0x67c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d045      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a50      	ldr	r2, [pc, #320]	; (8004d84 <HAL_DMA_Init+0x680>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d040      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a4e      	ldr	r2, [pc, #312]	; (8004d88 <HAL_DMA_Init+0x684>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d03b      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a4d      	ldr	r2, [pc, #308]	; (8004d8c <HAL_DMA_Init+0x688>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d036      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a4b      	ldr	r2, [pc, #300]	; (8004d90 <HAL_DMA_Init+0x68c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d031      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a4a      	ldr	r2, [pc, #296]	; (8004d94 <HAL_DMA_Init+0x690>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d02c      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a48      	ldr	r2, [pc, #288]	; (8004d98 <HAL_DMA_Init+0x694>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d027      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a47      	ldr	r2, [pc, #284]	; (8004d9c <HAL_DMA_Init+0x698>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d022      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a45      	ldr	r2, [pc, #276]	; (8004da0 <HAL_DMA_Init+0x69c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d01d      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a44      	ldr	r2, [pc, #272]	; (8004da4 <HAL_DMA_Init+0x6a0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d018      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a42      	ldr	r2, [pc, #264]	; (8004da8 <HAL_DMA_Init+0x6a4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d013      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a41      	ldr	r2, [pc, #260]	; (8004dac <HAL_DMA_Init+0x6a8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00e      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a3f      	ldr	r2, [pc, #252]	; (8004db0 <HAL_DMA_Init+0x6ac>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d009      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a3e      	ldr	r2, [pc, #248]	; (8004db4 <HAL_DMA_Init+0x6b0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d004      	beq.n	8004cca <HAL_DMA_Init+0x5c6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a3c      	ldr	r2, [pc, #240]	; (8004db8 <HAL_DMA_Init+0x6b4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d101      	bne.n	8004cce <HAL_DMA_Init+0x5ca>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <HAL_DMA_Init+0x5cc>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d032      	beq.n	8004d3a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f002 fa43 	bl	8007160 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b80      	cmp	r3, #128	; 0x80
 8004ce0:	d102      	bne.n	8004ce8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004cfc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d010      	beq.n	8004d28 <HAL_DMA_Init+0x624>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d80c      	bhi.n	8004d28 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f002 fac0 	bl	8007294 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	e008      	b.n	8004d3a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	a7fdabf8 	.word	0xa7fdabf8
 8004d58:	cccccccd 	.word	0xcccccccd
 8004d5c:	40020010 	.word	0x40020010
 8004d60:	40020028 	.word	0x40020028
 8004d64:	40020040 	.word	0x40020040
 8004d68:	40020058 	.word	0x40020058
 8004d6c:	40020070 	.word	0x40020070
 8004d70:	40020088 	.word	0x40020088
 8004d74:	400200a0 	.word	0x400200a0
 8004d78:	400200b8 	.word	0x400200b8
 8004d7c:	40020410 	.word	0x40020410
 8004d80:	40020428 	.word	0x40020428
 8004d84:	40020440 	.word	0x40020440
 8004d88:	40020458 	.word	0x40020458
 8004d8c:	40020470 	.word	0x40020470
 8004d90:	40020488 	.word	0x40020488
 8004d94:	400204a0 	.word	0x400204a0
 8004d98:	400204b8 	.word	0x400204b8
 8004d9c:	58025408 	.word	0x58025408
 8004da0:	5802541c 	.word	0x5802541c
 8004da4:	58025430 	.word	0x58025430
 8004da8:	58025444 	.word	0x58025444
 8004dac:	58025458 	.word	0x58025458
 8004db0:	5802546c 	.word	0x5802546c
 8004db4:	58025480 	.word	0x58025480
 8004db8:	58025494 	.word	0x58025494

08004dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e226      	b.n	8005226 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d101      	bne.n	8004de6 <HAL_DMA_Start_IT+0x2a>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e21f      	b.n	8005226 <HAL_DMA_Start_IT+0x46a>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	f040 820a 	bne.w	8005210 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a68      	ldr	r2, [pc, #416]	; (8004fb0 <HAL_DMA_Start_IT+0x1f4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d04a      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a66      	ldr	r2, [pc, #408]	; (8004fb4 <HAL_DMA_Start_IT+0x1f8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d045      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a65      	ldr	r2, [pc, #404]	; (8004fb8 <HAL_DMA_Start_IT+0x1fc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d040      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a63      	ldr	r2, [pc, #396]	; (8004fbc <HAL_DMA_Start_IT+0x200>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d03b      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a62      	ldr	r2, [pc, #392]	; (8004fc0 <HAL_DMA_Start_IT+0x204>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d036      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a60      	ldr	r2, [pc, #384]	; (8004fc4 <HAL_DMA_Start_IT+0x208>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d031      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a5f      	ldr	r2, [pc, #380]	; (8004fc8 <HAL_DMA_Start_IT+0x20c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d02c      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a5d      	ldr	r2, [pc, #372]	; (8004fcc <HAL_DMA_Start_IT+0x210>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d027      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a5c      	ldr	r2, [pc, #368]	; (8004fd0 <HAL_DMA_Start_IT+0x214>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d022      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a5a      	ldr	r2, [pc, #360]	; (8004fd4 <HAL_DMA_Start_IT+0x218>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01d      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a59      	ldr	r2, [pc, #356]	; (8004fd8 <HAL_DMA_Start_IT+0x21c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d018      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a57      	ldr	r2, [pc, #348]	; (8004fdc <HAL_DMA_Start_IT+0x220>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a56      	ldr	r2, [pc, #344]	; (8004fe0 <HAL_DMA_Start_IT+0x224>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00e      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a54      	ldr	r2, [pc, #336]	; (8004fe4 <HAL_DMA_Start_IT+0x228>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a53      	ldr	r2, [pc, #332]	; (8004fe8 <HAL_DMA_Start_IT+0x22c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <HAL_DMA_Start_IT+0xee>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a51      	ldr	r2, [pc, #324]	; (8004fec <HAL_DMA_Start_IT+0x230>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d108      	bne.n	8004ebc <HAL_DMA_Start_IT+0x100>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	e007      	b.n	8004ecc <HAL_DMA_Start_IT+0x110>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f001 fe6a 	bl	8006bac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a34      	ldr	r2, [pc, #208]	; (8004fb0 <HAL_DMA_Start_IT+0x1f4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d04a      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a33      	ldr	r2, [pc, #204]	; (8004fb4 <HAL_DMA_Start_IT+0x1f8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d045      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a31      	ldr	r2, [pc, #196]	; (8004fb8 <HAL_DMA_Start_IT+0x1fc>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d040      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a30      	ldr	r2, [pc, #192]	; (8004fbc <HAL_DMA_Start_IT+0x200>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d03b      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a2e      	ldr	r2, [pc, #184]	; (8004fc0 <HAL_DMA_Start_IT+0x204>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d036      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a2d      	ldr	r2, [pc, #180]	; (8004fc4 <HAL_DMA_Start_IT+0x208>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d031      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2b      	ldr	r2, [pc, #172]	; (8004fc8 <HAL_DMA_Start_IT+0x20c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d02c      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a2a      	ldr	r2, [pc, #168]	; (8004fcc <HAL_DMA_Start_IT+0x210>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d027      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a28      	ldr	r2, [pc, #160]	; (8004fd0 <HAL_DMA_Start_IT+0x214>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d022      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a27      	ldr	r2, [pc, #156]	; (8004fd4 <HAL_DMA_Start_IT+0x218>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d01d      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a25      	ldr	r2, [pc, #148]	; (8004fd8 <HAL_DMA_Start_IT+0x21c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d018      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a24      	ldr	r2, [pc, #144]	; (8004fdc <HAL_DMA_Start_IT+0x220>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d013      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a22      	ldr	r2, [pc, #136]	; (8004fe0 <HAL_DMA_Start_IT+0x224>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00e      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a21      	ldr	r2, [pc, #132]	; (8004fe4 <HAL_DMA_Start_IT+0x228>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d009      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1f      	ldr	r2, [pc, #124]	; (8004fe8 <HAL_DMA_Start_IT+0x22c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_DMA_Start_IT+0x1bc>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1e      	ldr	r2, [pc, #120]	; (8004fec <HAL_DMA_Start_IT+0x230>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d101      	bne.n	8004f7c <HAL_DMA_Start_IT+0x1c0>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <HAL_DMA_Start_IT+0x1c2>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d036      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f023 021e 	bic.w	r2, r3, #30
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0216 	orr.w	r2, r2, #22
 8004f94:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d03e      	beq.n	800501c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0208 	orr.w	r2, r2, #8
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e035      	b.n	800501c <HAL_DMA_Start_IT+0x260>
 8004fb0:	40020010 	.word	0x40020010
 8004fb4:	40020028 	.word	0x40020028
 8004fb8:	40020040 	.word	0x40020040
 8004fbc:	40020058 	.word	0x40020058
 8004fc0:	40020070 	.word	0x40020070
 8004fc4:	40020088 	.word	0x40020088
 8004fc8:	400200a0 	.word	0x400200a0
 8004fcc:	400200b8 	.word	0x400200b8
 8004fd0:	40020410 	.word	0x40020410
 8004fd4:	40020428 	.word	0x40020428
 8004fd8:	40020440 	.word	0x40020440
 8004fdc:	40020458 	.word	0x40020458
 8004fe0:	40020470 	.word	0x40020470
 8004fe4:	40020488 	.word	0x40020488
 8004fe8:	400204a0 	.word	0x400204a0
 8004fec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f023 020e 	bic.w	r2, r3, #14
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 020a 	orr.w	r2, r2, #10
 8005002:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0204 	orr.w	r2, r2, #4
 800501a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a83      	ldr	r2, [pc, #524]	; (8005230 <HAL_DMA_Start_IT+0x474>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d072      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a82      	ldr	r2, [pc, #520]	; (8005234 <HAL_DMA_Start_IT+0x478>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d06d      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a80      	ldr	r2, [pc, #512]	; (8005238 <HAL_DMA_Start_IT+0x47c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d068      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a7f      	ldr	r2, [pc, #508]	; (800523c <HAL_DMA_Start_IT+0x480>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d063      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a7d      	ldr	r2, [pc, #500]	; (8005240 <HAL_DMA_Start_IT+0x484>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d05e      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a7c      	ldr	r2, [pc, #496]	; (8005244 <HAL_DMA_Start_IT+0x488>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d059      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a7a      	ldr	r2, [pc, #488]	; (8005248 <HAL_DMA_Start_IT+0x48c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d054      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a79      	ldr	r2, [pc, #484]	; (800524c <HAL_DMA_Start_IT+0x490>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d04f      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a77      	ldr	r2, [pc, #476]	; (8005250 <HAL_DMA_Start_IT+0x494>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d04a      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a76      	ldr	r2, [pc, #472]	; (8005254 <HAL_DMA_Start_IT+0x498>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d045      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a74      	ldr	r2, [pc, #464]	; (8005258 <HAL_DMA_Start_IT+0x49c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d040      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a73      	ldr	r2, [pc, #460]	; (800525c <HAL_DMA_Start_IT+0x4a0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d03b      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a71      	ldr	r2, [pc, #452]	; (8005260 <HAL_DMA_Start_IT+0x4a4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d036      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a70      	ldr	r2, [pc, #448]	; (8005264 <HAL_DMA_Start_IT+0x4a8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d031      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a6e      	ldr	r2, [pc, #440]	; (8005268 <HAL_DMA_Start_IT+0x4ac>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d02c      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a6d      	ldr	r2, [pc, #436]	; (800526c <HAL_DMA_Start_IT+0x4b0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d027      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a6b      	ldr	r2, [pc, #428]	; (8005270 <HAL_DMA_Start_IT+0x4b4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d022      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a6a      	ldr	r2, [pc, #424]	; (8005274 <HAL_DMA_Start_IT+0x4b8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d01d      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a68      	ldr	r2, [pc, #416]	; (8005278 <HAL_DMA_Start_IT+0x4bc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d018      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a67      	ldr	r2, [pc, #412]	; (800527c <HAL_DMA_Start_IT+0x4c0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d013      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a65      	ldr	r2, [pc, #404]	; (8005280 <HAL_DMA_Start_IT+0x4c4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00e      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a64      	ldr	r2, [pc, #400]	; (8005284 <HAL_DMA_Start_IT+0x4c8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d009      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a62      	ldr	r2, [pc, #392]	; (8005288 <HAL_DMA_Start_IT+0x4cc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d004      	beq.n	800510c <HAL_DMA_Start_IT+0x350>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a61      	ldr	r2, [pc, #388]	; (800528c <HAL_DMA_Start_IT+0x4d0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d101      	bne.n	8005110 <HAL_DMA_Start_IT+0x354>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <HAL_DMA_Start_IT+0x356>
 8005110:	2300      	movs	r3, #0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01a      	beq.n	800514c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d007      	beq.n	8005134 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005132:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005138:	2b00      	cmp	r3, #0
 800513a:	d007      	beq.n	800514c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800514a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a37      	ldr	r2, [pc, #220]	; (8005230 <HAL_DMA_Start_IT+0x474>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d04a      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a36      	ldr	r2, [pc, #216]	; (8005234 <HAL_DMA_Start_IT+0x478>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d045      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a34      	ldr	r2, [pc, #208]	; (8005238 <HAL_DMA_Start_IT+0x47c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d040      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a33      	ldr	r2, [pc, #204]	; (800523c <HAL_DMA_Start_IT+0x480>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d03b      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a31      	ldr	r2, [pc, #196]	; (8005240 <HAL_DMA_Start_IT+0x484>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d036      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a30      	ldr	r2, [pc, #192]	; (8005244 <HAL_DMA_Start_IT+0x488>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d031      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a2e      	ldr	r2, [pc, #184]	; (8005248 <HAL_DMA_Start_IT+0x48c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d02c      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a2d      	ldr	r2, [pc, #180]	; (800524c <HAL_DMA_Start_IT+0x490>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d027      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a2b      	ldr	r2, [pc, #172]	; (8005250 <HAL_DMA_Start_IT+0x494>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d022      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2a      	ldr	r2, [pc, #168]	; (8005254 <HAL_DMA_Start_IT+0x498>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d01d      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a28      	ldr	r2, [pc, #160]	; (8005258 <HAL_DMA_Start_IT+0x49c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d018      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a27      	ldr	r2, [pc, #156]	; (800525c <HAL_DMA_Start_IT+0x4a0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d013      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a25      	ldr	r2, [pc, #148]	; (8005260 <HAL_DMA_Start_IT+0x4a4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00e      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a24      	ldr	r2, [pc, #144]	; (8005264 <HAL_DMA_Start_IT+0x4a8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d009      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a22      	ldr	r2, [pc, #136]	; (8005268 <HAL_DMA_Start_IT+0x4ac>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d004      	beq.n	80051ec <HAL_DMA_Start_IT+0x430>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a21      	ldr	r2, [pc, #132]	; (800526c <HAL_DMA_Start_IT+0x4b0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d108      	bne.n	80051fe <HAL_DMA_Start_IT+0x442>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	e012      	b.n	8005224 <HAL_DMA_Start_IT+0x468>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0201 	orr.w	r2, r2, #1
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	e009      	b.n	8005224 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005216:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005224:	7dfb      	ldrb	r3, [r7, #23]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40020010 	.word	0x40020010
 8005234:	40020028 	.word	0x40020028
 8005238:	40020040 	.word	0x40020040
 800523c:	40020058 	.word	0x40020058
 8005240:	40020070 	.word	0x40020070
 8005244:	40020088 	.word	0x40020088
 8005248:	400200a0 	.word	0x400200a0
 800524c:	400200b8 	.word	0x400200b8
 8005250:	40020410 	.word	0x40020410
 8005254:	40020428 	.word	0x40020428
 8005258:	40020440 	.word	0x40020440
 800525c:	40020458 	.word	0x40020458
 8005260:	40020470 	.word	0x40020470
 8005264:	40020488 	.word	0x40020488
 8005268:	400204a0 	.word	0x400204a0
 800526c:	400204b8 	.word	0x400204b8
 8005270:	58025408 	.word	0x58025408
 8005274:	5802541c 	.word	0x5802541c
 8005278:	58025430 	.word	0x58025430
 800527c:	58025444 	.word	0x58025444
 8005280:	58025458 	.word	0x58025458
 8005284:	5802546c 	.word	0x5802546c
 8005288:	58025480 	.word	0x58025480
 800528c:	58025494 	.word	0x58025494

08005290 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005298:	f7fd fafe 	bl	8002898 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e2dc      	b.n	8005862 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d008      	beq.n	80052c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2280      	movs	r2, #128	; 0x80
 80052b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e2cd      	b.n	8005862 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a76      	ldr	r2, [pc, #472]	; (80054a4 <HAL_DMA_Abort+0x214>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d04a      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a74      	ldr	r2, [pc, #464]	; (80054a8 <HAL_DMA_Abort+0x218>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d045      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a73      	ldr	r2, [pc, #460]	; (80054ac <HAL_DMA_Abort+0x21c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d040      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a71      	ldr	r2, [pc, #452]	; (80054b0 <HAL_DMA_Abort+0x220>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d03b      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a70      	ldr	r2, [pc, #448]	; (80054b4 <HAL_DMA_Abort+0x224>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d036      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a6e      	ldr	r2, [pc, #440]	; (80054b8 <HAL_DMA_Abort+0x228>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d031      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a6d      	ldr	r2, [pc, #436]	; (80054bc <HAL_DMA_Abort+0x22c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d02c      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a6b      	ldr	r2, [pc, #428]	; (80054c0 <HAL_DMA_Abort+0x230>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d027      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a6a      	ldr	r2, [pc, #424]	; (80054c4 <HAL_DMA_Abort+0x234>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d022      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a68      	ldr	r2, [pc, #416]	; (80054c8 <HAL_DMA_Abort+0x238>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d01d      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a67      	ldr	r2, [pc, #412]	; (80054cc <HAL_DMA_Abort+0x23c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d018      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a65      	ldr	r2, [pc, #404]	; (80054d0 <HAL_DMA_Abort+0x240>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d013      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a64      	ldr	r2, [pc, #400]	; (80054d4 <HAL_DMA_Abort+0x244>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00e      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a62      	ldr	r2, [pc, #392]	; (80054d8 <HAL_DMA_Abort+0x248>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d009      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a61      	ldr	r2, [pc, #388]	; (80054dc <HAL_DMA_Abort+0x24c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d004      	beq.n	8005366 <HAL_DMA_Abort+0xd6>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a5f      	ldr	r2, [pc, #380]	; (80054e0 <HAL_DMA_Abort+0x250>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d101      	bne.n	800536a <HAL_DMA_Abort+0xda>
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <HAL_DMA_Abort+0xdc>
 800536a:	2300      	movs	r3, #0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d013      	beq.n	8005398 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 021e 	bic.w	r2, r2, #30
 800537e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695a      	ldr	r2, [r3, #20]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800538e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	e00a      	b.n	80053ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 020e 	bic.w	r2, r2, #14
 80053a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a3c      	ldr	r2, [pc, #240]	; (80054a4 <HAL_DMA_Abort+0x214>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d072      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a3a      	ldr	r2, [pc, #232]	; (80054a8 <HAL_DMA_Abort+0x218>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d06d      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a39      	ldr	r2, [pc, #228]	; (80054ac <HAL_DMA_Abort+0x21c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d068      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a37      	ldr	r2, [pc, #220]	; (80054b0 <HAL_DMA_Abort+0x220>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d063      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a36      	ldr	r2, [pc, #216]	; (80054b4 <HAL_DMA_Abort+0x224>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d05e      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a34      	ldr	r2, [pc, #208]	; (80054b8 <HAL_DMA_Abort+0x228>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d059      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a33      	ldr	r2, [pc, #204]	; (80054bc <HAL_DMA_Abort+0x22c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d054      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a31      	ldr	r2, [pc, #196]	; (80054c0 <HAL_DMA_Abort+0x230>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d04f      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a30      	ldr	r2, [pc, #192]	; (80054c4 <HAL_DMA_Abort+0x234>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d04a      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a2e      	ldr	r2, [pc, #184]	; (80054c8 <HAL_DMA_Abort+0x238>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d045      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a2d      	ldr	r2, [pc, #180]	; (80054cc <HAL_DMA_Abort+0x23c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d040      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a2b      	ldr	r2, [pc, #172]	; (80054d0 <HAL_DMA_Abort+0x240>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d03b      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a2a      	ldr	r2, [pc, #168]	; (80054d4 <HAL_DMA_Abort+0x244>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d036      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a28      	ldr	r2, [pc, #160]	; (80054d8 <HAL_DMA_Abort+0x248>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d031      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a27      	ldr	r2, [pc, #156]	; (80054dc <HAL_DMA_Abort+0x24c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d02c      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a25      	ldr	r2, [pc, #148]	; (80054e0 <HAL_DMA_Abort+0x250>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d027      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a24      	ldr	r2, [pc, #144]	; (80054e4 <HAL_DMA_Abort+0x254>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d022      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a22      	ldr	r2, [pc, #136]	; (80054e8 <HAL_DMA_Abort+0x258>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d01d      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a21      	ldr	r2, [pc, #132]	; (80054ec <HAL_DMA_Abort+0x25c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d018      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1f      	ldr	r2, [pc, #124]	; (80054f0 <HAL_DMA_Abort+0x260>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d013      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1e      	ldr	r2, [pc, #120]	; (80054f4 <HAL_DMA_Abort+0x264>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d00e      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1c      	ldr	r2, [pc, #112]	; (80054f8 <HAL_DMA_Abort+0x268>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d009      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <HAL_DMA_Abort+0x26c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d004      	beq.n	800549e <HAL_DMA_Abort+0x20e>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a19      	ldr	r2, [pc, #100]	; (8005500 <HAL_DMA_Abort+0x270>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d132      	bne.n	8005504 <HAL_DMA_Abort+0x274>
 800549e:	2301      	movs	r3, #1
 80054a0:	e031      	b.n	8005506 <HAL_DMA_Abort+0x276>
 80054a2:	bf00      	nop
 80054a4:	40020010 	.word	0x40020010
 80054a8:	40020028 	.word	0x40020028
 80054ac:	40020040 	.word	0x40020040
 80054b0:	40020058 	.word	0x40020058
 80054b4:	40020070 	.word	0x40020070
 80054b8:	40020088 	.word	0x40020088
 80054bc:	400200a0 	.word	0x400200a0
 80054c0:	400200b8 	.word	0x400200b8
 80054c4:	40020410 	.word	0x40020410
 80054c8:	40020428 	.word	0x40020428
 80054cc:	40020440 	.word	0x40020440
 80054d0:	40020458 	.word	0x40020458
 80054d4:	40020470 	.word	0x40020470
 80054d8:	40020488 	.word	0x40020488
 80054dc:	400204a0 	.word	0x400204a0
 80054e0:	400204b8 	.word	0x400204b8
 80054e4:	58025408 	.word	0x58025408
 80054e8:	5802541c 	.word	0x5802541c
 80054ec:	58025430 	.word	0x58025430
 80054f0:	58025444 	.word	0x58025444
 80054f4:	58025458 	.word	0x58025458
 80054f8:	5802546c 	.word	0x5802546c
 80054fc:	58025480 	.word	0x58025480
 8005500:	58025494 	.word	0x58025494
 8005504:	2300      	movs	r3, #0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d007      	beq.n	800551a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005518:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a6d      	ldr	r2, [pc, #436]	; (80056d4 <HAL_DMA_Abort+0x444>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d04a      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a6b      	ldr	r2, [pc, #428]	; (80056d8 <HAL_DMA_Abort+0x448>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d045      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a6a      	ldr	r2, [pc, #424]	; (80056dc <HAL_DMA_Abort+0x44c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d040      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a68      	ldr	r2, [pc, #416]	; (80056e0 <HAL_DMA_Abort+0x450>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d03b      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a67      	ldr	r2, [pc, #412]	; (80056e4 <HAL_DMA_Abort+0x454>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d036      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a65      	ldr	r2, [pc, #404]	; (80056e8 <HAL_DMA_Abort+0x458>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d031      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a64      	ldr	r2, [pc, #400]	; (80056ec <HAL_DMA_Abort+0x45c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d02c      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a62      	ldr	r2, [pc, #392]	; (80056f0 <HAL_DMA_Abort+0x460>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d027      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a61      	ldr	r2, [pc, #388]	; (80056f4 <HAL_DMA_Abort+0x464>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d022      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a5f      	ldr	r2, [pc, #380]	; (80056f8 <HAL_DMA_Abort+0x468>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01d      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a5e      	ldr	r2, [pc, #376]	; (80056fc <HAL_DMA_Abort+0x46c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d018      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a5c      	ldr	r2, [pc, #368]	; (8005700 <HAL_DMA_Abort+0x470>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d013      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a5b      	ldr	r2, [pc, #364]	; (8005704 <HAL_DMA_Abort+0x474>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00e      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a59      	ldr	r2, [pc, #356]	; (8005708 <HAL_DMA_Abort+0x478>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d009      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a58      	ldr	r2, [pc, #352]	; (800570c <HAL_DMA_Abort+0x47c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d004      	beq.n	80055ba <HAL_DMA_Abort+0x32a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a56      	ldr	r2, [pc, #344]	; (8005710 <HAL_DMA_Abort+0x480>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d108      	bne.n	80055cc <HAL_DMA_Abort+0x33c>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0201 	bic.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e007      	b.n	80055dc <HAL_DMA_Abort+0x34c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0201 	bic.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80055dc:	e013      	b.n	8005606 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055de:	f7fd f95b 	bl	8002898 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b05      	cmp	r3, #5
 80055ea:	d90c      	bls.n	8005606 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2203      	movs	r2, #3
 80055f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e12d      	b.n	8005862 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e5      	bne.n	80055de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a2f      	ldr	r2, [pc, #188]	; (80056d4 <HAL_DMA_Abort+0x444>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d04a      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a2d      	ldr	r2, [pc, #180]	; (80056d8 <HAL_DMA_Abort+0x448>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d045      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a2c      	ldr	r2, [pc, #176]	; (80056dc <HAL_DMA_Abort+0x44c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d040      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a2a      	ldr	r2, [pc, #168]	; (80056e0 <HAL_DMA_Abort+0x450>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d03b      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a29      	ldr	r2, [pc, #164]	; (80056e4 <HAL_DMA_Abort+0x454>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d036      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a27      	ldr	r2, [pc, #156]	; (80056e8 <HAL_DMA_Abort+0x458>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d031      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a26      	ldr	r2, [pc, #152]	; (80056ec <HAL_DMA_Abort+0x45c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d02c      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a24      	ldr	r2, [pc, #144]	; (80056f0 <HAL_DMA_Abort+0x460>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d027      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a23      	ldr	r2, [pc, #140]	; (80056f4 <HAL_DMA_Abort+0x464>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d022      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a21      	ldr	r2, [pc, #132]	; (80056f8 <HAL_DMA_Abort+0x468>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d01d      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a20      	ldr	r2, [pc, #128]	; (80056fc <HAL_DMA_Abort+0x46c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d018      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1e      	ldr	r2, [pc, #120]	; (8005700 <HAL_DMA_Abort+0x470>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d013      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a1d      	ldr	r2, [pc, #116]	; (8005704 <HAL_DMA_Abort+0x474>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00e      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1b      	ldr	r2, [pc, #108]	; (8005708 <HAL_DMA_Abort+0x478>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d009      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1a      	ldr	r2, [pc, #104]	; (800570c <HAL_DMA_Abort+0x47c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d004      	beq.n	80056b2 <HAL_DMA_Abort+0x422>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a18      	ldr	r2, [pc, #96]	; (8005710 <HAL_DMA_Abort+0x480>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d101      	bne.n	80056b6 <HAL_DMA_Abort+0x426>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <HAL_DMA_Abort+0x428>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d02b      	beq.n	8005714 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c6:	f003 031f 	and.w	r3, r3, #31
 80056ca:	223f      	movs	r2, #63	; 0x3f
 80056cc:	409a      	lsls	r2, r3
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	609a      	str	r2, [r3, #8]
 80056d2:	e02a      	b.n	800572a <HAL_DMA_Abort+0x49a>
 80056d4:	40020010 	.word	0x40020010
 80056d8:	40020028 	.word	0x40020028
 80056dc:	40020040 	.word	0x40020040
 80056e0:	40020058 	.word	0x40020058
 80056e4:	40020070 	.word	0x40020070
 80056e8:	40020088 	.word	0x40020088
 80056ec:	400200a0 	.word	0x400200a0
 80056f0:	400200b8 	.word	0x400200b8
 80056f4:	40020410 	.word	0x40020410
 80056f8:	40020428 	.word	0x40020428
 80056fc:	40020440 	.word	0x40020440
 8005700:	40020458 	.word	0x40020458
 8005704:	40020470 	.word	0x40020470
 8005708:	40020488 	.word	0x40020488
 800570c:	400204a0 	.word	0x400204a0
 8005710:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005718:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571e:	f003 031f 	and.w	r3, r3, #31
 8005722:	2201      	movs	r2, #1
 8005724:	409a      	lsls	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a4f      	ldr	r2, [pc, #316]	; (800586c <HAL_DMA_Abort+0x5dc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d072      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a4d      	ldr	r2, [pc, #308]	; (8005870 <HAL_DMA_Abort+0x5e0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d06d      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a4c      	ldr	r2, [pc, #304]	; (8005874 <HAL_DMA_Abort+0x5e4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d068      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a4a      	ldr	r2, [pc, #296]	; (8005878 <HAL_DMA_Abort+0x5e8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d063      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a49      	ldr	r2, [pc, #292]	; (800587c <HAL_DMA_Abort+0x5ec>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d05e      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a47      	ldr	r2, [pc, #284]	; (8005880 <HAL_DMA_Abort+0x5f0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d059      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a46      	ldr	r2, [pc, #280]	; (8005884 <HAL_DMA_Abort+0x5f4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d054      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a44      	ldr	r2, [pc, #272]	; (8005888 <HAL_DMA_Abort+0x5f8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d04f      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a43      	ldr	r2, [pc, #268]	; (800588c <HAL_DMA_Abort+0x5fc>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d04a      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a41      	ldr	r2, [pc, #260]	; (8005890 <HAL_DMA_Abort+0x600>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d045      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a40      	ldr	r2, [pc, #256]	; (8005894 <HAL_DMA_Abort+0x604>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d040      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a3e      	ldr	r2, [pc, #248]	; (8005898 <HAL_DMA_Abort+0x608>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d03b      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a3d      	ldr	r2, [pc, #244]	; (800589c <HAL_DMA_Abort+0x60c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d036      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a3b      	ldr	r2, [pc, #236]	; (80058a0 <HAL_DMA_Abort+0x610>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d031      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a3a      	ldr	r2, [pc, #232]	; (80058a4 <HAL_DMA_Abort+0x614>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d02c      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a38      	ldr	r2, [pc, #224]	; (80058a8 <HAL_DMA_Abort+0x618>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d027      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a37      	ldr	r2, [pc, #220]	; (80058ac <HAL_DMA_Abort+0x61c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d022      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a35      	ldr	r2, [pc, #212]	; (80058b0 <HAL_DMA_Abort+0x620>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d01d      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a34      	ldr	r2, [pc, #208]	; (80058b4 <HAL_DMA_Abort+0x624>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d018      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a32      	ldr	r2, [pc, #200]	; (80058b8 <HAL_DMA_Abort+0x628>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a31      	ldr	r2, [pc, #196]	; (80058bc <HAL_DMA_Abort+0x62c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00e      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a2f      	ldr	r2, [pc, #188]	; (80058c0 <HAL_DMA_Abort+0x630>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d009      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a2e      	ldr	r2, [pc, #184]	; (80058c4 <HAL_DMA_Abort+0x634>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d004      	beq.n	800581a <HAL_DMA_Abort+0x58a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a2c      	ldr	r2, [pc, #176]	; (80058c8 <HAL_DMA_Abort+0x638>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d101      	bne.n	800581e <HAL_DMA_Abort+0x58e>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <HAL_DMA_Abort+0x590>
 800581e:	2300      	movs	r3, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d015      	beq.n	8005850 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800582c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00c      	beq.n	8005850 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005844:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800584e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40020010 	.word	0x40020010
 8005870:	40020028 	.word	0x40020028
 8005874:	40020040 	.word	0x40020040
 8005878:	40020058 	.word	0x40020058
 800587c:	40020070 	.word	0x40020070
 8005880:	40020088 	.word	0x40020088
 8005884:	400200a0 	.word	0x400200a0
 8005888:	400200b8 	.word	0x400200b8
 800588c:	40020410 	.word	0x40020410
 8005890:	40020428 	.word	0x40020428
 8005894:	40020440 	.word	0x40020440
 8005898:	40020458 	.word	0x40020458
 800589c:	40020470 	.word	0x40020470
 80058a0:	40020488 	.word	0x40020488
 80058a4:	400204a0 	.word	0x400204a0
 80058a8:	400204b8 	.word	0x400204b8
 80058ac:	58025408 	.word	0x58025408
 80058b0:	5802541c 	.word	0x5802541c
 80058b4:	58025430 	.word	0x58025430
 80058b8:	58025444 	.word	0x58025444
 80058bc:	58025458 	.word	0x58025458
 80058c0:	5802546c 	.word	0x5802546c
 80058c4:	58025480 	.word	0x58025480
 80058c8:	58025494 	.word	0x58025494

080058cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e237      	b.n	8005d4e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d004      	beq.n	80058f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2280      	movs	r2, #128	; 0x80
 80058ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e22c      	b.n	8005d4e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a5c      	ldr	r2, [pc, #368]	; (8005a6c <HAL_DMA_Abort_IT+0x1a0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d04a      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a5b      	ldr	r2, [pc, #364]	; (8005a70 <HAL_DMA_Abort_IT+0x1a4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d045      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a59      	ldr	r2, [pc, #356]	; (8005a74 <HAL_DMA_Abort_IT+0x1a8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d040      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a58      	ldr	r2, [pc, #352]	; (8005a78 <HAL_DMA_Abort_IT+0x1ac>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d03b      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a56      	ldr	r2, [pc, #344]	; (8005a7c <HAL_DMA_Abort_IT+0x1b0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d036      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a55      	ldr	r2, [pc, #340]	; (8005a80 <HAL_DMA_Abort_IT+0x1b4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d031      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a53      	ldr	r2, [pc, #332]	; (8005a84 <HAL_DMA_Abort_IT+0x1b8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d02c      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a52      	ldr	r2, [pc, #328]	; (8005a88 <HAL_DMA_Abort_IT+0x1bc>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d027      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a50      	ldr	r2, [pc, #320]	; (8005a8c <HAL_DMA_Abort_IT+0x1c0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d022      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a4f      	ldr	r2, [pc, #316]	; (8005a90 <HAL_DMA_Abort_IT+0x1c4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d01d      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a4d      	ldr	r2, [pc, #308]	; (8005a94 <HAL_DMA_Abort_IT+0x1c8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d018      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a4c      	ldr	r2, [pc, #304]	; (8005a98 <HAL_DMA_Abort_IT+0x1cc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d013      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a4a      	ldr	r2, [pc, #296]	; (8005a9c <HAL_DMA_Abort_IT+0x1d0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00e      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a49      	ldr	r2, [pc, #292]	; (8005aa0 <HAL_DMA_Abort_IT+0x1d4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d009      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a47      	ldr	r2, [pc, #284]	; (8005aa4 <HAL_DMA_Abort_IT+0x1d8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d004      	beq.n	8005994 <HAL_DMA_Abort_IT+0xc8>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a46      	ldr	r2, [pc, #280]	; (8005aa8 <HAL_DMA_Abort_IT+0x1dc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d101      	bne.n	8005998 <HAL_DMA_Abort_IT+0xcc>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <HAL_DMA_Abort_IT+0xce>
 8005998:	2300      	movs	r3, #0
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8086 	beq.w	8005aac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2204      	movs	r2, #4
 80059a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a2f      	ldr	r2, [pc, #188]	; (8005a6c <HAL_DMA_Abort_IT+0x1a0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d04a      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a2e      	ldr	r2, [pc, #184]	; (8005a70 <HAL_DMA_Abort_IT+0x1a4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d045      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a2c      	ldr	r2, [pc, #176]	; (8005a74 <HAL_DMA_Abort_IT+0x1a8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d040      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a2b      	ldr	r2, [pc, #172]	; (8005a78 <HAL_DMA_Abort_IT+0x1ac>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d03b      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a29      	ldr	r2, [pc, #164]	; (8005a7c <HAL_DMA_Abort_IT+0x1b0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d036      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a28      	ldr	r2, [pc, #160]	; (8005a80 <HAL_DMA_Abort_IT+0x1b4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d031      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a26      	ldr	r2, [pc, #152]	; (8005a84 <HAL_DMA_Abort_IT+0x1b8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d02c      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a25      	ldr	r2, [pc, #148]	; (8005a88 <HAL_DMA_Abort_IT+0x1bc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d027      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a23      	ldr	r2, [pc, #140]	; (8005a8c <HAL_DMA_Abort_IT+0x1c0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d022      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a22      	ldr	r2, [pc, #136]	; (8005a90 <HAL_DMA_Abort_IT+0x1c4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d01d      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a20      	ldr	r2, [pc, #128]	; (8005a94 <HAL_DMA_Abort_IT+0x1c8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d018      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1f      	ldr	r2, [pc, #124]	; (8005a98 <HAL_DMA_Abort_IT+0x1cc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d013      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1d      	ldr	r2, [pc, #116]	; (8005a9c <HAL_DMA_Abort_IT+0x1d0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00e      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1c      	ldr	r2, [pc, #112]	; (8005aa0 <HAL_DMA_Abort_IT+0x1d4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d009      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1a      	ldr	r2, [pc, #104]	; (8005aa4 <HAL_DMA_Abort_IT+0x1d8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x17c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a19      	ldr	r2, [pc, #100]	; (8005aa8 <HAL_DMA_Abort_IT+0x1dc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d108      	bne.n	8005a5a <HAL_DMA_Abort_IT+0x18e>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0201 	bic.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e178      	b.n	8005d4c <HAL_DMA_Abort_IT+0x480>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	e16f      	b.n	8005d4c <HAL_DMA_Abort_IT+0x480>
 8005a6c:	40020010 	.word	0x40020010
 8005a70:	40020028 	.word	0x40020028
 8005a74:	40020040 	.word	0x40020040
 8005a78:	40020058 	.word	0x40020058
 8005a7c:	40020070 	.word	0x40020070
 8005a80:	40020088 	.word	0x40020088
 8005a84:	400200a0 	.word	0x400200a0
 8005a88:	400200b8 	.word	0x400200b8
 8005a8c:	40020410 	.word	0x40020410
 8005a90:	40020428 	.word	0x40020428
 8005a94:	40020440 	.word	0x40020440
 8005a98:	40020458 	.word	0x40020458
 8005a9c:	40020470 	.word	0x40020470
 8005aa0:	40020488 	.word	0x40020488
 8005aa4:	400204a0 	.word	0x400204a0
 8005aa8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 020e 	bic.w	r2, r2, #14
 8005aba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a6c      	ldr	r2, [pc, #432]	; (8005c74 <HAL_DMA_Abort_IT+0x3a8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d04a      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a6b      	ldr	r2, [pc, #428]	; (8005c78 <HAL_DMA_Abort_IT+0x3ac>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d045      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a69      	ldr	r2, [pc, #420]	; (8005c7c <HAL_DMA_Abort_IT+0x3b0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d040      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a68      	ldr	r2, [pc, #416]	; (8005c80 <HAL_DMA_Abort_IT+0x3b4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d03b      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a66      	ldr	r2, [pc, #408]	; (8005c84 <HAL_DMA_Abort_IT+0x3b8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d036      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a65      	ldr	r2, [pc, #404]	; (8005c88 <HAL_DMA_Abort_IT+0x3bc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d031      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a63      	ldr	r2, [pc, #396]	; (8005c8c <HAL_DMA_Abort_IT+0x3c0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d02c      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a62      	ldr	r2, [pc, #392]	; (8005c90 <HAL_DMA_Abort_IT+0x3c4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d027      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a60      	ldr	r2, [pc, #384]	; (8005c94 <HAL_DMA_Abort_IT+0x3c8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d022      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a5f      	ldr	r2, [pc, #380]	; (8005c98 <HAL_DMA_Abort_IT+0x3cc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d01d      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a5d      	ldr	r2, [pc, #372]	; (8005c9c <HAL_DMA_Abort_IT+0x3d0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d018      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a5c      	ldr	r2, [pc, #368]	; (8005ca0 <HAL_DMA_Abort_IT+0x3d4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d013      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a5a      	ldr	r2, [pc, #360]	; (8005ca4 <HAL_DMA_Abort_IT+0x3d8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00e      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a59      	ldr	r2, [pc, #356]	; (8005ca8 <HAL_DMA_Abort_IT+0x3dc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d009      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a57      	ldr	r2, [pc, #348]	; (8005cac <HAL_DMA_Abort_IT+0x3e0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d004      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x290>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a56      	ldr	r2, [pc, #344]	; (8005cb0 <HAL_DMA_Abort_IT+0x3e4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d108      	bne.n	8005b6e <HAL_DMA_Abort_IT+0x2a2>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0201 	bic.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	e007      	b.n	8005b7e <HAL_DMA_Abort_IT+0x2b2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0201 	bic.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a3c      	ldr	r2, [pc, #240]	; (8005c74 <HAL_DMA_Abort_IT+0x3a8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d072      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a3a      	ldr	r2, [pc, #232]	; (8005c78 <HAL_DMA_Abort_IT+0x3ac>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d06d      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a39      	ldr	r2, [pc, #228]	; (8005c7c <HAL_DMA_Abort_IT+0x3b0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d068      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a37      	ldr	r2, [pc, #220]	; (8005c80 <HAL_DMA_Abort_IT+0x3b4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d063      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a36      	ldr	r2, [pc, #216]	; (8005c84 <HAL_DMA_Abort_IT+0x3b8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d05e      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a34      	ldr	r2, [pc, #208]	; (8005c88 <HAL_DMA_Abort_IT+0x3bc>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d059      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a33      	ldr	r2, [pc, #204]	; (8005c8c <HAL_DMA_Abort_IT+0x3c0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d054      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a31      	ldr	r2, [pc, #196]	; (8005c90 <HAL_DMA_Abort_IT+0x3c4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d04f      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a30      	ldr	r2, [pc, #192]	; (8005c94 <HAL_DMA_Abort_IT+0x3c8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d04a      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a2e      	ldr	r2, [pc, #184]	; (8005c98 <HAL_DMA_Abort_IT+0x3cc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d045      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a2d      	ldr	r2, [pc, #180]	; (8005c9c <HAL_DMA_Abort_IT+0x3d0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d040      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a2b      	ldr	r2, [pc, #172]	; (8005ca0 <HAL_DMA_Abort_IT+0x3d4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d03b      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a2a      	ldr	r2, [pc, #168]	; (8005ca4 <HAL_DMA_Abort_IT+0x3d8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d036      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a28      	ldr	r2, [pc, #160]	; (8005ca8 <HAL_DMA_Abort_IT+0x3dc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d031      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a27      	ldr	r2, [pc, #156]	; (8005cac <HAL_DMA_Abort_IT+0x3e0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d02c      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a25      	ldr	r2, [pc, #148]	; (8005cb0 <HAL_DMA_Abort_IT+0x3e4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d027      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a24      	ldr	r2, [pc, #144]	; (8005cb4 <HAL_DMA_Abort_IT+0x3e8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d022      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a22      	ldr	r2, [pc, #136]	; (8005cb8 <HAL_DMA_Abort_IT+0x3ec>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01d      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a21      	ldr	r2, [pc, #132]	; (8005cbc <HAL_DMA_Abort_IT+0x3f0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d018      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1f      	ldr	r2, [pc, #124]	; (8005cc0 <HAL_DMA_Abort_IT+0x3f4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <HAL_DMA_Abort_IT+0x3f8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00e      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a1c      	ldr	r2, [pc, #112]	; (8005cc8 <HAL_DMA_Abort_IT+0x3fc>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1b      	ldr	r2, [pc, #108]	; (8005ccc <HAL_DMA_Abort_IT+0x400>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d004      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x3a2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a19      	ldr	r2, [pc, #100]	; (8005cd0 <HAL_DMA_Abort_IT+0x404>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d132      	bne.n	8005cd4 <HAL_DMA_Abort_IT+0x408>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e031      	b.n	8005cd6 <HAL_DMA_Abort_IT+0x40a>
 8005c72:	bf00      	nop
 8005c74:	40020010 	.word	0x40020010
 8005c78:	40020028 	.word	0x40020028
 8005c7c:	40020040 	.word	0x40020040
 8005c80:	40020058 	.word	0x40020058
 8005c84:	40020070 	.word	0x40020070
 8005c88:	40020088 	.word	0x40020088
 8005c8c:	400200a0 	.word	0x400200a0
 8005c90:	400200b8 	.word	0x400200b8
 8005c94:	40020410 	.word	0x40020410
 8005c98:	40020428 	.word	0x40020428
 8005c9c:	40020440 	.word	0x40020440
 8005ca0:	40020458 	.word	0x40020458
 8005ca4:	40020470 	.word	0x40020470
 8005ca8:	40020488 	.word	0x40020488
 8005cac:	400204a0 	.word	0x400204a0
 8005cb0:	400204b8 	.word	0x400204b8
 8005cb4:	58025408 	.word	0x58025408
 8005cb8:	5802541c 	.word	0x5802541c
 8005cbc:	58025430 	.word	0x58025430
 8005cc0:	58025444 	.word	0x58025444
 8005cc4:	58025458 	.word	0x58025458
 8005cc8:	5802546c 	.word	0x5802546c
 8005ccc:	58025480 	.word	0x58025480
 8005cd0:	58025494 	.word	0x58025494
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d028      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ce8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf4:	f003 031f 	and.w	r3, r3, #31
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d08:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00c      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d20:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d2a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop

08005d58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08a      	sub	sp, #40	; 0x28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d64:	4b67      	ldr	r3, [pc, #412]	; (8005f04 <HAL_DMA_IRQHandler+0x1ac>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a67      	ldr	r2, [pc, #412]	; (8005f08 <HAL_DMA_IRQHandler+0x1b0>)
 8005d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6e:	0a9b      	lsrs	r3, r3, #10
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d76:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a5f      	ldr	r2, [pc, #380]	; (8005f0c <HAL_DMA_IRQHandler+0x1b4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d04a      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a5d      	ldr	r2, [pc, #372]	; (8005f10 <HAL_DMA_IRQHandler+0x1b8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d045      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a5c      	ldr	r2, [pc, #368]	; (8005f14 <HAL_DMA_IRQHandler+0x1bc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d040      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a5a      	ldr	r2, [pc, #360]	; (8005f18 <HAL_DMA_IRQHandler+0x1c0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d03b      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a59      	ldr	r2, [pc, #356]	; (8005f1c <HAL_DMA_IRQHandler+0x1c4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d036      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a57      	ldr	r2, [pc, #348]	; (8005f20 <HAL_DMA_IRQHandler+0x1c8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d031      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a56      	ldr	r2, [pc, #344]	; (8005f24 <HAL_DMA_IRQHandler+0x1cc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d02c      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a54      	ldr	r2, [pc, #336]	; (8005f28 <HAL_DMA_IRQHandler+0x1d0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d027      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a53      	ldr	r2, [pc, #332]	; (8005f2c <HAL_DMA_IRQHandler+0x1d4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d022      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a51      	ldr	r2, [pc, #324]	; (8005f30 <HAL_DMA_IRQHandler+0x1d8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01d      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a50      	ldr	r2, [pc, #320]	; (8005f34 <HAL_DMA_IRQHandler+0x1dc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d018      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a4e      	ldr	r2, [pc, #312]	; (8005f38 <HAL_DMA_IRQHandler+0x1e0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a4d      	ldr	r2, [pc, #308]	; (8005f3c <HAL_DMA_IRQHandler+0x1e4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00e      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a4b      	ldr	r2, [pc, #300]	; (8005f40 <HAL_DMA_IRQHandler+0x1e8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d009      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a4a      	ldr	r2, [pc, #296]	; (8005f44 <HAL_DMA_IRQHandler+0x1ec>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xd2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a48      	ldr	r2, [pc, #288]	; (8005f48 <HAL_DMA_IRQHandler+0x1f0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d101      	bne.n	8005e2e <HAL_DMA_IRQHandler+0xd6>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <HAL_DMA_IRQHandler+0xd8>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 842b 	beq.w	800668c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e3a:	f003 031f 	and.w	r3, r3, #31
 8005e3e:	2208      	movs	r2, #8
 8005e40:	409a      	lsls	r2, r3
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	4013      	ands	r3, r2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 80a2 	beq.w	8005f90 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a2e      	ldr	r2, [pc, #184]	; (8005f0c <HAL_DMA_IRQHandler+0x1b4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d04a      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a2d      	ldr	r2, [pc, #180]	; (8005f10 <HAL_DMA_IRQHandler+0x1b8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d045      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a2b      	ldr	r2, [pc, #172]	; (8005f14 <HAL_DMA_IRQHandler+0x1bc>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d040      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a2a      	ldr	r2, [pc, #168]	; (8005f18 <HAL_DMA_IRQHandler+0x1c0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d03b      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a28      	ldr	r2, [pc, #160]	; (8005f1c <HAL_DMA_IRQHandler+0x1c4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d036      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a27      	ldr	r2, [pc, #156]	; (8005f20 <HAL_DMA_IRQHandler+0x1c8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d031      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a25      	ldr	r2, [pc, #148]	; (8005f24 <HAL_DMA_IRQHandler+0x1cc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d02c      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a24      	ldr	r2, [pc, #144]	; (8005f28 <HAL_DMA_IRQHandler+0x1d0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d027      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a22      	ldr	r2, [pc, #136]	; (8005f2c <HAL_DMA_IRQHandler+0x1d4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d022      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a21      	ldr	r2, [pc, #132]	; (8005f30 <HAL_DMA_IRQHandler+0x1d8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d01d      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a1f      	ldr	r2, [pc, #124]	; (8005f34 <HAL_DMA_IRQHandler+0x1dc>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d018      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a1e      	ldr	r2, [pc, #120]	; (8005f38 <HAL_DMA_IRQHandler+0x1e0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d013      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a1c      	ldr	r2, [pc, #112]	; (8005f3c <HAL_DMA_IRQHandler+0x1e4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00e      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a1b      	ldr	r2, [pc, #108]	; (8005f40 <HAL_DMA_IRQHandler+0x1e8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d009      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a19      	ldr	r2, [pc, #100]	; (8005f44 <HAL_DMA_IRQHandler+0x1ec>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d004      	beq.n	8005eec <HAL_DMA_IRQHandler+0x194>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a18      	ldr	r2, [pc, #96]	; (8005f48 <HAL_DMA_IRQHandler+0x1f0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d12f      	bne.n	8005f4c <HAL_DMA_IRQHandler+0x1f4>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bf14      	ite	ne
 8005efa:	2301      	movne	r3, #1
 8005efc:	2300      	moveq	r3, #0
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	e02e      	b.n	8005f60 <HAL_DMA_IRQHandler+0x208>
 8005f02:	bf00      	nop
 8005f04:	2400002c 	.word	0x2400002c
 8005f08:	1b4e81b5 	.word	0x1b4e81b5
 8005f0c:	40020010 	.word	0x40020010
 8005f10:	40020028 	.word	0x40020028
 8005f14:	40020040 	.word	0x40020040
 8005f18:	40020058 	.word	0x40020058
 8005f1c:	40020070 	.word	0x40020070
 8005f20:	40020088 	.word	0x40020088
 8005f24:	400200a0 	.word	0x400200a0
 8005f28:	400200b8 	.word	0x400200b8
 8005f2c:	40020410 	.word	0x40020410
 8005f30:	40020428 	.word	0x40020428
 8005f34:	40020440 	.word	0x40020440
 8005f38:	40020458 	.word	0x40020458
 8005f3c:	40020470 	.word	0x40020470
 8005f40:	40020488 	.word	0x40020488
 8005f44:	400204a0 	.word	0x400204a0
 8005f48:	400204b8 	.word	0x400204b8
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bf14      	ite	ne
 8005f5a:	2301      	movne	r3, #1
 8005f5c:	2300      	moveq	r3, #0
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d015      	beq.n	8005f90 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0204 	bic.w	r2, r2, #4
 8005f72:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f78:	f003 031f 	and.w	r3, r3, #31
 8005f7c:	2208      	movs	r2, #8
 8005f7e:	409a      	lsls	r2, r3
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f88:	f043 0201 	orr.w	r2, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f94:	f003 031f 	and.w	r3, r3, #31
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d06e      	beq.n	8006084 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a69      	ldr	r2, [pc, #420]	; (8006150 <HAL_DMA_IRQHandler+0x3f8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d04a      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a67      	ldr	r2, [pc, #412]	; (8006154 <HAL_DMA_IRQHandler+0x3fc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d045      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a66      	ldr	r2, [pc, #408]	; (8006158 <HAL_DMA_IRQHandler+0x400>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d040      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a64      	ldr	r2, [pc, #400]	; (800615c <HAL_DMA_IRQHandler+0x404>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d03b      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a63      	ldr	r2, [pc, #396]	; (8006160 <HAL_DMA_IRQHandler+0x408>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d036      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a61      	ldr	r2, [pc, #388]	; (8006164 <HAL_DMA_IRQHandler+0x40c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d031      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a60      	ldr	r2, [pc, #384]	; (8006168 <HAL_DMA_IRQHandler+0x410>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d02c      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a5e      	ldr	r2, [pc, #376]	; (800616c <HAL_DMA_IRQHandler+0x414>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d027      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a5d      	ldr	r2, [pc, #372]	; (8006170 <HAL_DMA_IRQHandler+0x418>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d022      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a5b      	ldr	r2, [pc, #364]	; (8006174 <HAL_DMA_IRQHandler+0x41c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d01d      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a5a      	ldr	r2, [pc, #360]	; (8006178 <HAL_DMA_IRQHandler+0x420>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d018      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a58      	ldr	r2, [pc, #352]	; (800617c <HAL_DMA_IRQHandler+0x424>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a57      	ldr	r2, [pc, #348]	; (8006180 <HAL_DMA_IRQHandler+0x428>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00e      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a55      	ldr	r2, [pc, #340]	; (8006184 <HAL_DMA_IRQHandler+0x42c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d009      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a54      	ldr	r2, [pc, #336]	; (8006188 <HAL_DMA_IRQHandler+0x430>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d004      	beq.n	8006046 <HAL_DMA_IRQHandler+0x2ee>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a52      	ldr	r2, [pc, #328]	; (800618c <HAL_DMA_IRQHandler+0x434>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d10a      	bne.n	800605c <HAL_DMA_IRQHandler+0x304>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006050:	2b00      	cmp	r3, #0
 8006052:	bf14      	ite	ne
 8006054:	2301      	movne	r3, #1
 8006056:	2300      	moveq	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	e003      	b.n	8006064 <HAL_DMA_IRQHandler+0x30c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2300      	movs	r3, #0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00d      	beq.n	8006084 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	2201      	movs	r2, #1
 8006072:	409a      	lsls	r2, r3
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607c:	f043 0202 	orr.w	r2, r3, #2
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006088:	f003 031f 	and.w	r3, r3, #31
 800608c:	2204      	movs	r2, #4
 800608e:	409a      	lsls	r2, r3
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	4013      	ands	r3, r2
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 808f 	beq.w	80061b8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a2c      	ldr	r2, [pc, #176]	; (8006150 <HAL_DMA_IRQHandler+0x3f8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d04a      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a2a      	ldr	r2, [pc, #168]	; (8006154 <HAL_DMA_IRQHandler+0x3fc>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d045      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a29      	ldr	r2, [pc, #164]	; (8006158 <HAL_DMA_IRQHandler+0x400>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d040      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a27      	ldr	r2, [pc, #156]	; (800615c <HAL_DMA_IRQHandler+0x404>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d03b      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a26      	ldr	r2, [pc, #152]	; (8006160 <HAL_DMA_IRQHandler+0x408>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d036      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a24      	ldr	r2, [pc, #144]	; (8006164 <HAL_DMA_IRQHandler+0x40c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d031      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a23      	ldr	r2, [pc, #140]	; (8006168 <HAL_DMA_IRQHandler+0x410>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d02c      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a21      	ldr	r2, [pc, #132]	; (800616c <HAL_DMA_IRQHandler+0x414>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d027      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a20      	ldr	r2, [pc, #128]	; (8006170 <HAL_DMA_IRQHandler+0x418>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d022      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a1e      	ldr	r2, [pc, #120]	; (8006174 <HAL_DMA_IRQHandler+0x41c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d01d      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1d      	ldr	r2, [pc, #116]	; (8006178 <HAL_DMA_IRQHandler+0x420>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d018      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1b      	ldr	r2, [pc, #108]	; (800617c <HAL_DMA_IRQHandler+0x424>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d013      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1a      	ldr	r2, [pc, #104]	; (8006180 <HAL_DMA_IRQHandler+0x428>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00e      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a18      	ldr	r2, [pc, #96]	; (8006184 <HAL_DMA_IRQHandler+0x42c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d009      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a17      	ldr	r2, [pc, #92]	; (8006188 <HAL_DMA_IRQHandler+0x430>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d004      	beq.n	800613a <HAL_DMA_IRQHandler+0x3e2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a15      	ldr	r2, [pc, #84]	; (800618c <HAL_DMA_IRQHandler+0x434>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d12a      	bne.n	8006190 <HAL_DMA_IRQHandler+0x438>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	bf14      	ite	ne
 8006148:	2301      	movne	r3, #1
 800614a:	2300      	moveq	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	e023      	b.n	8006198 <HAL_DMA_IRQHandler+0x440>
 8006150:	40020010 	.word	0x40020010
 8006154:	40020028 	.word	0x40020028
 8006158:	40020040 	.word	0x40020040
 800615c:	40020058 	.word	0x40020058
 8006160:	40020070 	.word	0x40020070
 8006164:	40020088 	.word	0x40020088
 8006168:	400200a0 	.word	0x400200a0
 800616c:	400200b8 	.word	0x400200b8
 8006170:	40020410 	.word	0x40020410
 8006174:	40020428 	.word	0x40020428
 8006178:	40020440 	.word	0x40020440
 800617c:	40020458 	.word	0x40020458
 8006180:	40020470 	.word	0x40020470
 8006184:	40020488 	.word	0x40020488
 8006188:	400204a0 	.word	0x400204a0
 800618c:	400204b8 	.word	0x400204b8
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2300      	movs	r3, #0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00d      	beq.n	80061b8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a0:	f003 031f 	and.w	r3, r3, #31
 80061a4:	2204      	movs	r2, #4
 80061a6:	409a      	lsls	r2, r3
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	f043 0204 	orr.w	r2, r3, #4
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	2210      	movs	r2, #16
 80061c2:	409a      	lsls	r2, r3
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	4013      	ands	r3, r2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 80a6 	beq.w	800631a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a85      	ldr	r2, [pc, #532]	; (80063e8 <HAL_DMA_IRQHandler+0x690>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d04a      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a83      	ldr	r2, [pc, #524]	; (80063ec <HAL_DMA_IRQHandler+0x694>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d045      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a82      	ldr	r2, [pc, #520]	; (80063f0 <HAL_DMA_IRQHandler+0x698>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d040      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a80      	ldr	r2, [pc, #512]	; (80063f4 <HAL_DMA_IRQHandler+0x69c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d03b      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a7f      	ldr	r2, [pc, #508]	; (80063f8 <HAL_DMA_IRQHandler+0x6a0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d036      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a7d      	ldr	r2, [pc, #500]	; (80063fc <HAL_DMA_IRQHandler+0x6a4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d031      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a7c      	ldr	r2, [pc, #496]	; (8006400 <HAL_DMA_IRQHandler+0x6a8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d02c      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a7a      	ldr	r2, [pc, #488]	; (8006404 <HAL_DMA_IRQHandler+0x6ac>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d027      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a79      	ldr	r2, [pc, #484]	; (8006408 <HAL_DMA_IRQHandler+0x6b0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d022      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a77      	ldr	r2, [pc, #476]	; (800640c <HAL_DMA_IRQHandler+0x6b4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d01d      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a76      	ldr	r2, [pc, #472]	; (8006410 <HAL_DMA_IRQHandler+0x6b8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d018      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a74      	ldr	r2, [pc, #464]	; (8006414 <HAL_DMA_IRQHandler+0x6bc>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d013      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a73      	ldr	r2, [pc, #460]	; (8006418 <HAL_DMA_IRQHandler+0x6c0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00e      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a71      	ldr	r2, [pc, #452]	; (800641c <HAL_DMA_IRQHandler+0x6c4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d009      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a70      	ldr	r2, [pc, #448]	; (8006420 <HAL_DMA_IRQHandler+0x6c8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d004      	beq.n	800626e <HAL_DMA_IRQHandler+0x516>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a6e      	ldr	r2, [pc, #440]	; (8006424 <HAL_DMA_IRQHandler+0x6cc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10a      	bne.n	8006284 <HAL_DMA_IRQHandler+0x52c>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b00      	cmp	r3, #0
 800627a:	bf14      	ite	ne
 800627c:	2301      	movne	r3, #1
 800627e:	2300      	moveq	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	e009      	b.n	8006298 <HAL_DMA_IRQHandler+0x540>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	bf14      	ite	ne
 8006292:	2301      	movne	r3, #1
 8006294:	2300      	moveq	r3, #0
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d03e      	beq.n	800631a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	2210      	movs	r2, #16
 80062a6:	409a      	lsls	r2, r3
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d018      	beq.n	80062ec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d108      	bne.n	80062da <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d024      	beq.n	800631a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	4798      	blx	r3
 80062d8:	e01f      	b.n	800631a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d01b      	beq.n	800631a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	4798      	blx	r3
 80062ea:	e016      	b.n	800631a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d107      	bne.n	800630a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0208 	bic.w	r2, r2, #8
 8006308:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	2220      	movs	r2, #32
 8006324:	409a      	lsls	r2, r3
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	4013      	ands	r3, r2
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 8110 	beq.w	8006550 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a2c      	ldr	r2, [pc, #176]	; (80063e8 <HAL_DMA_IRQHandler+0x690>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d04a      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a2b      	ldr	r2, [pc, #172]	; (80063ec <HAL_DMA_IRQHandler+0x694>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d045      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a29      	ldr	r2, [pc, #164]	; (80063f0 <HAL_DMA_IRQHandler+0x698>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d040      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a28      	ldr	r2, [pc, #160]	; (80063f4 <HAL_DMA_IRQHandler+0x69c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d03b      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a26      	ldr	r2, [pc, #152]	; (80063f8 <HAL_DMA_IRQHandler+0x6a0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d036      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a25      	ldr	r2, [pc, #148]	; (80063fc <HAL_DMA_IRQHandler+0x6a4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d031      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a23      	ldr	r2, [pc, #140]	; (8006400 <HAL_DMA_IRQHandler+0x6a8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d02c      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a22      	ldr	r2, [pc, #136]	; (8006404 <HAL_DMA_IRQHandler+0x6ac>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d027      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a20      	ldr	r2, [pc, #128]	; (8006408 <HAL_DMA_IRQHandler+0x6b0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d022      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1f      	ldr	r2, [pc, #124]	; (800640c <HAL_DMA_IRQHandler+0x6b4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d01d      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a1d      	ldr	r2, [pc, #116]	; (8006410 <HAL_DMA_IRQHandler+0x6b8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d018      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a1c      	ldr	r2, [pc, #112]	; (8006414 <HAL_DMA_IRQHandler+0x6bc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d013      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1a      	ldr	r2, [pc, #104]	; (8006418 <HAL_DMA_IRQHandler+0x6c0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00e      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a19      	ldr	r2, [pc, #100]	; (800641c <HAL_DMA_IRQHandler+0x6c4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d009      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a17      	ldr	r2, [pc, #92]	; (8006420 <HAL_DMA_IRQHandler+0x6c8>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d004      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x678>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a16      	ldr	r2, [pc, #88]	; (8006424 <HAL_DMA_IRQHandler+0x6cc>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d12b      	bne.n	8006428 <HAL_DMA_IRQHandler+0x6d0>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0310 	and.w	r3, r3, #16
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bf14      	ite	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	2300      	moveq	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	e02a      	b.n	800643c <HAL_DMA_IRQHandler+0x6e4>
 80063e6:	bf00      	nop
 80063e8:	40020010 	.word	0x40020010
 80063ec:	40020028 	.word	0x40020028
 80063f0:	40020040 	.word	0x40020040
 80063f4:	40020058 	.word	0x40020058
 80063f8:	40020070 	.word	0x40020070
 80063fc:	40020088 	.word	0x40020088
 8006400:	400200a0 	.word	0x400200a0
 8006404:	400200b8 	.word	0x400200b8
 8006408:	40020410 	.word	0x40020410
 800640c:	40020428 	.word	0x40020428
 8006410:	40020440 	.word	0x40020440
 8006414:	40020458 	.word	0x40020458
 8006418:	40020470 	.word	0x40020470
 800641c:	40020488 	.word	0x40020488
 8006420:	400204a0 	.word	0x400204a0
 8006424:	400204b8 	.word	0x400204b8
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	bf14      	ite	ne
 8006436:	2301      	movne	r3, #1
 8006438:	2300      	moveq	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8087 	beq.w	8006550 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	2220      	movs	r2, #32
 800644c:	409a      	lsls	r2, r3
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b04      	cmp	r3, #4
 800645c:	d139      	bne.n	80064d2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0216 	bic.w	r2, r2, #22
 800646c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695a      	ldr	r2, [r3, #20]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800647c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <HAL_DMA_IRQHandler+0x736>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0208 	bic.w	r2, r2, #8
 800649c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	223f      	movs	r2, #63	; 0x3f
 80064a8:	409a      	lsls	r2, r3
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 834a 	beq.w	8006b5c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	4798      	blx	r3
          }
          return;
 80064d0:	e344      	b.n	8006b5c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d018      	beq.n	8006512 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d108      	bne.n	8006500 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d02c      	beq.n	8006550 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
 80064fe:	e027      	b.n	8006550 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006504:	2b00      	cmp	r3, #0
 8006506:	d023      	beq.n	8006550 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	4798      	blx	r3
 8006510:	e01e      	b.n	8006550 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10f      	bne.n	8006540 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0210 	bic.w	r2, r2, #16
 800652e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8306 	beq.w	8006b66 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8088 	beq.w	8006678 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2204      	movs	r2, #4
 800656c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a7a      	ldr	r2, [pc, #488]	; (8006760 <HAL_DMA_IRQHandler+0xa08>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d04a      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a79      	ldr	r2, [pc, #484]	; (8006764 <HAL_DMA_IRQHandler+0xa0c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d045      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a77      	ldr	r2, [pc, #476]	; (8006768 <HAL_DMA_IRQHandler+0xa10>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d040      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a76      	ldr	r2, [pc, #472]	; (800676c <HAL_DMA_IRQHandler+0xa14>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d03b      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a74      	ldr	r2, [pc, #464]	; (8006770 <HAL_DMA_IRQHandler+0xa18>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d036      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a73      	ldr	r2, [pc, #460]	; (8006774 <HAL_DMA_IRQHandler+0xa1c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d031      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a71      	ldr	r2, [pc, #452]	; (8006778 <HAL_DMA_IRQHandler+0xa20>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d02c      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a70      	ldr	r2, [pc, #448]	; (800677c <HAL_DMA_IRQHandler+0xa24>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d027      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a6e      	ldr	r2, [pc, #440]	; (8006780 <HAL_DMA_IRQHandler+0xa28>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d022      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a6d      	ldr	r2, [pc, #436]	; (8006784 <HAL_DMA_IRQHandler+0xa2c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d01d      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a6b      	ldr	r2, [pc, #428]	; (8006788 <HAL_DMA_IRQHandler+0xa30>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d018      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a6a      	ldr	r2, [pc, #424]	; (800678c <HAL_DMA_IRQHandler+0xa34>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d013      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a68      	ldr	r2, [pc, #416]	; (8006790 <HAL_DMA_IRQHandler+0xa38>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00e      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a67      	ldr	r2, [pc, #412]	; (8006794 <HAL_DMA_IRQHandler+0xa3c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d009      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a65      	ldr	r2, [pc, #404]	; (8006798 <HAL_DMA_IRQHandler+0xa40>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <HAL_DMA_IRQHandler+0x8b8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a64      	ldr	r2, [pc, #400]	; (800679c <HAL_DMA_IRQHandler+0xa44>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d108      	bne.n	8006622 <HAL_DMA_IRQHandler+0x8ca>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0201 	bic.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	e007      	b.n	8006632 <HAL_DMA_IRQHandler+0x8da>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0201 	bic.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3301      	adds	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663a:	429a      	cmp	r2, r3
 800663c:	d307      	bcc.n	800664e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1f2      	bne.n	8006632 <HAL_DMA_IRQHandler+0x8da>
 800664c:	e000      	b.n	8006650 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800664e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2203      	movs	r2, #3
 8006662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006666:	e003      	b.n	8006670 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 8272 	beq.w	8006b66 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	4798      	blx	r3
 800668a:	e26c      	b.n	8006b66 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a43      	ldr	r2, [pc, #268]	; (80067a0 <HAL_DMA_IRQHandler+0xa48>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d022      	beq.n	80066dc <HAL_DMA_IRQHandler+0x984>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a42      	ldr	r2, [pc, #264]	; (80067a4 <HAL_DMA_IRQHandler+0xa4c>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d01d      	beq.n	80066dc <HAL_DMA_IRQHandler+0x984>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a40      	ldr	r2, [pc, #256]	; (80067a8 <HAL_DMA_IRQHandler+0xa50>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d018      	beq.n	80066dc <HAL_DMA_IRQHandler+0x984>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a3f      	ldr	r2, [pc, #252]	; (80067ac <HAL_DMA_IRQHandler+0xa54>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d013      	beq.n	80066dc <HAL_DMA_IRQHandler+0x984>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a3d      	ldr	r2, [pc, #244]	; (80067b0 <HAL_DMA_IRQHandler+0xa58>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00e      	beq.n	80066dc <HAL_DMA_IRQHandler+0x984>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a3c      	ldr	r2, [pc, #240]	; (80067b4 <HAL_DMA_IRQHandler+0xa5c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d009      	beq.n	80066dc <HAL_DMA_IRQHandler+0x984>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a3a      	ldr	r2, [pc, #232]	; (80067b8 <HAL_DMA_IRQHandler+0xa60>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d004      	beq.n	80066dc <HAL_DMA_IRQHandler+0x984>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a39      	ldr	r2, [pc, #228]	; (80067bc <HAL_DMA_IRQHandler+0xa64>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d101      	bne.n	80066e0 <HAL_DMA_IRQHandler+0x988>
 80066dc:	2301      	movs	r3, #1
 80066de:	e000      	b.n	80066e2 <HAL_DMA_IRQHandler+0x98a>
 80066e0:	2300      	movs	r3, #0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 823f 	beq.w	8006b66 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f4:	f003 031f 	and.w	r3, r3, #31
 80066f8:	2204      	movs	r2, #4
 80066fa:	409a      	lsls	r2, r3
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	4013      	ands	r3, r2
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 80cd 	beq.w	80068a0 <HAL_DMA_IRQHandler+0xb48>
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80c7 	beq.w	80068a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	2204      	movs	r2, #4
 800671c:	409a      	lsls	r2, r3
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d049      	beq.n	80067c0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d109      	bne.n	800674a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8210 	beq.w	8006b60 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006748:	e20a      	b.n	8006b60 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8206 	beq.w	8006b60 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800675c:	e200      	b.n	8006b60 <HAL_DMA_IRQHandler+0xe08>
 800675e:	bf00      	nop
 8006760:	40020010 	.word	0x40020010
 8006764:	40020028 	.word	0x40020028
 8006768:	40020040 	.word	0x40020040
 800676c:	40020058 	.word	0x40020058
 8006770:	40020070 	.word	0x40020070
 8006774:	40020088 	.word	0x40020088
 8006778:	400200a0 	.word	0x400200a0
 800677c:	400200b8 	.word	0x400200b8
 8006780:	40020410 	.word	0x40020410
 8006784:	40020428 	.word	0x40020428
 8006788:	40020440 	.word	0x40020440
 800678c:	40020458 	.word	0x40020458
 8006790:	40020470 	.word	0x40020470
 8006794:	40020488 	.word	0x40020488
 8006798:	400204a0 	.word	0x400204a0
 800679c:	400204b8 	.word	0x400204b8
 80067a0:	58025408 	.word	0x58025408
 80067a4:	5802541c 	.word	0x5802541c
 80067a8:	58025430 	.word	0x58025430
 80067ac:	58025444 	.word	0x58025444
 80067b0:	58025458 	.word	0x58025458
 80067b4:	5802546c 	.word	0x5802546c
 80067b8:	58025480 	.word	0x58025480
 80067bc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d160      	bne.n	800688c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a7f      	ldr	r2, [pc, #508]	; (80069cc <HAL_DMA_IRQHandler+0xc74>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d04a      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a7d      	ldr	r2, [pc, #500]	; (80069d0 <HAL_DMA_IRQHandler+0xc78>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d045      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a7c      	ldr	r2, [pc, #496]	; (80069d4 <HAL_DMA_IRQHandler+0xc7c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d040      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a7a      	ldr	r2, [pc, #488]	; (80069d8 <HAL_DMA_IRQHandler+0xc80>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d03b      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a79      	ldr	r2, [pc, #484]	; (80069dc <HAL_DMA_IRQHandler+0xc84>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d036      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a77      	ldr	r2, [pc, #476]	; (80069e0 <HAL_DMA_IRQHandler+0xc88>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d031      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a76      	ldr	r2, [pc, #472]	; (80069e4 <HAL_DMA_IRQHandler+0xc8c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d02c      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a74      	ldr	r2, [pc, #464]	; (80069e8 <HAL_DMA_IRQHandler+0xc90>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d027      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a73      	ldr	r2, [pc, #460]	; (80069ec <HAL_DMA_IRQHandler+0xc94>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d022      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a71      	ldr	r2, [pc, #452]	; (80069f0 <HAL_DMA_IRQHandler+0xc98>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d01d      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a70      	ldr	r2, [pc, #448]	; (80069f4 <HAL_DMA_IRQHandler+0xc9c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d018      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a6e      	ldr	r2, [pc, #440]	; (80069f8 <HAL_DMA_IRQHandler+0xca0>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a6d      	ldr	r2, [pc, #436]	; (80069fc <HAL_DMA_IRQHandler+0xca4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00e      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a6b      	ldr	r2, [pc, #428]	; (8006a00 <HAL_DMA_IRQHandler+0xca8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d009      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a6a      	ldr	r2, [pc, #424]	; (8006a04 <HAL_DMA_IRQHandler+0xcac>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <HAL_DMA_IRQHandler+0xb12>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a68      	ldr	r2, [pc, #416]	; (8006a08 <HAL_DMA_IRQHandler+0xcb0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d108      	bne.n	800687c <HAL_DMA_IRQHandler+0xb24>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0208 	bic.w	r2, r2, #8
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	e007      	b.n	800688c <HAL_DMA_IRQHandler+0xb34>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0204 	bic.w	r2, r2, #4
 800688a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 8165 	beq.w	8006b60 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800689e:	e15f      	b.n	8006b60 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a4:	f003 031f 	and.w	r3, r3, #31
 80068a8:	2202      	movs	r2, #2
 80068aa:	409a      	lsls	r2, r3
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	4013      	ands	r3, r2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 80c5 	beq.w	8006a40 <HAL_DMA_IRQHandler+0xce8>
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 80bf 	beq.w	8006a40 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c6:	f003 031f 	and.w	r3, r3, #31
 80068ca:	2202      	movs	r2, #2
 80068cc:	409a      	lsls	r2, r3
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d018      	beq.n	800690e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 813a 	beq.w	8006b64 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068f8:	e134      	b.n	8006b64 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 8130 	beq.w	8006b64 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800690c:	e12a      	b.n	8006b64 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f003 0320 	and.w	r3, r3, #32
 8006914:	2b00      	cmp	r3, #0
 8006916:	f040 8089 	bne.w	8006a2c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a2b      	ldr	r2, [pc, #172]	; (80069cc <HAL_DMA_IRQHandler+0xc74>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d04a      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a29      	ldr	r2, [pc, #164]	; (80069d0 <HAL_DMA_IRQHandler+0xc78>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d045      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a28      	ldr	r2, [pc, #160]	; (80069d4 <HAL_DMA_IRQHandler+0xc7c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d040      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a26      	ldr	r2, [pc, #152]	; (80069d8 <HAL_DMA_IRQHandler+0xc80>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d03b      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a25      	ldr	r2, [pc, #148]	; (80069dc <HAL_DMA_IRQHandler+0xc84>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d036      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a23      	ldr	r2, [pc, #140]	; (80069e0 <HAL_DMA_IRQHandler+0xc88>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d031      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a22      	ldr	r2, [pc, #136]	; (80069e4 <HAL_DMA_IRQHandler+0xc8c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d02c      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a20      	ldr	r2, [pc, #128]	; (80069e8 <HAL_DMA_IRQHandler+0xc90>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d027      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a1f      	ldr	r2, [pc, #124]	; (80069ec <HAL_DMA_IRQHandler+0xc94>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d022      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1d      	ldr	r2, [pc, #116]	; (80069f0 <HAL_DMA_IRQHandler+0xc98>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d01d      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a1c      	ldr	r2, [pc, #112]	; (80069f4 <HAL_DMA_IRQHandler+0xc9c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d018      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1a      	ldr	r2, [pc, #104]	; (80069f8 <HAL_DMA_IRQHandler+0xca0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d013      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a19      	ldr	r2, [pc, #100]	; (80069fc <HAL_DMA_IRQHandler+0xca4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00e      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a17      	ldr	r2, [pc, #92]	; (8006a00 <HAL_DMA_IRQHandler+0xca8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d009      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a16      	ldr	r2, [pc, #88]	; (8006a04 <HAL_DMA_IRQHandler+0xcac>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d004      	beq.n	80069ba <HAL_DMA_IRQHandler+0xc62>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a14      	ldr	r2, [pc, #80]	; (8006a08 <HAL_DMA_IRQHandler+0xcb0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d128      	bne.n	8006a0c <HAL_DMA_IRQHandler+0xcb4>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0214 	bic.w	r2, r2, #20
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	e027      	b.n	8006a1c <HAL_DMA_IRQHandler+0xcc4>
 80069cc:	40020010 	.word	0x40020010
 80069d0:	40020028 	.word	0x40020028
 80069d4:	40020040 	.word	0x40020040
 80069d8:	40020058 	.word	0x40020058
 80069dc:	40020070 	.word	0x40020070
 80069e0:	40020088 	.word	0x40020088
 80069e4:	400200a0 	.word	0x400200a0
 80069e8:	400200b8 	.word	0x400200b8
 80069ec:	40020410 	.word	0x40020410
 80069f0:	40020428 	.word	0x40020428
 80069f4:	40020440 	.word	0x40020440
 80069f8:	40020458 	.word	0x40020458
 80069fc:	40020470 	.word	0x40020470
 8006a00:	40020488 	.word	0x40020488
 8006a04:	400204a0 	.word	0x400204a0
 8006a08:	400204b8 	.word	0x400204b8
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 020a 	bic.w	r2, r2, #10
 8006a1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 8097 	beq.w	8006b64 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a3e:	e091      	b.n	8006b64 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a44:	f003 031f 	and.w	r3, r3, #31
 8006a48:	2208      	movs	r2, #8
 8006a4a:	409a      	lsls	r2, r3
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8088 	beq.w	8006b66 <HAL_DMA_IRQHandler+0xe0e>
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8082 	beq.w	8006b66 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a41      	ldr	r2, [pc, #260]	; (8006b6c <HAL_DMA_IRQHandler+0xe14>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d04a      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a3f      	ldr	r2, [pc, #252]	; (8006b70 <HAL_DMA_IRQHandler+0xe18>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d045      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a3e      	ldr	r2, [pc, #248]	; (8006b74 <HAL_DMA_IRQHandler+0xe1c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d040      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a3c      	ldr	r2, [pc, #240]	; (8006b78 <HAL_DMA_IRQHandler+0xe20>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d03b      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a3b      	ldr	r2, [pc, #236]	; (8006b7c <HAL_DMA_IRQHandler+0xe24>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d036      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a39      	ldr	r2, [pc, #228]	; (8006b80 <HAL_DMA_IRQHandler+0xe28>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d031      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a38      	ldr	r2, [pc, #224]	; (8006b84 <HAL_DMA_IRQHandler+0xe2c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d02c      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a36      	ldr	r2, [pc, #216]	; (8006b88 <HAL_DMA_IRQHandler+0xe30>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d027      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a35      	ldr	r2, [pc, #212]	; (8006b8c <HAL_DMA_IRQHandler+0xe34>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d022      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a33      	ldr	r2, [pc, #204]	; (8006b90 <HAL_DMA_IRQHandler+0xe38>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d01d      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a32      	ldr	r2, [pc, #200]	; (8006b94 <HAL_DMA_IRQHandler+0xe3c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d018      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a30      	ldr	r2, [pc, #192]	; (8006b98 <HAL_DMA_IRQHandler+0xe40>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d013      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a2f      	ldr	r2, [pc, #188]	; (8006b9c <HAL_DMA_IRQHandler+0xe44>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00e      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a2d      	ldr	r2, [pc, #180]	; (8006ba0 <HAL_DMA_IRQHandler+0xe48>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d009      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a2c      	ldr	r2, [pc, #176]	; (8006ba4 <HAL_DMA_IRQHandler+0xe4c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d004      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xdaa>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a2a      	ldr	r2, [pc, #168]	; (8006ba8 <HAL_DMA_IRQHandler+0xe50>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d108      	bne.n	8006b14 <HAL_DMA_IRQHandler+0xdbc>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 021c 	bic.w	r2, r2, #28
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	e007      	b.n	8006b24 <HAL_DMA_IRQHandler+0xdcc>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 020e 	bic.w	r2, r2, #14
 8006b22:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b28:	f003 031f 	and.w	r3, r3, #31
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	409a      	lsls	r2, r3
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d009      	beq.n	8006b66 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
 8006b5a:	e004      	b.n	8006b66 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006b5c:	bf00      	nop
 8006b5e:	e002      	b.n	8006b66 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b60:	bf00      	nop
 8006b62:	e000      	b.n	8006b66 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b64:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b66:	3728      	adds	r7, #40	; 0x28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40020010 	.word	0x40020010
 8006b70:	40020028 	.word	0x40020028
 8006b74:	40020040 	.word	0x40020040
 8006b78:	40020058 	.word	0x40020058
 8006b7c:	40020070 	.word	0x40020070
 8006b80:	40020088 	.word	0x40020088
 8006b84:	400200a0 	.word	0x400200a0
 8006b88:	400200b8 	.word	0x400200b8
 8006b8c:	40020410 	.word	0x40020410
 8006b90:	40020428 	.word	0x40020428
 8006b94:	40020440 	.word	0x40020440
 8006b98:	40020458 	.word	0x40020458
 8006b9c:	40020470 	.word	0x40020470
 8006ba0:	40020488 	.word	0x40020488
 8006ba4:	400204a0 	.word	0x400204a0
 8006ba8:	400204b8 	.word	0x400204b8

08006bac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bbe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a7f      	ldr	r2, [pc, #508]	; (8006dc8 <DMA_SetConfig+0x21c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d072      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a7d      	ldr	r2, [pc, #500]	; (8006dcc <DMA_SetConfig+0x220>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d06d      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a7c      	ldr	r2, [pc, #496]	; (8006dd0 <DMA_SetConfig+0x224>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d068      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a7a      	ldr	r2, [pc, #488]	; (8006dd4 <DMA_SetConfig+0x228>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d063      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a79      	ldr	r2, [pc, #484]	; (8006dd8 <DMA_SetConfig+0x22c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d05e      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a77      	ldr	r2, [pc, #476]	; (8006ddc <DMA_SetConfig+0x230>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d059      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a76      	ldr	r2, [pc, #472]	; (8006de0 <DMA_SetConfig+0x234>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d054      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a74      	ldr	r2, [pc, #464]	; (8006de4 <DMA_SetConfig+0x238>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d04f      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a73      	ldr	r2, [pc, #460]	; (8006de8 <DMA_SetConfig+0x23c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d04a      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a71      	ldr	r2, [pc, #452]	; (8006dec <DMA_SetConfig+0x240>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d045      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a70      	ldr	r2, [pc, #448]	; (8006df0 <DMA_SetConfig+0x244>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d040      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a6e      	ldr	r2, [pc, #440]	; (8006df4 <DMA_SetConfig+0x248>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d03b      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a6d      	ldr	r2, [pc, #436]	; (8006df8 <DMA_SetConfig+0x24c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d036      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a6b      	ldr	r2, [pc, #428]	; (8006dfc <DMA_SetConfig+0x250>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d031      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a6a      	ldr	r2, [pc, #424]	; (8006e00 <DMA_SetConfig+0x254>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d02c      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a68      	ldr	r2, [pc, #416]	; (8006e04 <DMA_SetConfig+0x258>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d027      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a67      	ldr	r2, [pc, #412]	; (8006e08 <DMA_SetConfig+0x25c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d022      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a65      	ldr	r2, [pc, #404]	; (8006e0c <DMA_SetConfig+0x260>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d01d      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a64      	ldr	r2, [pc, #400]	; (8006e10 <DMA_SetConfig+0x264>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d018      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a62      	ldr	r2, [pc, #392]	; (8006e14 <DMA_SetConfig+0x268>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d013      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a61      	ldr	r2, [pc, #388]	; (8006e18 <DMA_SetConfig+0x26c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00e      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a5f      	ldr	r2, [pc, #380]	; (8006e1c <DMA_SetConfig+0x270>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d009      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a5e      	ldr	r2, [pc, #376]	; (8006e20 <DMA_SetConfig+0x274>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d004      	beq.n	8006cb6 <DMA_SetConfig+0x10a>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a5c      	ldr	r2, [pc, #368]	; (8006e24 <DMA_SetConfig+0x278>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d101      	bne.n	8006cba <DMA_SetConfig+0x10e>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <DMA_SetConfig+0x110>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00d      	beq.n	8006cdc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006cc8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d004      	beq.n	8006cdc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006cda:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a39      	ldr	r2, [pc, #228]	; (8006dc8 <DMA_SetConfig+0x21c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d04a      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a38      	ldr	r2, [pc, #224]	; (8006dcc <DMA_SetConfig+0x220>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d045      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a36      	ldr	r2, [pc, #216]	; (8006dd0 <DMA_SetConfig+0x224>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d040      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a35      	ldr	r2, [pc, #212]	; (8006dd4 <DMA_SetConfig+0x228>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d03b      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a33      	ldr	r2, [pc, #204]	; (8006dd8 <DMA_SetConfig+0x22c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d036      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a32      	ldr	r2, [pc, #200]	; (8006ddc <DMA_SetConfig+0x230>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d031      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a30      	ldr	r2, [pc, #192]	; (8006de0 <DMA_SetConfig+0x234>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d02c      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a2f      	ldr	r2, [pc, #188]	; (8006de4 <DMA_SetConfig+0x238>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d027      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a2d      	ldr	r2, [pc, #180]	; (8006de8 <DMA_SetConfig+0x23c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d022      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a2c      	ldr	r2, [pc, #176]	; (8006dec <DMA_SetConfig+0x240>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d01d      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a2a      	ldr	r2, [pc, #168]	; (8006df0 <DMA_SetConfig+0x244>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d018      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a29      	ldr	r2, [pc, #164]	; (8006df4 <DMA_SetConfig+0x248>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d013      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a27      	ldr	r2, [pc, #156]	; (8006df8 <DMA_SetConfig+0x24c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00e      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a26      	ldr	r2, [pc, #152]	; (8006dfc <DMA_SetConfig+0x250>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d009      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a24      	ldr	r2, [pc, #144]	; (8006e00 <DMA_SetConfig+0x254>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d004      	beq.n	8006d7c <DMA_SetConfig+0x1d0>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a23      	ldr	r2, [pc, #140]	; (8006e04 <DMA_SetConfig+0x258>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d101      	bne.n	8006d80 <DMA_SetConfig+0x1d4>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e000      	b.n	8006d82 <DMA_SetConfig+0x1d6>
 8006d80:	2300      	movs	r3, #0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d059      	beq.n	8006e3a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8a:	f003 031f 	and.w	r3, r3, #31
 8006d8e:	223f      	movs	r2, #63	; 0x3f
 8006d90:	409a      	lsls	r2, r3
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006da4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	2b40      	cmp	r3, #64	; 0x40
 8006db4:	d138      	bne.n	8006e28 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006dc6:	e086      	b.n	8006ed6 <DMA_SetConfig+0x32a>
 8006dc8:	40020010 	.word	0x40020010
 8006dcc:	40020028 	.word	0x40020028
 8006dd0:	40020040 	.word	0x40020040
 8006dd4:	40020058 	.word	0x40020058
 8006dd8:	40020070 	.word	0x40020070
 8006ddc:	40020088 	.word	0x40020088
 8006de0:	400200a0 	.word	0x400200a0
 8006de4:	400200b8 	.word	0x400200b8
 8006de8:	40020410 	.word	0x40020410
 8006dec:	40020428 	.word	0x40020428
 8006df0:	40020440 	.word	0x40020440
 8006df4:	40020458 	.word	0x40020458
 8006df8:	40020470 	.word	0x40020470
 8006dfc:	40020488 	.word	0x40020488
 8006e00:	400204a0 	.word	0x400204a0
 8006e04:	400204b8 	.word	0x400204b8
 8006e08:	58025408 	.word	0x58025408
 8006e0c:	5802541c 	.word	0x5802541c
 8006e10:	58025430 	.word	0x58025430
 8006e14:	58025444 	.word	0x58025444
 8006e18:	58025458 	.word	0x58025458
 8006e1c:	5802546c 	.word	0x5802546c
 8006e20:	58025480 	.word	0x58025480
 8006e24:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	60da      	str	r2, [r3, #12]
}
 8006e38:	e04d      	b.n	8006ed6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a29      	ldr	r2, [pc, #164]	; (8006ee4 <DMA_SetConfig+0x338>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d022      	beq.n	8006e8a <DMA_SetConfig+0x2de>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a27      	ldr	r2, [pc, #156]	; (8006ee8 <DMA_SetConfig+0x33c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d01d      	beq.n	8006e8a <DMA_SetConfig+0x2de>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a26      	ldr	r2, [pc, #152]	; (8006eec <DMA_SetConfig+0x340>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d018      	beq.n	8006e8a <DMA_SetConfig+0x2de>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a24      	ldr	r2, [pc, #144]	; (8006ef0 <DMA_SetConfig+0x344>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <DMA_SetConfig+0x2de>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a23      	ldr	r2, [pc, #140]	; (8006ef4 <DMA_SetConfig+0x348>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00e      	beq.n	8006e8a <DMA_SetConfig+0x2de>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a21      	ldr	r2, [pc, #132]	; (8006ef8 <DMA_SetConfig+0x34c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d009      	beq.n	8006e8a <DMA_SetConfig+0x2de>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a20      	ldr	r2, [pc, #128]	; (8006efc <DMA_SetConfig+0x350>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d004      	beq.n	8006e8a <DMA_SetConfig+0x2de>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a1e      	ldr	r2, [pc, #120]	; (8006f00 <DMA_SetConfig+0x354>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d101      	bne.n	8006e8e <DMA_SetConfig+0x2e2>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e000      	b.n	8006e90 <DMA_SetConfig+0x2e4>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d020      	beq.n	8006ed6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e98:	f003 031f 	and.w	r3, r3, #31
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	409a      	lsls	r2, r3
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	2b40      	cmp	r3, #64	; 0x40
 8006eb2:	d108      	bne.n	8006ec6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	60da      	str	r2, [r3, #12]
}
 8006ec4:	e007      	b.n	8006ed6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	60da      	str	r2, [r3, #12]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	58025408 	.word	0x58025408
 8006ee8:	5802541c 	.word	0x5802541c
 8006eec:	58025430 	.word	0x58025430
 8006ef0:	58025444 	.word	0x58025444
 8006ef4:	58025458 	.word	0x58025458
 8006ef8:	5802546c 	.word	0x5802546c
 8006efc:	58025480 	.word	0x58025480
 8006f00:	58025494 	.word	0x58025494

08006f04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a42      	ldr	r2, [pc, #264]	; (800701c <DMA_CalcBaseAndBitshift+0x118>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d04a      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a41      	ldr	r2, [pc, #260]	; (8007020 <DMA_CalcBaseAndBitshift+0x11c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d045      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a3f      	ldr	r2, [pc, #252]	; (8007024 <DMA_CalcBaseAndBitshift+0x120>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d040      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a3e      	ldr	r2, [pc, #248]	; (8007028 <DMA_CalcBaseAndBitshift+0x124>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d03b      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a3c      	ldr	r2, [pc, #240]	; (800702c <DMA_CalcBaseAndBitshift+0x128>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d036      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a3b      	ldr	r2, [pc, #236]	; (8007030 <DMA_CalcBaseAndBitshift+0x12c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d031      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a39      	ldr	r2, [pc, #228]	; (8007034 <DMA_CalcBaseAndBitshift+0x130>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d02c      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a38      	ldr	r2, [pc, #224]	; (8007038 <DMA_CalcBaseAndBitshift+0x134>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d027      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a36      	ldr	r2, [pc, #216]	; (800703c <DMA_CalcBaseAndBitshift+0x138>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d022      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a35      	ldr	r2, [pc, #212]	; (8007040 <DMA_CalcBaseAndBitshift+0x13c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d01d      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a33      	ldr	r2, [pc, #204]	; (8007044 <DMA_CalcBaseAndBitshift+0x140>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d018      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a32      	ldr	r2, [pc, #200]	; (8007048 <DMA_CalcBaseAndBitshift+0x144>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d013      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a30      	ldr	r2, [pc, #192]	; (800704c <DMA_CalcBaseAndBitshift+0x148>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00e      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a2f      	ldr	r2, [pc, #188]	; (8007050 <DMA_CalcBaseAndBitshift+0x14c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d009      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a2d      	ldr	r2, [pc, #180]	; (8007054 <DMA_CalcBaseAndBitshift+0x150>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d004      	beq.n	8006fac <DMA_CalcBaseAndBitshift+0xa8>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2c      	ldr	r2, [pc, #176]	; (8007058 <DMA_CalcBaseAndBitshift+0x154>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d101      	bne.n	8006fb0 <DMA_CalcBaseAndBitshift+0xac>
 8006fac:	2301      	movs	r3, #1
 8006fae:	e000      	b.n	8006fb2 <DMA_CalcBaseAndBitshift+0xae>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d024      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	3b10      	subs	r3, #16
 8006fbe:	4a27      	ldr	r2, [pc, #156]	; (800705c <DMA_CalcBaseAndBitshift+0x158>)
 8006fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc4:	091b      	lsrs	r3, r3, #4
 8006fc6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	4a24      	ldr	r2, [pc, #144]	; (8007060 <DMA_CalcBaseAndBitshift+0x15c>)
 8006fd0:	5cd3      	ldrb	r3, [r2, r3]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d908      	bls.n	8006ff0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	4b1f      	ldr	r3, [pc, #124]	; (8007064 <DMA_CalcBaseAndBitshift+0x160>)
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	1d1a      	adds	r2, r3, #4
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	659a      	str	r2, [r3, #88]	; 0x58
 8006fee:	e00d      	b.n	800700c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	4b1b      	ldr	r3, [pc, #108]	; (8007064 <DMA_CalcBaseAndBitshift+0x160>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8006ffe:	e005      	b.n	800700c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	40020010 	.word	0x40020010
 8007020:	40020028 	.word	0x40020028
 8007024:	40020040 	.word	0x40020040
 8007028:	40020058 	.word	0x40020058
 800702c:	40020070 	.word	0x40020070
 8007030:	40020088 	.word	0x40020088
 8007034:	400200a0 	.word	0x400200a0
 8007038:	400200b8 	.word	0x400200b8
 800703c:	40020410 	.word	0x40020410
 8007040:	40020428 	.word	0x40020428
 8007044:	40020440 	.word	0x40020440
 8007048:	40020458 	.word	0x40020458
 800704c:	40020470 	.word	0x40020470
 8007050:	40020488 	.word	0x40020488
 8007054:	400204a0 	.word	0x400204a0
 8007058:	400204b8 	.word	0x400204b8
 800705c:	aaaaaaab 	.word	0xaaaaaaab
 8007060:	0800fe40 	.word	0x0800fe40
 8007064:	fffffc00 	.word	0xfffffc00

08007068 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d120      	bne.n	80070be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007080:	2b03      	cmp	r3, #3
 8007082:	d858      	bhi.n	8007136 <DMA_CheckFifoParam+0xce>
 8007084:	a201      	add	r2, pc, #4	; (adr r2, 800708c <DMA_CheckFifoParam+0x24>)
 8007086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708a:	bf00      	nop
 800708c:	0800709d 	.word	0x0800709d
 8007090:	080070af 	.word	0x080070af
 8007094:	0800709d 	.word	0x0800709d
 8007098:	08007137 	.word	0x08007137
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d048      	beq.n	800713a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070ac:	e045      	b.n	800713a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070b6:	d142      	bne.n	800713e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070bc:	e03f      	b.n	800713e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070c6:	d123      	bne.n	8007110 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d838      	bhi.n	8007142 <DMA_CheckFifoParam+0xda>
 80070d0:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <DMA_CheckFifoParam+0x70>)
 80070d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d6:	bf00      	nop
 80070d8:	080070e9 	.word	0x080070e9
 80070dc:	080070ef 	.word	0x080070ef
 80070e0:	080070e9 	.word	0x080070e9
 80070e4:	08007101 	.word	0x08007101
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	73fb      	strb	r3, [r7, #15]
        break;
 80070ec:	e030      	b.n	8007150 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d025      	beq.n	8007146 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070fe:	e022      	b.n	8007146 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007108:	d11f      	bne.n	800714a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800710e:	e01c      	b.n	800714a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007114:	2b02      	cmp	r3, #2
 8007116:	d902      	bls.n	800711e <DMA_CheckFifoParam+0xb6>
 8007118:	2b03      	cmp	r3, #3
 800711a:	d003      	beq.n	8007124 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800711c:	e018      	b.n	8007150 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	73fb      	strb	r3, [r7, #15]
        break;
 8007122:	e015      	b.n	8007150 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00e      	beq.n	800714e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	73fb      	strb	r3, [r7, #15]
    break;
 8007134:	e00b      	b.n	800714e <DMA_CheckFifoParam+0xe6>
        break;
 8007136:	bf00      	nop
 8007138:	e00a      	b.n	8007150 <DMA_CheckFifoParam+0xe8>
        break;
 800713a:	bf00      	nop
 800713c:	e008      	b.n	8007150 <DMA_CheckFifoParam+0xe8>
        break;
 800713e:	bf00      	nop
 8007140:	e006      	b.n	8007150 <DMA_CheckFifoParam+0xe8>
        break;
 8007142:	bf00      	nop
 8007144:	e004      	b.n	8007150 <DMA_CheckFifoParam+0xe8>
        break;
 8007146:	bf00      	nop
 8007148:	e002      	b.n	8007150 <DMA_CheckFifoParam+0xe8>
        break;
 800714a:	bf00      	nop
 800714c:	e000      	b.n	8007150 <DMA_CheckFifoParam+0xe8>
    break;
 800714e:	bf00      	nop
    }
  }

  return status;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop

08007160 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a38      	ldr	r2, [pc, #224]	; (8007254 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d022      	beq.n	80071be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a36      	ldr	r2, [pc, #216]	; (8007258 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d01d      	beq.n	80071be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a35      	ldr	r2, [pc, #212]	; (800725c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d018      	beq.n	80071be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a33      	ldr	r2, [pc, #204]	; (8007260 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d013      	beq.n	80071be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a32      	ldr	r2, [pc, #200]	; (8007264 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00e      	beq.n	80071be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a30      	ldr	r2, [pc, #192]	; (8007268 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d009      	beq.n	80071be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a2f      	ldr	r2, [pc, #188]	; (800726c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d004      	beq.n	80071be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a2d      	ldr	r2, [pc, #180]	; (8007270 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d101      	bne.n	80071c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80071c2:	2300      	movs	r3, #0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01a      	beq.n	80071fe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	3b08      	subs	r3, #8
 80071d0:	4a28      	ldr	r2, [pc, #160]	; (8007274 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80071d2:	fba2 2303 	umull	r2, r3, r2, r3
 80071d6:	091b      	lsrs	r3, r3, #4
 80071d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4b26      	ldr	r3, [pc, #152]	; (8007278 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	461a      	mov	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a24      	ldr	r2, [pc, #144]	; (800727c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80071ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f003 031f 	and.w	r3, r3, #31
 80071f4:	2201      	movs	r2, #1
 80071f6:	409a      	lsls	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80071fc:	e024      	b.n	8007248 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	3b10      	subs	r3, #16
 8007206:	4a1e      	ldr	r2, [pc, #120]	; (8007280 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007208:	fba2 2303 	umull	r2, r3, r2, r3
 800720c:	091b      	lsrs	r3, r3, #4
 800720e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	4a1c      	ldr	r2, [pc, #112]	; (8007284 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d806      	bhi.n	8007226 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	4a1b      	ldr	r2, [pc, #108]	; (8007288 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d902      	bls.n	8007226 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3308      	adds	r3, #8
 8007224:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4b18      	ldr	r3, [pc, #96]	; (800728c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	461a      	mov	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a16      	ldr	r2, [pc, #88]	; (8007290 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007238:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f003 031f 	and.w	r3, r3, #31
 8007240:	2201      	movs	r2, #1
 8007242:	409a      	lsls	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007248:	bf00      	nop
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	58025408 	.word	0x58025408
 8007258:	5802541c 	.word	0x5802541c
 800725c:	58025430 	.word	0x58025430
 8007260:	58025444 	.word	0x58025444
 8007264:	58025458 	.word	0x58025458
 8007268:	5802546c 	.word	0x5802546c
 800726c:	58025480 	.word	0x58025480
 8007270:	58025494 	.word	0x58025494
 8007274:	cccccccd 	.word	0xcccccccd
 8007278:	16009600 	.word	0x16009600
 800727c:	58025880 	.word	0x58025880
 8007280:	aaaaaaab 	.word	0xaaaaaaab
 8007284:	400204b8 	.word	0x400204b8
 8007288:	4002040f 	.word	0x4002040f
 800728c:	10008200 	.word	0x10008200
 8007290:	40020880 	.word	0x40020880

08007294 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d04a      	beq.n	8007340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	d847      	bhi.n	8007340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a25      	ldr	r2, [pc, #148]	; (800734c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d022      	beq.n	8007300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a24      	ldr	r2, [pc, #144]	; (8007350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d01d      	beq.n	8007300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a22      	ldr	r2, [pc, #136]	; (8007354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d018      	beq.n	8007300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a21      	ldr	r2, [pc, #132]	; (8007358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d013      	beq.n	8007300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a1f      	ldr	r2, [pc, #124]	; (800735c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00e      	beq.n	8007300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a1e      	ldr	r2, [pc, #120]	; (8007360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d009      	beq.n	8007300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a1c      	ldr	r2, [pc, #112]	; (8007364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d004      	beq.n	8007300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1b      	ldr	r2, [pc, #108]	; (8007368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d101      	bne.n	8007304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007304:	2300      	movs	r3, #0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	4b17      	ldr	r3, [pc, #92]	; (800736c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	461a      	mov	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a15      	ldr	r2, [pc, #84]	; (8007370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800731c:	671a      	str	r2, [r3, #112]	; 0x70
 800731e:	e009      	b.n	8007334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	4b14      	ldr	r3, [pc, #80]	; (8007374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	461a      	mov	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a11      	ldr	r2, [pc, #68]	; (8007378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007332:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3b01      	subs	r3, #1
 8007338:	2201      	movs	r2, #1
 800733a:	409a      	lsls	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	58025408 	.word	0x58025408
 8007350:	5802541c 	.word	0x5802541c
 8007354:	58025430 	.word	0x58025430
 8007358:	58025444 	.word	0x58025444
 800735c:	58025458 	.word	0x58025458
 8007360:	5802546c 	.word	0x5802546c
 8007364:	58025480 	.word	0x58025480
 8007368:	58025494 	.word	0x58025494
 800736c:	1600963f 	.word	0x1600963f
 8007370:	58025940 	.word	0x58025940
 8007374:	1000823f 	.word	0x1000823f
 8007378:	40020940 	.word	0x40020940

0800737c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800737c:	b480      	push	{r7}
 800737e:	b089      	sub	sp, #36	; 0x24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007386:	2300      	movs	r3, #0
 8007388:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800738a:	4b89      	ldr	r3, [pc, #548]	; (80075b0 <HAL_GPIO_Init+0x234>)
 800738c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800738e:	e194      	b.n	80076ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	2101      	movs	r1, #1
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	fa01 f303 	lsl.w	r3, r1, r3
 800739c:	4013      	ands	r3, r2
 800739e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 8186 	beq.w	80076b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d005      	beq.n	80073c0 <HAL_GPIO_Init+0x44>
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f003 0303 	and.w	r3, r3, #3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d130      	bne.n	8007422 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	2203      	movs	r2, #3
 80073cc:	fa02 f303 	lsl.w	r3, r2, r3
 80073d0:	43db      	mvns	r3, r3
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	4013      	ands	r3, r2
 80073d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	fa02 f303 	lsl.w	r3, r2, r3
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073f6:	2201      	movs	r2, #1
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	43db      	mvns	r3, r3
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	4013      	ands	r3, r2
 8007404:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	091b      	lsrs	r3, r3, #4
 800740c:	f003 0201 	and.w	r2, r3, #1
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	fa02 f303 	lsl.w	r3, r2, r3
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	4313      	orrs	r3, r2
 800741a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	2b03      	cmp	r3, #3
 800742c:	d017      	beq.n	800745e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	2203      	movs	r2, #3
 800743a:	fa02 f303 	lsl.w	r3, r2, r3
 800743e:	43db      	mvns	r3, r3
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	4013      	ands	r3, r2
 8007444:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	689a      	ldr	r2, [r3, #8]
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	fa02 f303 	lsl.w	r3, r2, r3
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	4313      	orrs	r3, r2
 8007456:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f003 0303 	and.w	r3, r3, #3
 8007466:	2b02      	cmp	r3, #2
 8007468:	d123      	bne.n	80074b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	08da      	lsrs	r2, r3, #3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3208      	adds	r2, #8
 8007472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	220f      	movs	r2, #15
 8007482:	fa02 f303 	lsl.w	r3, r2, r3
 8007486:	43db      	mvns	r3, r3
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	4013      	ands	r3, r2
 800748c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	691a      	ldr	r2, [r3, #16]
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	08da      	lsrs	r2, r3, #3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3208      	adds	r2, #8
 80074ac:	69b9      	ldr	r1, [r7, #24]
 80074ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	2203      	movs	r2, #3
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	43db      	mvns	r3, r3
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	4013      	ands	r3, r2
 80074c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f003 0203 	and.w	r2, r3, #3
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	69ba      	ldr	r2, [r7, #24]
 80074dc:	4313      	orrs	r3, r2
 80074de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 80e0 	beq.w	80076b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074f4:	4b2f      	ldr	r3, [pc, #188]	; (80075b4 <HAL_GPIO_Init+0x238>)
 80074f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074fa:	4a2e      	ldr	r2, [pc, #184]	; (80075b4 <HAL_GPIO_Init+0x238>)
 80074fc:	f043 0302 	orr.w	r3, r3, #2
 8007500:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007504:	4b2b      	ldr	r3, [pc, #172]	; (80075b4 <HAL_GPIO_Init+0x238>)
 8007506:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007512:	4a29      	ldr	r2, [pc, #164]	; (80075b8 <HAL_GPIO_Init+0x23c>)
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	089b      	lsrs	r3, r3, #2
 8007518:	3302      	adds	r3, #2
 800751a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800751e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	220f      	movs	r2, #15
 800752a:	fa02 f303 	lsl.w	r3, r2, r3
 800752e:	43db      	mvns	r3, r3
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	4013      	ands	r3, r2
 8007534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a20      	ldr	r2, [pc, #128]	; (80075bc <HAL_GPIO_Init+0x240>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d052      	beq.n	80075e4 <HAL_GPIO_Init+0x268>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a1f      	ldr	r2, [pc, #124]	; (80075c0 <HAL_GPIO_Init+0x244>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d031      	beq.n	80075aa <HAL_GPIO_Init+0x22e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a1e      	ldr	r2, [pc, #120]	; (80075c4 <HAL_GPIO_Init+0x248>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d02b      	beq.n	80075a6 <HAL_GPIO_Init+0x22a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a1d      	ldr	r2, [pc, #116]	; (80075c8 <HAL_GPIO_Init+0x24c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d025      	beq.n	80075a2 <HAL_GPIO_Init+0x226>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a1c      	ldr	r2, [pc, #112]	; (80075cc <HAL_GPIO_Init+0x250>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d01f      	beq.n	800759e <HAL_GPIO_Init+0x222>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a1b      	ldr	r2, [pc, #108]	; (80075d0 <HAL_GPIO_Init+0x254>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d019      	beq.n	800759a <HAL_GPIO_Init+0x21e>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a1a      	ldr	r2, [pc, #104]	; (80075d4 <HAL_GPIO_Init+0x258>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d013      	beq.n	8007596 <HAL_GPIO_Init+0x21a>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a19      	ldr	r2, [pc, #100]	; (80075d8 <HAL_GPIO_Init+0x25c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00d      	beq.n	8007592 <HAL_GPIO_Init+0x216>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a18      	ldr	r2, [pc, #96]	; (80075dc <HAL_GPIO_Init+0x260>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d007      	beq.n	800758e <HAL_GPIO_Init+0x212>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a17      	ldr	r2, [pc, #92]	; (80075e0 <HAL_GPIO_Init+0x264>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d101      	bne.n	800758a <HAL_GPIO_Init+0x20e>
 8007586:	2309      	movs	r3, #9
 8007588:	e02d      	b.n	80075e6 <HAL_GPIO_Init+0x26a>
 800758a:	230a      	movs	r3, #10
 800758c:	e02b      	b.n	80075e6 <HAL_GPIO_Init+0x26a>
 800758e:	2308      	movs	r3, #8
 8007590:	e029      	b.n	80075e6 <HAL_GPIO_Init+0x26a>
 8007592:	2307      	movs	r3, #7
 8007594:	e027      	b.n	80075e6 <HAL_GPIO_Init+0x26a>
 8007596:	2306      	movs	r3, #6
 8007598:	e025      	b.n	80075e6 <HAL_GPIO_Init+0x26a>
 800759a:	2305      	movs	r3, #5
 800759c:	e023      	b.n	80075e6 <HAL_GPIO_Init+0x26a>
 800759e:	2304      	movs	r3, #4
 80075a0:	e021      	b.n	80075e6 <HAL_GPIO_Init+0x26a>
 80075a2:	2303      	movs	r3, #3
 80075a4:	e01f      	b.n	80075e6 <HAL_GPIO_Init+0x26a>
 80075a6:	2302      	movs	r3, #2
 80075a8:	e01d      	b.n	80075e6 <HAL_GPIO_Init+0x26a>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e01b      	b.n	80075e6 <HAL_GPIO_Init+0x26a>
 80075ae:	bf00      	nop
 80075b0:	58000080 	.word	0x58000080
 80075b4:	58024400 	.word	0x58024400
 80075b8:	58000400 	.word	0x58000400
 80075bc:	58020000 	.word	0x58020000
 80075c0:	58020400 	.word	0x58020400
 80075c4:	58020800 	.word	0x58020800
 80075c8:	58020c00 	.word	0x58020c00
 80075cc:	58021000 	.word	0x58021000
 80075d0:	58021400 	.word	0x58021400
 80075d4:	58021800 	.word	0x58021800
 80075d8:	58021c00 	.word	0x58021c00
 80075dc:	58022000 	.word	0x58022000
 80075e0:	58022400 	.word	0x58022400
 80075e4:	2300      	movs	r3, #0
 80075e6:	69fa      	ldr	r2, [r7, #28]
 80075e8:	f002 0203 	and.w	r2, r2, #3
 80075ec:	0092      	lsls	r2, r2, #2
 80075ee:	4093      	lsls	r3, r2
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075f6:	4938      	ldr	r1, [pc, #224]	; (80076d8 <HAL_GPIO_Init+0x35c>)
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	089b      	lsrs	r3, r3, #2
 80075fc:	3302      	adds	r3, #2
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	43db      	mvns	r3, r3
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	4013      	ands	r3, r2
 8007614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	4313      	orrs	r3, r2
 8007628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800762a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	43db      	mvns	r3, r3
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	4013      	ands	r3, r2
 8007642:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	4313      	orrs	r3, r2
 8007656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	43db      	mvns	r3, r3
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	4013      	ands	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	43db      	mvns	r3, r3
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	4013      	ands	r3, r2
 8007698:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	3301      	adds	r3, #1
 80076b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	fa22 f303 	lsr.w	r3, r2, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f47f ae63 	bne.w	8007390 <HAL_GPIO_Init+0x14>
  }
}
 80076ca:	bf00      	nop
 80076cc:	bf00      	nop
 80076ce:	3724      	adds	r7, #36	; 0x24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	58000400 	.word	0x58000400

080076dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	691a      	ldr	r2, [r3, #16]
 80076ec:	887b      	ldrh	r3, [r7, #2]
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80076f4:	2301      	movs	r3, #1
 80076f6:	73fb      	strb	r3, [r7, #15]
 80076f8:	e001      	b.n	80076fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	807b      	strh	r3, [r7, #2]
 8007718:	4613      	mov	r3, r2
 800771a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800771c:	787b      	ldrb	r3, [r7, #1]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007722:	887a      	ldrh	r2, [r7, #2]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007728:	e003      	b.n	8007732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800772a:	887b      	ldrh	r3, [r7, #2]
 800772c:	041a      	lsls	r2, r3, #16
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	619a      	str	r2, [r3, #24]
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
	...

08007740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e07f      	b.n	8007852 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d106      	bne.n	800776c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7fa fc68 	bl	800203c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2224      	movs	r2, #36	; 0x24
 8007770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007790:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d107      	bne.n	80077ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077b6:	609a      	str	r2, [r3, #8]
 80077b8:	e006      	b.n	80077c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80077c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d104      	bne.n	80077da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6859      	ldr	r1, [r3, #4]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	4b1d      	ldr	r3, [pc, #116]	; (800785c <HAL_I2C_Init+0x11c>)
 80077e6:	430b      	orrs	r3, r1
 80077e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68da      	ldr	r2, [r3, #12]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	691a      	ldr	r2, [r3, #16]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	430a      	orrs	r2, r1
 8007812:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	69d9      	ldr	r1, [r3, #28]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a1a      	ldr	r2, [r3, #32]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0201 	orr.w	r2, r2, #1
 8007832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2220      	movs	r2, #32
 800783e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	02008000 	.word	0x02008000

08007860 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af02      	add	r7, sp, #8
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	607a      	str	r2, [r7, #4]
 800786a:	461a      	mov	r2, r3
 800786c:	460b      	mov	r3, r1
 800786e:	817b      	strh	r3, [r7, #10]
 8007870:	4613      	mov	r3, r2
 8007872:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b20      	cmp	r3, #32
 800787e:	f040 80da 	bne.w	8007a36 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007888:	2b01      	cmp	r3, #1
 800788a:	d101      	bne.n	8007890 <HAL_I2C_Master_Transmit+0x30>
 800788c:	2302      	movs	r3, #2
 800788e:	e0d3      	b.n	8007a38 <HAL_I2C_Master_Transmit+0x1d8>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007898:	f7fa fffe 	bl	8002898 <HAL_GetTick>
 800789c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	2319      	movs	r3, #25
 80078a4:	2201      	movs	r2, #1
 80078a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 f9e6 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e0be      	b.n	8007a38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2221      	movs	r2, #33	; 0x21
 80078be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2210      	movs	r2, #16
 80078c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	893a      	ldrh	r2, [r7, #8]
 80078da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2bff      	cmp	r3, #255	; 0xff
 80078ea:	d90e      	bls.n	800790a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	22ff      	movs	r2, #255	; 0xff
 80078f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	8979      	ldrh	r1, [r7, #10]
 80078fa:	4b51      	ldr	r3, [pc, #324]	; (8007a40 <HAL_I2C_Master_Transmit+0x1e0>)
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 fbdc 	bl	80080c0 <I2C_TransferConfig>
 8007908:	e06c      	b.n	80079e4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007918:	b2da      	uxtb	r2, r3
 800791a:	8979      	ldrh	r1, [r7, #10]
 800791c:	4b48      	ldr	r3, [pc, #288]	; (8007a40 <HAL_I2C_Master_Transmit+0x1e0>)
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 fbcb 	bl	80080c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800792a:	e05b      	b.n	80079e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	6a39      	ldr	r1, [r7, #32]
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 f9e3 	bl	8007cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e07b      	b.n	8007a38 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	781a      	ldrb	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007968:	3b01      	subs	r3, #1
 800796a:	b29a      	uxth	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d034      	beq.n	80079e4 <HAL_I2C_Master_Transmit+0x184>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800797e:	2b00      	cmp	r3, #0
 8007980:	d130      	bne.n	80079e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	2200      	movs	r2, #0
 800798a:	2180      	movs	r1, #128	; 0x80
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f975 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e04d      	b.n	8007a38 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2bff      	cmp	r3, #255	; 0xff
 80079a4:	d90e      	bls.n	80079c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	22ff      	movs	r2, #255	; 0xff
 80079aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	8979      	ldrh	r1, [r7, #10]
 80079b4:	2300      	movs	r3, #0
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 fb7f 	bl	80080c0 <I2C_TransferConfig>
 80079c2:	e00f      	b.n	80079e4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	8979      	ldrh	r1, [r7, #10]
 80079d6:	2300      	movs	r3, #0
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 fb6e 	bl	80080c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d19e      	bne.n	800792c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	6a39      	ldr	r1, [r7, #32]
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 f9c2 	bl	8007d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e01a      	b.n	8007a38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2220      	movs	r2, #32
 8007a08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6859      	ldr	r1, [r3, #4]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	4b0b      	ldr	r3, [pc, #44]	; (8007a44 <HAL_I2C_Master_Transmit+0x1e4>)
 8007a16:	400b      	ands	r3, r1
 8007a18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	e000      	b.n	8007a38 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007a36:	2302      	movs	r3, #2
  }
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	80002000 	.word	0x80002000
 8007a44:	fe00e800 	.word	0xfe00e800

08007a48 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b088      	sub	sp, #32
 8007a4c:	af02      	add	r7, sp, #8
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	607a      	str	r2, [r7, #4]
 8007a52:	461a      	mov	r2, r3
 8007a54:	460b      	mov	r3, r1
 8007a56:	817b      	strh	r3, [r7, #10]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b20      	cmp	r3, #32
 8007a66:	f040 80db 	bne.w	8007c20 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d101      	bne.n	8007a78 <HAL_I2C_Master_Receive+0x30>
 8007a74:	2302      	movs	r3, #2
 8007a76:	e0d4      	b.n	8007c22 <HAL_I2C_Master_Receive+0x1da>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a80:	f7fa ff0a 	bl	8002898 <HAL_GetTick>
 8007a84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	2319      	movs	r3, #25
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 f8f2 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e0bf      	b.n	8007c22 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2222      	movs	r2, #34	; 0x22
 8007aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2210      	movs	r2, #16
 8007aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	893a      	ldrh	r2, [r7, #8]
 8007ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2bff      	cmp	r3, #255	; 0xff
 8007ad2:	d90e      	bls.n	8007af2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	22ff      	movs	r2, #255	; 0xff
 8007ad8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	8979      	ldrh	r1, [r7, #10]
 8007ae2:	4b52      	ldr	r3, [pc, #328]	; (8007c2c <HAL_I2C_Master_Receive+0x1e4>)
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 fae8 	bl	80080c0 <I2C_TransferConfig>
 8007af0:	e06d      	b.n	8007bce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	8979      	ldrh	r1, [r7, #10]
 8007b04:	4b49      	ldr	r3, [pc, #292]	; (8007c2c <HAL_I2C_Master_Receive+0x1e4>)
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 fad7 	bl	80080c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007b12:	e05c      	b.n	8007bce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	6a39      	ldr	r1, [r7, #32]
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 f96b 	bl	8007df4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e07c      	b.n	8007c22 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	b2d2      	uxtb	r2, r2
 8007b34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d034      	beq.n	8007bce <HAL_I2C_Master_Receive+0x186>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d130      	bne.n	8007bce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	2200      	movs	r2, #0
 8007b74:	2180      	movs	r1, #128	; 0x80
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 f880 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e04d      	b.n	8007c22 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	2bff      	cmp	r3, #255	; 0xff
 8007b8e:	d90e      	bls.n	8007bae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	22ff      	movs	r2, #255	; 0xff
 8007b94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	8979      	ldrh	r1, [r7, #10]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 fa8a 	bl	80080c0 <I2C_TransferConfig>
 8007bac:	e00f      	b.n	8007bce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	8979      	ldrh	r1, [r7, #10]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 fa79 	bl	80080c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d19d      	bne.n	8007b14 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	6a39      	ldr	r1, [r7, #32]
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 f8cd 	bl	8007d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e01a      	b.n	8007c22 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6859      	ldr	r1, [r3, #4]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	4b0c      	ldr	r3, [pc, #48]	; (8007c30 <HAL_I2C_Master_Receive+0x1e8>)
 8007c00:	400b      	ands	r3, r1
 8007c02:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	e000      	b.n	8007c22 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007c20:	2302      	movs	r3, #2
  }
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	80002400 	.word	0x80002400
 8007c30:	fe00e800 	.word	0xfe00e800

08007c34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d103      	bne.n	8007c52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d007      	beq.n	8007c70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	699a      	ldr	r2, [r3, #24]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0201 	orr.w	r2, r2, #1
 8007c6e:	619a      	str	r2, [r3, #24]
  }
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	603b      	str	r3, [r7, #0]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c8c:	e022      	b.n	8007cd4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c94:	d01e      	beq.n	8007cd4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c96:	f7fa fdff 	bl	8002898 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d302      	bcc.n	8007cac <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d113      	bne.n	8007cd4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb0:	f043 0220 	orr.w	r2, r3, #32
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e00f      	b.n	8007cf4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	699a      	ldr	r2, [r3, #24]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	bf0c      	ite	eq
 8007ce4:	2301      	moveq	r3, #1
 8007ce6:	2300      	movne	r3, #0
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	461a      	mov	r2, r3
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d0cd      	beq.n	8007c8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d08:	e02c      	b.n	8007d64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	68b9      	ldr	r1, [r7, #8]
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 f8ea 	bl	8007ee8 <I2C_IsErrorOccurred>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e02a      	b.n	8007d74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d24:	d01e      	beq.n	8007d64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d26:	f7fa fdb7 	bl	8002898 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d302      	bcc.n	8007d3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d113      	bne.n	8007d64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d40:	f043 0220 	orr.w	r2, r3, #32
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e007      	b.n	8007d74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d1cb      	bne.n	8007d0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d88:	e028      	b.n	8007ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 f8aa 	bl	8007ee8 <I2C_IsErrorOccurred>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e026      	b.n	8007dec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d9e:	f7fa fd7b 	bl	8002898 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d302      	bcc.n	8007db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d113      	bne.n	8007ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db8:	f043 0220 	orr.w	r2, r3, #32
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e007      	b.n	8007dec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b20      	cmp	r3, #32
 8007de8:	d1cf      	bne.n	8007d8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e00:	e064      	b.n	8007ecc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	68b9      	ldr	r1, [r7, #8]
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 f86e 	bl	8007ee8 <I2C_IsErrorOccurred>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e062      	b.n	8007edc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	2b20      	cmp	r3, #32
 8007e22:	d138      	bne.n	8007e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	f003 0304 	and.w	r3, r3, #4
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d105      	bne.n	8007e3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e04e      	b.n	8007edc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	f003 0310 	and.w	r3, r3, #16
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d107      	bne.n	8007e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2210      	movs	r2, #16
 8007e52:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2204      	movs	r2, #4
 8007e58:	645a      	str	r2, [r3, #68]	; 0x44
 8007e5a:	e002      	b.n	8007e62 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2220      	movs	r2, #32
 8007e68:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6859      	ldr	r1, [r3, #4]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	4b1b      	ldr	r3, [pc, #108]	; (8007ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007e76:	400b      	ands	r3, r1
 8007e78:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e022      	b.n	8007edc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e96:	f7fa fcff 	bl	8002898 <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d302      	bcc.n	8007eac <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10f      	bne.n	8007ecc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb0:	f043 0220 	orr.w	r2, r3, #32
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e007      	b.n	8007edc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	f003 0304 	and.w	r3, r3, #4
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d193      	bne.n	8007e02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	fe00e800 	.word	0xfe00e800

08007ee8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	; 0x28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d075      	beq.n	8008000 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2210      	movs	r2, #16
 8007f1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f1c:	e056      	b.n	8007fcc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f24:	d052      	beq.n	8007fcc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f26:	f7fa fcb7 	bl	8002898 <HAL_GetTick>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d302      	bcc.n	8007f3c <I2C_IsErrorOccurred+0x54>
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d147      	bne.n	8007fcc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f5e:	d12e      	bne.n	8007fbe <I2C_IsErrorOccurred+0xd6>
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f66:	d02a      	beq.n	8007fbe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007f68:	7cfb      	ldrb	r3, [r7, #19]
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	d027      	beq.n	8007fbe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685a      	ldr	r2, [r3, #4]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f7c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007f7e:	f7fa fc8b 	bl	8002898 <HAL_GetTick>
 8007f82:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f84:	e01b      	b.n	8007fbe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007f86:	f7fa fc87 	bl	8002898 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	2b19      	cmp	r3, #25
 8007f92:	d914      	bls.n	8007fbe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f98:	f043 0220 	orr.w	r2, r3, #32
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	d1dc      	bne.n	8007f86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	f003 0320 	and.w	r3, r3, #32
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d003      	beq.n	8007fe2 <I2C_IsErrorOccurred+0xfa>
 8007fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d09d      	beq.n	8007f1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d103      	bne.n	8007ff2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	f043 0304 	orr.w	r3, r3, #4
 8007ff8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00b      	beq.n	800802a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008012:	6a3b      	ldr	r3, [r7, #32]
 8008014:	f043 0301 	orr.w	r3, r3, #1
 8008018:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008022:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00b      	beq.n	800804c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	f043 0308 	orr.w	r3, r3, #8
 800803a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008044:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	f043 0302 	orr.w	r3, r3, #2
 800805c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008066:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800806e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008072:	2b00      	cmp	r3, #0
 8008074:	d01c      	beq.n	80080b0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff fddc 	bl	8007c34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6859      	ldr	r1, [r3, #4]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <I2C_IsErrorOccurred+0x1d4>)
 8008088:	400b      	ands	r3, r1
 800808a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	431a      	orrs	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2220      	movs	r2, #32
 800809c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80080b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3728      	adds	r7, #40	; 0x28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	fe00e800 	.word	0xfe00e800

080080c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	607b      	str	r3, [r7, #4]
 80080ca:	460b      	mov	r3, r1
 80080cc:	817b      	strh	r3, [r7, #10]
 80080ce:	4613      	mov	r3, r2
 80080d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080d2:	897b      	ldrh	r3, [r7, #10]
 80080d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080d8:	7a7b      	ldrb	r3, [r7, #9]
 80080da:	041b      	lsls	r3, r3, #16
 80080dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080e0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080ee:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	0d5b      	lsrs	r3, r3, #21
 80080fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80080fe:	4b08      	ldr	r3, [pc, #32]	; (8008120 <I2C_TransferConfig+0x60>)
 8008100:	430b      	orrs	r3, r1
 8008102:	43db      	mvns	r3, r3
 8008104:	ea02 0103 	and.w	r1, r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	430a      	orrs	r2, r1
 8008110:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008112:	bf00      	nop
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	03ff63ff 	.word	0x03ff63ff

08008124 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b20      	cmp	r3, #32
 8008138:	d138      	bne.n	80081ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008140:	2b01      	cmp	r3, #1
 8008142:	d101      	bne.n	8008148 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008144:	2302      	movs	r3, #2
 8008146:	e032      	b.n	80081ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2224      	movs	r2, #36	; 0x24
 8008154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f022 0201 	bic.w	r2, r2, #1
 8008166:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008176:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6819      	ldr	r1, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f042 0201 	orr.w	r2, r2, #1
 8008196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2220      	movs	r2, #32
 800819c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	e000      	b.n	80081ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081ac:	2302      	movs	r3, #2
  }
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b085      	sub	sp, #20
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b20      	cmp	r3, #32
 80081ce:	d139      	bne.n	8008244 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d101      	bne.n	80081de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80081da:	2302      	movs	r3, #2
 80081dc:	e033      	b.n	8008246 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2224      	movs	r2, #36	; 0x24
 80081ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 0201 	bic.w	r2, r2, #1
 80081fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800820c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	021b      	lsls	r3, r3, #8
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	4313      	orrs	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0201 	orr.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	e000      	b.n	8008246 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008244:	2302      	movs	r3, #2
  }
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
	...

08008254 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008260:	4b18      	ldr	r3, [pc, #96]	; (80082c4 <HAL_PWR_EnterSTOPMode+0x70>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f023 0201 	bic.w	r2, r3, #1
 8008268:	4916      	ldr	r1, [pc, #88]	; (80082c4 <HAL_PWR_EnterSTOPMode+0x70>)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4313      	orrs	r3, r2
 800826e:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008270:	4b14      	ldr	r3, [pc, #80]	; (80082c4 <HAL_PWR_EnterSTOPMode+0x70>)
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	4a13      	ldr	r2, [pc, #76]	; (80082c4 <HAL_PWR_EnterSTOPMode+0x70>)
 8008276:	f023 0305 	bic.w	r3, r3, #5
 800827a:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800827c:	4b11      	ldr	r3, [pc, #68]	; (80082c4 <HAL_PWR_EnterSTOPMode+0x70>)
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	4a10      	ldr	r2, [pc, #64]	; (80082c4 <HAL_PWR_EnterSTOPMode+0x70>)
 8008282:	f023 0302 	bic.w	r3, r3, #2
 8008286:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008288:	4b0f      	ldr	r3, [pc, #60]	; (80082c8 <HAL_PWR_EnterSTOPMode+0x74>)
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	4a0e      	ldr	r2, [pc, #56]	; (80082c8 <HAL_PWR_EnterSTOPMode+0x74>)
 800828e:	f043 0304 	orr.w	r3, r3, #4
 8008292:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8008294:	f3bf 8f4f 	dsb	sy
}
 8008298:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800829a:	f3bf 8f6f 	isb	sy
}
 800829e:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d101      	bne.n	80082aa <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80082a6:	bf30      	wfi
 80082a8:	e000      	b.n	80082ac <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80082aa:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80082ac:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <HAL_PWR_EnterSTOPMode+0x74>)
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	4a05      	ldr	r2, [pc, #20]	; (80082c8 <HAL_PWR_EnterSTOPMode+0x74>)
 80082b2:	f023 0304 	bic.w	r3, r3, #4
 80082b6:	6113      	str	r3, [r2, #16]
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	58024800 	.word	0x58024800
 80082c8:	e000ed00 	.word	0xe000ed00

080082cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80082d4:	4b19      	ldr	r3, [pc, #100]	; (800833c <HAL_PWREx_ConfigSupply+0x70>)
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d00a      	beq.n	80082f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80082e0:	4b16      	ldr	r3, [pc, #88]	; (800833c <HAL_PWREx_ConfigSupply+0x70>)
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f003 0307 	and.w	r3, r3, #7
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d001      	beq.n	80082f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e01f      	b.n	8008332 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	e01d      	b.n	8008332 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80082f6:	4b11      	ldr	r3, [pc, #68]	; (800833c <HAL_PWREx_ConfigSupply+0x70>)
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	f023 0207 	bic.w	r2, r3, #7
 80082fe:	490f      	ldr	r1, [pc, #60]	; (800833c <HAL_PWREx_ConfigSupply+0x70>)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4313      	orrs	r3, r2
 8008304:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008306:	f7fa fac7 	bl	8002898 <HAL_GetTick>
 800830a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800830c:	e009      	b.n	8008322 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800830e:	f7fa fac3 	bl	8002898 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800831c:	d901      	bls.n	8008322 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e007      	b.n	8008332 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008322:	4b06      	ldr	r3, [pc, #24]	; (800833c <HAL_PWREx_ConfigSupply+0x70>)
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800832a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800832e:	d1ee      	bne.n	800830e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	58024800 	.word	0x58024800

08008340 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08c      	sub	sp, #48	; 0x30
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d102      	bne.n	8008354 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	f000 bc1d 	b.w	8008b8e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8087 	beq.w	8008470 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008362:	4b99      	ldr	r3, [pc, #612]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800836a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800836c:	4b96      	ldr	r3, [pc, #600]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008374:	2b10      	cmp	r3, #16
 8008376:	d007      	beq.n	8008388 <HAL_RCC_OscConfig+0x48>
 8008378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837a:	2b18      	cmp	r3, #24
 800837c:	d110      	bne.n	80083a0 <HAL_RCC_OscConfig+0x60>
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	f003 0303 	and.w	r3, r3, #3
 8008384:	2b02      	cmp	r3, #2
 8008386:	d10b      	bne.n	80083a0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008388:	4b8f      	ldr	r3, [pc, #572]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d06c      	beq.n	800846e <HAL_RCC_OscConfig+0x12e>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d168      	bne.n	800846e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e3f6      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083a8:	d106      	bne.n	80083b8 <HAL_RCC_OscConfig+0x78>
 80083aa:	4b87      	ldr	r3, [pc, #540]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a86      	ldr	r2, [pc, #536]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80083b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b4:	6013      	str	r3, [r2, #0]
 80083b6:	e02e      	b.n	8008416 <HAL_RCC_OscConfig+0xd6>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10c      	bne.n	80083da <HAL_RCC_OscConfig+0x9a>
 80083c0:	4b81      	ldr	r3, [pc, #516]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a80      	ldr	r2, [pc, #512]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80083c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	4b7e      	ldr	r3, [pc, #504]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a7d      	ldr	r2, [pc, #500]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80083d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	e01d      	b.n	8008416 <HAL_RCC_OscConfig+0xd6>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083e2:	d10c      	bne.n	80083fe <HAL_RCC_OscConfig+0xbe>
 80083e4:	4b78      	ldr	r3, [pc, #480]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a77      	ldr	r2, [pc, #476]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80083ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	4b75      	ldr	r3, [pc, #468]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a74      	ldr	r2, [pc, #464]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80083f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	e00b      	b.n	8008416 <HAL_RCC_OscConfig+0xd6>
 80083fe:	4b72      	ldr	r3, [pc, #456]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a71      	ldr	r2, [pc, #452]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 8008404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	4b6f      	ldr	r3, [pc, #444]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a6e      	ldr	r2, [pc, #440]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 8008410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008414:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d013      	beq.n	8008446 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841e:	f7fa fa3b 	bl	8002898 <HAL_GetTick>
 8008422:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008424:	e008      	b.n	8008438 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008426:	f7fa fa37 	bl	8002898 <HAL_GetTick>
 800842a:	4602      	mov	r2, r0
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	2b64      	cmp	r3, #100	; 0x64
 8008432:	d901      	bls.n	8008438 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e3aa      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008438:	4b63      	ldr	r3, [pc, #396]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d0f0      	beq.n	8008426 <HAL_RCC_OscConfig+0xe6>
 8008444:	e014      	b.n	8008470 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008446:	f7fa fa27 	bl	8002898 <HAL_GetTick>
 800844a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800844c:	e008      	b.n	8008460 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800844e:	f7fa fa23 	bl	8002898 <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	2b64      	cmp	r3, #100	; 0x64
 800845a:	d901      	bls.n	8008460 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e396      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008460:	4b59      	ldr	r3, [pc, #356]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1f0      	bne.n	800844e <HAL_RCC_OscConfig+0x10e>
 800846c:	e000      	b.n	8008470 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800846e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 80cb 	beq.w	8008614 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800847e:	4b52      	ldr	r3, [pc, #328]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008486:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008488:	4b4f      	ldr	r3, [pc, #316]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 800848a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d007      	beq.n	80084a4 <HAL_RCC_OscConfig+0x164>
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	2b18      	cmp	r3, #24
 8008498:	d156      	bne.n	8008548 <HAL_RCC_OscConfig+0x208>
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	f003 0303 	and.w	r3, r3, #3
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d151      	bne.n	8008548 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084a4:	4b48      	ldr	r3, [pc, #288]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0304 	and.w	r3, r3, #4
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <HAL_RCC_OscConfig+0x17c>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e368      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084bc:	4b42      	ldr	r3, [pc, #264]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f023 0219 	bic.w	r2, r3, #25
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	493f      	ldr	r1, [pc, #252]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084ce:	f7fa f9e3 	bl	8002898 <HAL_GetTick>
 80084d2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084d4:	e008      	b.n	80084e8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084d6:	f7fa f9df 	bl	8002898 <HAL_GetTick>
 80084da:	4602      	mov	r2, r0
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d901      	bls.n	80084e8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e352      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084e8:	4b37      	ldr	r3, [pc, #220]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d0f0      	beq.n	80084d6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084f4:	f7fa fa10 	bl	8002918 <HAL_GetREVID>
 80084f8:	4603      	mov	r3, r0
 80084fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80084fe:	4293      	cmp	r3, r2
 8008500:	d817      	bhi.n	8008532 <HAL_RCC_OscConfig+0x1f2>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	2b40      	cmp	r3, #64	; 0x40
 8008508:	d108      	bne.n	800851c <HAL_RCC_OscConfig+0x1dc>
 800850a:	4b2f      	ldr	r3, [pc, #188]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008512:	4a2d      	ldr	r2, [pc, #180]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 8008514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008518:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800851a:	e07b      	b.n	8008614 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800851c:	4b2a      	ldr	r3, [pc, #168]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	031b      	lsls	r3, r3, #12
 800852a:	4927      	ldr	r1, [pc, #156]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 800852c:	4313      	orrs	r3, r2
 800852e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008530:	e070      	b.n	8008614 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008532:	4b25      	ldr	r3, [pc, #148]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	061b      	lsls	r3, r3, #24
 8008540:	4921      	ldr	r1, [pc, #132]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 8008542:	4313      	orrs	r3, r2
 8008544:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008546:	e065      	b.n	8008614 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d048      	beq.n	80085e2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008550:	4b1d      	ldr	r3, [pc, #116]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f023 0219 	bic.w	r2, r3, #25
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	491a      	ldr	r1, [pc, #104]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 800855e:	4313      	orrs	r3, r2
 8008560:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008562:	f7fa f999 	bl	8002898 <HAL_GetTick>
 8008566:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008568:	e008      	b.n	800857c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800856a:	f7fa f995 	bl	8002898 <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	2b02      	cmp	r3, #2
 8008576:	d901      	bls.n	800857c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e308      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800857c:	4b12      	ldr	r3, [pc, #72]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d0f0      	beq.n	800856a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008588:	f7fa f9c6 	bl	8002918 <HAL_GetREVID>
 800858c:	4603      	mov	r3, r0
 800858e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008592:	4293      	cmp	r3, r2
 8008594:	d81a      	bhi.n	80085cc <HAL_RCC_OscConfig+0x28c>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	2b40      	cmp	r3, #64	; 0x40
 800859c:	d108      	bne.n	80085b0 <HAL_RCC_OscConfig+0x270>
 800859e:	4b0a      	ldr	r3, [pc, #40]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80085a6:	4a08      	ldr	r2, [pc, #32]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80085a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085ac:	6053      	str	r3, [r2, #4]
 80085ae:	e031      	b.n	8008614 <HAL_RCC_OscConfig+0x2d4>
 80085b0:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	031b      	lsls	r3, r3, #12
 80085be:	4902      	ldr	r1, [pc, #8]	; (80085c8 <HAL_RCC_OscConfig+0x288>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	604b      	str	r3, [r1, #4]
 80085c4:	e026      	b.n	8008614 <HAL_RCC_OscConfig+0x2d4>
 80085c6:	bf00      	nop
 80085c8:	58024400 	.word	0x58024400
 80085cc:	4b9a      	ldr	r3, [pc, #616]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	061b      	lsls	r3, r3, #24
 80085da:	4997      	ldr	r1, [pc, #604]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	604b      	str	r3, [r1, #4]
 80085e0:	e018      	b.n	8008614 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085e2:	4b95      	ldr	r3, [pc, #596]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a94      	ldr	r2, [pc, #592]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 80085e8:	f023 0301 	bic.w	r3, r3, #1
 80085ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ee:	f7fa f953 	bl	8002898 <HAL_GetTick>
 80085f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085f4:	e008      	b.n	8008608 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085f6:	f7fa f94f 	bl	8002898 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b02      	cmp	r3, #2
 8008602:	d901      	bls.n	8008608 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e2c2      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008608:	4b8b      	ldr	r3, [pc, #556]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1f0      	bne.n	80085f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0310 	and.w	r3, r3, #16
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 80a9 	beq.w	8008774 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008622:	4b85      	ldr	r3, [pc, #532]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800862a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800862c:	4b82      	ldr	r3, [pc, #520]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 800862e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008630:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	2b08      	cmp	r3, #8
 8008636:	d007      	beq.n	8008648 <HAL_RCC_OscConfig+0x308>
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	2b18      	cmp	r3, #24
 800863c:	d13a      	bne.n	80086b4 <HAL_RCC_OscConfig+0x374>
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f003 0303 	and.w	r3, r3, #3
 8008644:	2b01      	cmp	r3, #1
 8008646:	d135      	bne.n	80086b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008648:	4b7b      	ldr	r3, [pc, #492]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008650:	2b00      	cmp	r3, #0
 8008652:	d005      	beq.n	8008660 <HAL_RCC_OscConfig+0x320>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	69db      	ldr	r3, [r3, #28]
 8008658:	2b80      	cmp	r3, #128	; 0x80
 800865a:	d001      	beq.n	8008660 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e296      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008660:	f7fa f95a 	bl	8002918 <HAL_GetREVID>
 8008664:	4603      	mov	r3, r0
 8008666:	f241 0203 	movw	r2, #4099	; 0x1003
 800866a:	4293      	cmp	r3, r2
 800866c:	d817      	bhi.n	800869e <HAL_RCC_OscConfig+0x35e>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	2b20      	cmp	r3, #32
 8008674:	d108      	bne.n	8008688 <HAL_RCC_OscConfig+0x348>
 8008676:	4b70      	ldr	r3, [pc, #448]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800867e:	4a6e      	ldr	r2, [pc, #440]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 8008680:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008684:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008686:	e075      	b.n	8008774 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008688:	4b6b      	ldr	r3, [pc, #428]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	069b      	lsls	r3, r3, #26
 8008696:	4968      	ldr	r1, [pc, #416]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 8008698:	4313      	orrs	r3, r2
 800869a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800869c:	e06a      	b.n	8008774 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800869e:	4b66      	ldr	r3, [pc, #408]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	061b      	lsls	r3, r3, #24
 80086ac:	4962      	ldr	r1, [pc, #392]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086b2:	e05f      	b.n	8008774 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d042      	beq.n	8008742 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80086bc:	4b5e      	ldr	r3, [pc, #376]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a5d      	ldr	r2, [pc, #372]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 80086c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c8:	f7fa f8e6 	bl	8002898 <HAL_GetTick>
 80086cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086ce:	e008      	b.n	80086e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80086d0:	f7fa f8e2 	bl	8002898 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d901      	bls.n	80086e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e255      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086e2:	4b55      	ldr	r3, [pc, #340]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0f0      	beq.n	80086d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086ee:	f7fa f913 	bl	8002918 <HAL_GetREVID>
 80086f2:	4603      	mov	r3, r0
 80086f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d817      	bhi.n	800872c <HAL_RCC_OscConfig+0x3ec>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	2b20      	cmp	r3, #32
 8008702:	d108      	bne.n	8008716 <HAL_RCC_OscConfig+0x3d6>
 8008704:	4b4c      	ldr	r3, [pc, #304]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800870c:	4a4a      	ldr	r2, [pc, #296]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 800870e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008712:	6053      	str	r3, [r2, #4]
 8008714:	e02e      	b.n	8008774 <HAL_RCC_OscConfig+0x434>
 8008716:	4b48      	ldr	r3, [pc, #288]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	069b      	lsls	r3, r3, #26
 8008724:	4944      	ldr	r1, [pc, #272]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 8008726:	4313      	orrs	r3, r2
 8008728:	604b      	str	r3, [r1, #4]
 800872a:	e023      	b.n	8008774 <HAL_RCC_OscConfig+0x434>
 800872c:	4b42      	ldr	r3, [pc, #264]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	061b      	lsls	r3, r3, #24
 800873a:	493f      	ldr	r1, [pc, #252]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 800873c:	4313      	orrs	r3, r2
 800873e:	60cb      	str	r3, [r1, #12]
 8008740:	e018      	b.n	8008774 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008742:	4b3d      	ldr	r3, [pc, #244]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a3c      	ldr	r2, [pc, #240]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 8008748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800874c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800874e:	f7fa f8a3 	bl	8002898 <HAL_GetTick>
 8008752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008754:	e008      	b.n	8008768 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008756:	f7fa f89f 	bl	8002898 <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	2b02      	cmp	r3, #2
 8008762:	d901      	bls.n	8008768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e212      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008768:	4b33      	ldr	r3, [pc, #204]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1f0      	bne.n	8008756 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0308 	and.w	r3, r3, #8
 800877c:	2b00      	cmp	r3, #0
 800877e:	d036      	beq.n	80087ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d019      	beq.n	80087bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008788:	4b2b      	ldr	r3, [pc, #172]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 800878a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800878c:	4a2a      	ldr	r2, [pc, #168]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 800878e:	f043 0301 	orr.w	r3, r3, #1
 8008792:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008794:	f7fa f880 	bl	8002898 <HAL_GetTick>
 8008798:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800879a:	e008      	b.n	80087ae <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800879c:	f7fa f87c 	bl	8002898 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d901      	bls.n	80087ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e1ef      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087ae:	4b22      	ldr	r3, [pc, #136]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 80087b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087b2:	f003 0302 	and.w	r3, r3, #2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d0f0      	beq.n	800879c <HAL_RCC_OscConfig+0x45c>
 80087ba:	e018      	b.n	80087ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087bc:	4b1e      	ldr	r3, [pc, #120]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 80087be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c0:	4a1d      	ldr	r2, [pc, #116]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 80087c2:	f023 0301 	bic.w	r3, r3, #1
 80087c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087c8:	f7fa f866 	bl	8002898 <HAL_GetTick>
 80087cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087ce:	e008      	b.n	80087e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087d0:	f7fa f862 	bl	8002898 <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d901      	bls.n	80087e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e1d5      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087e2:	4b15      	ldr	r3, [pc, #84]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 80087e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1f0      	bne.n	80087d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0320 	and.w	r3, r3, #32
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d039      	beq.n	800886e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01c      	beq.n	800883c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008802:	4b0d      	ldr	r3, [pc, #52]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a0c      	ldr	r2, [pc, #48]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 8008808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800880c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800880e:	f7fa f843 	bl	8002898 <HAL_GetTick>
 8008812:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008814:	e008      	b.n	8008828 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008816:	f7fa f83f 	bl	8002898 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e1b2      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008828:	4b03      	ldr	r3, [pc, #12]	; (8008838 <HAL_RCC_OscConfig+0x4f8>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0f0      	beq.n	8008816 <HAL_RCC_OscConfig+0x4d6>
 8008834:	e01b      	b.n	800886e <HAL_RCC_OscConfig+0x52e>
 8008836:	bf00      	nop
 8008838:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800883c:	4b9b      	ldr	r3, [pc, #620]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a9a      	ldr	r2, [pc, #616]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008846:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008848:	f7fa f826 	bl	8002898 <HAL_GetTick>
 800884c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800884e:	e008      	b.n	8008862 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008850:	f7fa f822 	bl	8002898 <HAL_GetTick>
 8008854:	4602      	mov	r2, r0
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	2b02      	cmp	r3, #2
 800885c:	d901      	bls.n	8008862 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e195      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008862:	4b92      	ldr	r3, [pc, #584]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1f0      	bne.n	8008850 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0304 	and.w	r3, r3, #4
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 8081 	beq.w	800897e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800887c:	4b8c      	ldr	r3, [pc, #560]	; (8008ab0 <HAL_RCC_OscConfig+0x770>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a8b      	ldr	r2, [pc, #556]	; (8008ab0 <HAL_RCC_OscConfig+0x770>)
 8008882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008886:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008888:	f7fa f806 	bl	8002898 <HAL_GetTick>
 800888c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800888e:	e008      	b.n	80088a2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008890:	f7fa f802 	bl	8002898 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	2b64      	cmp	r3, #100	; 0x64
 800889c:	d901      	bls.n	80088a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e175      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088a2:	4b83      	ldr	r3, [pc, #524]	; (8008ab0 <HAL_RCC_OscConfig+0x770>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d0f0      	beq.n	8008890 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d106      	bne.n	80088c4 <HAL_RCC_OscConfig+0x584>
 80088b6:	4b7d      	ldr	r3, [pc, #500]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 80088b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ba:	4a7c      	ldr	r2, [pc, #496]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 80088bc:	f043 0301 	orr.w	r3, r3, #1
 80088c0:	6713      	str	r3, [r2, #112]	; 0x70
 80088c2:	e02d      	b.n	8008920 <HAL_RCC_OscConfig+0x5e0>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10c      	bne.n	80088e6 <HAL_RCC_OscConfig+0x5a6>
 80088cc:	4b77      	ldr	r3, [pc, #476]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 80088ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d0:	4a76      	ldr	r2, [pc, #472]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 80088d2:	f023 0301 	bic.w	r3, r3, #1
 80088d6:	6713      	str	r3, [r2, #112]	; 0x70
 80088d8:	4b74      	ldr	r3, [pc, #464]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 80088da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088dc:	4a73      	ldr	r2, [pc, #460]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 80088de:	f023 0304 	bic.w	r3, r3, #4
 80088e2:	6713      	str	r3, [r2, #112]	; 0x70
 80088e4:	e01c      	b.n	8008920 <HAL_RCC_OscConfig+0x5e0>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	2b05      	cmp	r3, #5
 80088ec:	d10c      	bne.n	8008908 <HAL_RCC_OscConfig+0x5c8>
 80088ee:	4b6f      	ldr	r3, [pc, #444]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 80088f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f2:	4a6e      	ldr	r2, [pc, #440]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 80088f4:	f043 0304 	orr.w	r3, r3, #4
 80088f8:	6713      	str	r3, [r2, #112]	; 0x70
 80088fa:	4b6c      	ldr	r3, [pc, #432]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 80088fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fe:	4a6b      	ldr	r2, [pc, #428]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008900:	f043 0301 	orr.w	r3, r3, #1
 8008904:	6713      	str	r3, [r2, #112]	; 0x70
 8008906:	e00b      	b.n	8008920 <HAL_RCC_OscConfig+0x5e0>
 8008908:	4b68      	ldr	r3, [pc, #416]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 800890a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890c:	4a67      	ldr	r2, [pc, #412]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 800890e:	f023 0301 	bic.w	r3, r3, #1
 8008912:	6713      	str	r3, [r2, #112]	; 0x70
 8008914:	4b65      	ldr	r3, [pc, #404]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008918:	4a64      	ldr	r2, [pc, #400]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 800891a:	f023 0304 	bic.w	r3, r3, #4
 800891e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d015      	beq.n	8008954 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008928:	f7f9 ffb6 	bl	8002898 <HAL_GetTick>
 800892c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800892e:	e00a      	b.n	8008946 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008930:	f7f9 ffb2 	bl	8002898 <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	f241 3288 	movw	r2, #5000	; 0x1388
 800893e:	4293      	cmp	r3, r2
 8008940:	d901      	bls.n	8008946 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e123      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008946:	4b59      	ldr	r3, [pc, #356]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0ee      	beq.n	8008930 <HAL_RCC_OscConfig+0x5f0>
 8008952:	e014      	b.n	800897e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008954:	f7f9 ffa0 	bl	8002898 <HAL_GetTick>
 8008958:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800895a:	e00a      	b.n	8008972 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800895c:	f7f9 ff9c 	bl	8002898 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	f241 3288 	movw	r2, #5000	; 0x1388
 800896a:	4293      	cmp	r3, r2
 800896c:	d901      	bls.n	8008972 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e10d      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008972:	4b4e      	ldr	r3, [pc, #312]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1ee      	bne.n	800895c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 8102 	beq.w	8008b8c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008988:	4b48      	ldr	r3, [pc, #288]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008990:	2b18      	cmp	r3, #24
 8008992:	f000 80bd 	beq.w	8008b10 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	2b02      	cmp	r3, #2
 800899c:	f040 809e 	bne.w	8008adc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089a0:	4b42      	ldr	r3, [pc, #264]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a41      	ldr	r2, [pc, #260]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 80089a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ac:	f7f9 ff74 	bl	8002898 <HAL_GetTick>
 80089b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089b2:	e008      	b.n	80089c6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089b4:	f7f9 ff70 	bl	8002898 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d901      	bls.n	80089c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e0e3      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089c6:	4b39      	ldr	r3, [pc, #228]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1f0      	bne.n	80089b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089d2:	4b36      	ldr	r3, [pc, #216]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 80089d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089d6:	4b37      	ldr	r3, [pc, #220]	; (8008ab4 <HAL_RCC_OscConfig+0x774>)
 80089d8:	4013      	ands	r3, r2
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80089e2:	0112      	lsls	r2, r2, #4
 80089e4:	430a      	orrs	r2, r1
 80089e6:	4931      	ldr	r1, [pc, #196]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 80089e8:	4313      	orrs	r3, r2
 80089ea:	628b      	str	r3, [r1, #40]	; 0x28
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f0:	3b01      	subs	r3, #1
 80089f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fa:	3b01      	subs	r3, #1
 80089fc:	025b      	lsls	r3, r3, #9
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	431a      	orrs	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	3b01      	subs	r3, #1
 8008a08:	041b      	lsls	r3, r3, #16
 8008a0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a14:	3b01      	subs	r3, #1
 8008a16:	061b      	lsls	r3, r3, #24
 8008a18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a1c:	4923      	ldr	r1, [pc, #140]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008a22:	4b22      	ldr	r3, [pc, #136]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a26:	4a21      	ldr	r2, [pc, #132]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a28:	f023 0301 	bic.w	r3, r3, #1
 8008a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a2e:	4b1f      	ldr	r3, [pc, #124]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a32:	4b21      	ldr	r3, [pc, #132]	; (8008ab8 <HAL_RCC_OscConfig+0x778>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008a3a:	00d2      	lsls	r2, r2, #3
 8008a3c:	491b      	ldr	r1, [pc, #108]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a42:	4b1a      	ldr	r3, [pc, #104]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a46:	f023 020c 	bic.w	r2, r3, #12
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	4917      	ldr	r1, [pc, #92]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a54:	4b15      	ldr	r3, [pc, #84]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a58:	f023 0202 	bic.w	r2, r3, #2
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a60:	4912      	ldr	r1, [pc, #72]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a66:	4b11      	ldr	r3, [pc, #68]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6a:	4a10      	ldr	r2, [pc, #64]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a72:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a76:	4a0d      	ldr	r2, [pc, #52]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a7e:	4b0b      	ldr	r3, [pc, #44]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a82:	4a0a      	ldr	r2, [pc, #40]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008a8a:	4b08      	ldr	r3, [pc, #32]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8e:	4a07      	ldr	r2, [pc, #28]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a90:	f043 0301 	orr.w	r3, r3, #1
 8008a94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a96:	4b05      	ldr	r3, [pc, #20]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a04      	ldr	r2, [pc, #16]	; (8008aac <HAL_RCC_OscConfig+0x76c>)
 8008a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa2:	f7f9 fef9 	bl	8002898 <HAL_GetTick>
 8008aa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008aa8:	e011      	b.n	8008ace <HAL_RCC_OscConfig+0x78e>
 8008aaa:	bf00      	nop
 8008aac:	58024400 	.word	0x58024400
 8008ab0:	58024800 	.word	0x58024800
 8008ab4:	fffffc0c 	.word	0xfffffc0c
 8008ab8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008abc:	f7f9 feec 	bl	8002898 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d901      	bls.n	8008ace <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e05f      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ace:	4b32      	ldr	r3, [pc, #200]	; (8008b98 <HAL_RCC_OscConfig+0x858>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0f0      	beq.n	8008abc <HAL_RCC_OscConfig+0x77c>
 8008ada:	e057      	b.n	8008b8c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008adc:	4b2e      	ldr	r3, [pc, #184]	; (8008b98 <HAL_RCC_OscConfig+0x858>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a2d      	ldr	r2, [pc, #180]	; (8008b98 <HAL_RCC_OscConfig+0x858>)
 8008ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae8:	f7f9 fed6 	bl	8002898 <HAL_GetTick>
 8008aec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008aee:	e008      	b.n	8008b02 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008af0:	f7f9 fed2 	bl	8002898 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d901      	bls.n	8008b02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e045      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b02:	4b25      	ldr	r3, [pc, #148]	; (8008b98 <HAL_RCC_OscConfig+0x858>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1f0      	bne.n	8008af0 <HAL_RCC_OscConfig+0x7b0>
 8008b0e:	e03d      	b.n	8008b8c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b10:	4b21      	ldr	r3, [pc, #132]	; (8008b98 <HAL_RCC_OscConfig+0x858>)
 8008b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b16:	4b20      	ldr	r3, [pc, #128]	; (8008b98 <HAL_RCC_OscConfig+0x858>)
 8008b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d031      	beq.n	8008b88 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f003 0203 	and.w	r2, r3, #3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d12a      	bne.n	8008b88 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	091b      	lsrs	r3, r3, #4
 8008b36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d122      	bne.n	8008b88 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d11a      	bne.n	8008b88 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	0a5b      	lsrs	r3, r3, #9
 8008b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d111      	bne.n	8008b88 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	0c1b      	lsrs	r3, r3, #16
 8008b68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b70:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d108      	bne.n	8008b88 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	0e1b      	lsrs	r3, r3, #24
 8008b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b82:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d001      	beq.n	8008b8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e000      	b.n	8008b8e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3730      	adds	r7, #48	; 0x30
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	58024400 	.word	0x58024400

08008b9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e19c      	b.n	8008eea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008bb0:	4b8a      	ldr	r3, [pc, #552]	; (8008ddc <HAL_RCC_ClockConfig+0x240>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 030f 	and.w	r3, r3, #15
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d910      	bls.n	8008be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bbe:	4b87      	ldr	r3, [pc, #540]	; (8008ddc <HAL_RCC_ClockConfig+0x240>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f023 020f 	bic.w	r2, r3, #15
 8008bc6:	4985      	ldr	r1, [pc, #532]	; (8008ddc <HAL_RCC_ClockConfig+0x240>)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bce:	4b83      	ldr	r3, [pc, #524]	; (8008ddc <HAL_RCC_ClockConfig+0x240>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 030f 	and.w	r3, r3, #15
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d001      	beq.n	8008be0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e184      	b.n	8008eea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d010      	beq.n	8008c0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	691a      	ldr	r2, [r3, #16]
 8008bf0:	4b7b      	ldr	r3, [pc, #492]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d908      	bls.n	8008c0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008bfc:	4b78      	ldr	r3, [pc, #480]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008bfe:	699b      	ldr	r3, [r3, #24]
 8008c00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	4975      	ldr	r1, [pc, #468]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0308 	and.w	r3, r3, #8
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d010      	beq.n	8008c3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	695a      	ldr	r2, [r3, #20]
 8008c1e:	4b70      	ldr	r3, [pc, #448]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d908      	bls.n	8008c3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c2a:	4b6d      	ldr	r3, [pc, #436]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008c2c:	69db      	ldr	r3, [r3, #28]
 8008c2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	496a      	ldr	r1, [pc, #424]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0310 	and.w	r3, r3, #16
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d010      	beq.n	8008c6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	699a      	ldr	r2, [r3, #24]
 8008c4c:	4b64      	ldr	r3, [pc, #400]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d908      	bls.n	8008c6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c58:	4b61      	ldr	r3, [pc, #388]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008c5a:	69db      	ldr	r3, [r3, #28]
 8008c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	495e      	ldr	r1, [pc, #376]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0320 	and.w	r3, r3, #32
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d010      	beq.n	8008c98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	69da      	ldr	r2, [r3, #28]
 8008c7a:	4b59      	ldr	r3, [pc, #356]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d908      	bls.n	8008c98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008c86:	4b56      	ldr	r3, [pc, #344]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	4953      	ldr	r1, [pc, #332]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008c94:	4313      	orrs	r3, r2
 8008c96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 0302 	and.w	r3, r3, #2
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d010      	beq.n	8008cc6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68da      	ldr	r2, [r3, #12]
 8008ca8:	4b4d      	ldr	r3, [pc, #308]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	f003 030f 	and.w	r3, r3, #15
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d908      	bls.n	8008cc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cb4:	4b4a      	ldr	r3, [pc, #296]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	f023 020f 	bic.w	r2, r3, #15
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	4947      	ldr	r1, [pc, #284]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d055      	beq.n	8008d7e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008cd2:	4b43      	ldr	r3, [pc, #268]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	4940      	ldr	r1, [pc, #256]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d107      	bne.n	8008cfc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cec:	4b3c      	ldr	r3, [pc, #240]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d121      	bne.n	8008d3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e0f6      	b.n	8008eea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d107      	bne.n	8008d14 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d04:	4b36      	ldr	r3, [pc, #216]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d115      	bne.n	8008d3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e0ea      	b.n	8008eea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d107      	bne.n	8008d2c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d1c:	4b30      	ldr	r3, [pc, #192]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d109      	bne.n	8008d3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e0de      	b.n	8008eea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d2c:	4b2c      	ldr	r3, [pc, #176]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0304 	and.w	r3, r3, #4
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d101      	bne.n	8008d3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e0d6      	b.n	8008eea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d3c:	4b28      	ldr	r3, [pc, #160]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	f023 0207 	bic.w	r2, r3, #7
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	4925      	ldr	r1, [pc, #148]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d4e:	f7f9 fda3 	bl	8002898 <HAL_GetTick>
 8008d52:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d54:	e00a      	b.n	8008d6c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d56:	f7f9 fd9f 	bl	8002898 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d901      	bls.n	8008d6c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e0be      	b.n	8008eea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d6c:	4b1c      	ldr	r3, [pc, #112]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	00db      	lsls	r3, r3, #3
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d1eb      	bne.n	8008d56 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 0302 	and.w	r3, r3, #2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d010      	beq.n	8008dac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	4b14      	ldr	r3, [pc, #80]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	f003 030f 	and.w	r3, r3, #15
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d208      	bcs.n	8008dac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d9a:	4b11      	ldr	r3, [pc, #68]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	f023 020f 	bic.w	r2, r3, #15
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	490e      	ldr	r1, [pc, #56]	; (8008de0 <HAL_RCC_ClockConfig+0x244>)
 8008da8:	4313      	orrs	r3, r2
 8008daa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008dac:	4b0b      	ldr	r3, [pc, #44]	; (8008ddc <HAL_RCC_ClockConfig+0x240>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d214      	bcs.n	8008de4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dba:	4b08      	ldr	r3, [pc, #32]	; (8008ddc <HAL_RCC_ClockConfig+0x240>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f023 020f 	bic.w	r2, r3, #15
 8008dc2:	4906      	ldr	r1, [pc, #24]	; (8008ddc <HAL_RCC_ClockConfig+0x240>)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dca:	4b04      	ldr	r3, [pc, #16]	; (8008ddc <HAL_RCC_ClockConfig+0x240>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 030f 	and.w	r3, r3, #15
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d005      	beq.n	8008de4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e086      	b.n	8008eea <HAL_RCC_ClockConfig+0x34e>
 8008ddc:	52002000 	.word	0x52002000
 8008de0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d010      	beq.n	8008e12 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	691a      	ldr	r2, [r3, #16]
 8008df4:	4b3f      	ldr	r3, [pc, #252]	; (8008ef4 <HAL_RCC_ClockConfig+0x358>)
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d208      	bcs.n	8008e12 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e00:	4b3c      	ldr	r3, [pc, #240]	; (8008ef4 <HAL_RCC_ClockConfig+0x358>)
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	4939      	ldr	r1, [pc, #228]	; (8008ef4 <HAL_RCC_ClockConfig+0x358>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0308 	and.w	r3, r3, #8
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d010      	beq.n	8008e40 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	695a      	ldr	r2, [r3, #20]
 8008e22:	4b34      	ldr	r3, [pc, #208]	; (8008ef4 <HAL_RCC_ClockConfig+0x358>)
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d208      	bcs.n	8008e40 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e2e:	4b31      	ldr	r3, [pc, #196]	; (8008ef4 <HAL_RCC_ClockConfig+0x358>)
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	492e      	ldr	r1, [pc, #184]	; (8008ef4 <HAL_RCC_ClockConfig+0x358>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0310 	and.w	r3, r3, #16
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d010      	beq.n	8008e6e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	699a      	ldr	r2, [r3, #24]
 8008e50:	4b28      	ldr	r3, [pc, #160]	; (8008ef4 <HAL_RCC_ClockConfig+0x358>)
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d208      	bcs.n	8008e6e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e5c:	4b25      	ldr	r3, [pc, #148]	; (8008ef4 <HAL_RCC_ClockConfig+0x358>)
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	4922      	ldr	r1, [pc, #136]	; (8008ef4 <HAL_RCC_ClockConfig+0x358>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0320 	and.w	r3, r3, #32
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d010      	beq.n	8008e9c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	69da      	ldr	r2, [r3, #28]
 8008e7e:	4b1d      	ldr	r3, [pc, #116]	; (8008ef4 <HAL_RCC_ClockConfig+0x358>)
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d208      	bcs.n	8008e9c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008e8a:	4b1a      	ldr	r3, [pc, #104]	; (8008ef4 <HAL_RCC_ClockConfig+0x358>)
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	4917      	ldr	r1, [pc, #92]	; (8008ef4 <HAL_RCC_ClockConfig+0x358>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e9c:	f000 f834 	bl	8008f08 <HAL_RCC_GetSysClockFreq>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	4b14      	ldr	r3, [pc, #80]	; (8008ef4 <HAL_RCC_ClockConfig+0x358>)
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	0a1b      	lsrs	r3, r3, #8
 8008ea8:	f003 030f 	and.w	r3, r3, #15
 8008eac:	4912      	ldr	r1, [pc, #72]	; (8008ef8 <HAL_RCC_ClockConfig+0x35c>)
 8008eae:	5ccb      	ldrb	r3, [r1, r3]
 8008eb0:	f003 031f 	and.w	r3, r3, #31
 8008eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008eba:	4b0e      	ldr	r3, [pc, #56]	; (8008ef4 <HAL_RCC_ClockConfig+0x358>)
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	f003 030f 	and.w	r3, r3, #15
 8008ec2:	4a0d      	ldr	r2, [pc, #52]	; (8008ef8 <HAL_RCC_ClockConfig+0x35c>)
 8008ec4:	5cd3      	ldrb	r3, [r2, r3]
 8008ec6:	f003 031f 	and.w	r3, r3, #31
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed0:	4a0a      	ldr	r2, [pc, #40]	; (8008efc <HAL_RCC_ClockConfig+0x360>)
 8008ed2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ed4:	4a0a      	ldr	r2, [pc, #40]	; (8008f00 <HAL_RCC_ClockConfig+0x364>)
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008eda:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <HAL_RCC_ClockConfig+0x368>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7f9 fc90 	bl	8002804 <HAL_InitTick>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3718      	adds	r7, #24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	58024400 	.word	0x58024400
 8008ef8:	0800fe30 	.word	0x0800fe30
 8008efc:	24000030 	.word	0x24000030
 8008f00:	2400002c 	.word	0x2400002c
 8008f04:	24000034 	.word	0x24000034

08008f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b089      	sub	sp, #36	; 0x24
 8008f0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f0e:	4bb3      	ldr	r3, [pc, #716]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f16:	2b18      	cmp	r3, #24
 8008f18:	f200 8155 	bhi.w	80091c6 <HAL_RCC_GetSysClockFreq+0x2be>
 8008f1c:	a201      	add	r2, pc, #4	; (adr r2, 8008f24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f22:	bf00      	nop
 8008f24:	08008f89 	.word	0x08008f89
 8008f28:	080091c7 	.word	0x080091c7
 8008f2c:	080091c7 	.word	0x080091c7
 8008f30:	080091c7 	.word	0x080091c7
 8008f34:	080091c7 	.word	0x080091c7
 8008f38:	080091c7 	.word	0x080091c7
 8008f3c:	080091c7 	.word	0x080091c7
 8008f40:	080091c7 	.word	0x080091c7
 8008f44:	08008faf 	.word	0x08008faf
 8008f48:	080091c7 	.word	0x080091c7
 8008f4c:	080091c7 	.word	0x080091c7
 8008f50:	080091c7 	.word	0x080091c7
 8008f54:	080091c7 	.word	0x080091c7
 8008f58:	080091c7 	.word	0x080091c7
 8008f5c:	080091c7 	.word	0x080091c7
 8008f60:	080091c7 	.word	0x080091c7
 8008f64:	08008fb5 	.word	0x08008fb5
 8008f68:	080091c7 	.word	0x080091c7
 8008f6c:	080091c7 	.word	0x080091c7
 8008f70:	080091c7 	.word	0x080091c7
 8008f74:	080091c7 	.word	0x080091c7
 8008f78:	080091c7 	.word	0x080091c7
 8008f7c:	080091c7 	.word	0x080091c7
 8008f80:	080091c7 	.word	0x080091c7
 8008f84:	08008fbb 	.word	0x08008fbb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f88:	4b94      	ldr	r3, [pc, #592]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0320 	and.w	r3, r3, #32
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d009      	beq.n	8008fa8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f94:	4b91      	ldr	r3, [pc, #580]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	08db      	lsrs	r3, r3, #3
 8008f9a:	f003 0303 	and.w	r3, r3, #3
 8008f9e:	4a90      	ldr	r2, [pc, #576]	; (80091e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008fa6:	e111      	b.n	80091cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008fa8:	4b8d      	ldr	r3, [pc, #564]	; (80091e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008faa:	61bb      	str	r3, [r7, #24]
    break;
 8008fac:	e10e      	b.n	80091cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008fae:	4b8d      	ldr	r3, [pc, #564]	; (80091e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008fb0:	61bb      	str	r3, [r7, #24]
    break;
 8008fb2:	e10b      	b.n	80091cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008fb4:	4b8c      	ldr	r3, [pc, #560]	; (80091e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008fb6:	61bb      	str	r3, [r7, #24]
    break;
 8008fb8:	e108      	b.n	80091cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fba:	4b88      	ldr	r3, [pc, #544]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fbe:	f003 0303 	and.w	r3, r3, #3
 8008fc2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008fc4:	4b85      	ldr	r3, [pc, #532]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc8:	091b      	lsrs	r3, r3, #4
 8008fca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008fd0:	4b82      	ldr	r3, [pc, #520]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008fda:	4b80      	ldr	r3, [pc, #512]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fde:	08db      	lsrs	r3, r3, #3
 8008fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	fb02 f303 	mul.w	r3, r2, r3
 8008fea:	ee07 3a90 	vmov	s15, r3
 8008fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 80e1 	beq.w	80091c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2b02      	cmp	r3, #2
 8009002:	f000 8083 	beq.w	800910c <HAL_RCC_GetSysClockFreq+0x204>
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2b02      	cmp	r3, #2
 800900a:	f200 80a1 	bhi.w	8009150 <HAL_RCC_GetSysClockFreq+0x248>
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_RCC_GetSysClockFreq+0x114>
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d056      	beq.n	80090c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800901a:	e099      	b.n	8009150 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800901c:	4b6f      	ldr	r3, [pc, #444]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0320 	and.w	r3, r3, #32
 8009024:	2b00      	cmp	r3, #0
 8009026:	d02d      	beq.n	8009084 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009028:	4b6c      	ldr	r3, [pc, #432]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	08db      	lsrs	r3, r3, #3
 800902e:	f003 0303 	and.w	r3, r3, #3
 8009032:	4a6b      	ldr	r2, [pc, #428]	; (80091e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009034:	fa22 f303 	lsr.w	r3, r2, r3
 8009038:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	ee07 3a90 	vmov	s15, r3
 8009040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009052:	4b62      	ldr	r3, [pc, #392]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800905a:	ee07 3a90 	vmov	s15, r3
 800905e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009062:	ed97 6a02 	vldr	s12, [r7, #8]
 8009066:	eddf 5a61 	vldr	s11, [pc, #388]	; 80091ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800906a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800906e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800907a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009082:	e087      	b.n	8009194 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80091f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009096:	4b51      	ldr	r3, [pc, #324]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80090aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80091ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80090ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090c6:	e065      	b.n	8009194 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	ee07 3a90 	vmov	s15, r3
 80090ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80091f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80090d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090da:	4b40      	ldr	r3, [pc, #256]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80090ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80091ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80090f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800910a:	e043      	b.n	8009194 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009116:	eddf 6a38 	vldr	s13, [pc, #224]	; 80091f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800911a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800911e:	4b2f      	ldr	r3, [pc, #188]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009132:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80091ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8009136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800913a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800913e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800914a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800914e:	e021      	b.n	8009194 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80091f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800915e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009162:	4b1e      	ldr	r3, [pc, #120]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009172:	ed97 6a02 	vldr	s12, [r7, #8]
 8009176:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80091ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800917a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800917e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800918a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800918e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009192:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009194:	4b11      	ldr	r3, [pc, #68]	; (80091dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009198:	0a5b      	lsrs	r3, r3, #9
 800919a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800919e:	3301      	adds	r3, #1
 80091a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	ee07 3a90 	vmov	s15, r3
 80091a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80091ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80091b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091b8:	ee17 3a90 	vmov	r3, s15
 80091bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80091be:	e005      	b.n	80091cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	61bb      	str	r3, [r7, #24]
    break;
 80091c4:	e002      	b.n	80091cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80091c6:	4b07      	ldr	r3, [pc, #28]	; (80091e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80091c8:	61bb      	str	r3, [r7, #24]
    break;
 80091ca:	bf00      	nop
  }

  return sysclockfreq;
 80091cc:	69bb      	ldr	r3, [r7, #24]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3724      	adds	r7, #36	; 0x24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	58024400 	.word	0x58024400
 80091e0:	03d09000 	.word	0x03d09000
 80091e4:	003d0900 	.word	0x003d0900
 80091e8:	017d7840 	.word	0x017d7840
 80091ec:	46000000 	.word	0x46000000
 80091f0:	4c742400 	.word	0x4c742400
 80091f4:	4a742400 	.word	0x4a742400
 80091f8:	4bbebc20 	.word	0x4bbebc20

080091fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009202:	f7ff fe81 	bl	8008f08 <HAL_RCC_GetSysClockFreq>
 8009206:	4602      	mov	r2, r0
 8009208:	4b10      	ldr	r3, [pc, #64]	; (800924c <HAL_RCC_GetHCLKFreq+0x50>)
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	0a1b      	lsrs	r3, r3, #8
 800920e:	f003 030f 	and.w	r3, r3, #15
 8009212:	490f      	ldr	r1, [pc, #60]	; (8009250 <HAL_RCC_GetHCLKFreq+0x54>)
 8009214:	5ccb      	ldrb	r3, [r1, r3]
 8009216:	f003 031f 	and.w	r3, r3, #31
 800921a:	fa22 f303 	lsr.w	r3, r2, r3
 800921e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009220:	4b0a      	ldr	r3, [pc, #40]	; (800924c <HAL_RCC_GetHCLKFreq+0x50>)
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	f003 030f 	and.w	r3, r3, #15
 8009228:	4a09      	ldr	r2, [pc, #36]	; (8009250 <HAL_RCC_GetHCLKFreq+0x54>)
 800922a:	5cd3      	ldrb	r3, [r2, r3]
 800922c:	f003 031f 	and.w	r3, r3, #31
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	fa22 f303 	lsr.w	r3, r2, r3
 8009236:	4a07      	ldr	r2, [pc, #28]	; (8009254 <HAL_RCC_GetHCLKFreq+0x58>)
 8009238:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800923a:	4a07      	ldr	r2, [pc, #28]	; (8009258 <HAL_RCC_GetHCLKFreq+0x5c>)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009240:	4b04      	ldr	r3, [pc, #16]	; (8009254 <HAL_RCC_GetHCLKFreq+0x58>)
 8009242:	681b      	ldr	r3, [r3, #0]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	58024400 	.word	0x58024400
 8009250:	0800fe30 	.word	0x0800fe30
 8009254:	24000030 	.word	0x24000030
 8009258:	2400002c 	.word	0x2400002c

0800925c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009260:	f7ff ffcc 	bl	80091fc <HAL_RCC_GetHCLKFreq>
 8009264:	4602      	mov	r2, r0
 8009266:	4b06      	ldr	r3, [pc, #24]	; (8009280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	091b      	lsrs	r3, r3, #4
 800926c:	f003 0307 	and.w	r3, r3, #7
 8009270:	4904      	ldr	r1, [pc, #16]	; (8009284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009272:	5ccb      	ldrb	r3, [r1, r3]
 8009274:	f003 031f 	and.w	r3, r3, #31
 8009278:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800927c:	4618      	mov	r0, r3
 800927e:	bd80      	pop	{r7, pc}
 8009280:	58024400 	.word	0x58024400
 8009284:	0800fe30 	.word	0x0800fe30

08009288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800928c:	f7ff ffb6 	bl	80091fc <HAL_RCC_GetHCLKFreq>
 8009290:	4602      	mov	r2, r0
 8009292:	4b06      	ldr	r3, [pc, #24]	; (80092ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	0a1b      	lsrs	r3, r3, #8
 8009298:	f003 0307 	and.w	r3, r3, #7
 800929c:	4904      	ldr	r1, [pc, #16]	; (80092b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800929e:	5ccb      	ldrb	r3, [r1, r3]
 80092a0:	f003 031f 	and.w	r3, r3, #31
 80092a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	58024400 	.word	0x58024400
 80092b0:	0800fe30 	.word	0x0800fe30

080092b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092bc:	2300      	movs	r3, #0
 80092be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092c0:	2300      	movs	r3, #0
 80092c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d03f      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092d8:	d02a      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80092da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092de:	d824      	bhi.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80092e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092e4:	d018      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80092e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092ea:	d81e      	bhi.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d003      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80092f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092f4:	d007      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80092f6:	e018      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092f8:	4ba3      	ldr	r3, [pc, #652]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	4aa2      	ldr	r2, [pc, #648]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009302:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009304:	e015      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	3304      	adds	r3, #4
 800930a:	2102      	movs	r1, #2
 800930c:	4618      	mov	r0, r3
 800930e:	f001 fff9 	bl	800b304 <RCCEx_PLL2_Config>
 8009312:	4603      	mov	r3, r0
 8009314:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009316:	e00c      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	3324      	adds	r3, #36	; 0x24
 800931c:	2102      	movs	r1, #2
 800931e:	4618      	mov	r0, r3
 8009320:	f002 f8a2 	bl	800b468 <RCCEx_PLL3_Config>
 8009324:	4603      	mov	r3, r0
 8009326:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009328:	e003      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	75fb      	strb	r3, [r7, #23]
      break;
 800932e:	e000      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d109      	bne.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009338:	4b93      	ldr	r3, [pc, #588]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800933a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800933c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009344:	4990      	ldr	r1, [pc, #576]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009346:	4313      	orrs	r3, r2
 8009348:	650b      	str	r3, [r1, #80]	; 0x50
 800934a:	e001      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800934c:	7dfb      	ldrb	r3, [r7, #23]
 800934e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009358:	2b00      	cmp	r3, #0
 800935a:	d03d      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009360:	2b04      	cmp	r3, #4
 8009362:	d826      	bhi.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009364:	a201      	add	r2, pc, #4	; (adr r2, 800936c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936a:	bf00      	nop
 800936c:	08009381 	.word	0x08009381
 8009370:	0800938f 	.word	0x0800938f
 8009374:	080093a1 	.word	0x080093a1
 8009378:	080093b9 	.word	0x080093b9
 800937c:	080093b9 	.word	0x080093b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009380:	4b81      	ldr	r3, [pc, #516]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	4a80      	ldr	r2, [pc, #512]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800938a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800938c:	e015      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3304      	adds	r3, #4
 8009392:	2100      	movs	r1, #0
 8009394:	4618      	mov	r0, r3
 8009396:	f001 ffb5 	bl	800b304 <RCCEx_PLL2_Config>
 800939a:	4603      	mov	r3, r0
 800939c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800939e:	e00c      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3324      	adds	r3, #36	; 0x24
 80093a4:	2100      	movs	r1, #0
 80093a6:	4618      	mov	r0, r3
 80093a8:	f002 f85e 	bl	800b468 <RCCEx_PLL3_Config>
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093b0:	e003      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]
      break;
 80093b6:	e000      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80093b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d109      	bne.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093c0:	4b71      	ldr	r3, [pc, #452]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093c4:	f023 0207 	bic.w	r2, r3, #7
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093cc:	496e      	ldr	r1, [pc, #440]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093ce:	4313      	orrs	r3, r2
 80093d0:	650b      	str	r3, [r1, #80]	; 0x50
 80093d2:	e001      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
 80093d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d042      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ec:	d02b      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80093ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093f2:	d825      	bhi.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80093f4:	2bc0      	cmp	r3, #192	; 0xc0
 80093f6:	d028      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80093f8:	2bc0      	cmp	r3, #192	; 0xc0
 80093fa:	d821      	bhi.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80093fc:	2b80      	cmp	r3, #128	; 0x80
 80093fe:	d016      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009400:	2b80      	cmp	r3, #128	; 0x80
 8009402:	d81d      	bhi.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009408:	2b40      	cmp	r3, #64	; 0x40
 800940a:	d007      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800940c:	e018      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800940e:	4b5e      	ldr	r3, [pc, #376]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	4a5d      	ldr	r2, [pc, #372]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009418:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800941a:	e017      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	3304      	adds	r3, #4
 8009420:	2100      	movs	r1, #0
 8009422:	4618      	mov	r0, r3
 8009424:	f001 ff6e 	bl	800b304 <RCCEx_PLL2_Config>
 8009428:	4603      	mov	r3, r0
 800942a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800942c:	e00e      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	3324      	adds	r3, #36	; 0x24
 8009432:	2100      	movs	r1, #0
 8009434:	4618      	mov	r0, r3
 8009436:	f002 f817 	bl	800b468 <RCCEx_PLL3_Config>
 800943a:	4603      	mov	r3, r0
 800943c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800943e:	e005      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	75fb      	strb	r3, [r7, #23]
      break;
 8009444:	e002      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009446:	bf00      	nop
 8009448:	e000      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800944a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800944c:	7dfb      	ldrb	r3, [r7, #23]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d109      	bne.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009452:	4b4d      	ldr	r3, [pc, #308]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009456:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800945e:	494a      	ldr	r1, [pc, #296]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009460:	4313      	orrs	r3, r2
 8009462:	650b      	str	r3, [r1, #80]	; 0x50
 8009464:	e001      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009466:	7dfb      	ldrb	r3, [r7, #23]
 8009468:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009472:	2b00      	cmp	r3, #0
 8009474:	d049      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800947c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009480:	d030      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009486:	d82a      	bhi.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009488:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800948c:	d02c      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800948e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009492:	d824      	bhi.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009498:	d018      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800949a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800949e:	d81e      	bhi.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d003      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80094a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094a8:	d007      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x206>
 80094aa:	e018      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ac:	4b36      	ldr	r3, [pc, #216]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b0:	4a35      	ldr	r2, [pc, #212]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094b8:	e017      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3304      	adds	r3, #4
 80094be:	2100      	movs	r1, #0
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 ff1f 	bl	800b304 <RCCEx_PLL2_Config>
 80094c6:	4603      	mov	r3, r0
 80094c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80094ca:	e00e      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3324      	adds	r3, #36	; 0x24
 80094d0:	2100      	movs	r1, #0
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 ffc8 	bl	800b468 <RCCEx_PLL3_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094dc:	e005      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	75fb      	strb	r3, [r7, #23]
      break;
 80094e2:	e002      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80094e4:	bf00      	nop
 80094e6:	e000      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80094e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10a      	bne.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80094f0:	4b25      	ldr	r3, [pc, #148]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094fe:	4922      	ldr	r1, [pc, #136]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009500:	4313      	orrs	r3, r2
 8009502:	658b      	str	r3, [r1, #88]	; 0x58
 8009504:	e001      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009506:	7dfb      	ldrb	r3, [r7, #23]
 8009508:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009512:	2b00      	cmp	r3, #0
 8009514:	d04b      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800951c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009520:	d030      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009522:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009526:	d82a      	bhi.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009528:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800952c:	d02e      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800952e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009532:	d824      	bhi.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009534:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009538:	d018      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800953a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800953e:	d81e      	bhi.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009540:	2b00      	cmp	r3, #0
 8009542:	d003      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009548:	d007      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800954a:	e018      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800954c:	4b0e      	ldr	r3, [pc, #56]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	4a0d      	ldr	r2, [pc, #52]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009556:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009558:	e019      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	3304      	adds	r3, #4
 800955e:	2100      	movs	r1, #0
 8009560:	4618      	mov	r0, r3
 8009562:	f001 fecf 	bl	800b304 <RCCEx_PLL2_Config>
 8009566:	4603      	mov	r3, r0
 8009568:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800956a:	e010      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3324      	adds	r3, #36	; 0x24
 8009570:	2100      	movs	r1, #0
 8009572:	4618      	mov	r0, r3
 8009574:	f001 ff78 	bl	800b468 <RCCEx_PLL3_Config>
 8009578:	4603      	mov	r3, r0
 800957a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800957c:	e007      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	75fb      	strb	r3, [r7, #23]
      break;
 8009582:	e004      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009584:	bf00      	nop
 8009586:	e002      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009588:	58024400 	.word	0x58024400
      break;
 800958c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800958e:	7dfb      	ldrb	r3, [r7, #23]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009594:	4b99      	ldr	r3, [pc, #612]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009598:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095a2:	4996      	ldr	r1, [pc, #600]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	658b      	str	r3, [r1, #88]	; 0x58
 80095a8:	e001      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d032      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095be:	2b30      	cmp	r3, #48	; 0x30
 80095c0:	d01c      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x348>
 80095c2:	2b30      	cmp	r3, #48	; 0x30
 80095c4:	d817      	bhi.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80095c6:	2b20      	cmp	r3, #32
 80095c8:	d00c      	beq.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80095ca:	2b20      	cmp	r3, #32
 80095cc:	d813      	bhi.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d016      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80095d2:	2b10      	cmp	r3, #16
 80095d4:	d10f      	bne.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095d6:	4b89      	ldr	r3, [pc, #548]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095da:	4a88      	ldr	r2, [pc, #544]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80095e2:	e00e      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3304      	adds	r3, #4
 80095e8:	2102      	movs	r1, #2
 80095ea:	4618      	mov	r0, r3
 80095ec:	f001 fe8a 	bl	800b304 <RCCEx_PLL2_Config>
 80095f0:	4603      	mov	r3, r0
 80095f2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80095f4:	e005      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	75fb      	strb	r3, [r7, #23]
      break;
 80095fa:	e002      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80095fc:	bf00      	nop
 80095fe:	e000      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d109      	bne.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009608:	4b7c      	ldr	r3, [pc, #496]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800960a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800960c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009614:	4979      	ldr	r1, [pc, #484]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009616:	4313      	orrs	r3, r2
 8009618:	64cb      	str	r3, [r1, #76]	; 0x4c
 800961a:	e001      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d047      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009634:	d030      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009636:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800963a:	d82a      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800963c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009640:	d02c      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009642:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009646:	d824      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800964c:	d018      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800964e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009652:	d81e      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009654:	2b00      	cmp	r3, #0
 8009656:	d003      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800965c:	d007      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800965e:	e018      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009660:	4b66      	ldr	r3, [pc, #408]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009664:	4a65      	ldr	r2, [pc, #404]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800966a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800966c:	e017      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3304      	adds	r3, #4
 8009672:	2100      	movs	r1, #0
 8009674:	4618      	mov	r0, r3
 8009676:	f001 fe45 	bl	800b304 <RCCEx_PLL2_Config>
 800967a:	4603      	mov	r3, r0
 800967c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800967e:	e00e      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3324      	adds	r3, #36	; 0x24
 8009684:	2100      	movs	r1, #0
 8009686:	4618      	mov	r0, r3
 8009688:	f001 feee 	bl	800b468 <RCCEx_PLL3_Config>
 800968c:	4603      	mov	r3, r0
 800968e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009690:	e005      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	75fb      	strb	r3, [r7, #23]
      break;
 8009696:	e002      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009698:	bf00      	nop
 800969a:	e000      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800969c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d109      	bne.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096a4:	4b55      	ldr	r3, [pc, #340]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096b0:	4952      	ldr	r1, [pc, #328]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	650b      	str	r3, [r1, #80]	; 0x50
 80096b6:	e001      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
 80096ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d049      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096d0:	d02e      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80096d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096d6:	d828      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80096d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096dc:	d02a      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80096de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096e2:	d822      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80096e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80096e8:	d026      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80096ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80096ee:	d81c      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80096f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096f4:	d010      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80096f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096fa:	d816      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d01d      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009704:	d111      	bne.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3304      	adds	r3, #4
 800970a:	2101      	movs	r1, #1
 800970c:	4618      	mov	r0, r3
 800970e:	f001 fdf9 	bl	800b304 <RCCEx_PLL2_Config>
 8009712:	4603      	mov	r3, r0
 8009714:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009716:	e012      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	3324      	adds	r3, #36	; 0x24
 800971c:	2101      	movs	r1, #1
 800971e:	4618      	mov	r0, r3
 8009720:	f001 fea2 	bl	800b468 <RCCEx_PLL3_Config>
 8009724:	4603      	mov	r3, r0
 8009726:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009728:	e009      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	75fb      	strb	r3, [r7, #23]
      break;
 800972e:	e006      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009730:	bf00      	nop
 8009732:	e004      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009734:	bf00      	nop
 8009736:	e002      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009738:	bf00      	nop
 800973a:	e000      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800973c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800973e:	7dfb      	ldrb	r3, [r7, #23]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d109      	bne.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009744:	4b2d      	ldr	r3, [pc, #180]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009748:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009750:	492a      	ldr	r1, [pc, #168]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009752:	4313      	orrs	r3, r2
 8009754:	650b      	str	r3, [r1, #80]	; 0x50
 8009756:	e001      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009758:	7dfb      	ldrb	r3, [r7, #23]
 800975a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d04d      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800976e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009772:	d02e      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009778:	d828      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x518>
 800977a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800977e:	d02a      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009784:	d822      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009786:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800978a:	d026      	beq.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x526>
 800978c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009790:	d81c      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009796:	d010      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800979c:	d816      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x518>
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d01d      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80097a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097a6:	d111      	bne.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3304      	adds	r3, #4
 80097ac:	2101      	movs	r1, #1
 80097ae:	4618      	mov	r0, r3
 80097b0:	f001 fda8 	bl	800b304 <RCCEx_PLL2_Config>
 80097b4:	4603      	mov	r3, r0
 80097b6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097b8:	e012      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	3324      	adds	r3, #36	; 0x24
 80097be:	2101      	movs	r1, #1
 80097c0:	4618      	mov	r0, r3
 80097c2:	f001 fe51 	bl	800b468 <RCCEx_PLL3_Config>
 80097c6:	4603      	mov	r3, r0
 80097c8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097ca:	e009      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	75fb      	strb	r3, [r7, #23]
      break;
 80097d0:	e006      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80097d2:	bf00      	nop
 80097d4:	e004      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80097d6:	bf00      	nop
 80097d8:	e002      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80097da:	bf00      	nop
 80097dc:	e000      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80097de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10c      	bne.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80097e6:	4b05      	ldr	r3, [pc, #20]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80097e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80097f4:	4901      	ldr	r1, [pc, #4]	; (80097fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80097f6:	4313      	orrs	r3, r2
 80097f8:	658b      	str	r3, [r1, #88]	; 0x58
 80097fa:	e003      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80097fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009800:	7dfb      	ldrb	r3, [r7, #23]
 8009802:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d02f      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009818:	d00e      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800981a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800981e:	d814      	bhi.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009820:	2b00      	cmp	r3, #0
 8009822:	d015      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009824:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009828:	d10f      	bne.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800982a:	4baf      	ldr	r3, [pc, #700]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800982c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982e:	4aae      	ldr	r2, [pc, #696]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009836:	e00c      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	3304      	adds	r3, #4
 800983c:	2101      	movs	r1, #1
 800983e:	4618      	mov	r0, r3
 8009840:	f001 fd60 	bl	800b304 <RCCEx_PLL2_Config>
 8009844:	4603      	mov	r3, r0
 8009846:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009848:	e003      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	75fb      	strb	r3, [r7, #23]
      break;
 800984e:	e000      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d109      	bne.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009858:	4ba3      	ldr	r3, [pc, #652]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800985a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800985c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009864:	49a0      	ldr	r1, [pc, #640]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009866:	4313      	orrs	r3, r2
 8009868:	650b      	str	r3, [r1, #80]	; 0x50
 800986a:	e001      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800986c:	7dfb      	ldrb	r3, [r7, #23]
 800986e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d032      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009880:	2b03      	cmp	r3, #3
 8009882:	d81b      	bhi.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009884:	a201      	add	r2, pc, #4	; (adr r2, 800988c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988a:	bf00      	nop
 800988c:	080098c3 	.word	0x080098c3
 8009890:	0800989d 	.word	0x0800989d
 8009894:	080098ab 	.word	0x080098ab
 8009898:	080098c3 	.word	0x080098c3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800989c:	4b92      	ldr	r3, [pc, #584]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800989e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a0:	4a91      	ldr	r2, [pc, #580]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098a8:	e00c      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	3304      	adds	r3, #4
 80098ae:	2102      	movs	r1, #2
 80098b0:	4618      	mov	r0, r3
 80098b2:	f001 fd27 	bl	800b304 <RCCEx_PLL2_Config>
 80098b6:	4603      	mov	r3, r0
 80098b8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098ba:	e003      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	75fb      	strb	r3, [r7, #23]
      break;
 80098c0:	e000      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80098c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098c4:	7dfb      	ldrb	r3, [r7, #23]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d109      	bne.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80098ca:	4b87      	ldr	r3, [pc, #540]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ce:	f023 0203 	bic.w	r2, r3, #3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d6:	4984      	ldr	r1, [pc, #528]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098dc:	e001      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098de:	7dfb      	ldrb	r3, [r7, #23]
 80098e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 8086 	beq.w	80099fc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098f0:	4b7e      	ldr	r3, [pc, #504]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a7d      	ldr	r2, [pc, #500]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80098f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80098fc:	f7f8 ffcc 	bl	8002898 <HAL_GetTick>
 8009900:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009902:	e009      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009904:	f7f8 ffc8 	bl	8002898 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	2b64      	cmp	r3, #100	; 0x64
 8009910:	d902      	bls.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	75fb      	strb	r3, [r7, #23]
        break;
 8009916:	e005      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009918:	4b74      	ldr	r3, [pc, #464]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009920:	2b00      	cmp	r3, #0
 8009922:	d0ef      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d166      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800992a:	4b6f      	ldr	r3, [pc, #444]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800992c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009934:	4053      	eors	r3, r2
 8009936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800993a:	2b00      	cmp	r3, #0
 800993c:	d013      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800993e:	4b6a      	ldr	r3, [pc, #424]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009946:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009948:	4b67      	ldr	r3, [pc, #412]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800994a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994c:	4a66      	ldr	r2, [pc, #408]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800994e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009952:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009954:	4b64      	ldr	r3, [pc, #400]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009958:	4a63      	ldr	r2, [pc, #396]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800995a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800995e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009960:	4a61      	ldr	r2, [pc, #388]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800996c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009970:	d115      	bne.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009972:	f7f8 ff91 	bl	8002898 <HAL_GetTick>
 8009976:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009978:	e00b      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800997a:	f7f8 ff8d 	bl	8002898 <HAL_GetTick>
 800997e:	4602      	mov	r2, r0
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	f241 3288 	movw	r2, #5000	; 0x1388
 8009988:	4293      	cmp	r3, r2
 800998a:	d902      	bls.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	75fb      	strb	r3, [r7, #23]
            break;
 8009990:	e005      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009992:	4b55      	ldr	r3, [pc, #340]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0ed      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d126      	bne.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099b2:	d10d      	bne.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80099b4:	4b4c      	ldr	r3, [pc, #304]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099c2:	0919      	lsrs	r1, r3, #4
 80099c4:	4b4a      	ldr	r3, [pc, #296]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80099c6:	400b      	ands	r3, r1
 80099c8:	4947      	ldr	r1, [pc, #284]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	610b      	str	r3, [r1, #16]
 80099ce:	e005      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80099d0:	4b45      	ldr	r3, [pc, #276]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	4a44      	ldr	r2, [pc, #272]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80099da:	6113      	str	r3, [r2, #16]
 80099dc:	4b42      	ldr	r3, [pc, #264]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099ea:	493f      	ldr	r1, [pc, #252]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	670b      	str	r3, [r1, #112]	; 0x70
 80099f0:	e004      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80099f2:	7dfb      	ldrb	r3, [r7, #23]
 80099f4:	75bb      	strb	r3, [r7, #22]
 80099f6:	e001      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0301 	and.w	r3, r3, #1
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 8085 	beq.w	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a0e:	2b28      	cmp	r3, #40	; 0x28
 8009a10:	d866      	bhi.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009a12:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a18:	08009af5 	.word	0x08009af5
 8009a1c:	08009ae1 	.word	0x08009ae1
 8009a20:	08009ae1 	.word	0x08009ae1
 8009a24:	08009ae1 	.word	0x08009ae1
 8009a28:	08009ae1 	.word	0x08009ae1
 8009a2c:	08009ae1 	.word	0x08009ae1
 8009a30:	08009ae1 	.word	0x08009ae1
 8009a34:	08009ae1 	.word	0x08009ae1
 8009a38:	08009abd 	.word	0x08009abd
 8009a3c:	08009ae1 	.word	0x08009ae1
 8009a40:	08009ae1 	.word	0x08009ae1
 8009a44:	08009ae1 	.word	0x08009ae1
 8009a48:	08009ae1 	.word	0x08009ae1
 8009a4c:	08009ae1 	.word	0x08009ae1
 8009a50:	08009ae1 	.word	0x08009ae1
 8009a54:	08009ae1 	.word	0x08009ae1
 8009a58:	08009acf 	.word	0x08009acf
 8009a5c:	08009ae1 	.word	0x08009ae1
 8009a60:	08009ae1 	.word	0x08009ae1
 8009a64:	08009ae1 	.word	0x08009ae1
 8009a68:	08009ae1 	.word	0x08009ae1
 8009a6c:	08009ae1 	.word	0x08009ae1
 8009a70:	08009ae1 	.word	0x08009ae1
 8009a74:	08009ae1 	.word	0x08009ae1
 8009a78:	08009af5 	.word	0x08009af5
 8009a7c:	08009ae1 	.word	0x08009ae1
 8009a80:	08009ae1 	.word	0x08009ae1
 8009a84:	08009ae1 	.word	0x08009ae1
 8009a88:	08009ae1 	.word	0x08009ae1
 8009a8c:	08009ae1 	.word	0x08009ae1
 8009a90:	08009ae1 	.word	0x08009ae1
 8009a94:	08009ae1 	.word	0x08009ae1
 8009a98:	08009af5 	.word	0x08009af5
 8009a9c:	08009ae1 	.word	0x08009ae1
 8009aa0:	08009ae1 	.word	0x08009ae1
 8009aa4:	08009ae1 	.word	0x08009ae1
 8009aa8:	08009ae1 	.word	0x08009ae1
 8009aac:	08009ae1 	.word	0x08009ae1
 8009ab0:	08009ae1 	.word	0x08009ae1
 8009ab4:	08009ae1 	.word	0x08009ae1
 8009ab8:	08009af5 	.word	0x08009af5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f001 fc1e 	bl	800b304 <RCCEx_PLL2_Config>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009acc:	e013      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	3324      	adds	r3, #36	; 0x24
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f001 fcc7 	bl	800b468 <RCCEx_PLL3_Config>
 8009ada:	4603      	mov	r3, r0
 8009adc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009ade:	e00a      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ae4:	e007      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009ae6:	bf00      	nop
 8009ae8:	58024400 	.word	0x58024400
 8009aec:	58024800 	.word	0x58024800
 8009af0:	00ffffcf 	.word	0x00ffffcf
      break;
 8009af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d109      	bne.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009afc:	4b96      	ldr	r3, [pc, #600]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b00:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b08:	4993      	ldr	r1, [pc, #588]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	654b      	str	r3, [r1, #84]	; 0x54
 8009b0e:	e001      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
 8009b12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0302 	and.w	r3, r3, #2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d038      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b24:	2b05      	cmp	r3, #5
 8009b26:	d821      	bhi.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009b28:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2e:	bf00      	nop
 8009b30:	08009b73 	.word	0x08009b73
 8009b34:	08009b49 	.word	0x08009b49
 8009b38:	08009b5b 	.word	0x08009b5b
 8009b3c:	08009b73 	.word	0x08009b73
 8009b40:	08009b73 	.word	0x08009b73
 8009b44:	08009b73 	.word	0x08009b73
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f001 fbd8 	bl	800b304 <RCCEx_PLL2_Config>
 8009b54:	4603      	mov	r3, r0
 8009b56:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b58:	e00c      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	3324      	adds	r3, #36	; 0x24
 8009b5e:	2101      	movs	r1, #1
 8009b60:	4618      	mov	r0, r3
 8009b62:	f001 fc81 	bl	800b468 <RCCEx_PLL3_Config>
 8009b66:	4603      	mov	r3, r0
 8009b68:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b6a:	e003      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b70:	e000      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d109      	bne.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b7a:	4b77      	ldr	r3, [pc, #476]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7e:	f023 0207 	bic.w	r2, r3, #7
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b86:	4974      	ldr	r1, [pc, #464]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	654b      	str	r3, [r1, #84]	; 0x54
 8009b8c:	e001      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
 8009b90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0304 	and.w	r3, r3, #4
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d03a      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba4:	2b05      	cmp	r3, #5
 8009ba6:	d821      	bhi.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009ba8:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bae:	bf00      	nop
 8009bb0:	08009bf3 	.word	0x08009bf3
 8009bb4:	08009bc9 	.word	0x08009bc9
 8009bb8:	08009bdb 	.word	0x08009bdb
 8009bbc:	08009bf3 	.word	0x08009bf3
 8009bc0:	08009bf3 	.word	0x08009bf3
 8009bc4:	08009bf3 	.word	0x08009bf3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	2101      	movs	r1, #1
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f001 fb98 	bl	800b304 <RCCEx_PLL2_Config>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009bd8:	e00c      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	3324      	adds	r3, #36	; 0x24
 8009bde:	2101      	movs	r1, #1
 8009be0:	4618      	mov	r0, r3
 8009be2:	f001 fc41 	bl	800b468 <RCCEx_PLL3_Config>
 8009be6:	4603      	mov	r3, r0
 8009be8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009bea:	e003      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf0:	e000      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bf4:	7dfb      	ldrb	r3, [r7, #23]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10a      	bne.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bfa:	4b57      	ldr	r3, [pc, #348]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bfe:	f023 0207 	bic.w	r2, r3, #7
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c08:	4953      	ldr	r1, [pc, #332]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	658b      	str	r3, [r1, #88]	; 0x58
 8009c0e:	e001      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0320 	and.w	r3, r3, #32
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d04b      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c2a:	d02e      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c30:	d828      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c36:	d02a      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c3c:	d822      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c42:	d026      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009c44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c48:	d81c      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c4e:	d010      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c54:	d816      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d01d      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c5e:	d111      	bne.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3304      	adds	r3, #4
 8009c64:	2100      	movs	r1, #0
 8009c66:	4618      	mov	r0, r3
 8009c68:	f001 fb4c 	bl	800b304 <RCCEx_PLL2_Config>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c70:	e012      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3324      	adds	r3, #36	; 0x24
 8009c76:	2102      	movs	r1, #2
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f001 fbf5 	bl	800b468 <RCCEx_PLL3_Config>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c82:	e009      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	75fb      	strb	r3, [r7, #23]
      break;
 8009c88:	e006      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009c8a:	bf00      	nop
 8009c8c:	e004      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009c8e:	bf00      	nop
 8009c90:	e002      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009c92:	bf00      	nop
 8009c94:	e000      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c98:	7dfb      	ldrb	r3, [r7, #23]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c9e:	4b2e      	ldr	r3, [pc, #184]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cac:	492a      	ldr	r1, [pc, #168]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	654b      	str	r3, [r1, #84]	; 0x54
 8009cb2:	e001      	b.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d04d      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009cca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cce:	d02e      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009cd0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cd4:	d828      	bhi.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cda:	d02a      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce0:	d822      	bhi.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009ce2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ce6:	d026      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009ce8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cec:	d81c      	bhi.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cf2:	d010      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cf8:	d816      	bhi.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d01d      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d02:	d111      	bne.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	3304      	adds	r3, #4
 8009d08:	2100      	movs	r1, #0
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f001 fafa 	bl	800b304 <RCCEx_PLL2_Config>
 8009d10:	4603      	mov	r3, r0
 8009d12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d14:	e012      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	3324      	adds	r3, #36	; 0x24
 8009d1a:	2102      	movs	r1, #2
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 fba3 	bl	800b468 <RCCEx_PLL3_Config>
 8009d22:	4603      	mov	r3, r0
 8009d24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d26:	e009      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d2c:	e006      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d2e:	bf00      	nop
 8009d30:	e004      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d32:	bf00      	nop
 8009d34:	e002      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d36:	bf00      	nop
 8009d38:	e000      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10c      	bne.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d42:	4b05      	ldr	r3, [pc, #20]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d46:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d50:	4901      	ldr	r1, [pc, #4]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d52:	4313      	orrs	r3, r2
 8009d54:	658b      	str	r3, [r1, #88]	; 0x58
 8009d56:	e003      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009d58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
 8009d5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d04b      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d72:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d76:	d02e      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009d78:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d7c:	d828      	bhi.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d82:	d02a      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d88:	d822      	bhi.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009d8a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d8e:	d026      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009d90:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d94:	d81c      	bhi.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d9a:	d010      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009da0:	d816      	bhi.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d01d      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009daa:	d111      	bne.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	3304      	adds	r3, #4
 8009db0:	2100      	movs	r1, #0
 8009db2:	4618      	mov	r0, r3
 8009db4:	f001 faa6 	bl	800b304 <RCCEx_PLL2_Config>
 8009db8:	4603      	mov	r3, r0
 8009dba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009dbc:	e012      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3324      	adds	r3, #36	; 0x24
 8009dc2:	2102      	movs	r1, #2
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f001 fb4f 	bl	800b468 <RCCEx_PLL3_Config>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009dce:	e009      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd4:	e006      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009dd6:	bf00      	nop
 8009dd8:	e004      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009dda:	bf00      	nop
 8009ddc:	e002      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009dde:	bf00      	nop
 8009de0:	e000      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009de4:	7dfb      	ldrb	r3, [r7, #23]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10a      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009dea:	4b9d      	ldr	r3, [pc, #628]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009df8:	4999      	ldr	r1, [pc, #612]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	658b      	str	r3, [r1, #88]	; 0x58
 8009dfe:	e001      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0308 	and.w	r3, r3, #8
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d01a      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e1a:	d10a      	bne.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3324      	adds	r3, #36	; 0x24
 8009e20:	2102      	movs	r1, #2
 8009e22:	4618      	mov	r0, r3
 8009e24:	f001 fb20 	bl	800b468 <RCCEx_PLL3_Config>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e32:	4b8b      	ldr	r3, [pc, #556]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e40:	4987      	ldr	r1, [pc, #540]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e42:	4313      	orrs	r3, r2
 8009e44:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 0310 	and.w	r3, r3, #16
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d01a      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e5c:	d10a      	bne.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	3324      	adds	r3, #36	; 0x24
 8009e62:	2102      	movs	r1, #2
 8009e64:	4618      	mov	r0, r3
 8009e66:	f001 faff 	bl	800b468 <RCCEx_PLL3_Config>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d001      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e74:	4b7a      	ldr	r3, [pc, #488]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e82:	4977      	ldr	r1, [pc, #476]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e84:	4313      	orrs	r3, r2
 8009e86:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d034      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e9e:	d01d      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ea4:	d817      	bhi.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eae:	d009      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009eb0:	e011      	b.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f001 fa23 	bl	800b304 <RCCEx_PLL2_Config>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ec2:	e00c      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	3324      	adds	r3, #36	; 0x24
 8009ec8:	2102      	movs	r1, #2
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f001 facc 	bl	800b468 <RCCEx_PLL3_Config>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ed4:	e003      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8009eda:	e000      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ede:	7dfb      	ldrb	r3, [r7, #23]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ee4:	4b5e      	ldr	r3, [pc, #376]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ee8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ef2:	495b      	ldr	r1, [pc, #364]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	658b      	str	r3, [r1, #88]	; 0x58
 8009ef8:	e001      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d033      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f14:	d01c      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009f16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f1a:	d816      	bhi.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f20:	d003      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f26:	d007      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009f28:	e00f      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f2a:	4b4d      	ldr	r3, [pc, #308]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	4a4c      	ldr	r2, [pc, #304]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f36:	e00c      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	3324      	adds	r3, #36	; 0x24
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f001 fa92 	bl	800b468 <RCCEx_PLL3_Config>
 8009f44:	4603      	mov	r3, r0
 8009f46:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f48:	e003      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f4e:	e000      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009f50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10a      	bne.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f58:	4b41      	ldr	r3, [pc, #260]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f66:	493e      	ldr	r1, [pc, #248]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	654b      	str	r3, [r1, #84]	; 0x54
 8009f6c:	e001      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d029      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f8a:	d007      	beq.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009f8c:	e00f      	b.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f8e:	4b34      	ldr	r3, [pc, #208]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f92:	4a33      	ldr	r2, [pc, #204]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009f9a:	e00b      	b.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	2102      	movs	r1, #2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f001 f9ae 	bl	800b304 <RCCEx_PLL2_Config>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fac:	e002      	b.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8009fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d109      	bne.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009fba:	4b29      	ldr	r3, [pc, #164]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fc6:	4926      	ldr	r1, [pc, #152]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009fcc:	e001      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
 8009fd0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00a      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	3324      	adds	r3, #36	; 0x24
 8009fe2:	2102      	movs	r1, #2
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f001 fa3f 	bl	800b468 <RCCEx_PLL3_Config>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d033      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a004:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a008:	d017      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a00a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a00e:	d811      	bhi.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a014:	d013      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a01a:	d80b      	bhi.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d010      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a024:	d106      	bne.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a026:	4b0e      	ldr	r3, [pc, #56]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02a:	4a0d      	ldr	r2, [pc, #52]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a02c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a030:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a032:	e007      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	75fb      	strb	r3, [r7, #23]
      break;
 800a038:	e004      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a03a:	bf00      	nop
 800a03c:	e002      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a03e:	bf00      	nop
 800a040:	e000      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a042:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a044:	7dfb      	ldrb	r3, [r7, #23]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10c      	bne.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a04a:	4b05      	ldr	r3, [pc, #20]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a04e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a056:	4902      	ldr	r1, [pc, #8]	; (800a060 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a058:	4313      	orrs	r3, r2
 800a05a:	654b      	str	r3, [r1, #84]	; 0x54
 800a05c:	e004      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a05e:	bf00      	nop
 800a060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a064:	7dfb      	ldrb	r3, [r7, #23]
 800a066:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d008      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a074:	4b31      	ldr	r3, [pc, #196]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a078:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a080:	492e      	ldr	r1, [pc, #184]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a082:	4313      	orrs	r3, r2
 800a084:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d009      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a092:	4b2a      	ldr	r3, [pc, #168]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0a0:	4926      	ldr	r1, [pc, #152]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d008      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0b2:	4b22      	ldr	r3, [pc, #136]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0be:	491f      	ldr	r1, [pc, #124]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00d      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0d0:	4b1a      	ldr	r3, [pc, #104]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	4a19      	ldr	r2, [pc, #100]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0da:	6113      	str	r3, [r2, #16]
 800a0dc:	4b17      	ldr	r3, [pc, #92]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0de:	691a      	ldr	r2, [r3, #16]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a0e6:	4915      	ldr	r1, [pc, #84]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	da08      	bge.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a0f4:	4b11      	ldr	r3, [pc, #68]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a100:	490e      	ldr	r1, [pc, #56]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a102:	4313      	orrs	r3, r2
 800a104:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d009      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a112:	4b0a      	ldr	r3, [pc, #40]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a116:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a120:	4906      	ldr	r1, [pc, #24]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a122:	4313      	orrs	r3, r2
 800a124:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a126:	7dbb      	ldrb	r3, [r7, #22]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d101      	bne.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	e000      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
}
 800a132:	4618      	mov	r0, r3
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	58024400 	.word	0x58024400

0800a140 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b090      	sub	sp, #64	; 0x40
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a14e:	f040 8095 	bne.w	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a152:	4b97      	ldr	r3, [pc, #604]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a156:	f003 0307 	and.w	r3, r3, #7
 800a15a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	2b04      	cmp	r3, #4
 800a160:	f200 8088 	bhi.w	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a164:	a201      	add	r2, pc, #4	; (adr r2, 800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16a:	bf00      	nop
 800a16c:	0800a181 	.word	0x0800a181
 800a170:	0800a1a9 	.word	0x0800a1a9
 800a174:	0800a1d1 	.word	0x0800a1d1
 800a178:	0800a26d 	.word	0x0800a26d
 800a17c:	0800a1f9 	.word	0x0800a1f9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a180:	4b8b      	ldr	r3, [pc, #556]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a18c:	d108      	bne.n	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a18e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a192:	4618      	mov	r0, r3
 800a194:	f000 ff64 	bl	800b060 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a19c:	f000 bc94 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1a4:	f000 bc90 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1a8:	4b81      	ldr	r3, [pc, #516]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1b4:	d108      	bne.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1b6:	f107 0318 	add.w	r3, r7, #24
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 fca8 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1c4:	f000 bc80 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1cc:	f000 bc7c 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1d0:	4b77      	ldr	r3, [pc, #476]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1dc:	d108      	bne.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1de:	f107 030c 	add.w	r3, r7, #12
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 fde8 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1ec:	f000 bc6c 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f4:	f000 bc68 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a1f8:	4b6d      	ldr	r3, [pc, #436]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a200:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a202:	4b6b      	ldr	r3, [pc, #428]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 0304 	and.w	r3, r3, #4
 800a20a:	2b04      	cmp	r3, #4
 800a20c:	d10c      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a210:	2b00      	cmp	r3, #0
 800a212:	d109      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a214:	4b66      	ldr	r3, [pc, #408]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	08db      	lsrs	r3, r3, #3
 800a21a:	f003 0303 	and.w	r3, r3, #3
 800a21e:	4a65      	ldr	r2, [pc, #404]	; (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a220:	fa22 f303 	lsr.w	r3, r2, r3
 800a224:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a226:	e01f      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a228:	4b61      	ldr	r3, [pc, #388]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a234:	d106      	bne.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a238:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a23c:	d102      	bne.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a23e:	4b5e      	ldr	r3, [pc, #376]	; (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a240:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a242:	e011      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a244:	4b5a      	ldr	r3, [pc, #360]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a24c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a250:	d106      	bne.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a258:	d102      	bne.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a25a:	4b58      	ldr	r3, [pc, #352]	; (800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a25c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a25e:	e003      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a264:	f000 bc30 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a268:	f000 bc2e 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a26c:	4b54      	ldr	r3, [pc, #336]	; (800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a26e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a270:	f000 bc2a 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a274:	2300      	movs	r3, #0
 800a276:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a278:	f000 bc26 	b.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a282:	f040 809f 	bne.w	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a286:	4b4a      	ldr	r3, [pc, #296]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a28a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a28e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a296:	d04d      	beq.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a29e:	f200 8084 	bhi.w	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	2bc0      	cmp	r3, #192	; 0xc0
 800a2a6:	d07d      	beq.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	2bc0      	cmp	r3, #192	; 0xc0
 800a2ac:	d87d      	bhi.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b0:	2b80      	cmp	r3, #128	; 0x80
 800a2b2:	d02d      	beq.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b6:	2b80      	cmp	r3, #128	; 0x80
 800a2b8:	d877      	bhi.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	2b40      	cmp	r3, #64	; 0x40
 800a2c4:	d012      	beq.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a2c6:	e070      	b.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2c8:	4b39      	ldr	r3, [pc, #228]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2d4:	d107      	bne.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 fec0 	bl	800b060 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a2e4:	e3f0      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ea:	e3ed      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2ec:	4b30      	ldr	r3, [pc, #192]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2f8:	d107      	bne.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2fa:	f107 0318 	add.w	r3, r7, #24
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 fc06 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a308:	e3de      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a30e:	e3db      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a310:	4b27      	ldr	r3, [pc, #156]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a31c:	d107      	bne.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a31e:	f107 030c 	add.w	r3, r7, #12
 800a322:	4618      	mov	r0, r3
 800a324:	f000 fd48 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a32c:	e3cc      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a332:	e3c9      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a334:	4b1e      	ldr	r3, [pc, #120]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a338:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a33c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a33e:	4b1c      	ldr	r3, [pc, #112]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 0304 	and.w	r3, r3, #4
 800a346:	2b04      	cmp	r3, #4
 800a348:	d10c      	bne.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d109      	bne.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a350:	4b17      	ldr	r3, [pc, #92]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	08db      	lsrs	r3, r3, #3
 800a356:	f003 0303 	and.w	r3, r3, #3
 800a35a:	4a16      	ldr	r2, [pc, #88]	; (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a35c:	fa22 f303 	lsr.w	r3, r2, r3
 800a360:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a362:	e01e      	b.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a364:	4b12      	ldr	r3, [pc, #72]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a370:	d106      	bne.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a378:	d102      	bne.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a37a:	4b0f      	ldr	r3, [pc, #60]	; (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a37c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a37e:	e010      	b.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a380:	4b0b      	ldr	r3, [pc, #44]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a38c:	d106      	bne.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a394:	d102      	bne.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a396:	4b09      	ldr	r3, [pc, #36]	; (800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a39a:	e002      	b.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a3a0:	e392      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3a2:	e391      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a3a4:	4b06      	ldr	r3, [pc, #24]	; (800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3a8:	e38e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3ae:	e38b      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3b0:	58024400 	.word	0x58024400
 800a3b4:	03d09000 	.word	0x03d09000
 800a3b8:	003d0900 	.word	0x003d0900
 800a3bc:	017d7840 	.word	0x017d7840
 800a3c0:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3ca:	f040 809c 	bne.w	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a3ce:	4b9d      	ldr	r3, [pc, #628]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a3d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3d2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a3d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3de:	d054      	beq.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3e6:	f200 808b 	bhi.w	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a3f0:	f000 8083 	beq.w	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a3fa:	f200 8081 	bhi.w	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a404:	d02f      	beq.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a40c:	d878      	bhi.n	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a410:	2b00      	cmp	r3, #0
 800a412:	d004      	beq.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a416:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a41a:	d012      	beq.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a41c:	e070      	b.n	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a41e:	4b89      	ldr	r3, [pc, #548]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a42a:	d107      	bne.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a42c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a430:	4618      	mov	r0, r3
 800a432:	f000 fe15 	bl	800b060 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a43a:	e345      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a43c:	2300      	movs	r3, #0
 800a43e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a440:	e342      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a442:	4b80      	ldr	r3, [pc, #512]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a44a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a44e:	d107      	bne.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a450:	f107 0318 	add.w	r3, r7, #24
 800a454:	4618      	mov	r0, r3
 800a456:	f000 fb5b 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a45e:	e333      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a460:	2300      	movs	r3, #0
 800a462:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a464:	e330      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a466:	4b77      	ldr	r3, [pc, #476]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a46e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a472:	d107      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a474:	f107 030c 	add.w	r3, r7, #12
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 fc9d 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a482:	e321      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a488:	e31e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a48a:	4b6e      	ldr	r3, [pc, #440]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a48e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a492:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a494:	4b6b      	ldr	r3, [pc, #428]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 0304 	and.w	r3, r3, #4
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	d10c      	bne.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d109      	bne.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4a6:	4b67      	ldr	r3, [pc, #412]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	08db      	lsrs	r3, r3, #3
 800a4ac:	f003 0303 	and.w	r3, r3, #3
 800a4b0:	4a65      	ldr	r2, [pc, #404]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a4b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4b8:	e01e      	b.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4ba:	4b62      	ldr	r3, [pc, #392]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4c6:	d106      	bne.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4ce:	d102      	bne.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a4d0:	4b5e      	ldr	r3, [pc, #376]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4d4:	e010      	b.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4d6:	4b5b      	ldr	r3, [pc, #364]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4e2:	d106      	bne.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4ea:	d102      	bne.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a4ec:	4b58      	ldr	r3, [pc, #352]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4f0:	e002      	b.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a4f6:	e2e7      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a4f8:	e2e6      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a4fa:	4b56      	ldr	r3, [pc, #344]	; (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4fe:	e2e3      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a500:	2300      	movs	r3, #0
 800a502:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a504:	e2e0      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a50c:	f040 80a7 	bne.w	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a510:	4b4c      	ldr	r3, [pc, #304]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a514:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a518:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a520:	d055      	beq.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a528:	f200 8096 	bhi.w	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a532:	f000 8084 	beq.w	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a53c:	f200 808c 	bhi.w	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a546:	d030      	beq.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a54e:	f200 8083 	bhi.w	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	2b00      	cmp	r3, #0
 800a556:	d004      	beq.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a55e:	d012      	beq.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a560:	e07a      	b.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a562:	4b38      	ldr	r3, [pc, #224]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a56a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a56e:	d107      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a574:	4618      	mov	r0, r3
 800a576:	f000 fd73 	bl	800b060 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a57e:	e2a3      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a580:	2300      	movs	r3, #0
 800a582:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a584:	e2a0      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a586:	4b2f      	ldr	r3, [pc, #188]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a58e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a592:	d107      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a594:	f107 0318 	add.w	r3, r7, #24
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 fab9 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a5a2:	e291      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5a8:	e28e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5aa:	4b26      	ldr	r3, [pc, #152]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5b6:	d107      	bne.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5b8:	f107 030c 	add.w	r3, r7, #12
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f000 fbfb 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5c6:	e27f      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5cc:	e27c      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a5ce:	4b1d      	ldr	r3, [pc, #116]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5d6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5d8:	4b1a      	ldr	r3, [pc, #104]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f003 0304 	and.w	r3, r3, #4
 800a5e0:	2b04      	cmp	r3, #4
 800a5e2:	d10c      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d109      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5ea:	4b16      	ldr	r3, [pc, #88]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	08db      	lsrs	r3, r3, #3
 800a5f0:	f003 0303 	and.w	r3, r3, #3
 800a5f4:	4a14      	ldr	r2, [pc, #80]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5fc:	e01e      	b.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5fe:	4b11      	ldr	r3, [pc, #68]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a60a:	d106      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a60e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a612:	d102      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a614:	4b0d      	ldr	r3, [pc, #52]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a616:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a618:	e010      	b.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a61a:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a626:	d106      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a62a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a62e:	d102      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a630:	4b07      	ldr	r3, [pc, #28]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a632:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a634:	e002      	b.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a636:	2300      	movs	r3, #0
 800a638:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a63a:	e245      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a63c:	e244      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a63e:	4b05      	ldr	r3, [pc, #20]	; (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a642:	e241      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a644:	58024400 	.word	0x58024400
 800a648:	03d09000 	.word	0x03d09000
 800a64c:	003d0900 	.word	0x003d0900
 800a650:	017d7840 	.word	0x017d7840
 800a654:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a65c:	e234      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a664:	f040 809c 	bne.w	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a668:	4b9b      	ldr	r3, [pc, #620]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a66c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a670:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a678:	d054      	beq.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a680:	f200 808b 	bhi.w	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a686:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a68a:	f000 8083 	beq.w	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a690:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a694:	f200 8081 	bhi.w	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a69e:	d02f      	beq.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6a6:	d878      	bhi.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d004      	beq.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6b4:	d012      	beq.n	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a6b6:	e070      	b.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6b8:	4b87      	ldr	r3, [pc, #540]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6c4:	d107      	bne.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 fcc8 	bl	800b060 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6d4:	e1f8      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6da:	e1f5      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6dc:	4b7e      	ldr	r3, [pc, #504]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6e8:	d107      	bne.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ea:	f107 0318 	add.w	r3, r7, #24
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 fa0e 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6f8:	e1e6      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6fe:	e1e3      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a700:	4b75      	ldr	r3, [pc, #468]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a70c:	d107      	bne.n	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a70e:	f107 030c 	add.w	r3, r7, #12
 800a712:	4618      	mov	r0, r3
 800a714:	f000 fb50 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a71c:	e1d4      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a722:	e1d1      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a724:	4b6c      	ldr	r3, [pc, #432]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a728:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a72c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a72e:	4b6a      	ldr	r3, [pc, #424]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 0304 	and.w	r3, r3, #4
 800a736:	2b04      	cmp	r3, #4
 800a738:	d10c      	bne.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d109      	bne.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a740:	4b65      	ldr	r3, [pc, #404]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	08db      	lsrs	r3, r3, #3
 800a746:	f003 0303 	and.w	r3, r3, #3
 800a74a:	4a64      	ldr	r2, [pc, #400]	; (800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a74c:	fa22 f303 	lsr.w	r3, r2, r3
 800a750:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a752:	e01e      	b.n	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a754:	4b60      	ldr	r3, [pc, #384]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a75c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a760:	d106      	bne.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a768:	d102      	bne.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a76a:	4b5d      	ldr	r3, [pc, #372]	; (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a76c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a76e:	e010      	b.n	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a770:	4b59      	ldr	r3, [pc, #356]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a77c:	d106      	bne.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a784:	d102      	bne.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a786:	4b57      	ldr	r3, [pc, #348]	; (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a78a:	e002      	b.n	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a790:	e19a      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a792:	e199      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a794:	4b54      	ldr	r3, [pc, #336]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a796:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a798:	e196      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a79e:	e193      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a7a6:	d173      	bne.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a7a8:	4b4b      	ldr	r3, [pc, #300]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a7b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7b8:	d02f      	beq.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7c0:	d863      	bhi.n	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d004      	beq.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ce:	d012      	beq.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800a7d0:	e05b      	b.n	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7d2:	4b41      	ldr	r3, [pc, #260]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7de:	d107      	bne.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7e0:	f107 0318 	add.w	r3, r7, #24
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 f993 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a7ee:	e16b      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7f4:	e168      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7f6:	4b38      	ldr	r3, [pc, #224]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a802:	d107      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a804:	f107 030c 	add.w	r3, r7, #12
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 fad5 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a812:	e159      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a814:	2300      	movs	r3, #0
 800a816:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a818:	e156      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a81a:	4b2f      	ldr	r3, [pc, #188]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a81c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a81e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a822:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a824:	4b2c      	ldr	r3, [pc, #176]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	2b04      	cmp	r3, #4
 800a82e:	d10c      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800a830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a832:	2b00      	cmp	r3, #0
 800a834:	d109      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a836:	4b28      	ldr	r3, [pc, #160]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	08db      	lsrs	r3, r3, #3
 800a83c:	f003 0303 	and.w	r3, r3, #3
 800a840:	4a26      	ldr	r2, [pc, #152]	; (800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a842:	fa22 f303 	lsr.w	r3, r2, r3
 800a846:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a848:	e01e      	b.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a84a:	4b23      	ldr	r3, [pc, #140]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a856:	d106      	bne.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800a858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a85e:	d102      	bne.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a860:	4b1f      	ldr	r3, [pc, #124]	; (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a862:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a864:	e010      	b.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a866:	4b1c      	ldr	r3, [pc, #112]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a86e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a872:	d106      	bne.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800a874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a87a:	d102      	bne.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a87c:	4b19      	ldr	r3, [pc, #100]	; (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a87e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a880:	e002      	b.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a882:	2300      	movs	r3, #0
 800a884:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a886:	e11f      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a888:	e11e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a88e:	e11b      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a896:	d13e      	bne.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a898:	4b0f      	ldr	r3, [pc, #60]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a89a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a89c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d004      	beq.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ae:	d01d      	beq.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a8b0:	e02e      	b.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8b2:	4b09      	ldr	r3, [pc, #36]	; (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8be:	d107      	bne.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 fbcb 	bl	800b060 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a8ce:	e0fb      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8d4:	e0f8      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8d6:	bf00      	nop
 800a8d8:	58024400 	.word	0x58024400
 800a8dc:	03d09000 	.word	0x03d09000
 800a8e0:	003d0900 	.word	0x003d0900
 800a8e4:	017d7840 	.word	0x017d7840
 800a8e8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8ec:	4b79      	ldr	r3, [pc, #484]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8f8:	d107      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8fa:	f107 0318 	add.w	r3, r7, #24
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 f906 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a904:	6a3b      	ldr	r3, [r7, #32]
 800a906:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a908:	e0de      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a90a:	2300      	movs	r3, #0
 800a90c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a90e:	e0db      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a914:	e0d8      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a91c:	f040 8085 	bne.w	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a920:	4b6c      	ldr	r3, [pc, #432]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a924:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a928:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a930:	d06b      	beq.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a938:	d874      	bhi.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a940:	d056      	beq.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a948:	d86c      	bhi.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a950:	d03b      	beq.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a958:	d864      	bhi.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a960:	d021      	beq.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a968:	d85c      	bhi.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d004      	beq.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a976:	d004      	beq.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800a978:	e054      	b.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a97a:	f000 f8b3 	bl	800aae4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a97e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a980:	e0a2      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a982:	4b54      	ldr	r3, [pc, #336]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a98a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a98e:	d107      	bne.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a990:	f107 0318 	add.w	r3, r7, #24
 800a994:	4618      	mov	r0, r3
 800a996:	f000 f8bb 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a99e:	e093      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9a4:	e090      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9a6:	4b4b      	ldr	r3, [pc, #300]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9b2:	d107      	bne.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9b4:	f107 030c 	add.w	r3, r7, #12
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 f9fd 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9c2:	e081      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9c8:	e07e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9ca:	4b42      	ldr	r3, [pc, #264]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 0304 	and.w	r3, r3, #4
 800a9d2:	2b04      	cmp	r3, #4
 800a9d4:	d109      	bne.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9d6:	4b3f      	ldr	r3, [pc, #252]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	08db      	lsrs	r3, r3, #3
 800a9dc:	f003 0303 	and.w	r3, r3, #3
 800a9e0:	4a3d      	ldr	r2, [pc, #244]	; (800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9e8:	e06e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9ee:	e06b      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a9f0:	4b38      	ldr	r3, [pc, #224]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9fc:	d102      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800a9fe:	4b37      	ldr	r3, [pc, #220]	; (800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aa00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa02:	e061      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa08:	e05e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa0a:	4b32      	ldr	r3, [pc, #200]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa16:	d102      	bne.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800aa18:	4b31      	ldr	r3, [pc, #196]	; (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa1c:	e054      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa22:	e051      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa28:	e04e      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa30:	d148      	bne.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800aa32:	4b28      	ldr	r3, [pc, #160]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa3a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa42:	d02a      	beq.n	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800aa44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa4a:	d838      	bhi.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d004      	beq.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800aa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa58:	d00d      	beq.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800aa5a:	e030      	b.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa5c:	4b1d      	ldr	r3, [pc, #116]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa68:	d102      	bne.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800aa6a:	4b1d      	ldr	r3, [pc, #116]	; (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa6e:	e02b      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa70:	2300      	movs	r3, #0
 800aa72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa74:	e028      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa76:	4b17      	ldr	r3, [pc, #92]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa82:	d107      	bne.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f000 fae9 	bl	800b060 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa92:	e019      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa94:	2300      	movs	r3, #0
 800aa96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa98:	e016      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa9a:	4b0e      	ldr	r3, [pc, #56]	; (800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aaa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aaa6:	d107      	bne.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaa8:	f107 0318 	add.w	r3, r7, #24
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 f82f 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aab6:	e007      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aabc:	e004      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aac2:	e001      	b.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800aac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3740      	adds	r7, #64	; 0x40
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	58024400 	.word	0x58024400
 800aad8:	03d09000 	.word	0x03d09000
 800aadc:	003d0900 	.word	0x003d0900
 800aae0:	017d7840 	.word	0x017d7840

0800aae4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aae8:	f7fe fb88 	bl	80091fc <HAL_RCC_GetHCLKFreq>
 800aaec:	4602      	mov	r2, r0
 800aaee:	4b06      	ldr	r3, [pc, #24]	; (800ab08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aaf0:	6a1b      	ldr	r3, [r3, #32]
 800aaf2:	091b      	lsrs	r3, r3, #4
 800aaf4:	f003 0307 	and.w	r3, r3, #7
 800aaf8:	4904      	ldr	r1, [pc, #16]	; (800ab0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aafa:	5ccb      	ldrb	r3, [r1, r3]
 800aafc:	f003 031f 	and.w	r3, r3, #31
 800ab00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	58024400 	.word	0x58024400
 800ab0c:	0800fe30 	.word	0x0800fe30

0800ab10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b089      	sub	sp, #36	; 0x24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab18:	4ba1      	ldr	r3, [pc, #644]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1c:	f003 0303 	and.w	r3, r3, #3
 800ab20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ab22:	4b9f      	ldr	r3, [pc, #636]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab26:	0b1b      	lsrs	r3, r3, #12
 800ab28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab2e:	4b9c      	ldr	r3, [pc, #624]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab32:	091b      	lsrs	r3, r3, #4
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ab3a:	4b99      	ldr	r3, [pc, #612]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3e:	08db      	lsrs	r3, r3, #3
 800ab40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	fb02 f303 	mul.w	r3, r2, r3
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 8111 	beq.w	800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	f000 8083 	beq.w	800ac6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	f200 80a1 	bhi.w	800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d003      	beq.n	800ab7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d056      	beq.n	800ac28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ab7a:	e099      	b.n	800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab7c:	4b88      	ldr	r3, [pc, #544]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 0320 	and.w	r3, r3, #32
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d02d      	beq.n	800abe4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab88:	4b85      	ldr	r3, [pc, #532]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	08db      	lsrs	r3, r3, #3
 800ab8e:	f003 0303 	and.w	r3, r3, #3
 800ab92:	4a84      	ldr	r2, [pc, #528]	; (800ada4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ab94:	fa22 f303 	lsr.w	r3, r2, r3
 800ab98:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	ee07 3a90 	vmov	s15, r3
 800aba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	ee07 3a90 	vmov	s15, r3
 800abaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abb2:	4b7b      	ldr	r3, [pc, #492]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abde:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800abe2:	e087      	b.n	800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	ee07 3a90 	vmov	s15, r3
 800abea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800adac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800abf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abf6:	4b6a      	ldr	r3, [pc, #424]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac26:	e065      	b.n	800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	ee07 3a90 	vmov	s15, r3
 800ac2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800adb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac3a:	4b59      	ldr	r3, [pc, #356]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac42:	ee07 3a90 	vmov	s15, r3
 800ac46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac6a:	e043      	b.n	800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	ee07 3a90 	vmov	s15, r3
 800ac72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ac7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac7e:	4b48      	ldr	r3, [pc, #288]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac86:	ee07 3a90 	vmov	s15, r3
 800ac8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac92:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acae:	e021      	b.n	800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	ee07 3a90 	vmov	s15, r3
 800acb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800adb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800acbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acc2:	4b37      	ldr	r3, [pc, #220]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acca:	ee07 3a90 	vmov	s15, r3
 800acce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ace2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ace6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acf2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800acf4:	4b2a      	ldr	r3, [pc, #168]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf8:	0a5b      	lsrs	r3, r3, #9
 800acfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad1a:	ee17 2a90 	vmov	r2, s15
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ad22:	4b1f      	ldr	r3, [pc, #124]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad26:	0c1b      	lsrs	r3, r3, #16
 800ad28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad2c:	ee07 3a90 	vmov	s15, r3
 800ad30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad48:	ee17 2a90 	vmov	r2, s15
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ad50:	4b13      	ldr	r3, [pc, #76]	; (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad54:	0e1b      	lsrs	r3, r3, #24
 800ad56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad76:	ee17 2a90 	vmov	r2, s15
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ad7e:	e008      	b.n	800ad92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	609a      	str	r2, [r3, #8]
}
 800ad92:	bf00      	nop
 800ad94:	3724      	adds	r7, #36	; 0x24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	58024400 	.word	0x58024400
 800ada4:	03d09000 	.word	0x03d09000
 800ada8:	46000000 	.word	0x46000000
 800adac:	4c742400 	.word	0x4c742400
 800adb0:	4a742400 	.word	0x4a742400
 800adb4:	4bbebc20 	.word	0x4bbebc20

0800adb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800adb8:	b480      	push	{r7}
 800adba:	b089      	sub	sp, #36	; 0x24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adc0:	4ba1      	ldr	r3, [pc, #644]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc4:	f003 0303 	and.w	r3, r3, #3
 800adc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800adca:	4b9f      	ldr	r3, [pc, #636]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adce:	0d1b      	lsrs	r3, r3, #20
 800add0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800add4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800add6:	4b9c      	ldr	r3, [pc, #624]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800add8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adda:	0a1b      	lsrs	r3, r3, #8
 800addc:	f003 0301 	and.w	r3, r3, #1
 800ade0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ade2:	4b99      	ldr	r3, [pc, #612]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ade4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade6:	08db      	lsrs	r3, r3, #3
 800ade8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	fb02 f303 	mul.w	r3, r2, r3
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 8111 	beq.w	800b028 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	f000 8083 	beq.w	800af14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	f200 80a1 	bhi.w	800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d003      	beq.n	800ae24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d056      	beq.n	800aed0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ae22:	e099      	b.n	800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae24:	4b88      	ldr	r3, [pc, #544]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0320 	and.w	r3, r3, #32
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d02d      	beq.n	800ae8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae30:	4b85      	ldr	r3, [pc, #532]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	08db      	lsrs	r3, r3, #3
 800ae36:	f003 0303 	and.w	r3, r3, #3
 800ae3a:	4a84      	ldr	r2, [pc, #528]	; (800b04c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ae3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae40:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	ee07 3a90 	vmov	s15, r3
 800ae48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	ee07 3a90 	vmov	s15, r3
 800ae52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae5a:	4b7b      	ldr	r3, [pc, #492]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ae8a:	e087      	b.n	800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	ee07 3a90 	vmov	s15, r3
 800ae92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ae9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae9e:	4b6a      	ldr	r3, [pc, #424]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aea6:	ee07 3a90 	vmov	s15, r3
 800aeaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeae:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aeb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aece:	e065      	b.n	800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	ee07 3a90 	vmov	s15, r3
 800aed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee2:	4b59      	ldr	r3, [pc, #356]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeea:	ee07 3a90 	vmov	s15, r3
 800aeee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aef6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aefa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aefe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af12:	e043      	b.n	800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	ee07 3a90 	vmov	s15, r3
 800af1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800af22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af26:	4b48      	ldr	r3, [pc, #288]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af2e:	ee07 3a90 	vmov	s15, r3
 800af32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af36:	ed97 6a03 	vldr	s12, [r7, #12]
 800af3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af56:	e021      	b.n	800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af6a:	4b37      	ldr	r3, [pc, #220]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af72:	ee07 3a90 	vmov	s15, r3
 800af76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800af9c:	4b2a      	ldr	r3, [pc, #168]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa0:	0a5b      	lsrs	r3, r3, #9
 800afa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800afba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afc2:	ee17 2a90 	vmov	r2, s15
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800afca:	4b1f      	ldr	r3, [pc, #124]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afce:	0c1b      	lsrs	r3, r3, #16
 800afd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd4:	ee07 3a90 	vmov	s15, r3
 800afd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afe4:	edd7 6a07 	vldr	s13, [r7, #28]
 800afe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff0:	ee17 2a90 	vmov	r2, s15
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800aff8:	4b13      	ldr	r3, [pc, #76]	; (800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800affa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affc:	0e1b      	lsrs	r3, r3, #24
 800affe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b00e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b012:	edd7 6a07 	vldr	s13, [r7, #28]
 800b016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b01a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b01e:	ee17 2a90 	vmov	r2, s15
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b026:	e008      	b.n	800b03a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	609a      	str	r2, [r3, #8]
}
 800b03a:	bf00      	nop
 800b03c:	3724      	adds	r7, #36	; 0x24
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	58024400 	.word	0x58024400
 800b04c:	03d09000 	.word	0x03d09000
 800b050:	46000000 	.word	0x46000000
 800b054:	4c742400 	.word	0x4c742400
 800b058:	4a742400 	.word	0x4a742400
 800b05c:	4bbebc20 	.word	0x4bbebc20

0800b060 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b060:	b480      	push	{r7}
 800b062:	b089      	sub	sp, #36	; 0x24
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b068:	4ba0      	ldr	r3, [pc, #640]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06c:	f003 0303 	and.w	r3, r3, #3
 800b070:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b072:	4b9e      	ldr	r3, [pc, #632]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b076:	091b      	lsrs	r3, r3, #4
 800b078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b07c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b07e:	4b9b      	ldr	r3, [pc, #620]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	f003 0301 	and.w	r3, r3, #1
 800b086:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b088:	4b98      	ldr	r3, [pc, #608]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b08c:	08db      	lsrs	r3, r3, #3
 800b08e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b092:	693a      	ldr	r2, [r7, #16]
 800b094:	fb02 f303 	mul.w	r3, r2, r3
 800b098:	ee07 3a90 	vmov	s15, r3
 800b09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f000 8111 	beq.w	800b2ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	f000 8083 	beq.w	800b1ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	f200 80a1 	bhi.w	800b1fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d003      	beq.n	800b0ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d056      	beq.n	800b176 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b0c8:	e099      	b.n	800b1fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0ca:	4b88      	ldr	r3, [pc, #544]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 0320 	and.w	r3, r3, #32
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d02d      	beq.n	800b132 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0d6:	4b85      	ldr	r3, [pc, #532]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	08db      	lsrs	r3, r3, #3
 800b0dc:	f003 0303 	and.w	r3, r3, #3
 800b0e0:	4a83      	ldr	r2, [pc, #524]	; (800b2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b0e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0e6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	ee07 3a90 	vmov	s15, r3
 800b0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	ee07 3a90 	vmov	s15, r3
 800b0f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b100:	4b7a      	ldr	r3, [pc, #488]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b108:	ee07 3a90 	vmov	s15, r3
 800b10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b110:	ed97 6a03 	vldr	s12, [r7, #12]
 800b114:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b118:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b11c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b120:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b124:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b130:	e087      	b.n	800b242 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	ee07 3a90 	vmov	s15, r3
 800b138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b13c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b144:	4b69      	ldr	r3, [pc, #420]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b14c:	ee07 3a90 	vmov	s15, r3
 800b150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b154:	ed97 6a03 	vldr	s12, [r7, #12]
 800b158:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b15c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b160:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b164:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b16c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b170:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b174:	e065      	b.n	800b242 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	ee07 3a90 	vmov	s15, r3
 800b17c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b180:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b2fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b184:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b188:	4b58      	ldr	r3, [pc, #352]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b190:	ee07 3a90 	vmov	s15, r3
 800b194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b198:	ed97 6a03 	vldr	s12, [r7, #12]
 800b19c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1b8:	e043      	b.n	800b242 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	ee07 3a90 	vmov	s15, r3
 800b1c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b1c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1cc:	4b47      	ldr	r3, [pc, #284]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1d4:	ee07 3a90 	vmov	s15, r3
 800b1d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1fc:	e021      	b.n	800b242 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	ee07 3a90 	vmov	s15, r3
 800b204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b208:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b20c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b210:	4b36      	ldr	r3, [pc, #216]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b218:	ee07 3a90 	vmov	s15, r3
 800b21c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b220:	ed97 6a03 	vldr	s12, [r7, #12]
 800b224:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b22c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b23c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b240:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b242:	4b2a      	ldr	r3, [pc, #168]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b246:	0a5b      	lsrs	r3, r3, #9
 800b248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b24c:	ee07 3a90 	vmov	s15, r3
 800b250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b258:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b25c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b268:	ee17 2a90 	vmov	r2, s15
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b270:	4b1e      	ldr	r3, [pc, #120]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b274:	0c1b      	lsrs	r3, r3, #16
 800b276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b27a:	ee07 3a90 	vmov	s15, r3
 800b27e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b282:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b286:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b28a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b28e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b296:	ee17 2a90 	vmov	r2, s15
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b29e:	4b13      	ldr	r3, [pc, #76]	; (800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a2:	0e1b      	lsrs	r3, r3, #24
 800b2a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2a8:	ee07 3a90 	vmov	s15, r3
 800b2ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2c4:	ee17 2a90 	vmov	r2, s15
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b2cc:	e008      	b.n	800b2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	609a      	str	r2, [r3, #8]
}
 800b2e0:	bf00      	nop
 800b2e2:	3724      	adds	r7, #36	; 0x24
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	58024400 	.word	0x58024400
 800b2f0:	03d09000 	.word	0x03d09000
 800b2f4:	46000000 	.word	0x46000000
 800b2f8:	4c742400 	.word	0x4c742400
 800b2fc:	4a742400 	.word	0x4a742400
 800b300:	4bbebc20 	.word	0x4bbebc20

0800b304 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b312:	4b53      	ldr	r3, [pc, #332]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b316:	f003 0303 	and.w	r3, r3, #3
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	d101      	bne.n	800b322 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	e099      	b.n	800b456 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b322:	4b4f      	ldr	r3, [pc, #316]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a4e      	ldr	r2, [pc, #312]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b328:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b32c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b32e:	f7f7 fab3 	bl	8002898 <HAL_GetTick>
 800b332:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b334:	e008      	b.n	800b348 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b336:	f7f7 faaf 	bl	8002898 <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	2b02      	cmp	r3, #2
 800b342:	d901      	bls.n	800b348 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b344:	2303      	movs	r3, #3
 800b346:	e086      	b.n	800b456 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b348:	4b45      	ldr	r3, [pc, #276]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1f0      	bne.n	800b336 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b354:	4b42      	ldr	r3, [pc, #264]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b358:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	031b      	lsls	r3, r3, #12
 800b362:	493f      	ldr	r1, [pc, #252]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b364:	4313      	orrs	r3, r2
 800b366:	628b      	str	r3, [r1, #40]	; 0x28
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	3b01      	subs	r3, #1
 800b378:	025b      	lsls	r3, r3, #9
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	431a      	orrs	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	3b01      	subs	r3, #1
 800b384:	041b      	lsls	r3, r3, #16
 800b386:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b38a:	431a      	orrs	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	3b01      	subs	r3, #1
 800b392:	061b      	lsls	r3, r3, #24
 800b394:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b398:	4931      	ldr	r1, [pc, #196]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b39e:	4b30      	ldr	r3, [pc, #192]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	492d      	ldr	r1, [pc, #180]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b3b0:	4b2b      	ldr	r3, [pc, #172]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b4:	f023 0220 	bic.w	r2, r3, #32
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	4928      	ldr	r1, [pc, #160]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b3c2:	4b27      	ldr	r3, [pc, #156]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c6:	4a26      	ldr	r2, [pc, #152]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3c8:	f023 0310 	bic.w	r3, r3, #16
 800b3cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b3ce:	4b24      	ldr	r3, [pc, #144]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3d2:	4b24      	ldr	r3, [pc, #144]	; (800b464 <RCCEx_PLL2_Config+0x160>)
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	69d2      	ldr	r2, [r2, #28]
 800b3da:	00d2      	lsls	r2, r2, #3
 800b3dc:	4920      	ldr	r1, [pc, #128]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b3e2:	4b1f      	ldr	r3, [pc, #124]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e6:	4a1e      	ldr	r2, [pc, #120]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3e8:	f043 0310 	orr.w	r3, r3, #16
 800b3ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d106      	bne.n	800b402 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b3f4:	4b1a      	ldr	r3, [pc, #104]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f8:	4a19      	ldr	r2, [pc, #100]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b3fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b400:	e00f      	b.n	800b422 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b01      	cmp	r3, #1
 800b406:	d106      	bne.n	800b416 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b408:	4b15      	ldr	r3, [pc, #84]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40c:	4a14      	ldr	r2, [pc, #80]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b40e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b412:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b414:	e005      	b.n	800b422 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b416:	4b12      	ldr	r3, [pc, #72]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	4a11      	ldr	r2, [pc, #68]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b41c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b420:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b422:	4b0f      	ldr	r3, [pc, #60]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a0e      	ldr	r2, [pc, #56]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b428:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b42c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b42e:	f7f7 fa33 	bl	8002898 <HAL_GetTick>
 800b432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b434:	e008      	b.n	800b448 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b436:	f7f7 fa2f 	bl	8002898 <HAL_GetTick>
 800b43a:	4602      	mov	r2, r0
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	2b02      	cmp	r3, #2
 800b442:	d901      	bls.n	800b448 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b444:	2303      	movs	r3, #3
 800b446:	e006      	b.n	800b456 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b448:	4b05      	ldr	r3, [pc, #20]	; (800b460 <RCCEx_PLL2_Config+0x15c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b450:	2b00      	cmp	r3, #0
 800b452:	d0f0      	beq.n	800b436 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b454:	7bfb      	ldrb	r3, [r7, #15]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	58024400 	.word	0x58024400
 800b464:	ffff0007 	.word	0xffff0007

0800b468 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b472:	2300      	movs	r3, #0
 800b474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b476:	4b53      	ldr	r3, [pc, #332]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47a:	f003 0303 	and.w	r3, r3, #3
 800b47e:	2b03      	cmp	r3, #3
 800b480:	d101      	bne.n	800b486 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	e099      	b.n	800b5ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b486:	4b4f      	ldr	r3, [pc, #316]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a4e      	ldr	r2, [pc, #312]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b48c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b492:	f7f7 fa01 	bl	8002898 <HAL_GetTick>
 800b496:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b498:	e008      	b.n	800b4ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b49a:	f7f7 f9fd 	bl	8002898 <HAL_GetTick>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d901      	bls.n	800b4ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	e086      	b.n	800b5ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4ac:	4b45      	ldr	r3, [pc, #276]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1f0      	bne.n	800b49a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b4b8:	4b42      	ldr	r3, [pc, #264]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	051b      	lsls	r3, r3, #20
 800b4c6:	493f      	ldr	r1, [pc, #252]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	628b      	str	r3, [r1, #40]	; 0x28
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	025b      	lsls	r3, r3, #9
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	431a      	orrs	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	041b      	lsls	r3, r3, #16
 800b4ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b4ee:	431a      	orrs	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	061b      	lsls	r3, r3, #24
 800b4f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b4fc:	4931      	ldr	r1, [pc, #196]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b502:	4b30      	ldr	r3, [pc, #192]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b506:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	492d      	ldr	r1, [pc, #180]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b510:	4313      	orrs	r3, r2
 800b512:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b514:	4b2b      	ldr	r3, [pc, #172]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	4928      	ldr	r1, [pc, #160]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b522:	4313      	orrs	r3, r2
 800b524:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b526:	4b27      	ldr	r3, [pc, #156]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52a:	4a26      	ldr	r2, [pc, #152]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b52c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b530:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b532:	4b24      	ldr	r3, [pc, #144]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b536:	4b24      	ldr	r3, [pc, #144]	; (800b5c8 <RCCEx_PLL3_Config+0x160>)
 800b538:	4013      	ands	r3, r2
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	69d2      	ldr	r2, [r2, #28]
 800b53e:	00d2      	lsls	r2, r2, #3
 800b540:	4920      	ldr	r1, [pc, #128]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b542:	4313      	orrs	r3, r2
 800b544:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b546:	4b1f      	ldr	r3, [pc, #124]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54a:	4a1e      	ldr	r2, [pc, #120]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b54c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b550:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d106      	bne.n	800b566 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b558:	4b1a      	ldr	r3, [pc, #104]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55c:	4a19      	ldr	r2, [pc, #100]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b55e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b562:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b564:	e00f      	b.n	800b586 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d106      	bne.n	800b57a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b56c:	4b15      	ldr	r3, [pc, #84]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b570:	4a14      	ldr	r2, [pc, #80]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b572:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b576:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b578:	e005      	b.n	800b586 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b57a:	4b12      	ldr	r3, [pc, #72]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57e:	4a11      	ldr	r2, [pc, #68]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b584:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b586:	4b0f      	ldr	r3, [pc, #60]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a0e      	ldr	r2, [pc, #56]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b58c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b592:	f7f7 f981 	bl	8002898 <HAL_GetTick>
 800b596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b598:	e008      	b.n	800b5ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b59a:	f7f7 f97d 	bl	8002898 <HAL_GetTick>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d901      	bls.n	800b5ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5a8:	2303      	movs	r3, #3
 800b5aa:	e006      	b.n	800b5ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5ac:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <RCCEx_PLL3_Config+0x15c>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d0f0      	beq.n	800b59a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	58024400 	.word	0x58024400
 800b5c8:	ffff0007 	.word	0xffff0007

0800b5cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d101      	bne.n	800b5de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e0f1      	b.n	800b7c2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a78      	ldr	r2, [pc, #480]	; (800b7cc <HAL_SPI_Init+0x200>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d00f      	beq.n	800b60e <HAL_SPI_Init+0x42>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a77      	ldr	r2, [pc, #476]	; (800b7d0 <HAL_SPI_Init+0x204>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d00a      	beq.n	800b60e <HAL_SPI_Init+0x42>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a75      	ldr	r2, [pc, #468]	; (800b7d4 <HAL_SPI_Init+0x208>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d005      	beq.n	800b60e <HAL_SPI_Init+0x42>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	2b0f      	cmp	r3, #15
 800b608:	d901      	bls.n	800b60e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e0d9      	b.n	800b7c2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 fd74 	bl	800c0fc <SPI_GetPacketSize>
 800b614:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a6c      	ldr	r2, [pc, #432]	; (800b7cc <HAL_SPI_Init+0x200>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d00c      	beq.n	800b63a <HAL_SPI_Init+0x6e>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a6a      	ldr	r2, [pc, #424]	; (800b7d0 <HAL_SPI_Init+0x204>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d007      	beq.n	800b63a <HAL_SPI_Init+0x6e>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a69      	ldr	r2, [pc, #420]	; (800b7d4 <HAL_SPI_Init+0x208>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d002      	beq.n	800b63a <HAL_SPI_Init+0x6e>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2b08      	cmp	r3, #8
 800b638:	d811      	bhi.n	800b65e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b63e:	4a63      	ldr	r2, [pc, #396]	; (800b7cc <HAL_SPI_Init+0x200>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d009      	beq.n	800b658 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a61      	ldr	r2, [pc, #388]	; (800b7d0 <HAL_SPI_Init+0x204>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d004      	beq.n	800b658 <HAL_SPI_Init+0x8c>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a60      	ldr	r2, [pc, #384]	; (800b7d4 <HAL_SPI_Init+0x208>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d104      	bne.n	800b662 <HAL_SPI_Init+0x96>
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2b10      	cmp	r3, #16
 800b65c:	d901      	bls.n	800b662 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e0af      	b.n	800b7c2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d106      	bne.n	800b67c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f7f6 fd46 	bl	8002108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2202      	movs	r2, #2
 800b680:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f022 0201 	bic.w	r2, r2, #1
 800b692:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b69e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	699b      	ldr	r3, [r3, #24]
 800b6a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b6a8:	d119      	bne.n	800b6de <HAL_SPI_Init+0x112>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6b2:	d103      	bne.n	800b6bc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d008      	beq.n	800b6ce <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10c      	bne.n	800b6de <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b6c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6cc:	d107      	bne.n	800b6de <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b6dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	69da      	ldr	r2, [r3, #28]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e6:	431a      	orrs	r2, r3
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	431a      	orrs	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6f0:	ea42 0103 	orr.w	r1, r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	68da      	ldr	r2, [r3, #12]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	430a      	orrs	r2, r1
 800b6fe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b708:	431a      	orrs	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70e:	431a      	orrs	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	431a      	orrs	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	691b      	ldr	r3, [r3, #16]
 800b71a:	431a      	orrs	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	695b      	ldr	r3, [r3, #20]
 800b720:	431a      	orrs	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	431a      	orrs	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	431a      	orrs	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b732:	431a      	orrs	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	431a      	orrs	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b73e:	ea42 0103 	orr.w	r1, r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	430a      	orrs	r2, r1
 800b74c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d113      	bne.n	800b77e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b768:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b77c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f022 0201 	bic.w	r2, r2, #1
 800b78c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00a      	beq.n	800b7b0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	430a      	orrs	r2, r1
 800b7ae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	40013000 	.word	0x40013000
 800b7d0:	40003800 	.word	0x40003800
 800b7d4:	40003c00 	.word	0x40003c00

0800b7d8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b08a      	sub	sp, #40	; 0x28
 800b7dc:	af02      	add	r7, sp, #8
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	603b      	str	r3, [r7, #0]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	3330      	adds	r3, #48	; 0x30
 800b7f2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7fc:	d112      	bne.n	800b824 <HAL_SPI_Receive+0x4c>
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10e      	bne.n	800b824 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2204      	movs	r2, #4
 800b80a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b80e:	88fa      	ldrh	r2, [r7, #6]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	4613      	mov	r3, r2
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	68b9      	ldr	r1, [r7, #8]
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f000 f978 	bl	800bb10 <HAL_SPI_TransmitReceive>
 800b820:	4603      	mov	r3, r0
 800b822:	e16f      	b.n	800bb04 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d101      	bne.n	800b832 <HAL_SPI_Receive+0x5a>
 800b82e:	2302      	movs	r3, #2
 800b830:	e168      	b.n	800bb04 <HAL_SPI_Receive+0x32c>
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b83a:	f7f7 f82d 	bl	8002898 <HAL_GetTick>
 800b83e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b846:	b2db      	uxtb	r3, r3
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d007      	beq.n	800b85c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800b84c:	2302      	movs	r3, #2
 800b84e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b858:	7ffb      	ldrb	r3, [r7, #31]
 800b85a:	e153      	b.n	800bb04 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d002      	beq.n	800b868 <HAL_SPI_Receive+0x90>
 800b862:	88fb      	ldrh	r3, [r7, #6]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d107      	bne.n	800b878 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b874:	7ffb      	ldrb	r3, [r7, #31]
 800b876:	e145      	b.n	800bb04 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2204      	movs	r2, #4
 800b87c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	88fa      	ldrh	r2, [r7, #6]
 800b892:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	88fa      	ldrh	r2, [r7, #6]
 800b89a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b8c8:	d107      	bne.n	800b8da <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b8d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	685a      	ldr	r2, [r3, #4]
 800b8e0:	4b8a      	ldr	r3, [pc, #552]	; (800bb0c <HAL_SPI_Receive+0x334>)
 800b8e2:	4013      	ands	r3, r2
 800b8e4:	88f9      	ldrh	r1, [r7, #6]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	6812      	ldr	r2, [r2, #0]
 800b8ea:	430b      	orrs	r3, r1
 800b8ec:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f042 0201 	orr.w	r2, r2, #1
 800b8fc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b906:	d107      	bne.n	800b918 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b916:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	2b0f      	cmp	r3, #15
 800b91e:	d948      	bls.n	800b9b2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b920:	e040      	b.n	800b9a4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	695a      	ldr	r2, [r3, #20]
 800b928:	f248 0308 	movw	r3, #32776	; 0x8008
 800b92c:	4013      	ands	r3, r2
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d014      	beq.n	800b95c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b93a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b93c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b942:	1d1a      	adds	r2, r3, #4
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b94e:	b29b      	uxth	r3, r3
 800b950:	3b01      	subs	r3, #1
 800b952:	b29a      	uxth	r2, r3
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b95a:	e023      	b.n	800b9a4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b95c:	f7f6 ff9c 	bl	8002898 <HAL_GetTick>
 800b960:	4602      	mov	r2, r0
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	1ad3      	subs	r3, r2, r3
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d803      	bhi.n	800b974 <HAL_SPI_Receive+0x19c>
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b972:	d102      	bne.n	800b97a <HAL_SPI_Receive+0x1a2>
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d114      	bne.n	800b9a4 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f000 faf0 	bl	800bf60 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2200      	movs	r2, #0
 800b984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b98e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	e0af      	b.n	800bb04 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1b8      	bne.n	800b922 <HAL_SPI_Receive+0x14a>
 800b9b0:	e095      	b.n	800bade <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	2b07      	cmp	r3, #7
 800b9b8:	f240 808b 	bls.w	800bad2 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b9bc:	e03f      	b.n	800ba3e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	f003 0301 	and.w	r3, r3, #1
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d114      	bne.n	800b9f6 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9d0:	69ba      	ldr	r2, [r7, #24]
 800b9d2:	8812      	ldrh	r2, [r2, #0]
 800b9d4:	b292      	uxth	r2, r2
 800b9d6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9dc:	1c9a      	adds	r2, r3, #2
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b9f4:	e023      	b.n	800ba3e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9f6:	f7f6 ff4f 	bl	8002898 <HAL_GetTick>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d803      	bhi.n	800ba0e <HAL_SPI_Receive+0x236>
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba0c:	d102      	bne.n	800ba14 <HAL_SPI_Receive+0x23c>
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d114      	bne.n	800ba3e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f000 faa3 	bl	800bf60 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	e062      	b.n	800bb04 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1b9      	bne.n	800b9be <HAL_SPI_Receive+0x1e6>
 800ba4a:	e048      	b.n	800bade <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	f003 0301 	and.w	r3, r3, #1
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d117      	bne.n	800ba8a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba66:	7812      	ldrb	r2, [r2, #0]
 800ba68:	b2d2      	uxtb	r2, r2
 800ba6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ba88:	e023      	b.n	800bad2 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba8a:	f7f6 ff05 	bl	8002898 <HAL_GetTick>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	1ad3      	subs	r3, r2, r3
 800ba94:	683a      	ldr	r2, [r7, #0]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d803      	bhi.n	800baa2 <HAL_SPI_Receive+0x2ca>
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800baa0:	d102      	bne.n	800baa8 <HAL_SPI_Receive+0x2d0>
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d114      	bne.n	800bad2 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f000 fa59 	bl	800bf60 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800babc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2201      	movs	r2, #1
 800baca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bace:	2303      	movs	r3, #3
 800bad0:	e018      	b.n	800bb04 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bad8:	b29b      	uxth	r3, r3
 800bada:	2b00      	cmp	r3, #0
 800badc:	d1b6      	bne.n	800ba4c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f000 fa3e 	bl	800bf60 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d001      	beq.n	800bb02 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e000      	b.n	800bb04 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800bb02:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3720      	adds	r7, #32
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	ffff0000 	.word	0xffff0000

0800bb10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b08e      	sub	sp, #56	; 0x38
 800bb14:	af02      	add	r7, sp, #8
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	3320      	adds	r3, #32
 800bb2a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	3330      	adds	r3, #48	; 0x30
 800bb32:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d101      	bne.n	800bb42 <HAL_SPI_TransmitReceive+0x32>
 800bb3e:	2302      	movs	r3, #2
 800bb40:	e209      	b.n	800bf56 <HAL_SPI_TransmitReceive+0x446>
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2201      	movs	r2, #1
 800bb46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb4a:	f7f6 fea5 	bl	8002898 <HAL_GetTick>
 800bb4e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bb50:	887b      	ldrh	r3, [r7, #2]
 800bb52:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bb54:	887b      	ldrh	r3, [r7, #2]
 800bb56:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb5e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bb66:	7efb      	ldrb	r3, [r7, #27]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d014      	beq.n	800bb96 <HAL_SPI_TransmitReceive+0x86>
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb72:	d106      	bne.n	800bb82 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d102      	bne.n	800bb82 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bb7c:	7efb      	ldrb	r3, [r7, #27]
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	d009      	beq.n	800bb96 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bb82:	2302      	movs	r3, #2
 800bb84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bb90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb94:	e1df      	b.n	800bf56 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d005      	beq.n	800bba8 <HAL_SPI_TransmitReceive+0x98>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d002      	beq.n	800bba8 <HAL_SPI_TransmitReceive+0x98>
 800bba2:	887b      	ldrh	r3, [r7, #2]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d109      	bne.n	800bbbc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bbb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbba:	e1cc      	b.n	800bf56 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b04      	cmp	r3, #4
 800bbc6:	d003      	beq.n	800bbd0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2205      	movs	r2, #5
 800bbcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	887a      	ldrh	r2, [r7, #2]
 800bbe2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	887a      	ldrh	r2, [r7, #2]
 800bbea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	887a      	ldrh	r2, [r7, #2]
 800bbf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	887a      	ldrh	r2, [r7, #2]
 800bc00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	685a      	ldr	r2, [r3, #4]
 800bc16:	4b82      	ldr	r3, [pc, #520]	; (800be20 <HAL_SPI_TransmitReceive+0x310>)
 800bc18:	4013      	ands	r3, r2
 800bc1a:	8879      	ldrh	r1, [r7, #2]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	6812      	ldr	r2, [r2, #0]
 800bc20:	430b      	orrs	r3, r1
 800bc22:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f042 0201 	orr.w	r2, r2, #1
 800bc32:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc3c:	d107      	bne.n	800bc4e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	2b0f      	cmp	r3, #15
 800bc54:	d970      	bls.n	800bd38 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bc56:	e068      	b.n	800bd2a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	f003 0302 	and.w	r3, r3, #2
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d11a      	bne.n	800bc9c <HAL_SPI_TransmitReceive+0x18c>
 800bc66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d017      	beq.n	800bc9c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	6812      	ldr	r2, [r2, #0]
 800bc76:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc7c:	1d1a      	adds	r2, r3, #4
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	b29a      	uxth	r2, r3
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	695a      	ldr	r2, [r3, #20]
 800bca2:	f248 0308 	movw	r3, #32776	; 0x8008
 800bca6:	4013      	ands	r3, r2
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d01a      	beq.n	800bce2 <HAL_SPI_TransmitReceive+0x1d2>
 800bcac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d017      	beq.n	800bce2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bcbc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcc2:	1d1a      	adds	r2, r3, #4
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bce0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bce2:	f7f6 fdd9 	bl	8002898 <HAL_GetTick>
 800bce6:	4602      	mov	r2, r0
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	1ad3      	subs	r3, r2, r3
 800bcec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d803      	bhi.n	800bcfa <HAL_SPI_TransmitReceive+0x1ea>
 800bcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcf8:	d102      	bne.n	800bd00 <HAL_SPI_TransmitReceive+0x1f0>
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d114      	bne.n	800bd2a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f000 f92d 	bl	800bf60 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bd26:	2303      	movs	r3, #3
 800bd28:	e115      	b.n	800bf56 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d193      	bne.n	800bc58 <HAL_SPI_TransmitReceive+0x148>
 800bd30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d190      	bne.n	800bc58 <HAL_SPI_TransmitReceive+0x148>
 800bd36:	e0e7      	b.n	800bf08 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	2b07      	cmp	r3, #7
 800bd3e:	f240 80dd 	bls.w	800befc <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd42:	e066      	b.n	800be12 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	f003 0302 	and.w	r3, r3, #2
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d119      	bne.n	800bd86 <HAL_SPI_TransmitReceive+0x276>
 800bd52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d016      	beq.n	800bd86 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd5c:	881a      	ldrh	r2, [r3, #0]
 800bd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd60:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd66:	1c9a      	adds	r2, r3, #2
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	3b01      	subs	r3, #1
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd84:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	695b      	ldr	r3, [r3, #20]
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d11a      	bne.n	800bdca <HAL_SPI_TransmitReceive+0x2ba>
 800bd94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d017      	beq.n	800bdca <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd9e:	6a3a      	ldr	r2, [r7, #32]
 800bda0:	8812      	ldrh	r2, [r2, #0]
 800bda2:	b292      	uxth	r2, r2
 800bda4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdaa:	1c9a      	adds	r2, r3, #2
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdc8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdca:	f7f6 fd65 	bl	8002898 <HAL_GetTick>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d803      	bhi.n	800bde2 <HAL_SPI_TransmitReceive+0x2d2>
 800bdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bde0:	d102      	bne.n	800bde8 <HAL_SPI_TransmitReceive+0x2d8>
 800bde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d114      	bne.n	800be12 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f000 f8b9 	bl	800bf60 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2201      	movs	r2, #1
 800be0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800be0e:	2303      	movs	r3, #3
 800be10:	e0a1      	b.n	800bf56 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800be12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be14:	2b00      	cmp	r3, #0
 800be16:	d195      	bne.n	800bd44 <HAL_SPI_TransmitReceive+0x234>
 800be18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d192      	bne.n	800bd44 <HAL_SPI_TransmitReceive+0x234>
 800be1e:	e073      	b.n	800bf08 <HAL_SPI_TransmitReceive+0x3f8>
 800be20:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	695b      	ldr	r3, [r3, #20]
 800be2a:	f003 0302 	and.w	r3, r3, #2
 800be2e:	2b02      	cmp	r3, #2
 800be30:	d11b      	bne.n	800be6a <HAL_SPI_TransmitReceive+0x35a>
 800be32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be34:	2b00      	cmp	r3, #0
 800be36:	d018      	beq.n	800be6a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	3320      	adds	r3, #32
 800be42:	7812      	ldrb	r2, [r2, #0]
 800be44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be4a:	1c5a      	adds	r2, r3, #1
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be56:	b29b      	uxth	r3, r3
 800be58:	3b01      	subs	r3, #1
 800be5a:	b29a      	uxth	r2, r3
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be68:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	695b      	ldr	r3, [r3, #20]
 800be70:	f003 0301 	and.w	r3, r3, #1
 800be74:	2b01      	cmp	r3, #1
 800be76:	d11d      	bne.n	800beb4 <HAL_SPI_TransmitReceive+0x3a4>
 800be78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d01a      	beq.n	800beb4 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be8a:	7812      	ldrb	r2, [r2, #0]
 800be8c:	b2d2      	uxtb	r2, r2
 800be8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be94:	1c5a      	adds	r2, r3, #1
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	3b01      	subs	r3, #1
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800beb2:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800beb4:	f7f6 fcf0 	bl	8002898 <HAL_GetTick>
 800beb8:	4602      	mov	r2, r0
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d803      	bhi.n	800becc <HAL_SPI_TransmitReceive+0x3bc>
 800bec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beca:	d102      	bne.n	800bed2 <HAL_SPI_TransmitReceive+0x3c2>
 800becc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d114      	bne.n	800befc <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f000 f844 	bl	800bf60 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bef8:	2303      	movs	r3, #3
 800befa:	e02c      	b.n	800bf56 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800befc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d190      	bne.n	800be24 <HAL_SPI_TransmitReceive+0x314>
 800bf02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d18d      	bne.n	800be24 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800bf08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	2108      	movs	r1, #8
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f000 f8c4 	bl	800c0a0 <SPI_WaitOnFlagUntilTimeout>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d007      	beq.n	800bf2e <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf24:	f043 0220 	orr.w	r2, r3, #32
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f000 f816 	bl	800bf60 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e001      	b.n	800bf56 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800bf52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3730      	adds	r7, #48	; 0x30
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop

0800bf60 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	699a      	ldr	r2, [r3, #24]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f042 0208 	orr.w	r2, r2, #8
 800bf7e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	699a      	ldr	r2, [r3, #24]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f042 0210 	orr.w	r2, r2, #16
 800bf8e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f022 0201 	bic.w	r2, r2, #1
 800bf9e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	6919      	ldr	r1, [r3, #16]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	4b3c      	ldr	r3, [pc, #240]	; (800c09c <SPI_CloseTransfer+0x13c>)
 800bfac:	400b      	ands	r3, r1
 800bfae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	689a      	ldr	r2, [r3, #8]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bfbe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	2b04      	cmp	r3, #4
 800bfca:	d014      	beq.n	800bff6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f003 0320 	and.w	r3, r3, #32
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00f      	beq.n	800bff6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	699a      	ldr	r2, [r3, #24]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f042 0220 	orr.w	r2, r2, #32
 800bff4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	2b03      	cmp	r3, #3
 800c000:	d014      	beq.n	800c02c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00f      	beq.n	800c02c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c012:	f043 0204 	orr.w	r2, r3, #4
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	699a      	ldr	r2, [r3, #24]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c02a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00f      	beq.n	800c056 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c03c:	f043 0201 	orr.w	r2, r3, #1
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	699a      	ldr	r2, [r3, #24]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c054:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00f      	beq.n	800c080 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c066:	f043 0208 	orr.w	r2, r3, #8
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	699a      	ldr	r2, [r3, #24]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c07e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c090:	bf00      	nop
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	fffffc90 	.word	0xfffffc90

0800c0a0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	603b      	str	r3, [r7, #0]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c0b0:	e010      	b.n	800c0d4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0b2:	f7f6 fbf1 	bl	8002898 <HAL_GetTick>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	69ba      	ldr	r2, [r7, #24]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d803      	bhi.n	800c0ca <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0c8:	d102      	bne.n	800c0d0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e00f      	b.n	800c0f4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	695a      	ldr	r2, [r3, #20]
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	4013      	ands	r3, r2
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	bf0c      	ite	eq
 800c0e4:	2301      	moveq	r3, #1
 800c0e6:	2300      	movne	r3, #0
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	79fb      	ldrb	r3, [r7, #7]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d0df      	beq.n	800c0b2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c108:	095b      	lsrs	r3, r3, #5
 800c10a:	3301      	adds	r3, #1
 800c10c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	3301      	adds	r3, #1
 800c114:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	3307      	adds	r3, #7
 800c11a:	08db      	lsrs	r3, r3, #3
 800c11c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	fb02 f303 	mul.w	r3, r2, r3
}
 800c126:	4618      	mov	r0, r3
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
	...

0800c134 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d109      	bne.n	800c15c <HAL_TIM_OC_Start_IT+0x28>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	2b01      	cmp	r3, #1
 800c152:	bf14      	ite	ne
 800c154:	2301      	movne	r3, #1
 800c156:	2300      	moveq	r3, #0
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	e03c      	b.n	800c1d6 <HAL_TIM_OC_Start_IT+0xa2>
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	2b04      	cmp	r3, #4
 800c160:	d109      	bne.n	800c176 <HAL_TIM_OC_Start_IT+0x42>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	bf14      	ite	ne
 800c16e:	2301      	movne	r3, #1
 800c170:	2300      	moveq	r3, #0
 800c172:	b2db      	uxtb	r3, r3
 800c174:	e02f      	b.n	800c1d6 <HAL_TIM_OC_Start_IT+0xa2>
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	2b08      	cmp	r3, #8
 800c17a:	d109      	bne.n	800c190 <HAL_TIM_OC_Start_IT+0x5c>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c182:	b2db      	uxtb	r3, r3
 800c184:	2b01      	cmp	r3, #1
 800c186:	bf14      	ite	ne
 800c188:	2301      	movne	r3, #1
 800c18a:	2300      	moveq	r3, #0
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	e022      	b.n	800c1d6 <HAL_TIM_OC_Start_IT+0xa2>
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	2b0c      	cmp	r3, #12
 800c194:	d109      	bne.n	800c1aa <HAL_TIM_OC_Start_IT+0x76>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	bf14      	ite	ne
 800c1a2:	2301      	movne	r3, #1
 800c1a4:	2300      	moveq	r3, #0
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	e015      	b.n	800c1d6 <HAL_TIM_OC_Start_IT+0xa2>
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	2b10      	cmp	r3, #16
 800c1ae:	d109      	bne.n	800c1c4 <HAL_TIM_OC_Start_IT+0x90>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	bf14      	ite	ne
 800c1bc:	2301      	movne	r3, #1
 800c1be:	2300      	moveq	r3, #0
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	e008      	b.n	800c1d6 <HAL_TIM_OC_Start_IT+0xa2>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	bf14      	ite	ne
 800c1d0:	2301      	movne	r3, #1
 800c1d2:	2300      	moveq	r3, #0
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d001      	beq.n	800c1de <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e0ec      	b.n	800c3b8 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d104      	bne.n	800c1ee <HAL_TIM_OC_Start_IT+0xba>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2202      	movs	r2, #2
 800c1e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1ec:	e023      	b.n	800c236 <HAL_TIM_OC_Start_IT+0x102>
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	2b04      	cmp	r3, #4
 800c1f2:	d104      	bne.n	800c1fe <HAL_TIM_OC_Start_IT+0xca>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1fc:	e01b      	b.n	800c236 <HAL_TIM_OC_Start_IT+0x102>
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	2b08      	cmp	r3, #8
 800c202:	d104      	bne.n	800c20e <HAL_TIM_OC_Start_IT+0xda>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2202      	movs	r2, #2
 800c208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c20c:	e013      	b.n	800c236 <HAL_TIM_OC_Start_IT+0x102>
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b0c      	cmp	r3, #12
 800c212:	d104      	bne.n	800c21e <HAL_TIM_OC_Start_IT+0xea>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2202      	movs	r2, #2
 800c218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c21c:	e00b      	b.n	800c236 <HAL_TIM_OC_Start_IT+0x102>
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	2b10      	cmp	r3, #16
 800c222:	d104      	bne.n	800c22e <HAL_TIM_OC_Start_IT+0xfa>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2202      	movs	r2, #2
 800c228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c22c:	e003      	b.n	800c236 <HAL_TIM_OC_Start_IT+0x102>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2202      	movs	r2, #2
 800c232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	2b0c      	cmp	r3, #12
 800c23a:	d841      	bhi.n	800c2c0 <HAL_TIM_OC_Start_IT+0x18c>
 800c23c:	a201      	add	r2, pc, #4	; (adr r2, 800c244 <HAL_TIM_OC_Start_IT+0x110>)
 800c23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c242:	bf00      	nop
 800c244:	0800c279 	.word	0x0800c279
 800c248:	0800c2c1 	.word	0x0800c2c1
 800c24c:	0800c2c1 	.word	0x0800c2c1
 800c250:	0800c2c1 	.word	0x0800c2c1
 800c254:	0800c28b 	.word	0x0800c28b
 800c258:	0800c2c1 	.word	0x0800c2c1
 800c25c:	0800c2c1 	.word	0x0800c2c1
 800c260:	0800c2c1 	.word	0x0800c2c1
 800c264:	0800c29d 	.word	0x0800c29d
 800c268:	0800c2c1 	.word	0x0800c2c1
 800c26c:	0800c2c1 	.word	0x0800c2c1
 800c270:	0800c2c1 	.word	0x0800c2c1
 800c274:	0800c2af 	.word	0x0800c2af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68da      	ldr	r2, [r3, #12]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f042 0202 	orr.w	r2, r2, #2
 800c286:	60da      	str	r2, [r3, #12]
      break;
 800c288:	e01d      	b.n	800c2c6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68da      	ldr	r2, [r3, #12]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f042 0204 	orr.w	r2, r2, #4
 800c298:	60da      	str	r2, [r3, #12]
      break;
 800c29a:	e014      	b.n	800c2c6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	68da      	ldr	r2, [r3, #12]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f042 0208 	orr.w	r2, r2, #8
 800c2aa:	60da      	str	r2, [r3, #12]
      break;
 800c2ac:	e00b      	b.n	800c2c6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	68da      	ldr	r2, [r3, #12]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f042 0210 	orr.w	r2, r2, #16
 800c2bc:	60da      	str	r2, [r3, #12]
      break;
 800c2be:	e002      	b.n	800c2c6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c2c4:	bf00      	nop
  }

  if (status == HAL_OK)
 800c2c6:	7bfb      	ldrb	r3, [r7, #15]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d174      	bne.n	800c3b6 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	6839      	ldr	r1, [r7, #0]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f000 ff8d 	bl	800d1f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a38      	ldr	r2, [pc, #224]	; (800c3c0 <HAL_TIM_OC_Start_IT+0x28c>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d013      	beq.n	800c30c <HAL_TIM_OC_Start_IT+0x1d8>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a36      	ldr	r2, [pc, #216]	; (800c3c4 <HAL_TIM_OC_Start_IT+0x290>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d00e      	beq.n	800c30c <HAL_TIM_OC_Start_IT+0x1d8>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4a35      	ldr	r2, [pc, #212]	; (800c3c8 <HAL_TIM_OC_Start_IT+0x294>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d009      	beq.n	800c30c <HAL_TIM_OC_Start_IT+0x1d8>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a33      	ldr	r2, [pc, #204]	; (800c3cc <HAL_TIM_OC_Start_IT+0x298>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d004      	beq.n	800c30c <HAL_TIM_OC_Start_IT+0x1d8>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a32      	ldr	r2, [pc, #200]	; (800c3d0 <HAL_TIM_OC_Start_IT+0x29c>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d101      	bne.n	800c310 <HAL_TIM_OC_Start_IT+0x1dc>
 800c30c:	2301      	movs	r3, #1
 800c30e:	e000      	b.n	800c312 <HAL_TIM_OC_Start_IT+0x1de>
 800c310:	2300      	movs	r3, #0
 800c312:	2b00      	cmp	r3, #0
 800c314:	d007      	beq.n	800c326 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c324:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a25      	ldr	r2, [pc, #148]	; (800c3c0 <HAL_TIM_OC_Start_IT+0x28c>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d022      	beq.n	800c376 <HAL_TIM_OC_Start_IT+0x242>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c338:	d01d      	beq.n	800c376 <HAL_TIM_OC_Start_IT+0x242>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a25      	ldr	r2, [pc, #148]	; (800c3d4 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d018      	beq.n	800c376 <HAL_TIM_OC_Start_IT+0x242>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a23      	ldr	r2, [pc, #140]	; (800c3d8 <HAL_TIM_OC_Start_IT+0x2a4>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d013      	beq.n	800c376 <HAL_TIM_OC_Start_IT+0x242>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a22      	ldr	r2, [pc, #136]	; (800c3dc <HAL_TIM_OC_Start_IT+0x2a8>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d00e      	beq.n	800c376 <HAL_TIM_OC_Start_IT+0x242>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a19      	ldr	r2, [pc, #100]	; (800c3c4 <HAL_TIM_OC_Start_IT+0x290>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d009      	beq.n	800c376 <HAL_TIM_OC_Start_IT+0x242>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a1e      	ldr	r2, [pc, #120]	; (800c3e0 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d004      	beq.n	800c376 <HAL_TIM_OC_Start_IT+0x242>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a15      	ldr	r2, [pc, #84]	; (800c3c8 <HAL_TIM_OC_Start_IT+0x294>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d115      	bne.n	800c3a2 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	689a      	ldr	r2, [r3, #8]
 800c37c:	4b19      	ldr	r3, [pc, #100]	; (800c3e4 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c37e:	4013      	ands	r3, r2
 800c380:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	2b06      	cmp	r3, #6
 800c386:	d015      	beq.n	800c3b4 <HAL_TIM_OC_Start_IT+0x280>
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c38e:	d011      	beq.n	800c3b4 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f042 0201 	orr.w	r2, r2, #1
 800c39e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3a0:	e008      	b.n	800c3b4 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f042 0201 	orr.w	r2, r2, #1
 800c3b0:	601a      	str	r2, [r3, #0]
 800c3b2:	e000      	b.n	800c3b6 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3b4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3710      	adds	r7, #16
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	40010000 	.word	0x40010000
 800c3c4:	40010400 	.word	0x40010400
 800c3c8:	40014000 	.word	0x40014000
 800c3cc:	40014400 	.word	0x40014400
 800c3d0:	40014800 	.word	0x40014800
 800c3d4:	40000400 	.word	0x40000400
 800c3d8:	40000800 	.word	0x40000800
 800c3dc:	40000c00 	.word	0x40000c00
 800c3e0:	40001800 	.word	0x40001800
 800c3e4:	00010007 	.word	0x00010007

0800c3e8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	2b0c      	cmp	r3, #12
 800c3fa:	d841      	bhi.n	800c480 <HAL_TIM_OC_Stop_IT+0x98>
 800c3fc:	a201      	add	r2, pc, #4	; (adr r2, 800c404 <HAL_TIM_OC_Stop_IT+0x1c>)
 800c3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c402:	bf00      	nop
 800c404:	0800c439 	.word	0x0800c439
 800c408:	0800c481 	.word	0x0800c481
 800c40c:	0800c481 	.word	0x0800c481
 800c410:	0800c481 	.word	0x0800c481
 800c414:	0800c44b 	.word	0x0800c44b
 800c418:	0800c481 	.word	0x0800c481
 800c41c:	0800c481 	.word	0x0800c481
 800c420:	0800c481 	.word	0x0800c481
 800c424:	0800c45d 	.word	0x0800c45d
 800c428:	0800c481 	.word	0x0800c481
 800c42c:	0800c481 	.word	0x0800c481
 800c430:	0800c481 	.word	0x0800c481
 800c434:	0800c46f 	.word	0x0800c46f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	68da      	ldr	r2, [r3, #12]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f022 0202 	bic.w	r2, r2, #2
 800c446:	60da      	str	r2, [r3, #12]
      break;
 800c448:	e01d      	b.n	800c486 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	68da      	ldr	r2, [r3, #12]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f022 0204 	bic.w	r2, r2, #4
 800c458:	60da      	str	r2, [r3, #12]
      break;
 800c45a:	e014      	b.n	800c486 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	68da      	ldr	r2, [r3, #12]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f022 0208 	bic.w	r2, r2, #8
 800c46a:	60da      	str	r2, [r3, #12]
      break;
 800c46c:	e00b      	b.n	800c486 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68da      	ldr	r2, [r3, #12]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f022 0210 	bic.w	r2, r2, #16
 800c47c:	60da      	str	r2, [r3, #12]
      break;
 800c47e:	e002      	b.n	800c486 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c480:	2301      	movs	r3, #1
 800c482:	73fb      	strb	r3, [r7, #15]
      break;
 800c484:	bf00      	nop
  }

  if (status == HAL_OK)
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f040 8081 	bne.w	800c590 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2200      	movs	r2, #0
 800c494:	6839      	ldr	r1, [r7, #0]
 800c496:	4618      	mov	r0, r3
 800c498:	f000 feac 	bl	800d1f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a3e      	ldr	r2, [pc, #248]	; (800c59c <HAL_TIM_OC_Stop_IT+0x1b4>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d013      	beq.n	800c4ce <HAL_TIM_OC_Stop_IT+0xe6>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a3d      	ldr	r2, [pc, #244]	; (800c5a0 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d00e      	beq.n	800c4ce <HAL_TIM_OC_Stop_IT+0xe6>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a3b      	ldr	r2, [pc, #236]	; (800c5a4 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d009      	beq.n	800c4ce <HAL_TIM_OC_Stop_IT+0xe6>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a3a      	ldr	r2, [pc, #232]	; (800c5a8 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d004      	beq.n	800c4ce <HAL_TIM_OC_Stop_IT+0xe6>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a38      	ldr	r2, [pc, #224]	; (800c5ac <HAL_TIM_OC_Stop_IT+0x1c4>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d101      	bne.n	800c4d2 <HAL_TIM_OC_Stop_IT+0xea>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e000      	b.n	800c4d4 <HAL_TIM_OC_Stop_IT+0xec>
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d017      	beq.n	800c508 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6a1a      	ldr	r2, [r3, #32]
 800c4de:	f241 1311 	movw	r3, #4369	; 0x1111
 800c4e2:	4013      	ands	r3, r2
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d10f      	bne.n	800c508 <HAL_TIM_OC_Stop_IT+0x120>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	6a1a      	ldr	r2, [r3, #32]
 800c4ee:	f240 4344 	movw	r3, #1092	; 0x444
 800c4f2:	4013      	ands	r3, r2
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d107      	bne.n	800c508 <HAL_TIM_OC_Stop_IT+0x120>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c506:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	6a1a      	ldr	r2, [r3, #32]
 800c50e:	f241 1311 	movw	r3, #4369	; 0x1111
 800c512:	4013      	ands	r3, r2
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10f      	bne.n	800c538 <HAL_TIM_OC_Stop_IT+0x150>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6a1a      	ldr	r2, [r3, #32]
 800c51e:	f240 4344 	movw	r3, #1092	; 0x444
 800c522:	4013      	ands	r3, r2
 800c524:	2b00      	cmp	r3, #0
 800c526:	d107      	bne.n	800c538 <HAL_TIM_OC_Stop_IT+0x150>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f022 0201 	bic.w	r2, r2, #1
 800c536:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d104      	bne.n	800c548 <HAL_TIM_OC_Stop_IT+0x160>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c546:	e023      	b.n	800c590 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	2b04      	cmp	r3, #4
 800c54c:	d104      	bne.n	800c558 <HAL_TIM_OC_Stop_IT+0x170>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2201      	movs	r2, #1
 800c552:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c556:	e01b      	b.n	800c590 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	2b08      	cmp	r3, #8
 800c55c:	d104      	bne.n	800c568 <HAL_TIM_OC_Stop_IT+0x180>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c566:	e013      	b.n	800c590 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	2b0c      	cmp	r3, #12
 800c56c:	d104      	bne.n	800c578 <HAL_TIM_OC_Stop_IT+0x190>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2201      	movs	r2, #1
 800c572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c576:	e00b      	b.n	800c590 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	2b10      	cmp	r3, #16
 800c57c:	d104      	bne.n	800c588 <HAL_TIM_OC_Stop_IT+0x1a0>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2201      	movs	r2, #1
 800c582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c586:	e003      	b.n	800c590 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800c590:	7bfb      	ldrb	r3, [r7, #15]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	40010000 	.word	0x40010000
 800c5a0:	40010400 	.word	0x40010400
 800c5a4:	40014000 	.word	0x40014000
 800c5a8:	40014400 	.word	0x40014400
 800c5ac:	40014800 	.word	0x40014800

0800c5b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d101      	bne.n	800c5c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e049      	b.n	800c656 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d106      	bne.n	800c5dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7f5 fe46 	bl	8002268 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2202      	movs	r2, #2
 800c5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	3304      	adds	r3, #4
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	4610      	mov	r0, r2
 800c5f0:	f000 fa90 	bl	800cb14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2201      	movs	r2, #1
 800c610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2201      	movs	r2, #1
 800c650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3708      	adds	r7, #8
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b082      	sub	sp, #8
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	691b      	ldr	r3, [r3, #16]
 800c66c:	f003 0302 	and.w	r3, r3, #2
 800c670:	2b02      	cmp	r3, #2
 800c672:	d122      	bne.n	800c6ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	f003 0302 	and.w	r3, r3, #2
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d11b      	bne.n	800c6ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f06f 0202 	mvn.w	r2, #2
 800c68a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	699b      	ldr	r3, [r3, #24]
 800c698:	f003 0303 	and.w	r3, r3, #3
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d003      	beq.n	800c6a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 fa19 	bl	800cad8 <HAL_TIM_IC_CaptureCallback>
 800c6a6:	e005      	b.n	800c6b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f7f4 fae9 	bl	8000c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fa1c 	bl	800caec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	f003 0304 	and.w	r3, r3, #4
 800c6c4:	2b04      	cmp	r3, #4
 800c6c6:	d122      	bne.n	800c70e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	f003 0304 	and.w	r3, r3, #4
 800c6d2:	2b04      	cmp	r3, #4
 800c6d4:	d11b      	bne.n	800c70e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f06f 0204 	mvn.w	r2, #4
 800c6de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d003      	beq.n	800c6fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 f9ef 	bl	800cad8 <HAL_TIM_IC_CaptureCallback>
 800c6fa:	e005      	b.n	800c708 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f7f4 fabf 	bl	8000c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 f9f2 	bl	800caec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	f003 0308 	and.w	r3, r3, #8
 800c718:	2b08      	cmp	r3, #8
 800c71a:	d122      	bne.n	800c762 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	f003 0308 	and.w	r3, r3, #8
 800c726:	2b08      	cmp	r3, #8
 800c728:	d11b      	bne.n	800c762 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f06f 0208 	mvn.w	r2, #8
 800c732:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2204      	movs	r2, #4
 800c738:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	69db      	ldr	r3, [r3, #28]
 800c740:	f003 0303 	and.w	r3, r3, #3
 800c744:	2b00      	cmp	r3, #0
 800c746:	d003      	beq.n	800c750 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 f9c5 	bl	800cad8 <HAL_TIM_IC_CaptureCallback>
 800c74e:	e005      	b.n	800c75c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7f4 fa95 	bl	8000c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f9c8 	bl	800caec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	691b      	ldr	r3, [r3, #16]
 800c768:	f003 0310 	and.w	r3, r3, #16
 800c76c:	2b10      	cmp	r3, #16
 800c76e:	d122      	bne.n	800c7b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	f003 0310 	and.w	r3, r3, #16
 800c77a:	2b10      	cmp	r3, #16
 800c77c:	d11b      	bne.n	800c7b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f06f 0210 	mvn.w	r2, #16
 800c786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2208      	movs	r2, #8
 800c78c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	69db      	ldr	r3, [r3, #28]
 800c794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d003      	beq.n	800c7a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 f99b 	bl	800cad8 <HAL_TIM_IC_CaptureCallback>
 800c7a2:	e005      	b.n	800c7b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7f4 fa6b 	bl	8000c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f99e 	bl	800caec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	691b      	ldr	r3, [r3, #16]
 800c7bc:	f003 0301 	and.w	r3, r3, #1
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d10e      	bne.n	800c7e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	f003 0301 	and.w	r3, r3, #1
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d107      	bne.n	800c7e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f06f 0201 	mvn.w	r2, #1
 800c7da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 f971 	bl	800cac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	691b      	ldr	r3, [r3, #16]
 800c7e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7ec:	2b80      	cmp	r3, #128	; 0x80
 800c7ee:	d10e      	bne.n	800c80e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7fa:	2b80      	cmp	r3, #128	; 0x80
 800c7fc:	d107      	bne.n	800c80e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fe2f 	bl	800d46c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c81c:	d10e      	bne.n	800c83c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c828:	2b80      	cmp	r3, #128	; 0x80
 800c82a:	d107      	bne.n	800c83c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 fe22 	bl	800d480 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c846:	2b40      	cmp	r3, #64	; 0x40
 800c848:	d10e      	bne.n	800c868 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c854:	2b40      	cmp	r3, #64	; 0x40
 800c856:	d107      	bne.n	800c868 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f94c 	bl	800cb00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	691b      	ldr	r3, [r3, #16]
 800c86e:	f003 0320 	and.w	r3, r3, #32
 800c872:	2b20      	cmp	r3, #32
 800c874:	d10e      	bne.n	800c894 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	f003 0320 	and.w	r3, r3, #32
 800c880:	2b20      	cmp	r3, #32
 800c882:	d107      	bne.n	800c894 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f06f 0220 	mvn.w	r2, #32
 800c88c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 fde2 	bl	800d458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c894:	bf00      	nop
 800c896:	3708      	adds	r7, #8
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d101      	bne.n	800c8ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c8b6:	2302      	movs	r3, #2
 800c8b8:	e0ff      	b.n	800caba <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2b14      	cmp	r3, #20
 800c8c6:	f200 80f0 	bhi.w	800caaa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c8ca:	a201      	add	r2, pc, #4	; (adr r2, 800c8d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d0:	0800c925 	.word	0x0800c925
 800c8d4:	0800caab 	.word	0x0800caab
 800c8d8:	0800caab 	.word	0x0800caab
 800c8dc:	0800caab 	.word	0x0800caab
 800c8e0:	0800c965 	.word	0x0800c965
 800c8e4:	0800caab 	.word	0x0800caab
 800c8e8:	0800caab 	.word	0x0800caab
 800c8ec:	0800caab 	.word	0x0800caab
 800c8f0:	0800c9a7 	.word	0x0800c9a7
 800c8f4:	0800caab 	.word	0x0800caab
 800c8f8:	0800caab 	.word	0x0800caab
 800c8fc:	0800caab 	.word	0x0800caab
 800c900:	0800c9e7 	.word	0x0800c9e7
 800c904:	0800caab 	.word	0x0800caab
 800c908:	0800caab 	.word	0x0800caab
 800c90c:	0800caab 	.word	0x0800caab
 800c910:	0800ca29 	.word	0x0800ca29
 800c914:	0800caab 	.word	0x0800caab
 800c918:	0800caab 	.word	0x0800caab
 800c91c:	0800caab 	.word	0x0800caab
 800c920:	0800ca69 	.word	0x0800ca69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	68b9      	ldr	r1, [r7, #8]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f000 f98c 	bl	800cc48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	699a      	ldr	r2, [r3, #24]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f042 0208 	orr.w	r2, r2, #8
 800c93e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	699a      	ldr	r2, [r3, #24]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f022 0204 	bic.w	r2, r2, #4
 800c94e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	6999      	ldr	r1, [r3, #24]
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	691a      	ldr	r2, [r3, #16]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	430a      	orrs	r2, r1
 800c960:	619a      	str	r2, [r3, #24]
      break;
 800c962:	e0a5      	b.n	800cab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68b9      	ldr	r1, [r7, #8]
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 f9fc 	bl	800cd68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	699a      	ldr	r2, [r3, #24]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c97e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	699a      	ldr	r2, [r3, #24]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c98e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6999      	ldr	r1, [r3, #24]
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	021a      	lsls	r2, r3, #8
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	430a      	orrs	r2, r1
 800c9a2:	619a      	str	r2, [r3, #24]
      break;
 800c9a4:	e084      	b.n	800cab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	68b9      	ldr	r1, [r7, #8]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 fa65 	bl	800ce7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	69da      	ldr	r2, [r3, #28]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f042 0208 	orr.w	r2, r2, #8
 800c9c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	69da      	ldr	r2, [r3, #28]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f022 0204 	bic.w	r2, r2, #4
 800c9d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	69d9      	ldr	r1, [r3, #28]
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	691a      	ldr	r2, [r3, #16]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	430a      	orrs	r2, r1
 800c9e2:	61da      	str	r2, [r3, #28]
      break;
 800c9e4:	e064      	b.n	800cab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	68b9      	ldr	r1, [r7, #8]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 facd 	bl	800cf8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	69da      	ldr	r2, [r3, #28]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	69da      	ldr	r2, [r3, #28]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	69d9      	ldr	r1, [r3, #28]
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	691b      	ldr	r3, [r3, #16]
 800ca1c:	021a      	lsls	r2, r3, #8
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	430a      	orrs	r2, r1
 800ca24:	61da      	str	r2, [r3, #28]
      break;
 800ca26:	e043      	b.n	800cab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68b9      	ldr	r1, [r7, #8]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 fb16 	bl	800d060 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f042 0208 	orr.w	r2, r2, #8
 800ca42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f022 0204 	bic.w	r2, r2, #4
 800ca52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	691a      	ldr	r2, [r3, #16]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	430a      	orrs	r2, r1
 800ca64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ca66:	e023      	b.n	800cab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	68b9      	ldr	r1, [r7, #8]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f000 fb5a 	bl	800d128 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	021a      	lsls	r2, r3, #8
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	430a      	orrs	r2, r1
 800caa6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800caa8:	e002      	b.n	800cab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800caaa:	2301      	movs	r3, #1
 800caac:	75fb      	strb	r3, [r7, #23]
      break;
 800caae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cab8:	7dfb      	ldrb	r3, [r7, #23]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3718      	adds	r7, #24
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop

0800cac4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cacc:	bf00      	nop
 800cace:	370c      	adds	r7, #12
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cae0:	bf00      	nop
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800caf4:	bf00      	nop
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb08:	bf00      	nop
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a40      	ldr	r2, [pc, #256]	; (800cc28 <TIM_Base_SetConfig+0x114>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d013      	beq.n	800cb54 <TIM_Base_SetConfig+0x40>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb32:	d00f      	beq.n	800cb54 <TIM_Base_SetConfig+0x40>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a3d      	ldr	r2, [pc, #244]	; (800cc2c <TIM_Base_SetConfig+0x118>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d00b      	beq.n	800cb54 <TIM_Base_SetConfig+0x40>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a3c      	ldr	r2, [pc, #240]	; (800cc30 <TIM_Base_SetConfig+0x11c>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d007      	beq.n	800cb54 <TIM_Base_SetConfig+0x40>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a3b      	ldr	r2, [pc, #236]	; (800cc34 <TIM_Base_SetConfig+0x120>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d003      	beq.n	800cb54 <TIM_Base_SetConfig+0x40>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a3a      	ldr	r2, [pc, #232]	; (800cc38 <TIM_Base_SetConfig+0x124>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d108      	bne.n	800cb66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	4313      	orrs	r3, r2
 800cb64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4a2f      	ldr	r2, [pc, #188]	; (800cc28 <TIM_Base_SetConfig+0x114>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d01f      	beq.n	800cbae <TIM_Base_SetConfig+0x9a>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb74:	d01b      	beq.n	800cbae <TIM_Base_SetConfig+0x9a>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a2c      	ldr	r2, [pc, #176]	; (800cc2c <TIM_Base_SetConfig+0x118>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d017      	beq.n	800cbae <TIM_Base_SetConfig+0x9a>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a2b      	ldr	r2, [pc, #172]	; (800cc30 <TIM_Base_SetConfig+0x11c>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d013      	beq.n	800cbae <TIM_Base_SetConfig+0x9a>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a2a      	ldr	r2, [pc, #168]	; (800cc34 <TIM_Base_SetConfig+0x120>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d00f      	beq.n	800cbae <TIM_Base_SetConfig+0x9a>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a29      	ldr	r2, [pc, #164]	; (800cc38 <TIM_Base_SetConfig+0x124>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d00b      	beq.n	800cbae <TIM_Base_SetConfig+0x9a>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a28      	ldr	r2, [pc, #160]	; (800cc3c <TIM_Base_SetConfig+0x128>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d007      	beq.n	800cbae <TIM_Base_SetConfig+0x9a>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a27      	ldr	r2, [pc, #156]	; (800cc40 <TIM_Base_SetConfig+0x12c>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d003      	beq.n	800cbae <TIM_Base_SetConfig+0x9a>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4a26      	ldr	r2, [pc, #152]	; (800cc44 <TIM_Base_SetConfig+0x130>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d108      	bne.n	800cbc0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	68fa      	ldr	r2, [r7, #12]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	695b      	ldr	r3, [r3, #20]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	68fa      	ldr	r2, [r7, #12]
 800cbd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	689a      	ldr	r2, [r3, #8]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	4a10      	ldr	r2, [pc, #64]	; (800cc28 <TIM_Base_SetConfig+0x114>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d00f      	beq.n	800cc0c <TIM_Base_SetConfig+0xf8>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	4a12      	ldr	r2, [pc, #72]	; (800cc38 <TIM_Base_SetConfig+0x124>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d00b      	beq.n	800cc0c <TIM_Base_SetConfig+0xf8>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	4a11      	ldr	r2, [pc, #68]	; (800cc3c <TIM_Base_SetConfig+0x128>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d007      	beq.n	800cc0c <TIM_Base_SetConfig+0xf8>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	4a10      	ldr	r2, [pc, #64]	; (800cc40 <TIM_Base_SetConfig+0x12c>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d003      	beq.n	800cc0c <TIM_Base_SetConfig+0xf8>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	4a0f      	ldr	r2, [pc, #60]	; (800cc44 <TIM_Base_SetConfig+0x130>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d103      	bne.n	800cc14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	691a      	ldr	r2, [r3, #16]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	615a      	str	r2, [r3, #20]
}
 800cc1a:	bf00      	nop
 800cc1c:	3714      	adds	r7, #20
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	40010000 	.word	0x40010000
 800cc2c:	40000400 	.word	0x40000400
 800cc30:	40000800 	.word	0x40000800
 800cc34:	40000c00 	.word	0x40000c00
 800cc38:	40010400 	.word	0x40010400
 800cc3c:	40014000 	.word	0x40014000
 800cc40:	40014400 	.word	0x40014400
 800cc44:	40014800 	.word	0x40014800

0800cc48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b087      	sub	sp, #28
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6a1b      	ldr	r3, [r3, #32]
 800cc56:	f023 0201 	bic.w	r2, r3, #1
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6a1b      	ldr	r3, [r3, #32]
 800cc62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	699b      	ldr	r3, [r3, #24]
 800cc6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	4b37      	ldr	r3, [pc, #220]	; (800cd50 <TIM_OC1_SetConfig+0x108>)
 800cc74:	4013      	ands	r3, r2
 800cc76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f023 0303 	bic.w	r3, r3, #3
 800cc7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	f023 0302 	bic.w	r3, r3, #2
 800cc90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	697a      	ldr	r2, [r7, #20]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4a2d      	ldr	r2, [pc, #180]	; (800cd54 <TIM_OC1_SetConfig+0x10c>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d00f      	beq.n	800ccc4 <TIM_OC1_SetConfig+0x7c>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	4a2c      	ldr	r2, [pc, #176]	; (800cd58 <TIM_OC1_SetConfig+0x110>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d00b      	beq.n	800ccc4 <TIM_OC1_SetConfig+0x7c>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	4a2b      	ldr	r2, [pc, #172]	; (800cd5c <TIM_OC1_SetConfig+0x114>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d007      	beq.n	800ccc4 <TIM_OC1_SetConfig+0x7c>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	4a2a      	ldr	r2, [pc, #168]	; (800cd60 <TIM_OC1_SetConfig+0x118>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d003      	beq.n	800ccc4 <TIM_OC1_SetConfig+0x7c>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	4a29      	ldr	r2, [pc, #164]	; (800cd64 <TIM_OC1_SetConfig+0x11c>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d10c      	bne.n	800ccde <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	f023 0308 	bic.w	r3, r3, #8
 800ccca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	697a      	ldr	r2, [r7, #20]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	f023 0304 	bic.w	r3, r3, #4
 800ccdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	4a1c      	ldr	r2, [pc, #112]	; (800cd54 <TIM_OC1_SetConfig+0x10c>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d00f      	beq.n	800cd06 <TIM_OC1_SetConfig+0xbe>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	4a1b      	ldr	r2, [pc, #108]	; (800cd58 <TIM_OC1_SetConfig+0x110>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d00b      	beq.n	800cd06 <TIM_OC1_SetConfig+0xbe>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	4a1a      	ldr	r2, [pc, #104]	; (800cd5c <TIM_OC1_SetConfig+0x114>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d007      	beq.n	800cd06 <TIM_OC1_SetConfig+0xbe>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	4a19      	ldr	r2, [pc, #100]	; (800cd60 <TIM_OC1_SetConfig+0x118>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d003      	beq.n	800cd06 <TIM_OC1_SetConfig+0xbe>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	4a18      	ldr	r2, [pc, #96]	; (800cd64 <TIM_OC1_SetConfig+0x11c>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d111      	bne.n	800cd2a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	695b      	ldr	r3, [r3, #20]
 800cd1a:	693a      	ldr	r2, [r7, #16]
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	699b      	ldr	r3, [r3, #24]
 800cd24:	693a      	ldr	r2, [r7, #16]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	685a      	ldr	r2, [r3, #4]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	697a      	ldr	r2, [r7, #20]
 800cd42:	621a      	str	r2, [r3, #32]
}
 800cd44:	bf00      	nop
 800cd46:	371c      	adds	r7, #28
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr
 800cd50:	fffeff8f 	.word	0xfffeff8f
 800cd54:	40010000 	.word	0x40010000
 800cd58:	40010400 	.word	0x40010400
 800cd5c:	40014000 	.word	0x40014000
 800cd60:	40014400 	.word	0x40014400
 800cd64:	40014800 	.word	0x40014800

0800cd68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b087      	sub	sp, #28
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a1b      	ldr	r3, [r3, #32]
 800cd76:	f023 0210 	bic.w	r2, r3, #16
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	699b      	ldr	r3, [r3, #24]
 800cd8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cd90:	68fa      	ldr	r2, [r7, #12]
 800cd92:	4b34      	ldr	r3, [pc, #208]	; (800ce64 <TIM_OC2_SetConfig+0xfc>)
 800cd94:	4013      	ands	r3, r2
 800cd96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	021b      	lsls	r3, r3, #8
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	f023 0320 	bic.w	r3, r3, #32
 800cdb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	689b      	ldr	r3, [r3, #8]
 800cdb8:	011b      	lsls	r3, r3, #4
 800cdba:	697a      	ldr	r2, [r7, #20]
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	4a29      	ldr	r2, [pc, #164]	; (800ce68 <TIM_OC2_SetConfig+0x100>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d003      	beq.n	800cdd0 <TIM_OC2_SetConfig+0x68>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4a28      	ldr	r2, [pc, #160]	; (800ce6c <TIM_OC2_SetConfig+0x104>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d10d      	bne.n	800cdec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	011b      	lsls	r3, r3, #4
 800cdde:	697a      	ldr	r2, [r7, #20]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	4a1e      	ldr	r2, [pc, #120]	; (800ce68 <TIM_OC2_SetConfig+0x100>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d00f      	beq.n	800ce14 <TIM_OC2_SetConfig+0xac>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4a1d      	ldr	r2, [pc, #116]	; (800ce6c <TIM_OC2_SetConfig+0x104>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d00b      	beq.n	800ce14 <TIM_OC2_SetConfig+0xac>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	4a1c      	ldr	r2, [pc, #112]	; (800ce70 <TIM_OC2_SetConfig+0x108>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d007      	beq.n	800ce14 <TIM_OC2_SetConfig+0xac>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	4a1b      	ldr	r2, [pc, #108]	; (800ce74 <TIM_OC2_SetConfig+0x10c>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d003      	beq.n	800ce14 <TIM_OC2_SetConfig+0xac>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	4a1a      	ldr	r2, [pc, #104]	; (800ce78 <TIM_OC2_SetConfig+0x110>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d113      	bne.n	800ce3c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	695b      	ldr	r3, [r3, #20]
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	693a      	ldr	r2, [r7, #16]
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	699b      	ldr	r3, [r3, #24]
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	693a      	ldr	r2, [r7, #16]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	693a      	ldr	r2, [r7, #16]
 800ce40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	685a      	ldr	r2, [r3, #4]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	697a      	ldr	r2, [r7, #20]
 800ce54:	621a      	str	r2, [r3, #32]
}
 800ce56:	bf00      	nop
 800ce58:	371c      	adds	r7, #28
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	feff8fff 	.word	0xfeff8fff
 800ce68:	40010000 	.word	0x40010000
 800ce6c:	40010400 	.word	0x40010400
 800ce70:	40014000 	.word	0x40014000
 800ce74:	40014400 	.word	0x40014400
 800ce78:	40014800 	.word	0x40014800

0800ce7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b087      	sub	sp, #28
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6a1b      	ldr	r3, [r3, #32]
 800ce8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6a1b      	ldr	r3, [r3, #32]
 800ce96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	69db      	ldr	r3, [r3, #28]
 800cea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	4b33      	ldr	r3, [pc, #204]	; (800cf74 <TIM_OC3_SetConfig+0xf8>)
 800cea8:	4013      	ands	r3, r2
 800ceaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f023 0303 	bic.w	r3, r3, #3
 800ceb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	68fa      	ldr	r2, [r7, #12]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	021b      	lsls	r3, r3, #8
 800cecc:	697a      	ldr	r2, [r7, #20]
 800cece:	4313      	orrs	r3, r2
 800ced0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4a28      	ldr	r2, [pc, #160]	; (800cf78 <TIM_OC3_SetConfig+0xfc>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d003      	beq.n	800cee2 <TIM_OC3_SetConfig+0x66>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	4a27      	ldr	r2, [pc, #156]	; (800cf7c <TIM_OC3_SetConfig+0x100>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d10d      	bne.n	800cefe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	021b      	lsls	r3, r3, #8
 800cef0:	697a      	ldr	r2, [r7, #20]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cefc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4a1d      	ldr	r2, [pc, #116]	; (800cf78 <TIM_OC3_SetConfig+0xfc>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d00f      	beq.n	800cf26 <TIM_OC3_SetConfig+0xaa>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4a1c      	ldr	r2, [pc, #112]	; (800cf7c <TIM_OC3_SetConfig+0x100>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d00b      	beq.n	800cf26 <TIM_OC3_SetConfig+0xaa>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4a1b      	ldr	r2, [pc, #108]	; (800cf80 <TIM_OC3_SetConfig+0x104>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d007      	beq.n	800cf26 <TIM_OC3_SetConfig+0xaa>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	4a1a      	ldr	r2, [pc, #104]	; (800cf84 <TIM_OC3_SetConfig+0x108>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d003      	beq.n	800cf26 <TIM_OC3_SetConfig+0xaa>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4a19      	ldr	r2, [pc, #100]	; (800cf88 <TIM_OC3_SetConfig+0x10c>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d113      	bne.n	800cf4e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	695b      	ldr	r3, [r3, #20]
 800cf3a:	011b      	lsls	r3, r3, #4
 800cf3c:	693a      	ldr	r2, [r7, #16]
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	699b      	ldr	r3, [r3, #24]
 800cf46:	011b      	lsls	r3, r3, #4
 800cf48:	693a      	ldr	r2, [r7, #16]
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	693a      	ldr	r2, [r7, #16]
 800cf52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	68fa      	ldr	r2, [r7, #12]
 800cf58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	685a      	ldr	r2, [r3, #4]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	697a      	ldr	r2, [r7, #20]
 800cf66:	621a      	str	r2, [r3, #32]
}
 800cf68:	bf00      	nop
 800cf6a:	371c      	adds	r7, #28
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr
 800cf74:	fffeff8f 	.word	0xfffeff8f
 800cf78:	40010000 	.word	0x40010000
 800cf7c:	40010400 	.word	0x40010400
 800cf80:	40014000 	.word	0x40014000
 800cf84:	40014400 	.word	0x40014400
 800cf88:	40014800 	.word	0x40014800

0800cf8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b087      	sub	sp, #28
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6a1b      	ldr	r3, [r3, #32]
 800cf9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6a1b      	ldr	r3, [r3, #32]
 800cfa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	69db      	ldr	r3, [r3, #28]
 800cfb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	4b24      	ldr	r3, [pc, #144]	; (800d048 <TIM_OC4_SetConfig+0xbc>)
 800cfb8:	4013      	ands	r3, r2
 800cfba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	021b      	lsls	r3, r3, #8
 800cfca:	68fa      	ldr	r2, [r7, #12]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cfd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	031b      	lsls	r3, r3, #12
 800cfde:	693a      	ldr	r2, [r7, #16]
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	4a19      	ldr	r2, [pc, #100]	; (800d04c <TIM_OC4_SetConfig+0xc0>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d00f      	beq.n	800d00c <TIM_OC4_SetConfig+0x80>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	4a18      	ldr	r2, [pc, #96]	; (800d050 <TIM_OC4_SetConfig+0xc4>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d00b      	beq.n	800d00c <TIM_OC4_SetConfig+0x80>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	4a17      	ldr	r2, [pc, #92]	; (800d054 <TIM_OC4_SetConfig+0xc8>)
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d007      	beq.n	800d00c <TIM_OC4_SetConfig+0x80>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	4a16      	ldr	r2, [pc, #88]	; (800d058 <TIM_OC4_SetConfig+0xcc>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d003      	beq.n	800d00c <TIM_OC4_SetConfig+0x80>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	4a15      	ldr	r2, [pc, #84]	; (800d05c <TIM_OC4_SetConfig+0xd0>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d109      	bne.n	800d020 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	695b      	ldr	r3, [r3, #20]
 800d018:	019b      	lsls	r3, r3, #6
 800d01a:	697a      	ldr	r2, [r7, #20]
 800d01c:	4313      	orrs	r3, r2
 800d01e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	697a      	ldr	r2, [r7, #20]
 800d024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	685a      	ldr	r2, [r3, #4]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	693a      	ldr	r2, [r7, #16]
 800d038:	621a      	str	r2, [r3, #32]
}
 800d03a:	bf00      	nop
 800d03c:	371c      	adds	r7, #28
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	feff8fff 	.word	0xfeff8fff
 800d04c:	40010000 	.word	0x40010000
 800d050:	40010400 	.word	0x40010400
 800d054:	40014000 	.word	0x40014000
 800d058:	40014400 	.word	0x40014400
 800d05c:	40014800 	.word	0x40014800

0800d060 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d060:	b480      	push	{r7}
 800d062:	b087      	sub	sp, #28
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6a1b      	ldr	r3, [r3, #32]
 800d06e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6a1b      	ldr	r3, [r3, #32]
 800d07a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	4b21      	ldr	r3, [pc, #132]	; (800d110 <TIM_OC5_SetConfig+0xb0>)
 800d08c:	4013      	ands	r3, r2
 800d08e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	4313      	orrs	r3, r2
 800d098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d0a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	041b      	lsls	r3, r3, #16
 800d0a8:	693a      	ldr	r2, [r7, #16]
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4a18      	ldr	r2, [pc, #96]	; (800d114 <TIM_OC5_SetConfig+0xb4>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d00f      	beq.n	800d0d6 <TIM_OC5_SetConfig+0x76>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	4a17      	ldr	r2, [pc, #92]	; (800d118 <TIM_OC5_SetConfig+0xb8>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d00b      	beq.n	800d0d6 <TIM_OC5_SetConfig+0x76>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4a16      	ldr	r2, [pc, #88]	; (800d11c <TIM_OC5_SetConfig+0xbc>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d007      	beq.n	800d0d6 <TIM_OC5_SetConfig+0x76>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4a15      	ldr	r2, [pc, #84]	; (800d120 <TIM_OC5_SetConfig+0xc0>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d003      	beq.n	800d0d6 <TIM_OC5_SetConfig+0x76>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	4a14      	ldr	r2, [pc, #80]	; (800d124 <TIM_OC5_SetConfig+0xc4>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d109      	bne.n	800d0ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d0dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	695b      	ldr	r3, [r3, #20]
 800d0e2:	021b      	lsls	r3, r3, #8
 800d0e4:	697a      	ldr	r2, [r7, #20]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	697a      	ldr	r2, [r7, #20]
 800d0ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	685a      	ldr	r2, [r3, #4]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	693a      	ldr	r2, [r7, #16]
 800d102:	621a      	str	r2, [r3, #32]
}
 800d104:	bf00      	nop
 800d106:	371c      	adds	r7, #28
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr
 800d110:	fffeff8f 	.word	0xfffeff8f
 800d114:	40010000 	.word	0x40010000
 800d118:	40010400 	.word	0x40010400
 800d11c:	40014000 	.word	0x40014000
 800d120:	40014400 	.word	0x40014400
 800d124:	40014800 	.word	0x40014800

0800d128 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d128:	b480      	push	{r7}
 800d12a:	b087      	sub	sp, #28
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a1b      	ldr	r3, [r3, #32]
 800d136:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	4b22      	ldr	r3, [pc, #136]	; (800d1dc <TIM_OC6_SetConfig+0xb4>)
 800d154:	4013      	ands	r3, r2
 800d156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	021b      	lsls	r3, r3, #8
 800d15e:	68fa      	ldr	r2, [r7, #12]
 800d160:	4313      	orrs	r3, r2
 800d162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d16a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	051b      	lsls	r3, r3, #20
 800d172:	693a      	ldr	r2, [r7, #16]
 800d174:	4313      	orrs	r3, r2
 800d176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	4a19      	ldr	r2, [pc, #100]	; (800d1e0 <TIM_OC6_SetConfig+0xb8>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d00f      	beq.n	800d1a0 <TIM_OC6_SetConfig+0x78>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4a18      	ldr	r2, [pc, #96]	; (800d1e4 <TIM_OC6_SetConfig+0xbc>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d00b      	beq.n	800d1a0 <TIM_OC6_SetConfig+0x78>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4a17      	ldr	r2, [pc, #92]	; (800d1e8 <TIM_OC6_SetConfig+0xc0>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d007      	beq.n	800d1a0 <TIM_OC6_SetConfig+0x78>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4a16      	ldr	r2, [pc, #88]	; (800d1ec <TIM_OC6_SetConfig+0xc4>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d003      	beq.n	800d1a0 <TIM_OC6_SetConfig+0x78>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4a15      	ldr	r2, [pc, #84]	; (800d1f0 <TIM_OC6_SetConfig+0xc8>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d109      	bne.n	800d1b4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	695b      	ldr	r3, [r3, #20]
 800d1ac:	029b      	lsls	r3, r3, #10
 800d1ae:	697a      	ldr	r2, [r7, #20]
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	697a      	ldr	r2, [r7, #20]
 800d1b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	68fa      	ldr	r2, [r7, #12]
 800d1be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	685a      	ldr	r2, [r3, #4]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	693a      	ldr	r2, [r7, #16]
 800d1cc:	621a      	str	r2, [r3, #32]
}
 800d1ce:	bf00      	nop
 800d1d0:	371c      	adds	r7, #28
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	feff8fff 	.word	0xfeff8fff
 800d1e0:	40010000 	.word	0x40010000
 800d1e4:	40010400 	.word	0x40010400
 800d1e8:	40014000 	.word	0x40014000
 800d1ec:	40014400 	.word	0x40014400
 800d1f0:	40014800 	.word	0x40014800

0800d1f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b087      	sub	sp, #28
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	f003 031f 	and.w	r3, r3, #31
 800d206:	2201      	movs	r2, #1
 800d208:	fa02 f303 	lsl.w	r3, r2, r3
 800d20c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	6a1a      	ldr	r2, [r3, #32]
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	43db      	mvns	r3, r3
 800d216:	401a      	ands	r2, r3
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6a1a      	ldr	r2, [r3, #32]
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	f003 031f 	and.w	r3, r3, #31
 800d226:	6879      	ldr	r1, [r7, #4]
 800d228:	fa01 f303 	lsl.w	r3, r1, r3
 800d22c:	431a      	orrs	r2, r3
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	621a      	str	r2, [r3, #32]
}
 800d232:	bf00      	nop
 800d234:	371c      	adds	r7, #28
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
	...

0800d240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d240:	b480      	push	{r7}
 800d242:	b085      	sub	sp, #20
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d250:	2b01      	cmp	r3, #1
 800d252:	d101      	bne.n	800d258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d254:	2302      	movs	r3, #2
 800d256:	e06d      	b.n	800d334 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2201      	movs	r2, #1
 800d25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2202      	movs	r2, #2
 800d264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a30      	ldr	r2, [pc, #192]	; (800d340 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d004      	beq.n	800d28c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a2f      	ldr	r2, [pc, #188]	; (800d344 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d108      	bne.n	800d29e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d292:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	4313      	orrs	r3, r2
 800d29c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68fa      	ldr	r2, [r7, #12]
 800d2b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a20      	ldr	r2, [pc, #128]	; (800d340 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d022      	beq.n	800d308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2ca:	d01d      	beq.n	800d308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a1d      	ldr	r2, [pc, #116]	; (800d348 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d018      	beq.n	800d308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a1c      	ldr	r2, [pc, #112]	; (800d34c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d013      	beq.n	800d308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a1a      	ldr	r2, [pc, #104]	; (800d350 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d00e      	beq.n	800d308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4a15      	ldr	r2, [pc, #84]	; (800d344 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d009      	beq.n	800d308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a16      	ldr	r2, [pc, #88]	; (800d354 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d004      	beq.n	800d308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a15      	ldr	r2, [pc, #84]	; (800d358 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d10c      	bne.n	800d322 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d30e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	68ba      	ldr	r2, [r7, #8]
 800d316:	4313      	orrs	r3, r2
 800d318:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2201      	movs	r2, #1
 800d326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d332:	2300      	movs	r3, #0
}
 800d334:	4618      	mov	r0, r3
 800d336:	3714      	adds	r7, #20
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr
 800d340:	40010000 	.word	0x40010000
 800d344:	40010400 	.word	0x40010400
 800d348:	40000400 	.word	0x40000400
 800d34c:	40000800 	.word	0x40000800
 800d350:	40000c00 	.word	0x40000c00
 800d354:	40001800 	.word	0x40001800
 800d358:	40014000 	.word	0x40014000

0800d35c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d366:	2300      	movs	r3, #0
 800d368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d370:	2b01      	cmp	r3, #1
 800d372:	d101      	bne.n	800d378 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d374:	2302      	movs	r3, #2
 800d376:	e065      	b.n	800d444 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	4313      	orrs	r3, r2
 800d38c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	4313      	orrs	r3, r2
 800d39a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	695b      	ldr	r3, [r3, #20]
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	699b      	ldr	r3, [r3, #24]
 800d3ec:	041b      	lsls	r3, r3, #16
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a16      	ldr	r2, [pc, #88]	; (800d450 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d004      	beq.n	800d406 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a14      	ldr	r2, [pc, #80]	; (800d454 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d115      	bne.n	800d432 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d410:	051b      	lsls	r3, r3, #20
 800d412:	4313      	orrs	r3, r2
 800d414:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	69db      	ldr	r3, [r3, #28]
 800d420:	4313      	orrs	r3, r2
 800d422:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	6a1b      	ldr	r3, [r3, #32]
 800d42e:	4313      	orrs	r3, r2
 800d430:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	68fa      	ldr	r2, [r7, #12]
 800d438:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2200      	movs	r2, #0
 800d43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d442:	2300      	movs	r3, #0
}
 800d444:	4618      	mov	r0, r3
 800d446:	3714      	adds	r7, #20
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr
 800d450:	40010000 	.word	0x40010000
 800d454:	40010400 	.word	0x40010400

0800d458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d460:	bf00      	nop
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d474:	bf00      	nop
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d101      	bne.n	800d4a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e042      	b.n	800d52c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d106      	bne.n	800d4be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f7f4 ff97 	bl	80023ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2224      	movs	r2, #36	; 0x24
 800d4c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f022 0201 	bic.w	r2, r2, #1
 800d4d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 fcd6 	bl	800de88 <UART_SetConfig>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d101      	bne.n	800d4e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e022      	b.n	800d52c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d002      	beq.n	800d4f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f001 fa32 	bl	800e958 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	685a      	ldr	r2, [r3, #4]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	689a      	ldr	r2, [r3, #8]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d512:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f042 0201 	orr.w	r2, r2, #1
 800d522:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f001 fab9 	bl	800ea9c <UART_CheckIdleState>
 800d52a:	4603      	mov	r3, r0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3708      	adds	r7, #8
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b08a      	sub	sp, #40	; 0x28
 800d538:	af02      	add	r7, sp, #8
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	603b      	str	r3, [r7, #0]
 800d540:	4613      	mov	r3, r2
 800d542:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d54a:	2b20      	cmp	r3, #32
 800d54c:	f040 8083 	bne.w	800d656 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d002      	beq.n	800d55c <HAL_UART_Transmit+0x28>
 800d556:	88fb      	ldrh	r3, [r7, #6]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d101      	bne.n	800d560 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d55c:	2301      	movs	r3, #1
 800d55e:	e07b      	b.n	800d658 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d566:	2b01      	cmp	r3, #1
 800d568:	d101      	bne.n	800d56e <HAL_UART_Transmit+0x3a>
 800d56a:	2302      	movs	r3, #2
 800d56c:	e074      	b.n	800d658 <HAL_UART_Transmit+0x124>
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2201      	movs	r2, #1
 800d572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2200      	movs	r2, #0
 800d57a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2221      	movs	r2, #33	; 0x21
 800d582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d586:	f7f5 f987 	bl	8002898 <HAL_GetTick>
 800d58a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	88fa      	ldrh	r2, [r7, #6]
 800d590:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	88fa      	ldrh	r2, [r7, #6]
 800d598:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	689b      	ldr	r3, [r3, #8]
 800d5a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5a4:	d108      	bne.n	800d5b8 <HAL_UART_Transmit+0x84>
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	691b      	ldr	r3, [r3, #16]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d104      	bne.n	800d5b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	61bb      	str	r3, [r7, #24]
 800d5b6:	e003      	b.n	800d5c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d5c8:	e02c      	b.n	800d624 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	2180      	movs	r1, #128	; 0x80
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f001 faac 	bl	800eb32 <UART_WaitOnFlagUntilTimeout>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d001      	beq.n	800d5e4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d5e0:	2303      	movs	r3, #3
 800d5e2:	e039      	b.n	800d658 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d10b      	bne.n	800d602 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d5ea:	69bb      	ldr	r3, [r7, #24]
 800d5ec:	881b      	ldrh	r3, [r3, #0]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d5f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	3302      	adds	r3, #2
 800d5fe:	61bb      	str	r3, [r7, #24]
 800d600:	e007      	b.n	800d612 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	781a      	ldrb	r2, [r3, #0]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	3301      	adds	r3, #1
 800d610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d618:	b29b      	uxth	r3, r3
 800d61a:	3b01      	subs	r3, #1
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d1cc      	bne.n	800d5ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	9300      	str	r3, [sp, #0]
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	2200      	movs	r2, #0
 800d638:	2140      	movs	r1, #64	; 0x40
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f001 fa79 	bl	800eb32 <UART_WaitOnFlagUntilTimeout>
 800d640:	4603      	mov	r3, r0
 800d642:	2b00      	cmp	r3, #0
 800d644:	d001      	beq.n	800d64a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d646:	2303      	movs	r3, #3
 800d648:	e006      	b.n	800d658 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2220      	movs	r2, #32
 800d64e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d652:	2300      	movs	r3, #0
 800d654:	e000      	b.n	800d658 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d656:	2302      	movs	r3, #2
  }
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3720      	adds	r7, #32
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b08a      	sub	sp, #40	; 0x28
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	4613      	mov	r3, r2
 800d66c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d674:	2b20      	cmp	r3, #32
 800d676:	d142      	bne.n	800d6fe <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d002      	beq.n	800d684 <HAL_UART_Receive_IT+0x24>
 800d67e:	88fb      	ldrh	r3, [r7, #6]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d101      	bne.n	800d688 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	e03b      	b.n	800d700 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d101      	bne.n	800d696 <HAL_UART_Receive_IT+0x36>
 800d692:	2302      	movs	r3, #2
 800d694:	e034      	b.n	800d700 <HAL_UART_Receive_IT+0xa0>
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2201      	movs	r2, #1
 800d69a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4a17      	ldr	r2, [pc, #92]	; (800d708 <HAL_UART_Receive_IT+0xa8>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d01f      	beq.n	800d6ee <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d018      	beq.n	800d6ee <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	e853 3f00 	ldrex	r3, [r3]
 800d6c8:	613b      	str	r3, [r7, #16]
   return(result);
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d6d0:	627b      	str	r3, [r7, #36]	; 0x24
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	623b      	str	r3, [r7, #32]
 800d6dc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6de:	69f9      	ldr	r1, [r7, #28]
 800d6e0:	6a3a      	ldr	r2, [r7, #32]
 800d6e2:	e841 2300 	strex	r3, r2, [r1]
 800d6e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6e8:	69bb      	ldr	r3, [r7, #24]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d1e6      	bne.n	800d6bc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d6ee:	88fb      	ldrh	r3, [r7, #6]
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	68b9      	ldr	r1, [r7, #8]
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f001 fae5 	bl	800ecc4 <UART_Start_Receive_IT>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	e000      	b.n	800d700 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d6fe:	2302      	movs	r3, #2
  }
}
 800d700:	4618      	mov	r0, r3
 800d702:	3728      	adds	r7, #40	; 0x28
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	58000c00 	.word	0x58000c00

0800d70c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b0ba      	sub	sp, #232	; 0xe8
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	69db      	ldr	r3, [r3, #28]
 800d71a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d732:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d736:	f640 030f 	movw	r3, #2063	; 0x80f
 800d73a:	4013      	ands	r3, r2
 800d73c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d744:	2b00      	cmp	r3, #0
 800d746:	d11b      	bne.n	800d780 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d74c:	f003 0320 	and.w	r3, r3, #32
 800d750:	2b00      	cmp	r3, #0
 800d752:	d015      	beq.n	800d780 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d758:	f003 0320 	and.w	r3, r3, #32
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d105      	bne.n	800d76c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d009      	beq.n	800d780 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d770:	2b00      	cmp	r3, #0
 800d772:	f000 835a 	beq.w	800de2a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	4798      	blx	r3
      }
      return;
 800d77e:	e354      	b.n	800de2a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d784:	2b00      	cmp	r3, #0
 800d786:	f000 811f 	beq.w	800d9c8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d78a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d78e:	4b8b      	ldr	r3, [pc, #556]	; (800d9bc <HAL_UART_IRQHandler+0x2b0>)
 800d790:	4013      	ands	r3, r2
 800d792:	2b00      	cmp	r3, #0
 800d794:	d106      	bne.n	800d7a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d796:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d79a:	4b89      	ldr	r3, [pc, #548]	; (800d9c0 <HAL_UART_IRQHandler+0x2b4>)
 800d79c:	4013      	ands	r3, r2
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	f000 8112 	beq.w	800d9c8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7a8:	f003 0301 	and.w	r3, r3, #1
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d011      	beq.n	800d7d4 <HAL_UART_IRQHandler+0xc8>
 800d7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00b      	beq.n	800d7d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7ca:	f043 0201 	orr.w	r2, r3, #1
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7d8:	f003 0302 	and.w	r3, r3, #2
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d011      	beq.n	800d804 <HAL_UART_IRQHandler+0xf8>
 800d7e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7e4:	f003 0301 	and.w	r3, r3, #1
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00b      	beq.n	800d804 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2202      	movs	r2, #2
 800d7f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7fa:	f043 0204 	orr.w	r2, r3, #4
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d808:	f003 0304 	and.w	r3, r3, #4
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d011      	beq.n	800d834 <HAL_UART_IRQHandler+0x128>
 800d810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d814:	f003 0301 	and.w	r3, r3, #1
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00b      	beq.n	800d834 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	2204      	movs	r2, #4
 800d822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d82a:	f043 0202 	orr.w	r2, r3, #2
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d838:	f003 0308 	and.w	r3, r3, #8
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d017      	beq.n	800d870 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d844:	f003 0320 	and.w	r3, r3, #32
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d105      	bne.n	800d858 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d84c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d850:	4b5a      	ldr	r3, [pc, #360]	; (800d9bc <HAL_UART_IRQHandler+0x2b0>)
 800d852:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00b      	beq.n	800d870 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2208      	movs	r2, #8
 800d85e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d866:	f043 0208 	orr.w	r2, r3, #8
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d012      	beq.n	800d8a2 <HAL_UART_IRQHandler+0x196>
 800d87c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d880:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d884:	2b00      	cmp	r3, #0
 800d886:	d00c      	beq.n	800d8a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d898:	f043 0220 	orr.w	r2, r3, #32
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f000 82c0 	beq.w	800de2e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d8ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8b2:	f003 0320 	and.w	r3, r3, #32
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d013      	beq.n	800d8e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d8ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8be:	f003 0320 	and.w	r3, r3, #32
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d105      	bne.n	800d8d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d8c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d007      	beq.n	800d8e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d003      	beq.n	800d8e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	689b      	ldr	r3, [r3, #8]
 800d8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8f6:	2b40      	cmp	r3, #64	; 0x40
 800d8f8:	d005      	beq.n	800d906 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d8fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d902:	2b00      	cmp	r3, #0
 800d904:	d04f      	beq.n	800d9a6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f001 fb06 	bl	800ef18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d916:	2b40      	cmp	r3, #64	; 0x40
 800d918:	d141      	bne.n	800d99e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	3308      	adds	r3, #8
 800d920:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d924:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d928:	e853 3f00 	ldrex	r3, [r3]
 800d92c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d930:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d938:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	3308      	adds	r3, #8
 800d942:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d946:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d94a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d94e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d952:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d956:	e841 2300 	strex	r3, r2, [r1]
 800d95a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d95e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d1d9      	bne.n	800d91a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d013      	beq.n	800d996 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d972:	4a14      	ldr	r2, [pc, #80]	; (800d9c4 <HAL_UART_IRQHandler+0x2b8>)
 800d974:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7f7 ffa6 	bl	80058cc <HAL_DMA_Abort_IT>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d017      	beq.n	800d9b6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d98a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d990:	4610      	mov	r0, r2
 800d992:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d994:	e00f      	b.n	800d9b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 fa60 	bl	800de5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d99c:	e00b      	b.n	800d9b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 fa5c 	bl	800de5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9a4:	e007      	b.n	800d9b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 fa58 	bl	800de5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d9b4:	e23b      	b.n	800de2e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9b6:	bf00      	nop
    return;
 800d9b8:	e239      	b.n	800de2e <HAL_UART_IRQHandler+0x722>
 800d9ba:	bf00      	nop
 800d9bc:	10000001 	.word	0x10000001
 800d9c0:	04000120 	.word	0x04000120
 800d9c4:	0800efe5 	.word	0x0800efe5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	f040 81ce 	bne.w	800dd6e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d9d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9d6:	f003 0310 	and.w	r3, r3, #16
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	f000 81c7 	beq.w	800dd6e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d9e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9e4:	f003 0310 	and.w	r3, r3, #16
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f000 81c0 	beq.w	800dd6e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2210      	movs	r2, #16
 800d9f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da00:	2b40      	cmp	r3, #64	; 0x40
 800da02:	f040 813b 	bne.w	800dc7c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a8b      	ldr	r2, [pc, #556]	; (800dc3c <HAL_UART_IRQHandler+0x530>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d059      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a89      	ldr	r2, [pc, #548]	; (800dc40 <HAL_UART_IRQHandler+0x534>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d053      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a87      	ldr	r2, [pc, #540]	; (800dc44 <HAL_UART_IRQHandler+0x538>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d04d      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a85      	ldr	r2, [pc, #532]	; (800dc48 <HAL_UART_IRQHandler+0x53c>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d047      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a83      	ldr	r2, [pc, #524]	; (800dc4c <HAL_UART_IRQHandler+0x540>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d041      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a81      	ldr	r2, [pc, #516]	; (800dc50 <HAL_UART_IRQHandler+0x544>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d03b      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a7f      	ldr	r2, [pc, #508]	; (800dc54 <HAL_UART_IRQHandler+0x548>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d035      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a7d      	ldr	r2, [pc, #500]	; (800dc58 <HAL_UART_IRQHandler+0x54c>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d02f      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a7b      	ldr	r2, [pc, #492]	; (800dc5c <HAL_UART_IRQHandler+0x550>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d029      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a79      	ldr	r2, [pc, #484]	; (800dc60 <HAL_UART_IRQHandler+0x554>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d023      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a77      	ldr	r2, [pc, #476]	; (800dc64 <HAL_UART_IRQHandler+0x558>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d01d      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a75      	ldr	r2, [pc, #468]	; (800dc68 <HAL_UART_IRQHandler+0x55c>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d017      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a73      	ldr	r2, [pc, #460]	; (800dc6c <HAL_UART_IRQHandler+0x560>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d011      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a71      	ldr	r2, [pc, #452]	; (800dc70 <HAL_UART_IRQHandler+0x564>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d00b      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a6f      	ldr	r2, [pc, #444]	; (800dc74 <HAL_UART_IRQHandler+0x568>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d005      	beq.n	800dac6 <HAL_UART_IRQHandler+0x3ba>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a6d      	ldr	r2, [pc, #436]	; (800dc78 <HAL_UART_IRQHandler+0x56c>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d105      	bne.n	800dad2 <HAL_UART_IRQHandler+0x3c6>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	b29b      	uxth	r3, r3
 800dad0:	e004      	b.n	800dadc <HAL_UART_IRQHandler+0x3d0>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	b29b      	uxth	r3, r3
 800dadc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dae0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f000 81a4 	beq.w	800de32 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800daf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800daf4:	429a      	cmp	r2, r3
 800daf6:	f080 819c 	bcs.w	800de32 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db08:	69db      	ldr	r3, [r3, #28]
 800db0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db0e:	f000 8086 	beq.w	800dc1e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db1e:	e853 3f00 	ldrex	r3, [r3]
 800db22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800db26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	461a      	mov	r2, r3
 800db38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800db3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800db40:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800db48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800db4c:	e841 2300 	strex	r3, r2, [r1]
 800db50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800db54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d1da      	bne.n	800db12 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	3308      	adds	r3, #8
 800db62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db66:	e853 3f00 	ldrex	r3, [r3]
 800db6a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800db6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db6e:	f023 0301 	bic.w	r3, r3, #1
 800db72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	3308      	adds	r3, #8
 800db7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800db80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800db84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800db88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800db8c:	e841 2300 	strex	r3, r2, [r1]
 800db90:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800db92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db94:	2b00      	cmp	r3, #0
 800db96:	d1e1      	bne.n	800db5c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	3308      	adds	r3, #8
 800db9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dba2:	e853 3f00 	ldrex	r3, [r3]
 800dba6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	3308      	adds	r3, #8
 800dbb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dbbc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dbbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dbc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dbc4:	e841 2300 	strex	r3, r2, [r1]
 800dbc8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dbca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d1e3      	bne.n	800db98 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2220      	movs	r2, #32
 800dbd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe6:	e853 3f00 	ldrex	r3, [r3]
 800dbea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dbec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbee:	f023 0310 	bic.w	r3, r3, #16
 800dbf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc00:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc08:	e841 2300 	strex	r3, r2, [r1]
 800dc0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dc0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d1e4      	bne.n	800dbde <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7f7 fb39 	bl	8005290 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	1ad3      	subs	r3, r2, r3
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	4619      	mov	r1, r3
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 f91c 	bl	800de70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc38:	e0fb      	b.n	800de32 <HAL_UART_IRQHandler+0x726>
 800dc3a:	bf00      	nop
 800dc3c:	40020010 	.word	0x40020010
 800dc40:	40020028 	.word	0x40020028
 800dc44:	40020040 	.word	0x40020040
 800dc48:	40020058 	.word	0x40020058
 800dc4c:	40020070 	.word	0x40020070
 800dc50:	40020088 	.word	0x40020088
 800dc54:	400200a0 	.word	0x400200a0
 800dc58:	400200b8 	.word	0x400200b8
 800dc5c:	40020410 	.word	0x40020410
 800dc60:	40020428 	.word	0x40020428
 800dc64:	40020440 	.word	0x40020440
 800dc68:	40020458 	.word	0x40020458
 800dc6c:	40020470 	.word	0x40020470
 800dc70:	40020488 	.word	0x40020488
 800dc74:	400204a0 	.word	0x400204a0
 800dc78:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	1ad3      	subs	r3, r2, r3
 800dc8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc96:	b29b      	uxth	r3, r3
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f000 80cc 	beq.w	800de36 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800dc9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	f000 80c7 	beq.w	800de36 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb0:	e853 3f00 	ldrex	r3, [r3]
 800dcb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dcb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dcbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dcca:	647b      	str	r3, [r7, #68]	; 0x44
 800dccc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dcd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcd2:	e841 2300 	strex	r3, r2, [r1]
 800dcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dcd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d1e4      	bne.n	800dca8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	3308      	adds	r3, #8
 800dce4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce8:	e853 3f00 	ldrex	r3, [r3]
 800dcec:	623b      	str	r3, [r7, #32]
   return(result);
 800dcee:	6a3a      	ldr	r2, [r7, #32]
 800dcf0:	4b54      	ldr	r3, [pc, #336]	; (800de44 <HAL_UART_IRQHandler+0x738>)
 800dcf2:	4013      	ands	r3, r2
 800dcf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	3308      	adds	r3, #8
 800dcfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dd02:	633a      	str	r2, [r7, #48]	; 0x30
 800dd04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd0a:	e841 2300 	strex	r3, r2, [r1]
 800dd0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d1e3      	bne.n	800dcde <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2220      	movs	r2, #32
 800dd1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2200      	movs	r2, #0
 800dd28:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	e853 3f00 	ldrex	r3, [r3]
 800dd36:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f023 0310 	bic.w	r3, r3, #16
 800dd3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	461a      	mov	r2, r3
 800dd48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dd4c:	61fb      	str	r3, [r7, #28]
 800dd4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd50:	69b9      	ldr	r1, [r7, #24]
 800dd52:	69fa      	ldr	r2, [r7, #28]
 800dd54:	e841 2300 	strex	r3, r2, [r1]
 800dd58:	617b      	str	r3, [r7, #20]
   return(result);
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d1e4      	bne.n	800dd2a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dd60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dd64:	4619      	mov	r1, r3
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 f882 	bl	800de70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dd6c:	e063      	b.n	800de36 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dd6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d00e      	beq.n	800dd98 <HAL_UART_IRQHandler+0x68c>
 800dd7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d008      	beq.n	800dd98 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dd8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f001 fdc5 	bl	800f920 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd96:	e051      	b.n	800de3c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dd98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d014      	beq.n	800ddce <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dda4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dda8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d105      	bne.n	800ddbc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ddb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d008      	beq.n	800ddce <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d03a      	beq.n	800de3a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	4798      	blx	r3
    }
    return;
 800ddcc:	e035      	b.n	800de3a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ddce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d009      	beq.n	800ddee <HAL_UART_IRQHandler+0x6e2>
 800ddda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d003      	beq.n	800ddee <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f001 f912 	bl	800f010 <UART_EndTransmit_IT>
    return;
 800ddec:	e026      	b.n	800de3c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ddee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d009      	beq.n	800de0e <HAL_UART_IRQHandler+0x702>
 800ddfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddfe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de02:	2b00      	cmp	r3, #0
 800de04:	d003      	beq.n	800de0e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f001 fd9e 	bl	800f948 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de0c:	e016      	b.n	800de3c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800de0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800de16:	2b00      	cmp	r3, #0
 800de18:	d010      	beq.n	800de3c <HAL_UART_IRQHandler+0x730>
 800de1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	da0c      	bge.n	800de3c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f001 fd86 	bl	800f934 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de28:	e008      	b.n	800de3c <HAL_UART_IRQHandler+0x730>
      return;
 800de2a:	bf00      	nop
 800de2c:	e006      	b.n	800de3c <HAL_UART_IRQHandler+0x730>
    return;
 800de2e:	bf00      	nop
 800de30:	e004      	b.n	800de3c <HAL_UART_IRQHandler+0x730>
      return;
 800de32:	bf00      	nop
 800de34:	e002      	b.n	800de3c <HAL_UART_IRQHandler+0x730>
      return;
 800de36:	bf00      	nop
 800de38:	e000      	b.n	800de3c <HAL_UART_IRQHandler+0x730>
    return;
 800de3a:	bf00      	nop
  }
}
 800de3c:	37e8      	adds	r7, #232	; 0xe8
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	effffffe 	.word	0xeffffffe

0800de48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800de48:	b480      	push	{r7}
 800de4a:	b083      	sub	sp, #12
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800de50:	bf00      	nop
 800de52:	370c      	adds	r7, #12
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr

0800de5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800de64:	bf00      	nop
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	460b      	mov	r3, r1
 800de7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800de7c:	bf00      	nop
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800de88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800de8c:	b092      	sub	sp, #72	; 0x48
 800de8e:	af00      	add	r7, sp, #0
 800de90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800de92:	2300      	movs	r3, #0
 800de94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	689a      	ldr	r2, [r3, #8]
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	691b      	ldr	r3, [r3, #16]
 800dea0:	431a      	orrs	r2, r3
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	695b      	ldr	r3, [r3, #20]
 800dea6:	431a      	orrs	r2, r3
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	69db      	ldr	r3, [r3, #28]
 800deac:	4313      	orrs	r3, r2
 800deae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	681a      	ldr	r2, [r3, #0]
 800deb6:	4bbe      	ldr	r3, [pc, #760]	; (800e1b0 <UART_SetConfig+0x328>)
 800deb8:	4013      	ands	r3, r2
 800deba:	697a      	ldr	r2, [r7, #20]
 800debc:	6812      	ldr	r2, [r2, #0]
 800debe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dec0:	430b      	orrs	r3, r1
 800dec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	68da      	ldr	r2, [r3, #12]
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	430a      	orrs	r2, r1
 800ded8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	699b      	ldr	r3, [r3, #24]
 800dede:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4ab3      	ldr	r2, [pc, #716]	; (800e1b4 <UART_SetConfig+0x32c>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d004      	beq.n	800def4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	6a1b      	ldr	r3, [r3, #32]
 800deee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800def0:	4313      	orrs	r3, r2
 800def2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	689a      	ldr	r2, [r3, #8]
 800defa:	4baf      	ldr	r3, [pc, #700]	; (800e1b8 <UART_SetConfig+0x330>)
 800defc:	4013      	ands	r3, r2
 800defe:	697a      	ldr	r2, [r7, #20]
 800df00:	6812      	ldr	r2, [r2, #0]
 800df02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df04:	430b      	orrs	r3, r1
 800df06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0e:	f023 010f 	bic.w	r1, r3, #15
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	430a      	orrs	r2, r1
 800df1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4aa6      	ldr	r2, [pc, #664]	; (800e1bc <UART_SetConfig+0x334>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d177      	bne.n	800e018 <UART_SetConfig+0x190>
 800df28:	4ba5      	ldr	r3, [pc, #660]	; (800e1c0 <UART_SetConfig+0x338>)
 800df2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df30:	2b28      	cmp	r3, #40	; 0x28
 800df32:	d86d      	bhi.n	800e010 <UART_SetConfig+0x188>
 800df34:	a201      	add	r2, pc, #4	; (adr r2, 800df3c <UART_SetConfig+0xb4>)
 800df36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df3a:	bf00      	nop
 800df3c:	0800dfe1 	.word	0x0800dfe1
 800df40:	0800e011 	.word	0x0800e011
 800df44:	0800e011 	.word	0x0800e011
 800df48:	0800e011 	.word	0x0800e011
 800df4c:	0800e011 	.word	0x0800e011
 800df50:	0800e011 	.word	0x0800e011
 800df54:	0800e011 	.word	0x0800e011
 800df58:	0800e011 	.word	0x0800e011
 800df5c:	0800dfe9 	.word	0x0800dfe9
 800df60:	0800e011 	.word	0x0800e011
 800df64:	0800e011 	.word	0x0800e011
 800df68:	0800e011 	.word	0x0800e011
 800df6c:	0800e011 	.word	0x0800e011
 800df70:	0800e011 	.word	0x0800e011
 800df74:	0800e011 	.word	0x0800e011
 800df78:	0800e011 	.word	0x0800e011
 800df7c:	0800dff1 	.word	0x0800dff1
 800df80:	0800e011 	.word	0x0800e011
 800df84:	0800e011 	.word	0x0800e011
 800df88:	0800e011 	.word	0x0800e011
 800df8c:	0800e011 	.word	0x0800e011
 800df90:	0800e011 	.word	0x0800e011
 800df94:	0800e011 	.word	0x0800e011
 800df98:	0800e011 	.word	0x0800e011
 800df9c:	0800dff9 	.word	0x0800dff9
 800dfa0:	0800e011 	.word	0x0800e011
 800dfa4:	0800e011 	.word	0x0800e011
 800dfa8:	0800e011 	.word	0x0800e011
 800dfac:	0800e011 	.word	0x0800e011
 800dfb0:	0800e011 	.word	0x0800e011
 800dfb4:	0800e011 	.word	0x0800e011
 800dfb8:	0800e011 	.word	0x0800e011
 800dfbc:	0800e001 	.word	0x0800e001
 800dfc0:	0800e011 	.word	0x0800e011
 800dfc4:	0800e011 	.word	0x0800e011
 800dfc8:	0800e011 	.word	0x0800e011
 800dfcc:	0800e011 	.word	0x0800e011
 800dfd0:	0800e011 	.word	0x0800e011
 800dfd4:	0800e011 	.word	0x0800e011
 800dfd8:	0800e011 	.word	0x0800e011
 800dfdc:	0800e009 	.word	0x0800e009
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfe6:	e222      	b.n	800e42e <UART_SetConfig+0x5a6>
 800dfe8:	2304      	movs	r3, #4
 800dfea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfee:	e21e      	b.n	800e42e <UART_SetConfig+0x5a6>
 800dff0:	2308      	movs	r3, #8
 800dff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dff6:	e21a      	b.n	800e42e <UART_SetConfig+0x5a6>
 800dff8:	2310      	movs	r3, #16
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffe:	e216      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e000:	2320      	movs	r3, #32
 800e002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e006:	e212      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e008:	2340      	movs	r3, #64	; 0x40
 800e00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e00e:	e20e      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e010:	2380      	movs	r3, #128	; 0x80
 800e012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e016:	e20a      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4a69      	ldr	r2, [pc, #420]	; (800e1c4 <UART_SetConfig+0x33c>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d130      	bne.n	800e084 <UART_SetConfig+0x1fc>
 800e022:	4b67      	ldr	r3, [pc, #412]	; (800e1c0 <UART_SetConfig+0x338>)
 800e024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e026:	f003 0307 	and.w	r3, r3, #7
 800e02a:	2b05      	cmp	r3, #5
 800e02c:	d826      	bhi.n	800e07c <UART_SetConfig+0x1f4>
 800e02e:	a201      	add	r2, pc, #4	; (adr r2, 800e034 <UART_SetConfig+0x1ac>)
 800e030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e034:	0800e04d 	.word	0x0800e04d
 800e038:	0800e055 	.word	0x0800e055
 800e03c:	0800e05d 	.word	0x0800e05d
 800e040:	0800e065 	.word	0x0800e065
 800e044:	0800e06d 	.word	0x0800e06d
 800e048:	0800e075 	.word	0x0800e075
 800e04c:	2300      	movs	r3, #0
 800e04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e052:	e1ec      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e054:	2304      	movs	r3, #4
 800e056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e05a:	e1e8      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e05c:	2308      	movs	r3, #8
 800e05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e062:	e1e4      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e064:	2310      	movs	r3, #16
 800e066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06a:	e1e0      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e06c:	2320      	movs	r3, #32
 800e06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e072:	e1dc      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e074:	2340      	movs	r3, #64	; 0x40
 800e076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e07a:	e1d8      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e07c:	2380      	movs	r3, #128	; 0x80
 800e07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e082:	e1d4      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4a4f      	ldr	r2, [pc, #316]	; (800e1c8 <UART_SetConfig+0x340>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d130      	bne.n	800e0f0 <UART_SetConfig+0x268>
 800e08e:	4b4c      	ldr	r3, [pc, #304]	; (800e1c0 <UART_SetConfig+0x338>)
 800e090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e092:	f003 0307 	and.w	r3, r3, #7
 800e096:	2b05      	cmp	r3, #5
 800e098:	d826      	bhi.n	800e0e8 <UART_SetConfig+0x260>
 800e09a:	a201      	add	r2, pc, #4	; (adr r2, 800e0a0 <UART_SetConfig+0x218>)
 800e09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a0:	0800e0b9 	.word	0x0800e0b9
 800e0a4:	0800e0c1 	.word	0x0800e0c1
 800e0a8:	0800e0c9 	.word	0x0800e0c9
 800e0ac:	0800e0d1 	.word	0x0800e0d1
 800e0b0:	0800e0d9 	.word	0x0800e0d9
 800e0b4:	0800e0e1 	.word	0x0800e0e1
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0be:	e1b6      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e0c0:	2304      	movs	r3, #4
 800e0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0c6:	e1b2      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e0c8:	2308      	movs	r3, #8
 800e0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ce:	e1ae      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e0d0:	2310      	movs	r3, #16
 800e0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0d6:	e1aa      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e0d8:	2320      	movs	r3, #32
 800e0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0de:	e1a6      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e0e0:	2340      	movs	r3, #64	; 0x40
 800e0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0e6:	e1a2      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e0e8:	2380      	movs	r3, #128	; 0x80
 800e0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ee:	e19e      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4a35      	ldr	r2, [pc, #212]	; (800e1cc <UART_SetConfig+0x344>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d130      	bne.n	800e15c <UART_SetConfig+0x2d4>
 800e0fa:	4b31      	ldr	r3, [pc, #196]	; (800e1c0 <UART_SetConfig+0x338>)
 800e0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0fe:	f003 0307 	and.w	r3, r3, #7
 800e102:	2b05      	cmp	r3, #5
 800e104:	d826      	bhi.n	800e154 <UART_SetConfig+0x2cc>
 800e106:	a201      	add	r2, pc, #4	; (adr r2, 800e10c <UART_SetConfig+0x284>)
 800e108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e10c:	0800e125 	.word	0x0800e125
 800e110:	0800e12d 	.word	0x0800e12d
 800e114:	0800e135 	.word	0x0800e135
 800e118:	0800e13d 	.word	0x0800e13d
 800e11c:	0800e145 	.word	0x0800e145
 800e120:	0800e14d 	.word	0x0800e14d
 800e124:	2300      	movs	r3, #0
 800e126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12a:	e180      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e12c:	2304      	movs	r3, #4
 800e12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e132:	e17c      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e134:	2308      	movs	r3, #8
 800e136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e13a:	e178      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e13c:	2310      	movs	r3, #16
 800e13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e142:	e174      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e144:	2320      	movs	r3, #32
 800e146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e14a:	e170      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e14c:	2340      	movs	r3, #64	; 0x40
 800e14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e152:	e16c      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e154:	2380      	movs	r3, #128	; 0x80
 800e156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15a:	e168      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a1b      	ldr	r2, [pc, #108]	; (800e1d0 <UART_SetConfig+0x348>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d142      	bne.n	800e1ec <UART_SetConfig+0x364>
 800e166:	4b16      	ldr	r3, [pc, #88]	; (800e1c0 <UART_SetConfig+0x338>)
 800e168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e16a:	f003 0307 	and.w	r3, r3, #7
 800e16e:	2b05      	cmp	r3, #5
 800e170:	d838      	bhi.n	800e1e4 <UART_SetConfig+0x35c>
 800e172:	a201      	add	r2, pc, #4	; (adr r2, 800e178 <UART_SetConfig+0x2f0>)
 800e174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e178:	0800e191 	.word	0x0800e191
 800e17c:	0800e199 	.word	0x0800e199
 800e180:	0800e1a1 	.word	0x0800e1a1
 800e184:	0800e1a9 	.word	0x0800e1a9
 800e188:	0800e1d5 	.word	0x0800e1d5
 800e18c:	0800e1dd 	.word	0x0800e1dd
 800e190:	2300      	movs	r3, #0
 800e192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e196:	e14a      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e198:	2304      	movs	r3, #4
 800e19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19e:	e146      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e1a0:	2308      	movs	r3, #8
 800e1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a6:	e142      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e1a8:	2310      	movs	r3, #16
 800e1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ae:	e13e      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e1b0:	cfff69f3 	.word	0xcfff69f3
 800e1b4:	58000c00 	.word	0x58000c00
 800e1b8:	11fff4ff 	.word	0x11fff4ff
 800e1bc:	40011000 	.word	0x40011000
 800e1c0:	58024400 	.word	0x58024400
 800e1c4:	40004400 	.word	0x40004400
 800e1c8:	40004800 	.word	0x40004800
 800e1cc:	40004c00 	.word	0x40004c00
 800e1d0:	40005000 	.word	0x40005000
 800e1d4:	2320      	movs	r3, #32
 800e1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1da:	e128      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e1dc:	2340      	movs	r3, #64	; 0x40
 800e1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e2:	e124      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e1e4:	2380      	movs	r3, #128	; 0x80
 800e1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ea:	e120      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4acb      	ldr	r2, [pc, #812]	; (800e520 <UART_SetConfig+0x698>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d176      	bne.n	800e2e4 <UART_SetConfig+0x45c>
 800e1f6:	4bcb      	ldr	r3, [pc, #812]	; (800e524 <UART_SetConfig+0x69c>)
 800e1f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e1fe:	2b28      	cmp	r3, #40	; 0x28
 800e200:	d86c      	bhi.n	800e2dc <UART_SetConfig+0x454>
 800e202:	a201      	add	r2, pc, #4	; (adr r2, 800e208 <UART_SetConfig+0x380>)
 800e204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e208:	0800e2ad 	.word	0x0800e2ad
 800e20c:	0800e2dd 	.word	0x0800e2dd
 800e210:	0800e2dd 	.word	0x0800e2dd
 800e214:	0800e2dd 	.word	0x0800e2dd
 800e218:	0800e2dd 	.word	0x0800e2dd
 800e21c:	0800e2dd 	.word	0x0800e2dd
 800e220:	0800e2dd 	.word	0x0800e2dd
 800e224:	0800e2dd 	.word	0x0800e2dd
 800e228:	0800e2b5 	.word	0x0800e2b5
 800e22c:	0800e2dd 	.word	0x0800e2dd
 800e230:	0800e2dd 	.word	0x0800e2dd
 800e234:	0800e2dd 	.word	0x0800e2dd
 800e238:	0800e2dd 	.word	0x0800e2dd
 800e23c:	0800e2dd 	.word	0x0800e2dd
 800e240:	0800e2dd 	.word	0x0800e2dd
 800e244:	0800e2dd 	.word	0x0800e2dd
 800e248:	0800e2bd 	.word	0x0800e2bd
 800e24c:	0800e2dd 	.word	0x0800e2dd
 800e250:	0800e2dd 	.word	0x0800e2dd
 800e254:	0800e2dd 	.word	0x0800e2dd
 800e258:	0800e2dd 	.word	0x0800e2dd
 800e25c:	0800e2dd 	.word	0x0800e2dd
 800e260:	0800e2dd 	.word	0x0800e2dd
 800e264:	0800e2dd 	.word	0x0800e2dd
 800e268:	0800e2c5 	.word	0x0800e2c5
 800e26c:	0800e2dd 	.word	0x0800e2dd
 800e270:	0800e2dd 	.word	0x0800e2dd
 800e274:	0800e2dd 	.word	0x0800e2dd
 800e278:	0800e2dd 	.word	0x0800e2dd
 800e27c:	0800e2dd 	.word	0x0800e2dd
 800e280:	0800e2dd 	.word	0x0800e2dd
 800e284:	0800e2dd 	.word	0x0800e2dd
 800e288:	0800e2cd 	.word	0x0800e2cd
 800e28c:	0800e2dd 	.word	0x0800e2dd
 800e290:	0800e2dd 	.word	0x0800e2dd
 800e294:	0800e2dd 	.word	0x0800e2dd
 800e298:	0800e2dd 	.word	0x0800e2dd
 800e29c:	0800e2dd 	.word	0x0800e2dd
 800e2a0:	0800e2dd 	.word	0x0800e2dd
 800e2a4:	0800e2dd 	.word	0x0800e2dd
 800e2a8:	0800e2d5 	.word	0x0800e2d5
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2b2:	e0bc      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e2b4:	2304      	movs	r3, #4
 800e2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ba:	e0b8      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e2bc:	2308      	movs	r3, #8
 800e2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2c2:	e0b4      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e2c4:	2310      	movs	r3, #16
 800e2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ca:	e0b0      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e2cc:	2320      	movs	r3, #32
 800e2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2d2:	e0ac      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e2d4:	2340      	movs	r3, #64	; 0x40
 800e2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2da:	e0a8      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e2dc:	2380      	movs	r3, #128	; 0x80
 800e2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2e2:	e0a4      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4a8f      	ldr	r2, [pc, #572]	; (800e528 <UART_SetConfig+0x6a0>)
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d130      	bne.n	800e350 <UART_SetConfig+0x4c8>
 800e2ee:	4b8d      	ldr	r3, [pc, #564]	; (800e524 <UART_SetConfig+0x69c>)
 800e2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2f2:	f003 0307 	and.w	r3, r3, #7
 800e2f6:	2b05      	cmp	r3, #5
 800e2f8:	d826      	bhi.n	800e348 <UART_SetConfig+0x4c0>
 800e2fa:	a201      	add	r2, pc, #4	; (adr r2, 800e300 <UART_SetConfig+0x478>)
 800e2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e300:	0800e319 	.word	0x0800e319
 800e304:	0800e321 	.word	0x0800e321
 800e308:	0800e329 	.word	0x0800e329
 800e30c:	0800e331 	.word	0x0800e331
 800e310:	0800e339 	.word	0x0800e339
 800e314:	0800e341 	.word	0x0800e341
 800e318:	2300      	movs	r3, #0
 800e31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e31e:	e086      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e320:	2304      	movs	r3, #4
 800e322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e326:	e082      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e328:	2308      	movs	r3, #8
 800e32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e32e:	e07e      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e330:	2310      	movs	r3, #16
 800e332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e336:	e07a      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e338:	2320      	movs	r3, #32
 800e33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e33e:	e076      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e340:	2340      	movs	r3, #64	; 0x40
 800e342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e346:	e072      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e348:	2380      	movs	r3, #128	; 0x80
 800e34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34e:	e06e      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a75      	ldr	r2, [pc, #468]	; (800e52c <UART_SetConfig+0x6a4>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d130      	bne.n	800e3bc <UART_SetConfig+0x534>
 800e35a:	4b72      	ldr	r3, [pc, #456]	; (800e524 <UART_SetConfig+0x69c>)
 800e35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e35e:	f003 0307 	and.w	r3, r3, #7
 800e362:	2b05      	cmp	r3, #5
 800e364:	d826      	bhi.n	800e3b4 <UART_SetConfig+0x52c>
 800e366:	a201      	add	r2, pc, #4	; (adr r2, 800e36c <UART_SetConfig+0x4e4>)
 800e368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e36c:	0800e385 	.word	0x0800e385
 800e370:	0800e38d 	.word	0x0800e38d
 800e374:	0800e395 	.word	0x0800e395
 800e378:	0800e39d 	.word	0x0800e39d
 800e37c:	0800e3a5 	.word	0x0800e3a5
 800e380:	0800e3ad 	.word	0x0800e3ad
 800e384:	2300      	movs	r3, #0
 800e386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e38a:	e050      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e38c:	2304      	movs	r3, #4
 800e38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e392:	e04c      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e394:	2308      	movs	r3, #8
 800e396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39a:	e048      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e39c:	2310      	movs	r3, #16
 800e39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a2:	e044      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e3a4:	2320      	movs	r3, #32
 800e3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3aa:	e040      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e3ac:	2340      	movs	r3, #64	; 0x40
 800e3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b2:	e03c      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e3b4:	2380      	movs	r3, #128	; 0x80
 800e3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ba:	e038      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4a5b      	ldr	r2, [pc, #364]	; (800e530 <UART_SetConfig+0x6a8>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d130      	bne.n	800e428 <UART_SetConfig+0x5a0>
 800e3c6:	4b57      	ldr	r3, [pc, #348]	; (800e524 <UART_SetConfig+0x69c>)
 800e3c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3ca:	f003 0307 	and.w	r3, r3, #7
 800e3ce:	2b05      	cmp	r3, #5
 800e3d0:	d826      	bhi.n	800e420 <UART_SetConfig+0x598>
 800e3d2:	a201      	add	r2, pc, #4	; (adr r2, 800e3d8 <UART_SetConfig+0x550>)
 800e3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d8:	0800e3f1 	.word	0x0800e3f1
 800e3dc:	0800e3f9 	.word	0x0800e3f9
 800e3e0:	0800e401 	.word	0x0800e401
 800e3e4:	0800e409 	.word	0x0800e409
 800e3e8:	0800e411 	.word	0x0800e411
 800e3ec:	0800e419 	.word	0x0800e419
 800e3f0:	2302      	movs	r3, #2
 800e3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f6:	e01a      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e3f8:	2304      	movs	r3, #4
 800e3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fe:	e016      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e400:	2308      	movs	r3, #8
 800e402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e406:	e012      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e408:	2310      	movs	r3, #16
 800e40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e40e:	e00e      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e410:	2320      	movs	r3, #32
 800e412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e416:	e00a      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e418:	2340      	movs	r3, #64	; 0x40
 800e41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41e:	e006      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e420:	2380      	movs	r3, #128	; 0x80
 800e422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e426:	e002      	b.n	800e42e <UART_SetConfig+0x5a6>
 800e428:	2380      	movs	r3, #128	; 0x80
 800e42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4a3f      	ldr	r2, [pc, #252]	; (800e530 <UART_SetConfig+0x6a8>)
 800e434:	4293      	cmp	r3, r2
 800e436:	f040 80f8 	bne.w	800e62a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e43a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e43e:	2b20      	cmp	r3, #32
 800e440:	dc46      	bgt.n	800e4d0 <UART_SetConfig+0x648>
 800e442:	2b02      	cmp	r3, #2
 800e444:	f2c0 8082 	blt.w	800e54c <UART_SetConfig+0x6c4>
 800e448:	3b02      	subs	r3, #2
 800e44a:	2b1e      	cmp	r3, #30
 800e44c:	d87e      	bhi.n	800e54c <UART_SetConfig+0x6c4>
 800e44e:	a201      	add	r2, pc, #4	; (adr r2, 800e454 <UART_SetConfig+0x5cc>)
 800e450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e454:	0800e4d7 	.word	0x0800e4d7
 800e458:	0800e54d 	.word	0x0800e54d
 800e45c:	0800e4df 	.word	0x0800e4df
 800e460:	0800e54d 	.word	0x0800e54d
 800e464:	0800e54d 	.word	0x0800e54d
 800e468:	0800e54d 	.word	0x0800e54d
 800e46c:	0800e4ef 	.word	0x0800e4ef
 800e470:	0800e54d 	.word	0x0800e54d
 800e474:	0800e54d 	.word	0x0800e54d
 800e478:	0800e54d 	.word	0x0800e54d
 800e47c:	0800e54d 	.word	0x0800e54d
 800e480:	0800e54d 	.word	0x0800e54d
 800e484:	0800e54d 	.word	0x0800e54d
 800e488:	0800e54d 	.word	0x0800e54d
 800e48c:	0800e4ff 	.word	0x0800e4ff
 800e490:	0800e54d 	.word	0x0800e54d
 800e494:	0800e54d 	.word	0x0800e54d
 800e498:	0800e54d 	.word	0x0800e54d
 800e49c:	0800e54d 	.word	0x0800e54d
 800e4a0:	0800e54d 	.word	0x0800e54d
 800e4a4:	0800e54d 	.word	0x0800e54d
 800e4a8:	0800e54d 	.word	0x0800e54d
 800e4ac:	0800e54d 	.word	0x0800e54d
 800e4b0:	0800e54d 	.word	0x0800e54d
 800e4b4:	0800e54d 	.word	0x0800e54d
 800e4b8:	0800e54d 	.word	0x0800e54d
 800e4bc:	0800e54d 	.word	0x0800e54d
 800e4c0:	0800e54d 	.word	0x0800e54d
 800e4c4:	0800e54d 	.word	0x0800e54d
 800e4c8:	0800e54d 	.word	0x0800e54d
 800e4cc:	0800e53f 	.word	0x0800e53f
 800e4d0:	2b40      	cmp	r3, #64	; 0x40
 800e4d2:	d037      	beq.n	800e544 <UART_SetConfig+0x6bc>
 800e4d4:	e03a      	b.n	800e54c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e4d6:	f7fc fb05 	bl	800aae4 <HAL_RCCEx_GetD3PCLK1Freq>
 800e4da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e4dc:	e03c      	b.n	800e558 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7fc fb14 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4ec:	e034      	b.n	800e558 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4ee:	f107 0318 	add.w	r3, r7, #24
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fc fc60 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4fc:	e02c      	b.n	800e558 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4fe:	4b09      	ldr	r3, [pc, #36]	; (800e524 <UART_SetConfig+0x69c>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f003 0320 	and.w	r3, r3, #32
 800e506:	2b00      	cmp	r3, #0
 800e508:	d016      	beq.n	800e538 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e50a:	4b06      	ldr	r3, [pc, #24]	; (800e524 <UART_SetConfig+0x69c>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	08db      	lsrs	r3, r3, #3
 800e510:	f003 0303 	and.w	r3, r3, #3
 800e514:	4a07      	ldr	r2, [pc, #28]	; (800e534 <UART_SetConfig+0x6ac>)
 800e516:	fa22 f303 	lsr.w	r3, r2, r3
 800e51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e51c:	e01c      	b.n	800e558 <UART_SetConfig+0x6d0>
 800e51e:	bf00      	nop
 800e520:	40011400 	.word	0x40011400
 800e524:	58024400 	.word	0x58024400
 800e528:	40007800 	.word	0x40007800
 800e52c:	40007c00 	.word	0x40007c00
 800e530:	58000c00 	.word	0x58000c00
 800e534:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e538:	4b9d      	ldr	r3, [pc, #628]	; (800e7b0 <UART_SetConfig+0x928>)
 800e53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e53c:	e00c      	b.n	800e558 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e53e:	4b9d      	ldr	r3, [pc, #628]	; (800e7b4 <UART_SetConfig+0x92c>)
 800e540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e542:	e009      	b.n	800e558 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e548:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e54a:	e005      	b.n	800e558 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e54c:	2300      	movs	r3, #0
 800e54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e550:	2301      	movs	r3, #1
 800e552:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e556:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f000 81de 	beq.w	800e91c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e564:	4a94      	ldr	r2, [pc, #592]	; (800e7b8 <UART_SetConfig+0x930>)
 800e566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e56a:	461a      	mov	r2, r3
 800e56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e56e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e572:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	685a      	ldr	r2, [r3, #4]
 800e578:	4613      	mov	r3, r2
 800e57a:	005b      	lsls	r3, r3, #1
 800e57c:	4413      	add	r3, r2
 800e57e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e580:	429a      	cmp	r2, r3
 800e582:	d305      	bcc.n	800e590 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e58a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d903      	bls.n	800e598 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e590:	2301      	movs	r3, #1
 800e592:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e596:	e1c1      	b.n	800e91c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e59a:	2200      	movs	r2, #0
 800e59c:	60bb      	str	r3, [r7, #8]
 800e59e:	60fa      	str	r2, [r7, #12]
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a4:	4a84      	ldr	r2, [pc, #528]	; (800e7b8 <UART_SetConfig+0x930>)
 800e5a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	603b      	str	r3, [r7, #0]
 800e5b0:	607a      	str	r2, [r7, #4]
 800e5b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e5ba:	f7f1 fe8d 	bl	80002d8 <__aeabi_uldivmod>
 800e5be:	4602      	mov	r2, r0
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	4610      	mov	r0, r2
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	f04f 0200 	mov.w	r2, #0
 800e5ca:	f04f 0300 	mov.w	r3, #0
 800e5ce:	020b      	lsls	r3, r1, #8
 800e5d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e5d4:	0202      	lsls	r2, r0, #8
 800e5d6:	6979      	ldr	r1, [r7, #20]
 800e5d8:	6849      	ldr	r1, [r1, #4]
 800e5da:	0849      	lsrs	r1, r1, #1
 800e5dc:	2000      	movs	r0, #0
 800e5de:	460c      	mov	r4, r1
 800e5e0:	4605      	mov	r5, r0
 800e5e2:	eb12 0804 	adds.w	r8, r2, r4
 800e5e6:	eb43 0905 	adc.w	r9, r3, r5
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	469a      	mov	sl, r3
 800e5f2:	4693      	mov	fp, r2
 800e5f4:	4652      	mov	r2, sl
 800e5f6:	465b      	mov	r3, fp
 800e5f8:	4640      	mov	r0, r8
 800e5fa:	4649      	mov	r1, r9
 800e5fc:	f7f1 fe6c 	bl	80002d8 <__aeabi_uldivmod>
 800e600:	4602      	mov	r2, r0
 800e602:	460b      	mov	r3, r1
 800e604:	4613      	mov	r3, r2
 800e606:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e60e:	d308      	bcc.n	800e622 <UART_SetConfig+0x79a>
 800e610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e616:	d204      	bcs.n	800e622 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e61e:	60da      	str	r2, [r3, #12]
 800e620:	e17c      	b.n	800e91c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e622:	2301      	movs	r3, #1
 800e624:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e628:	e178      	b.n	800e91c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	69db      	ldr	r3, [r3, #28]
 800e62e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e632:	f040 80c5 	bne.w	800e7c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e636:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e63a:	2b20      	cmp	r3, #32
 800e63c:	dc48      	bgt.n	800e6d0 <UART_SetConfig+0x848>
 800e63e:	2b00      	cmp	r3, #0
 800e640:	db7b      	blt.n	800e73a <UART_SetConfig+0x8b2>
 800e642:	2b20      	cmp	r3, #32
 800e644:	d879      	bhi.n	800e73a <UART_SetConfig+0x8b2>
 800e646:	a201      	add	r2, pc, #4	; (adr r2, 800e64c <UART_SetConfig+0x7c4>)
 800e648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e64c:	0800e6d7 	.word	0x0800e6d7
 800e650:	0800e6df 	.word	0x0800e6df
 800e654:	0800e73b 	.word	0x0800e73b
 800e658:	0800e73b 	.word	0x0800e73b
 800e65c:	0800e6e7 	.word	0x0800e6e7
 800e660:	0800e73b 	.word	0x0800e73b
 800e664:	0800e73b 	.word	0x0800e73b
 800e668:	0800e73b 	.word	0x0800e73b
 800e66c:	0800e6f7 	.word	0x0800e6f7
 800e670:	0800e73b 	.word	0x0800e73b
 800e674:	0800e73b 	.word	0x0800e73b
 800e678:	0800e73b 	.word	0x0800e73b
 800e67c:	0800e73b 	.word	0x0800e73b
 800e680:	0800e73b 	.word	0x0800e73b
 800e684:	0800e73b 	.word	0x0800e73b
 800e688:	0800e73b 	.word	0x0800e73b
 800e68c:	0800e707 	.word	0x0800e707
 800e690:	0800e73b 	.word	0x0800e73b
 800e694:	0800e73b 	.word	0x0800e73b
 800e698:	0800e73b 	.word	0x0800e73b
 800e69c:	0800e73b 	.word	0x0800e73b
 800e6a0:	0800e73b 	.word	0x0800e73b
 800e6a4:	0800e73b 	.word	0x0800e73b
 800e6a8:	0800e73b 	.word	0x0800e73b
 800e6ac:	0800e73b 	.word	0x0800e73b
 800e6b0:	0800e73b 	.word	0x0800e73b
 800e6b4:	0800e73b 	.word	0x0800e73b
 800e6b8:	0800e73b 	.word	0x0800e73b
 800e6bc:	0800e73b 	.word	0x0800e73b
 800e6c0:	0800e73b 	.word	0x0800e73b
 800e6c4:	0800e73b 	.word	0x0800e73b
 800e6c8:	0800e73b 	.word	0x0800e73b
 800e6cc:	0800e72d 	.word	0x0800e72d
 800e6d0:	2b40      	cmp	r3, #64	; 0x40
 800e6d2:	d02e      	beq.n	800e732 <UART_SetConfig+0x8aa>
 800e6d4:	e031      	b.n	800e73a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6d6:	f7fa fdc1 	bl	800925c <HAL_RCC_GetPCLK1Freq>
 800e6da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6dc:	e033      	b.n	800e746 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6de:	f7fa fdd3 	bl	8009288 <HAL_RCC_GetPCLK2Freq>
 800e6e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6e4:	e02f      	b.n	800e746 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fc fa10 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6f4:	e027      	b.n	800e746 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6f6:	f107 0318 	add.w	r3, r7, #24
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7fc fb5c 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e704:	e01f      	b.n	800e746 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e706:	4b2d      	ldr	r3, [pc, #180]	; (800e7bc <UART_SetConfig+0x934>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f003 0320 	and.w	r3, r3, #32
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d009      	beq.n	800e726 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e712:	4b2a      	ldr	r3, [pc, #168]	; (800e7bc <UART_SetConfig+0x934>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	08db      	lsrs	r3, r3, #3
 800e718:	f003 0303 	and.w	r3, r3, #3
 800e71c:	4a24      	ldr	r2, [pc, #144]	; (800e7b0 <UART_SetConfig+0x928>)
 800e71e:	fa22 f303 	lsr.w	r3, r2, r3
 800e722:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e724:	e00f      	b.n	800e746 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e726:	4b22      	ldr	r3, [pc, #136]	; (800e7b0 <UART_SetConfig+0x928>)
 800e728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e72a:	e00c      	b.n	800e746 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e72c:	4b21      	ldr	r3, [pc, #132]	; (800e7b4 <UART_SetConfig+0x92c>)
 800e72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e730:	e009      	b.n	800e746 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e738:	e005      	b.n	800e746 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e73a:	2300      	movs	r3, #0
 800e73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e73e:	2301      	movs	r3, #1
 800e740:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e744:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e748:	2b00      	cmp	r3, #0
 800e74a:	f000 80e7 	beq.w	800e91c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e752:	4a19      	ldr	r2, [pc, #100]	; (800e7b8 <UART_SetConfig+0x930>)
 800e754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e758:	461a      	mov	r2, r3
 800e75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e75c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e760:	005a      	lsls	r2, r3, #1
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	085b      	lsrs	r3, r3, #1
 800e768:	441a      	add	r2, r3
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e772:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e776:	2b0f      	cmp	r3, #15
 800e778:	d916      	bls.n	800e7a8 <UART_SetConfig+0x920>
 800e77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e780:	d212      	bcs.n	800e7a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e784:	b29b      	uxth	r3, r3
 800e786:	f023 030f 	bic.w	r3, r3, #15
 800e78a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78e:	085b      	lsrs	r3, r3, #1
 800e790:	b29b      	uxth	r3, r3
 800e792:	f003 0307 	and.w	r3, r3, #7
 800e796:	b29a      	uxth	r2, r3
 800e798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e79a:	4313      	orrs	r3, r2
 800e79c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e7a4:	60da      	str	r2, [r3, #12]
 800e7a6:	e0b9      	b.n	800e91c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e7ae:	e0b5      	b.n	800e91c <UART_SetConfig+0xa94>
 800e7b0:	03d09000 	.word	0x03d09000
 800e7b4:	003d0900 	.word	0x003d0900
 800e7b8:	0800fe48 	.word	0x0800fe48
 800e7bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e7c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e7c4:	2b20      	cmp	r3, #32
 800e7c6:	dc49      	bgt.n	800e85c <UART_SetConfig+0x9d4>
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	db7c      	blt.n	800e8c6 <UART_SetConfig+0xa3e>
 800e7cc:	2b20      	cmp	r3, #32
 800e7ce:	d87a      	bhi.n	800e8c6 <UART_SetConfig+0xa3e>
 800e7d0:	a201      	add	r2, pc, #4	; (adr r2, 800e7d8 <UART_SetConfig+0x950>)
 800e7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d6:	bf00      	nop
 800e7d8:	0800e863 	.word	0x0800e863
 800e7dc:	0800e86b 	.word	0x0800e86b
 800e7e0:	0800e8c7 	.word	0x0800e8c7
 800e7e4:	0800e8c7 	.word	0x0800e8c7
 800e7e8:	0800e873 	.word	0x0800e873
 800e7ec:	0800e8c7 	.word	0x0800e8c7
 800e7f0:	0800e8c7 	.word	0x0800e8c7
 800e7f4:	0800e8c7 	.word	0x0800e8c7
 800e7f8:	0800e883 	.word	0x0800e883
 800e7fc:	0800e8c7 	.word	0x0800e8c7
 800e800:	0800e8c7 	.word	0x0800e8c7
 800e804:	0800e8c7 	.word	0x0800e8c7
 800e808:	0800e8c7 	.word	0x0800e8c7
 800e80c:	0800e8c7 	.word	0x0800e8c7
 800e810:	0800e8c7 	.word	0x0800e8c7
 800e814:	0800e8c7 	.word	0x0800e8c7
 800e818:	0800e893 	.word	0x0800e893
 800e81c:	0800e8c7 	.word	0x0800e8c7
 800e820:	0800e8c7 	.word	0x0800e8c7
 800e824:	0800e8c7 	.word	0x0800e8c7
 800e828:	0800e8c7 	.word	0x0800e8c7
 800e82c:	0800e8c7 	.word	0x0800e8c7
 800e830:	0800e8c7 	.word	0x0800e8c7
 800e834:	0800e8c7 	.word	0x0800e8c7
 800e838:	0800e8c7 	.word	0x0800e8c7
 800e83c:	0800e8c7 	.word	0x0800e8c7
 800e840:	0800e8c7 	.word	0x0800e8c7
 800e844:	0800e8c7 	.word	0x0800e8c7
 800e848:	0800e8c7 	.word	0x0800e8c7
 800e84c:	0800e8c7 	.word	0x0800e8c7
 800e850:	0800e8c7 	.word	0x0800e8c7
 800e854:	0800e8c7 	.word	0x0800e8c7
 800e858:	0800e8b9 	.word	0x0800e8b9
 800e85c:	2b40      	cmp	r3, #64	; 0x40
 800e85e:	d02e      	beq.n	800e8be <UART_SetConfig+0xa36>
 800e860:	e031      	b.n	800e8c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e862:	f7fa fcfb 	bl	800925c <HAL_RCC_GetPCLK1Freq>
 800e866:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e868:	e033      	b.n	800e8d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e86a:	f7fa fd0d 	bl	8009288 <HAL_RCC_GetPCLK2Freq>
 800e86e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e870:	e02f      	b.n	800e8d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e876:	4618      	mov	r0, r3
 800e878:	f7fc f94a 	bl	800ab10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e880:	e027      	b.n	800e8d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e882:	f107 0318 	add.w	r3, r7, #24
 800e886:	4618      	mov	r0, r3
 800e888:	f7fc fa96 	bl	800adb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e890:	e01f      	b.n	800e8d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e892:	4b2d      	ldr	r3, [pc, #180]	; (800e948 <UART_SetConfig+0xac0>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f003 0320 	and.w	r3, r3, #32
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d009      	beq.n	800e8b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e89e:	4b2a      	ldr	r3, [pc, #168]	; (800e948 <UART_SetConfig+0xac0>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	08db      	lsrs	r3, r3, #3
 800e8a4:	f003 0303 	and.w	r3, r3, #3
 800e8a8:	4a28      	ldr	r2, [pc, #160]	; (800e94c <UART_SetConfig+0xac4>)
 800e8aa:	fa22 f303 	lsr.w	r3, r2, r3
 800e8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e8b0:	e00f      	b.n	800e8d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e8b2:	4b26      	ldr	r3, [pc, #152]	; (800e94c <UART_SetConfig+0xac4>)
 800e8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8b6:	e00c      	b.n	800e8d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e8b8:	4b25      	ldr	r3, [pc, #148]	; (800e950 <UART_SetConfig+0xac8>)
 800e8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8bc:	e009      	b.n	800e8d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8c4:	e005      	b.n	800e8d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e8d0:	bf00      	nop
    }

    if (pclk != 0U)
 800e8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d021      	beq.n	800e91c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8dc:	4a1d      	ldr	r2, [pc, #116]	; (800e954 <UART_SetConfig+0xacc>)
 800e8de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	085b      	lsrs	r3, r3, #1
 800e8f0:	441a      	add	r2, r3
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fe:	2b0f      	cmp	r3, #15
 800e900:	d909      	bls.n	800e916 <UART_SetConfig+0xa8e>
 800e902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e908:	d205      	bcs.n	800e916 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90c:	b29a      	uxth	r2, r3
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	60da      	str	r2, [r3, #12]
 800e914:	e002      	b.n	800e91c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e916:	2301      	movs	r3, #1
 800e918:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	2201      	movs	r2, #1
 800e920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	2201      	movs	r2, #1
 800e928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	2200      	movs	r2, #0
 800e930:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	2200      	movs	r2, #0
 800e936:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e938:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3748      	adds	r7, #72	; 0x48
 800e940:	46bd      	mov	sp, r7
 800e942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e946:	bf00      	nop
 800e948:	58024400 	.word	0x58024400
 800e94c:	03d09000 	.word	0x03d09000
 800e950:	003d0900 	.word	0x003d0900
 800e954:	0800fe48 	.word	0x0800fe48

0800e958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e964:	f003 0301 	and.w	r3, r3, #1
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d00a      	beq.n	800e982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	430a      	orrs	r2, r1
 800e980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e986:	f003 0302 	and.w	r3, r3, #2
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00a      	beq.n	800e9a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	430a      	orrs	r2, r1
 800e9a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9a8:	f003 0304 	and.w	r3, r3, #4
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00a      	beq.n	800e9c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	430a      	orrs	r2, r1
 800e9c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ca:	f003 0308 	and.w	r3, r3, #8
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d00a      	beq.n	800e9e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	430a      	orrs	r2, r1
 800e9e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ec:	f003 0310 	and.w	r3, r3, #16
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d00a      	beq.n	800ea0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	689b      	ldr	r3, [r3, #8]
 800e9fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	430a      	orrs	r2, r1
 800ea08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea0e:	f003 0320 	and.w	r3, r3, #32
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d00a      	beq.n	800ea2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	689b      	ldr	r3, [r3, #8]
 800ea1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	430a      	orrs	r2, r1
 800ea2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d01a      	beq.n	800ea6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	430a      	orrs	r2, r1
 800ea4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea56:	d10a      	bne.n	800ea6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	430a      	orrs	r2, r1
 800ea6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00a      	beq.n	800ea90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	430a      	orrs	r2, r1
 800ea8e:	605a      	str	r2, [r3, #4]
  }
}
 800ea90:	bf00      	nop
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b086      	sub	sp, #24
 800eaa0:	af02      	add	r7, sp, #8
 800eaa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eaac:	f7f3 fef4 	bl	8002898 <HAL_GetTick>
 800eab0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f003 0308 	and.w	r3, r3, #8
 800eabc:	2b08      	cmp	r3, #8
 800eabe:	d10e      	bne.n	800eade <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eac4:	9300      	str	r3, [sp, #0]
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f000 f82f 	bl	800eb32 <UART_WaitOnFlagUntilTimeout>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d001      	beq.n	800eade <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eada:	2303      	movs	r3, #3
 800eadc:	e025      	b.n	800eb2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	f003 0304 	and.w	r3, r3, #4
 800eae8:	2b04      	cmp	r3, #4
 800eaea:	d10e      	bne.n	800eb0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eaec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eaf0:	9300      	str	r3, [sp, #0]
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f000 f819 	bl	800eb32 <UART_WaitOnFlagUntilTimeout>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d001      	beq.n	800eb0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb06:	2303      	movs	r3, #3
 800eb08:	e00f      	b.n	800eb2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2220      	movs	r2, #32
 800eb0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2220      	movs	r2, #32
 800eb16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2200      	movs	r2, #0
 800eb24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b09c      	sub	sp, #112	; 0x70
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	60f8      	str	r0, [r7, #12]
 800eb3a:	60b9      	str	r1, [r7, #8]
 800eb3c:	603b      	str	r3, [r7, #0]
 800eb3e:	4613      	mov	r3, r2
 800eb40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb42:	e0a9      	b.n	800ec98 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb4a:	f000 80a5 	beq.w	800ec98 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb4e:	f7f3 fea3 	bl	8002898 <HAL_GetTick>
 800eb52:	4602      	mov	r2, r0
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	1ad3      	subs	r3, r2, r3
 800eb58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d302      	bcc.n	800eb64 <UART_WaitOnFlagUntilTimeout+0x32>
 800eb5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d140      	bne.n	800ebe6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb6c:	e853 3f00 	ldrex	r3, [r3]
 800eb70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eb72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eb78:	667b      	str	r3, [r7, #100]	; 0x64
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	461a      	mov	r2, r3
 800eb80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb84:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eb88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eb8a:	e841 2300 	strex	r3, r2, [r1]
 800eb8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800eb90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d1e6      	bne.n	800eb64 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	3308      	adds	r3, #8
 800eb9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eba0:	e853 3f00 	ldrex	r3, [r3]
 800eba4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba8:	f023 0301 	bic.w	r3, r3, #1
 800ebac:	663b      	str	r3, [r7, #96]	; 0x60
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	3308      	adds	r3, #8
 800ebb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ebb6:	64ba      	str	r2, [r7, #72]	; 0x48
 800ebb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebbe:	e841 2300 	strex	r3, r2, [r1]
 800ebc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ebc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d1e5      	bne.n	800eb96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2220      	movs	r2, #32
 800ebce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2220      	movs	r2, #32
 800ebd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ebe2:	2303      	movs	r3, #3
 800ebe4:	e069      	b.n	800ecba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f003 0304 	and.w	r3, r3, #4
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d051      	beq.n	800ec98 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	69db      	ldr	r3, [r3, #28]
 800ebfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ebfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec02:	d149      	bne.n	800ec98 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec16:	e853 3f00 	ldrex	r3, [r3]
 800ec1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ec22:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	461a      	mov	r2, r3
 800ec2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec2c:	637b      	str	r3, [r7, #52]	; 0x34
 800ec2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec34:	e841 2300 	strex	r3, r2, [r1]
 800ec38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ec3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d1e6      	bne.n	800ec0e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	3308      	adds	r3, #8
 800ec46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	e853 3f00 	ldrex	r3, [r3]
 800ec4e:	613b      	str	r3, [r7, #16]
   return(result);
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	f023 0301 	bic.w	r3, r3, #1
 800ec56:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	3308      	adds	r3, #8
 800ec5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ec60:	623a      	str	r2, [r7, #32]
 800ec62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec64:	69f9      	ldr	r1, [r7, #28]
 800ec66:	6a3a      	ldr	r2, [r7, #32]
 800ec68:	e841 2300 	strex	r3, r2, [r1]
 800ec6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d1e5      	bne.n	800ec40 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2220      	movs	r2, #32
 800ec78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2220      	movs	r2, #32
 800ec80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2220      	movs	r2, #32
 800ec88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ec94:	2303      	movs	r3, #3
 800ec96:	e010      	b.n	800ecba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	69da      	ldr	r2, [r3, #28]
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	4013      	ands	r3, r2
 800eca2:	68ba      	ldr	r2, [r7, #8]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	bf0c      	ite	eq
 800eca8:	2301      	moveq	r3, #1
 800ecaa:	2300      	movne	r3, #0
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	461a      	mov	r2, r3
 800ecb0:	79fb      	ldrb	r3, [r7, #7]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	f43f af46 	beq.w	800eb44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3770      	adds	r7, #112	; 0x70
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
	...

0800ecc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b0a3      	sub	sp, #140	; 0x8c
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	4613      	mov	r3, r2
 800ecd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	68ba      	ldr	r2, [r7, #8]
 800ecd6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	88fa      	ldrh	r2, [r7, #6]
 800ecdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	88fa      	ldrh	r2, [r7, #6]
 800ece4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2200      	movs	r2, #0
 800ecec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ecf6:	d10e      	bne.n	800ed16 <UART_Start_Receive_IT+0x52>
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	691b      	ldr	r3, [r3, #16]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d105      	bne.n	800ed0c <UART_Start_Receive_IT+0x48>
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ed06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed0a:	e02d      	b.n	800ed68 <UART_Start_Receive_IT+0xa4>
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	22ff      	movs	r2, #255	; 0xff
 800ed10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed14:	e028      	b.n	800ed68 <UART_Start_Receive_IT+0xa4>
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	689b      	ldr	r3, [r3, #8]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d10d      	bne.n	800ed3a <UART_Start_Receive_IT+0x76>
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	691b      	ldr	r3, [r3, #16]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d104      	bne.n	800ed30 <UART_Start_Receive_IT+0x6c>
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	22ff      	movs	r2, #255	; 0xff
 800ed2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed2e:	e01b      	b.n	800ed68 <UART_Start_Receive_IT+0xa4>
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	227f      	movs	r2, #127	; 0x7f
 800ed34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed38:	e016      	b.n	800ed68 <UART_Start_Receive_IT+0xa4>
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ed42:	d10d      	bne.n	800ed60 <UART_Start_Receive_IT+0x9c>
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	691b      	ldr	r3, [r3, #16]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d104      	bne.n	800ed56 <UART_Start_Receive_IT+0x92>
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	227f      	movs	r2, #127	; 0x7f
 800ed50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed54:	e008      	b.n	800ed68 <UART_Start_Receive_IT+0xa4>
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	223f      	movs	r2, #63	; 0x3f
 800ed5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed5e:	e003      	b.n	800ed68 <UART_Start_Receive_IT+0xa4>
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2200      	movs	r2, #0
 800ed64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2222      	movs	r2, #34	; 0x22
 800ed74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	3308      	adds	r3, #8
 800ed7e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed82:	e853 3f00 	ldrex	r3, [r3]
 800ed86:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ed88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed8a:	f043 0301 	orr.w	r3, r3, #1
 800ed8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	3308      	adds	r3, #8
 800ed98:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ed9c:	673a      	str	r2, [r7, #112]	; 0x70
 800ed9e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800eda2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eda4:	e841 2300 	strex	r3, r2, [r1]
 800eda8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800edaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1e3      	bne.n	800ed78 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800edb8:	d153      	bne.n	800ee62 <UART_Start_Receive_IT+0x19e>
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800edc0:	88fa      	ldrh	r2, [r7, #6]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d34d      	bcc.n	800ee62 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edce:	d107      	bne.n	800ede0 <UART_Start_Receive_IT+0x11c>
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	691b      	ldr	r3, [r3, #16]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d103      	bne.n	800ede0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	4a4b      	ldr	r2, [pc, #300]	; (800ef08 <UART_Start_Receive_IT+0x244>)
 800eddc:	671a      	str	r2, [r3, #112]	; 0x70
 800edde:	e002      	b.n	800ede6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	4a4a      	ldr	r2, [pc, #296]	; (800ef0c <UART_Start_Receive_IT+0x248>)
 800ede4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2200      	movs	r2, #0
 800edea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	691b      	ldr	r3, [r3, #16]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d01a      	beq.n	800ee2c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edfe:	e853 3f00 	ldrex	r3, [r3]
 800ee02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ee04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	461a      	mov	r2, r3
 800ee14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee18:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee1a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee20:	e841 2300 	strex	r3, r2, [r1]
 800ee24:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ee26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1e4      	bne.n	800edf6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	3308      	adds	r3, #8
 800ee32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee36:	e853 3f00 	ldrex	r3, [r3]
 800ee3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee42:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	3308      	adds	r3, #8
 800ee4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ee4c:	64ba      	str	r2, [r7, #72]	; 0x48
 800ee4e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee54:	e841 2300 	strex	r3, r2, [r1]
 800ee58:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ee5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d1e5      	bne.n	800ee2c <UART_Start_Receive_IT+0x168>
 800ee60:	e04a      	b.n	800eef8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee6a:	d107      	bne.n	800ee7c <UART_Start_Receive_IT+0x1b8>
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	691b      	ldr	r3, [r3, #16]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d103      	bne.n	800ee7c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	4a26      	ldr	r2, [pc, #152]	; (800ef10 <UART_Start_Receive_IT+0x24c>)
 800ee78:	671a      	str	r2, [r3, #112]	; 0x70
 800ee7a:	e002      	b.n	800ee82 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	4a25      	ldr	r2, [pc, #148]	; (800ef14 <UART_Start_Receive_IT+0x250>)
 800ee80:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2200      	movs	r2, #0
 800ee86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	691b      	ldr	r3, [r3, #16]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d019      	beq.n	800eec6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9a:	e853 3f00 	ldrex	r3, [r3]
 800ee9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800eea6:	677b      	str	r3, [r7, #116]	; 0x74
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	461a      	mov	r2, r3
 800eeae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eeb0:	637b      	str	r3, [r7, #52]	; 0x34
 800eeb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eeb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eeb8:	e841 2300 	strex	r3, r2, [r1]
 800eebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d1e6      	bne.n	800ee92 <UART_Start_Receive_IT+0x1ce>
 800eec4:	e018      	b.n	800eef8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	e853 3f00 	ldrex	r3, [r3]
 800eed2:	613b      	str	r3, [r7, #16]
   return(result);
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	f043 0320 	orr.w	r3, r3, #32
 800eeda:	67bb      	str	r3, [r7, #120]	; 0x78
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	461a      	mov	r2, r3
 800eee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eee4:	623b      	str	r3, [r7, #32]
 800eee6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eee8:	69f9      	ldr	r1, [r7, #28]
 800eeea:	6a3a      	ldr	r2, [r7, #32]
 800eeec:	e841 2300 	strex	r3, r2, [r1]
 800eef0:	61bb      	str	r3, [r7, #24]
   return(result);
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d1e6      	bne.n	800eec6 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800eef8:	2300      	movs	r3, #0
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	378c      	adds	r7, #140	; 0x8c
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr
 800ef06:	bf00      	nop
 800ef08:	0800f621 	.word	0x0800f621
 800ef0c:	0800f329 	.word	0x0800f329
 800ef10:	0800f1c7 	.word	0x0800f1c7
 800ef14:	0800f067 	.word	0x0800f067

0800ef18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b095      	sub	sp, #84	; 0x54
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef28:	e853 3f00 	ldrex	r3, [r3]
 800ef2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ef2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef3e:	643b      	str	r3, [r7, #64]	; 0x40
 800ef40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef46:	e841 2300 	strex	r3, r2, [r1]
 800ef4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d1e6      	bne.n	800ef20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	3308      	adds	r3, #8
 800ef58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef5a:	6a3b      	ldr	r3, [r7, #32]
 800ef5c:	e853 3f00 	ldrex	r3, [r3]
 800ef60:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef62:	69fa      	ldr	r2, [r7, #28]
 800ef64:	4b1e      	ldr	r3, [pc, #120]	; (800efe0 <UART_EndRxTransfer+0xc8>)
 800ef66:	4013      	ands	r3, r2
 800ef68:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	3308      	adds	r3, #8
 800ef70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef72:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ef74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef7a:	e841 2300 	strex	r3, r2, [r1]
 800ef7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d1e5      	bne.n	800ef52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d118      	bne.n	800efc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	e853 3f00 	ldrex	r3, [r3]
 800ef9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	f023 0310 	bic.w	r3, r3, #16
 800efa2:	647b      	str	r3, [r7, #68]	; 0x44
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	461a      	mov	r2, r3
 800efaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efac:	61bb      	str	r3, [r7, #24]
 800efae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efb0:	6979      	ldr	r1, [r7, #20]
 800efb2:	69ba      	ldr	r2, [r7, #24]
 800efb4:	e841 2300 	strex	r3, r2, [r1]
 800efb8:	613b      	str	r3, [r7, #16]
   return(result);
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d1e6      	bne.n	800ef8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2220      	movs	r2, #32
 800efc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2200      	movs	r2, #0
 800efcc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2200      	movs	r2, #0
 800efd2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800efd4:	bf00      	nop
 800efd6:	3754      	adds	r7, #84	; 0x54
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr
 800efe0:	effffffe 	.word	0xeffffffe

0800efe4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eff0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2200      	movs	r2, #0
 800effe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f002:	68f8      	ldr	r0, [r7, #12]
 800f004:	f7fe ff2a 	bl	800de5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f008:	bf00      	nop
 800f00a:	3710      	adds	r7, #16
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b088      	sub	sp, #32
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	e853 3f00 	ldrex	r3, [r3]
 800f024:	60bb      	str	r3, [r7, #8]
   return(result);
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f02c:	61fb      	str	r3, [r7, #28]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	461a      	mov	r2, r3
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	61bb      	str	r3, [r7, #24]
 800f038:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f03a:	6979      	ldr	r1, [r7, #20]
 800f03c:	69ba      	ldr	r2, [r7, #24]
 800f03e:	e841 2300 	strex	r3, r2, [r1]
 800f042:	613b      	str	r3, [r7, #16]
   return(result);
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1e6      	bne.n	800f018 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2220      	movs	r2, #32
 800f04e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2200      	movs	r2, #0
 800f056:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f7fe fef5 	bl	800de48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f05e:	bf00      	nop
 800f060:	3720      	adds	r7, #32
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}

0800f066 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f066:	b580      	push	{r7, lr}
 800f068:	b096      	sub	sp, #88	; 0x58
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f074:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f07e:	2b22      	cmp	r3, #34	; 0x22
 800f080:	f040 8095 	bne.w	800f1ae <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f08a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f08e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f092:	b2d9      	uxtb	r1, r3
 800f094:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f098:	b2da      	uxtb	r2, r3
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f09e:	400a      	ands	r2, r1
 800f0a0:	b2d2      	uxtb	r2, r2
 800f0a2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0a8:	1c5a      	adds	r2, r3, #1
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	3b01      	subs	r3, #1
 800f0b8:	b29a      	uxth	r2, r3
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d178      	bne.n	800f1be <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d4:	e853 3f00 	ldrex	r3, [r3]
 800f0d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f0e0:	653b      	str	r3, [r7, #80]	; 0x50
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0ea:	647b      	str	r3, [r7, #68]	; 0x44
 800f0ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f0f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0f2:	e841 2300 	strex	r3, r2, [r1]
 800f0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d1e6      	bne.n	800f0cc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	3308      	adds	r3, #8
 800f104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f108:	e853 3f00 	ldrex	r3, [r3]
 800f10c:	623b      	str	r3, [r7, #32]
   return(result);
 800f10e:	6a3b      	ldr	r3, [r7, #32]
 800f110:	f023 0301 	bic.w	r3, r3, #1
 800f114:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	3308      	adds	r3, #8
 800f11c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f11e:	633a      	str	r2, [r7, #48]	; 0x30
 800f120:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f126:	e841 2300 	strex	r3, r2, [r1]
 800f12a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d1e5      	bne.n	800f0fe <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2220      	movs	r2, #32
 800f136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2200      	movs	r2, #0
 800f13e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f144:	2b01      	cmp	r3, #1
 800f146:	d12e      	bne.n	800f1a6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2200      	movs	r2, #0
 800f14c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	e853 3f00 	ldrex	r3, [r3]
 800f15a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f023 0310 	bic.w	r3, r3, #16
 800f162:	64bb      	str	r3, [r7, #72]	; 0x48
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	461a      	mov	r2, r3
 800f16a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f16c:	61fb      	str	r3, [r7, #28]
 800f16e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f170:	69b9      	ldr	r1, [r7, #24]
 800f172:	69fa      	ldr	r2, [r7, #28]
 800f174:	e841 2300 	strex	r3, r2, [r1]
 800f178:	617b      	str	r3, [r7, #20]
   return(result);
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d1e6      	bne.n	800f14e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	69db      	ldr	r3, [r3, #28]
 800f186:	f003 0310 	and.w	r3, r3, #16
 800f18a:	2b10      	cmp	r3, #16
 800f18c:	d103      	bne.n	800f196 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	2210      	movs	r2, #16
 800f194:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f19c:	4619      	mov	r1, r3
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f7fe fe66 	bl	800de70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f1a4:	e00b      	b.n	800f1be <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f7f1 fdfa 	bl	8000da0 <HAL_UART_RxCpltCallback>
}
 800f1ac:	e007      	b.n	800f1be <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	699a      	ldr	r2, [r3, #24]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	f042 0208 	orr.w	r2, r2, #8
 800f1bc:	619a      	str	r2, [r3, #24]
}
 800f1be:	bf00      	nop
 800f1c0:	3758      	adds	r7, #88	; 0x58
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b096      	sub	sp, #88	; 0x58
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f1d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1de:	2b22      	cmp	r3, #34	; 0x22
 800f1e0:	f040 8095 	bne.w	800f30e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ea:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1f2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f1f4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f1f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f1fc:	4013      	ands	r3, r2
 800f1fe:	b29a      	uxth	r2, r3
 800f200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f202:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f208:	1c9a      	adds	r2, r3, #2
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f214:	b29b      	uxth	r3, r3
 800f216:	3b01      	subs	r3, #1
 800f218:	b29a      	uxth	r2, r3
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f226:	b29b      	uxth	r3, r3
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d178      	bne.n	800f31e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f234:	e853 3f00 	ldrex	r3, [r3]
 800f238:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f240:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	461a      	mov	r2, r3
 800f248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f24a:	643b      	str	r3, [r7, #64]	; 0x40
 800f24c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f24e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f252:	e841 2300 	strex	r3, r2, [r1]
 800f256:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d1e6      	bne.n	800f22c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	3308      	adds	r3, #8
 800f264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f266:	6a3b      	ldr	r3, [r7, #32]
 800f268:	e853 3f00 	ldrex	r3, [r3]
 800f26c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f26e:	69fb      	ldr	r3, [r7, #28]
 800f270:	f023 0301 	bic.w	r3, r3, #1
 800f274:	64bb      	str	r3, [r7, #72]	; 0x48
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	3308      	adds	r3, #8
 800f27c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f27e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f280:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f286:	e841 2300 	strex	r3, r2, [r1]
 800f28a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1e5      	bne.n	800f25e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2220      	movs	r2, #32
 800f296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2200      	movs	r2, #0
 800f29e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	d12e      	bne.n	800f306 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	e853 3f00 	ldrex	r3, [r3]
 800f2ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	f023 0310 	bic.w	r3, r3, #16
 800f2c2:	647b      	str	r3, [r7, #68]	; 0x44
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2cc:	61bb      	str	r3, [r7, #24]
 800f2ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2d0:	6979      	ldr	r1, [r7, #20]
 800f2d2:	69ba      	ldr	r2, [r7, #24]
 800f2d4:	e841 2300 	strex	r3, r2, [r1]
 800f2d8:	613b      	str	r3, [r7, #16]
   return(result);
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d1e6      	bne.n	800f2ae <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	69db      	ldr	r3, [r3, #28]
 800f2e6:	f003 0310 	and.w	r3, r3, #16
 800f2ea:	2b10      	cmp	r3, #16
 800f2ec:	d103      	bne.n	800f2f6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2210      	movs	r2, #16
 800f2f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f7fe fdb6 	bl	800de70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f304:	e00b      	b.n	800f31e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f7f1 fd4a 	bl	8000da0 <HAL_UART_RxCpltCallback>
}
 800f30c:	e007      	b.n	800f31e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	699a      	ldr	r2, [r3, #24]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f042 0208 	orr.w	r2, r2, #8
 800f31c:	619a      	str	r2, [r3, #24]
}
 800f31e:	bf00      	nop
 800f320:	3758      	adds	r7, #88	; 0x58
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
	...

0800f328 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b0a6      	sub	sp, #152	; 0x98
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f336:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	69db      	ldr	r3, [r3, #28]
 800f340:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	689b      	ldr	r3, [r3, #8]
 800f354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f35e:	2b22      	cmp	r3, #34	; 0x22
 800f360:	f040 814d 	bne.w	800f5fe <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f36a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f36e:	e0f4      	b.n	800f55a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f376:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f37a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f37e:	b2d9      	uxtb	r1, r3
 800f380:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f384:	b2da      	uxtb	r2, r3
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f38a:	400a      	ands	r2, r1
 800f38c:	b2d2      	uxtb	r2, r2
 800f38e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f394:	1c5a      	adds	r2, r3, #1
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	3b01      	subs	r3, #1
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	69db      	ldr	r3, [r3, #28]
 800f3b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f3b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3ba:	f003 0307 	and.w	r3, r3, #7
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d053      	beq.n	800f46a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f3c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3c6:	f003 0301 	and.w	r3, r3, #1
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d011      	beq.n	800f3f2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f3ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f3d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d00b      	beq.n	800f3f2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2201      	movs	r2, #1
 800f3e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3e8:	f043 0201 	orr.w	r2, r3, #1
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3f6:	f003 0302 	and.w	r3, r3, #2
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d011      	beq.n	800f422 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f3fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f402:	f003 0301 	and.w	r3, r3, #1
 800f406:	2b00      	cmp	r3, #0
 800f408:	d00b      	beq.n	800f422 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	2202      	movs	r2, #2
 800f410:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f418:	f043 0204 	orr.w	r2, r3, #4
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f422:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f426:	f003 0304 	and.w	r3, r3, #4
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d011      	beq.n	800f452 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f42e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f432:	f003 0301 	and.w	r3, r3, #1
 800f436:	2b00      	cmp	r3, #0
 800f438:	d00b      	beq.n	800f452 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2204      	movs	r2, #4
 800f440:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f448:	f043 0202 	orr.w	r2, r3, #2
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d006      	beq.n	800f46a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f7fe fcfd 	bl	800de5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2200      	movs	r2, #0
 800f466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f470:	b29b      	uxth	r3, r3
 800f472:	2b00      	cmp	r3, #0
 800f474:	d171      	bne.n	800f55a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f47c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f47e:	e853 3f00 	ldrex	r3, [r3]
 800f482:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f484:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f486:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f48a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	461a      	mov	r2, r3
 800f494:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f498:	66bb      	str	r3, [r7, #104]	; 0x68
 800f49a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f49c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f49e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f4a0:	e841 2300 	strex	r3, r2, [r1]
 800f4a4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f4a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d1e4      	bne.n	800f476 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	3308      	adds	r3, #8
 800f4b2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4b6:	e853 3f00 	ldrex	r3, [r3]
 800f4ba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f4bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4be:	4b56      	ldr	r3, [pc, #344]	; (800f618 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800f4c0:	4013      	ands	r3, r2
 800f4c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	3308      	adds	r3, #8
 800f4ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f4cc:	657a      	str	r2, [r7, #84]	; 0x54
 800f4ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f4d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f4d4:	e841 2300 	strex	r3, r2, [r1]
 800f4d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d1e5      	bne.n	800f4ac <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2220      	movs	r2, #32
 800f4e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4f2:	2b01      	cmp	r3, #1
 800f4f4:	d12e      	bne.n	800f554 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f504:	e853 3f00 	ldrex	r3, [r3]
 800f508:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f50c:	f023 0310 	bic.w	r3, r3, #16
 800f510:	67bb      	str	r3, [r7, #120]	; 0x78
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	461a      	mov	r2, r3
 800f518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f51a:	643b      	str	r3, [r7, #64]	; 0x40
 800f51c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f51e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f520:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f522:	e841 2300 	strex	r3, r2, [r1]
 800f526:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d1e6      	bne.n	800f4fc <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	69db      	ldr	r3, [r3, #28]
 800f534:	f003 0310 	and.w	r3, r3, #16
 800f538:	2b10      	cmp	r3, #16
 800f53a:	d103      	bne.n	800f544 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2210      	movs	r2, #16
 800f542:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f54a:	4619      	mov	r1, r3
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f7fe fc8f 	bl	800de70 <HAL_UARTEx_RxEventCallback>
 800f552:	e002      	b.n	800f55a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f7f1 fc23 	bl	8000da0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f55a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d006      	beq.n	800f570 <UART_RxISR_8BIT_FIFOEN+0x248>
 800f562:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f566:	f003 0320 	and.w	r3, r3, #32
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	f47f af00 	bne.w	800f370 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f576:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f57a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d045      	beq.n	800f60e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f588:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d23e      	bcs.n	800f60e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	3308      	adds	r3, #8
 800f596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f598:	6a3b      	ldr	r3, [r7, #32]
 800f59a:	e853 3f00 	ldrex	r3, [r3]
 800f59e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f5a6:	673b      	str	r3, [r7, #112]	; 0x70
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	3308      	adds	r3, #8
 800f5ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f5b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f5b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f5b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5b8:	e841 2300 	strex	r3, r2, [r1]
 800f5bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d1e5      	bne.n	800f590 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	4a15      	ldr	r2, [pc, #84]	; (800f61c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f5c8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	e853 3f00 	ldrex	r3, [r3]
 800f5d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	f043 0320 	orr.w	r3, r3, #32
 800f5de:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5e8:	61bb      	str	r3, [r7, #24]
 800f5ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ec:	6979      	ldr	r1, [r7, #20]
 800f5ee:	69ba      	ldr	r2, [r7, #24]
 800f5f0:	e841 2300 	strex	r3, r2, [r1]
 800f5f4:	613b      	str	r3, [r7, #16]
   return(result);
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d1e6      	bne.n	800f5ca <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f5fc:	e007      	b.n	800f60e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	699a      	ldr	r2, [r3, #24]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f042 0208 	orr.w	r2, r2, #8
 800f60c:	619a      	str	r2, [r3, #24]
}
 800f60e:	bf00      	nop
 800f610:	3798      	adds	r7, #152	; 0x98
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	effffffe 	.word	0xeffffffe
 800f61c:	0800f067 	.word	0x0800f067

0800f620 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b0a8      	sub	sp, #160	; 0xa0
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f62e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	69db      	ldr	r3, [r3, #28]
 800f638:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	689b      	ldr	r3, [r3, #8]
 800f64c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f656:	2b22      	cmp	r3, #34	; 0x22
 800f658:	f040 8151 	bne.w	800f8fe <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f662:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f666:	e0f8      	b.n	800f85a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f66e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f676:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800f67a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800f67e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f682:	4013      	ands	r3, r2
 800f684:	b29a      	uxth	r2, r3
 800f686:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f68a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f690:	1c9a      	adds	r2, r3, #2
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f69c:	b29b      	uxth	r3, r3
 800f69e:	3b01      	subs	r3, #1
 800f6a0:	b29a      	uxth	r2, r3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	69db      	ldr	r3, [r3, #28]
 800f6ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f6b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6b6:	f003 0307 	and.w	r3, r3, #7
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d053      	beq.n	800f766 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f6be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6c2:	f003 0301 	and.w	r3, r3, #1
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d011      	beq.n	800f6ee <UART_RxISR_16BIT_FIFOEN+0xce>
 800f6ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f6ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d00b      	beq.n	800f6ee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	2201      	movs	r2, #1
 800f6dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f6e4:	f043 0201 	orr.w	r2, r3, #1
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6f2:	f003 0302 	and.w	r3, r3, #2
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d011      	beq.n	800f71e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f6fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f6fe:	f003 0301 	and.w	r3, r3, #1
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00b      	beq.n	800f71e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2202      	movs	r2, #2
 800f70c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f714:	f043 0204 	orr.w	r2, r3, #4
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f71e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f722:	f003 0304 	and.w	r3, r3, #4
 800f726:	2b00      	cmp	r3, #0
 800f728:	d011      	beq.n	800f74e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f72a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f72e:	f003 0301 	and.w	r3, r3, #1
 800f732:	2b00      	cmp	r3, #0
 800f734:	d00b      	beq.n	800f74e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	2204      	movs	r2, #4
 800f73c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f744:	f043 0202 	orr.w	r2, r3, #2
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f754:	2b00      	cmp	r3, #0
 800f756:	d006      	beq.n	800f766 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f7fe fb7f 	bl	800de5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2200      	movs	r2, #0
 800f762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d173      	bne.n	800f85a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f77a:	e853 3f00 	ldrex	r3, [r3]
 800f77e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f782:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f786:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	461a      	mov	r2, r3
 800f790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f794:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f796:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f798:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f79a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f79c:	e841 2300 	strex	r3, r2, [r1]
 800f7a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f7a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d1e4      	bne.n	800f772 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	3308      	adds	r3, #8
 800f7ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7b2:	e853 3f00 	ldrex	r3, [r3]
 800f7b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f7b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7ba:	4b57      	ldr	r3, [pc, #348]	; (800f918 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800f7bc:	4013      	ands	r3, r2
 800f7be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	3308      	adds	r3, #8
 800f7c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f7cc:	65ba      	str	r2, [r7, #88]	; 0x58
 800f7ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f7d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f7d4:	e841 2300 	strex	r3, r2, [r1]
 800f7d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f7da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d1e3      	bne.n	800f7a8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2220      	movs	r2, #32
 800f7e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7f2:	2b01      	cmp	r3, #1
 800f7f4:	d12e      	bne.n	800f854 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f804:	e853 3f00 	ldrex	r3, [r3]
 800f808:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f80c:	f023 0310 	bic.w	r3, r3, #16
 800f810:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	461a      	mov	r2, r3
 800f818:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f81a:	647b      	str	r3, [r7, #68]	; 0x44
 800f81c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f81e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f822:	e841 2300 	strex	r3, r2, [r1]
 800f826:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d1e6      	bne.n	800f7fc <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	69db      	ldr	r3, [r3, #28]
 800f834:	f003 0310 	and.w	r3, r3, #16
 800f838:	2b10      	cmp	r3, #16
 800f83a:	d103      	bne.n	800f844 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2210      	movs	r2, #16
 800f842:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f84a:	4619      	mov	r1, r3
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f7fe fb0f 	bl	800de70 <HAL_UARTEx_RxEventCallback>
 800f852:	e002      	b.n	800f85a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f7f1 faa3 	bl	8000da0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f85a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d006      	beq.n	800f870 <UART_RxISR_16BIT_FIFOEN+0x250>
 800f862:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f866:	f003 0320 	and.w	r3, r3, #32
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	f47f aefc 	bne.w	800f668 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f876:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f87a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d045      	beq.n	800f90e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f888:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d23e      	bcs.n	800f90e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	3308      	adds	r3, #8
 800f896:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89a:	e853 3f00 	ldrex	r3, [r3]
 800f89e:	623b      	str	r3, [r7, #32]
   return(result);
 800f8a0:	6a3b      	ldr	r3, [r7, #32]
 800f8a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f8a6:	677b      	str	r3, [r7, #116]	; 0x74
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	3308      	adds	r3, #8
 800f8ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f8b0:	633a      	str	r2, [r7, #48]	; 0x30
 800f8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8b8:	e841 2300 	strex	r3, r2, [r1]
 800f8bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d1e5      	bne.n	800f890 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4a15      	ldr	r2, [pc, #84]	; (800f91c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800f8c8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	e853 3f00 	ldrex	r3, [r3]
 800f8d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f043 0320 	orr.w	r3, r3, #32
 800f8de:	673b      	str	r3, [r7, #112]	; 0x70
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f8e8:	61fb      	str	r3, [r7, #28]
 800f8ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ec:	69b9      	ldr	r1, [r7, #24]
 800f8ee:	69fa      	ldr	r2, [r7, #28]
 800f8f0:	e841 2300 	strex	r3, r2, [r1]
 800f8f4:	617b      	str	r3, [r7, #20]
   return(result);
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d1e6      	bne.n	800f8ca <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f8fc:	e007      	b.n	800f90e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	699a      	ldr	r2, [r3, #24]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f042 0208 	orr.w	r2, r2, #8
 800f90c:	619a      	str	r2, [r3, #24]
}
 800f90e:	bf00      	nop
 800f910:	37a0      	adds	r7, #160	; 0xa0
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	effffffe 	.word	0xeffffffe
 800f91c:	0800f1c7 	.word	0x0800f1c7

0800f920 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f920:	b480      	push	{r7}
 800f922:	b083      	sub	sp, #12
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f928:	bf00      	nop
 800f92a:	370c      	adds	r7, #12
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr

0800f934 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f93c:	bf00      	nop
 800f93e:	370c      	adds	r7, #12
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr

0800f948 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f950:	bf00      	nop
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b085      	sub	sp, #20
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d101      	bne.n	800f972 <HAL_UARTEx_DisableFifoMode+0x16>
 800f96e:	2302      	movs	r3, #2
 800f970:	e027      	b.n	800f9c2 <HAL_UARTEx_DisableFifoMode+0x66>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2201      	movs	r2, #1
 800f976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2224      	movs	r2, #36	; 0x24
 800f97e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f022 0201 	bic.w	r2, r2, #1
 800f998:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f9a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	68fa      	ldr	r2, [r7, #12]
 800f9ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2220      	movs	r2, #32
 800f9b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f9c0:	2300      	movs	r3, #0
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3714      	adds	r7, #20
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9cc:	4770      	bx	lr

0800f9ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f9ce:	b580      	push	{r7, lr}
 800f9d0:	b084      	sub	sp, #16
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	6078      	str	r0, [r7, #4]
 800f9d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d101      	bne.n	800f9e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f9e2:	2302      	movs	r3, #2
 800f9e4:	e02d      	b.n	800fa42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2224      	movs	r2, #36	; 0x24
 800f9f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	681a      	ldr	r2, [r3, #0]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f022 0201 	bic.w	r2, r2, #1
 800fa0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	689b      	ldr	r3, [r3, #8]
 800fa14:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	683a      	ldr	r2, [r7, #0]
 800fa1e:	430a      	orrs	r2, r1
 800fa20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f000 f850 	bl	800fac8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2220      	movs	r2, #32
 800fa34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fa40:	2300      	movs	r3, #0
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3710      	adds	r7, #16
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b084      	sub	sp, #16
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
 800fa52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa5a:	2b01      	cmp	r3, #1
 800fa5c:	d101      	bne.n	800fa62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fa5e:	2302      	movs	r3, #2
 800fa60:	e02d      	b.n	800fabe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2201      	movs	r2, #1
 800fa66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2224      	movs	r2, #36	; 0x24
 800fa6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	681a      	ldr	r2, [r3, #0]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f022 0201 	bic.w	r2, r2, #1
 800fa88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	683a      	ldr	r2, [r7, #0]
 800fa9a:	430a      	orrs	r2, r1
 800fa9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f000 f812 	bl	800fac8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	68fa      	ldr	r2, [r7, #12]
 800faaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2220      	movs	r2, #32
 800fab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2200      	movs	r2, #0
 800fab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fabc:	2300      	movs	r3, #0
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3710      	adds	r7, #16
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
	...

0800fac8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fac8:	b480      	push	{r7}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d108      	bne.n	800faea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2201      	movs	r2, #1
 800fadc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2201      	movs	r2, #1
 800fae4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fae8:	e031      	b.n	800fb4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800faea:	2310      	movs	r3, #16
 800faec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800faee:	2310      	movs	r3, #16
 800faf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	689b      	ldr	r3, [r3, #8]
 800faf8:	0e5b      	lsrs	r3, r3, #25
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	f003 0307 	and.w	r3, r3, #7
 800fb00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	689b      	ldr	r3, [r3, #8]
 800fb08:	0f5b      	lsrs	r3, r3, #29
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	f003 0307 	and.w	r3, r3, #7
 800fb10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb12:	7bbb      	ldrb	r3, [r7, #14]
 800fb14:	7b3a      	ldrb	r2, [r7, #12]
 800fb16:	4911      	ldr	r1, [pc, #68]	; (800fb5c <UARTEx_SetNbDataToProcess+0x94>)
 800fb18:	5c8a      	ldrb	r2, [r1, r2]
 800fb1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fb1e:	7b3a      	ldrb	r2, [r7, #12]
 800fb20:	490f      	ldr	r1, [pc, #60]	; (800fb60 <UARTEx_SetNbDataToProcess+0x98>)
 800fb22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb24:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb28:	b29a      	uxth	r2, r3
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb30:	7bfb      	ldrb	r3, [r7, #15]
 800fb32:	7b7a      	ldrb	r2, [r7, #13]
 800fb34:	4909      	ldr	r1, [pc, #36]	; (800fb5c <UARTEx_SetNbDataToProcess+0x94>)
 800fb36:	5c8a      	ldrb	r2, [r1, r2]
 800fb38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fb3c:	7b7a      	ldrb	r2, [r7, #13]
 800fb3e:	4908      	ldr	r1, [pc, #32]	; (800fb60 <UARTEx_SetNbDataToProcess+0x98>)
 800fb40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb42:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fb4e:	bf00      	nop
 800fb50:	3714      	adds	r7, #20
 800fb52:	46bd      	mov	sp, r7
 800fb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	0800fe60 	.word	0x0800fe60
 800fb60:	0800fe68 	.word	0x0800fe68

0800fb64 <__errno>:
 800fb64:	4b01      	ldr	r3, [pc, #4]	; (800fb6c <__errno+0x8>)
 800fb66:	6818      	ldr	r0, [r3, #0]
 800fb68:	4770      	bx	lr
 800fb6a:	bf00      	nop
 800fb6c:	2400003c 	.word	0x2400003c

0800fb70 <__libc_init_array>:
 800fb70:	b570      	push	{r4, r5, r6, lr}
 800fb72:	4d0d      	ldr	r5, [pc, #52]	; (800fba8 <__libc_init_array+0x38>)
 800fb74:	4c0d      	ldr	r4, [pc, #52]	; (800fbac <__libc_init_array+0x3c>)
 800fb76:	1b64      	subs	r4, r4, r5
 800fb78:	10a4      	asrs	r4, r4, #2
 800fb7a:	2600      	movs	r6, #0
 800fb7c:	42a6      	cmp	r6, r4
 800fb7e:	d109      	bne.n	800fb94 <__libc_init_array+0x24>
 800fb80:	4d0b      	ldr	r5, [pc, #44]	; (800fbb0 <__libc_init_array+0x40>)
 800fb82:	4c0c      	ldr	r4, [pc, #48]	; (800fbb4 <__libc_init_array+0x44>)
 800fb84:	f000 f93c 	bl	800fe00 <_init>
 800fb88:	1b64      	subs	r4, r4, r5
 800fb8a:	10a4      	asrs	r4, r4, #2
 800fb8c:	2600      	movs	r6, #0
 800fb8e:	42a6      	cmp	r6, r4
 800fb90:	d105      	bne.n	800fb9e <__libc_init_array+0x2e>
 800fb92:	bd70      	pop	{r4, r5, r6, pc}
 800fb94:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb98:	4798      	blx	r3
 800fb9a:	3601      	adds	r6, #1
 800fb9c:	e7ee      	b.n	800fb7c <__libc_init_array+0xc>
 800fb9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fba2:	4798      	blx	r3
 800fba4:	3601      	adds	r6, #1
 800fba6:	e7f2      	b.n	800fb8e <__libc_init_array+0x1e>
 800fba8:	0800fe78 	.word	0x0800fe78
 800fbac:	0800fe78 	.word	0x0800fe78
 800fbb0:	0800fe78 	.word	0x0800fe78
 800fbb4:	0800fe7c 	.word	0x0800fe7c

0800fbb8 <malloc>:
 800fbb8:	4b02      	ldr	r3, [pc, #8]	; (800fbc4 <malloc+0xc>)
 800fbba:	4601      	mov	r1, r0
 800fbbc:	6818      	ldr	r0, [r3, #0]
 800fbbe:	f000 b88d 	b.w	800fcdc <_malloc_r>
 800fbc2:	bf00      	nop
 800fbc4:	2400003c 	.word	0x2400003c

0800fbc8 <free>:
 800fbc8:	4b02      	ldr	r3, [pc, #8]	; (800fbd4 <free+0xc>)
 800fbca:	4601      	mov	r1, r0
 800fbcc:	6818      	ldr	r0, [r3, #0]
 800fbce:	f000 b819 	b.w	800fc04 <_free_r>
 800fbd2:	bf00      	nop
 800fbd4:	2400003c 	.word	0x2400003c

0800fbd8 <memcpy>:
 800fbd8:	440a      	add	r2, r1
 800fbda:	4291      	cmp	r1, r2
 800fbdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fbe0:	d100      	bne.n	800fbe4 <memcpy+0xc>
 800fbe2:	4770      	bx	lr
 800fbe4:	b510      	push	{r4, lr}
 800fbe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbee:	4291      	cmp	r1, r2
 800fbf0:	d1f9      	bne.n	800fbe6 <memcpy+0xe>
 800fbf2:	bd10      	pop	{r4, pc}

0800fbf4 <memset>:
 800fbf4:	4402      	add	r2, r0
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d100      	bne.n	800fbfe <memset+0xa>
 800fbfc:	4770      	bx	lr
 800fbfe:	f803 1b01 	strb.w	r1, [r3], #1
 800fc02:	e7f9      	b.n	800fbf8 <memset+0x4>

0800fc04 <_free_r>:
 800fc04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc06:	2900      	cmp	r1, #0
 800fc08:	d044      	beq.n	800fc94 <_free_r+0x90>
 800fc0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc0e:	9001      	str	r0, [sp, #4]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	f1a1 0404 	sub.w	r4, r1, #4
 800fc16:	bfb8      	it	lt
 800fc18:	18e4      	addlt	r4, r4, r3
 800fc1a:	f000 f8e3 	bl	800fde4 <__malloc_lock>
 800fc1e:	4a1e      	ldr	r2, [pc, #120]	; (800fc98 <_free_r+0x94>)
 800fc20:	9801      	ldr	r0, [sp, #4]
 800fc22:	6813      	ldr	r3, [r2, #0]
 800fc24:	b933      	cbnz	r3, 800fc34 <_free_r+0x30>
 800fc26:	6063      	str	r3, [r4, #4]
 800fc28:	6014      	str	r4, [r2, #0]
 800fc2a:	b003      	add	sp, #12
 800fc2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc30:	f000 b8de 	b.w	800fdf0 <__malloc_unlock>
 800fc34:	42a3      	cmp	r3, r4
 800fc36:	d908      	bls.n	800fc4a <_free_r+0x46>
 800fc38:	6825      	ldr	r5, [r4, #0]
 800fc3a:	1961      	adds	r1, r4, r5
 800fc3c:	428b      	cmp	r3, r1
 800fc3e:	bf01      	itttt	eq
 800fc40:	6819      	ldreq	r1, [r3, #0]
 800fc42:	685b      	ldreq	r3, [r3, #4]
 800fc44:	1949      	addeq	r1, r1, r5
 800fc46:	6021      	streq	r1, [r4, #0]
 800fc48:	e7ed      	b.n	800fc26 <_free_r+0x22>
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	b10b      	cbz	r3, 800fc54 <_free_r+0x50>
 800fc50:	42a3      	cmp	r3, r4
 800fc52:	d9fa      	bls.n	800fc4a <_free_r+0x46>
 800fc54:	6811      	ldr	r1, [r2, #0]
 800fc56:	1855      	adds	r5, r2, r1
 800fc58:	42a5      	cmp	r5, r4
 800fc5a:	d10b      	bne.n	800fc74 <_free_r+0x70>
 800fc5c:	6824      	ldr	r4, [r4, #0]
 800fc5e:	4421      	add	r1, r4
 800fc60:	1854      	adds	r4, r2, r1
 800fc62:	42a3      	cmp	r3, r4
 800fc64:	6011      	str	r1, [r2, #0]
 800fc66:	d1e0      	bne.n	800fc2a <_free_r+0x26>
 800fc68:	681c      	ldr	r4, [r3, #0]
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	6053      	str	r3, [r2, #4]
 800fc6e:	4421      	add	r1, r4
 800fc70:	6011      	str	r1, [r2, #0]
 800fc72:	e7da      	b.n	800fc2a <_free_r+0x26>
 800fc74:	d902      	bls.n	800fc7c <_free_r+0x78>
 800fc76:	230c      	movs	r3, #12
 800fc78:	6003      	str	r3, [r0, #0]
 800fc7a:	e7d6      	b.n	800fc2a <_free_r+0x26>
 800fc7c:	6825      	ldr	r5, [r4, #0]
 800fc7e:	1961      	adds	r1, r4, r5
 800fc80:	428b      	cmp	r3, r1
 800fc82:	bf04      	itt	eq
 800fc84:	6819      	ldreq	r1, [r3, #0]
 800fc86:	685b      	ldreq	r3, [r3, #4]
 800fc88:	6063      	str	r3, [r4, #4]
 800fc8a:	bf04      	itt	eq
 800fc8c:	1949      	addeq	r1, r1, r5
 800fc8e:	6021      	streq	r1, [r4, #0]
 800fc90:	6054      	str	r4, [r2, #4]
 800fc92:	e7ca      	b.n	800fc2a <_free_r+0x26>
 800fc94:	b003      	add	sp, #12
 800fc96:	bd30      	pop	{r4, r5, pc}
 800fc98:	240005c4 	.word	0x240005c4

0800fc9c <sbrk_aligned>:
 800fc9c:	b570      	push	{r4, r5, r6, lr}
 800fc9e:	4e0e      	ldr	r6, [pc, #56]	; (800fcd8 <sbrk_aligned+0x3c>)
 800fca0:	460c      	mov	r4, r1
 800fca2:	6831      	ldr	r1, [r6, #0]
 800fca4:	4605      	mov	r5, r0
 800fca6:	b911      	cbnz	r1, 800fcae <sbrk_aligned+0x12>
 800fca8:	f000 f88c 	bl	800fdc4 <_sbrk_r>
 800fcac:	6030      	str	r0, [r6, #0]
 800fcae:	4621      	mov	r1, r4
 800fcb0:	4628      	mov	r0, r5
 800fcb2:	f000 f887 	bl	800fdc4 <_sbrk_r>
 800fcb6:	1c43      	adds	r3, r0, #1
 800fcb8:	d00a      	beq.n	800fcd0 <sbrk_aligned+0x34>
 800fcba:	1cc4      	adds	r4, r0, #3
 800fcbc:	f024 0403 	bic.w	r4, r4, #3
 800fcc0:	42a0      	cmp	r0, r4
 800fcc2:	d007      	beq.n	800fcd4 <sbrk_aligned+0x38>
 800fcc4:	1a21      	subs	r1, r4, r0
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	f000 f87c 	bl	800fdc4 <_sbrk_r>
 800fccc:	3001      	adds	r0, #1
 800fcce:	d101      	bne.n	800fcd4 <sbrk_aligned+0x38>
 800fcd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	bd70      	pop	{r4, r5, r6, pc}
 800fcd8:	240005c8 	.word	0x240005c8

0800fcdc <_malloc_r>:
 800fcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fce0:	1ccd      	adds	r5, r1, #3
 800fce2:	f025 0503 	bic.w	r5, r5, #3
 800fce6:	3508      	adds	r5, #8
 800fce8:	2d0c      	cmp	r5, #12
 800fcea:	bf38      	it	cc
 800fcec:	250c      	movcc	r5, #12
 800fcee:	2d00      	cmp	r5, #0
 800fcf0:	4607      	mov	r7, r0
 800fcf2:	db01      	blt.n	800fcf8 <_malloc_r+0x1c>
 800fcf4:	42a9      	cmp	r1, r5
 800fcf6:	d905      	bls.n	800fd04 <_malloc_r+0x28>
 800fcf8:	230c      	movs	r3, #12
 800fcfa:	603b      	str	r3, [r7, #0]
 800fcfc:	2600      	movs	r6, #0
 800fcfe:	4630      	mov	r0, r6
 800fd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd04:	4e2e      	ldr	r6, [pc, #184]	; (800fdc0 <_malloc_r+0xe4>)
 800fd06:	f000 f86d 	bl	800fde4 <__malloc_lock>
 800fd0a:	6833      	ldr	r3, [r6, #0]
 800fd0c:	461c      	mov	r4, r3
 800fd0e:	bb34      	cbnz	r4, 800fd5e <_malloc_r+0x82>
 800fd10:	4629      	mov	r1, r5
 800fd12:	4638      	mov	r0, r7
 800fd14:	f7ff ffc2 	bl	800fc9c <sbrk_aligned>
 800fd18:	1c43      	adds	r3, r0, #1
 800fd1a:	4604      	mov	r4, r0
 800fd1c:	d14d      	bne.n	800fdba <_malloc_r+0xde>
 800fd1e:	6834      	ldr	r4, [r6, #0]
 800fd20:	4626      	mov	r6, r4
 800fd22:	2e00      	cmp	r6, #0
 800fd24:	d140      	bne.n	800fda8 <_malloc_r+0xcc>
 800fd26:	6823      	ldr	r3, [r4, #0]
 800fd28:	4631      	mov	r1, r6
 800fd2a:	4638      	mov	r0, r7
 800fd2c:	eb04 0803 	add.w	r8, r4, r3
 800fd30:	f000 f848 	bl	800fdc4 <_sbrk_r>
 800fd34:	4580      	cmp	r8, r0
 800fd36:	d13a      	bne.n	800fdae <_malloc_r+0xd2>
 800fd38:	6821      	ldr	r1, [r4, #0]
 800fd3a:	3503      	adds	r5, #3
 800fd3c:	1a6d      	subs	r5, r5, r1
 800fd3e:	f025 0503 	bic.w	r5, r5, #3
 800fd42:	3508      	adds	r5, #8
 800fd44:	2d0c      	cmp	r5, #12
 800fd46:	bf38      	it	cc
 800fd48:	250c      	movcc	r5, #12
 800fd4a:	4629      	mov	r1, r5
 800fd4c:	4638      	mov	r0, r7
 800fd4e:	f7ff ffa5 	bl	800fc9c <sbrk_aligned>
 800fd52:	3001      	adds	r0, #1
 800fd54:	d02b      	beq.n	800fdae <_malloc_r+0xd2>
 800fd56:	6823      	ldr	r3, [r4, #0]
 800fd58:	442b      	add	r3, r5
 800fd5a:	6023      	str	r3, [r4, #0]
 800fd5c:	e00e      	b.n	800fd7c <_malloc_r+0xa0>
 800fd5e:	6822      	ldr	r2, [r4, #0]
 800fd60:	1b52      	subs	r2, r2, r5
 800fd62:	d41e      	bmi.n	800fda2 <_malloc_r+0xc6>
 800fd64:	2a0b      	cmp	r2, #11
 800fd66:	d916      	bls.n	800fd96 <_malloc_r+0xba>
 800fd68:	1961      	adds	r1, r4, r5
 800fd6a:	42a3      	cmp	r3, r4
 800fd6c:	6025      	str	r5, [r4, #0]
 800fd6e:	bf18      	it	ne
 800fd70:	6059      	strne	r1, [r3, #4]
 800fd72:	6863      	ldr	r3, [r4, #4]
 800fd74:	bf08      	it	eq
 800fd76:	6031      	streq	r1, [r6, #0]
 800fd78:	5162      	str	r2, [r4, r5]
 800fd7a:	604b      	str	r3, [r1, #4]
 800fd7c:	4638      	mov	r0, r7
 800fd7e:	f104 060b 	add.w	r6, r4, #11
 800fd82:	f000 f835 	bl	800fdf0 <__malloc_unlock>
 800fd86:	f026 0607 	bic.w	r6, r6, #7
 800fd8a:	1d23      	adds	r3, r4, #4
 800fd8c:	1af2      	subs	r2, r6, r3
 800fd8e:	d0b6      	beq.n	800fcfe <_malloc_r+0x22>
 800fd90:	1b9b      	subs	r3, r3, r6
 800fd92:	50a3      	str	r3, [r4, r2]
 800fd94:	e7b3      	b.n	800fcfe <_malloc_r+0x22>
 800fd96:	6862      	ldr	r2, [r4, #4]
 800fd98:	42a3      	cmp	r3, r4
 800fd9a:	bf0c      	ite	eq
 800fd9c:	6032      	streq	r2, [r6, #0]
 800fd9e:	605a      	strne	r2, [r3, #4]
 800fda0:	e7ec      	b.n	800fd7c <_malloc_r+0xa0>
 800fda2:	4623      	mov	r3, r4
 800fda4:	6864      	ldr	r4, [r4, #4]
 800fda6:	e7b2      	b.n	800fd0e <_malloc_r+0x32>
 800fda8:	4634      	mov	r4, r6
 800fdaa:	6876      	ldr	r6, [r6, #4]
 800fdac:	e7b9      	b.n	800fd22 <_malloc_r+0x46>
 800fdae:	230c      	movs	r3, #12
 800fdb0:	603b      	str	r3, [r7, #0]
 800fdb2:	4638      	mov	r0, r7
 800fdb4:	f000 f81c 	bl	800fdf0 <__malloc_unlock>
 800fdb8:	e7a1      	b.n	800fcfe <_malloc_r+0x22>
 800fdba:	6025      	str	r5, [r4, #0]
 800fdbc:	e7de      	b.n	800fd7c <_malloc_r+0xa0>
 800fdbe:	bf00      	nop
 800fdc0:	240005c4 	.word	0x240005c4

0800fdc4 <_sbrk_r>:
 800fdc4:	b538      	push	{r3, r4, r5, lr}
 800fdc6:	4d06      	ldr	r5, [pc, #24]	; (800fde0 <_sbrk_r+0x1c>)
 800fdc8:	2300      	movs	r3, #0
 800fdca:	4604      	mov	r4, r0
 800fdcc:	4608      	mov	r0, r1
 800fdce:	602b      	str	r3, [r5, #0]
 800fdd0:	f7f2 fbf4 	bl	80025bc <_sbrk>
 800fdd4:	1c43      	adds	r3, r0, #1
 800fdd6:	d102      	bne.n	800fdde <_sbrk_r+0x1a>
 800fdd8:	682b      	ldr	r3, [r5, #0]
 800fdda:	b103      	cbz	r3, 800fdde <_sbrk_r+0x1a>
 800fddc:	6023      	str	r3, [r4, #0]
 800fdde:	bd38      	pop	{r3, r4, r5, pc}
 800fde0:	240005cc 	.word	0x240005cc

0800fde4 <__malloc_lock>:
 800fde4:	4801      	ldr	r0, [pc, #4]	; (800fdec <__malloc_lock+0x8>)
 800fde6:	f000 b809 	b.w	800fdfc <__retarget_lock_acquire_recursive>
 800fdea:	bf00      	nop
 800fdec:	240005d0 	.word	0x240005d0

0800fdf0 <__malloc_unlock>:
 800fdf0:	4801      	ldr	r0, [pc, #4]	; (800fdf8 <__malloc_unlock+0x8>)
 800fdf2:	f000 b804 	b.w	800fdfe <__retarget_lock_release_recursive>
 800fdf6:	bf00      	nop
 800fdf8:	240005d0 	.word	0x240005d0

0800fdfc <__retarget_lock_acquire_recursive>:
 800fdfc:	4770      	bx	lr

0800fdfe <__retarget_lock_release_recursive>:
 800fdfe:	4770      	bx	lr

0800fe00 <_init>:
 800fe00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe02:	bf00      	nop
 800fe04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe06:	bc08      	pop	{r3}
 800fe08:	469e      	mov	lr, r3
 800fe0a:	4770      	bx	lr

0800fe0c <_fini>:
 800fe0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe0e:	bf00      	nop
 800fe10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe12:	bc08      	pop	{r3}
 800fe14:	469e      	mov	lr, r3
 800fe16:	4770      	bx	lr
