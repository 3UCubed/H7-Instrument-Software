
H7-Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcf0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800ff88  0800ff88  0001ff88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ffe0  0800ffe0  0001ffe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ffe8  0800ffe8  0001ffe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ffec  0800ffec  0001ffec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000038  24000000  0800fff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005c0  24000040  08010028  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24000600  08010028  00020600  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 10 .debug_info   000239b0  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035d6  00000000  00000000  00043a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ae0  00000000  00000000  00046ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019a8  00000000  00000000  00048ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ada1  00000000  00000000  0004a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023a20  00000000  00000000  00085219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ff82  00000000  00000000  000a8c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00228bbb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007530  00000000  00000000  00228c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ff70 	.word	0x0800ff70

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	0800ff70 	.word	0x0800ff70

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <HAL_TIM_OC_DelayElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b092      	sub	sp, #72	; 0x48
 800060c:	af02      	add	r7, sp, #8
 800060e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a9b      	ldr	r2, [pc, #620]	; (8000880 <HAL_TIM_OC_DelayElapsedCallback+0x278>)
 8000614:	4293      	cmp	r3, r2
 8000616:	f040 8365 	bne.w	8000ce4 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 800061a:	4b9a      	ldr	r3, [pc, #616]	; (8000884 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 80e4 	beq.w	80007ec <HAL_TIM_OC_DelayElapsedCallback+0x1e4>
         */

        /* Write to SPI (begin transfer?) */


		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) { 	//check pin state
 8000624:	bf00      	nop
 8000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062a:	4897      	ldr	r0, [pc, #604]	; (8000888 <HAL_TIM_OC_DelayElapsedCallback+0x280>)
 800062c:	f007 fa64 	bl	8007af8 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f7      	bne.n	8000626 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		 * Steps DAC
		 * +/- 0.5v Every 100ms
		*/

		/* Write to SPI (begin transfer?) */
		HAL_SPI_Receive(&hspi2,(uint8_t *)spi2RxBuffer, 1, 1);
 8000636:	2301      	movs	r3, #1
 8000638:	2201      	movs	r2, #1
 800063a:	4994      	ldr	r1, [pc, #592]	; (800088c <HAL_TIM_OC_DelayElapsedCallback+0x284>)
 800063c:	4894      	ldr	r0, [pc, #592]	; (8000890 <HAL_TIM_OC_DelayElapsedCallback+0x288>)
 800063e:	f00b fad9 	bl	800bbf4 <HAL_SPI_Receive>
		uint8_t SPI2_LSB = ((spi2RxBuffer[0] & 0xFF00) >> 8);
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t SPI2_MSB = (spi2RxBuffer[1] & 0xFF);
 8000648:	4b90      	ldr	r3, [pc, #576]	; (800088c <HAL_TIM_OC_DelayElapsedCallback+0x284>)
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		hspi2.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 8000650:	4b8f      	ldr	r3, [pc, #572]	; (8000890 <HAL_TIM_OC_DelayElapsedCallback+0x288>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b8e      	ldr	r3, [pc, #568]	; (8000890 <HAL_TIM_OC_DelayElapsedCallback+0x288>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800065e:	601a      	str	r2, [r3, #0]

		uint32_t current_step = DAC_OUT[step];
 8000660:	4b8c      	ldr	r3, [pc, #560]	; (8000894 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b8c      	ldr	r3, [pc, #560]	; (8000898 <HAL_TIM_OC_DelayElapsedCallback+0x290>)
 8000668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800066c:	633b      	str	r3, [r7, #48]	; 0x30
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 800066e:	4b89      	ldr	r3, [pc, #548]	; (8000894 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	4b88      	ldr	r3, [pc, #544]	; (8000898 <HAL_TIM_OC_DelayElapsedCallback+0x290>)
 8000676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	4887      	ldr	r0, [pc, #540]	; (800089c <HAL_TIM_OC_DelayElapsedCallback+0x294>)
 8000680:	f004 f8f9 	bl	8004876 <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000684:	2100      	movs	r1, #0
 8000686:	4885      	ldr	r0, [pc, #532]	; (800089c <HAL_TIM_OC_DelayElapsedCallback+0x294>)
 8000688:	f004 f8a3 	bl	80047d2 <HAL_DAC_Start>

		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, DAC_2_OUT);
 800068c:	4b84      	ldr	r3, [pc, #528]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0x298>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2200      	movs	r2, #0
 8000692:	2110      	movs	r1, #16
 8000694:	4881      	ldr	r0, [pc, #516]	; (800089c <HAL_TIM_OC_DelayElapsedCallback+0x294>)
 8000696:	f004 f8ee 	bl	8004876 <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800069a:	2110      	movs	r1, #16
 800069c:	487f      	ldr	r0, [pc, #508]	; (800089c <HAL_TIM_OC_DelayElapsedCallback+0x294>)
 800069e:	f004 f898 	bl	80047d2 <HAL_DAC_Start>



		if (auto_sweep_2) {
 80006a2:	4b80      	ldr	r3, [pc, #512]	; (80008a4 <HAL_TIM_OC_DelayElapsedCallback+0x29c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d035      	beq.n	8000716 <HAL_TIM_OC_DelayElapsedCallback+0x10e>
			if (DAC_2_OUT >= 4055) {
 80006aa:	4b7d      	ldr	r3, [pc, #500]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0x298>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f640 72d6 	movw	r2, #4054	; 0xfd6
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d903      	bls.n	80006be <HAL_TIM_OC_DelayElapsedCallback+0xb6>
				is_increasing_2 = 0;
 80006b6:	4b7c      	ldr	r3, [pc, #496]	; (80008a8 <HAL_TIM_OC_DelayElapsedCallback+0x2a0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	e006      	b.n	80006cc <HAL_TIM_OC_DelayElapsedCallback+0xc4>
			} else if (DAC_2_OUT <= 0) {
 80006be:	4b78      	ldr	r3, [pc, #480]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0x298>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d102      	bne.n	80006cc <HAL_TIM_OC_DelayElapsedCallback+0xc4>
				is_increasing_2 = 1;
 80006c6:	4b78      	ldr	r3, [pc, #480]	; (80008a8 <HAL_TIM_OC_DelayElapsedCallback+0x2a0>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]
			}

			if (is_increasing_2) {
 80006cc:	4b76      	ldr	r3, [pc, #472]	; (80008a8 <HAL_TIM_OC_DelayElapsedCallback+0x2a0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d010      	beq.n	80006f6 <HAL_TIM_OC_DelayElapsedCallback+0xee>
				DAC_2_OUT += 40.95;
 80006d4:	4b72      	ldr	r3, [pc, #456]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0x298>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	ee07 3a90 	vmov	s15, r3
 80006dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80006e0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8000878 <HAL_TIM_OC_DelayElapsedCallback+0x270>
 80006e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80006e8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006ec:	ee17 2a90 	vmov	r2, s15
 80006f0:	4b6b      	ldr	r3, [pc, #428]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0x298>)
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	e00f      	b.n	8000716 <HAL_TIM_OC_DelayElapsedCallback+0x10e>
			} else {
				DAC_2_OUT -= 40.95;
 80006f6:	4b6a      	ldr	r3, [pc, #424]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0x298>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	ee07 3a90 	vmov	s15, r3
 80006fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000702:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8000878 <HAL_TIM_OC_DelayElapsedCallback+0x270>
 8000706:	ee37 7b46 	vsub.f64	d7, d7, d6
 800070a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800070e:	ee17 2a90 	vmov	r2, s15
 8000712:	4b63      	ldr	r3, [pc, #396]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0x298>)
 8000714:	601a      	str	r2, [r3, #0]
		}
		*/



        HAL_ADC_Stop_DMA(&hadc1);
 8000716:	4865      	ldr	r0, [pc, #404]	; (80008ac <HAL_TIM_OC_DelayElapsedCallback+0x2a4>)
 8000718:	f002 fe8e 	bl	8003438 <HAL_ADC_Stop_DMA>
		if (HAL_ADC_Start_DMA(&hadc1,
 800071c:	2220      	movs	r2, #32
 800071e:	4964      	ldr	r1, [pc, #400]	; (80008b0 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 8000720:	4862      	ldr	r0, [pc, #392]	; (80008ac <HAL_TIM_OC_DelayElapsedCallback+0x2a4>)
 8000722:	f002 fdc5 	bl	80032b0 <HAL_ADC_Start_DMA>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <HAL_TIM_OC_DelayElapsedCallback+0x128>
			(uint32_t *)aADCxConvertedData,
			 ADC_CONVERTED_DATA_BUFFER_SIZE
		) != HAL_OK) {
		     Error_Handler();
 800072c:	f001 fc02 	bl	8001f34 <Error_Handler>
		}

		uint16_t PF11 = aADCxConvertedData[13]; 		// ENDmon -- verified
 8000730:	4b5f      	ldr	r3, [pc, #380]	; (80008b0 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 8000732:	8b5b      	ldrh	r3, [r3, #26]
 8000734:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t PA6 = aADCxConvertedData[14]; 			// SWPmon -- verified
 8000736:	4b5e      	ldr	r3, [pc, #376]	; (80008b0 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 8000738:	8b9b      	ldrh	r3, [r3, #28]
 800073a:	85bb      	strh	r3, [r7, #44]	; 0x2c
		uint16_t PC4 = aADCxConvertedData[15]; 			// TEMP1 -- verified
 800073c:	4b5c      	ldr	r3, [pc, #368]	; (80008b0 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 800073e:	8bdb      	ldrh	r3, [r3, #30]
 8000740:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t PB1 = aADCxConvertedData[0];			// TEMP2 -- verified
 8000742:	4b5b      	ldr	r3, [pc, #364]	; (80008b0 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	853b      	strh	r3, [r7, #40]	; 0x28

		erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 8000748:	22aa      	movs	r2, #170	; 0xaa
 800074a:	4b5a      	ldr	r3, [pc, #360]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 800074c:	701a      	strb	r2, [r3, #0]
		erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 800074e:	22aa      	movs	r2, #170	; 0xaa
 8000750:	4b58      	ldr	r3, [pc, #352]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000752:	705a      	strb	r2, [r3, #1]
		erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 8000754:	4b58      	ldr	r3, [pc, #352]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	b29b      	uxth	r3, r3
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b55      	ldr	r3, [pc, #340]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000760:	709a      	strb	r2, [r3, #2]
		erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 8000762:	4b55      	ldr	r3, [pc, #340]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b52      	ldr	r3, [pc, #328]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 800076a:	70da      	strb	r2, [r3, #3]
		erpa_buf[4] = ((PF11 & 0xFF00) >> 8); 	  		// ENDmon MSB
 800076c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800076e:	0a1b      	lsrs	r3, r3, #8
 8000770:	b29b      	uxth	r3, r3
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b4f      	ldr	r3, [pc, #316]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000776:	711a      	strb	r2, [r3, #4]
		erpa_buf[5] = (PF11 & 0xFF);               		// ENDmon LSB
 8000778:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 800077e:	715a      	strb	r2, [r3, #5]
		erpa_buf[6] = ((PA6 & 0xFF00) >> 8);      		// SWP Monitored MSB
 8000780:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000782:	0a1b      	lsrs	r3, r3, #8
 8000784:	b29b      	uxth	r3, r3
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4b4a      	ldr	r3, [pc, #296]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 800078a:	719a      	strb	r2, [r3, #6]
		erpa_buf[7] = (PA6 & 0xFF);               		// SWP Monitored LSB
 800078c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b48      	ldr	r3, [pc, #288]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000792:	71da      	strb	r2, [r3, #7]
		erpa_buf[8] = ((PC4 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 8000794:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000796:	0a1b      	lsrs	r3, r3, #8
 8000798:	b29b      	uxth	r3, r3
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b45      	ldr	r3, [pc, #276]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 800079e:	721a      	strb	r2, [r3, #8]
		erpa_buf[9] = (PC4 & 0xFF);               		// TEMPURATURE 1 LSB
 80007a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b43      	ldr	r3, [pc, #268]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80007a6:	725a      	strb	r2, [r3, #9]
		erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 80007a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007aa:	0a1b      	lsrs	r3, r3, #8
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b40      	ldr	r3, [pc, #256]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80007b2:	729a      	strb	r2, [r3, #10]
		erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 80007b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b3e      	ldr	r3, [pc, #248]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80007ba:	72da      	strb	r2, [r3, #11]
		erpa_buf[12] = SPI2_MSB;					    // ERPA eADC MSB
 80007bc:	4a3d      	ldr	r2, [pc, #244]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80007be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80007c2:	7313      	strb	r3, [r2, #12]
		erpa_buf[13] = SPI2_LSB;          				// ERPA eADC LSB
 80007c4:	4a3b      	ldr	r2, [pc, #236]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80007c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80007ca:	7353      	strb	r3, [r2, #13]


		erpa_seq++;
 80007cc:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b38      	ldr	r3, [pc, #224]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 80007d6:	801a      	strh	r2, [r3, #0]
		if (ERPA_ON)
 80007d8:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d005      	beq.n	80007ec <HAL_TIM_OC_DelayElapsedCallback+0x1e4>
		{
		  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80007e0:	2364      	movs	r3, #100	; 0x64
 80007e2:	220e      	movs	r2, #14
 80007e4:	4933      	ldr	r1, [pc, #204]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80007e6:	4835      	ldr	r0, [pc, #212]	; (80008bc <HAL_TIM_OC_DelayElapsedCallback+0x2b4>)
 80007e8:	f00c ffce 	bl	800d788 <HAL_UART_Transmit>
		}
      }
      if (HK_ON)
 80007ec:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b8>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	f000 82c3 	beq.w	8000d7c <HAL_TIM_OC_DelayElapsedCallback+0x774>
      {
        if (hk_counter == HK_CADENCE)
 80007f6:	4b33      	ldr	r3, [pc, #204]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2201      	movs	r2, #1
 80007fc:	4293      	cmp	r3, r2
 80007fe:	f040 8259 	bne.w	8000cb4 <HAL_TIM_OC_DelayElapsedCallback+0x6ac>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 8000802:	2300      	movs	r3, #0
 8000804:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 8000806:	2390      	movs	r3, #144	; 0x90
 8000808:	b299      	uxth	r1, r3
 800080a:	f107 0208 	add.w	r2, r7, #8
 800080e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2301      	movs	r3, #1
 8000816:	482c      	ldr	r0, [pc, #176]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 8000818:	f007 fa30 	bl	8007c7c <HAL_I2C_Master_Transmit>
 800081c:	4603      	mov	r3, r0
 800081e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          if (ret != HAL_OK)
 8000822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000826:	2b00      	cmp	r3, #0
 8000828:	d009      	beq.n	800083e <HAL_TIM_OC_DelayElapsedCallback+0x236>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	4a27      	ldr	r2, [pc, #156]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 8000830:	ca07      	ldmia	r2, {r0, r1, r2}
 8000832:	c303      	stmia	r3!, {r0, r1}
 8000834:	801a      	strh	r2, [r3, #0]
 8000836:	3302      	adds	r3, #2
 8000838:	0c12      	lsrs	r2, r2, #16
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	e053      	b.n	80008e6 <HAL_TIM_OC_DelayElapsedCallback+0x2de>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 800083e:	2390      	movs	r3, #144	; 0x90
 8000840:	b299      	uxth	r1, r3
 8000842:	f107 0208 	add.w	r2, r7, #8
 8000846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2302      	movs	r3, #2
 800084e:	481e      	ldr	r0, [pc, #120]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 8000850:	f007 fb08 	bl	8007e64 <HAL_I2C_Master_Receive>
 8000854:	4603      	mov	r3, r0
 8000856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 800085a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800085e:	2b00      	cmp	r3, #0
 8000860:	d038      	beq.n	80008d4 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	4a1a      	ldr	r2, [pc, #104]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 8000868:	ca07      	ldmia	r2, {r0, r1, r2}
 800086a:	c303      	stmia	r3!, {r0, r1}
 800086c:	801a      	strh	r2, [r3, #0]
 800086e:	3302      	adds	r3, #2
 8000870:	0c12      	lsrs	r2, r2, #16
 8000872:	701a      	strb	r2, [r3, #0]
 8000874:	e037      	b.n	80008e6 <HAL_TIM_OC_DelayElapsedCallback+0x2de>
 8000876:	bf00      	nop
 8000878:	9999999a 	.word	0x9999999a
 800087c:	40447999 	.word	0x40447999
 8000880:	240003d0 	.word	0x240003d0
 8000884:	24000025 	.word	0x24000025
 8000888:	58020400 	.word	0x58020400
 800088c:	240005b4 	.word	0x240005b4
 8000890:	240002fc 	.word	0x240002fc
 8000894:	240005a4 	.word	0x240005a4
 8000898:	24000000 	.word	0x24000000
 800089c:	24000214 	.word	0x24000214
 80008a0:	240005a0 	.word	0x240005a0
 80008a4:	240005ac 	.word	0x240005ac
 80008a8:	24000020 	.word	0x24000020
 80008ac:	2400005c 	.word	0x2400005c
 80008b0:	24000520 	.word	0x24000520
 80008b4:	240005b8 	.word	0x240005b8
 80008b8:	240005c6 	.word	0x240005c6
 80008bc:	2400041c 	.word	0x2400041c
 80008c0:	24000026 	.word	0x24000026
 80008c4:	240005f8 	.word	0x240005f8
 80008c8:	24000228 	.word	0x24000228
 80008cc:	0800ff88 	.word	0x0800ff88
 80008d0:	0800ff94 	.word	0x0800ff94
            }
            else
            {
              output1 = (int16_t)(buf[0] << 8);
 80008d4:	7a3b      	ldrb	r3, [r7, #8]
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
              output1 = (output1 | buf[1]) >> 3;
 80008da:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80008de:	7a7a      	ldrb	r2, [r7, #9]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	10db      	asrs	r3, r3, #3
 80008e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
          }

          /* Tell ADT7410_2 that we want to read from the temperature register */
          buf[0] = REG_TEMP;
 80008e6:	2300      	movs	r3, #0
 80008e8:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 80008ea:	2394      	movs	r3, #148	; 0x94
 80008ec:	b299      	uxth	r1, r3
 80008ee:	f107 0208 	add.w	r2, r7, #8
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2301      	movs	r3, #1
 80008fa:	485b      	ldr	r0, [pc, #364]	; (8000a68 <HAL_TIM_OC_DelayElapsedCallback+0x460>)
 80008fc:	f007 f9be 	bl	8007c7c <HAL_I2C_Master_Transmit>
 8000900:	4603      	mov	r3, r0
 8000902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800090a:	2b00      	cmp	r3, #0
 800090c:	d009      	beq.n	8000922 <HAL_TIM_OC_DelayElapsedCallback+0x31a>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	4a56      	ldr	r2, [pc, #344]	; (8000a6c <HAL_TIM_OC_DelayElapsedCallback+0x464>)
 8000914:	ca07      	ldmia	r2, {r0, r1, r2}
 8000916:	c303      	stmia	r3!, {r0, r1}
 8000918:	801a      	strh	r2, [r3, #0]
 800091a:	3302      	adds	r3, #2
 800091c:	0c12      	lsrs	r2, r2, #16
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	e024      	b.n	800096c <HAL_TIM_OC_DelayElapsedCallback+0x364>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 8000922:	2394      	movs	r3, #148	; 0x94
 8000924:	b299      	uxth	r1, r3
 8000926:	f107 0208 	add.w	r2, r7, #8
 800092a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2302      	movs	r3, #2
 8000932:	484d      	ldr	r0, [pc, #308]	; (8000a68 <HAL_TIM_OC_DelayElapsedCallback+0x460>)
 8000934:	f007 fa96 	bl	8007e64 <HAL_I2C_Master_Receive>
 8000938:	4603      	mov	r3, r0
 800093a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 800093e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000942:	2b00      	cmp	r3, #0
 8000944:	d009      	beq.n	800095a <HAL_TIM_OC_DelayElapsedCallback+0x352>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	4a49      	ldr	r2, [pc, #292]	; (8000a70 <HAL_TIM_OC_DelayElapsedCallback+0x468>)
 800094c:	ca07      	ldmia	r2, {r0, r1, r2}
 800094e:	c303      	stmia	r3!, {r0, r1}
 8000950:	801a      	strh	r2, [r3, #0]
 8000952:	3302      	adds	r3, #2
 8000954:	0c12      	lsrs	r2, r2, #16
 8000956:	701a      	strb	r2, [r3, #0]
 8000958:	e008      	b.n	800096c <HAL_TIM_OC_DelayElapsedCallback+0x364>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 800095a:	7a3b      	ldrb	r3, [r7, #8]
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	87bb      	strh	r3, [r7, #60]	; 0x3c
              output2 = (output2 | buf[1]) >> 3;
 8000960:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000964:	7a7a      	ldrb	r2, [r7, #9]
 8000966:	4313      	orrs	r3, r2
 8000968:	10db      	asrs	r3, r3, #3
 800096a:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 800096c:	2300      	movs	r3, #0
 800096e:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 8000970:	2392      	movs	r3, #146	; 0x92
 8000972:	b299      	uxth	r1, r3
 8000974:	f107 0208 	add.w	r2, r7, #8
 8000978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	4839      	ldr	r0, [pc, #228]	; (8000a68 <HAL_TIM_OC_DelayElapsedCallback+0x460>)
 8000982:	f007 f97b 	bl	8007c7c <HAL_I2C_Master_Transmit>
 8000986:	4603      	mov	r3, r0
 8000988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 800098c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000990:	2b00      	cmp	r3, #0
 8000992:	d009      	beq.n	80009a8 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000994:	f107 0308 	add.w	r3, r7, #8
 8000998:	4a34      	ldr	r2, [pc, #208]	; (8000a6c <HAL_TIM_OC_DelayElapsedCallback+0x464>)
 800099a:	ca07      	ldmia	r2, {r0, r1, r2}
 800099c:	c303      	stmia	r3!, {r0, r1}
 800099e:	801a      	strh	r2, [r3, #0]
 80009a0:	3302      	adds	r3, #2
 80009a2:	0c12      	lsrs	r2, r2, #16
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	e024      	b.n	80009f2 <HAL_TIM_OC_DelayElapsedCallback+0x3ea>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 80009a8:	2392      	movs	r3, #146	; 0x92
 80009aa:	b299      	uxth	r1, r3
 80009ac:	f107 0208 	add.w	r2, r7, #8
 80009b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2302      	movs	r3, #2
 80009b8:	482b      	ldr	r0, [pc, #172]	; (8000a68 <HAL_TIM_OC_DelayElapsedCallback+0x460>)
 80009ba:	f007 fa53 	bl	8007e64 <HAL_I2C_Master_Receive>
 80009be:	4603      	mov	r3, r0
 80009c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 80009c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d009      	beq.n	80009e0 <HAL_TIM_OC_DelayElapsedCallback+0x3d8>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	4a27      	ldr	r2, [pc, #156]	; (8000a70 <HAL_TIM_OC_DelayElapsedCallback+0x468>)
 80009d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80009d4:	c303      	stmia	r3!, {r0, r1}
 80009d6:	801a      	strh	r2, [r3, #0]
 80009d8:	3302      	adds	r3, #2
 80009da:	0c12      	lsrs	r2, r2, #16
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e008      	b.n	80009f2 <HAL_TIM_OC_DelayElapsedCallback+0x3ea>
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 80009e0:	7a3b      	ldrb	r3, [r7, #8]
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	877b      	strh	r3, [r7, #58]	; 0x3a
              output3 = (output3 | buf[1]) >> 3;
 80009e6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80009ea:	7a7a      	ldrb	r2, [r7, #9]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	10db      	asrs	r3, r3, #3
 80009f0:	877b      	strh	r3, [r7, #58]	; 0x3a
            }
          }
          /* TEMP SENSOR 4 */
          buf[0] = REG_TEMP;
 80009f2:	2300      	movs	r3, #0
 80009f4:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 80009f6:	2396      	movs	r3, #150	; 0x96
 80009f8:	b299      	uxth	r1, r3
 80009fa:	f107 0208 	add.w	r2, r7, #8
 80009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2301      	movs	r3, #1
 8000a06:	4818      	ldr	r0, [pc, #96]	; (8000a68 <HAL_TIM_OC_DelayElapsedCallback+0x460>)
 8000a08:	f007 f938 	bl	8007c7c <HAL_I2C_Master_Transmit>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d009      	beq.n	8000a2e <HAL_TIM_OC_DelayElapsedCallback+0x426>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <HAL_TIM_OC_DelayElapsedCallback+0x464>)
 8000a20:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a22:	c303      	stmia	r3!, {r0, r1}
 8000a24:	801a      	strh	r2, [r3, #0]
 8000a26:	3302      	adds	r3, #2
 8000a28:	0c12      	lsrs	r2, r2, #16
 8000a2a:	701a      	strb	r2, [r3, #0]
 8000a2c:	e02b      	b.n	8000a86 <HAL_TIM_OC_DelayElapsedCallback+0x47e>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 8000a2e:	2396      	movs	r3, #150	; 0x96
 8000a30:	b299      	uxth	r1, r3
 8000a32:	f107 0208 	add.w	r2, r7, #8
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	480a      	ldr	r0, [pc, #40]	; (8000a68 <HAL_TIM_OC_DelayElapsedCallback+0x460>)
 8000a40:	f007 fa10 	bl	8007e64 <HAL_I2C_Master_Receive>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 8000a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d010      	beq.n	8000a74 <HAL_TIM_OC_DelayElapsedCallback+0x46c>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <HAL_TIM_OC_DelayElapsedCallback+0x468>)
 8000a58:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a5a:	c303      	stmia	r3!, {r0, r1}
 8000a5c:	801a      	strh	r2, [r3, #0]
 8000a5e:	3302      	adds	r3, #2
 8000a60:	0c12      	lsrs	r2, r2, #16
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	e00f      	b.n	8000a86 <HAL_TIM_OC_DelayElapsedCallback+0x47e>
 8000a66:	bf00      	nop
 8000a68:	24000228 	.word	0x24000228
 8000a6c:	0800ff88 	.word	0x0800ff88
 8000a70:	0800ff94 	.word	0x0800ff94
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 8000a74:	7a3b      	ldrb	r3, [r7, #8]
 8000a76:	021b      	lsls	r3, r3, #8
 8000a78:	873b      	strh	r3, [r7, #56]	; 0x38
              output4 = (output4 | buf[1]) >> 3;
 8000a7a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000a7e:	7a7a      	ldrb	r2, [r7, #9]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	10db      	asrs	r3, r3, #3
 8000a84:	873b      	strh	r3, [r7, #56]	; 0x38
            }
          }

          HAL_ADC_Stop_DMA(&hadc3);
 8000a86:	488e      	ldr	r0, [pc, #568]	; (8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x6b8>)
 8000a88:	f002 fcd6 	bl	8003438 <HAL_ADC_Stop_DMA>
          if (HAL_ADC_Start_DMA(&hadc3,
 8000a8c:	2220      	movs	r2, #32
 8000a8e:	498d      	ldr	r1, [pc, #564]	; (8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0x6bc>)
 8000a90:	488b      	ldr	r0, [pc, #556]	; (8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x6b8>)
 8000a92:	f002 fc0d 	bl	80032b0 <HAL_ADC_Start_DMA>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_TIM_OC_DelayElapsedCallback+0x498>
          (uint32_t *)aADC3ConvertedData,
          ADC_CONVERTED_DATA_BUFFER_SIZE)
          != HAL_OK) {
             Error_Handler();
 8000a9c:	f001 fa4a 	bl	8001f34 <Error_Handler>
          }

          uint16_t vrefint = aADC3ConvertedData[1];
 8000aa0:	4b88      	ldr	r3, [pc, #544]	; (8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0x6bc>)
 8000aa2:	885b      	ldrh	r3, [r3, #2]
 8000aa4:	84bb      	strh	r3, [r7, #36]	; 0x24
          uint16_t vsense = aADC3ConvertedData[2];
 8000aa6:	4b87      	ldr	r3, [pc, #540]	; (8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0x6bc>)
 8000aa8:	889b      	ldrh	r3, [r3, #4]
 8000aaa:	847b      	strh	r3, [r7, #34]	; 0x22
          uint16_t PF9 = aADC3ConvertedData[0];
 8000aac:	4b85      	ldr	r3, [pc, #532]	; (8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0x6bc>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	843b      	strh	r3, [r7, #32]


          HAL_ADC_Stop_DMA(&hadc1);
 8000ab2:	4885      	ldr	r0, [pc, #532]	; (8000cc8 <HAL_TIM_OC_DelayElapsedCallback+0x6c0>)
 8000ab4:	f002 fcc0 	bl	8003438 <HAL_ADC_Stop_DMA>
          if (HAL_ADC_Start_DMA(&hadc1,
 8000ab8:	2220      	movs	r2, #32
 8000aba:	4984      	ldr	r1, [pc, #528]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000abc:	4882      	ldr	r0, [pc, #520]	; (8000cc8 <HAL_TIM_OC_DelayElapsedCallback+0x6c0>)
 8000abe:	f002 fbf7 	bl	80032b0 <HAL_ADC_Start_DMA>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_TIM_OC_DelayElapsedCallback+0x4c4>
          	(uint32_t *)aADCxConvertedData,
          	ADC_CONVERTED_DATA_BUFFER_SIZE)
        	!= HAL_OK) {
          	Error_Handler();
 8000ac8:	f001 fa34 	bl	8001f34 <Error_Handler>
          }

          uint16_t PF12 = aADCxConvertedData[2];		// BUSVmon -- sending as ENDMON
 8000acc:	4b7f      	ldr	r3, [pc, #508]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000ace:	889b      	ldrh	r3, [r3, #4]
 8000ad0:	83fb      	strh	r3, [r7, #30]
          uint16_t PA7 = aADCxConvertedData[1];			// BUSImon -- sending as n800vmon
 8000ad2:	4b7e      	ldr	r3, [pc, #504]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000ad4:	885b      	ldrh	r3, [r3, #2]
 8000ad6:	83bb      	strh	r3, [r7, #28]
          uint16_t PC5 = aADCxConvertedData[4];			// 2v5mon -- verified sending as TMP1 too
 8000ad8:	4b7c      	ldr	r3, [pc, #496]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000ada:	891b      	ldrh	r3, [r3, #8]
 8000adc:	837b      	strh	r3, [r7, #26]
          uint16_t PB0 = aADCxConvertedData[5];			// 3v3mon -- verified sending as TMP2 too
 8000ade:	4b7b      	ldr	r3, [pc, #492]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000ae0:	895b      	ldrh	r3, [r3, #10]
 8000ae2:	833b      	strh	r3, [r7, #24]
          uint16_t PC0 = aADCxConvertedData[6];			// 5vmon -- verified
 8000ae4:	4b79      	ldr	r3, [pc, #484]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000ae6:	899b      	ldrh	r3, [r3, #12]
 8000ae8:	82fb      	strh	r3, [r7, #22]
          uint16_t PC1 = aADCxConvertedData[7];			// n3v3mon -- verified sending as SWPMon too
 8000aea:	4b78      	ldr	r3, [pc, #480]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000aec:	89db      	ldrh	r3, [r3, #14]
 8000aee:	82bb      	strh	r3, [r7, #20]
          uint16_t PA2 = aADCxConvertedData[8];			// n5vmon -- verified
 8000af0:	4b76      	ldr	r3, [pc, #472]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000af2:	8a1b      	ldrh	r3, [r3, #16]
 8000af4:	827b      	strh	r3, [r7, #18]
          uint16_t PA3 = aADCxConvertedData[9];			// 15vmon -- verified
 8000af6:	4b75      	ldr	r3, [pc, #468]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000af8:	8a5b      	ldrh	r3, [r3, #18]
 8000afa:	823b      	strh	r3, [r7, #16]
          uint16_t PA0 = aADCxConvertedData[10];		// 5vrefmon -- verified
 8000afc:	4b73      	ldr	r3, [pc, #460]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000afe:	8a9b      	ldrh	r3, [r3, #20]
 8000b00:	81fb      	strh	r3, [r7, #14]
          uint16_t PA1 = aADCxConvertedData[11];		// n200vmon -- verified
 8000b02:	4b72      	ldr	r3, [pc, #456]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000b04:	8adb      	ldrh	r3, [r3, #22]
 8000b06:	81bb      	strh	r3, [r7, #12]


          hk_buf[0] = hk_sync;                     		// HK SYNC 0xCC MSB					0 SYNC
 8000b08:	22cc      	movs	r2, #204	; 0xcc
 8000b0a:	4b71      	ldr	r3, [pc, #452]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b0c:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     		// HK SYNC 0xCC LSB
 8000b0e:	22cc      	movs	r2, #204	; 0xcc
 8000b10:	4b6f      	ldr	r3, [pc, #444]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b12:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    		// HK SEQ # MSB		1 SEQUENCE
 8000b14:	4b6f      	ldr	r3, [pc, #444]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b6c      	ldr	r3, [pc, #432]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b20:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             		// HK SEQ # LSB
 8000b22:	4b6c      	ldr	r3, [pc, #432]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b69      	ldr	r3, [pc, #420]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b2a:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((vsense & 0xFF00) >> 8);
 8000b2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b66      	ldr	r3, [pc, #408]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b36:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (vsense & 0xFF);
 8000b38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b64      	ldr	r3, [pc, #400]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b3e:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((vrefint & 0xFF00) >> 8);
 8000b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b42:	0a1b      	lsrs	r3, r3, #8
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b61      	ldr	r3, [pc, #388]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b4a:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (vrefint & 0xFF);
 8000b4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b5f      	ldr	r3, [pc, #380]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b52:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 8000b54:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000b58:	121b      	asrs	r3, r3, #8
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b5c      	ldr	r3, [pc, #368]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b5e:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 8000b60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b5a      	ldr	r3, [pc, #360]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b66:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 8000b68:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000b6c:	121b      	asrs	r3, r3, #8
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b57      	ldr	r3, [pc, #348]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b72:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 8000b74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b55      	ldr	r3, [pc, #340]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b7a:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000b7c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000b80:	121b      	asrs	r3, r3, #8
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b52      	ldr	r3, [pc, #328]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b86:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000b88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b50      	ldr	r3, [pc, #320]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b8e:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 8000b90:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000b94:	121b      	asrs	r3, r3, #8
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b4d      	ldr	r3, [pc, #308]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000b9a:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 8000b9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b4b      	ldr	r3, [pc, #300]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000ba2:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PF12 & 0xFF00) >> 8);
 8000ba4:	8bfb      	ldrh	r3, [r7, #30]
 8000ba6:	0a1b      	lsrs	r3, r3, #8
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b48      	ldr	r3, [pc, #288]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000bae:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PF12 & 0xFF);
 8000bb0:	8bfb      	ldrh	r3, [r7, #30]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b46      	ldr	r3, [pc, #280]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000bb6:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA7 & 0xFF00) >> 8);
 8000bb8:	8bbb      	ldrh	r3, [r7, #28]
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b43      	ldr	r3, [pc, #268]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000bc2:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA7 & 0xFF);
 8000bc4:	8bbb      	ldrh	r3, [r7, #28]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b41      	ldr	r3, [pc, #260]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000bca:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC5 & 0xFF00) >> 8);
 8000bcc:	8b7b      	ldrh	r3, [r7, #26]
 8000bce:	0a1b      	lsrs	r3, r3, #8
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b3e      	ldr	r3, [pc, #248]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000bd6:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC5 & 0xFF);
 8000bd8:	8b7b      	ldrh	r3, [r7, #26]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b3c      	ldr	r3, [pc, #240]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000bde:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PB0 & 0xFF00) >> 8);
 8000be0:	8b3b      	ldrh	r3, [r7, #24]
 8000be2:	0a1b      	lsrs	r3, r3, #8
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000bea:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PB0 & 0xFF);
 8000bec:	8b3b      	ldrh	r3, [r7, #24]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000bf2:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC0 & 0xFF00) >> 8);
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	0a1b      	lsrs	r3, r3, #8
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000bfe:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC0 & 0xFF);
 8000c00:	8afb      	ldrh	r3, [r7, #22]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c06:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC1 & 0xFF00) >> 8);
 8000c08:	8abb      	ldrh	r3, [r7, #20]
 8000c0a:	0a1b      	lsrs	r3, r3, #8
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c12:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC1 & 0xFF);
 8000c14:	8abb      	ldrh	r3, [r7, #20]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c1a:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PA2 & 0xFF00) >> 8);
 8000c1c:	8a7b      	ldrh	r3, [r7, #18]
 8000c1e:	0a1b      	lsrs	r3, r3, #8
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c26:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PA2 & 0xFF);
 8000c28:	8a7b      	ldrh	r3, [r7, #18]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c2e:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PA3 & 0xFF00) >> 8);
 8000c30:	8a3b      	ldrh	r3, [r7, #16]
 8000c32:	0a1b      	lsrs	r3, r3, #8
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c3a:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PA3 & 0xFF);
 8000c3c:	8a3b      	ldrh	r3, [r7, #16]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c42:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PA0 & 0xFF00) >> 8);
 8000c44:	89fb      	ldrh	r3, [r7, #14]
 8000c46:	0a1b      	lsrs	r3, r3, #8
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c4e:	f883 2020 	strb.w	r2, [r3, #32]
          hk_buf[33] = (PA0 & 0xFF);
 8000c52:	89fb      	ldrh	r3, [r7, #14]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          hk_buf[34] = ((PA1 & 0xFF00) >> 8);
 8000c5c:	89bb      	ldrh	r3, [r7, #12]
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c66:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          hk_buf[35] = (PA1 & 0xFF);
 8000c6a:	89bb      	ldrh	r3, [r7, #12]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c70:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          hk_buf[36] = ((PF9 & 0xFF00) >> 8);
 8000c74:	8c3b      	ldrh	r3, [r7, #32]
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          hk_buf[37] = (PF9 & 0xFF);
 8000c82:	8c3b      	ldrh	r3, [r7, #32]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25


          if (HK_ON)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x6d0>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d005      	beq.n	8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x698>
          {
           HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000c94:	2364      	movs	r3, #100	; 0x64
 8000c96:	2226      	movs	r2, #38	; 0x26
 8000c98:	490d      	ldr	r1, [pc, #52]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c9a:	4810      	ldr	r0, [pc, #64]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 8000c9c:	f00c fd74 	bl	800d788 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]
          hk_seq++;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000cb0:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000cb2:	e063      	b.n	8000d7c <HAL_TIM_OC_DelayElapsedCallback+0x774>
          hk_counter++;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 8000cbc:	6013      	str	r3, [r2, #0]
}
 8000cbe:	e05d      	b.n	8000d7c <HAL_TIM_OC_DelayElapsedCallback+0x774>
 8000cc0:	240000c0 	.word	0x240000c0
 8000cc4:	24000560 	.word	0x24000560
 8000cc8:	2400005c 	.word	0x2400005c
 8000ccc:	24000520 	.word	0x24000520
 8000cd0:	240005d0 	.word	0x240005d0
 8000cd4:	240005f6 	.word	0x240005f6
 8000cd8:	24000026 	.word	0x24000026
 8000cdc:	2400041c 	.word	0x2400041c
 8000ce0:	240005f8 	.word	0x240005f8
  else if (htim == &htim1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a27      	ldr	r2, [pc, #156]	; (8000d84 <HAL_TIM_OC_DelayElapsedCallback+0x77c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d147      	bne.n	8000d7c <HAL_TIM_OC_DelayElapsedCallback+0x774>
      if (PMT_ON)
 8000cec:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <HAL_TIM_OC_DelayElapsedCallback+0x780>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d043      	beq.n	8000d7c <HAL_TIM_OC_DelayElapsedCallback+0x774>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000cf4:	bf00      	nop
 8000cf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfa:	4824      	ldr	r0, [pc, #144]	; (8000d8c <HAL_TIM_OC_DelayElapsedCallback+0x784>)
 8000cfc:	f006 fefc 	bl	8007af8 <HAL_GPIO_ReadPin>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f7      	bne.n	8000cf6 <HAL_TIM_OC_DelayElapsedCallback+0x6ee>
  		HAL_SPI_Receive(&hspi1, (uint8_t *)spi1RxBuffer, 1, 1);
 8000d06:	2301      	movs	r3, #1
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4921      	ldr	r1, [pc, #132]	; (8000d90 <HAL_TIM_OC_DelayElapsedCallback+0x788>)
 8000d0c:	4821      	ldr	r0, [pc, #132]	; (8000d94 <HAL_TIM_OC_DelayElapsedCallback+0x78c>)
 8000d0e:	f00a ff71 	bl	800bbf4 <HAL_SPI_Receive>
  		uint8_t SPI1_LSB = ((spi1RxBuffer[0] & 0xFF00) >> 8);
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  		uint8_t SPI1_MSB = (spi1RxBuffer[1] & 0xFF);
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <HAL_TIM_OC_DelayElapsedCallback+0x788>)
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		hspi1.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <HAL_TIM_OC_DelayElapsedCallback+0x78c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <HAL_TIM_OC_DelayElapsedCallback+0x78c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d2e:	601a      	str	r2, [r3, #0]
		pmt_buf[0] = pmt_sync;
 8000d30:	22bb      	movs	r2, #187	; 0xbb
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_TIM_OC_DelayElapsedCallback+0x790>)
 8000d34:	701a      	strb	r2, [r3, #0]
		pmt_buf[1] = pmt_sync;
 8000d36:	22bb      	movs	r2, #187	; 0xbb
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_TIM_OC_DelayElapsedCallback+0x790>)
 8000d3a:	705a      	strb	r2, [r3, #1]
		pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x794>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_TIM_OC_DelayElapsedCallback+0x790>)
 8000d48:	709a      	strb	r2, [r3, #2]
		pmt_buf[3] = (pmt_seq & 0xFF);
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x794>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_TIM_OC_DelayElapsedCallback+0x790>)
 8000d52:	70da      	strb	r2, [r3, #3]
		pmt_buf[4] = SPI1_MSB;
 8000d54:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <HAL_TIM_OC_DelayElapsedCallback+0x790>)
 8000d56:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d5a:	7113      	strb	r3, [r2, #4]
		pmt_buf[5] = SPI1_LSB;
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_TIM_OC_DelayElapsedCallback+0x790>)
 8000d5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d62:	7153      	strb	r3, [r2, #5]
		pmt_seq++;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x794>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x794>)
 8000d6e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000d70:	2364      	movs	r3, #100	; 0x64
 8000d72:	2206      	movs	r2, #6
 8000d74:	4908      	ldr	r1, [pc, #32]	; (8000d98 <HAL_TIM_OC_DelayElapsedCallback+0x790>)
 8000d76:	480a      	ldr	r0, [pc, #40]	; (8000da0 <HAL_TIM_OC_DelayElapsedCallback+0x798>)
 8000d78:	f00c fd06 	bl	800d788 <HAL_UART_Transmit>
}
 8000d7c:	bf00      	nop
 8000d7e:	3740      	adds	r7, #64	; 0x40
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	24000384 	.word	0x24000384
 8000d88:	24000024 	.word	0x24000024
 8000d8c:	58020000 	.word	0x58020000
 8000d90:	240005b0 	.word	0x240005b0
 8000d94:	24000274 	.word	0x24000274
 8000d98:	240005c8 	.word	0x240005c8
 8000d9c:	240005ce 	.word	0x240005ce
 8000da0:	2400041c 	.word	0x2400041c
 8000da4:	00000000 	.word	0x00000000

08000da8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	49bb      	ldr	r1, [pc, #748]	; (80010a0 <HAL_UART_RxCpltCallback+0x2f8>)
 8000db4:	48bb      	ldr	r0, [pc, #748]	; (80010a4 <HAL_UART_RxCpltCallback+0x2fc>)
 8000db6:	f00c fd7d 	bl	800d8b4 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000dba:	4bb9      	ldr	r3, [pc, #740]	; (80010a0 <HAL_UART_RxCpltCallback+0x2f8>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	2b20      	cmp	r3, #32
 8000dc4:	f200 8164 	bhi.w	8001090 <HAL_UART_RxCpltCallback+0x2e8>
 8000dc8:	a201      	add	r2, pc, #4	; (adr r2, 8000dd0 <HAL_UART_RxCpltCallback+0x28>)
 8000dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dce:	bf00      	nop
 8000dd0:	08000f57 	.word	0x08000f57
 8000dd4:	08000f73 	.word	0x08000f73
 8000dd8:	08000f8f 	.word	0x08000f8f
 8000ddc:	08000faf 	.word	0x08000faf
 8000de0:	08000fcf 	.word	0x08000fcf
 8000de4:	08000feb 	.word	0x08000feb
 8000de8:	0800100b 	.word	0x0800100b
 8000dec:	0800102b 	.word	0x0800102b
 8000df0:	08000e71 	.word	0x08000e71
 8000df4:	08000e7f 	.word	0x08000e7f
 8000df8:	08000e63 	.word	0x08000e63
 8000dfc:	08000e55 	.word	0x08000e55
 8000e00:	08001047 	.word	0x08001047
 8000e04:	08001057 	.word	0x08001057
 8000e08:	08001067 	.word	0x08001067
 8000e0c:	08001077 	.word	0x08001077
 8000e10:	0800105f 	.word	0x0800105f
 8000e14:	0800106f 	.word	0x0800106f
 8000e18:	0800107f 	.word	0x0800107f
 8000e1c:	08000f65 	.word	0x08000f65
 8000e20:	08000f81 	.word	0x08000f81
 8000e24:	08000f9f 	.word	0x08000f9f
 8000e28:	08000fbf 	.word	0x08000fbf
 8000e2c:	08000fdd 	.word	0x08000fdd
 8000e30:	08000ffb 	.word	0x08000ffb
 8000e34:	0800101b 	.word	0x0800101b
 8000e38:	08001039 	.word	0x08001039
 8000e3c:	08000e8d 	.word	0x08000e8d
 8000e40:	08000ea5 	.word	0x08000ea5
 8000e44:	08000ebd 	.word	0x08000ebd
 8000e48:	08000ee1 	.word	0x08000ee1
 8000e4c:	08000f11 	.word	0x08000f11
 8000e50:	08000f33 	.word	0x08000f33
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000e54:	4b94      	ldr	r3, [pc, #592]	; (80010a8 <HAL_UART_RxCpltCallback+0x300>)
 8000e56:	2140      	movs	r1, #64	; 0x40
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f006 fe64 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000e60:	e116      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000e62:	4b91      	ldr	r3, [pc, #580]	; (80010a8 <HAL_UART_RxCpltCallback+0x300>)
 8000e64:	2140      	movs	r1, #64	; 0x40
 8000e66:	2200      	movs	r2, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f006 fe5d 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000e6e:	e10f      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000e70:	4b8d      	ldr	r3, [pc, #564]	; (80010a8 <HAL_UART_RxCpltCallback+0x300>)
 8000e72:	2180      	movs	r1, #128	; 0x80
 8000e74:	2201      	movs	r2, #1
 8000e76:	4618      	mov	r0, r3
 8000e78:	f006 fe56 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000e7c:	e108      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000e7e:	4b8a      	ldr	r3, [pc, #552]	; (80010a8 <HAL_UART_RxCpltCallback+0x300>)
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	2200      	movs	r2, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f006 fe4f 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000e8a:	e101      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x1B:
  {
    if (step < 7)
 8000e8c:	4b87      	ldr	r3, [pc, #540]	; (80010ac <HAL_UART_RxCpltCallback+0x304>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b06      	cmp	r3, #6
 8000e92:	f200 80f8 	bhi.w	8001086 <HAL_UART_RxCpltCallback+0x2de>
    {
      step++;
 8000e96:	4b85      	ldr	r3, [pc, #532]	; (80010ac <HAL_UART_RxCpltCallback+0x304>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b83      	ldr	r3, [pc, #524]	; (80010ac <HAL_UART_RxCpltCallback+0x304>)
 8000ea0:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000ea2:	e0f0      	b.n	8001086 <HAL_UART_RxCpltCallback+0x2de>
  }
  case 0x1C:
  {
    if (step > 0)
 8000ea4:	4b81      	ldr	r3, [pc, #516]	; (80010ac <HAL_UART_RxCpltCallback+0x304>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f000 80ee 	beq.w	800108a <HAL_UART_RxCpltCallback+0x2e2>
    {
      step--;
 8000eae:	4b7f      	ldr	r3, [pc, #508]	; (80010ac <HAL_UART_RxCpltCallback+0x304>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4b7d      	ldr	r3, [pc, #500]	; (80010ac <HAL_UART_RxCpltCallback+0x304>)
 8000eb8:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000eba:	e0e6      	b.n	800108a <HAL_UART_RxCpltCallback+0x2e2>
  }
  case 0x1D: {
	if (!auto_sweep_1) {
 8000ebc:	4b7c      	ldr	r3, [pc, #496]	; (80010b0 <HAL_UART_RxCpltCallback+0x308>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d106      	bne.n	8000ed2 <HAL_UART_RxCpltCallback+0x12a>
		auto_sweep_1 = 1;
 8000ec4:	4b7a      	ldr	r3, [pc, #488]	; (80010b0 <HAL_UART_RxCpltCallback+0x308>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
		step = 0;
 8000eca:	4b78      	ldr	r3, [pc, #480]	; (80010ac <HAL_UART_RxCpltCallback+0x304>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
	} else {
		auto_sweep_1 = 0;
		step = 0;
	}
  	break;
 8000ed0:	e0de      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
		auto_sweep_1 = 0;
 8000ed2:	4b77      	ldr	r3, [pc, #476]	; (80010b0 <HAL_UART_RxCpltCallback+0x308>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
		step = 0;
 8000ed8:	4b74      	ldr	r3, [pc, #464]	; (80010ac <HAL_UART_RxCpltCallback+0x304>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
  	break;
 8000ede:	e0d7      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
   }
  case 0x1E: {
	if (DAC_2_OUT <= 4055) {
 8000ee0:	4b74      	ldr	r3, [pc, #464]	; (80010b4 <HAL_UART_RxCpltCallback+0x30c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f640 72d7 	movw	r2, #4055	; 0xfd7
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	f200 80d0 	bhi.w	800108e <HAL_UART_RxCpltCallback+0x2e6>
		DAC_2_OUT += 40.95;
 8000eee:	4b71      	ldr	r3, [pc, #452]	; (80010b4 <HAL_UART_RxCpltCallback+0x30c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000efa:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001098 <HAL_UART_RxCpltCallback+0x2f0>
 8000efe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f02:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f06:	ee17 2a90 	vmov	r2, s15
 8000f0a:	4b6a      	ldr	r3, [pc, #424]	; (80010b4 <HAL_UART_RxCpltCallback+0x30c>)
 8000f0c:	601a      	str	r2, [r3, #0]
	}
	break;
 8000f0e:	e0be      	b.n	800108e <HAL_UART_RxCpltCallback+0x2e6>
  }
  case 0x1F: {
	  if (DAC_2_OUT >= 0) {
		  DAC_2_OUT -= 40.95;
 8000f10:	4b68      	ldr	r3, [pc, #416]	; (80010b4 <HAL_UART_RxCpltCallback+0x30c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f1c:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8001098 <HAL_UART_RxCpltCallback+0x2f0>
 8000f20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f28:	ee17 2a90 	vmov	r2, s15
 8000f2c:	4b61      	ldr	r3, [pc, #388]	; (80010b4 <HAL_UART_RxCpltCallback+0x30c>)
 8000f2e:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000f30:	e0ae      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x20: {
	  if (!auto_sweep_2) {
 8000f32:	4b61      	ldr	r3, [pc, #388]	; (80010b8 <HAL_UART_RxCpltCallback+0x310>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d106      	bne.n	8000f48 <HAL_UART_RxCpltCallback+0x1a0>
		  auto_sweep_2 = 1;
 8000f3a:	4b5f      	ldr	r3, [pc, #380]	; (80010b8 <HAL_UART_RxCpltCallback+0x310>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]
		  DAC_2_OUT = 0;
 8000f40:	4b5c      	ldr	r3, [pc, #368]	; (80010b4 <HAL_UART_RxCpltCallback+0x30c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
	  } else {
		  auto_sweep_2 = 0;
		  DAC_2_OUT = 0;
	  }
	  break;
 8000f46:	e0a3      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
		  auto_sweep_2 = 0;
 8000f48:	4b5b      	ldr	r3, [pc, #364]	; (80010b8 <HAL_UART_RxCpltCallback+0x310>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
		  DAC_2_OUT = 0;
 8000f4e:	4b59      	ldr	r3, [pc, #356]	; (80010b4 <HAL_UART_RxCpltCallback+0x30c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
	  break;
 8000f54:	e09c      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000f56:	4b59      	ldr	r3, [pc, #356]	; (80010bc <HAL_UART_RxCpltCallback+0x314>)
 8000f58:	2120      	movs	r1, #32
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f006 fde3 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000f62:	e095      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000f64:	4b55      	ldr	r3, [pc, #340]	; (80010bc <HAL_UART_RxCpltCallback+0x314>)
 8000f66:	2120      	movs	r1, #32
 8000f68:	2200      	movs	r2, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f006 fddc 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000f70:	e08e      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000f72:	4b52      	ldr	r3, [pc, #328]	; (80010bc <HAL_UART_RxCpltCallback+0x314>)
 8000f74:	2140      	movs	r1, #64	; 0x40
 8000f76:	2201      	movs	r2, #1
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 fdd5 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000f7e:	e087      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000f80:	4b4e      	ldr	r3, [pc, #312]	; (80010bc <HAL_UART_RxCpltCallback+0x314>)
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	2200      	movs	r2, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f006 fdce 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000f8c:	e080      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000f8e:	4b4c      	ldr	r3, [pc, #304]	; (80010c0 <HAL_UART_RxCpltCallback+0x318>)
 8000f90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f94:	2201      	movs	r2, #1
 8000f96:	4618      	mov	r0, r3
 8000f98:	f006 fdc6 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000f9c:	e078      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000f9e:	4b48      	ldr	r3, [pc, #288]	; (80010c0 <HAL_UART_RxCpltCallback+0x318>)
 8000fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 fdbe 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000fac:	e070      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000fae:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <HAL_UART_RxCpltCallback+0x318>)
 8000fb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f006 fdb6 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000fbc:	e068      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000fbe:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <HAL_UART_RxCpltCallback+0x318>)
 8000fc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f006 fdae 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000fcc:	e060      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000fce:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <HAL_UART_RxCpltCallback+0x318>)
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f006 fda7 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000fda:	e059      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000fdc:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <HAL_UART_RxCpltCallback+0x318>)
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f006 fda0 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000fe8:	e052      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000fea:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <HAL_UART_RxCpltCallback+0x318>)
 8000fec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f006 fd98 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8000ff8:	e04a      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <HAL_UART_RxCpltCallback+0x318>)
 8000ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001000:	2200      	movs	r2, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f006 fd90 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8001008:	e042      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_UART_RxCpltCallback+0x318>)
 800100c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001010:	2201      	movs	r2, #1
 8001012:	4618      	mov	r0, r3
 8001014:	f006 fd88 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8001018:	e03a      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 800101a:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <HAL_UART_RxCpltCallback+0x318>)
 800101c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001020:	2200      	movs	r2, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f006 fd80 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8001028:	e032      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_UART_RxCpltCallback+0x318>)
 800102c:	2140      	movs	r1, #64	; 0x40
 800102e:	2201      	movs	r2, #1
 8001030:	4618      	mov	r0, r3
 8001032:	f006 fd79 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8001036:	e02b      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_UART_RxCpltCallback+0x318>)
 800103a:	2140      	movs	r1, #64	; 0x40
 800103c:	2200      	movs	r2, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f006 fd72 	bl	8007b28 <HAL_GPIO_WritePin>
    break;
 8001044:	e024      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8001046:	f001 fd3d 	bl	8002ac4 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800104a:	2101      	movs	r1, #1
 800104c:	2001      	movs	r0, #1
 800104e:	f007 fb0f 	bl	8008670 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8001052:	f7ff fac3 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_UART_RxCpltCallback+0x31c>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
    break;
 800105c:	e018      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x10:
  {
    PMT_ON = 0;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_UART_RxCpltCallback+0x31c>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
    break;
 8001064:	e014      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_UART_RxCpltCallback+0x320>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
    break;
 800106c:	e010      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_UART_RxCpltCallback+0x320>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
    break;
 8001074:	e00c      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_UART_RxCpltCallback+0x324>)
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
    break;
 800107c:	e008      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
  }
  case 0x12:
  {
    HK_ON = 0;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_UART_RxCpltCallback+0x324>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
    break;
 8001084:	e004      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
    break;
 8001086:	bf00      	nop
 8001088:	e002      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
    break;
 800108a:	bf00      	nop
 800108c:	e000      	b.n	8001090 <HAL_UART_RxCpltCallback+0x2e8>
	break;
 800108e:	bf00      	nop
  }
  }
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	9999999a 	.word	0x9999999a
 800109c:	40447999 	.word	0x40447999
 80010a0:	240004ac 	.word	0x240004ac
 80010a4:	2400041c 	.word	0x2400041c
 80010a8:	58021400 	.word	0x58021400
 80010ac:	240005a4 	.word	0x240005a4
 80010b0:	240005a8 	.word	0x240005a8
 80010b4:	240005a0 	.word	0x240005a0
 80010b8:	240005ac 	.word	0x240005ac
 80010bc:	58020400 	.word	0x58020400
 80010c0:	58020800 	.word	0x58020800
 80010c4:	24000024 	.word	0x24000024
 80010c8:	24000025 	.word	0x24000025
 80010cc:	24000026 	.word	0x24000026

080010d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d4:	f001 fc40 	bl	8002958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d8:	f000 f87e 	bl	80011d8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010dc:	f000 f902 	bl	80012e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e0:	f000 fd90 	bl	8001c04 <MX_GPIO_Init>
  MX_DAC1_Init();
 80010e4:	f000 fb04 	bl	80016f0 <MX_DAC1_Init>
  MX_TIM1_Init();
 80010e8:	f000 fc2e 	bl	8001948 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010ec:	f000 fcbc 	bl	8001a68 <MX_TIM2_Init>
  MX_I2C1_Init();
 80010f0:	f000 fb3a 	bl	8001768 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010f4:	f000 fb78 	bl	80017e8 <MX_SPI1_Init>
  MX_DMA_Init();
 80010f8:	f000 fd5c 	bl	8001bb4 <MX_DMA_Init>
  MX_ADC1_Init();
 80010fc:	f000 f920 	bl	8001340 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001100:	f000 fd0c 	bl	8001b1c <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8001104:	f000 fa70 	bl	80015e8 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001108:	f000 fbc6 	bl	8001898 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */



  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800110c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001114:	4829      	ldr	r0, [pc, #164]	; (80011bc <main+0xec>)
 8001116:	f003 f8e9 	bl	80042ec <HAL_ADCEx_Calibration_Start>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <main+0x54>
  {
    /* Calibration Error */
    Error_Handler();
 8001120:	f000 ff08 	bl	8001f34 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8001124:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001128:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800112c:	4824      	ldr	r0, [pc, #144]	; (80011c0 <main+0xf0>)
 800112e:	f003 f8dd 	bl	80042ec <HAL_ADCEx_Calibration_Start>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <main+0x6c>
  {
	/* Calibration Error */
	Error_Handler();
 8001138:	f000 fefc 	bl	8001f34 <Error_Handler>
  }


  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 800113c:	2100      	movs	r1, #0
 800113e:	4821      	ldr	r0, [pc, #132]	; (80011c4 <main+0xf4>)
 8001140:	f00b fa06 	bl	800c550 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001144:	210c      	movs	r1, #12
 8001146:	4820      	ldr	r0, [pc, #128]	; (80011c8 <main+0xf8>)
 8001148:	f00b fa02 	bl	800c550 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800114c:	bf00      	nop
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <main+0xfc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115c:	d0f7      	beq.n	800114e <main+0x7e>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800115e:	bf00      	nop
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <main+0xfc>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800116e:	d1f7      	bne.n	8001160 <main+0x90>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <main+0x100>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <main+0x100>)
 8001178:	2210      	movs	r2, #16
 800117a:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <main+0x100>)
 800117e:	225b      	movs	r2, #91	; 0x5b
 8001180:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <main+0x100>)
 8001184:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001188:	4810      	ldr	r0, [pc, #64]	; (80011cc <main+0xfc>)
 800118a:	f00e fd11 	bl	800fbb0 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <main+0xc8>
      Error_Handler();
 8001194:	f000 fece 	bl	8001f34 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <main+0xfc>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <main+0xfc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80011a6:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 80011a8:	4808      	ldr	r0, [pc, #32]	; (80011cc <main+0xfc>)
 80011aa:	f00e fd5c 	bl	800fc66 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80011ae:	2201      	movs	r2, #1
 80011b0:	4908      	ldr	r1, [pc, #32]	; (80011d4 <main+0x104>)
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <main+0xfc>)
 80011b4:	f00c fb7e 	bl	800d8b4 <HAL_UART_Receive_IT>
 80011b8:	e7f9      	b.n	80011ae <main+0xde>
 80011ba:	bf00      	nop
 80011bc:	2400005c 	.word	0x2400005c
 80011c0:	240000c0 	.word	0x240000c0
 80011c4:	24000384 	.word	0x24000384
 80011c8:	240003d0 	.word	0x240003d0
 80011cc:	2400041c 	.word	0x2400041c
 80011d0:	24000510 	.word	0x24000510
 80011d4:	240004ac 	.word	0x240004ac

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b09c      	sub	sp, #112	; 0x70
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e2:	224c      	movs	r2, #76	; 0x4c
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00e feba 	bl	800ff60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2220      	movs	r2, #32
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00e feb4 	bl	800ff60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011f8:	2002      	movs	r0, #2
 80011fa:	f007 fa75 	bl	80086e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <SystemClock_Config+0x100>)
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	4a34      	ldr	r2, [pc, #208]	; (80012d8 <SystemClock_Config+0x100>)
 8001208:	f023 0301 	bic.w	r3, r3, #1
 800120c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <SystemClock_Config+0x100>)
 8001210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	4b30      	ldr	r3, [pc, #192]	; (80012dc <SystemClock_Config+0x104>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001220:	4a2e      	ldr	r2, [pc, #184]	; (80012dc <SystemClock_Config+0x104>)
 8001222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <SystemClock_Config+0x104>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001234:	bf00      	nop
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <SystemClock_Config+0x104>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800123e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001242:	d1f8      	bne.n	8001236 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <SystemClock_Config+0x108>)
 8001246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001248:	4a25      	ldr	r2, [pc, #148]	; (80012e0 <SystemClock_Config+0x108>)
 800124a:	f023 0303 	bic.w	r3, r3, #3
 800124e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001250:	2302      	movs	r3, #2
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001254:	2301      	movs	r3, #1
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001258:	2340      	movs	r3, #64	; 0x40
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125c:	2302      	movs	r3, #2
 800125e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001260:	2300      	movs	r3, #0
 8001262:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001268:	230c      	movs	r3, #12
 800126a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800126c:	2302      	movs	r3, #2
 800126e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001270:	2302      	movs	r3, #2
 8001272:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001274:	2302      	movs	r3, #2
 8001276:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001278:	230c      	movs	r3, #12
 800127a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800127c:	2300      	movs	r3, #0
 800127e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	4618      	mov	r0, r3
 800128a:	f007 fa67 	bl	800875c <HAL_RCC_OscConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001294:	f000 fe4e 	bl	8001f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001298:	233f      	movs	r3, #63	; 0x3f
 800129a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129c:	2303      	movs	r3, #3
 800129e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80012a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2101      	movs	r1, #1
 80012be:	4618      	mov	r0, r3
 80012c0:	f007 fe7a 	bl	8008fb8 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80012ca:	f000 fe33 	bl	8001f34 <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3770      	adds	r7, #112	; 0x70
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	58000400 	.word	0x58000400
 80012dc:	58024800 	.word	0x58024800
 80012e0:	58024400 	.word	0x58024400

080012e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0b0      	sub	sp, #192	; 0xc0
 80012e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	22bc      	movs	r2, #188	; 0xbc
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00e fe35 	bl	800ff60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012fa:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012fc:	2304      	movs	r3, #4
 80012fe:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001300:	2309      	movs	r3, #9
 8001302:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001304:	2304      	movs	r3, #4
 8001306:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001308:	2302      	movs	r3, #2
 800130a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001310:	23c0      	movs	r3, #192	; 0xc0
 8001312:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001314:	2320      	movs	r3, #32
 8001316:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001318:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4618      	mov	r0, r3
 8001328:	f008 f9d2 	bl	80096d0 <HAL_RCCEx_PeriphCLKConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8001332:	f000 fdff 	bl	8001f34 <Error_Handler>
  }
}
 8001336:	bf00      	nop
 8001338:	37c0      	adds	r7, #192	; 0xc0
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001352:	463b      	mov	r3, r7
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	615a      	str	r2, [r3, #20]
 8001362:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001364:	4b90      	ldr	r3, [pc, #576]	; (80015a8 <MX_ADC1_Init+0x268>)
 8001366:	4a91      	ldr	r2, [pc, #580]	; (80015ac <MX_ADC1_Init+0x26c>)
 8001368:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800136a:	4b8f      	ldr	r3, [pc, #572]	; (80015a8 <MX_ADC1_Init+0x268>)
 800136c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001370:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001372:	4b8d      	ldr	r3, [pc, #564]	; (80015a8 <MX_ADC1_Init+0x268>)
 8001374:	2208      	movs	r2, #8
 8001376:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001378:	4b8b      	ldr	r3, [pc, #556]	; (80015a8 <MX_ADC1_Init+0x268>)
 800137a:	2201      	movs	r2, #1
 800137c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800137e:	4b8a      	ldr	r3, [pc, #552]	; (80015a8 <MX_ADC1_Init+0x268>)
 8001380:	2204      	movs	r2, #4
 8001382:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001384:	4b88      	ldr	r3, [pc, #544]	; (80015a8 <MX_ADC1_Init+0x268>)
 8001386:	2200      	movs	r2, #0
 8001388:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800138a:	4b87      	ldr	r3, [pc, #540]	; (80015a8 <MX_ADC1_Init+0x268>)
 800138c:	2201      	movs	r2, #1
 800138e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 14;
 8001390:	4b85      	ldr	r3, [pc, #532]	; (80015a8 <MX_ADC1_Init+0x268>)
 8001392:	220e      	movs	r2, #14
 8001394:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001396:	4b84      	ldr	r3, [pc, #528]	; (80015a8 <MX_ADC1_Init+0x268>)
 8001398:	2200      	movs	r2, #0
 800139a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800139c:	4b82      	ldr	r3, [pc, #520]	; (80015a8 <MX_ADC1_Init+0x268>)
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013a2:	4b81      	ldr	r3, [pc, #516]	; (80015a8 <MX_ADC1_Init+0x268>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013a8:	4b7f      	ldr	r3, [pc, #508]	; (80015a8 <MX_ADC1_Init+0x268>)
 80013aa:	2203      	movs	r2, #3
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013ae:	4b7e      	ldr	r3, [pc, #504]	; (80015a8 <MX_ADC1_Init+0x268>)
 80013b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013b4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013b6:	4b7c      	ldr	r3, [pc, #496]	; (80015a8 <MX_ADC1_Init+0x268>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013bc:	4b7a      	ldr	r3, [pc, #488]	; (80015a8 <MX_ADC1_Init+0x268>)
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c4:	4878      	ldr	r0, [pc, #480]	; (80015a8 <MX_ADC1_Init+0x268>)
 80013c6:	f001 fdd1 	bl	8002f6c <HAL_ADC_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013d0:	f000 fdb0 	bl	8001f34 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	4872      	ldr	r0, [pc, #456]	; (80015a8 <MX_ADC1_Init+0x268>)
 80013e0:	f002 ffe8 	bl	80043b4 <HAL_ADCEx_MultiModeConfigChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80013ea:	f000 fda3 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013ee:	4b70      	ldr	r3, [pc, #448]	; (80015b0 <MX_ADC1_Init+0x270>)
 80013f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013f2:	2306      	movs	r3, #6
 80013f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80013f6:	2307      	movs	r3, #7
 80013f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80013fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001400:	2304      	movs	r3, #4
 8001402:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	4865      	ldr	r0, [pc, #404]	; (80015a8 <MX_ADC1_Init+0x268>)
 8001412:	f002 f87d 	bl	8003510 <HAL_ADC_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800141c:	f000 fd8a 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001420:	4b64      	ldr	r3, [pc, #400]	; (80015b4 <MX_ADC1_Init+0x274>)
 8001422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001424:	230c      	movs	r3, #12
 8001426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	485e      	ldr	r0, [pc, #376]	; (80015a8 <MX_ADC1_Init+0x268>)
 800142e:	f002 f86f 	bl	8003510 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001438:	f000 fd7c 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800143c:	4b5e      	ldr	r3, [pc, #376]	; (80015b8 <MX_ADC1_Init+0x278>)
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001440:	2312      	movs	r3, #18
 8001442:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001444:	463b      	mov	r3, r7
 8001446:	4619      	mov	r1, r3
 8001448:	4857      	ldr	r0, [pc, #348]	; (80015a8 <MX_ADC1_Init+0x268>)
 800144a:	f002 f861 	bl	8003510 <HAL_ADC_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001454:	f000 fd6e 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001458:	4b58      	ldr	r3, [pc, #352]	; (80015bc <MX_ADC1_Init+0x27c>)
 800145a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800145c:	2318      	movs	r3, #24
 800145e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001460:	463b      	mov	r3, r7
 8001462:	4619      	mov	r1, r3
 8001464:	4850      	ldr	r0, [pc, #320]	; (80015a8 <MX_ADC1_Init+0x268>)
 8001466:	f002 f853 	bl	8003510 <HAL_ADC_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001470:	f000 fd60 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001474:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <MX_ADC1_Init+0x280>)
 8001476:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800147c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147e:	463b      	mov	r3, r7
 8001480:	4619      	mov	r1, r3
 8001482:	4849      	ldr	r0, [pc, #292]	; (80015a8 <MX_ADC1_Init+0x268>)
 8001484:	f002 f844 	bl	8003510 <HAL_ADC_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800148e:	f000 fd51 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001492:	4b4c      	ldr	r3, [pc, #304]	; (80015c4 <MX_ADC1_Init+0x284>)
 8001494:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001496:	f44f 7383 	mov.w	r3, #262	; 0x106
 800149a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149c:	463b      	mov	r3, r7
 800149e:	4619      	mov	r1, r3
 80014a0:	4841      	ldr	r0, [pc, #260]	; (80015a8 <MX_ADC1_Init+0x268>)
 80014a2:	f002 f835 	bl	8003510 <HAL_ADC_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80014ac:	f000 fd42 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80014b0:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <MX_ADC1_Init+0x288>)
 80014b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80014b4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80014b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ba:	463b      	mov	r3, r7
 80014bc:	4619      	mov	r1, r3
 80014be:	483a      	ldr	r0, [pc, #232]	; (80015a8 <MX_ADC1_Init+0x268>)
 80014c0:	f002 f826 	bl	8003510 <HAL_ADC_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80014ca:	f000 fd33 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80014ce:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <MX_ADC1_Init+0x28c>)
 80014d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80014d2:	f44f 7389 	mov.w	r3, #274	; 0x112
 80014d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d8:	463b      	mov	r3, r7
 80014da:	4619      	mov	r1, r3
 80014dc:	4832      	ldr	r0, [pc, #200]	; (80015a8 <MX_ADC1_Init+0x268>)
 80014de:	f002 f817 	bl	8003510 <HAL_ADC_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80014e8:	f000 fd24 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014ec:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <MX_ADC1_Init+0x290>)
 80014ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80014f0:	f44f 738c 	mov.w	r3, #280	; 0x118
 80014f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	4619      	mov	r1, r3
 80014fa:	482b      	ldr	r0, [pc, #172]	; (80015a8 <MX_ADC1_Init+0x268>)
 80014fc:	f002 f808 	bl	8003510 <HAL_ADC_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001506:	f000 fd15 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800150a:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <MX_ADC1_Init+0x294>)
 800150c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800150e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001512:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	4823      	ldr	r0, [pc, #140]	; (80015a8 <MX_ADC1_Init+0x268>)
 800151a:	f001 fff9 	bl	8003510 <HAL_ADC_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001524:	f000 fd06 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <MX_ADC1_Init+0x298>)
 800152a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800152c:	f240 2306 	movw	r3, #518	; 0x206
 8001530:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001532:	463b      	mov	r3, r7
 8001534:	4619      	mov	r1, r3
 8001536:	481c      	ldr	r0, [pc, #112]	; (80015a8 <MX_ADC1_Init+0x268>)
 8001538:	f001 ffea 	bl	8003510 <HAL_ADC_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001542:	f000 fcf7 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001546:	4b25      	ldr	r3, [pc, #148]	; (80015dc <MX_ADC1_Init+0x29c>)
 8001548:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800154a:	f44f 7303 	mov.w	r3, #524	; 0x20c
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4814      	ldr	r0, [pc, #80]	; (80015a8 <MX_ADC1_Init+0x268>)
 8001556:	f001 ffdb 	bl	8003510 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 8001560:	f000 fce8 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <MX_ADC1_Init+0x2a0>)
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001568:	f240 2312 	movw	r3, #530	; 0x212
 800156c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156e:	463b      	mov	r3, r7
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_ADC1_Init+0x268>)
 8001574:	f001 ffcc 	bl	8003510 <HAL_ADC_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_ADC1_Init+0x242>
  {
    Error_Handler();
 800157e:	f000 fcd9 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_ADC1_Init+0x2a4>)
 8001584:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001586:	f44f 7306 	mov.w	r3, #536	; 0x218
 800158a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_ADC1_Init+0x268>)
 8001592:	f001 ffbd 	bl	8003510 <HAL_ADC_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_ADC1_Init+0x260>
  {
    Error_Handler();
 800159c:	f000 fcca 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	; 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2400005c 	.word	0x2400005c
 80015ac:	40022000 	.word	0x40022000
 80015b0:	08600004 	.word	0x08600004
 80015b4:	0c900008 	.word	0x0c900008
 80015b8:	10c00010 	.word	0x10c00010
 80015bc:	14f00020 	.word	0x14f00020
 80015c0:	19200040 	.word	0x19200040
 80015c4:	1d500080 	.word	0x1d500080
 80015c8:	21800100 	.word	0x21800100
 80015cc:	25b00200 	.word	0x25b00200
 80015d0:	2a000400 	.word	0x2a000400
 80015d4:	2e300800 	.word	0x2e300800
 80015d8:	3ac04000 	.word	0x3ac04000
 80015dc:	3ef08000 	.word	0x3ef08000
 80015e0:	43210000 	.word	0x43210000
 80015e4:	47520000 	.word	0x47520000

080015e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
 80015fc:	615a      	str	r2, [r3, #20]
 80015fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001600:	4b36      	ldr	r3, [pc, #216]	; (80016dc <MX_ADC3_Init+0xf4>)
 8001602:	4a37      	ldr	r2, [pc, #220]	; (80016e0 <MX_ADC3_Init+0xf8>)
 8001604:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001606:	4b35      	ldr	r3, [pc, #212]	; (80016dc <MX_ADC3_Init+0xf4>)
 8001608:	2208      	movs	r2, #8
 800160a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800160c:	4b33      	ldr	r3, [pc, #204]	; (80016dc <MX_ADC3_Init+0xf4>)
 800160e:	2201      	movs	r2, #1
 8001610:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001612:	4b32      	ldr	r3, [pc, #200]	; (80016dc <MX_ADC3_Init+0xf4>)
 8001614:	2204      	movs	r2, #4
 8001616:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001618:	4b30      	ldr	r3, [pc, #192]	; (80016dc <MX_ADC3_Init+0xf4>)
 800161a:	2200      	movs	r2, #0
 800161c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800161e:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <MX_ADC3_Init+0xf4>)
 8001620:	2201      	movs	r2, #1
 8001622:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 8001624:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <MX_ADC3_Init+0xf4>)
 8001626:	2203      	movs	r2, #3
 8001628:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <MX_ADC3_Init+0xf4>)
 800162c:	2200      	movs	r2, #0
 800162e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001630:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <MX_ADC3_Init+0xf4>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001636:	4b29      	ldr	r3, [pc, #164]	; (80016dc <MX_ADC3_Init+0xf4>)
 8001638:	2200      	movs	r2, #0
 800163a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <MX_ADC3_Init+0xf4>)
 800163e:	2203      	movs	r2, #3
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <MX_ADC3_Init+0xf4>)
 8001644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <MX_ADC3_Init+0xf4>)
 800164c:	2200      	movs	r2, #0
 800164e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <MX_ADC3_Init+0xf4>)
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001658:	4820      	ldr	r0, [pc, #128]	; (80016dc <MX_ADC3_Init+0xf4>)
 800165a:	f001 fc87 	bl	8002f6c <HAL_ADC_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001664:	f000 fc66 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <MX_ADC3_Init+0xfc>)
 800166a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800166c:	2306      	movs	r3, #6
 800166e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001670:	2307      	movs	r3, #7
 8001672:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001674:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001678:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800167a:	2304      	movs	r3, #4
 800167c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	4619      	mov	r1, r3
 800168a:	4814      	ldr	r0, [pc, #80]	; (80016dc <MX_ADC3_Init+0xf4>)
 800168c:	f001 ff40 	bl	8003510 <HAL_ADC_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001696:	f000 fc4d 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_ADC3_Init+0x100>)
 800169c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800169e:	230c      	movs	r3, #12
 80016a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	4619      	mov	r1, r3
 80016a6:	480d      	ldr	r0, [pc, #52]	; (80016dc <MX_ADC3_Init+0xf4>)
 80016a8:	f001 ff32 	bl	8003510 <HAL_ADC_ConfigChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80016b2:	f000 fc3f 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <MX_ADC3_Init+0x104>)
 80016b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80016ba:	2312      	movs	r3, #18
 80016bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	4619      	mov	r1, r3
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <MX_ADC3_Init+0xf4>)
 80016c4:	f001 ff24 	bl	8003510 <HAL_ADC_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80016ce:	f000 fc31 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	240000c0 	.word	0x240000c0
 80016e0:	58026000 	.word	0x58026000
 80016e4:	cfb80000 	.word	0xcfb80000
 80016e8:	cb840000 	.word	0xcb840000
 80016ec:	08600004 	.word	0x08600004

080016f0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2224      	movs	r2, #36	; 0x24
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00e fc2f 	bl	800ff60 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <MX_DAC1_Init+0x70>)
 8001704:	4a17      	ldr	r2, [pc, #92]	; (8001764 <MX_DAC1_Init+0x74>)
 8001706:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001708:	4815      	ldr	r0, [pc, #84]	; (8001760 <MX_DAC1_Init+0x70>)
 800170a:	f003 f840 	bl	800478e <HAL_DAC_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001714:	f000 fc0e 	bl	8001f34 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800171c:	2302      	movs	r3, #2
 800171e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001724:	2301      	movs	r3, #1
 8001726:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	4619      	mov	r1, r3
 8001732:	480b      	ldr	r0, [pc, #44]	; (8001760 <MX_DAC1_Init+0x70>)
 8001734:	f003 f8c4 	bl	80048c0 <HAL_DAC_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800173e:	f000 fbf9 	bl	8001f34 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2210      	movs	r2, #16
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_DAC1_Init+0x70>)
 800174a:	f003 f8b9 	bl	80048c0 <HAL_DAC_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001754:	f000 fbee 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	24000214 	.word	0x24000214
 8001764:	40007400 	.word	0x40007400

08001768 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_I2C1_Init+0x74>)
 800176e:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <MX_I2C1_Init+0x78>)
 8001770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_I2C1_Init+0x74>)
 8001774:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <MX_I2C1_Init+0x7c>)
 8001776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_I2C1_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <MX_I2C1_Init+0x74>)
 8001780:	2201      	movs	r2, #1
 8001782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MX_I2C1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_I2C1_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_I2C1_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_I2C1_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_I2C1_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017a2:	480e      	ldr	r0, [pc, #56]	; (80017dc <MX_I2C1_Init+0x74>)
 80017a4:	f006 f9da 	bl	8007b5c <HAL_I2C_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017ae:	f000 fbc1 	bl	8001f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4809      	ldr	r0, [pc, #36]	; (80017dc <MX_I2C1_Init+0x74>)
 80017b6:	f006 fec3 	bl	8008540 <HAL_I2CEx_ConfigAnalogFilter>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017c0:	f000 fbb8 	bl	8001f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017c4:	2100      	movs	r1, #0
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_I2C1_Init+0x74>)
 80017c8:	f006 ff05 	bl	80085d6 <HAL_I2CEx_ConfigDigitalFilter>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017d2:	f000 fbaf 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	24000228 	.word	0x24000228
 80017e0:	40005400 	.word	0x40005400
 80017e4:	20303e5d 	.word	0x20303e5d

080017e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017ec:	4b28      	ldr	r3, [pc, #160]	; (8001890 <MX_SPI1_Init+0xa8>)
 80017ee:	4a29      	ldr	r2, [pc, #164]	; (8001894 <MX_SPI1_Init+0xac>)
 80017f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <MX_SPI1_Init+0xa8>)
 80017f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017fa:	4b25      	ldr	r3, [pc, #148]	; (8001890 <MX_SPI1_Init+0xa8>)
 80017fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001800:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <MX_SPI1_Init+0xa8>)
 8001804:	220f      	movs	r2, #15
 8001806:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <MX_SPI1_Init+0xa8>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <MX_SPI1_Init+0xa8>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <MX_SPI1_Init+0xa8>)
 8001816:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800181a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <MX_SPI1_Init+0xa8>)
 800181e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001822:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <MX_SPI1_Init+0xa8>)
 8001826:	2200      	movs	r2, #0
 8001828:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <MX_SPI1_Init+0xa8>)
 800182c:	2200      	movs	r2, #0
 800182e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <MX_SPI1_Init+0xa8>)
 8001832:	2200      	movs	r2, #0
 8001834:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <MX_SPI1_Init+0xa8>)
 8001838:	2200      	movs	r2, #0
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_SPI1_Init+0xa8>)
 800183e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001842:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <MX_SPI1_Init+0xa8>)
 8001846:	2200      	movs	r2, #0
 8001848:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_SPI1_Init+0xa8>)
 800184c:	2200      	movs	r2, #0
 800184e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_SPI1_Init+0xa8>)
 8001852:	2200      	movs	r2, #0
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_SPI1_Init+0xa8>)
 8001858:	2200      	movs	r2, #0
 800185a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_SPI1_Init+0xa8>)
 800185e:	2200      	movs	r2, #0
 8001860:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_SPI1_Init+0xa8>)
 8001864:	2200      	movs	r2, #0
 8001866:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_SPI1_Init+0xa8>)
 800186a:	2200      	movs	r2, #0
 800186c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_SPI1_Init+0xa8>)
 8001870:	2200      	movs	r2, #0
 8001872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_SPI1_Init+0xa8>)
 8001876:	2200      	movs	r2, #0
 8001878:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_SPI1_Init+0xa8>)
 800187c:	f00a f8b4 	bl	800b9e8 <HAL_SPI_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001886:	f000 fb55 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	24000274 	.word	0x24000274
 8001894:	40013000 	.word	0x40013000

08001898 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <MX_SPI2_Init+0xa8>)
 800189e:	4a29      	ldr	r2, [pc, #164]	; (8001944 <MX_SPI2_Init+0xac>)
 80018a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018a2:	4b27      	ldr	r3, [pc, #156]	; (8001940 <MX_SPI2_Init+0xa8>)
 80018a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80018a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <MX_SPI2_Init+0xa8>)
 80018ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018b0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <MX_SPI2_Init+0xa8>)
 80018b4:	220f      	movs	r2, #15
 80018b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <MX_SPI2_Init+0xa8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <MX_SPI2_Init+0xa8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <MX_SPI2_Init+0xa8>)
 80018c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <MX_SPI2_Init+0xa8>)
 80018ce:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80018d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <MX_SPI2_Init+0xa8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <MX_SPI2_Init+0xa8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <MX_SPI2_Init+0xa8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <MX_SPI2_Init+0xa8>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <MX_SPI2_Init+0xa8>)
 80018ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <MX_SPI2_Init+0xa8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MX_SPI2_Init+0xa8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <MX_SPI2_Init+0xa8>)
 8001902:	2200      	movs	r2, #0
 8001904:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <MX_SPI2_Init+0xa8>)
 8001908:	2200      	movs	r2, #0
 800190a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_SPI2_Init+0xa8>)
 800190e:	2200      	movs	r2, #0
 8001910:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <MX_SPI2_Init+0xa8>)
 8001914:	2200      	movs	r2, #0
 8001916:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_SPI2_Init+0xa8>)
 800191a:	2200      	movs	r2, #0
 800191c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MX_SPI2_Init+0xa8>)
 8001920:	2200      	movs	r2, #0
 8001922:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_SPI2_Init+0xa8>)
 8001926:	2200      	movs	r2, #0
 8001928:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_SPI2_Init+0xa8>)
 800192c:	f00a f85c 	bl	800b9e8 <HAL_SPI_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001936:	f000 fafd 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	240002fc 	.word	0x240002fc
 8001944:	40003800 	.word	0x40003800

08001948 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b096      	sub	sp, #88	; 0x58
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800195a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]
 800196a:	615a      	str	r2, [r3, #20]
 800196c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	222c      	movs	r2, #44	; 0x2c
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f00e faf3 	bl	800ff60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <MX_TIM1_Init+0x118>)
 800197c:	4a39      	ldr	r2, [pc, #228]	; (8001a64 <MX_TIM1_Init+0x11c>)
 800197e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001980:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <MX_TIM1_Init+0x118>)
 8001982:	2263      	movs	r2, #99	; 0x63
 8001984:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <MX_TIM1_Init+0x118>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 800198c:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <MX_TIM1_Init+0x118>)
 800198e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001992:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <MX_TIM1_Init+0x118>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <MX_TIM1_Init+0x118>)
 800199c:	2200      	movs	r2, #0
 800199e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a0:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <MX_TIM1_Init+0x118>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019a6:	482e      	ldr	r0, [pc, #184]	; (8001a60 <MX_TIM1_Init+0x118>)
 80019a8:	f00a ff2c 	bl	800c804 <HAL_TIM_PWM_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80019b2:	f000 fabf 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019c6:	4619      	mov	r1, r3
 80019c8:	4825      	ldr	r0, [pc, #148]	; (8001a60 <MX_TIM1_Init+0x118>)
 80019ca:	f00b fd63 	bl	800d494 <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019d4:	f000 faae 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d8:	2360      	movs	r3, #96	; 0x60
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 -1;
 80019dc:	f240 13df 	movw	r3, #479	; 0x1df
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e2:	2300      	movs	r3, #0
 80019e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019e6:	2300      	movs	r3, #0
 80019e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	4818      	ldr	r0, [pc, #96]	; (8001a60 <MX_TIM1_Init+0x118>)
 8001a00:	f00b f876 	bl	800caf0 <HAL_TIM_PWM_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001a0a:	f000 fa93 	bl	8001f34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4807      	ldr	r0, [pc, #28]	; (8001a60 <MX_TIM1_Init+0x118>)
 8001a44:	f00b fdb4 	bl	800d5b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001a4e:	f000 fa71 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a52:	4803      	ldr	r0, [pc, #12]	; (8001a60 <MX_TIM1_Init+0x118>)
 8001a54:	f000 fd82 	bl	800255c <HAL_TIM_MspPostInit>

}
 8001a58:	bf00      	nop
 8001a5a:	3758      	adds	r7, #88	; 0x58
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	24000384 	.word	0x24000384
 8001a64:	40010000 	.word	0x40010000

08001a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
 8001a88:	615a      	str	r2, [r3, #20]
 8001a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <MX_TIM2_Init+0xb0>)
 8001a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 -1;
 8001a94:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <MX_TIM2_Init+0xb0>)
 8001a96:	2263      	movs	r2, #99	; 0x63
 8001a98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <MX_TIM2_Init+0xb0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000 - 1;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <MX_TIM2_Init+0xb0>)
 8001aa2:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001aa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <MX_TIM2_Init+0xb0>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <MX_TIM2_Init+0xb0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ab4:	4818      	ldr	r0, [pc, #96]	; (8001b18 <MX_TIM2_Init+0xb0>)
 8001ab6:	f00a fea5 	bl	800c804 <HAL_TIM_PWM_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001ac0:	f000 fa38 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4811      	ldr	r0, [pc, #68]	; (8001b18 <MX_TIM2_Init+0xb0>)
 8001ad4:	f00b fcde 	bl	800d494 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001ade:	f000 fa29 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae2:	2360      	movs	r3, #96	; 0x60
 8001ae4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 480 - 1;
 8001ae6:	f240 13df 	movw	r3, #479	; 0x1df
 8001aea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001af4:	463b      	mov	r3, r7
 8001af6:	220c      	movs	r2, #12
 8001af8:	4619      	mov	r1, r3
 8001afa:	4807      	ldr	r0, [pc, #28]	; (8001b18 <MX_TIM2_Init+0xb0>)
 8001afc:	f00a fff8 	bl	800caf0 <HAL_TIM_PWM_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001b06:	f000 fa15 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b0a:	4803      	ldr	r0, [pc, #12]	; (8001b18 <MX_TIM2_Init+0xb0>)
 8001b0c:	f000 fd26 	bl	800255c <HAL_TIM_MspPostInit>

}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	240003d0 	.word	0x240003d0

08001b1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b20:	4b22      	ldr	r3, [pc, #136]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b22:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <MX_USART1_UART_Init+0x94>)
 8001b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b28:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b42:	220c      	movs	r2, #12
 8001b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b64:	4811      	ldr	r0, [pc, #68]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b66:	f00b fdbf 	bl	800d6e8 <HAL_UART_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b70:	f000 f9e0 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b74:	2100      	movs	r1, #0
 8001b76:	480d      	ldr	r0, [pc, #52]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b78:	f00e f8e1 	bl	800fd3e <HAL_UARTEx_SetTxFifoThreshold>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b82:	f000 f9d7 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b86:	2100      	movs	r1, #0
 8001b88:	4808      	ldr	r0, [pc, #32]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b8a:	f00e f916 	bl	800fdba <HAL_UARTEx_SetRxFifoThreshold>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b94:	f000 f9ce 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b9a:	f00e f897 	bl	800fccc <HAL_UARTEx_DisableFifoMode>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ba4:	f000 f9c6 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2400041c 	.word	0x2400041c
 8001bb0:	40011000 	.word	0x40011000

08001bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_DMA_Init+0x4c>)
 8001bbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bc0:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <MX_DMA_Init+0x4c>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <MX_DMA_Init+0x4c>)
 8001bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	200b      	movs	r0, #11
 8001bde:	f002 fda2 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001be2:	200b      	movs	r0, #11
 8001be4:	f002 fdb9 	bl	800475a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	200c      	movs	r0, #12
 8001bee:	f002 fd9a 	bl	8004726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bf2:	200c      	movs	r0, #12
 8001bf4:	f002 fdb1 	bl	800475a <HAL_NVIC_EnableIRQ>

}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	58024400 	.word	0x58024400

08001c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	; 0x30
 8001c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	4b54      	ldr	r3, [pc, #336]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c20:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c2a:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c38:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3e:	4a4b      	ldr	r2, [pc, #300]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c40:	f043 0320 	orr.w	r3, r3, #32
 8001c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c48:	4b48      	ldr	r3, [pc, #288]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c56:	4b45      	ldr	r3, [pc, #276]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5c:	4a43      	ldr	r2, [pc, #268]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c66:	4b41      	ldr	r3, [pc, #260]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7a:	4a3c      	ldr	r2, [pc, #240]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c84:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c98:	4a34      	ldr	r2, [pc, #208]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca2:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb6:	4a2d      	ldr	r2, [pc, #180]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	21c0      	movs	r1, #192	; 0xc0
 8001cd2:	4827      	ldr	r0, [pc, #156]	; (8001d70 <MX_GPIO_Init+0x16c>)
 8001cd4:	f005 ff28 	bl	8007b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001cde:	4825      	ldr	r0, [pc, #148]	; (8001d74 <MX_GPIO_Init+0x170>)
 8001ce0:	f005 ff22 	bl	8007b28 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2160      	movs	r1, #96	; 0x60
 8001ce8:	4823      	ldr	r0, [pc, #140]	; (8001d78 <MX_GPIO_Init+0x174>)
 8001cea:	f005 ff1d 	bl	8007b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cee:	23c0      	movs	r3, #192	; 0xc0
 8001cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	4619      	mov	r1, r3
 8001d04:	481a      	ldr	r0, [pc, #104]	; (8001d70 <MX_GPIO_Init+0x16c>)
 8001d06:	f005 fd47 	bl	8007798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001d0a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001d0e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4619      	mov	r1, r3
 8001d22:	4814      	ldr	r0, [pc, #80]	; (8001d74 <MX_GPIO_Init+0x170>)
 8001d24:	f005 fd38 	bl	8007798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d28:	2360      	movs	r3, #96	; 0x60
 8001d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d38:	2307      	movs	r3, #7
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d3c:	f107 031c 	add.w	r3, r7, #28
 8001d40:	4619      	mov	r1, r3
 8001d42:	480e      	ldr	r0, [pc, #56]	; (8001d7c <MX_GPIO_Init+0x178>)
 8001d44:	f005 fd28 	bl	8007798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d48:	2360      	movs	r3, #96	; 0x60
 8001d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <MX_GPIO_Init+0x174>)
 8001d60:	f005 fd1a 	bl	8007798 <HAL_GPIO_Init>

}
 8001d64:	bf00      	nop
 8001d66:	3730      	adds	r7, #48	; 0x30
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	58021400 	.word	0x58021400
 8001d74:	58020800 	.word	0x58020800
 8001d78:	58020400 	.word	0x58020400
 8001d7c:	58020c00 	.word	0x58020c00

08001d80 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a2f      	ldr	r2, [pc, #188]	; (8001e48 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d129      	bne.n	8001de4 <HAL_ADC_ConvHalfCpltCallback+0x64>
 8001d90:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
 8001d94:	2320      	movs	r3, #32
 8001d96:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	dd1d      	ble.n	8001dda <HAL_ADC_ConvHalfCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	4413      	add	r3, r2
 8001da8:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dae:	f3bf 8f4f 	dsb	sy
}
 8001db2:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001db4:	4a26      	ldr	r2, [pc, #152]	; (8001e50 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	3320      	adds	r3, #32
 8001dc0:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b20      	subs	r3, #32
 8001dc6:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	dcf2      	bgt.n	8001db4 <HAL_ADC_ConvHalfCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001dce:	f3bf 8f4f 	dsb	sy
}
 8001dd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dd4:	f3bf 8f6f 	isb	sy
}
 8001dd8:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001dda:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001ddc:	481a      	ldr	r0, [pc, #104]	; (8001e48 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001dde:	f001 fb2b 	bl	8003438 <HAL_ADC_Stop_DMA>
	} else if (hadc == &hadc3) {
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);
	}

}
 8001de2:	e02c      	b.n	8001e3e <HAL_ADC_ConvHalfCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d128      	bne.n	8001e3e <HAL_ADC_ConvHalfCpltCallback+0xbe>
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	2320      	movs	r3, #32
 8001df2:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	dd1d      	ble.n	8001e36 <HAL_ADC_ConvHalfCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e0a:	f3bf 8f4f 	dsb	sy
}
 8001e0e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001e10:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	3320      	adds	r3, #32
 8001e1c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3b20      	subs	r3, #32
 8001e22:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	dcf2      	bgt.n	8001e10 <HAL_ADC_ConvHalfCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e2a:	f3bf 8f4f 	dsb	sy
}
 8001e2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e30:	f3bf 8f6f 	isb	sy
}
 8001e34:	bf00      	nop
}
 8001e36:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001e38:	4806      	ldr	r0, [pc, #24]	; (8001e54 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001e3a:	f001 fafd 	bl	8003438 <HAL_ADC_Stop_DMA>
}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	; 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	2400005c 	.word	0x2400005c
 8001e4c:	24000520 	.word	0x24000520
 8001e50:	e000ed00 	.word	0xe000ed00
 8001e54:	240000c0 	.word	0x240000c0

08001e58 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d129      	bne.n	8001ebc <HAL_ADC_ConvCpltCallback+0x64>
 8001e68:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6c:	2320      	movs	r3, #32
 8001e6e:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	dd1d      	ble.n	8001eb2 <HAL_ADC_ConvCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	f003 021f 	and.w	r2, r3, #31
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	4413      	add	r3, r2
 8001e80:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e86:	f3bf 8f4f 	dsb	sy
}
 8001e8a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001e8c:	4a26      	ldr	r2, [pc, #152]	; (8001f28 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	3320      	adds	r3, #32
 8001e98:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b20      	subs	r3, #32
 8001e9e:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	dcf2      	bgt.n	8001e8c <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ea6:	f3bf 8f4f 	dsb	sy
}
 8001eaa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eac:	f3bf 8f6f 	isb	sy
}
 8001eb0:	bf00      	nop
}
 8001eb2:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001eb4:	481a      	ldr	r0, [pc, #104]	; (8001f20 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001eb6:	f001 fabf 	bl	8003438 <HAL_ADC_Stop_DMA>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADC3ConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);

	}

}
 8001eba:	e02c      	b.n	8001f16 <HAL_ADC_ConvCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d128      	bne.n	8001f16 <HAL_ADC_ConvCpltCallback+0xbe>
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	2320      	movs	r3, #32
 8001eca:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	dd1d      	ble.n	8001f0e <HAL_ADC_ConvCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f003 021f 	and.w	r2, r3, #31
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4413      	add	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ee2:	f3bf 8f4f 	dsb	sy
}
 8001ee6:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001ee8:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	3320      	adds	r3, #32
 8001ef4:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3b20      	subs	r3, #32
 8001efa:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	dcf2      	bgt.n	8001ee8 <HAL_ADC_ConvCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f02:	f3bf 8f4f 	dsb	sy
}
 8001f06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f08:	f3bf 8f6f 	isb	sy
}
 8001f0c:	bf00      	nop
}
 8001f0e:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001f10:	4806      	ldr	r0, [pc, #24]	; (8001f2c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001f12:	f001 fa91 	bl	8003438 <HAL_ADC_Stop_DMA>
}
 8001f16:	bf00      	nop
 8001f18:	3728      	adds	r7, #40	; 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	2400005c 	.word	0x2400005c
 8001f24:	24000540 	.word	0x24000540
 8001f28:	e000ed00 	.word	0xe000ed00
 8001f2c:	240000c0 	.word	0x240000c0
 8001f30:	24000580 	.word	0x24000580

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
}
 8001f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <Error_Handler+0x8>
	...

08001f40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_MspInit+0x30>)
 8001f48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f4c:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <HAL_MspInit+0x30>)
 8001f4e:	f043 0302 	orr.w	r3, r3, #2
 8001f52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_MspInit+0x30>)
 8001f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	58024400 	.word	0x58024400

08001f74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08e      	sub	sp, #56	; 0x38
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a8a      	ldr	r2, [pc, #552]	; (80021bc <HAL_ADC_MspInit+0x248>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	f040 80ad 	bne.w	80020f2 <HAL_ADC_MspInit+0x17e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f98:	4b89      	ldr	r3, [pc, #548]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8001f9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f9e:	4a88      	ldr	r2, [pc, #544]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8001fa0:	f043 0320 	orr.w	r3, r3, #32
 8001fa4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fa8:	4b85      	ldr	r3, [pc, #532]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8001faa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	623b      	str	r3, [r7, #32]
 8001fb4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	4b82      	ldr	r3, [pc, #520]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbc:	4a80      	ldr	r2, [pc, #512]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc6:	4b7e      	ldr	r3, [pc, #504]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8001fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	4b7a      	ldr	r3, [pc, #488]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fda:	4a79      	ldr	r2, [pc, #484]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe4:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8001fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff2:	4b73      	ldr	r3, [pc, #460]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8001ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff8:	4a71      	ldr	r2, [pc, #452]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8001ffa:	f043 0302 	orr.w	r3, r3, #2
 8001ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002002:	4b6f      	ldr	r3, [pc, #444]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8002004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002010:	4b6b      	ldr	r3, [pc, #428]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8002012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002016:	4a6a      	ldr	r2, [pc, #424]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8002018:	f043 0320 	orr.w	r3, r3, #32
 800201c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002020:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800202e:	2333      	movs	r3, #51	; 0x33
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002032:	2303      	movs	r3, #3
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203e:	4619      	mov	r1, r3
 8002040:	4860      	ldr	r0, [pc, #384]	; (80021c4 <HAL_ADC_MspInit+0x250>)
 8002042:	f005 fba9 	bl	8007798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002046:	23cf      	movs	r3, #207	; 0xcf
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800204a:	2303      	movs	r3, #3
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002056:	4619      	mov	r1, r3
 8002058:	485b      	ldr	r0, [pc, #364]	; (80021c8 <HAL_ADC_MspInit+0x254>)
 800205a:	f005 fb9d 	bl	8007798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800205e:	2303      	movs	r3, #3
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002062:	2303      	movs	r3, #3
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206e:	4619      	mov	r1, r3
 8002070:	4856      	ldr	r0, [pc, #344]	; (80021cc <HAL_ADC_MspInit+0x258>)
 8002072:	f005 fb91 	bl	8007798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002076:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207c:	2303      	movs	r3, #3
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002088:	4619      	mov	r1, r3
 800208a:	4851      	ldr	r0, [pc, #324]	; (80021d0 <HAL_ADC_MspInit+0x25c>)
 800208c:	f005 fb84 	bl	8007798 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002090:	4b50      	ldr	r3, [pc, #320]	; (80021d4 <HAL_ADC_MspInit+0x260>)
 8002092:	4a51      	ldr	r2, [pc, #324]	; (80021d8 <HAL_ADC_MspInit+0x264>)
 8002094:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002096:	4b4f      	ldr	r3, [pc, #316]	; (80021d4 <HAL_ADC_MspInit+0x260>)
 8002098:	2209      	movs	r2, #9
 800209a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800209c:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <HAL_ADC_MspInit+0x260>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a2:	4b4c      	ldr	r3, [pc, #304]	; (80021d4 <HAL_ADC_MspInit+0x260>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020a8:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_ADC_MspInit+0x260>)
 80020aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020b0:	4b48      	ldr	r3, [pc, #288]	; (80021d4 <HAL_ADC_MspInit+0x260>)
 80020b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020b8:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <HAL_ADC_MspInit+0x260>)
 80020ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020c0:	4b44      	ldr	r3, [pc, #272]	; (80021d4 <HAL_ADC_MspInit+0x260>)
 80020c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020c8:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <HAL_ADC_MspInit+0x260>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ce:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <HAL_ADC_MspInit+0x260>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020d4:	483f      	ldr	r0, [pc, #252]	; (80021d4 <HAL_ADC_MspInit+0x260>)
 80020d6:	f002 fd23 	bl	8004b20 <HAL_DMA_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_ADC_MspInit+0x170>
    {
      Error_Handler();
 80020e0:	f7ff ff28 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a3b      	ldr	r2, [pc, #236]	; (80021d4 <HAL_ADC_MspInit+0x260>)
 80020e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80020ea:	4a3a      	ldr	r2, [pc, #232]	; (80021d4 <HAL_ADC_MspInit+0x260>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020f0:	e05f      	b.n	80021b2 <HAL_ADC_MspInit+0x23e>
  else if(hadc->Instance==ADC3)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a39      	ldr	r2, [pc, #228]	; (80021dc <HAL_ADC_MspInit+0x268>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d15a      	bne.n	80021b2 <HAL_ADC_MspInit+0x23e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020fc:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 80020fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002102:	4a2f      	ldr	r2, [pc, #188]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8002104:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002108:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800210c:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 800210e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 800211c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002120:	4a27      	ldr	r2, [pc, #156]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800212a:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <HAL_ADC_MspInit+0x24c>)
 800212c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800213e:	2303      	movs	r3, #3
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	4619      	mov	r1, r3
 800214c:	4820      	ldr	r0, [pc, #128]	; (80021d0 <HAL_ADC_MspInit+0x25c>)
 800214e:	f005 fb23 	bl	8007798 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Stream1;
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <HAL_ADC_MspInit+0x26c>)
 8002154:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <HAL_ADC_MspInit+0x270>)
 8002156:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002158:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <HAL_ADC_MspInit+0x26c>)
 800215a:	2273      	movs	r2, #115	; 0x73
 800215c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_ADC_MspInit+0x26c>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002164:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <HAL_ADC_MspInit+0x26c>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_ADC_MspInit+0x26c>)
 800216c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002170:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_ADC_MspInit+0x26c>)
 8002174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002178:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_ADC_MspInit+0x26c>)
 800217c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002180:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_ADC_MspInit+0x26c>)
 8002184:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002188:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <HAL_ADC_MspInit+0x26c>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_ADC_MspInit+0x26c>)
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002196:	4812      	ldr	r0, [pc, #72]	; (80021e0 <HAL_ADC_MspInit+0x26c>)
 8002198:	f002 fcc2 	bl	8004b20 <HAL_DMA_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_ADC_MspInit+0x232>
      Error_Handler();
 80021a2:	f7ff fec7 	bl	8001f34 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <HAL_ADC_MspInit+0x26c>)
 80021aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80021ac:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <HAL_ADC_MspInit+0x26c>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80021b2:	bf00      	nop
 80021b4:	3738      	adds	r7, #56	; 0x38
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40022000 	.word	0x40022000
 80021c0:	58024400 	.word	0x58024400
 80021c4:	58020800 	.word	0x58020800
 80021c8:	58020000 	.word	0x58020000
 80021cc:	58020400 	.word	0x58020400
 80021d0:	58021400 	.word	0x58021400
 80021d4:	24000124 	.word	0x24000124
 80021d8:	40020010 	.word	0x40020010
 80021dc:	58026000 	.word	0x58026000
 80021e0:	2400019c 	.word	0x2400019c
 80021e4:	40020028 	.word	0x40020028

080021e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a18      	ldr	r2, [pc, #96]	; (8002268 <HAL_DAC_MspInit+0x80>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d129      	bne.n	800225e <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_DAC_MspInit+0x84>)
 800220c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002210:	4a16      	ldr	r2, [pc, #88]	; (800226c <HAL_DAC_MspInit+0x84>)
 8002212:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002216:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_DAC_MspInit+0x84>)
 800221c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_DAC_MspInit+0x84>)
 800222a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222e:	4a0f      	ldr	r2, [pc, #60]	; (800226c <HAL_DAC_MspInit+0x84>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_DAC_MspInit+0x84>)
 800223a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002246:	2330      	movs	r3, #48	; 0x30
 8002248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800224a:	2303      	movs	r3, #3
 800224c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	4805      	ldr	r0, [pc, #20]	; (8002270 <HAL_DAC_MspInit+0x88>)
 800225a:	f005 fa9d 	bl	8007798 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800225e:	bf00      	nop
 8002260:	3728      	adds	r7, #40	; 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40007400 	.word	0x40007400
 800226c:	58024400 	.word	0x58024400
 8002270:	58020000 	.word	0x58020000

08002274 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0b8      	sub	sp, #224	; 0xe0
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	22bc      	movs	r2, #188	; 0xbc
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f00d fe63 	bl	800ff60 <memset>
  if(hi2c->Instance==I2C1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a25      	ldr	r2, [pc, #148]	; (8002334 <HAL_I2C_MspInit+0xc0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d142      	bne.n	800232a <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022a4:	2308      	movs	r3, #8
 80022a6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ae:	f107 0310 	add.w	r3, r7, #16
 80022b2:	4618      	mov	r0, r3
 80022b4:	f007 fa0c 	bl	80096d0 <HAL_RCCEx_PeriphCLKConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80022be:	f7ff fe39 	bl	8001f34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_I2C_MspInit+0xc4>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c8:	4a1b      	ldr	r2, [pc, #108]	; (8002338 <HAL_I2C_MspInit+0xc4>)
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_I2C_MspInit+0xc4>)
 80022d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e8:	2312      	movs	r3, #18
 80022ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022fa:	2304      	movs	r3, #4
 80022fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002300:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002304:	4619      	mov	r1, r3
 8002306:	480d      	ldr	r0, [pc, #52]	; (800233c <HAL_I2C_MspInit+0xc8>)
 8002308:	f005 fa46 	bl	8007798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_I2C_MspInit+0xc4>)
 800230e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_I2C_MspInit+0xc4>)
 8002314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002318:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_I2C_MspInit+0xc4>)
 800231e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800232a:	bf00      	nop
 800232c:	37e0      	adds	r7, #224	; 0xe0
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40005400 	.word	0x40005400
 8002338:	58024400 	.word	0x58024400
 800233c:	58020400 	.word	0x58020400

08002340 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0ba      	sub	sp, #232	; 0xe8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002358:	f107 0318 	add.w	r3, r7, #24
 800235c:	22bc      	movs	r2, #188	; 0xbc
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f00d fdfd 	bl	800ff60 <memset>
  if(hspi->Instance==SPI1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a49      	ldr	r2, [pc, #292]	; (8002490 <HAL_SPI_MspInit+0x150>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d142      	bne.n	80023f6 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002374:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002376:	2300      	movs	r3, #0
 8002378:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800237a:	f107 0318 	add.w	r3, r7, #24
 800237e:	4618      	mov	r0, r3
 8002380:	f007 f9a6 	bl	80096d0 <HAL_RCCEx_PeriphCLKConfig>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800238a:	f7ff fdd3 	bl	8001f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800238e:	4b41      	ldr	r3, [pc, #260]	; (8002494 <HAL_SPI_MspInit+0x154>)
 8002390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002394:	4a3f      	ldr	r2, [pc, #252]	; (8002494 <HAL_SPI_MspInit+0x154>)
 8002396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800239a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <HAL_SPI_MspInit+0x154>)
 80023a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ac:	4b39      	ldr	r3, [pc, #228]	; (8002494 <HAL_SPI_MspInit+0x154>)
 80023ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b2:	4a38      	ldr	r2, [pc, #224]	; (8002494 <HAL_SPI_MspInit+0x154>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023bc:	4b35      	ldr	r3, [pc, #212]	; (8002494 <HAL_SPI_MspInit+0x154>)
 80023be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80023ca:	2318      	movs	r3, #24
 80023cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023e2:	2305      	movs	r3, #5
 80023e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023ec:	4619      	mov	r1, r3
 80023ee:	482a      	ldr	r0, [pc, #168]	; (8002498 <HAL_SPI_MspInit+0x158>)
 80023f0:	f005 f9d2 	bl	8007798 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023f4:	e047      	b.n	8002486 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a28      	ldr	r2, [pc, #160]	; (800249c <HAL_SPI_MspInit+0x15c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d142      	bne.n	8002486 <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002404:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002406:	2300      	movs	r3, #0
 8002408:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800240a:	f107 0318 	add.w	r3, r7, #24
 800240e:	4618      	mov	r0, r3
 8002410:	f007 f95e 	bl	80096d0 <HAL_RCCEx_PeriphCLKConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_SPI_MspInit+0xde>
      Error_Handler();
 800241a:	f7ff fd8b 	bl	8001f34 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_SPI_MspInit+0x154>)
 8002420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002424:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <HAL_SPI_MspInit+0x154>)
 8002426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800242a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_SPI_MspInit+0x154>)
 8002430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <HAL_SPI_MspInit+0x154>)
 800243e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002442:	4a14      	ldr	r2, [pc, #80]	; (8002494 <HAL_SPI_MspInit+0x154>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_SPI_MspInit+0x154>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800245a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800245e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002474:	2305      	movs	r3, #5
 8002476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800247e:	4619      	mov	r1, r3
 8002480:	4805      	ldr	r0, [pc, #20]	; (8002498 <HAL_SPI_MspInit+0x158>)
 8002482:	f005 f989 	bl	8007798 <HAL_GPIO_Init>
}
 8002486:	bf00      	nop
 8002488:	37e8      	adds	r7, #232	; 0xe8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40013000 	.word	0x40013000
 8002494:	58024400 	.word	0x58024400
 8002498:	58020400 	.word	0x58020400
 800249c:	40003800 	.word	0x40003800

080024a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a29      	ldr	r2, [pc, #164]	; (8002554 <HAL_TIM_PWM_MspInit+0xb4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d12f      	bne.n	8002512 <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024b2:	4b29      	ldr	r3, [pc, #164]	; (8002558 <HAL_TIM_PWM_MspInit+0xb8>)
 80024b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024b8:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_TIM_PWM_MspInit+0xb8>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_TIM_PWM_MspInit+0xb8>)
 80024c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	2018      	movs	r0, #24
 80024d6:	f002 f926 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80024da:	2018      	movs	r0, #24
 80024dc:	f002 f93d 	bl	800475a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2100      	movs	r1, #0
 80024e4:	2019      	movs	r0, #25
 80024e6:	f002 f91e 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80024ea:	2019      	movs	r0, #25
 80024ec:	f002 f935 	bl	800475a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80024f0:	2200      	movs	r2, #0
 80024f2:	2100      	movs	r1, #0
 80024f4:	201a      	movs	r0, #26
 80024f6:	f002 f916 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80024fa:	201a      	movs	r0, #26
 80024fc:	f002 f92d 	bl	800475a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	2100      	movs	r1, #0
 8002504:	201b      	movs	r0, #27
 8002506:	f002 f90e 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800250a:	201b      	movs	r0, #27
 800250c:	f002 f925 	bl	800475a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002510:	e01b      	b.n	800254a <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251a:	d116      	bne.n	800254a <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_TIM_PWM_MspInit+0xb8>)
 800251e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002522:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <HAL_TIM_PWM_MspInit+0xb8>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_TIM_PWM_MspInit+0xb8>)
 800252e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	201c      	movs	r0, #28
 8002540:	f002 f8f1 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002544:	201c      	movs	r0, #28
 8002546:	f002 f908 	bl	800475a <HAL_NVIC_EnableIRQ>
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40010000 	.word	0x40010000
 8002558:	58024400 	.word	0x58024400

0800255c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a26      	ldr	r2, [pc, #152]	; (8002614 <HAL_TIM_MspPostInit+0xb8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d120      	bne.n	80025c0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	4b26      	ldr	r3, [pc, #152]	; (8002618 <HAL_TIM_MspPostInit+0xbc>)
 8002580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002584:	4a24      	ldr	r2, [pc, #144]	; (8002618 <HAL_TIM_MspPostInit+0xbc>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <HAL_TIM_MspPostInit+0xbc>)
 8002590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800259c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	4818      	ldr	r0, [pc, #96]	; (800261c <HAL_TIM_MspPostInit+0xc0>)
 80025ba:	f005 f8ed 	bl	8007798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025be:	e024      	b.n	800260a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c8:	d11f      	bne.n	800260a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ca:	4b13      	ldr	r3, [pc, #76]	; (8002618 <HAL_TIM_MspPostInit+0xbc>)
 80025cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d0:	4a11      	ldr	r2, [pc, #68]	; (8002618 <HAL_TIM_MspPostInit+0xbc>)
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_TIM_MspPostInit+0xbc>)
 80025dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f6:	2300      	movs	r3, #0
 80025f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025fa:	2301      	movs	r3, #1
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f107 0314 	add.w	r3, r7, #20
 8002602:	4619      	mov	r1, r3
 8002604:	4806      	ldr	r0, [pc, #24]	; (8002620 <HAL_TIM_MspPostInit+0xc4>)
 8002606:	f005 f8c7 	bl	8007798 <HAL_GPIO_Init>
}
 800260a:	bf00      	nop
 800260c:	3728      	adds	r7, #40	; 0x28
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40010000 	.word	0x40010000
 8002618:	58024400 	.word	0x58024400
 800261c:	58020000 	.word	0x58020000
 8002620:	58020400 	.word	0x58020400

08002624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b0b8      	sub	sp, #224	; 0xe0
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	22bc      	movs	r2, #188	; 0xbc
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f00d fc8b 	bl	800ff60 <memset>
  if(huart->Instance==USART1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a29      	ldr	r2, [pc, #164]	; (80026f4 <HAL_UART_MspInit+0xd0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d14a      	bne.n	80026ea <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002654:	2301      	movs	r3, #1
 8002656:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800265e:	f107 0310 	add.w	r3, r7, #16
 8002662:	4618      	mov	r0, r3
 8002664:	f007 f834 	bl	80096d0 <HAL_RCCEx_PeriphCLKConfig>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800266e:	f7ff fc61 	bl	8001f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002672:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <HAL_UART_MspInit+0xd4>)
 8002674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002678:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_UART_MspInit+0xd4>)
 800267a:	f043 0310 	orr.w	r3, r3, #16
 800267e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_UART_MspInit+0xd4>)
 8002684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_UART_MspInit+0xd4>)
 8002692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002696:	4a18      	ldr	r2, [pc, #96]	; (80026f8 <HAL_UART_MspInit+0xd4>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026a0:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_UART_MspInit+0xd4>)
 80026a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026c8:	2307      	movs	r3, #7
 80026ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026d2:	4619      	mov	r1, r3
 80026d4:	4809      	ldr	r0, [pc, #36]	; (80026fc <HAL_UART_MspInit+0xd8>)
 80026d6:	f005 f85f 	bl	8007798 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	2025      	movs	r0, #37	; 0x25
 80026e0:	f002 f821 	bl	8004726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026e4:	2025      	movs	r0, #37	; 0x25
 80026e6:	f002 f838 	bl	800475a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026ea:	bf00      	nop
 80026ec:	37e0      	adds	r7, #224	; 0xe0
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40011000 	.word	0x40011000
 80026f8:	58024400 	.word	0x58024400
 80026fc:	58020000 	.word	0x58020000

08002700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002704:	e7fe      	b.n	8002704 <NMI_Handler+0x4>

08002706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270a:	e7fe      	b.n	800270a <HardFault_Handler+0x4>

0800270c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002710:	e7fe      	b.n	8002710 <MemManage_Handler+0x4>

08002712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002716:	e7fe      	b.n	8002716 <BusFault_Handler+0x4>

08002718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800271c:	e7fe      	b.n	800271c <UsageFault_Handler+0x4>

0800271e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800274c:	f000 f976 	bl	8002a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <DMA1_Stream0_IRQHandler+0x10>)
 800275a:	f003 fd0b 	bl	8006174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	24000124 	.word	0x24000124

08002768 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <DMA1_Stream1_IRQHandler+0x10>)
 800276e:	f003 fd01 	bl	8006174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	2400019c 	.word	0x2400019c

0800277c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <TIM1_BRK_IRQHandler+0x10>)
 8002782:	f00a f896 	bl	800c8b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	24000384 	.word	0x24000384

08002790 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <TIM1_UP_IRQHandler+0x10>)
 8002796:	f00a f88c 	bl	800c8b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	24000384 	.word	0x24000384

080027a4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80027aa:	f00a f882 	bl	800c8b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	24000384 	.word	0x24000384

080027b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <TIM1_CC_IRQHandler+0x10>)
 80027be:	f00a f878 	bl	800c8b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	24000384 	.word	0x24000384

080027cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <TIM2_IRQHandler+0x10>)
 80027d2:	f00a f86e 	bl	800c8b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	240003d0 	.word	0x240003d0

080027e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <USART1_IRQHandler+0x10>)
 80027e6:	f00b f8bb 	bl	800d960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2400041c 	.word	0x2400041c

080027f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027f8:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <SystemInit+0xe4>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	4a36      	ldr	r2, [pc, #216]	; (80028d8 <SystemInit+0xe4>)
 8002800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002808:	4b34      	ldr	r3, [pc, #208]	; (80028dc <SystemInit+0xe8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	2b06      	cmp	r3, #6
 8002812:	d807      	bhi.n	8002824 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002814:	4b31      	ldr	r3, [pc, #196]	; (80028dc <SystemInit+0xe8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 030f 	bic.w	r3, r3, #15
 800281c:	4a2f      	ldr	r2, [pc, #188]	; (80028dc <SystemInit+0xe8>)
 800281e:	f043 0307 	orr.w	r3, r3, #7
 8002822:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002824:	4b2e      	ldr	r3, [pc, #184]	; (80028e0 <SystemInit+0xec>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a2d      	ldr	r2, [pc, #180]	; (80028e0 <SystemInit+0xec>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <SystemInit+0xec>)
 8002832:	2200      	movs	r2, #0
 8002834:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <SystemInit+0xec>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4929      	ldr	r1, [pc, #164]	; (80028e0 <SystemInit+0xec>)
 800283c:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <SystemInit+0xf0>)
 800283e:	4013      	ands	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002842:	4b26      	ldr	r3, [pc, #152]	; (80028dc <SystemInit+0xe8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d007      	beq.n	800285e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800284e:	4b23      	ldr	r3, [pc, #140]	; (80028dc <SystemInit+0xe8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 030f 	bic.w	r3, r3, #15
 8002856:	4a21      	ldr	r2, [pc, #132]	; (80028dc <SystemInit+0xe8>)
 8002858:	f043 0307 	orr.w	r3, r3, #7
 800285c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <SystemInit+0xec>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002864:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <SystemInit+0xec>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <SystemInit+0xec>)
 800286c:	2200      	movs	r2, #0
 800286e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <SystemInit+0xec>)
 8002872:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <SystemInit+0xf4>)
 8002874:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <SystemInit+0xec>)
 8002878:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <SystemInit+0xf8>)
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <SystemInit+0xec>)
 800287e:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <SystemInit+0xfc>)
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002882:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <SystemInit+0xec>)
 8002884:	2200      	movs	r2, #0
 8002886:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <SystemInit+0xec>)
 800288a:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <SystemInit+0xfc>)
 800288c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <SystemInit+0xec>)
 8002890:	2200      	movs	r2, #0
 8002892:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <SystemInit+0xec>)
 8002896:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <SystemInit+0xfc>)
 8002898:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <SystemInit+0xec>)
 800289c:	2200      	movs	r2, #0
 800289e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <SystemInit+0xec>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <SystemInit+0xec>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <SystemInit+0xec>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <SystemInit+0x100>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <SystemInit+0x104>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028be:	d202      	bcs.n	80028c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <SystemInit+0x108>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <SystemInit+0x10c>)
 80028c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80028cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00
 80028dc:	52002000 	.word	0x52002000
 80028e0:	58024400 	.word	0x58024400
 80028e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80028e8:	02020200 	.word	0x02020200
 80028ec:	01ff0000 	.word	0x01ff0000
 80028f0:	01010280 	.word	0x01010280
 80028f4:	5c001000 	.word	0x5c001000
 80028f8:	ffff0000 	.word	0xffff0000
 80028fc:	51008108 	.word	0x51008108
 8002900:	52004000 	.word	0x52004000

08002904 <Reset_Handler>:
 8002904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800293c <LoopFillZerobss+0xe>
 8002908:	f7ff ff74 	bl	80027f4 <SystemInit>
 800290c:	480c      	ldr	r0, [pc, #48]	; (8002940 <LoopFillZerobss+0x12>)
 800290e:	490d      	ldr	r1, [pc, #52]	; (8002944 <LoopFillZerobss+0x16>)
 8002910:	4a0d      	ldr	r2, [pc, #52]	; (8002948 <LoopFillZerobss+0x1a>)
 8002912:	2300      	movs	r3, #0
 8002914:	e002      	b.n	800291c <LoopCopyDataInit>

08002916 <CopyDataInit>:
 8002916:	58d4      	ldr	r4, [r2, r3]
 8002918:	50c4      	str	r4, [r0, r3]
 800291a:	3304      	adds	r3, #4

0800291c <LoopCopyDataInit>:
 800291c:	18c4      	adds	r4, r0, r3
 800291e:	428c      	cmp	r4, r1
 8002920:	d3f9      	bcc.n	8002916 <CopyDataInit>
 8002922:	4a0a      	ldr	r2, [pc, #40]	; (800294c <LoopFillZerobss+0x1e>)
 8002924:	4c0a      	ldr	r4, [pc, #40]	; (8002950 <LoopFillZerobss+0x22>)
 8002926:	2300      	movs	r3, #0
 8002928:	e001      	b.n	800292e <LoopFillZerobss>

0800292a <FillZerobss>:
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	3204      	adds	r2, #4

0800292e <LoopFillZerobss>:
 800292e:	42a2      	cmp	r2, r4
 8002930:	d3fb      	bcc.n	800292a <FillZerobss>
 8002932:	f00d faf1 	bl	800ff18 <__libc_init_array>
 8002936:	f7fe fbcb 	bl	80010d0 <main>
 800293a:	4770      	bx	lr
 800293c:	24080000 	.word	0x24080000
 8002940:	24000000 	.word	0x24000000
 8002944:	24000038 	.word	0x24000038
 8002948:	0800fff0 	.word	0x0800fff0
 800294c:	24000040 	.word	0x24000040
 8002950:	24000600 	.word	0x24000600

08002954 <ADC3_IRQHandler>:
 8002954:	e7fe      	b.n	8002954 <ADC3_IRQHandler>
	...

08002958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295e:	2003      	movs	r0, #3
 8002960:	f001 fed6 	bl	8004710 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002964:	f006 fcde 	bl	8009324 <HAL_RCC_GetSysClockFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_Init+0x68>)
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	4913      	ldr	r1, [pc, #76]	; (80029c4 <HAL_Init+0x6c>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
 8002980:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <HAL_Init+0x68>)
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	4a0e      	ldr	r2, [pc, #56]	; (80029c4 <HAL_Init+0x6c>)
 800298c:	5cd3      	ldrb	r3, [r2, r3]
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
 8002998:	4a0b      	ldr	r2, [pc, #44]	; (80029c8 <HAL_Init+0x70>)
 800299a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800299c:	4a0b      	ldr	r2, [pc, #44]	; (80029cc <HAL_Init+0x74>)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029a2:	200f      	movs	r0, #15
 80029a4:	f000 f814 	bl	80029d0 <HAL_InitTick>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e002      	b.n	80029b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029b2:	f7ff fac5 	bl	8001f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	58024400 	.word	0x58024400
 80029c4:	0800ffa0 	.word	0x0800ffa0
 80029c8:	2400002c 	.word	0x2400002c
 80029cc:	24000028 	.word	0x24000028

080029d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_InitTick+0x60>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e021      	b.n	8002a28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_InitTick+0x64>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_InitTick+0x60>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f001 febb 	bl	8004776 <HAL_SYSTICK_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00e      	b.n	8002a28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b0f      	cmp	r3, #15
 8002a0e:	d80a      	bhi.n	8002a26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a10:	2200      	movs	r2, #0
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a18:	f001 fe85 	bl	8004726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a1c:	4a06      	ldr	r2, [pc, #24]	; (8002a38 <HAL_InitTick+0x68>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	24000034 	.word	0x24000034
 8002a34:	24000028 	.word	0x24000028
 8002a38:	24000030 	.word	0x24000030

08002a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_IncTick+0x20>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_IncTick+0x24>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <HAL_IncTick+0x24>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	24000034 	.word	0x24000034
 8002a60:	240005fc 	.word	0x240005fc

08002a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return uwTick;
 8002a68:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_GetTick+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	240005fc 	.word	0x240005fc

08002a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff ffee 	bl	8002a64 <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a94:	d005      	beq.n	8002aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_Delay+0x44>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aa2:	bf00      	nop
 8002aa4:	f7ff ffde 	bl	8002a64 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d8f7      	bhi.n	8002aa4 <HAL_Delay+0x28>
  {
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	24000034 	.word	0x24000034

08002ac4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_SuspendTick+0x1c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <HAL_SuspendTick+0x1c>)
 8002ace:	f023 0302 	bic.w	r3, r3, #2
 8002ad2:	6013      	str	r3, [r2, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e000e010 	.word	0xe000e010

08002ae4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_GetREVID+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0c1b      	lsrs	r3, r3, #16
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	5c001000 	.word	0x5c001000

08002afc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	609a      	str	r2, [r3, #8]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3360      	adds	r3, #96	; 0x60
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	430b      	orrs	r3, r1
 8002b92:	431a      	orrs	r2, r3
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b98:	bf00      	nop
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	611a      	str	r2, [r3, #16]
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b087      	sub	sp, #28
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3360      	adds	r3, #96	; 0x60
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	601a      	str	r2, [r3, #0]
  }
}
 8002c00:	bf00      	nop
 8002c02:	371c      	adds	r7, #28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b087      	sub	sp, #28
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3330      	adds	r3, #48	; 0x30
 8002c42:	461a      	mov	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	4413      	add	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	211f      	movs	r1, #31
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	401a      	ands	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0e9b      	lsrs	r3, r3, #26
 8002c6a:	f003 011f 	and.w	r1, r3, #31
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c7e:	bf00      	nop
 8002c80:	371c      	adds	r7, #28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f023 0203 	bic.w	r2, r3, #3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3314      	adds	r3, #20
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	0e5b      	lsrs	r3, r3, #25
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	4413      	add	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	0d1b      	lsrs	r3, r3, #20
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	2107      	movs	r1, #7
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	0d1b      	lsrs	r3, r3, #20
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cfa:	bf00      	nop
 8002cfc:	371c      	adds	r7, #28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d20:	43db      	mvns	r3, r3
 8002d22:	401a      	ands	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f003 0318 	and.w	r3, r3, #24
 8002d2a:	4908      	ldr	r1, [pc, #32]	; (8002d4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d2c:	40d9      	lsrs	r1, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	400b      	ands	r3, r1
 8002d32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d36:	431a      	orrs	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	000fffff 	.word	0x000fffff

08002d50 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6093      	str	r3, [r2, #8]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	5fffffc0 	.word	0x5fffffc0

08002d90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002da4:	d101      	bne.n	8002daa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <LL_ADC_EnableInternalRegulator+0x24>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	6fffffc0 	.word	0x6fffffc0

08002de0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002df4:	d101      	bne.n	8002dfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <LL_ADC_Enable+0x24>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	f043 0201 	orr.w	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	7fffffc0 	.word	0x7fffffc0

08002e30 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <LL_ADC_Disable+0x24>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	f043 0202 	orr.w	r2, r3, #2
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	7fffffc0 	.word	0x7fffffc0

08002e58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <LL_ADC_IsEnabled+0x18>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <LL_ADC_IsEnabled+0x1a>
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d101      	bne.n	8002e96 <LL_ADC_IsDisableOngoing+0x18>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <LL_ADC_IsDisableOngoing+0x1a>
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <LL_ADC_REG_StartConversion+0x24>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	f043 0204 	orr.w	r2, r3, #4
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	7fffffc0 	.word	0x7fffffc0

08002ecc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <LL_ADC_REG_StopConversion+0x24>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	f043 0210 	orr.w	r2, r3, #16
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	7fffffc0 	.word	0x7fffffc0

08002ef4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d101      	bne.n	8002f0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <LL_ADC_INJ_StopConversion+0x24>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	f043 0220 	orr.w	r2, r3, #32
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	7fffffc0 	.word	0x7fffffc0

08002f44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d101      	bne.n	8002f5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e18f      	b.n	80032a6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d109      	bne.n	8002fa8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7fe ffed 	bl	8001f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff feef 	bl	8002d90 <LL_ADC_IsDeepPowerDownEnabled>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d004      	beq.n	8002fc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fed5 	bl	8002d6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff0a 	bl	8002de0 <LL_ADC_IsInternalRegulatorEnabled>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d114      	bne.n	8002ffc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff feee 	bl	8002db8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fdc:	4b87      	ldr	r3, [pc, #540]	; (80031fc <HAL_ADC_Init+0x290>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	4a87      	ldr	r2, [pc, #540]	; (8003200 <HAL_ADC_Init+0x294>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	3301      	adds	r3, #1
 8002fec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fee:	e002      	b.n	8002ff6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f9      	bne.n	8002ff0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff feed 	bl	8002de0 <LL_ADC_IsInternalRegulatorEnabled>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10d      	bne.n	8003028 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	f043 0210 	orr.w	r2, r3, #16
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f043 0201 	orr.w	r2, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff61 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 8003032:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b00      	cmp	r3, #0
 800303e:	f040 8129 	bne.w	8003294 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f040 8125 	bne.w	8003294 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003052:	f043 0202 	orr.w	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fefa 	bl	8002e58 <LL_ADC_IsEnabled>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d136      	bne.n	80030d8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a65      	ldr	r2, [pc, #404]	; (8003204 <HAL_ADC_Init+0x298>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <HAL_ADC_Init+0x112>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a63      	ldr	r2, [pc, #396]	; (8003208 <HAL_ADC_Init+0x29c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10e      	bne.n	800309c <HAL_ADC_Init+0x130>
 800307e:	4861      	ldr	r0, [pc, #388]	; (8003204 <HAL_ADC_Init+0x298>)
 8003080:	f7ff feea 	bl	8002e58 <LL_ADC_IsEnabled>
 8003084:	4604      	mov	r4, r0
 8003086:	4860      	ldr	r0, [pc, #384]	; (8003208 <HAL_ADC_Init+0x29c>)
 8003088:	f7ff fee6 	bl	8002e58 <LL_ADC_IsEnabled>
 800308c:	4603      	mov	r3, r0
 800308e:	4323      	orrs	r3, r4
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e008      	b.n	80030ae <HAL_ADC_Init+0x142>
 800309c:	485b      	ldr	r0, [pc, #364]	; (800320c <HAL_ADC_Init+0x2a0>)
 800309e:	f7ff fedb 	bl	8002e58 <LL_ADC_IsEnabled>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d012      	beq.n	80030d8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a53      	ldr	r2, [pc, #332]	; (8003204 <HAL_ADC_Init+0x298>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_ADC_Init+0x15a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a51      	ldr	r2, [pc, #324]	; (8003208 <HAL_ADC_Init+0x29c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_Init+0x15e>
 80030c6:	4a52      	ldr	r2, [pc, #328]	; (8003210 <HAL_ADC_Init+0x2a4>)
 80030c8:	e000      	b.n	80030cc <HAL_ADC_Init+0x160>
 80030ca:	4a52      	ldr	r2, [pc, #328]	; (8003214 <HAL_ADC_Init+0x2a8>)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4619      	mov	r1, r3
 80030d2:	4610      	mov	r0, r2
 80030d4:	f7ff fd12 	bl	8002afc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80030d8:	f7ff fd04 	bl	8002ae4 <HAL_GetREVID>
 80030dc:	4603      	mov	r3, r0
 80030de:	f241 0203 	movw	r2, #4099	; 0x1003
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d914      	bls.n	8003110 <HAL_ADC_Init+0x1a4>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d110      	bne.n	8003110 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	7d5b      	ldrb	r3, [r3, #21]
 80030f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	7f1b      	ldrb	r3, [r3, #28]
 8003104:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003106:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003108:	f043 030c 	orr.w	r3, r3, #12
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	e00d      	b.n	800312c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	7d5b      	ldrb	r3, [r3, #21]
 8003114:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800311a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003120:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	7f1b      	ldrb	r3, [r3, #28]
 8003126:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7f1b      	ldrb	r3, [r3, #28]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d106      	bne.n	8003142 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	3b01      	subs	r3, #1
 800313a:	045b      	lsls	r3, r3, #17
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	4b2c      	ldr	r3, [pc, #176]	; (8003218 <HAL_ADC_Init+0x2ac>)
 8003166:	4013      	ands	r3, r2
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	69b9      	ldr	r1, [r7, #24]
 800316e:	430b      	orrs	r3, r1
 8003170:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff febc 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 800317c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fede 	bl	8002f44 <LL_ADC_INJ_IsConversionOngoing>
 8003188:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d15f      	bne.n	8003250 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d15c      	bne.n	8003250 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	7d1b      	ldrb	r3, [r3, #20]
 800319a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <HAL_ADC_Init+0x2b0>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	69b9      	ldr	r1, [r7, #24]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d130      	bne.n	8003224 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	4b14      	ldr	r3, [pc, #80]	; (8003220 <HAL_ADC_Init+0x2b4>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031d6:	3a01      	subs	r2, #1
 80031d8:	0411      	lsls	r1, r2, #16
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031de:	4311      	orrs	r1, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031e4:	4311      	orrs	r1, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031ea:	430a      	orrs	r2, r1
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	611a      	str	r2, [r3, #16]
 80031f8:	e01c      	b.n	8003234 <HAL_ADC_Init+0x2c8>
 80031fa:	bf00      	nop
 80031fc:	24000028 	.word	0x24000028
 8003200:	053e2d63 	.word	0x053e2d63
 8003204:	40022000 	.word	0x40022000
 8003208:	40022100 	.word	0x40022100
 800320c:	58026000 	.word	0x58026000
 8003210:	40022300 	.word	0x40022300
 8003214:	58026300 	.word	0x58026300
 8003218:	fff0c003 	.word	0xfff0c003
 800321c:	ffffbffc 	.word	0xffffbffc
 8003220:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 feea 	bl	8004024 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d10c      	bne.n	8003272 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f023 010f 	bic.w	r1, r3, #15
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	1e5a      	subs	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
 8003270:	e007      	b.n	8003282 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 020f 	bic.w	r2, r2, #15
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	f023 0303 	bic.w	r3, r3, #3
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
 8003292:	e007      	b.n	80032a4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003298:	f043 0210 	orr.w	r2, r3, #16
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3724      	adds	r7, #36	; 0x24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd90      	pop	{r4, r7, pc}
 80032ae:	bf00      	nop

080032b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a55      	ldr	r2, [pc, #340]	; (8003418 <HAL_ADC_Start_DMA+0x168>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d004      	beq.n	80032d0 <HAL_ADC_Start_DMA+0x20>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a54      	ldr	r2, [pc, #336]	; (800341c <HAL_ADC_Start_DMA+0x16c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d101      	bne.n	80032d4 <HAL_ADC_Start_DMA+0x24>
 80032d0:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HAL_ADC_Start_DMA+0x170>)
 80032d2:	e000      	b.n	80032d6 <HAL_ADC_Start_DMA+0x26>
 80032d4:	4b53      	ldr	r3, [pc, #332]	; (8003424 <HAL_ADC_Start_DMA+0x174>)
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fd3a 	bl	8002d50 <LL_ADC_GetMultimode>
 80032dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fe06 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 808c 	bne.w	8003408 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_ADC_Start_DMA+0x4e>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e087      	b.n	800340e <HAL_ADC_Start_DMA+0x15e>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b05      	cmp	r3, #5
 8003310:	d002      	beq.n	8003318 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b09      	cmp	r3, #9
 8003316:	d170      	bne.n	80033fa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fd05 	bl	8003d28 <ADC_Enable>
 800331e:	4603      	mov	r3, r0
 8003320:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003322:	7dfb      	ldrb	r3, [r7, #23]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d163      	bne.n	80033f0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800332c:	4b3e      	ldr	r3, [pc, #248]	; (8003428 <HAL_ADC_Start_DMA+0x178>)
 800332e:	4013      	ands	r3, r2
 8003330:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a37      	ldr	r2, [pc, #220]	; (800341c <HAL_ADC_Start_DMA+0x16c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d002      	beq.n	8003348 <HAL_ADC_Start_DMA+0x98>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	e000      	b.n	800334a <HAL_ADC_Start_DMA+0x9a>
 8003348:	4b33      	ldr	r3, [pc, #204]	; (8003418 <HAL_ADC_Start_DMA+0x168>)
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	4293      	cmp	r3, r2
 8003350:	d002      	beq.n	8003358 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d105      	bne.n	8003364 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d006      	beq.n	800337e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	f023 0206 	bic.w	r2, r3, #6
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	659a      	str	r2, [r3, #88]	; 0x58
 800337c:	e002      	b.n	8003384 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003388:	4a28      	ldr	r2, [pc, #160]	; (800342c <HAL_ADC_Start_DMA+0x17c>)
 800338a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003390:	4a27      	ldr	r2, [pc, #156]	; (8003430 <HAL_ADC_Start_DMA+0x180>)
 8003392:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003398:	4a26      	ldr	r2, [pc, #152]	; (8003434 <HAL_ADC_Start_DMA+0x184>)
 800339a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	221c      	movs	r2, #28
 80033a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0210 	orr.w	r2, r2, #16
 80033ba:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f7ff fc5f 	bl	8002c8a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3340      	adds	r3, #64	; 0x40
 80033d6:	4619      	mov	r1, r3
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f001 fefc 	bl	80051d8 <HAL_DMA_Start_IT>
 80033e0:	4603      	mov	r3, r0
 80033e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fd5b 	bl	8002ea4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80033ee:	e00d      	b.n	800340c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80033f8:	e008      	b.n	800340c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003406:	e001      	b.n	800340c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003408:	2302      	movs	r3, #2
 800340a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800340c:	7dfb      	ldrb	r3, [r7, #23]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40022000 	.word	0x40022000
 800341c:	40022100 	.word	0x40022100
 8003420:	40022300 	.word	0x40022300
 8003424:	58026300 	.word	0x58026300
 8003428:	fffff0fe 	.word	0xfffff0fe
 800342c:	08003efb 	.word	0x08003efb
 8003430:	08003fd3 	.word	0x08003fd3
 8003434:	08003fef 	.word	0x08003fef

08003438 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_ADC_Stop_DMA+0x16>
 800344a:	2302      	movs	r3, #2
 800344c:	e04f      	b.n	80034ee <HAL_ADC_Stop_DMA+0xb6>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003456:	2103      	movs	r1, #3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fba9 	bl	8003bb0 <ADC_ConversionStop>
 800345e:	4603      	mov	r3, r0
 8003460:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d13d      	bne.n	80034e4 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0203 	bic.w	r2, r2, #3
 8003476:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d10f      	bne.n	80034a6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348a:	4618      	mov	r0, r3
 800348c:	f002 f90e 	bl	80056ac <HAL_DMA_Abort>
 8003490:	4603      	mov	r3, r0
 8003492:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0210 	bic.w	r2, r2, #16
 80034b4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fcbd 	bl	8003e3c <ADC_Disable>
 80034c2:	4603      	mov	r3, r0
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	e002      	b.n	80034ce <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fcb7 	bl	8003e3c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d107      	bne.n	80034e4 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034d8:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <HAL_ADC_Stop_DMA+0xc0>)
 80034da:	4013      	ands	r3, r2
 80034dc:	f043 0201 	orr.w	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	ffffeefe 	.word	0xffffeefe

080034fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b0a1      	sub	sp, #132	; 0x84
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4a9d      	ldr	r2, [pc, #628]	; (80037a0 <HAL_ADC_ConfigChannel+0x290>)
 800352a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_ADC_ConfigChannel+0x2a>
 8003536:	2302      	movs	r3, #2
 8003538:	e321      	b.n	8003b7e <HAL_ADC_ConfigChannel+0x66e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fcd4 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	f040 8306 	bne.w	8003b60 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800355c:	2b00      	cmp	r3, #0
 800355e:	d108      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x62>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0e9b      	lsrs	r3, r3, #26
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2201      	movs	r2, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	e016      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x90>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003582:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003584:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800358a:	2320      	movs	r3, #32
 800358c:	e003      	b.n	8003596 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800358e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003590:	fab3 f383 	clz	r3, r3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	2201      	movs	r2, #1
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	69d1      	ldr	r1, [r2, #28]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	430b      	orrs	r3, r1
 80035ac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6859      	ldr	r1, [r3, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f7ff fb39 	bl	8002c32 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fc95 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 80035ca:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fcb7 	bl	8002f44 <LL_ADC_INJ_IsConversionOngoing>
 80035d6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f040 80b3 	bne.w	8003746 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 80af 	bne.w	8003746 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6819      	ldr	r1, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	461a      	mov	r2, r3
 80035f6:	f7ff fb5b 	bl	8002cb0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035fa:	4b6a      	ldr	r3, [pc, #424]	; (80037a4 <HAL_ADC_ConfigChannel+0x294>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003606:	d10b      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x110>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	e01d      	b.n	800365c <HAL_ADC_ConfigChannel+0x14c>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10b      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x136>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	089b      	lsrs	r3, r3, #2
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	e00a      	b.n	800365c <HAL_ADC_ConfigChannel+0x14c>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b04      	cmp	r3, #4
 8003664:	d027      	beq.n	80036b6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6919      	ldr	r1, [r3, #16]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003674:	f7ff fa76 	bl	8002b64 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	6919      	ldr	r1, [r3, #16]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	7e5b      	ldrb	r3, [r3, #25]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d102      	bne.n	800368e <HAL_ADC_ConfigChannel+0x17e>
 8003688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800368c:	e000      	b.n	8003690 <HAL_ADC_ConfigChannel+0x180>
 800368e:	2300      	movs	r3, #0
 8003690:	461a      	mov	r2, r3
 8003692:	f7ff faa0 	bl	8002bd6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6919      	ldr	r1, [r3, #16]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	7e1b      	ldrb	r3, [r3, #24]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d102      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x19c>
 80036a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036aa:	e000      	b.n	80036ae <HAL_ADC_ConfigChannel+0x19e>
 80036ac:	2300      	movs	r3, #0
 80036ae:	461a      	mov	r2, r3
 80036b0:	f7ff fa78 	bl	8002ba4 <LL_ADC_SetDataRightShift>
 80036b4:	e047      	b.n	8003746 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	069b      	lsls	r3, r3, #26
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d107      	bne.n	80036da <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	069b      	lsls	r3, r3, #26
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d107      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036fc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003704:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	069b      	lsls	r3, r3, #26
 800370e:	429a      	cmp	r2, r3
 8003710:	d107      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003720:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003728:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	069b      	lsls	r3, r3, #26
 8003732:	429a      	cmp	r2, r3
 8003734:	d107      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003744:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fb84 	bl	8002e58 <LL_ADC_IsEnabled>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	f040 820d 	bne.w	8003b72 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	461a      	mov	r2, r3
 8003766:	f7ff facf 	bl	8002d08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <HAL_ADC_ConfigChannel+0x290>)
 8003770:	4293      	cmp	r3, r2
 8003772:	f040 8133 	bne.w	80039dc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003782:	2b00      	cmp	r3, #0
 8003784:	d110      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x298>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	0e9b      	lsrs	r3, r3, #26
 800378c:	3301      	adds	r3, #1
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2b09      	cmp	r3, #9
 8003794:	bf94      	ite	ls
 8003796:	2301      	movls	r3, #1
 8003798:	2300      	movhi	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	e01e      	b.n	80037dc <HAL_ADC_ConfigChannel+0x2cc>
 800379e:	bf00      	nop
 80037a0:	47ff0000 	.word	0x47ff0000
 80037a4:	5c001000 	.word	0x5c001000
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80037b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80037ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80037c0:	2320      	movs	r3, #32
 80037c2:	e003      	b.n	80037cc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80037c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	3301      	adds	r3, #1
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2b09      	cmp	r3, #9
 80037d4:	bf94      	ite	ls
 80037d6:	2301      	movls	r3, #1
 80037d8:	2300      	movhi	r3, #0
 80037da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d079      	beq.n	80038d4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d107      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x2ec>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	0e9b      	lsrs	r3, r3, #26
 80037f2:	3301      	adds	r3, #1
 80037f4:	069b      	lsls	r3, r3, #26
 80037f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037fa:	e015      	b.n	8003828 <HAL_ADC_ConfigChannel+0x318>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800380a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800380e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003814:	2320      	movs	r3, #32
 8003816:	e003      	b.n	8003820 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800381a:	fab3 f383 	clz	r3, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	3301      	adds	r3, #1
 8003822:	069b      	lsls	r3, r3, #26
 8003824:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x338>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	3301      	adds	r3, #1
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	2101      	movs	r1, #1
 8003842:	fa01 f303 	lsl.w	r3, r1, r3
 8003846:	e017      	b.n	8003878 <HAL_ADC_ConfigChannel+0x368>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003858:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800385a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003860:	2320      	movs	r3, #32
 8003862:	e003      	b.n	800386c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	3301      	adds	r3, #1
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f303 	lsl.w	r3, r1, r3
 8003878:	ea42 0103 	orr.w	r1, r2, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <HAL_ADC_ConfigChannel+0x38e>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	0e9b      	lsrs	r3, r3, #26
 800388e:	3301      	adds	r3, #1
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	4613      	mov	r3, r2
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	4413      	add	r3, r2
 800389a:	051b      	lsls	r3, r3, #20
 800389c:	e018      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x3c0>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80038b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80038b6:	2320      	movs	r3, #32
 80038b8:	e003      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80038ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038bc:	fab3 f383 	clz	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	f003 021f 	and.w	r2, r3, #31
 80038c8:	4613      	mov	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038d0:	430b      	orrs	r3, r1
 80038d2:	e07e      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d107      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x3e0>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	0e9b      	lsrs	r3, r3, #26
 80038e6:	3301      	adds	r3, #1
 80038e8:	069b      	lsls	r3, r3, #26
 80038ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038ee:	e015      	b.n	800391c <HAL_ADC_ConfigChannel+0x40c>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	fa93 f3a3 	rbit	r3, r3
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003908:	2320      	movs	r3, #32
 800390a:	e003      	b.n	8003914 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	3301      	adds	r3, #1
 8003916:	069b      	lsls	r3, r3, #26
 8003918:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003924:	2b00      	cmp	r3, #0
 8003926:	d109      	bne.n	800393c <HAL_ADC_ConfigChannel+0x42c>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	0e9b      	lsrs	r3, r3, #26
 800392e:	3301      	adds	r3, #1
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	2101      	movs	r1, #1
 8003936:	fa01 f303 	lsl.w	r3, r1, r3
 800393a:	e017      	b.n	800396c <HAL_ADC_ConfigChannel+0x45c>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa93 f3a3 	rbit	r3, r3
 8003948:	61bb      	str	r3, [r7, #24]
  return result;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003954:	2320      	movs	r3, #32
 8003956:	e003      	b.n	8003960 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	fab3 f383 	clz	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	3301      	adds	r3, #1
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	2101      	movs	r1, #1
 8003968:	fa01 f303 	lsl.w	r3, r1, r3
 800396c:	ea42 0103 	orr.w	r1, r2, r3
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10d      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x488>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	0e9b      	lsrs	r3, r3, #26
 8003982:	3301      	adds	r3, #1
 8003984:	f003 021f 	and.w	r2, r3, #31
 8003988:	4613      	mov	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4413      	add	r3, r2
 800398e:	3b1e      	subs	r3, #30
 8003990:	051b      	lsls	r3, r3, #20
 8003992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003996:	e01b      	b.n	80039d0 <HAL_ADC_ConfigChannel+0x4c0>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	60fb      	str	r3, [r7, #12]
  return result;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80039b0:	2320      	movs	r3, #32
 80039b2:	e003      	b.n	80039bc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	3301      	adds	r3, #1
 80039be:	f003 021f 	and.w	r2, r3, #31
 80039c2:	4613      	mov	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	4413      	add	r3, r2
 80039c8:	3b1e      	subs	r3, #30
 80039ca:	051b      	lsls	r3, r3, #20
 80039cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039d0:	430b      	orrs	r3, r1
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	6892      	ldr	r2, [r2, #8]
 80039d6:	4619      	mov	r1, r3
 80039d8:	f7ff f96a 	bl	8002cb0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f280 80c6 	bge.w	8003b72 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a67      	ldr	r2, [pc, #412]	; (8003b88 <HAL_ADC_ConfigChannel+0x678>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <HAL_ADC_ConfigChannel+0x4ea>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a65      	ldr	r2, [pc, #404]	; (8003b8c <HAL_ADC_ConfigChannel+0x67c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d101      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x4ee>
 80039fa:	4b65      	ldr	r3, [pc, #404]	; (8003b90 <HAL_ADC_ConfigChannel+0x680>)
 80039fc:	e000      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x4f0>
 80039fe:	4b65      	ldr	r3, [pc, #404]	; (8003b94 <HAL_ADC_ConfigChannel+0x684>)
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff f8a1 	bl	8002b48 <LL_ADC_GetCommonPathInternalCh>
 8003a06:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a5e      	ldr	r2, [pc, #376]	; (8003b88 <HAL_ADC_ConfigChannel+0x678>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_ADC_ConfigChannel+0x50c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a5d      	ldr	r2, [pc, #372]	; (8003b8c <HAL_ADC_ConfigChannel+0x67c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d10e      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x52a>
 8003a1c:	485a      	ldr	r0, [pc, #360]	; (8003b88 <HAL_ADC_ConfigChannel+0x678>)
 8003a1e:	f7ff fa1b 	bl	8002e58 <LL_ADC_IsEnabled>
 8003a22:	4604      	mov	r4, r0
 8003a24:	4859      	ldr	r0, [pc, #356]	; (8003b8c <HAL_ADC_ConfigChannel+0x67c>)
 8003a26:	f7ff fa17 	bl	8002e58 <LL_ADC_IsEnabled>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4323      	orrs	r3, r4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf0c      	ite	eq
 8003a32:	2301      	moveq	r3, #1
 8003a34:	2300      	movne	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	e008      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x53c>
 8003a3a:	4857      	ldr	r0, [pc, #348]	; (8003b98 <HAL_ADC_ConfigChannel+0x688>)
 8003a3c:	f7ff fa0c 	bl	8002e58 <LL_ADC_IsEnabled>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bf0c      	ite	eq
 8003a46:	2301      	moveq	r3, #1
 8003a48:	2300      	movne	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d07d      	beq.n	8003b4c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a51      	ldr	r2, [pc, #324]	; (8003b9c <HAL_ADC_ConfigChannel+0x68c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d130      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x5ac>
 8003a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d12b      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a4b      	ldr	r2, [pc, #300]	; (8003b98 <HAL_ADC_ConfigChannel+0x688>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	f040 8081 	bne.w	8003b72 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a44      	ldr	r2, [pc, #272]	; (8003b88 <HAL_ADC_ConfigChannel+0x678>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d004      	beq.n	8003a84 <HAL_ADC_ConfigChannel+0x574>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a43      	ldr	r2, [pc, #268]	; (8003b8c <HAL_ADC_ConfigChannel+0x67c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d101      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x578>
 8003a84:	4a42      	ldr	r2, [pc, #264]	; (8003b90 <HAL_ADC_ConfigChannel+0x680>)
 8003a86:	e000      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x57a>
 8003a88:	4a42      	ldr	r2, [pc, #264]	; (8003b94 <HAL_ADC_ConfigChannel+0x684>)
 8003a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f7ff f845 	bl	8002b22 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a98:	4b41      	ldr	r3, [pc, #260]	; (8003ba0 <HAL_ADC_ConfigChannel+0x690>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	099b      	lsrs	r3, r3, #6
 8003a9e:	4a41      	ldr	r2, [pc, #260]	; (8003ba4 <HAL_ADC_ConfigChannel+0x694>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	099b      	lsrs	r3, r3, #6
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003aac:	e002      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f9      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003aba:	e05a      	b.n	8003b72 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a39      	ldr	r2, [pc, #228]	; (8003ba8 <HAL_ADC_ConfigChannel+0x698>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d11e      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x5f4>
 8003ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d119      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a30      	ldr	r2, [pc, #192]	; (8003b98 <HAL_ADC_ConfigChannel+0x688>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d14b      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2a      	ldr	r2, [pc, #168]	; (8003b88 <HAL_ADC_ConfigChannel+0x678>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d004      	beq.n	8003aee <HAL_ADC_ConfigChannel+0x5de>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a28      	ldr	r2, [pc, #160]	; (8003b8c <HAL_ADC_ConfigChannel+0x67c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d101      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x5e2>
 8003aee:	4a28      	ldr	r2, [pc, #160]	; (8003b90 <HAL_ADC_ConfigChannel+0x680>)
 8003af0:	e000      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x5e4>
 8003af2:	4a28      	ldr	r2, [pc, #160]	; (8003b94 <HAL_ADC_ConfigChannel+0x684>)
 8003af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003afa:	4619      	mov	r1, r3
 8003afc:	4610      	mov	r0, r2
 8003afe:	f7ff f810 	bl	8002b22 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b02:	e036      	b.n	8003b72 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a28      	ldr	r2, [pc, #160]	; (8003bac <HAL_ADC_ConfigChannel+0x69c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d131      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x662>
 8003b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d12c      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1e      	ldr	r2, [pc, #120]	; (8003b98 <HAL_ADC_ConfigChannel+0x688>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d127      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <HAL_ADC_ConfigChannel+0x678>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d004      	beq.n	8003b36 <HAL_ADC_ConfigChannel+0x626>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <HAL_ADC_ConfigChannel+0x67c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d101      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x62a>
 8003b36:	4a16      	ldr	r2, [pc, #88]	; (8003b90 <HAL_ADC_ConfigChannel+0x680>)
 8003b38:	e000      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x62c>
 8003b3a:	4a16      	ldr	r2, [pc, #88]	; (8003b94 <HAL_ADC_ConfigChannel+0x684>)
 8003b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b42:	4619      	mov	r1, r3
 8003b44:	4610      	mov	r0, r2
 8003b46:	f7fe ffec 	bl	8002b22 <LL_ADC_SetCommonPathInternalCh>
 8003b4a:	e012      	b.n	8003b72 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b5e:	e008      	b.n	8003b72 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3784      	adds	r7, #132	; 0x84
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd90      	pop	{r4, r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40022000 	.word	0x40022000
 8003b8c:	40022100 	.word	0x40022100
 8003b90:	40022300 	.word	0x40022300
 8003b94:	58026300 	.word	0x58026300
 8003b98:	58026000 	.word	0x58026000
 8003b9c:	cb840000 	.word	0xcb840000
 8003ba0:	24000028 	.word	0x24000028
 8003ba4:	053e2d63 	.word	0x053e2d63
 8003ba8:	c7520000 	.word	0xc7520000
 8003bac:	cfb80000 	.word	0xcfb80000

08003bb0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f994 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 8003bcc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff f9b6 	bl	8002f44 <LL_ADC_INJ_IsConversionOngoing>
 8003bd8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d103      	bne.n	8003be8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 8098 	beq.w	8003d18 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d02a      	beq.n	8003c4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	7d5b      	ldrb	r3, [r3, #21]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d126      	bne.n	8003c4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7d1b      	ldrb	r3, [r3, #20]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d122      	bne.n	8003c4c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003c06:	2301      	movs	r3, #1
 8003c08:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c0a:	e014      	b.n	8003c36 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	4a45      	ldr	r2, [pc, #276]	; (8003d24 <ADC_ConversionStop+0x174>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d90d      	bls.n	8003c30 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f043 0210 	orr.w	r2, r3, #16
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	f043 0201 	orr.w	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e074      	b.n	8003d1a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	3301      	adds	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d1e3      	bne.n	8003c0c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2240      	movs	r2, #64	; 0x40
 8003c4a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d014      	beq.n	8003c7c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff f94c 	bl	8002ef4 <LL_ADC_REG_IsConversionOngoing>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00c      	beq.n	8003c7c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff f909 	bl	8002e7e <LL_ADC_IsDisableOngoing>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d104      	bne.n	8003c7c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff f928 	bl	8002ecc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d014      	beq.n	8003cac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff f95c 	bl	8002f44 <LL_ADC_INJ_IsConversionOngoing>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00c      	beq.n	8003cac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff f8f1 	bl	8002e7e <LL_ADC_IsDisableOngoing>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff f938 	bl	8002f1c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d005      	beq.n	8003cbe <ADC_ConversionStop+0x10e>
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d105      	bne.n	8003cc4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003cb8:	230c      	movs	r3, #12
 8003cba:	617b      	str	r3, [r7, #20]
        break;
 8003cbc:	e005      	b.n	8003cca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	617b      	str	r3, [r7, #20]
        break;
 8003cc2:	e002      	b.n	8003cca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	617b      	str	r3, [r7, #20]
        break;
 8003cc8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003cca:	f7fe fecb 	bl	8002a64 <HAL_GetTick>
 8003cce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003cd0:	e01b      	b.n	8003d0a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003cd2:	f7fe fec7 	bl	8002a64 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b05      	cmp	r3, #5
 8003cde:	d914      	bls.n	8003d0a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	f043 0210 	orr.w	r2, r3, #16
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	f043 0201 	orr.w	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e007      	b.n	8003d1a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1dc      	bne.n	8003cd2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	000cdbff 	.word	0x000cdbff

08003d28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff f88f 	bl	8002e58 <LL_ADC_IsEnabled>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d16e      	bne.n	8003e1e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	4b38      	ldr	r3, [pc, #224]	; (8003e28 <ADC_Enable+0x100>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	f043 0210 	orr.w	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e05a      	b.n	8003e20 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff f84a 	bl	8002e08 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d74:	f7fe fe76 	bl	8002a64 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a2b      	ldr	r2, [pc, #172]	; (8003e2c <ADC_Enable+0x104>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <ADC_Enable+0x66>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a29      	ldr	r2, [pc, #164]	; (8003e30 <ADC_Enable+0x108>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d101      	bne.n	8003d92 <ADC_Enable+0x6a>
 8003d8e:	4b29      	ldr	r3, [pc, #164]	; (8003e34 <ADC_Enable+0x10c>)
 8003d90:	e000      	b.n	8003d94 <ADC_Enable+0x6c>
 8003d92:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <ADC_Enable+0x110>)
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fe ffdb 	bl	8002d50 <LL_ADC_GetMultimode>
 8003d9a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a23      	ldr	r2, [pc, #140]	; (8003e30 <ADC_Enable+0x108>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d002      	beq.n	8003dac <ADC_Enable+0x84>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	e000      	b.n	8003dae <ADC_Enable+0x86>
 8003dac:	4b1f      	ldr	r3, [pc, #124]	; (8003e2c <ADC_Enable+0x104>)
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d02c      	beq.n	8003e10 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d130      	bne.n	8003e1e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dbc:	e028      	b.n	8003e10 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff f848 	bl	8002e58 <LL_ADC_IsEnabled>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff f818 	bl	8002e08 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dd8:	f7fe fe44 	bl	8002a64 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d914      	bls.n	8003e10 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d00d      	beq.n	8003e10 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df8:	f043 0210 	orr.w	r2, r3, #16
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e007      	b.n	8003e20 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d1cf      	bne.n	8003dbe <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	8000003f 	.word	0x8000003f
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	40022100 	.word	0x40022100
 8003e34:	40022300 	.word	0x40022300
 8003e38:	58026300 	.word	0x58026300

08003e3c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff f818 	bl	8002e7e <LL_ADC_IsDisableOngoing>
 8003e4e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe ffff 	bl	8002e58 <LL_ADC_IsEnabled>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d047      	beq.n	8003ef0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d144      	bne.n	8003ef0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 030d 	and.w	r3, r3, #13
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d10c      	bne.n	8003e8e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe ffd9 	bl	8002e30 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2203      	movs	r2, #3
 8003e84:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e86:	f7fe fded 	bl	8002a64 <HAL_GetTick>
 8003e8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e8c:	e029      	b.n	8003ee2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e92:	f043 0210 	orr.w	r2, r3, #16
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9e:	f043 0201 	orr.w	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e023      	b.n	8003ef2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003eaa:	f7fe fddb 	bl	8002a64 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d914      	bls.n	8003ee2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	f043 0210 	orr.w	r2, r3, #16
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	f043 0201 	orr.w	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e007      	b.n	8003ef2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1dc      	bne.n	8003eaa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d14b      	bne.n	8003fac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d021      	beq.n	8003f72 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe fe6a 	bl	8002c0c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d032      	beq.n	8003fa4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d12b      	bne.n	8003fa4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d11f      	bne.n	8003fa4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f68:	f043 0201 	orr.w	r2, r3, #1
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54
 8003f70:	e018      	b.n	8003fa4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d111      	bne.n	8003fa4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	f043 0201 	orr.w	r2, r3, #1
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f7fd ff57 	bl	8001e58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003faa:	e00e      	b.n	8003fca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb0:	f003 0310 	and.w	r3, r3, #16
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f7ff fa9f 	bl	80034fc <HAL_ADC_ErrorCallback>
}
 8003fbe:	e004      	b.n	8003fca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
}
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f7fd fecd 	bl	8001d80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fe6:	bf00      	nop
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400c:	f043 0204 	orr.w	r2, r3, #4
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f7ff fa71 	bl	80034fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800401a:	bf00      	nop
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a79      	ldr	r2, [pc, #484]	; (8004218 <ADC_ConfigureBoostMode+0x1f4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <ADC_ConfigureBoostMode+0x1c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a78      	ldr	r2, [pc, #480]	; (800421c <ADC_ConfigureBoostMode+0x1f8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d109      	bne.n	8004054 <ADC_ConfigureBoostMode+0x30>
 8004040:	4b77      	ldr	r3, [pc, #476]	; (8004220 <ADC_ConfigureBoostMode+0x1fc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e008      	b.n	8004066 <ADC_ConfigureBoostMode+0x42>
 8004054:	4b73      	ldr	r3, [pc, #460]	; (8004224 <ADC_ConfigureBoostMode+0x200>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf14      	ite	ne
 8004060:	2301      	movne	r3, #1
 8004062:	2300      	moveq	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01c      	beq.n	80040a4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800406a:	f005 fad5 	bl	8009618 <HAL_RCC_GetHCLKFreq>
 800406e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004078:	d010      	beq.n	800409c <ADC_ConfigureBoostMode+0x78>
 800407a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800407e:	d871      	bhi.n	8004164 <ADC_ConfigureBoostMode+0x140>
 8004080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004084:	d002      	beq.n	800408c <ADC_ConfigureBoostMode+0x68>
 8004086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800408a:	d16b      	bne.n	8004164 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	60fb      	str	r3, [r7, #12]
        break;
 800409a:	e066      	b.n	800416a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	089b      	lsrs	r3, r3, #2
 80040a0:	60fb      	str	r3, [r7, #12]
        break;
 80040a2:	e062      	b.n	800416a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80040a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80040a8:	f006 fa58 	bl	800a55c <HAL_RCCEx_GetPeriphCLKFreq>
 80040ac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80040b6:	d051      	beq.n	800415c <ADC_ConfigureBoostMode+0x138>
 80040b8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80040bc:	d854      	bhi.n	8004168 <ADC_ConfigureBoostMode+0x144>
 80040be:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80040c2:	d047      	beq.n	8004154 <ADC_ConfigureBoostMode+0x130>
 80040c4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80040c8:	d84e      	bhi.n	8004168 <ADC_ConfigureBoostMode+0x144>
 80040ca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80040ce:	d03d      	beq.n	800414c <ADC_ConfigureBoostMode+0x128>
 80040d0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80040d4:	d848      	bhi.n	8004168 <ADC_ConfigureBoostMode+0x144>
 80040d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040da:	d033      	beq.n	8004144 <ADC_ConfigureBoostMode+0x120>
 80040dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040e0:	d842      	bhi.n	8004168 <ADC_ConfigureBoostMode+0x144>
 80040e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80040e6:	d029      	beq.n	800413c <ADC_ConfigureBoostMode+0x118>
 80040e8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80040ec:	d83c      	bhi.n	8004168 <ADC_ConfigureBoostMode+0x144>
 80040ee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80040f2:	d01a      	beq.n	800412a <ADC_ConfigureBoostMode+0x106>
 80040f4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80040f8:	d836      	bhi.n	8004168 <ADC_ConfigureBoostMode+0x144>
 80040fa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80040fe:	d014      	beq.n	800412a <ADC_ConfigureBoostMode+0x106>
 8004100:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004104:	d830      	bhi.n	8004168 <ADC_ConfigureBoostMode+0x144>
 8004106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800410a:	d00e      	beq.n	800412a <ADC_ConfigureBoostMode+0x106>
 800410c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004110:	d82a      	bhi.n	8004168 <ADC_ConfigureBoostMode+0x144>
 8004112:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004116:	d008      	beq.n	800412a <ADC_ConfigureBoostMode+0x106>
 8004118:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800411c:	d824      	bhi.n	8004168 <ADC_ConfigureBoostMode+0x144>
 800411e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004122:	d002      	beq.n	800412a <ADC_ConfigureBoostMode+0x106>
 8004124:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004128:	d11e      	bne.n	8004168 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	0c9b      	lsrs	r3, r3, #18
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	fbb2 f3f3 	udiv	r3, r2, r3
 8004138:	60fb      	str	r3, [r7, #12]
        break;
 800413a:	e016      	b.n	800416a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	60fb      	str	r3, [r7, #12]
        break;
 8004142:	e012      	b.n	800416a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	60fb      	str	r3, [r7, #12]
        break;
 800414a:	e00e      	b.n	800416a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	099b      	lsrs	r3, r3, #6
 8004150:	60fb      	str	r3, [r7, #12]
        break;
 8004152:	e00a      	b.n	800416a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	09db      	lsrs	r3, r3, #7
 8004158:	60fb      	str	r3, [r7, #12]
        break;
 800415a:	e006      	b.n	800416a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	0a1b      	lsrs	r3, r3, #8
 8004160:	60fb      	str	r3, [r7, #12]
        break;
 8004162:	e002      	b.n	800416a <ADC_ConfigureBoostMode+0x146>
        break;
 8004164:	bf00      	nop
 8004166:	e000      	b.n	800416a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004168:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800416a:	f7fe fcbb 	bl	8002ae4 <HAL_GetREVID>
 800416e:	4603      	mov	r3, r0
 8004170:	f241 0203 	movw	r2, #4099	; 0x1003
 8004174:	4293      	cmp	r3, r2
 8004176:	d815      	bhi.n	80041a4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a2b      	ldr	r2, [pc, #172]	; (8004228 <ADC_ConfigureBoostMode+0x204>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d908      	bls.n	8004192 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004190:	e03e      	b.n	8004210 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041a0:	609a      	str	r2, [r3, #8]
}
 80041a2:	e035      	b.n	8004210 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4a1f      	ldr	r2, [pc, #124]	; (800422c <ADC_ConfigureBoostMode+0x208>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d808      	bhi.n	80041c4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041c0:	609a      	str	r2, [r3, #8]
}
 80041c2:	e025      	b.n	8004210 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4a1a      	ldr	r2, [pc, #104]	; (8004230 <ADC_ConfigureBoostMode+0x20c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d80a      	bhi.n	80041e2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	e016      	b.n	8004210 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a13      	ldr	r2, [pc, #76]	; (8004234 <ADC_ConfigureBoostMode+0x210>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d80a      	bhi.n	8004200 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fc:	609a      	str	r2, [r3, #8]
}
 80041fe:	e007      	b.n	8004210 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800420e:	609a      	str	r2, [r3, #8]
}
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40022000 	.word	0x40022000
 800421c:	40022100 	.word	0x40022100
 8004220:	40022300 	.word	0x40022300
 8004224:	58026300 	.word	0x58026300
 8004228:	01312d00 	.word	0x01312d00
 800422c:	005f5e10 	.word	0x005f5e10
 8004230:	00bebc20 	.word	0x00bebc20
 8004234:	017d7840 	.word	0x017d7840

08004238 <LL_ADC_IsEnabled>:
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <LL_ADC_IsEnabled+0x18>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <LL_ADC_IsEnabled+0x1a>
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <LL_ADC_StartCalibration>:
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	4b09      	ldr	r3, [pc, #36]	; (8004298 <LL_ADC_StartCalibration+0x38>)
 8004272:	4013      	ands	r3, r2
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004280:	430a      	orrs	r2, r1
 8004282:	4313      	orrs	r3, r2
 8004284:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	609a      	str	r2, [r3, #8]
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	3ffeffc0 	.word	0x3ffeffc0

0800429c <LL_ADC_IsCalibrationOnGoing>:
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b0:	d101      	bne.n	80042b6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_ADC_REG_IsConversionOngoing>:
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d101      	bne.n	80042dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_ADCEx_Calibration_Start+0x1e>
 8004306:	2302      	movs	r3, #2
 8004308:	e04c      	b.n	80043a4 <HAL_ADCEx_Calibration_Start+0xb8>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f7ff fd92 	bl	8003e3c <ADC_Disable>
 8004318:	4603      	mov	r3, r0
 800431a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d135      	bne.n	800438e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004326:	4b21      	ldr	r3, [pc, #132]	; (80043ac <HAL_ADCEx_Calibration_Start+0xc0>)
 8004328:	4013      	ands	r3, r2
 800432a:	f043 0202 	orr.w	r2, r3, #2
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff ff90 	bl	8004260 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004340:	e014      	b.n	800436c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	3301      	adds	r3, #1
 8004346:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	4a19      	ldr	r2, [pc, #100]	; (80043b0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d30d      	bcc.n	800436c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004354:	f023 0312 	bic.w	r3, r3, #18
 8004358:	f043 0210 	orr.w	r2, r3, #16
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e01b      	b.n	80043a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff ff93 	bl	800429c <LL_ADC_IsCalibrationOnGoing>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e2      	bne.n	8004342 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	f023 0303 	bic.w	r3, r3, #3
 8004384:	f043 0201 	orr.w	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	655a      	str	r2, [r3, #84]	; 0x54
 800438c:	e005      	b.n	800439a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	f043 0210 	orr.w	r2, r3, #16
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	ffffeefd 	.word	0xffffeefd
 80043b0:	25c3f800 	.word	0x25c3f800

080043b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80043b4:	b590      	push	{r4, r7, lr}
 80043b6:	b09f      	sub	sp, #124	; 0x7c
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e0be      	b.n	8004550 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80043da:	2300      	movs	r3, #0
 80043dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80043de:	2300      	movs	r3, #0
 80043e0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a5c      	ldr	r2, [pc, #368]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d102      	bne.n	80043f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80043ec:	4b5b      	ldr	r3, [pc, #364]	; (800455c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043ee:	60bb      	str	r3, [r7, #8]
 80043f0:	e001      	b.n	80043f6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80043f2:	2300      	movs	r3, #0
 80043f4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	f043 0220 	orr.w	r2, r3, #32
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e09d      	b.n	8004550 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff ff54 	bl	80042c4 <LL_ADC_REG_IsConversionOngoing>
 800441c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff ff4e 	bl	80042c4 <LL_ADC_REG_IsConversionOngoing>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d17f      	bne.n	800452e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800442e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004430:	2b00      	cmp	r3, #0
 8004432:	d17c      	bne.n	800452e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a47      	ldr	r2, [pc, #284]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a46      	ldr	r2, [pc, #280]	; (800455c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004448:	4b45      	ldr	r3, [pc, #276]	; (8004560 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800444a:	e000      	b.n	800444e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800444c:	4b45      	ldr	r3, [pc, #276]	; (8004564 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800444e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d039      	beq.n	80044cc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	431a      	orrs	r2, r3
 8004466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004468:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a3a      	ldr	r2, [pc, #232]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a38      	ldr	r2, [pc, #224]	; (800455c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10e      	bne.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800447e:	4836      	ldr	r0, [pc, #216]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004480:	f7ff feda 	bl	8004238 <LL_ADC_IsEnabled>
 8004484:	4604      	mov	r4, r0
 8004486:	4835      	ldr	r0, [pc, #212]	; (800455c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004488:	f7ff fed6 	bl	8004238 <LL_ADC_IsEnabled>
 800448c:	4603      	mov	r3, r0
 800448e:	4323      	orrs	r3, r4
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	e008      	b.n	80044ae <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800449c:	4832      	ldr	r0, [pc, #200]	; (8004568 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800449e:	f7ff fecb 	bl	8004238 <LL_ADC_IsEnabled>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d047      	beq.n	8004542 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80044b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	4b2d      	ldr	r3, [pc, #180]	; (800456c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	6811      	ldr	r1, [r2, #0]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	6892      	ldr	r2, [r2, #8]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	431a      	orrs	r2, r3
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044ca:	e03a      	b.n	8004542 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80044cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1e      	ldr	r2, [pc, #120]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1d      	ldr	r2, [pc, #116]	; (800455c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d10e      	bne.n	800450a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80044ec:	481a      	ldr	r0, [pc, #104]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044ee:	f7ff fea3 	bl	8004238 <LL_ADC_IsEnabled>
 80044f2:	4604      	mov	r4, r0
 80044f4:	4819      	ldr	r0, [pc, #100]	; (800455c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044f6:	f7ff fe9f 	bl	8004238 <LL_ADC_IsEnabled>
 80044fa:	4603      	mov	r3, r0
 80044fc:	4323      	orrs	r3, r4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	bf0c      	ite	eq
 8004502:	2301      	moveq	r3, #1
 8004504:	2300      	movne	r3, #0
 8004506:	b2db      	uxtb	r3, r3
 8004508:	e008      	b.n	800451c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800450a:	4817      	ldr	r0, [pc, #92]	; (8004568 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800450c:	f7ff fe94 	bl	8004238 <LL_ADC_IsEnabled>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	bf0c      	ite	eq
 8004516:	2301      	moveq	r3, #1
 8004518:	2300      	movne	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d010      	beq.n	8004542 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	4b11      	ldr	r3, [pc, #68]	; (800456c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004526:	4013      	ands	r3, r2
 8004528:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800452a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800452c:	e009      	b.n	8004542 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004532:	f043 0220 	orr.w	r2, r3, #32
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004540:	e000      	b.n	8004544 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004542:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800454c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004550:	4618      	mov	r0, r3
 8004552:	377c      	adds	r7, #124	; 0x7c
 8004554:	46bd      	mov	sp, r7
 8004556:	bd90      	pop	{r4, r7, pc}
 8004558:	40022000 	.word	0x40022000
 800455c:	40022100 	.word	0x40022100
 8004560:	40022300 	.word	0x40022300
 8004564:	58026300 	.word	0x58026300
 8004568:	58026000 	.word	0x58026000
 800456c:	fffff0e0 	.word	0xfffff0e0

08004570 <__NVIC_SetPriorityGrouping>:
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <__NVIC_SetPriorityGrouping+0x40>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800458c:	4013      	ands	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <__NVIC_SetPriorityGrouping+0x44>)
 800459a:	4313      	orrs	r3, r2
 800459c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800459e:	4a04      	ldr	r2, [pc, #16]	; (80045b0 <__NVIC_SetPriorityGrouping+0x40>)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	60d3      	str	r3, [r2, #12]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	e000ed00 	.word	0xe000ed00
 80045b4:	05fa0000 	.word	0x05fa0000

080045b8 <__NVIC_GetPriorityGrouping>:
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045bc:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <__NVIC_GetPriorityGrouping+0x18>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	0a1b      	lsrs	r3, r3, #8
 80045c2:	f003 0307 	and.w	r3, r3, #7
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	e000ed00 	.word	0xe000ed00

080045d4 <__NVIC_EnableIRQ>:
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	db0b      	blt.n	80045fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	f003 021f 	and.w	r2, r3, #31
 80045ec:	4907      	ldr	r1, [pc, #28]	; (800460c <__NVIC_EnableIRQ+0x38>)
 80045ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	2001      	movs	r0, #1
 80045f6:	fa00 f202 	lsl.w	r2, r0, r2
 80045fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	e000e100 	.word	0xe000e100

08004610 <__NVIC_SetPriority>:
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	6039      	str	r1, [r7, #0]
 800461a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800461c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004620:	2b00      	cmp	r3, #0
 8004622:	db0a      	blt.n	800463a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	b2da      	uxtb	r2, r3
 8004628:	490c      	ldr	r1, [pc, #48]	; (800465c <__NVIC_SetPriority+0x4c>)
 800462a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800462e:	0112      	lsls	r2, r2, #4
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	440b      	add	r3, r1
 8004634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004638:	e00a      	b.n	8004650 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	b2da      	uxtb	r2, r3
 800463e:	4908      	ldr	r1, [pc, #32]	; (8004660 <__NVIC_SetPriority+0x50>)
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	3b04      	subs	r3, #4
 8004648:	0112      	lsls	r2, r2, #4
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	440b      	add	r3, r1
 800464e:	761a      	strb	r2, [r3, #24]
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	e000e100 	.word	0xe000e100
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <NVIC_EncodePriority>:
{
 8004664:	b480      	push	{r7}
 8004666:	b089      	sub	sp, #36	; 0x24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f1c3 0307 	rsb	r3, r3, #7
 800467e:	2b04      	cmp	r3, #4
 8004680:	bf28      	it	cs
 8004682:	2304      	movcs	r3, #4
 8004684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	3304      	adds	r3, #4
 800468a:	2b06      	cmp	r3, #6
 800468c:	d902      	bls.n	8004694 <NVIC_EncodePriority+0x30>
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3b03      	subs	r3, #3
 8004692:	e000      	b.n	8004696 <NVIC_EncodePriority+0x32>
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43da      	mvns	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	401a      	ands	r2, r3
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	fa01 f303 	lsl.w	r3, r1, r3
 80046b6:	43d9      	mvns	r1, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046bc:	4313      	orrs	r3, r2
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3724      	adds	r7, #36	; 0x24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046dc:	d301      	bcc.n	80046e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046de:	2301      	movs	r3, #1
 80046e0:	e00f      	b.n	8004702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046e2:	4a0a      	ldr	r2, [pc, #40]	; (800470c <SysTick_Config+0x40>)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046ea:	210f      	movs	r1, #15
 80046ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046f0:	f7ff ff8e 	bl	8004610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046f4:	4b05      	ldr	r3, [pc, #20]	; (800470c <SysTick_Config+0x40>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046fa:	4b04      	ldr	r3, [pc, #16]	; (800470c <SysTick_Config+0x40>)
 80046fc:	2207      	movs	r2, #7
 80046fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	e000e010 	.word	0xe000e010

08004710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff ff29 	bl	8004570 <__NVIC_SetPriorityGrouping>
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	4603      	mov	r3, r0
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
 8004732:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004734:	f7ff ff40 	bl	80045b8 <__NVIC_GetPriorityGrouping>
 8004738:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	6978      	ldr	r0, [r7, #20]
 8004740:	f7ff ff90 	bl	8004664 <NVIC_EncodePriority>
 8004744:	4602      	mov	r2, r0
 8004746:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800474a:	4611      	mov	r1, r2
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff ff5f 	bl	8004610 <__NVIC_SetPriority>
}
 8004752:	bf00      	nop
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	4603      	mov	r3, r0
 8004762:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff ff33 	bl	80045d4 <__NVIC_EnableIRQ>
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff ffa4 	bl	80046cc <SysTick_Config>
 8004784:	4603      	mov	r3, r0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e014      	b.n	80047ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	791b      	ldrb	r3, [r3, #4]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d105      	bne.n	80047b6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7fd fd19 	bl	80021e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	795b      	ldrb	r3, [r3, #5]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_DAC_Start+0x16>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e040      	b.n	800486a <HAL_DAC_Start+0x98>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6819      	ldr	r1, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2201      	movs	r2, #1
 8004802:	409a      	lsls	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10f      	bne.n	8004832 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800481c:	2b02      	cmp	r3, #2
 800481e:	d11d      	bne.n	800485c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	605a      	str	r2, [r3, #4]
 8004830:	e014      	b.n	800485c <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2102      	movs	r1, #2
 8004844:	fa01 f303 	lsl.w	r3, r1, r3
 8004848:	429a      	cmp	r2, r3
 800484a:	d107      	bne.n	800485c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0202 	orr.w	r2, r2, #2
 800485a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004876:	b480      	push	{r7}
 8004878:	b087      	sub	sp, #28
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d105      	bne.n	80048a0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4413      	add	r3, r2
 800489a:	3308      	adds	r3, #8
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	e004      	b.n	80048aa <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4413      	add	r3, r2
 80048a6:	3314      	adds	r3, #20
 80048a8:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	461a      	mov	r2, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	795b      	ldrb	r3, [r3, #5]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_DAC_ConfigChannel+0x18>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e11d      	b.n	8004b14 <HAL_DAC_ConfigChannel+0x254>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2202      	movs	r2, #2
 80048e2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d174      	bne.n	80049d6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80048ec:	f7fe f8ba 	bl	8002a64 <HAL_GetTick>
 80048f0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d134      	bne.n	8004962 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80048f8:	e011      	b.n	800491e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80048fa:	f7fe f8b3 	bl	8002a64 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d90a      	bls.n	800491e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f043 0208 	orr.w	r2, r3, #8
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2203      	movs	r2, #3
 8004918:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e0fa      	b.n	8004b14 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004924:	4b7d      	ldr	r3, [pc, #500]	; (8004b1c <HAL_DAC_ConfigChannel+0x25c>)
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e6      	bne.n	80048fa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800492c:	2001      	movs	r0, #1
 800492e:	f7fe f8a5 	bl	8002a7c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	6992      	ldr	r2, [r2, #24]
 800493a:	641a      	str	r2, [r3, #64]	; 0x40
 800493c:	e01e      	b.n	800497c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800493e:	f7fe f891 	bl	8002a64 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d90a      	bls.n	8004962 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f043 0208 	orr.w	r2, r3, #8
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2203      	movs	r2, #3
 800495c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e0d8      	b.n	8004b14 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004968:	2b00      	cmp	r3, #0
 800496a:	dbe8      	blt.n	800493e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800496c:	2001      	movs	r0, #1
 800496e:	f7fe f885 	bl	8002a7c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	6992      	ldr	r2, [r2, #24]
 800497a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800498c:	fa01 f303 	lsl.w	r3, r1, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	ea02 0103 	and.w	r1, r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	409a      	lsls	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	21ff      	movs	r1, #255	; 0xff
 80049b8:	fa01 f303 	lsl.w	r3, r1, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	ea02 0103 	and.w	r1, r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6a1a      	ldr	r2, [r3, #32]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	409a      	lsls	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d11d      	bne.n	8004a1a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	221f      	movs	r2, #31
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4013      	ands	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2207      	movs	r2, #7
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4013      	ands	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d102      	bne.n	8004a44 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61fb      	str	r3, [r7, #28]
 8004a42:	e00f      	b.n	8004a64 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d102      	bne.n	8004a52 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	e008      	b.n	8004a64 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	61fb      	str	r3, [r7, #28]
 8004a5e:	e001      	b.n	8004a64 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6819      	ldr	r1, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	43da      	mvns	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	400a      	ands	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f003 0310 	and.w	r3, r3, #16
 8004aba:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f003 0310 	and.w	r3, r3, #16
 8004af6:	22c0      	movs	r2, #192	; 0xc0
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	43da      	mvns	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	400a      	ands	r2, r1
 8004b04:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20008000 	.word	0x20008000

08004b20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004b28:	f7fd ff9c 	bl	8002a64 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e316      	b.n	8005166 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a66      	ldr	r2, [pc, #408]	; (8004cd8 <HAL_DMA_Init+0x1b8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d04a      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a65      	ldr	r2, [pc, #404]	; (8004cdc <HAL_DMA_Init+0x1bc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d045      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a63      	ldr	r2, [pc, #396]	; (8004ce0 <HAL_DMA_Init+0x1c0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d040      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a62      	ldr	r2, [pc, #392]	; (8004ce4 <HAL_DMA_Init+0x1c4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d03b      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a60      	ldr	r2, [pc, #384]	; (8004ce8 <HAL_DMA_Init+0x1c8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d036      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a5f      	ldr	r2, [pc, #380]	; (8004cec <HAL_DMA_Init+0x1cc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d031      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a5d      	ldr	r2, [pc, #372]	; (8004cf0 <HAL_DMA_Init+0x1d0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d02c      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a5c      	ldr	r2, [pc, #368]	; (8004cf4 <HAL_DMA_Init+0x1d4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d027      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a5a      	ldr	r2, [pc, #360]	; (8004cf8 <HAL_DMA_Init+0x1d8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d022      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a59      	ldr	r2, [pc, #356]	; (8004cfc <HAL_DMA_Init+0x1dc>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a57      	ldr	r2, [pc, #348]	; (8004d00 <HAL_DMA_Init+0x1e0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d018      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a56      	ldr	r2, [pc, #344]	; (8004d04 <HAL_DMA_Init+0x1e4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a54      	ldr	r2, [pc, #336]	; (8004d08 <HAL_DMA_Init+0x1e8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a53      	ldr	r2, [pc, #332]	; (8004d0c <HAL_DMA_Init+0x1ec>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d009      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a51      	ldr	r2, [pc, #324]	; (8004d10 <HAL_DMA_Init+0x1f0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a50      	ldr	r2, [pc, #320]	; (8004d14 <HAL_DMA_Init+0x1f4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d101      	bne.n	8004bdc <HAL_DMA_Init+0xbc>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e000      	b.n	8004bde <HAL_DMA_Init+0xbe>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 813b 	beq.w	8004e5a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a37      	ldr	r2, [pc, #220]	; (8004cd8 <HAL_DMA_Init+0x1b8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d04a      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a36      	ldr	r2, [pc, #216]	; (8004cdc <HAL_DMA_Init+0x1bc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d045      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a34      	ldr	r2, [pc, #208]	; (8004ce0 <HAL_DMA_Init+0x1c0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d040      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a33      	ldr	r2, [pc, #204]	; (8004ce4 <HAL_DMA_Init+0x1c4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d03b      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a31      	ldr	r2, [pc, #196]	; (8004ce8 <HAL_DMA_Init+0x1c8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d036      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a30      	ldr	r2, [pc, #192]	; (8004cec <HAL_DMA_Init+0x1cc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d031      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2e      	ldr	r2, [pc, #184]	; (8004cf0 <HAL_DMA_Init+0x1d0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d02c      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a2d      	ldr	r2, [pc, #180]	; (8004cf4 <HAL_DMA_Init+0x1d4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d027      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a2b      	ldr	r2, [pc, #172]	; (8004cf8 <HAL_DMA_Init+0x1d8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d022      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a2a      	ldr	r2, [pc, #168]	; (8004cfc <HAL_DMA_Init+0x1dc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d01d      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <HAL_DMA_Init+0x1e0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d018      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a27      	ldr	r2, [pc, #156]	; (8004d04 <HAL_DMA_Init+0x1e4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d013      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a25      	ldr	r2, [pc, #148]	; (8004d08 <HAL_DMA_Init+0x1e8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00e      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <HAL_DMA_Init+0x1ec>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d009      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a22      	ldr	r2, [pc, #136]	; (8004d10 <HAL_DMA_Init+0x1f0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d004      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a21      	ldr	r2, [pc, #132]	; (8004d14 <HAL_DMA_Init+0x1f4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d108      	bne.n	8004ca6 <HAL_DMA_Init+0x186>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0201 	bic.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e007      	b.n	8004cb6 <HAL_DMA_Init+0x196>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0201 	bic.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004cb6:	e02f      	b.n	8004d18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cb8:	f7fd fed4 	bl	8002a64 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b05      	cmp	r3, #5
 8004cc4:	d928      	bls.n	8004d18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2203      	movs	r2, #3
 8004cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e246      	b.n	8005166 <HAL_DMA_Init+0x646>
 8004cd8:	40020010 	.word	0x40020010
 8004cdc:	40020028 	.word	0x40020028
 8004ce0:	40020040 	.word	0x40020040
 8004ce4:	40020058 	.word	0x40020058
 8004ce8:	40020070 	.word	0x40020070
 8004cec:	40020088 	.word	0x40020088
 8004cf0:	400200a0 	.word	0x400200a0
 8004cf4:	400200b8 	.word	0x400200b8
 8004cf8:	40020410 	.word	0x40020410
 8004cfc:	40020428 	.word	0x40020428
 8004d00:	40020440 	.word	0x40020440
 8004d04:	40020458 	.word	0x40020458
 8004d08:	40020470 	.word	0x40020470
 8004d0c:	40020488 	.word	0x40020488
 8004d10:	400204a0 	.word	0x400204a0
 8004d14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1c8      	bne.n	8004cb8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4b83      	ldr	r3, [pc, #524]	; (8004f40 <HAL_DMA_Init+0x420>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004d3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d107      	bne.n	8004d7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	4313      	orrs	r3, r2
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d7c:	4b71      	ldr	r3, [pc, #452]	; (8004f44 <HAL_DMA_Init+0x424>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	4b71      	ldr	r3, [pc, #452]	; (8004f48 <HAL_DMA_Init+0x428>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d88:	d328      	bcc.n	8004ddc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b28      	cmp	r3, #40	; 0x28
 8004d90:	d903      	bls.n	8004d9a <HAL_DMA_Init+0x27a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b2e      	cmp	r3, #46	; 0x2e
 8004d98:	d917      	bls.n	8004dca <HAL_DMA_Init+0x2aa>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8004da0:	d903      	bls.n	8004daa <HAL_DMA_Init+0x28a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b42      	cmp	r3, #66	; 0x42
 8004da8:	d90f      	bls.n	8004dca <HAL_DMA_Init+0x2aa>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b46      	cmp	r3, #70	; 0x46
 8004db0:	d903      	bls.n	8004dba <HAL_DMA_Init+0x29a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b48      	cmp	r3, #72	; 0x48
 8004db8:	d907      	bls.n	8004dca <HAL_DMA_Init+0x2aa>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b4e      	cmp	r3, #78	; 0x4e
 8004dc0:	d905      	bls.n	8004dce <HAL_DMA_Init+0x2ae>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b52      	cmp	r3, #82	; 0x52
 8004dc8:	d801      	bhi.n	8004dce <HAL_DMA_Init+0x2ae>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <HAL_DMA_Init+0x2b0>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dda:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f023 0307 	bic.w	r3, r3, #7
 8004df2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d117      	bne.n	8004e36 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00e      	beq.n	8004e36 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f002 fb33 	bl	8007484 <DMA_CheckFifoParam>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2240      	movs	r2, #64	; 0x40
 8004e28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e197      	b.n	8005166 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f002 fa6e 	bl	8007320 <DMA_CalcBaseAndBitshift>
 8004e44:	4603      	mov	r3, r0
 8004e46:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	223f      	movs	r2, #63	; 0x3f
 8004e52:	409a      	lsls	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	609a      	str	r2, [r3, #8]
 8004e58:	e0cd      	b.n	8004ff6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a3b      	ldr	r2, [pc, #236]	; (8004f4c <HAL_DMA_Init+0x42c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d022      	beq.n	8004eaa <HAL_DMA_Init+0x38a>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a39      	ldr	r2, [pc, #228]	; (8004f50 <HAL_DMA_Init+0x430>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01d      	beq.n	8004eaa <HAL_DMA_Init+0x38a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a38      	ldr	r2, [pc, #224]	; (8004f54 <HAL_DMA_Init+0x434>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d018      	beq.n	8004eaa <HAL_DMA_Init+0x38a>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a36      	ldr	r2, [pc, #216]	; (8004f58 <HAL_DMA_Init+0x438>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <HAL_DMA_Init+0x38a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a35      	ldr	r2, [pc, #212]	; (8004f5c <HAL_DMA_Init+0x43c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00e      	beq.n	8004eaa <HAL_DMA_Init+0x38a>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a33      	ldr	r2, [pc, #204]	; (8004f60 <HAL_DMA_Init+0x440>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_DMA_Init+0x38a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a32      	ldr	r2, [pc, #200]	; (8004f64 <HAL_DMA_Init+0x444>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <HAL_DMA_Init+0x38a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a30      	ldr	r2, [pc, #192]	; (8004f68 <HAL_DMA_Init+0x448>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d101      	bne.n	8004eae <HAL_DMA_Init+0x38e>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <HAL_DMA_Init+0x390>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 8097 	beq.w	8004fe4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a24      	ldr	r2, [pc, #144]	; (8004f4c <HAL_DMA_Init+0x42c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d021      	beq.n	8004f04 <HAL_DMA_Init+0x3e4>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a22      	ldr	r2, [pc, #136]	; (8004f50 <HAL_DMA_Init+0x430>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01c      	beq.n	8004f04 <HAL_DMA_Init+0x3e4>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a21      	ldr	r2, [pc, #132]	; (8004f54 <HAL_DMA_Init+0x434>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d017      	beq.n	8004f04 <HAL_DMA_Init+0x3e4>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1f      	ldr	r2, [pc, #124]	; (8004f58 <HAL_DMA_Init+0x438>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d012      	beq.n	8004f04 <HAL_DMA_Init+0x3e4>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1e      	ldr	r2, [pc, #120]	; (8004f5c <HAL_DMA_Init+0x43c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00d      	beq.n	8004f04 <HAL_DMA_Init+0x3e4>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a1c      	ldr	r2, [pc, #112]	; (8004f60 <HAL_DMA_Init+0x440>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d008      	beq.n	8004f04 <HAL_DMA_Init+0x3e4>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a1b      	ldr	r2, [pc, #108]	; (8004f64 <HAL_DMA_Init+0x444>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <HAL_DMA_Init+0x3e4>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a19      	ldr	r2, [pc, #100]	; (8004f68 <HAL_DMA_Init+0x448>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4b12      	ldr	r3, [pc, #72]	; (8004f6c <HAL_DMA_Init+0x44c>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b40      	cmp	r3, #64	; 0x40
 8004f2c:	d020      	beq.n	8004f70 <HAL_DMA_Init+0x450>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b80      	cmp	r3, #128	; 0x80
 8004f34:	d102      	bne.n	8004f3c <HAL_DMA_Init+0x41c>
 8004f36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f3a:	e01a      	b.n	8004f72 <HAL_DMA_Init+0x452>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e018      	b.n	8004f72 <HAL_DMA_Init+0x452>
 8004f40:	fe10803f 	.word	0xfe10803f
 8004f44:	5c001000 	.word	0x5c001000
 8004f48:	ffff0000 	.word	0xffff0000
 8004f4c:	58025408 	.word	0x58025408
 8004f50:	5802541c 	.word	0x5802541c
 8004f54:	58025430 	.word	0x58025430
 8004f58:	58025444 	.word	0x58025444
 8004f5c:	58025458 	.word	0x58025458
 8004f60:	5802546c 	.word	0x5802546c
 8004f64:	58025480 	.word	0x58025480
 8004f68:	58025494 	.word	0x58025494
 8004f6c:	fffe000f 	.word	0xfffe000f
 8004f70:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	68d2      	ldr	r2, [r2, #12]
 8004f76:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004fa0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4b6e      	ldr	r3, [pc, #440]	; (8005170 <HAL_DMA_Init+0x650>)
 8004fb8:	4413      	add	r3, r2
 8004fba:	4a6e      	ldr	r2, [pc, #440]	; (8005174 <HAL_DMA_Init+0x654>)
 8004fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	009a      	lsls	r2, r3, #2
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f002 f9a9 	bl	8007320 <DMA_CalcBaseAndBitshift>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	2201      	movs	r2, #1
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	605a      	str	r2, [r3, #4]
 8004fe2:	e008      	b.n	8004ff6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2240      	movs	r2, #64	; 0x40
 8004fe8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2203      	movs	r2, #3
 8004fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e0b7      	b.n	8005166 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a5f      	ldr	r2, [pc, #380]	; (8005178 <HAL_DMA_Init+0x658>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d072      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a5d      	ldr	r2, [pc, #372]	; (800517c <HAL_DMA_Init+0x65c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d06d      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a5c      	ldr	r2, [pc, #368]	; (8005180 <HAL_DMA_Init+0x660>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d068      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a5a      	ldr	r2, [pc, #360]	; (8005184 <HAL_DMA_Init+0x664>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d063      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a59      	ldr	r2, [pc, #356]	; (8005188 <HAL_DMA_Init+0x668>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d05e      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a57      	ldr	r2, [pc, #348]	; (800518c <HAL_DMA_Init+0x66c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d059      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a56      	ldr	r2, [pc, #344]	; (8005190 <HAL_DMA_Init+0x670>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d054      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a54      	ldr	r2, [pc, #336]	; (8005194 <HAL_DMA_Init+0x674>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d04f      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a53      	ldr	r2, [pc, #332]	; (8005198 <HAL_DMA_Init+0x678>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d04a      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a51      	ldr	r2, [pc, #324]	; (800519c <HAL_DMA_Init+0x67c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d045      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a50      	ldr	r2, [pc, #320]	; (80051a0 <HAL_DMA_Init+0x680>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d040      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a4e      	ldr	r2, [pc, #312]	; (80051a4 <HAL_DMA_Init+0x684>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d03b      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a4d      	ldr	r2, [pc, #308]	; (80051a8 <HAL_DMA_Init+0x688>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d036      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a4b      	ldr	r2, [pc, #300]	; (80051ac <HAL_DMA_Init+0x68c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d031      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a4a      	ldr	r2, [pc, #296]	; (80051b0 <HAL_DMA_Init+0x690>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d02c      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a48      	ldr	r2, [pc, #288]	; (80051b4 <HAL_DMA_Init+0x694>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d027      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a47      	ldr	r2, [pc, #284]	; (80051b8 <HAL_DMA_Init+0x698>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d022      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a45      	ldr	r2, [pc, #276]	; (80051bc <HAL_DMA_Init+0x69c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d01d      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a44      	ldr	r2, [pc, #272]	; (80051c0 <HAL_DMA_Init+0x6a0>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d018      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a42      	ldr	r2, [pc, #264]	; (80051c4 <HAL_DMA_Init+0x6a4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a41      	ldr	r2, [pc, #260]	; (80051c8 <HAL_DMA_Init+0x6a8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00e      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a3f      	ldr	r2, [pc, #252]	; (80051cc <HAL_DMA_Init+0x6ac>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d009      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a3e      	ldr	r2, [pc, #248]	; (80051d0 <HAL_DMA_Init+0x6b0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <HAL_DMA_Init+0x5c6>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a3c      	ldr	r2, [pc, #240]	; (80051d4 <HAL_DMA_Init+0x6b4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d101      	bne.n	80050ea <HAL_DMA_Init+0x5ca>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <HAL_DMA_Init+0x5cc>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d032      	beq.n	8005156 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f002 fa43 	bl	800757c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b80      	cmp	r3, #128	; 0x80
 80050fc:	d102      	bne.n	8005104 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005118:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d010      	beq.n	8005144 <HAL_DMA_Init+0x624>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b08      	cmp	r3, #8
 8005128:	d80c      	bhi.n	8005144 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f002 fac0 	bl	80076b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005140:	605a      	str	r2, [r3, #4]
 8005142:	e008      	b.n	8005156 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	a7fdabf8 	.word	0xa7fdabf8
 8005174:	cccccccd 	.word	0xcccccccd
 8005178:	40020010 	.word	0x40020010
 800517c:	40020028 	.word	0x40020028
 8005180:	40020040 	.word	0x40020040
 8005184:	40020058 	.word	0x40020058
 8005188:	40020070 	.word	0x40020070
 800518c:	40020088 	.word	0x40020088
 8005190:	400200a0 	.word	0x400200a0
 8005194:	400200b8 	.word	0x400200b8
 8005198:	40020410 	.word	0x40020410
 800519c:	40020428 	.word	0x40020428
 80051a0:	40020440 	.word	0x40020440
 80051a4:	40020458 	.word	0x40020458
 80051a8:	40020470 	.word	0x40020470
 80051ac:	40020488 	.word	0x40020488
 80051b0:	400204a0 	.word	0x400204a0
 80051b4:	400204b8 	.word	0x400204b8
 80051b8:	58025408 	.word	0x58025408
 80051bc:	5802541c 	.word	0x5802541c
 80051c0:	58025430 	.word	0x58025430
 80051c4:	58025444 	.word	0x58025444
 80051c8:	58025458 	.word	0x58025458
 80051cc:	5802546c 	.word	0x5802546c
 80051d0:	58025480 	.word	0x58025480
 80051d4:	58025494 	.word	0x58025494

080051d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e226      	b.n	8005642 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_DMA_Start_IT+0x2a>
 80051fe:	2302      	movs	r3, #2
 8005200:	e21f      	b.n	8005642 <HAL_DMA_Start_IT+0x46a>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b01      	cmp	r3, #1
 8005214:	f040 820a 	bne.w	800562c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a68      	ldr	r2, [pc, #416]	; (80053cc <HAL_DMA_Start_IT+0x1f4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d04a      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a66      	ldr	r2, [pc, #408]	; (80053d0 <HAL_DMA_Start_IT+0x1f8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d045      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a65      	ldr	r2, [pc, #404]	; (80053d4 <HAL_DMA_Start_IT+0x1fc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d040      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a63      	ldr	r2, [pc, #396]	; (80053d8 <HAL_DMA_Start_IT+0x200>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d03b      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a62      	ldr	r2, [pc, #392]	; (80053dc <HAL_DMA_Start_IT+0x204>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d036      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a60      	ldr	r2, [pc, #384]	; (80053e0 <HAL_DMA_Start_IT+0x208>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d031      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a5f      	ldr	r2, [pc, #380]	; (80053e4 <HAL_DMA_Start_IT+0x20c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d02c      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a5d      	ldr	r2, [pc, #372]	; (80053e8 <HAL_DMA_Start_IT+0x210>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d027      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a5c      	ldr	r2, [pc, #368]	; (80053ec <HAL_DMA_Start_IT+0x214>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d022      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a5a      	ldr	r2, [pc, #360]	; (80053f0 <HAL_DMA_Start_IT+0x218>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d01d      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a59      	ldr	r2, [pc, #356]	; (80053f4 <HAL_DMA_Start_IT+0x21c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d018      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a57      	ldr	r2, [pc, #348]	; (80053f8 <HAL_DMA_Start_IT+0x220>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d013      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a56      	ldr	r2, [pc, #344]	; (80053fc <HAL_DMA_Start_IT+0x224>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00e      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a54      	ldr	r2, [pc, #336]	; (8005400 <HAL_DMA_Start_IT+0x228>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d009      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a53      	ldr	r2, [pc, #332]	; (8005404 <HAL_DMA_Start_IT+0x22c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d004      	beq.n	80052c6 <HAL_DMA_Start_IT+0xee>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a51      	ldr	r2, [pc, #324]	; (8005408 <HAL_DMA_Start_IT+0x230>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d108      	bne.n	80052d8 <HAL_DMA_Start_IT+0x100>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0201 	bic.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	e007      	b.n	80052e8 <HAL_DMA_Start_IT+0x110>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0201 	bic.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f001 fe6a 	bl	8006fc8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a34      	ldr	r2, [pc, #208]	; (80053cc <HAL_DMA_Start_IT+0x1f4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d04a      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a33      	ldr	r2, [pc, #204]	; (80053d0 <HAL_DMA_Start_IT+0x1f8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d045      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a31      	ldr	r2, [pc, #196]	; (80053d4 <HAL_DMA_Start_IT+0x1fc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d040      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a30      	ldr	r2, [pc, #192]	; (80053d8 <HAL_DMA_Start_IT+0x200>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d03b      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a2e      	ldr	r2, [pc, #184]	; (80053dc <HAL_DMA_Start_IT+0x204>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d036      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a2d      	ldr	r2, [pc, #180]	; (80053e0 <HAL_DMA_Start_IT+0x208>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d031      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a2b      	ldr	r2, [pc, #172]	; (80053e4 <HAL_DMA_Start_IT+0x20c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d02c      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a2a      	ldr	r2, [pc, #168]	; (80053e8 <HAL_DMA_Start_IT+0x210>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d027      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a28      	ldr	r2, [pc, #160]	; (80053ec <HAL_DMA_Start_IT+0x214>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d022      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a27      	ldr	r2, [pc, #156]	; (80053f0 <HAL_DMA_Start_IT+0x218>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d01d      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a25      	ldr	r2, [pc, #148]	; (80053f4 <HAL_DMA_Start_IT+0x21c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d018      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a24      	ldr	r2, [pc, #144]	; (80053f8 <HAL_DMA_Start_IT+0x220>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d013      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a22      	ldr	r2, [pc, #136]	; (80053fc <HAL_DMA_Start_IT+0x224>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00e      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a21      	ldr	r2, [pc, #132]	; (8005400 <HAL_DMA_Start_IT+0x228>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d009      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1f      	ldr	r2, [pc, #124]	; (8005404 <HAL_DMA_Start_IT+0x22c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d004      	beq.n	8005394 <HAL_DMA_Start_IT+0x1bc>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1e      	ldr	r2, [pc, #120]	; (8005408 <HAL_DMA_Start_IT+0x230>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d101      	bne.n	8005398 <HAL_DMA_Start_IT+0x1c0>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <HAL_DMA_Start_IT+0x1c2>
 8005398:	2300      	movs	r3, #0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d036      	beq.n	800540c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f023 021e 	bic.w	r2, r3, #30
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0216 	orr.w	r2, r2, #22
 80053b0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d03e      	beq.n	8005438 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0208 	orr.w	r2, r2, #8
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	e035      	b.n	8005438 <HAL_DMA_Start_IT+0x260>
 80053cc:	40020010 	.word	0x40020010
 80053d0:	40020028 	.word	0x40020028
 80053d4:	40020040 	.word	0x40020040
 80053d8:	40020058 	.word	0x40020058
 80053dc:	40020070 	.word	0x40020070
 80053e0:	40020088 	.word	0x40020088
 80053e4:	400200a0 	.word	0x400200a0
 80053e8:	400200b8 	.word	0x400200b8
 80053ec:	40020410 	.word	0x40020410
 80053f0:	40020428 	.word	0x40020428
 80053f4:	40020440 	.word	0x40020440
 80053f8:	40020458 	.word	0x40020458
 80053fc:	40020470 	.word	0x40020470
 8005400:	40020488 	.word	0x40020488
 8005404:	400204a0 	.word	0x400204a0
 8005408:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 020e 	bic.w	r2, r3, #14
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 020a 	orr.w	r2, r2, #10
 800541e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0204 	orr.w	r2, r2, #4
 8005436:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a83      	ldr	r2, [pc, #524]	; (800564c <HAL_DMA_Start_IT+0x474>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d072      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a82      	ldr	r2, [pc, #520]	; (8005650 <HAL_DMA_Start_IT+0x478>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d06d      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a80      	ldr	r2, [pc, #512]	; (8005654 <HAL_DMA_Start_IT+0x47c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d068      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a7f      	ldr	r2, [pc, #508]	; (8005658 <HAL_DMA_Start_IT+0x480>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d063      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a7d      	ldr	r2, [pc, #500]	; (800565c <HAL_DMA_Start_IT+0x484>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d05e      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a7c      	ldr	r2, [pc, #496]	; (8005660 <HAL_DMA_Start_IT+0x488>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d059      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a7a      	ldr	r2, [pc, #488]	; (8005664 <HAL_DMA_Start_IT+0x48c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d054      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a79      	ldr	r2, [pc, #484]	; (8005668 <HAL_DMA_Start_IT+0x490>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d04f      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a77      	ldr	r2, [pc, #476]	; (800566c <HAL_DMA_Start_IT+0x494>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d04a      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a76      	ldr	r2, [pc, #472]	; (8005670 <HAL_DMA_Start_IT+0x498>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d045      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a74      	ldr	r2, [pc, #464]	; (8005674 <HAL_DMA_Start_IT+0x49c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d040      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a73      	ldr	r2, [pc, #460]	; (8005678 <HAL_DMA_Start_IT+0x4a0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d03b      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a71      	ldr	r2, [pc, #452]	; (800567c <HAL_DMA_Start_IT+0x4a4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d036      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a70      	ldr	r2, [pc, #448]	; (8005680 <HAL_DMA_Start_IT+0x4a8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d031      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a6e      	ldr	r2, [pc, #440]	; (8005684 <HAL_DMA_Start_IT+0x4ac>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d02c      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a6d      	ldr	r2, [pc, #436]	; (8005688 <HAL_DMA_Start_IT+0x4b0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d027      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a6b      	ldr	r2, [pc, #428]	; (800568c <HAL_DMA_Start_IT+0x4b4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d022      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a6a      	ldr	r2, [pc, #424]	; (8005690 <HAL_DMA_Start_IT+0x4b8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d01d      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a68      	ldr	r2, [pc, #416]	; (8005694 <HAL_DMA_Start_IT+0x4bc>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d018      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a67      	ldr	r2, [pc, #412]	; (8005698 <HAL_DMA_Start_IT+0x4c0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d013      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a65      	ldr	r2, [pc, #404]	; (800569c <HAL_DMA_Start_IT+0x4c4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00e      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a64      	ldr	r2, [pc, #400]	; (80056a0 <HAL_DMA_Start_IT+0x4c8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d009      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a62      	ldr	r2, [pc, #392]	; (80056a4 <HAL_DMA_Start_IT+0x4cc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <HAL_DMA_Start_IT+0x350>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a61      	ldr	r2, [pc, #388]	; (80056a8 <HAL_DMA_Start_IT+0x4d0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d101      	bne.n	800552c <HAL_DMA_Start_IT+0x354>
 8005528:	2301      	movs	r3, #1
 800552a:	e000      	b.n	800552e <HAL_DMA_Start_IT+0x356>
 800552c:	2300      	movs	r3, #0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01a      	beq.n	8005568 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800554a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800554e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005566:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a37      	ldr	r2, [pc, #220]	; (800564c <HAL_DMA_Start_IT+0x474>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d04a      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a36      	ldr	r2, [pc, #216]	; (8005650 <HAL_DMA_Start_IT+0x478>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d045      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a34      	ldr	r2, [pc, #208]	; (8005654 <HAL_DMA_Start_IT+0x47c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d040      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a33      	ldr	r2, [pc, #204]	; (8005658 <HAL_DMA_Start_IT+0x480>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d03b      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a31      	ldr	r2, [pc, #196]	; (800565c <HAL_DMA_Start_IT+0x484>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d036      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a30      	ldr	r2, [pc, #192]	; (8005660 <HAL_DMA_Start_IT+0x488>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d031      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a2e      	ldr	r2, [pc, #184]	; (8005664 <HAL_DMA_Start_IT+0x48c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d02c      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a2d      	ldr	r2, [pc, #180]	; (8005668 <HAL_DMA_Start_IT+0x490>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d027      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a2b      	ldr	r2, [pc, #172]	; (800566c <HAL_DMA_Start_IT+0x494>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d022      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a2a      	ldr	r2, [pc, #168]	; (8005670 <HAL_DMA_Start_IT+0x498>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d01d      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a28      	ldr	r2, [pc, #160]	; (8005674 <HAL_DMA_Start_IT+0x49c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d018      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a27      	ldr	r2, [pc, #156]	; (8005678 <HAL_DMA_Start_IT+0x4a0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d013      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a25      	ldr	r2, [pc, #148]	; (800567c <HAL_DMA_Start_IT+0x4a4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00e      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a24      	ldr	r2, [pc, #144]	; (8005680 <HAL_DMA_Start_IT+0x4a8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d009      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a22      	ldr	r2, [pc, #136]	; (8005684 <HAL_DMA_Start_IT+0x4ac>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d004      	beq.n	8005608 <HAL_DMA_Start_IT+0x430>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a21      	ldr	r2, [pc, #132]	; (8005688 <HAL_DMA_Start_IT+0x4b0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d108      	bne.n	800561a <HAL_DMA_Start_IT+0x442>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	e012      	b.n	8005640 <HAL_DMA_Start_IT+0x468>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0201 	orr.w	r2, r2, #1
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	e009      	b.n	8005640 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005632:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005640:	7dfb      	ldrb	r3, [r7, #23]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40020010 	.word	0x40020010
 8005650:	40020028 	.word	0x40020028
 8005654:	40020040 	.word	0x40020040
 8005658:	40020058 	.word	0x40020058
 800565c:	40020070 	.word	0x40020070
 8005660:	40020088 	.word	0x40020088
 8005664:	400200a0 	.word	0x400200a0
 8005668:	400200b8 	.word	0x400200b8
 800566c:	40020410 	.word	0x40020410
 8005670:	40020428 	.word	0x40020428
 8005674:	40020440 	.word	0x40020440
 8005678:	40020458 	.word	0x40020458
 800567c:	40020470 	.word	0x40020470
 8005680:	40020488 	.word	0x40020488
 8005684:	400204a0 	.word	0x400204a0
 8005688:	400204b8 	.word	0x400204b8
 800568c:	58025408 	.word	0x58025408
 8005690:	5802541c 	.word	0x5802541c
 8005694:	58025430 	.word	0x58025430
 8005698:	58025444 	.word	0x58025444
 800569c:	58025458 	.word	0x58025458
 80056a0:	5802546c 	.word	0x5802546c
 80056a4:	58025480 	.word	0x58025480
 80056a8:	58025494 	.word	0x58025494

080056ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80056b4:	f7fd f9d6 	bl	8002a64 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e2dc      	b.n	8005c7e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d008      	beq.n	80056e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2280      	movs	r2, #128	; 0x80
 80056d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e2cd      	b.n	8005c7e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a76      	ldr	r2, [pc, #472]	; (80058c0 <HAL_DMA_Abort+0x214>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d04a      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a74      	ldr	r2, [pc, #464]	; (80058c4 <HAL_DMA_Abort+0x218>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d045      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a73      	ldr	r2, [pc, #460]	; (80058c8 <HAL_DMA_Abort+0x21c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d040      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a71      	ldr	r2, [pc, #452]	; (80058cc <HAL_DMA_Abort+0x220>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d03b      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a70      	ldr	r2, [pc, #448]	; (80058d0 <HAL_DMA_Abort+0x224>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d036      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a6e      	ldr	r2, [pc, #440]	; (80058d4 <HAL_DMA_Abort+0x228>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d031      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a6d      	ldr	r2, [pc, #436]	; (80058d8 <HAL_DMA_Abort+0x22c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d02c      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a6b      	ldr	r2, [pc, #428]	; (80058dc <HAL_DMA_Abort+0x230>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d027      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a6a      	ldr	r2, [pc, #424]	; (80058e0 <HAL_DMA_Abort+0x234>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d022      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a68      	ldr	r2, [pc, #416]	; (80058e4 <HAL_DMA_Abort+0x238>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01d      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a67      	ldr	r2, [pc, #412]	; (80058e8 <HAL_DMA_Abort+0x23c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d018      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a65      	ldr	r2, [pc, #404]	; (80058ec <HAL_DMA_Abort+0x240>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a64      	ldr	r2, [pc, #400]	; (80058f0 <HAL_DMA_Abort+0x244>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a62      	ldr	r2, [pc, #392]	; (80058f4 <HAL_DMA_Abort+0x248>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a61      	ldr	r2, [pc, #388]	; (80058f8 <HAL_DMA_Abort+0x24c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_DMA_Abort+0xd6>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a5f      	ldr	r2, [pc, #380]	; (80058fc <HAL_DMA_Abort+0x250>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d101      	bne.n	8005786 <HAL_DMA_Abort+0xda>
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <HAL_DMA_Abort+0xdc>
 8005786:	2300      	movs	r3, #0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d013      	beq.n	80057b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 021e 	bic.w	r2, r2, #30
 800579a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	e00a      	b.n	80057ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 020e 	bic.w	r2, r2, #14
 80057c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a3c      	ldr	r2, [pc, #240]	; (80058c0 <HAL_DMA_Abort+0x214>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d072      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a3a      	ldr	r2, [pc, #232]	; (80058c4 <HAL_DMA_Abort+0x218>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d06d      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a39      	ldr	r2, [pc, #228]	; (80058c8 <HAL_DMA_Abort+0x21c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d068      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a37      	ldr	r2, [pc, #220]	; (80058cc <HAL_DMA_Abort+0x220>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d063      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a36      	ldr	r2, [pc, #216]	; (80058d0 <HAL_DMA_Abort+0x224>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d05e      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a34      	ldr	r2, [pc, #208]	; (80058d4 <HAL_DMA_Abort+0x228>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d059      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a33      	ldr	r2, [pc, #204]	; (80058d8 <HAL_DMA_Abort+0x22c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d054      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a31      	ldr	r2, [pc, #196]	; (80058dc <HAL_DMA_Abort+0x230>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d04f      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a30      	ldr	r2, [pc, #192]	; (80058e0 <HAL_DMA_Abort+0x234>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d04a      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a2e      	ldr	r2, [pc, #184]	; (80058e4 <HAL_DMA_Abort+0x238>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d045      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a2d      	ldr	r2, [pc, #180]	; (80058e8 <HAL_DMA_Abort+0x23c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d040      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a2b      	ldr	r2, [pc, #172]	; (80058ec <HAL_DMA_Abort+0x240>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d03b      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a2a      	ldr	r2, [pc, #168]	; (80058f0 <HAL_DMA_Abort+0x244>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d036      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a28      	ldr	r2, [pc, #160]	; (80058f4 <HAL_DMA_Abort+0x248>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d031      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a27      	ldr	r2, [pc, #156]	; (80058f8 <HAL_DMA_Abort+0x24c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d02c      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a25      	ldr	r2, [pc, #148]	; (80058fc <HAL_DMA_Abort+0x250>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d027      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a24      	ldr	r2, [pc, #144]	; (8005900 <HAL_DMA_Abort+0x254>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d022      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a22      	ldr	r2, [pc, #136]	; (8005904 <HAL_DMA_Abort+0x258>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d01d      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a21      	ldr	r2, [pc, #132]	; (8005908 <HAL_DMA_Abort+0x25c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d018      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1f      	ldr	r2, [pc, #124]	; (800590c <HAL_DMA_Abort+0x260>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1e      	ldr	r2, [pc, #120]	; (8005910 <HAL_DMA_Abort+0x264>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00e      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1c      	ldr	r2, [pc, #112]	; (8005914 <HAL_DMA_Abort+0x268>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d009      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1b      	ldr	r2, [pc, #108]	; (8005918 <HAL_DMA_Abort+0x26c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d004      	beq.n	80058ba <HAL_DMA_Abort+0x20e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a19      	ldr	r2, [pc, #100]	; (800591c <HAL_DMA_Abort+0x270>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d132      	bne.n	8005920 <HAL_DMA_Abort+0x274>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e031      	b.n	8005922 <HAL_DMA_Abort+0x276>
 80058be:	bf00      	nop
 80058c0:	40020010 	.word	0x40020010
 80058c4:	40020028 	.word	0x40020028
 80058c8:	40020040 	.word	0x40020040
 80058cc:	40020058 	.word	0x40020058
 80058d0:	40020070 	.word	0x40020070
 80058d4:	40020088 	.word	0x40020088
 80058d8:	400200a0 	.word	0x400200a0
 80058dc:	400200b8 	.word	0x400200b8
 80058e0:	40020410 	.word	0x40020410
 80058e4:	40020428 	.word	0x40020428
 80058e8:	40020440 	.word	0x40020440
 80058ec:	40020458 	.word	0x40020458
 80058f0:	40020470 	.word	0x40020470
 80058f4:	40020488 	.word	0x40020488
 80058f8:	400204a0 	.word	0x400204a0
 80058fc:	400204b8 	.word	0x400204b8
 8005900:	58025408 	.word	0x58025408
 8005904:	5802541c 	.word	0x5802541c
 8005908:	58025430 	.word	0x58025430
 800590c:	58025444 	.word	0x58025444
 8005910:	58025458 	.word	0x58025458
 8005914:	5802546c 	.word	0x5802546c
 8005918:	58025480 	.word	0x58025480
 800591c:	58025494 	.word	0x58025494
 8005920:	2300      	movs	r3, #0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005934:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6d      	ldr	r2, [pc, #436]	; (8005af0 <HAL_DMA_Abort+0x444>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d04a      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a6b      	ldr	r2, [pc, #428]	; (8005af4 <HAL_DMA_Abort+0x448>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d045      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a6a      	ldr	r2, [pc, #424]	; (8005af8 <HAL_DMA_Abort+0x44c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d040      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a68      	ldr	r2, [pc, #416]	; (8005afc <HAL_DMA_Abort+0x450>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d03b      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a67      	ldr	r2, [pc, #412]	; (8005b00 <HAL_DMA_Abort+0x454>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d036      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a65      	ldr	r2, [pc, #404]	; (8005b04 <HAL_DMA_Abort+0x458>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d031      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a64      	ldr	r2, [pc, #400]	; (8005b08 <HAL_DMA_Abort+0x45c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d02c      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a62      	ldr	r2, [pc, #392]	; (8005b0c <HAL_DMA_Abort+0x460>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d027      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a61      	ldr	r2, [pc, #388]	; (8005b10 <HAL_DMA_Abort+0x464>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d022      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a5f      	ldr	r2, [pc, #380]	; (8005b14 <HAL_DMA_Abort+0x468>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d01d      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a5e      	ldr	r2, [pc, #376]	; (8005b18 <HAL_DMA_Abort+0x46c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d018      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a5c      	ldr	r2, [pc, #368]	; (8005b1c <HAL_DMA_Abort+0x470>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a5b      	ldr	r2, [pc, #364]	; (8005b20 <HAL_DMA_Abort+0x474>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00e      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a59      	ldr	r2, [pc, #356]	; (8005b24 <HAL_DMA_Abort+0x478>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d009      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a58      	ldr	r2, [pc, #352]	; (8005b28 <HAL_DMA_Abort+0x47c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d004      	beq.n	80059d6 <HAL_DMA_Abort+0x32a>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a56      	ldr	r2, [pc, #344]	; (8005b2c <HAL_DMA_Abort+0x480>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d108      	bne.n	80059e8 <HAL_DMA_Abort+0x33c>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0201 	bic.w	r2, r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	e007      	b.n	80059f8 <HAL_DMA_Abort+0x34c>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0201 	bic.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80059f8:	e013      	b.n	8005a22 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059fa:	f7fd f833 	bl	8002a64 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b05      	cmp	r3, #5
 8005a06:	d90c      	bls.n	8005a22 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2203      	movs	r2, #3
 8005a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e12d      	b.n	8005c7e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e5      	bne.n	80059fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a2f      	ldr	r2, [pc, #188]	; (8005af0 <HAL_DMA_Abort+0x444>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d04a      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a2d      	ldr	r2, [pc, #180]	; (8005af4 <HAL_DMA_Abort+0x448>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d045      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a2c      	ldr	r2, [pc, #176]	; (8005af8 <HAL_DMA_Abort+0x44c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d040      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2a      	ldr	r2, [pc, #168]	; (8005afc <HAL_DMA_Abort+0x450>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d03b      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a29      	ldr	r2, [pc, #164]	; (8005b00 <HAL_DMA_Abort+0x454>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d036      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a27      	ldr	r2, [pc, #156]	; (8005b04 <HAL_DMA_Abort+0x458>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d031      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a26      	ldr	r2, [pc, #152]	; (8005b08 <HAL_DMA_Abort+0x45c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d02c      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a24      	ldr	r2, [pc, #144]	; (8005b0c <HAL_DMA_Abort+0x460>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d027      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a23      	ldr	r2, [pc, #140]	; (8005b10 <HAL_DMA_Abort+0x464>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d022      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a21      	ldr	r2, [pc, #132]	; (8005b14 <HAL_DMA_Abort+0x468>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d01d      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a20      	ldr	r2, [pc, #128]	; (8005b18 <HAL_DMA_Abort+0x46c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d018      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1e      	ldr	r2, [pc, #120]	; (8005b1c <HAL_DMA_Abort+0x470>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1d      	ldr	r2, [pc, #116]	; (8005b20 <HAL_DMA_Abort+0x474>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00e      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1b      	ldr	r2, [pc, #108]	; (8005b24 <HAL_DMA_Abort+0x478>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d009      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1a      	ldr	r2, [pc, #104]	; (8005b28 <HAL_DMA_Abort+0x47c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <HAL_DMA_Abort+0x422>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a18      	ldr	r2, [pc, #96]	; (8005b2c <HAL_DMA_Abort+0x480>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d101      	bne.n	8005ad2 <HAL_DMA_Abort+0x426>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <HAL_DMA_Abort+0x428>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d02b      	beq.n	8005b30 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005adc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae2:	f003 031f 	and.w	r3, r3, #31
 8005ae6:	223f      	movs	r2, #63	; 0x3f
 8005ae8:	409a      	lsls	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	609a      	str	r2, [r3, #8]
 8005aee:	e02a      	b.n	8005b46 <HAL_DMA_Abort+0x49a>
 8005af0:	40020010 	.word	0x40020010
 8005af4:	40020028 	.word	0x40020028
 8005af8:	40020040 	.word	0x40020040
 8005afc:	40020058 	.word	0x40020058
 8005b00:	40020070 	.word	0x40020070
 8005b04:	40020088 	.word	0x40020088
 8005b08:	400200a0 	.word	0x400200a0
 8005b0c:	400200b8 	.word	0x400200b8
 8005b10:	40020410 	.word	0x40020410
 8005b14:	40020428 	.word	0x40020428
 8005b18:	40020440 	.word	0x40020440
 8005b1c:	40020458 	.word	0x40020458
 8005b20:	40020470 	.word	0x40020470
 8005b24:	40020488 	.word	0x40020488
 8005b28:	400204a0 	.word	0x400204a0
 8005b2c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b34:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	2201      	movs	r2, #1
 8005b40:	409a      	lsls	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a4f      	ldr	r2, [pc, #316]	; (8005c88 <HAL_DMA_Abort+0x5dc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d072      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a4d      	ldr	r2, [pc, #308]	; (8005c8c <HAL_DMA_Abort+0x5e0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d06d      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a4c      	ldr	r2, [pc, #304]	; (8005c90 <HAL_DMA_Abort+0x5e4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d068      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a4a      	ldr	r2, [pc, #296]	; (8005c94 <HAL_DMA_Abort+0x5e8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d063      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a49      	ldr	r2, [pc, #292]	; (8005c98 <HAL_DMA_Abort+0x5ec>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d05e      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a47      	ldr	r2, [pc, #284]	; (8005c9c <HAL_DMA_Abort+0x5f0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d059      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a46      	ldr	r2, [pc, #280]	; (8005ca0 <HAL_DMA_Abort+0x5f4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d054      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a44      	ldr	r2, [pc, #272]	; (8005ca4 <HAL_DMA_Abort+0x5f8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d04f      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a43      	ldr	r2, [pc, #268]	; (8005ca8 <HAL_DMA_Abort+0x5fc>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d04a      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a41      	ldr	r2, [pc, #260]	; (8005cac <HAL_DMA_Abort+0x600>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d045      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a40      	ldr	r2, [pc, #256]	; (8005cb0 <HAL_DMA_Abort+0x604>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d040      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a3e      	ldr	r2, [pc, #248]	; (8005cb4 <HAL_DMA_Abort+0x608>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d03b      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a3d      	ldr	r2, [pc, #244]	; (8005cb8 <HAL_DMA_Abort+0x60c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d036      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a3b      	ldr	r2, [pc, #236]	; (8005cbc <HAL_DMA_Abort+0x610>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d031      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a3a      	ldr	r2, [pc, #232]	; (8005cc0 <HAL_DMA_Abort+0x614>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d02c      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a38      	ldr	r2, [pc, #224]	; (8005cc4 <HAL_DMA_Abort+0x618>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d027      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a37      	ldr	r2, [pc, #220]	; (8005cc8 <HAL_DMA_Abort+0x61c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d022      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a35      	ldr	r2, [pc, #212]	; (8005ccc <HAL_DMA_Abort+0x620>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01d      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a34      	ldr	r2, [pc, #208]	; (8005cd0 <HAL_DMA_Abort+0x624>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d018      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a32      	ldr	r2, [pc, #200]	; (8005cd4 <HAL_DMA_Abort+0x628>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a31      	ldr	r2, [pc, #196]	; (8005cd8 <HAL_DMA_Abort+0x62c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00e      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2f      	ldr	r2, [pc, #188]	; (8005cdc <HAL_DMA_Abort+0x630>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d009      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2e      	ldr	r2, [pc, #184]	; (8005ce0 <HAL_DMA_Abort+0x634>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d004      	beq.n	8005c36 <HAL_DMA_Abort+0x58a>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2c      	ldr	r2, [pc, #176]	; (8005ce4 <HAL_DMA_Abort+0x638>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d101      	bne.n	8005c3a <HAL_DMA_Abort+0x58e>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <HAL_DMA_Abort+0x590>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d015      	beq.n	8005c6c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c48:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00c      	beq.n	8005c6c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c60:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c6a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	40020010 	.word	0x40020010
 8005c8c:	40020028 	.word	0x40020028
 8005c90:	40020040 	.word	0x40020040
 8005c94:	40020058 	.word	0x40020058
 8005c98:	40020070 	.word	0x40020070
 8005c9c:	40020088 	.word	0x40020088
 8005ca0:	400200a0 	.word	0x400200a0
 8005ca4:	400200b8 	.word	0x400200b8
 8005ca8:	40020410 	.word	0x40020410
 8005cac:	40020428 	.word	0x40020428
 8005cb0:	40020440 	.word	0x40020440
 8005cb4:	40020458 	.word	0x40020458
 8005cb8:	40020470 	.word	0x40020470
 8005cbc:	40020488 	.word	0x40020488
 8005cc0:	400204a0 	.word	0x400204a0
 8005cc4:	400204b8 	.word	0x400204b8
 8005cc8:	58025408 	.word	0x58025408
 8005ccc:	5802541c 	.word	0x5802541c
 8005cd0:	58025430 	.word	0x58025430
 8005cd4:	58025444 	.word	0x58025444
 8005cd8:	58025458 	.word	0x58025458
 8005cdc:	5802546c 	.word	0x5802546c
 8005ce0:	58025480 	.word	0x58025480
 8005ce4:	58025494 	.word	0x58025494

08005ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e237      	b.n	800616a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d004      	beq.n	8005d10 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2280      	movs	r2, #128	; 0x80
 8005d0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e22c      	b.n	800616a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a5c      	ldr	r2, [pc, #368]	; (8005e88 <HAL_DMA_Abort_IT+0x1a0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d04a      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a5b      	ldr	r2, [pc, #364]	; (8005e8c <HAL_DMA_Abort_IT+0x1a4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d045      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a59      	ldr	r2, [pc, #356]	; (8005e90 <HAL_DMA_Abort_IT+0x1a8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d040      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a58      	ldr	r2, [pc, #352]	; (8005e94 <HAL_DMA_Abort_IT+0x1ac>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d03b      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a56      	ldr	r2, [pc, #344]	; (8005e98 <HAL_DMA_Abort_IT+0x1b0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d036      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a55      	ldr	r2, [pc, #340]	; (8005e9c <HAL_DMA_Abort_IT+0x1b4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d031      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a53      	ldr	r2, [pc, #332]	; (8005ea0 <HAL_DMA_Abort_IT+0x1b8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d02c      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a52      	ldr	r2, [pc, #328]	; (8005ea4 <HAL_DMA_Abort_IT+0x1bc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d027      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a50      	ldr	r2, [pc, #320]	; (8005ea8 <HAL_DMA_Abort_IT+0x1c0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d022      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a4f      	ldr	r2, [pc, #316]	; (8005eac <HAL_DMA_Abort_IT+0x1c4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d01d      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a4d      	ldr	r2, [pc, #308]	; (8005eb0 <HAL_DMA_Abort_IT+0x1c8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d018      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a4c      	ldr	r2, [pc, #304]	; (8005eb4 <HAL_DMA_Abort_IT+0x1cc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d013      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a4a      	ldr	r2, [pc, #296]	; (8005eb8 <HAL_DMA_Abort_IT+0x1d0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00e      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a49      	ldr	r2, [pc, #292]	; (8005ebc <HAL_DMA_Abort_IT+0x1d4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a47      	ldr	r2, [pc, #284]	; (8005ec0 <HAL_DMA_Abort_IT+0x1d8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <HAL_DMA_Abort_IT+0xc8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a46      	ldr	r2, [pc, #280]	; (8005ec4 <HAL_DMA_Abort_IT+0x1dc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d101      	bne.n	8005db4 <HAL_DMA_Abort_IT+0xcc>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <HAL_DMA_Abort_IT+0xce>
 8005db4:	2300      	movs	r3, #0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 8086 	beq.w	8005ec8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2204      	movs	r2, #4
 8005dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a2f      	ldr	r2, [pc, #188]	; (8005e88 <HAL_DMA_Abort_IT+0x1a0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d04a      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2e      	ldr	r2, [pc, #184]	; (8005e8c <HAL_DMA_Abort_IT+0x1a4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d045      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a2c      	ldr	r2, [pc, #176]	; (8005e90 <HAL_DMA_Abort_IT+0x1a8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d040      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2b      	ldr	r2, [pc, #172]	; (8005e94 <HAL_DMA_Abort_IT+0x1ac>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d03b      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a29      	ldr	r2, [pc, #164]	; (8005e98 <HAL_DMA_Abort_IT+0x1b0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d036      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a28      	ldr	r2, [pc, #160]	; (8005e9c <HAL_DMA_Abort_IT+0x1b4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d031      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a26      	ldr	r2, [pc, #152]	; (8005ea0 <HAL_DMA_Abort_IT+0x1b8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d02c      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a25      	ldr	r2, [pc, #148]	; (8005ea4 <HAL_DMA_Abort_IT+0x1bc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d027      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a23      	ldr	r2, [pc, #140]	; (8005ea8 <HAL_DMA_Abort_IT+0x1c0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d022      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a22      	ldr	r2, [pc, #136]	; (8005eac <HAL_DMA_Abort_IT+0x1c4>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d01d      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a20      	ldr	r2, [pc, #128]	; (8005eb0 <HAL_DMA_Abort_IT+0x1c8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d018      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1f      	ldr	r2, [pc, #124]	; (8005eb4 <HAL_DMA_Abort_IT+0x1cc>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d013      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1d      	ldr	r2, [pc, #116]	; (8005eb8 <HAL_DMA_Abort_IT+0x1d0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00e      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1c      	ldr	r2, [pc, #112]	; (8005ebc <HAL_DMA_Abort_IT+0x1d4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d009      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1a      	ldr	r2, [pc, #104]	; (8005ec0 <HAL_DMA_Abort_IT+0x1d8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_DMA_Abort_IT+0x17c>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a19      	ldr	r2, [pc, #100]	; (8005ec4 <HAL_DMA_Abort_IT+0x1dc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d108      	bne.n	8005e76 <HAL_DMA_Abort_IT+0x18e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0201 	bic.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	e178      	b.n	8006168 <HAL_DMA_Abort_IT+0x480>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0201 	bic.w	r2, r2, #1
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	e16f      	b.n	8006168 <HAL_DMA_Abort_IT+0x480>
 8005e88:	40020010 	.word	0x40020010
 8005e8c:	40020028 	.word	0x40020028
 8005e90:	40020040 	.word	0x40020040
 8005e94:	40020058 	.word	0x40020058
 8005e98:	40020070 	.word	0x40020070
 8005e9c:	40020088 	.word	0x40020088
 8005ea0:	400200a0 	.word	0x400200a0
 8005ea4:	400200b8 	.word	0x400200b8
 8005ea8:	40020410 	.word	0x40020410
 8005eac:	40020428 	.word	0x40020428
 8005eb0:	40020440 	.word	0x40020440
 8005eb4:	40020458 	.word	0x40020458
 8005eb8:	40020470 	.word	0x40020470
 8005ebc:	40020488 	.word	0x40020488
 8005ec0:	400204a0 	.word	0x400204a0
 8005ec4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 020e 	bic.w	r2, r2, #14
 8005ed6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a6c      	ldr	r2, [pc, #432]	; (8006090 <HAL_DMA_Abort_IT+0x3a8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d04a      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a6b      	ldr	r2, [pc, #428]	; (8006094 <HAL_DMA_Abort_IT+0x3ac>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d045      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a69      	ldr	r2, [pc, #420]	; (8006098 <HAL_DMA_Abort_IT+0x3b0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d040      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a68      	ldr	r2, [pc, #416]	; (800609c <HAL_DMA_Abort_IT+0x3b4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d03b      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a66      	ldr	r2, [pc, #408]	; (80060a0 <HAL_DMA_Abort_IT+0x3b8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d036      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a65      	ldr	r2, [pc, #404]	; (80060a4 <HAL_DMA_Abort_IT+0x3bc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d031      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a63      	ldr	r2, [pc, #396]	; (80060a8 <HAL_DMA_Abort_IT+0x3c0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d02c      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a62      	ldr	r2, [pc, #392]	; (80060ac <HAL_DMA_Abort_IT+0x3c4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d027      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a60      	ldr	r2, [pc, #384]	; (80060b0 <HAL_DMA_Abort_IT+0x3c8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d022      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a5f      	ldr	r2, [pc, #380]	; (80060b4 <HAL_DMA_Abort_IT+0x3cc>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d01d      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a5d      	ldr	r2, [pc, #372]	; (80060b8 <HAL_DMA_Abort_IT+0x3d0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d018      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a5c      	ldr	r2, [pc, #368]	; (80060bc <HAL_DMA_Abort_IT+0x3d4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d013      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a5a      	ldr	r2, [pc, #360]	; (80060c0 <HAL_DMA_Abort_IT+0x3d8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00e      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a59      	ldr	r2, [pc, #356]	; (80060c4 <HAL_DMA_Abort_IT+0x3dc>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d009      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a57      	ldr	r2, [pc, #348]	; (80060c8 <HAL_DMA_Abort_IT+0x3e0>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d004      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x290>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a56      	ldr	r2, [pc, #344]	; (80060cc <HAL_DMA_Abort_IT+0x3e4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d108      	bne.n	8005f8a <HAL_DMA_Abort_IT+0x2a2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0201 	bic.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	e007      	b.n	8005f9a <HAL_DMA_Abort_IT+0x2b2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0201 	bic.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a3c      	ldr	r2, [pc, #240]	; (8006090 <HAL_DMA_Abort_IT+0x3a8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d072      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a3a      	ldr	r2, [pc, #232]	; (8006094 <HAL_DMA_Abort_IT+0x3ac>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d06d      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a39      	ldr	r2, [pc, #228]	; (8006098 <HAL_DMA_Abort_IT+0x3b0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d068      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a37      	ldr	r2, [pc, #220]	; (800609c <HAL_DMA_Abort_IT+0x3b4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d063      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a36      	ldr	r2, [pc, #216]	; (80060a0 <HAL_DMA_Abort_IT+0x3b8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d05e      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a34      	ldr	r2, [pc, #208]	; (80060a4 <HAL_DMA_Abort_IT+0x3bc>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d059      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a33      	ldr	r2, [pc, #204]	; (80060a8 <HAL_DMA_Abort_IT+0x3c0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d054      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a31      	ldr	r2, [pc, #196]	; (80060ac <HAL_DMA_Abort_IT+0x3c4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d04f      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a30      	ldr	r2, [pc, #192]	; (80060b0 <HAL_DMA_Abort_IT+0x3c8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d04a      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a2e      	ldr	r2, [pc, #184]	; (80060b4 <HAL_DMA_Abort_IT+0x3cc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d045      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a2d      	ldr	r2, [pc, #180]	; (80060b8 <HAL_DMA_Abort_IT+0x3d0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d040      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a2b      	ldr	r2, [pc, #172]	; (80060bc <HAL_DMA_Abort_IT+0x3d4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d03b      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a2a      	ldr	r2, [pc, #168]	; (80060c0 <HAL_DMA_Abort_IT+0x3d8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d036      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a28      	ldr	r2, [pc, #160]	; (80060c4 <HAL_DMA_Abort_IT+0x3dc>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d031      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a27      	ldr	r2, [pc, #156]	; (80060c8 <HAL_DMA_Abort_IT+0x3e0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d02c      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a25      	ldr	r2, [pc, #148]	; (80060cc <HAL_DMA_Abort_IT+0x3e4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d027      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a24      	ldr	r2, [pc, #144]	; (80060d0 <HAL_DMA_Abort_IT+0x3e8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d022      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a22      	ldr	r2, [pc, #136]	; (80060d4 <HAL_DMA_Abort_IT+0x3ec>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d01d      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a21      	ldr	r2, [pc, #132]	; (80060d8 <HAL_DMA_Abort_IT+0x3f0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d018      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a1f      	ldr	r2, [pc, #124]	; (80060dc <HAL_DMA_Abort_IT+0x3f4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d013      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1e      	ldr	r2, [pc, #120]	; (80060e0 <HAL_DMA_Abort_IT+0x3f8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00e      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1c      	ldr	r2, [pc, #112]	; (80060e4 <HAL_DMA_Abort_IT+0x3fc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d009      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a1b      	ldr	r2, [pc, #108]	; (80060e8 <HAL_DMA_Abort_IT+0x400>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d004      	beq.n	800608a <HAL_DMA_Abort_IT+0x3a2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a19      	ldr	r2, [pc, #100]	; (80060ec <HAL_DMA_Abort_IT+0x404>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d132      	bne.n	80060f0 <HAL_DMA_Abort_IT+0x408>
 800608a:	2301      	movs	r3, #1
 800608c:	e031      	b.n	80060f2 <HAL_DMA_Abort_IT+0x40a>
 800608e:	bf00      	nop
 8006090:	40020010 	.word	0x40020010
 8006094:	40020028 	.word	0x40020028
 8006098:	40020040 	.word	0x40020040
 800609c:	40020058 	.word	0x40020058
 80060a0:	40020070 	.word	0x40020070
 80060a4:	40020088 	.word	0x40020088
 80060a8:	400200a0 	.word	0x400200a0
 80060ac:	400200b8 	.word	0x400200b8
 80060b0:	40020410 	.word	0x40020410
 80060b4:	40020428 	.word	0x40020428
 80060b8:	40020440 	.word	0x40020440
 80060bc:	40020458 	.word	0x40020458
 80060c0:	40020470 	.word	0x40020470
 80060c4:	40020488 	.word	0x40020488
 80060c8:	400204a0 	.word	0x400204a0
 80060cc:	400204b8 	.word	0x400204b8
 80060d0:	58025408 	.word	0x58025408
 80060d4:	5802541c 	.word	0x5802541c
 80060d8:	58025430 	.word	0x58025430
 80060dc:	58025444 	.word	0x58025444
 80060e0:	58025458 	.word	0x58025458
 80060e4:	5802546c 	.word	0x5802546c
 80060e8:	58025480 	.word	0x58025480
 80060ec:	58025494 	.word	0x58025494
 80060f0:	2300      	movs	r3, #0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d028      	beq.n	8006148 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006104:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	2201      	movs	r2, #1
 8006116:	409a      	lsls	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006124:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00c      	beq.n	8006148 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800613c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006146:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop

08006174 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	; 0x28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006180:	4b67      	ldr	r3, [pc, #412]	; (8006320 <HAL_DMA_IRQHandler+0x1ac>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a67      	ldr	r2, [pc, #412]	; (8006324 <HAL_DMA_IRQHandler+0x1b0>)
 8006186:	fba2 2303 	umull	r2, r3, r2, r3
 800618a:	0a9b      	lsrs	r3, r3, #10
 800618c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006192:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006198:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a5f      	ldr	r2, [pc, #380]	; (8006328 <HAL_DMA_IRQHandler+0x1b4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d04a      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a5d      	ldr	r2, [pc, #372]	; (800632c <HAL_DMA_IRQHandler+0x1b8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d045      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a5c      	ldr	r2, [pc, #368]	; (8006330 <HAL_DMA_IRQHandler+0x1bc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d040      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a5a      	ldr	r2, [pc, #360]	; (8006334 <HAL_DMA_IRQHandler+0x1c0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d03b      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a59      	ldr	r2, [pc, #356]	; (8006338 <HAL_DMA_IRQHandler+0x1c4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d036      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a57      	ldr	r2, [pc, #348]	; (800633c <HAL_DMA_IRQHandler+0x1c8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d031      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a56      	ldr	r2, [pc, #344]	; (8006340 <HAL_DMA_IRQHandler+0x1cc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d02c      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a54      	ldr	r2, [pc, #336]	; (8006344 <HAL_DMA_IRQHandler+0x1d0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d027      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a53      	ldr	r2, [pc, #332]	; (8006348 <HAL_DMA_IRQHandler+0x1d4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d022      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a51      	ldr	r2, [pc, #324]	; (800634c <HAL_DMA_IRQHandler+0x1d8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d01d      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a50      	ldr	r2, [pc, #320]	; (8006350 <HAL_DMA_IRQHandler+0x1dc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d018      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a4e      	ldr	r2, [pc, #312]	; (8006354 <HAL_DMA_IRQHandler+0x1e0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a4d      	ldr	r2, [pc, #308]	; (8006358 <HAL_DMA_IRQHandler+0x1e4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00e      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a4b      	ldr	r2, [pc, #300]	; (800635c <HAL_DMA_IRQHandler+0x1e8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d009      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a4a      	ldr	r2, [pc, #296]	; (8006360 <HAL_DMA_IRQHandler+0x1ec>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d004      	beq.n	8006246 <HAL_DMA_IRQHandler+0xd2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a48      	ldr	r2, [pc, #288]	; (8006364 <HAL_DMA_IRQHandler+0x1f0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d101      	bne.n	800624a <HAL_DMA_IRQHandler+0xd6>
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <HAL_DMA_IRQHandler+0xd8>
 800624a:	2300      	movs	r3, #0
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 842b 	beq.w	8006aa8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006256:	f003 031f 	and.w	r3, r3, #31
 800625a:	2208      	movs	r2, #8
 800625c:	409a      	lsls	r2, r3
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	4013      	ands	r3, r2
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 80a2 	beq.w	80063ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a2e      	ldr	r2, [pc, #184]	; (8006328 <HAL_DMA_IRQHandler+0x1b4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d04a      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2d      	ldr	r2, [pc, #180]	; (800632c <HAL_DMA_IRQHandler+0x1b8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d045      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a2b      	ldr	r2, [pc, #172]	; (8006330 <HAL_DMA_IRQHandler+0x1bc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d040      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a2a      	ldr	r2, [pc, #168]	; (8006334 <HAL_DMA_IRQHandler+0x1c0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d03b      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a28      	ldr	r2, [pc, #160]	; (8006338 <HAL_DMA_IRQHandler+0x1c4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d036      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a27      	ldr	r2, [pc, #156]	; (800633c <HAL_DMA_IRQHandler+0x1c8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d031      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a25      	ldr	r2, [pc, #148]	; (8006340 <HAL_DMA_IRQHandler+0x1cc>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d02c      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a24      	ldr	r2, [pc, #144]	; (8006344 <HAL_DMA_IRQHandler+0x1d0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d027      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a22      	ldr	r2, [pc, #136]	; (8006348 <HAL_DMA_IRQHandler+0x1d4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d022      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a21      	ldr	r2, [pc, #132]	; (800634c <HAL_DMA_IRQHandler+0x1d8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d01d      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1f      	ldr	r2, [pc, #124]	; (8006350 <HAL_DMA_IRQHandler+0x1dc>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d018      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1e      	ldr	r2, [pc, #120]	; (8006354 <HAL_DMA_IRQHandler+0x1e0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d013      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1c      	ldr	r2, [pc, #112]	; (8006358 <HAL_DMA_IRQHandler+0x1e4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00e      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1b      	ldr	r2, [pc, #108]	; (800635c <HAL_DMA_IRQHandler+0x1e8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d009      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a19      	ldr	r2, [pc, #100]	; (8006360 <HAL_DMA_IRQHandler+0x1ec>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <HAL_DMA_IRQHandler+0x194>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a18      	ldr	r2, [pc, #96]	; (8006364 <HAL_DMA_IRQHandler+0x1f0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d12f      	bne.n	8006368 <HAL_DMA_IRQHandler+0x1f4>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b00      	cmp	r3, #0
 8006314:	bf14      	ite	ne
 8006316:	2301      	movne	r3, #1
 8006318:	2300      	moveq	r3, #0
 800631a:	b2db      	uxtb	r3, r3
 800631c:	e02e      	b.n	800637c <HAL_DMA_IRQHandler+0x208>
 800631e:	bf00      	nop
 8006320:	24000028 	.word	0x24000028
 8006324:	1b4e81b5 	.word	0x1b4e81b5
 8006328:	40020010 	.word	0x40020010
 800632c:	40020028 	.word	0x40020028
 8006330:	40020040 	.word	0x40020040
 8006334:	40020058 	.word	0x40020058
 8006338:	40020070 	.word	0x40020070
 800633c:	40020088 	.word	0x40020088
 8006340:	400200a0 	.word	0x400200a0
 8006344:	400200b8 	.word	0x400200b8
 8006348:	40020410 	.word	0x40020410
 800634c:	40020428 	.word	0x40020428
 8006350:	40020440 	.word	0x40020440
 8006354:	40020458 	.word	0x40020458
 8006358:	40020470 	.word	0x40020470
 800635c:	40020488 	.word	0x40020488
 8006360:	400204a0 	.word	0x400204a0
 8006364:	400204b8 	.word	0x400204b8
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0308 	and.w	r3, r3, #8
 8006372:	2b00      	cmp	r3, #0
 8006374:	bf14      	ite	ne
 8006376:	2301      	movne	r3, #1
 8006378:	2300      	moveq	r3, #0
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d015      	beq.n	80063ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0204 	bic.w	r2, r2, #4
 800638e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006394:	f003 031f 	and.w	r3, r3, #31
 8006398:	2208      	movs	r2, #8
 800639a:	409a      	lsls	r2, r3
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a4:	f043 0201 	orr.w	r2, r3, #1
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b0:	f003 031f 	and.w	r3, r3, #31
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d06e      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a69      	ldr	r2, [pc, #420]	; (800656c <HAL_DMA_IRQHandler+0x3f8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d04a      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a67      	ldr	r2, [pc, #412]	; (8006570 <HAL_DMA_IRQHandler+0x3fc>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d045      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a66      	ldr	r2, [pc, #408]	; (8006574 <HAL_DMA_IRQHandler+0x400>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d040      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a64      	ldr	r2, [pc, #400]	; (8006578 <HAL_DMA_IRQHandler+0x404>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d03b      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a63      	ldr	r2, [pc, #396]	; (800657c <HAL_DMA_IRQHandler+0x408>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d036      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a61      	ldr	r2, [pc, #388]	; (8006580 <HAL_DMA_IRQHandler+0x40c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d031      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a60      	ldr	r2, [pc, #384]	; (8006584 <HAL_DMA_IRQHandler+0x410>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d02c      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a5e      	ldr	r2, [pc, #376]	; (8006588 <HAL_DMA_IRQHandler+0x414>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d027      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a5d      	ldr	r2, [pc, #372]	; (800658c <HAL_DMA_IRQHandler+0x418>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d022      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a5b      	ldr	r2, [pc, #364]	; (8006590 <HAL_DMA_IRQHandler+0x41c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d01d      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a5a      	ldr	r2, [pc, #360]	; (8006594 <HAL_DMA_IRQHandler+0x420>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d018      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a58      	ldr	r2, [pc, #352]	; (8006598 <HAL_DMA_IRQHandler+0x424>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d013      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a57      	ldr	r2, [pc, #348]	; (800659c <HAL_DMA_IRQHandler+0x428>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00e      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a55      	ldr	r2, [pc, #340]	; (80065a0 <HAL_DMA_IRQHandler+0x42c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d009      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a54      	ldr	r2, [pc, #336]	; (80065a4 <HAL_DMA_IRQHandler+0x430>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d004      	beq.n	8006462 <HAL_DMA_IRQHandler+0x2ee>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a52      	ldr	r2, [pc, #328]	; (80065a8 <HAL_DMA_IRQHandler+0x434>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d10a      	bne.n	8006478 <HAL_DMA_IRQHandler+0x304>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646c:	2b00      	cmp	r3, #0
 800646e:	bf14      	ite	ne
 8006470:	2301      	movne	r3, #1
 8006472:	2300      	moveq	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	e003      	b.n	8006480 <HAL_DMA_IRQHandler+0x30c>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2300      	movs	r3, #0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00d      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006488:	f003 031f 	and.w	r3, r3, #31
 800648c:	2201      	movs	r2, #1
 800648e:	409a      	lsls	r2, r3
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006498:	f043 0202 	orr.w	r2, r3, #2
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a4:	f003 031f 	and.w	r3, r3, #31
 80064a8:	2204      	movs	r2, #4
 80064aa:	409a      	lsls	r2, r3
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	4013      	ands	r3, r2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 808f 	beq.w	80065d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a2c      	ldr	r2, [pc, #176]	; (800656c <HAL_DMA_IRQHandler+0x3f8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d04a      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a2a      	ldr	r2, [pc, #168]	; (8006570 <HAL_DMA_IRQHandler+0x3fc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d045      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a29      	ldr	r2, [pc, #164]	; (8006574 <HAL_DMA_IRQHandler+0x400>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d040      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a27      	ldr	r2, [pc, #156]	; (8006578 <HAL_DMA_IRQHandler+0x404>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d03b      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a26      	ldr	r2, [pc, #152]	; (800657c <HAL_DMA_IRQHandler+0x408>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d036      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a24      	ldr	r2, [pc, #144]	; (8006580 <HAL_DMA_IRQHandler+0x40c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d031      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a23      	ldr	r2, [pc, #140]	; (8006584 <HAL_DMA_IRQHandler+0x410>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d02c      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a21      	ldr	r2, [pc, #132]	; (8006588 <HAL_DMA_IRQHandler+0x414>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d027      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a20      	ldr	r2, [pc, #128]	; (800658c <HAL_DMA_IRQHandler+0x418>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d022      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a1e      	ldr	r2, [pc, #120]	; (8006590 <HAL_DMA_IRQHandler+0x41c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d01d      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a1d      	ldr	r2, [pc, #116]	; (8006594 <HAL_DMA_IRQHandler+0x420>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d018      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1b      	ldr	r2, [pc, #108]	; (8006598 <HAL_DMA_IRQHandler+0x424>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1a      	ldr	r2, [pc, #104]	; (800659c <HAL_DMA_IRQHandler+0x428>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00e      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a18      	ldr	r2, [pc, #96]	; (80065a0 <HAL_DMA_IRQHandler+0x42c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d009      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a17      	ldr	r2, [pc, #92]	; (80065a4 <HAL_DMA_IRQHandler+0x430>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d004      	beq.n	8006556 <HAL_DMA_IRQHandler+0x3e2>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a15      	ldr	r2, [pc, #84]	; (80065a8 <HAL_DMA_IRQHandler+0x434>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d12a      	bne.n	80065ac <HAL_DMA_IRQHandler+0x438>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b00      	cmp	r3, #0
 8006562:	bf14      	ite	ne
 8006564:	2301      	movne	r3, #1
 8006566:	2300      	moveq	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	e023      	b.n	80065b4 <HAL_DMA_IRQHandler+0x440>
 800656c:	40020010 	.word	0x40020010
 8006570:	40020028 	.word	0x40020028
 8006574:	40020040 	.word	0x40020040
 8006578:	40020058 	.word	0x40020058
 800657c:	40020070 	.word	0x40020070
 8006580:	40020088 	.word	0x40020088
 8006584:	400200a0 	.word	0x400200a0
 8006588:	400200b8 	.word	0x400200b8
 800658c:	40020410 	.word	0x40020410
 8006590:	40020428 	.word	0x40020428
 8006594:	40020440 	.word	0x40020440
 8006598:	40020458 	.word	0x40020458
 800659c:	40020470 	.word	0x40020470
 80065a0:	40020488 	.word	0x40020488
 80065a4:	400204a0 	.word	0x400204a0
 80065a8:	400204b8 	.word	0x400204b8
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2300      	movs	r3, #0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00d      	beq.n	80065d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065bc:	f003 031f 	and.w	r3, r3, #31
 80065c0:	2204      	movs	r2, #4
 80065c2:	409a      	lsls	r2, r3
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065cc:	f043 0204 	orr.w	r2, r3, #4
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d8:	f003 031f 	and.w	r3, r3, #31
 80065dc:	2210      	movs	r2, #16
 80065de:	409a      	lsls	r2, r3
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 80a6 	beq.w	8006736 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a85      	ldr	r2, [pc, #532]	; (8006804 <HAL_DMA_IRQHandler+0x690>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d04a      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a83      	ldr	r2, [pc, #524]	; (8006808 <HAL_DMA_IRQHandler+0x694>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d045      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a82      	ldr	r2, [pc, #520]	; (800680c <HAL_DMA_IRQHandler+0x698>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d040      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a80      	ldr	r2, [pc, #512]	; (8006810 <HAL_DMA_IRQHandler+0x69c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d03b      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a7f      	ldr	r2, [pc, #508]	; (8006814 <HAL_DMA_IRQHandler+0x6a0>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d036      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a7d      	ldr	r2, [pc, #500]	; (8006818 <HAL_DMA_IRQHandler+0x6a4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d031      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a7c      	ldr	r2, [pc, #496]	; (800681c <HAL_DMA_IRQHandler+0x6a8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d02c      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a7a      	ldr	r2, [pc, #488]	; (8006820 <HAL_DMA_IRQHandler+0x6ac>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d027      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a79      	ldr	r2, [pc, #484]	; (8006824 <HAL_DMA_IRQHandler+0x6b0>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d022      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a77      	ldr	r2, [pc, #476]	; (8006828 <HAL_DMA_IRQHandler+0x6b4>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d01d      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a76      	ldr	r2, [pc, #472]	; (800682c <HAL_DMA_IRQHandler+0x6b8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d018      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a74      	ldr	r2, [pc, #464]	; (8006830 <HAL_DMA_IRQHandler+0x6bc>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d013      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a73      	ldr	r2, [pc, #460]	; (8006834 <HAL_DMA_IRQHandler+0x6c0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d00e      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a71      	ldr	r2, [pc, #452]	; (8006838 <HAL_DMA_IRQHandler+0x6c4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d009      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a70      	ldr	r2, [pc, #448]	; (800683c <HAL_DMA_IRQHandler+0x6c8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d004      	beq.n	800668a <HAL_DMA_IRQHandler+0x516>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a6e      	ldr	r2, [pc, #440]	; (8006840 <HAL_DMA_IRQHandler+0x6cc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d10a      	bne.n	80066a0 <HAL_DMA_IRQHandler+0x52c>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b00      	cmp	r3, #0
 8006696:	bf14      	ite	ne
 8006698:	2301      	movne	r3, #1
 800669a:	2300      	moveq	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	e009      	b.n	80066b4 <HAL_DMA_IRQHandler+0x540>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	bf14      	ite	ne
 80066ae:	2301      	movne	r3, #1
 80066b0:	2300      	moveq	r3, #0
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d03e      	beq.n	8006736 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	2210      	movs	r2, #16
 80066c2:	409a      	lsls	r2, r3
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d018      	beq.n	8006708 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d108      	bne.n	80066f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d024      	beq.n	8006736 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	4798      	blx	r3
 80066f4:	e01f      	b.n	8006736 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d01b      	beq.n	8006736 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	4798      	blx	r3
 8006706:	e016      	b.n	8006736 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006712:	2b00      	cmp	r3, #0
 8006714:	d107      	bne.n	8006726 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0208 	bic.w	r2, r2, #8
 8006724:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673a:	f003 031f 	and.w	r3, r3, #31
 800673e:	2220      	movs	r2, #32
 8006740:	409a      	lsls	r2, r3
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	4013      	ands	r3, r2
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 8110 	beq.w	800696c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a2c      	ldr	r2, [pc, #176]	; (8006804 <HAL_DMA_IRQHandler+0x690>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d04a      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a2b      	ldr	r2, [pc, #172]	; (8006808 <HAL_DMA_IRQHandler+0x694>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d045      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a29      	ldr	r2, [pc, #164]	; (800680c <HAL_DMA_IRQHandler+0x698>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d040      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a28      	ldr	r2, [pc, #160]	; (8006810 <HAL_DMA_IRQHandler+0x69c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d03b      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a26      	ldr	r2, [pc, #152]	; (8006814 <HAL_DMA_IRQHandler+0x6a0>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d036      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a25      	ldr	r2, [pc, #148]	; (8006818 <HAL_DMA_IRQHandler+0x6a4>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d031      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a23      	ldr	r2, [pc, #140]	; (800681c <HAL_DMA_IRQHandler+0x6a8>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d02c      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a22      	ldr	r2, [pc, #136]	; (8006820 <HAL_DMA_IRQHandler+0x6ac>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d027      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a20      	ldr	r2, [pc, #128]	; (8006824 <HAL_DMA_IRQHandler+0x6b0>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d022      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1f      	ldr	r2, [pc, #124]	; (8006828 <HAL_DMA_IRQHandler+0x6b4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d01d      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1d      	ldr	r2, [pc, #116]	; (800682c <HAL_DMA_IRQHandler+0x6b8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d018      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <HAL_DMA_IRQHandler+0x6bc>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d013      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a1a      	ldr	r2, [pc, #104]	; (8006834 <HAL_DMA_IRQHandler+0x6c0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00e      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a19      	ldr	r2, [pc, #100]	; (8006838 <HAL_DMA_IRQHandler+0x6c4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d009      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a17      	ldr	r2, [pc, #92]	; (800683c <HAL_DMA_IRQHandler+0x6c8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d004      	beq.n	80067ec <HAL_DMA_IRQHandler+0x678>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a16      	ldr	r2, [pc, #88]	; (8006840 <HAL_DMA_IRQHandler+0x6cc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d12b      	bne.n	8006844 <HAL_DMA_IRQHandler+0x6d0>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0310 	and.w	r3, r3, #16
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bf14      	ite	ne
 80067fa:	2301      	movne	r3, #1
 80067fc:	2300      	moveq	r3, #0
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	e02a      	b.n	8006858 <HAL_DMA_IRQHandler+0x6e4>
 8006802:	bf00      	nop
 8006804:	40020010 	.word	0x40020010
 8006808:	40020028 	.word	0x40020028
 800680c:	40020040 	.word	0x40020040
 8006810:	40020058 	.word	0x40020058
 8006814:	40020070 	.word	0x40020070
 8006818:	40020088 	.word	0x40020088
 800681c:	400200a0 	.word	0x400200a0
 8006820:	400200b8 	.word	0x400200b8
 8006824:	40020410 	.word	0x40020410
 8006828:	40020428 	.word	0x40020428
 800682c:	40020440 	.word	0x40020440
 8006830:	40020458 	.word	0x40020458
 8006834:	40020470 	.word	0x40020470
 8006838:	40020488 	.word	0x40020488
 800683c:	400204a0 	.word	0x400204a0
 8006840:	400204b8 	.word	0x400204b8
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	bf14      	ite	ne
 8006852:	2301      	movne	r3, #1
 8006854:	2300      	moveq	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8087 	beq.w	800696c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006862:	f003 031f 	and.w	r3, r3, #31
 8006866:	2220      	movs	r2, #32
 8006868:	409a      	lsls	r2, r3
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b04      	cmp	r3, #4
 8006878:	d139      	bne.n	80068ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0216 	bic.w	r2, r2, #22
 8006888:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695a      	ldr	r2, [r3, #20]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006898:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d103      	bne.n	80068aa <HAL_DMA_IRQHandler+0x736>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0208 	bic.w	r2, r2, #8
 80068b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	223f      	movs	r2, #63	; 0x3f
 80068c4:	409a      	lsls	r2, r3
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 834a 	beq.w	8006f78 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	4798      	blx	r3
          }
          return;
 80068ec:	e344      	b.n	8006f78 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d018      	beq.n	800692e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d108      	bne.n	800691c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690e:	2b00      	cmp	r3, #0
 8006910:	d02c      	beq.n	800696c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	4798      	blx	r3
 800691a:	e027      	b.n	800696c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d023      	beq.n	800696c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	4798      	blx	r3
 800692c:	e01e      	b.n	800696c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10f      	bne.n	800695c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0210 	bic.w	r2, r2, #16
 800694a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 8306 	beq.w	8006f82 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 8088 	beq.w	8006a94 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2204      	movs	r2, #4
 8006988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a7a      	ldr	r2, [pc, #488]	; (8006b7c <HAL_DMA_IRQHandler+0xa08>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d04a      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a79      	ldr	r2, [pc, #484]	; (8006b80 <HAL_DMA_IRQHandler+0xa0c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d045      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a77      	ldr	r2, [pc, #476]	; (8006b84 <HAL_DMA_IRQHandler+0xa10>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d040      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a76      	ldr	r2, [pc, #472]	; (8006b88 <HAL_DMA_IRQHandler+0xa14>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d03b      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a74      	ldr	r2, [pc, #464]	; (8006b8c <HAL_DMA_IRQHandler+0xa18>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d036      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a73      	ldr	r2, [pc, #460]	; (8006b90 <HAL_DMA_IRQHandler+0xa1c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d031      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a71      	ldr	r2, [pc, #452]	; (8006b94 <HAL_DMA_IRQHandler+0xa20>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d02c      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a70      	ldr	r2, [pc, #448]	; (8006b98 <HAL_DMA_IRQHandler+0xa24>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d027      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a6e      	ldr	r2, [pc, #440]	; (8006b9c <HAL_DMA_IRQHandler+0xa28>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d022      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a6d      	ldr	r2, [pc, #436]	; (8006ba0 <HAL_DMA_IRQHandler+0xa2c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d01d      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a6b      	ldr	r2, [pc, #428]	; (8006ba4 <HAL_DMA_IRQHandler+0xa30>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d018      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a6a      	ldr	r2, [pc, #424]	; (8006ba8 <HAL_DMA_IRQHandler+0xa34>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d013      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a68      	ldr	r2, [pc, #416]	; (8006bac <HAL_DMA_IRQHandler+0xa38>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00e      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a67      	ldr	r2, [pc, #412]	; (8006bb0 <HAL_DMA_IRQHandler+0xa3c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d009      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a65      	ldr	r2, [pc, #404]	; (8006bb4 <HAL_DMA_IRQHandler+0xa40>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x8b8>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a64      	ldr	r2, [pc, #400]	; (8006bb8 <HAL_DMA_IRQHandler+0xa44>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d108      	bne.n	8006a3e <HAL_DMA_IRQHandler+0x8ca>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 0201 	bic.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	e007      	b.n	8006a4e <HAL_DMA_IRQHandler+0x8da>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0201 	bic.w	r2, r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3301      	adds	r3, #1
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d307      	bcc.n	8006a6a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1f2      	bne.n	8006a4e <HAL_DMA_IRQHandler+0x8da>
 8006a68:	e000      	b.n	8006a6c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006a6a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d004      	beq.n	8006a84 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2203      	movs	r2, #3
 8006a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006a82:	e003      	b.n	8006a8c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 8272 	beq.w	8006f82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	4798      	blx	r3
 8006aa6:	e26c      	b.n	8006f82 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a43      	ldr	r2, [pc, #268]	; (8006bbc <HAL_DMA_IRQHandler+0xa48>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d022      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x984>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a42      	ldr	r2, [pc, #264]	; (8006bc0 <HAL_DMA_IRQHandler+0xa4c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d01d      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x984>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a40      	ldr	r2, [pc, #256]	; (8006bc4 <HAL_DMA_IRQHandler+0xa50>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d018      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x984>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a3f      	ldr	r2, [pc, #252]	; (8006bc8 <HAL_DMA_IRQHandler+0xa54>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d013      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x984>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a3d      	ldr	r2, [pc, #244]	; (8006bcc <HAL_DMA_IRQHandler+0xa58>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00e      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x984>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a3c      	ldr	r2, [pc, #240]	; (8006bd0 <HAL_DMA_IRQHandler+0xa5c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d009      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x984>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a3a      	ldr	r2, [pc, #232]	; (8006bd4 <HAL_DMA_IRQHandler+0xa60>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d004      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x984>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a39      	ldr	r2, [pc, #228]	; (8006bd8 <HAL_DMA_IRQHandler+0xa64>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d101      	bne.n	8006afc <HAL_DMA_IRQHandler+0x988>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <HAL_DMA_IRQHandler+0x98a>
 8006afc:	2300      	movs	r3, #0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 823f 	beq.w	8006f82 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b10:	f003 031f 	and.w	r3, r3, #31
 8006b14:	2204      	movs	r2, #4
 8006b16:	409a      	lsls	r2, r3
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80cd 	beq.w	8006cbc <HAL_DMA_IRQHandler+0xb48>
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 80c7 	beq.w	8006cbc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b32:	f003 031f 	and.w	r3, r3, #31
 8006b36:	2204      	movs	r2, #4
 8006b38:	409a      	lsls	r2, r3
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d049      	beq.n	8006bdc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d109      	bne.n	8006b66 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 8210 	beq.w	8006f7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b64:	e20a      	b.n	8006f7c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 8206 	beq.w	8006f7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b78:	e200      	b.n	8006f7c <HAL_DMA_IRQHandler+0xe08>
 8006b7a:	bf00      	nop
 8006b7c:	40020010 	.word	0x40020010
 8006b80:	40020028 	.word	0x40020028
 8006b84:	40020040 	.word	0x40020040
 8006b88:	40020058 	.word	0x40020058
 8006b8c:	40020070 	.word	0x40020070
 8006b90:	40020088 	.word	0x40020088
 8006b94:	400200a0 	.word	0x400200a0
 8006b98:	400200b8 	.word	0x400200b8
 8006b9c:	40020410 	.word	0x40020410
 8006ba0:	40020428 	.word	0x40020428
 8006ba4:	40020440 	.word	0x40020440
 8006ba8:	40020458 	.word	0x40020458
 8006bac:	40020470 	.word	0x40020470
 8006bb0:	40020488 	.word	0x40020488
 8006bb4:	400204a0 	.word	0x400204a0
 8006bb8:	400204b8 	.word	0x400204b8
 8006bbc:	58025408 	.word	0x58025408
 8006bc0:	5802541c 	.word	0x5802541c
 8006bc4:	58025430 	.word	0x58025430
 8006bc8:	58025444 	.word	0x58025444
 8006bcc:	58025458 	.word	0x58025458
 8006bd0:	5802546c 	.word	0x5802546c
 8006bd4:	58025480 	.word	0x58025480
 8006bd8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f003 0320 	and.w	r3, r3, #32
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d160      	bne.n	8006ca8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a7f      	ldr	r2, [pc, #508]	; (8006de8 <HAL_DMA_IRQHandler+0xc74>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d04a      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a7d      	ldr	r2, [pc, #500]	; (8006dec <HAL_DMA_IRQHandler+0xc78>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d045      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a7c      	ldr	r2, [pc, #496]	; (8006df0 <HAL_DMA_IRQHandler+0xc7c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d040      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a7a      	ldr	r2, [pc, #488]	; (8006df4 <HAL_DMA_IRQHandler+0xc80>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d03b      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a79      	ldr	r2, [pc, #484]	; (8006df8 <HAL_DMA_IRQHandler+0xc84>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d036      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a77      	ldr	r2, [pc, #476]	; (8006dfc <HAL_DMA_IRQHandler+0xc88>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d031      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a76      	ldr	r2, [pc, #472]	; (8006e00 <HAL_DMA_IRQHandler+0xc8c>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d02c      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a74      	ldr	r2, [pc, #464]	; (8006e04 <HAL_DMA_IRQHandler+0xc90>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d027      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a73      	ldr	r2, [pc, #460]	; (8006e08 <HAL_DMA_IRQHandler+0xc94>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d022      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a71      	ldr	r2, [pc, #452]	; (8006e0c <HAL_DMA_IRQHandler+0xc98>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d01d      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a70      	ldr	r2, [pc, #448]	; (8006e10 <HAL_DMA_IRQHandler+0xc9c>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d018      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a6e      	ldr	r2, [pc, #440]	; (8006e14 <HAL_DMA_IRQHandler+0xca0>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d013      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a6d      	ldr	r2, [pc, #436]	; (8006e18 <HAL_DMA_IRQHandler+0xca4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00e      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a6b      	ldr	r2, [pc, #428]	; (8006e1c <HAL_DMA_IRQHandler+0xca8>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d009      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a6a      	ldr	r2, [pc, #424]	; (8006e20 <HAL_DMA_IRQHandler+0xcac>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d004      	beq.n	8006c86 <HAL_DMA_IRQHandler+0xb12>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a68      	ldr	r2, [pc, #416]	; (8006e24 <HAL_DMA_IRQHandler+0xcb0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d108      	bne.n	8006c98 <HAL_DMA_IRQHandler+0xb24>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0208 	bic.w	r2, r2, #8
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	e007      	b.n	8006ca8 <HAL_DMA_IRQHandler+0xb34>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0204 	bic.w	r2, r2, #4
 8006ca6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8165 	beq.w	8006f7c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cba:	e15f      	b.n	8006f7c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc0:	f003 031f 	and.w	r3, r3, #31
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	409a      	lsls	r2, r3
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 80c5 	beq.w	8006e5c <HAL_DMA_IRQHandler+0xce8>
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 80bf 	beq.w	8006e5c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce2:	f003 031f 	and.w	r3, r3, #31
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	409a      	lsls	r2, r3
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d018      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d109      	bne.n	8006d16 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 813a 	beq.w	8006f80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d14:	e134      	b.n	8006f80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 8130 	beq.w	8006f80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d28:	e12a      	b.n	8006f80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f040 8089 	bne.w	8006e48 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a2b      	ldr	r2, [pc, #172]	; (8006de8 <HAL_DMA_IRQHandler+0xc74>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d04a      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a29      	ldr	r2, [pc, #164]	; (8006dec <HAL_DMA_IRQHandler+0xc78>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d045      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a28      	ldr	r2, [pc, #160]	; (8006df0 <HAL_DMA_IRQHandler+0xc7c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d040      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a26      	ldr	r2, [pc, #152]	; (8006df4 <HAL_DMA_IRQHandler+0xc80>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d03b      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a25      	ldr	r2, [pc, #148]	; (8006df8 <HAL_DMA_IRQHandler+0xc84>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d036      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a23      	ldr	r2, [pc, #140]	; (8006dfc <HAL_DMA_IRQHandler+0xc88>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d031      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a22      	ldr	r2, [pc, #136]	; (8006e00 <HAL_DMA_IRQHandler+0xc8c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d02c      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a20      	ldr	r2, [pc, #128]	; (8006e04 <HAL_DMA_IRQHandler+0xc90>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d027      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a1f      	ldr	r2, [pc, #124]	; (8006e08 <HAL_DMA_IRQHandler+0xc94>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d022      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a1d      	ldr	r2, [pc, #116]	; (8006e0c <HAL_DMA_IRQHandler+0xc98>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d01d      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a1c      	ldr	r2, [pc, #112]	; (8006e10 <HAL_DMA_IRQHandler+0xc9c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d018      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a1a      	ldr	r2, [pc, #104]	; (8006e14 <HAL_DMA_IRQHandler+0xca0>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d013      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a19      	ldr	r2, [pc, #100]	; (8006e18 <HAL_DMA_IRQHandler+0xca4>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00e      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a17      	ldr	r2, [pc, #92]	; (8006e1c <HAL_DMA_IRQHandler+0xca8>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d009      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a16      	ldr	r2, [pc, #88]	; (8006e20 <HAL_DMA_IRQHandler+0xcac>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d004      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xc62>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a14      	ldr	r2, [pc, #80]	; (8006e24 <HAL_DMA_IRQHandler+0xcb0>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d128      	bne.n	8006e28 <HAL_DMA_IRQHandler+0xcb4>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0214 	bic.w	r2, r2, #20
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	e027      	b.n	8006e38 <HAL_DMA_IRQHandler+0xcc4>
 8006de8:	40020010 	.word	0x40020010
 8006dec:	40020028 	.word	0x40020028
 8006df0:	40020040 	.word	0x40020040
 8006df4:	40020058 	.word	0x40020058
 8006df8:	40020070 	.word	0x40020070
 8006dfc:	40020088 	.word	0x40020088
 8006e00:	400200a0 	.word	0x400200a0
 8006e04:	400200b8 	.word	0x400200b8
 8006e08:	40020410 	.word	0x40020410
 8006e0c:	40020428 	.word	0x40020428
 8006e10:	40020440 	.word	0x40020440
 8006e14:	40020458 	.word	0x40020458
 8006e18:	40020470 	.word	0x40020470
 8006e1c:	40020488 	.word	0x40020488
 8006e20:	400204a0 	.word	0x400204a0
 8006e24:	400204b8 	.word	0x400204b8
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 020a 	bic.w	r2, r2, #10
 8006e36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 8097 	beq.w	8006f80 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e5a:	e091      	b.n	8006f80 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	2208      	movs	r2, #8
 8006e66:	409a      	lsls	r2, r3
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 8088 	beq.w	8006f82 <HAL_DMA_IRQHandler+0xe0e>
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f003 0308 	and.w	r3, r3, #8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 8082 	beq.w	8006f82 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a41      	ldr	r2, [pc, #260]	; (8006f88 <HAL_DMA_IRQHandler+0xe14>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d04a      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a3f      	ldr	r2, [pc, #252]	; (8006f8c <HAL_DMA_IRQHandler+0xe18>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d045      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a3e      	ldr	r2, [pc, #248]	; (8006f90 <HAL_DMA_IRQHandler+0xe1c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d040      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a3c      	ldr	r2, [pc, #240]	; (8006f94 <HAL_DMA_IRQHandler+0xe20>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d03b      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a3b      	ldr	r2, [pc, #236]	; (8006f98 <HAL_DMA_IRQHandler+0xe24>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d036      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a39      	ldr	r2, [pc, #228]	; (8006f9c <HAL_DMA_IRQHandler+0xe28>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d031      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a38      	ldr	r2, [pc, #224]	; (8006fa0 <HAL_DMA_IRQHandler+0xe2c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d02c      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a36      	ldr	r2, [pc, #216]	; (8006fa4 <HAL_DMA_IRQHandler+0xe30>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d027      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a35      	ldr	r2, [pc, #212]	; (8006fa8 <HAL_DMA_IRQHandler+0xe34>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d022      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a33      	ldr	r2, [pc, #204]	; (8006fac <HAL_DMA_IRQHandler+0xe38>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d01d      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a32      	ldr	r2, [pc, #200]	; (8006fb0 <HAL_DMA_IRQHandler+0xe3c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d018      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a30      	ldr	r2, [pc, #192]	; (8006fb4 <HAL_DMA_IRQHandler+0xe40>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d013      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a2f      	ldr	r2, [pc, #188]	; (8006fb8 <HAL_DMA_IRQHandler+0xe44>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00e      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a2d      	ldr	r2, [pc, #180]	; (8006fbc <HAL_DMA_IRQHandler+0xe48>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d009      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a2c      	ldr	r2, [pc, #176]	; (8006fc0 <HAL_DMA_IRQHandler+0xe4c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d004      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xdaa>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a2a      	ldr	r2, [pc, #168]	; (8006fc4 <HAL_DMA_IRQHandler+0xe50>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d108      	bne.n	8006f30 <HAL_DMA_IRQHandler+0xdbc>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 021c 	bic.w	r2, r2, #28
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e007      	b.n	8006f40 <HAL_DMA_IRQHandler+0xdcc>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 020e 	bic.w	r2, r2, #14
 8006f3e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f44:	f003 031f 	and.w	r3, r3, #31
 8006f48:	2201      	movs	r2, #1
 8006f4a:	409a      	lsls	r2, r3
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d009      	beq.n	8006f82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
 8006f76:	e004      	b.n	8006f82 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006f78:	bf00      	nop
 8006f7a:	e002      	b.n	8006f82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f7c:	bf00      	nop
 8006f7e:	e000      	b.n	8006f82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f80:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f82:	3728      	adds	r7, #40	; 0x28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40020010 	.word	0x40020010
 8006f8c:	40020028 	.word	0x40020028
 8006f90:	40020040 	.word	0x40020040
 8006f94:	40020058 	.word	0x40020058
 8006f98:	40020070 	.word	0x40020070
 8006f9c:	40020088 	.word	0x40020088
 8006fa0:	400200a0 	.word	0x400200a0
 8006fa4:	400200b8 	.word	0x400200b8
 8006fa8:	40020410 	.word	0x40020410
 8006fac:	40020428 	.word	0x40020428
 8006fb0:	40020440 	.word	0x40020440
 8006fb4:	40020458 	.word	0x40020458
 8006fb8:	40020470 	.word	0x40020470
 8006fbc:	40020488 	.word	0x40020488
 8006fc0:	400204a0 	.word	0x400204a0
 8006fc4:	400204b8 	.word	0x400204b8

08006fc8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fda:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a7f      	ldr	r2, [pc, #508]	; (80071e4 <DMA_SetConfig+0x21c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d072      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a7d      	ldr	r2, [pc, #500]	; (80071e8 <DMA_SetConfig+0x220>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d06d      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a7c      	ldr	r2, [pc, #496]	; (80071ec <DMA_SetConfig+0x224>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d068      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a7a      	ldr	r2, [pc, #488]	; (80071f0 <DMA_SetConfig+0x228>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d063      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a79      	ldr	r2, [pc, #484]	; (80071f4 <DMA_SetConfig+0x22c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d05e      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a77      	ldr	r2, [pc, #476]	; (80071f8 <DMA_SetConfig+0x230>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d059      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a76      	ldr	r2, [pc, #472]	; (80071fc <DMA_SetConfig+0x234>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d054      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a74      	ldr	r2, [pc, #464]	; (8007200 <DMA_SetConfig+0x238>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d04f      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a73      	ldr	r2, [pc, #460]	; (8007204 <DMA_SetConfig+0x23c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d04a      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a71      	ldr	r2, [pc, #452]	; (8007208 <DMA_SetConfig+0x240>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d045      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a70      	ldr	r2, [pc, #448]	; (800720c <DMA_SetConfig+0x244>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d040      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a6e      	ldr	r2, [pc, #440]	; (8007210 <DMA_SetConfig+0x248>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d03b      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a6d      	ldr	r2, [pc, #436]	; (8007214 <DMA_SetConfig+0x24c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d036      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a6b      	ldr	r2, [pc, #428]	; (8007218 <DMA_SetConfig+0x250>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d031      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a6a      	ldr	r2, [pc, #424]	; (800721c <DMA_SetConfig+0x254>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d02c      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a68      	ldr	r2, [pc, #416]	; (8007220 <DMA_SetConfig+0x258>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d027      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a67      	ldr	r2, [pc, #412]	; (8007224 <DMA_SetConfig+0x25c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d022      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a65      	ldr	r2, [pc, #404]	; (8007228 <DMA_SetConfig+0x260>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d01d      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a64      	ldr	r2, [pc, #400]	; (800722c <DMA_SetConfig+0x264>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d018      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a62      	ldr	r2, [pc, #392]	; (8007230 <DMA_SetConfig+0x268>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a61      	ldr	r2, [pc, #388]	; (8007234 <DMA_SetConfig+0x26c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d00e      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a5f      	ldr	r2, [pc, #380]	; (8007238 <DMA_SetConfig+0x270>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d009      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a5e      	ldr	r2, [pc, #376]	; (800723c <DMA_SetConfig+0x274>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d004      	beq.n	80070d2 <DMA_SetConfig+0x10a>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a5c      	ldr	r2, [pc, #368]	; (8007240 <DMA_SetConfig+0x278>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d101      	bne.n	80070d6 <DMA_SetConfig+0x10e>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <DMA_SetConfig+0x110>
 80070d6:	2300      	movs	r3, #0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00d      	beq.n	80070f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80070e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d004      	beq.n	80070f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80070f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a39      	ldr	r2, [pc, #228]	; (80071e4 <DMA_SetConfig+0x21c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d04a      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a38      	ldr	r2, [pc, #224]	; (80071e8 <DMA_SetConfig+0x220>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d045      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a36      	ldr	r2, [pc, #216]	; (80071ec <DMA_SetConfig+0x224>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d040      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a35      	ldr	r2, [pc, #212]	; (80071f0 <DMA_SetConfig+0x228>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d03b      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a33      	ldr	r2, [pc, #204]	; (80071f4 <DMA_SetConfig+0x22c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d036      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a32      	ldr	r2, [pc, #200]	; (80071f8 <DMA_SetConfig+0x230>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d031      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a30      	ldr	r2, [pc, #192]	; (80071fc <DMA_SetConfig+0x234>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d02c      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a2f      	ldr	r2, [pc, #188]	; (8007200 <DMA_SetConfig+0x238>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d027      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a2d      	ldr	r2, [pc, #180]	; (8007204 <DMA_SetConfig+0x23c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d022      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a2c      	ldr	r2, [pc, #176]	; (8007208 <DMA_SetConfig+0x240>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d01d      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a2a      	ldr	r2, [pc, #168]	; (800720c <DMA_SetConfig+0x244>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d018      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a29      	ldr	r2, [pc, #164]	; (8007210 <DMA_SetConfig+0x248>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d013      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a27      	ldr	r2, [pc, #156]	; (8007214 <DMA_SetConfig+0x24c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00e      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a26      	ldr	r2, [pc, #152]	; (8007218 <DMA_SetConfig+0x250>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d009      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a24      	ldr	r2, [pc, #144]	; (800721c <DMA_SetConfig+0x254>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d004      	beq.n	8007198 <DMA_SetConfig+0x1d0>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a23      	ldr	r2, [pc, #140]	; (8007220 <DMA_SetConfig+0x258>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d101      	bne.n	800719c <DMA_SetConfig+0x1d4>
 8007198:	2301      	movs	r3, #1
 800719a:	e000      	b.n	800719e <DMA_SetConfig+0x1d6>
 800719c:	2300      	movs	r3, #0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d059      	beq.n	8007256 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a6:	f003 031f 	and.w	r3, r3, #31
 80071aa:	223f      	movs	r2, #63	; 0x3f
 80071ac:	409a      	lsls	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	2b40      	cmp	r3, #64	; 0x40
 80071d0:	d138      	bne.n	8007244 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071e2:	e086      	b.n	80072f2 <DMA_SetConfig+0x32a>
 80071e4:	40020010 	.word	0x40020010
 80071e8:	40020028 	.word	0x40020028
 80071ec:	40020040 	.word	0x40020040
 80071f0:	40020058 	.word	0x40020058
 80071f4:	40020070 	.word	0x40020070
 80071f8:	40020088 	.word	0x40020088
 80071fc:	400200a0 	.word	0x400200a0
 8007200:	400200b8 	.word	0x400200b8
 8007204:	40020410 	.word	0x40020410
 8007208:	40020428 	.word	0x40020428
 800720c:	40020440 	.word	0x40020440
 8007210:	40020458 	.word	0x40020458
 8007214:	40020470 	.word	0x40020470
 8007218:	40020488 	.word	0x40020488
 800721c:	400204a0 	.word	0x400204a0
 8007220:	400204b8 	.word	0x400204b8
 8007224:	58025408 	.word	0x58025408
 8007228:	5802541c 	.word	0x5802541c
 800722c:	58025430 	.word	0x58025430
 8007230:	58025444 	.word	0x58025444
 8007234:	58025458 	.word	0x58025458
 8007238:	5802546c 	.word	0x5802546c
 800723c:	58025480 	.word	0x58025480
 8007240:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	60da      	str	r2, [r3, #12]
}
 8007254:	e04d      	b.n	80072f2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a29      	ldr	r2, [pc, #164]	; (8007300 <DMA_SetConfig+0x338>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d022      	beq.n	80072a6 <DMA_SetConfig+0x2de>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a27      	ldr	r2, [pc, #156]	; (8007304 <DMA_SetConfig+0x33c>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d01d      	beq.n	80072a6 <DMA_SetConfig+0x2de>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a26      	ldr	r2, [pc, #152]	; (8007308 <DMA_SetConfig+0x340>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d018      	beq.n	80072a6 <DMA_SetConfig+0x2de>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a24      	ldr	r2, [pc, #144]	; (800730c <DMA_SetConfig+0x344>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d013      	beq.n	80072a6 <DMA_SetConfig+0x2de>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a23      	ldr	r2, [pc, #140]	; (8007310 <DMA_SetConfig+0x348>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00e      	beq.n	80072a6 <DMA_SetConfig+0x2de>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a21      	ldr	r2, [pc, #132]	; (8007314 <DMA_SetConfig+0x34c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d009      	beq.n	80072a6 <DMA_SetConfig+0x2de>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a20      	ldr	r2, [pc, #128]	; (8007318 <DMA_SetConfig+0x350>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d004      	beq.n	80072a6 <DMA_SetConfig+0x2de>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1e      	ldr	r2, [pc, #120]	; (800731c <DMA_SetConfig+0x354>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d101      	bne.n	80072aa <DMA_SetConfig+0x2e2>
 80072a6:	2301      	movs	r3, #1
 80072a8:	e000      	b.n	80072ac <DMA_SetConfig+0x2e4>
 80072aa:	2300      	movs	r3, #0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d020      	beq.n	80072f2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b4:	f003 031f 	and.w	r3, r3, #31
 80072b8:	2201      	movs	r2, #1
 80072ba:	409a      	lsls	r2, r3
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	2b40      	cmp	r3, #64	; 0x40
 80072ce:	d108      	bne.n	80072e2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	60da      	str	r2, [r3, #12]
}
 80072e0:	e007      	b.n	80072f2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	60da      	str	r2, [r3, #12]
}
 80072f2:	bf00      	nop
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	58025408 	.word	0x58025408
 8007304:	5802541c 	.word	0x5802541c
 8007308:	58025430 	.word	0x58025430
 800730c:	58025444 	.word	0x58025444
 8007310:	58025458 	.word	0x58025458
 8007314:	5802546c 	.word	0x5802546c
 8007318:	58025480 	.word	0x58025480
 800731c:	58025494 	.word	0x58025494

08007320 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a42      	ldr	r2, [pc, #264]	; (8007438 <DMA_CalcBaseAndBitshift+0x118>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d04a      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a41      	ldr	r2, [pc, #260]	; (800743c <DMA_CalcBaseAndBitshift+0x11c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d045      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a3f      	ldr	r2, [pc, #252]	; (8007440 <DMA_CalcBaseAndBitshift+0x120>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d040      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a3e      	ldr	r2, [pc, #248]	; (8007444 <DMA_CalcBaseAndBitshift+0x124>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d03b      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a3c      	ldr	r2, [pc, #240]	; (8007448 <DMA_CalcBaseAndBitshift+0x128>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d036      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a3b      	ldr	r2, [pc, #236]	; (800744c <DMA_CalcBaseAndBitshift+0x12c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d031      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a39      	ldr	r2, [pc, #228]	; (8007450 <DMA_CalcBaseAndBitshift+0x130>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d02c      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a38      	ldr	r2, [pc, #224]	; (8007454 <DMA_CalcBaseAndBitshift+0x134>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d027      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a36      	ldr	r2, [pc, #216]	; (8007458 <DMA_CalcBaseAndBitshift+0x138>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d022      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a35      	ldr	r2, [pc, #212]	; (800745c <DMA_CalcBaseAndBitshift+0x13c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d01d      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a33      	ldr	r2, [pc, #204]	; (8007460 <DMA_CalcBaseAndBitshift+0x140>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d018      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a32      	ldr	r2, [pc, #200]	; (8007464 <DMA_CalcBaseAndBitshift+0x144>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d013      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a30      	ldr	r2, [pc, #192]	; (8007468 <DMA_CalcBaseAndBitshift+0x148>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00e      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a2f      	ldr	r2, [pc, #188]	; (800746c <DMA_CalcBaseAndBitshift+0x14c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d009      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a2d      	ldr	r2, [pc, #180]	; (8007470 <DMA_CalcBaseAndBitshift+0x150>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d004      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a2c      	ldr	r2, [pc, #176]	; (8007474 <DMA_CalcBaseAndBitshift+0x154>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d101      	bne.n	80073cc <DMA_CalcBaseAndBitshift+0xac>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <DMA_CalcBaseAndBitshift+0xae>
 80073cc:	2300      	movs	r3, #0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d024      	beq.n	800741c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	3b10      	subs	r3, #16
 80073da:	4a27      	ldr	r2, [pc, #156]	; (8007478 <DMA_CalcBaseAndBitshift+0x158>)
 80073dc:	fba2 2303 	umull	r2, r3, r2, r3
 80073e0:	091b      	lsrs	r3, r3, #4
 80073e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	4a24      	ldr	r2, [pc, #144]	; (800747c <DMA_CalcBaseAndBitshift+0x15c>)
 80073ec:	5cd3      	ldrb	r3, [r2, r3]
 80073ee:	461a      	mov	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d908      	bls.n	800740c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	4b1f      	ldr	r3, [pc, #124]	; (8007480 <DMA_CalcBaseAndBitshift+0x160>)
 8007402:	4013      	ands	r3, r2
 8007404:	1d1a      	adds	r2, r3, #4
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	659a      	str	r2, [r3, #88]	; 0x58
 800740a:	e00d      	b.n	8007428 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	4b1b      	ldr	r3, [pc, #108]	; (8007480 <DMA_CalcBaseAndBitshift+0x160>)
 8007414:	4013      	ands	r3, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6593      	str	r3, [r2, #88]	; 0x58
 800741a:	e005      	b.n	8007428 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	40020010 	.word	0x40020010
 800743c:	40020028 	.word	0x40020028
 8007440:	40020040 	.word	0x40020040
 8007444:	40020058 	.word	0x40020058
 8007448:	40020070 	.word	0x40020070
 800744c:	40020088 	.word	0x40020088
 8007450:	400200a0 	.word	0x400200a0
 8007454:	400200b8 	.word	0x400200b8
 8007458:	40020410 	.word	0x40020410
 800745c:	40020428 	.word	0x40020428
 8007460:	40020440 	.word	0x40020440
 8007464:	40020458 	.word	0x40020458
 8007468:	40020470 	.word	0x40020470
 800746c:	40020488 	.word	0x40020488
 8007470:	400204a0 	.word	0x400204a0
 8007474:	400204b8 	.word	0x400204b8
 8007478:	aaaaaaab 	.word	0xaaaaaaab
 800747c:	0800ffb0 	.word	0x0800ffb0
 8007480:	fffffc00 	.word	0xfffffc00

08007484 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d120      	bne.n	80074da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749c:	2b03      	cmp	r3, #3
 800749e:	d858      	bhi.n	8007552 <DMA_CheckFifoParam+0xce>
 80074a0:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <DMA_CheckFifoParam+0x24>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	080074b9 	.word	0x080074b9
 80074ac:	080074cb 	.word	0x080074cb
 80074b0:	080074b9 	.word	0x080074b9
 80074b4:	08007553 	.word	0x08007553
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d048      	beq.n	8007556 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074c8:	e045      	b.n	8007556 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074d2:	d142      	bne.n	800755a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074d8:	e03f      	b.n	800755a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e2:	d123      	bne.n	800752c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d838      	bhi.n	800755e <DMA_CheckFifoParam+0xda>
 80074ec:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <DMA_CheckFifoParam+0x70>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007505 	.word	0x08007505
 80074f8:	0800750b 	.word	0x0800750b
 80074fc:	08007505 	.word	0x08007505
 8007500:	0800751d 	.word	0x0800751d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	73fb      	strb	r3, [r7, #15]
        break;
 8007508:	e030      	b.n	800756c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d025      	beq.n	8007562 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800751a:	e022      	b.n	8007562 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007524:	d11f      	bne.n	8007566 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800752a:	e01c      	b.n	8007566 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	2b02      	cmp	r3, #2
 8007532:	d902      	bls.n	800753a <DMA_CheckFifoParam+0xb6>
 8007534:	2b03      	cmp	r3, #3
 8007536:	d003      	beq.n	8007540 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007538:	e018      	b.n	800756c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	73fb      	strb	r3, [r7, #15]
        break;
 800753e:	e015      	b.n	800756c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00e      	beq.n	800756a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	73fb      	strb	r3, [r7, #15]
    break;
 8007550:	e00b      	b.n	800756a <DMA_CheckFifoParam+0xe6>
        break;
 8007552:	bf00      	nop
 8007554:	e00a      	b.n	800756c <DMA_CheckFifoParam+0xe8>
        break;
 8007556:	bf00      	nop
 8007558:	e008      	b.n	800756c <DMA_CheckFifoParam+0xe8>
        break;
 800755a:	bf00      	nop
 800755c:	e006      	b.n	800756c <DMA_CheckFifoParam+0xe8>
        break;
 800755e:	bf00      	nop
 8007560:	e004      	b.n	800756c <DMA_CheckFifoParam+0xe8>
        break;
 8007562:	bf00      	nop
 8007564:	e002      	b.n	800756c <DMA_CheckFifoParam+0xe8>
        break;
 8007566:	bf00      	nop
 8007568:	e000      	b.n	800756c <DMA_CheckFifoParam+0xe8>
    break;
 800756a:	bf00      	nop
    }
  }

  return status;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop

0800757c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a38      	ldr	r2, [pc, #224]	; (8007670 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d022      	beq.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a36      	ldr	r2, [pc, #216]	; (8007674 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d01d      	beq.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a35      	ldr	r2, [pc, #212]	; (8007678 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d018      	beq.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a33      	ldr	r2, [pc, #204]	; (800767c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d013      	beq.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a32      	ldr	r2, [pc, #200]	; (8007680 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00e      	beq.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a30      	ldr	r2, [pc, #192]	; (8007684 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d009      	beq.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a2f      	ldr	r2, [pc, #188]	; (8007688 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d004      	beq.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a2d      	ldr	r2, [pc, #180]	; (800768c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d101      	bne.n	80075de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80075da:	2301      	movs	r3, #1
 80075dc:	e000      	b.n	80075e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80075de:	2300      	movs	r3, #0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01a      	beq.n	800761a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	3b08      	subs	r3, #8
 80075ec:	4a28      	ldr	r2, [pc, #160]	; (8007690 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80075ee:	fba2 2303 	umull	r2, r3, r2, r3
 80075f2:	091b      	lsrs	r3, r3, #4
 80075f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4b26      	ldr	r3, [pc, #152]	; (8007694 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	461a      	mov	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a24      	ldr	r2, [pc, #144]	; (8007698 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007608:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f003 031f 	and.w	r3, r3, #31
 8007610:	2201      	movs	r2, #1
 8007612:	409a      	lsls	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007618:	e024      	b.n	8007664 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	3b10      	subs	r3, #16
 8007622:	4a1e      	ldr	r2, [pc, #120]	; (800769c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007624:	fba2 2303 	umull	r2, r3, r2, r3
 8007628:	091b      	lsrs	r3, r3, #4
 800762a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	4a1c      	ldr	r2, [pc, #112]	; (80076a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d806      	bhi.n	8007642 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4a1b      	ldr	r2, [pc, #108]	; (80076a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d902      	bls.n	8007642 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3308      	adds	r3, #8
 8007640:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4b18      	ldr	r3, [pc, #96]	; (80076a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007646:	4413      	add	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	461a      	mov	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a16      	ldr	r2, [pc, #88]	; (80076ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007654:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f003 031f 	and.w	r3, r3, #31
 800765c:	2201      	movs	r2, #1
 800765e:	409a      	lsls	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	58025408 	.word	0x58025408
 8007674:	5802541c 	.word	0x5802541c
 8007678:	58025430 	.word	0x58025430
 800767c:	58025444 	.word	0x58025444
 8007680:	58025458 	.word	0x58025458
 8007684:	5802546c 	.word	0x5802546c
 8007688:	58025480 	.word	0x58025480
 800768c:	58025494 	.word	0x58025494
 8007690:	cccccccd 	.word	0xcccccccd
 8007694:	16009600 	.word	0x16009600
 8007698:	58025880 	.word	0x58025880
 800769c:	aaaaaaab 	.word	0xaaaaaaab
 80076a0:	400204b8 	.word	0x400204b8
 80076a4:	4002040f 	.word	0x4002040f
 80076a8:	10008200 	.word	0x10008200
 80076ac:	40020880 	.word	0x40020880

080076b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d04a      	beq.n	800775c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d847      	bhi.n	800775c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a25      	ldr	r2, [pc, #148]	; (8007768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d022      	beq.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a24      	ldr	r2, [pc, #144]	; (800776c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d01d      	beq.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a22      	ldr	r2, [pc, #136]	; (8007770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d018      	beq.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a21      	ldr	r2, [pc, #132]	; (8007774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d013      	beq.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a1f      	ldr	r2, [pc, #124]	; (8007778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00e      	beq.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a1e      	ldr	r2, [pc, #120]	; (800777c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d009      	beq.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1c      	ldr	r2, [pc, #112]	; (8007780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d004      	beq.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a1b      	ldr	r2, [pc, #108]	; (8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d101      	bne.n	8007720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800771c:	2301      	movs	r3, #1
 800771e:	e000      	b.n	8007722 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007720:	2300      	movs	r3, #0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4b17      	ldr	r3, [pc, #92]	; (8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800772a:	4413      	add	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	461a      	mov	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a15      	ldr	r2, [pc, #84]	; (800778c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007738:	671a      	str	r2, [r3, #112]	; 0x70
 800773a:	e009      	b.n	8007750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	4b14      	ldr	r3, [pc, #80]	; (8007790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	461a      	mov	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a11      	ldr	r2, [pc, #68]	; (8007794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800774e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3b01      	subs	r3, #1
 8007754:	2201      	movs	r2, #1
 8007756:	409a      	lsls	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800775c:	bf00      	nop
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	58025408 	.word	0x58025408
 800776c:	5802541c 	.word	0x5802541c
 8007770:	58025430 	.word	0x58025430
 8007774:	58025444 	.word	0x58025444
 8007778:	58025458 	.word	0x58025458
 800777c:	5802546c 	.word	0x5802546c
 8007780:	58025480 	.word	0x58025480
 8007784:	58025494 	.word	0x58025494
 8007788:	1600963f 	.word	0x1600963f
 800778c:	58025940 	.word	0x58025940
 8007790:	1000823f 	.word	0x1000823f
 8007794:	40020940 	.word	0x40020940

08007798 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007798:	b480      	push	{r7}
 800779a:	b089      	sub	sp, #36	; 0x24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80077a6:	4b89      	ldr	r3, [pc, #548]	; (80079cc <HAL_GPIO_Init+0x234>)
 80077a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077aa:	e194      	b.n	8007ad6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	2101      	movs	r1, #1
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	fa01 f303 	lsl.w	r3, r1, r3
 80077b8:	4013      	ands	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 8186 	beq.w	8007ad0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f003 0303 	and.w	r3, r3, #3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d005      	beq.n	80077dc <HAL_GPIO_Init+0x44>
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f003 0303 	and.w	r3, r3, #3
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d130      	bne.n	800783e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	2203      	movs	r2, #3
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	43db      	mvns	r3, r3
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	4013      	ands	r3, r2
 80077f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007800:	69ba      	ldr	r2, [r7, #24]
 8007802:	4313      	orrs	r3, r2
 8007804:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007812:	2201      	movs	r2, #1
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	fa02 f303 	lsl.w	r3, r2, r3
 800781a:	43db      	mvns	r3, r3
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	4013      	ands	r3, r2
 8007820:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	091b      	lsrs	r3, r3, #4
 8007828:	f003 0201 	and.w	r2, r3, #1
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	fa02 f303 	lsl.w	r3, r2, r3
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	4313      	orrs	r3, r2
 8007836:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	2b03      	cmp	r3, #3
 8007848:	d017      	beq.n	800787a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	2203      	movs	r2, #3
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	43db      	mvns	r3, r3
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	4013      	ands	r3, r2
 8007860:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	689a      	ldr	r2, [r3, #8]
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	fa02 f303 	lsl.w	r3, r2, r3
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	4313      	orrs	r3, r2
 8007872:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	2b02      	cmp	r3, #2
 8007884:	d123      	bne.n	80078ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	08da      	lsrs	r2, r3, #3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	3208      	adds	r2, #8
 800788e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	220f      	movs	r2, #15
 800789e:	fa02 f303 	lsl.w	r3, r2, r3
 80078a2:	43db      	mvns	r3, r3
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	4013      	ands	r3, r2
 80078a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	691a      	ldr	r2, [r3, #16]
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	4313      	orrs	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	08da      	lsrs	r2, r3, #3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3208      	adds	r2, #8
 80078c8:	69b9      	ldr	r1, [r7, #24]
 80078ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	2203      	movs	r2, #3
 80078da:	fa02 f303 	lsl.w	r3, r2, r3
 80078de:	43db      	mvns	r3, r3
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	4013      	ands	r3, r2
 80078e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f003 0203 	and.w	r2, r3, #3
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	fa02 f303 	lsl.w	r3, r2, r3
 80078f6:	69ba      	ldr	r2, [r7, #24]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 80e0 	beq.w	8007ad0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007910:	4b2f      	ldr	r3, [pc, #188]	; (80079d0 <HAL_GPIO_Init+0x238>)
 8007912:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007916:	4a2e      	ldr	r2, [pc, #184]	; (80079d0 <HAL_GPIO_Init+0x238>)
 8007918:	f043 0302 	orr.w	r3, r3, #2
 800791c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007920:	4b2b      	ldr	r3, [pc, #172]	; (80079d0 <HAL_GPIO_Init+0x238>)
 8007922:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800792e:	4a29      	ldr	r2, [pc, #164]	; (80079d4 <HAL_GPIO_Init+0x23c>)
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	089b      	lsrs	r3, r3, #2
 8007934:	3302      	adds	r3, #2
 8007936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800793a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f003 0303 	and.w	r3, r3, #3
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	220f      	movs	r2, #15
 8007946:	fa02 f303 	lsl.w	r3, r2, r3
 800794a:	43db      	mvns	r3, r3
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	4013      	ands	r3, r2
 8007950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a20      	ldr	r2, [pc, #128]	; (80079d8 <HAL_GPIO_Init+0x240>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d052      	beq.n	8007a00 <HAL_GPIO_Init+0x268>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a1f      	ldr	r2, [pc, #124]	; (80079dc <HAL_GPIO_Init+0x244>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d031      	beq.n	80079c6 <HAL_GPIO_Init+0x22e>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a1e      	ldr	r2, [pc, #120]	; (80079e0 <HAL_GPIO_Init+0x248>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d02b      	beq.n	80079c2 <HAL_GPIO_Init+0x22a>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <HAL_GPIO_Init+0x24c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d025      	beq.n	80079be <HAL_GPIO_Init+0x226>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a1c      	ldr	r2, [pc, #112]	; (80079e8 <HAL_GPIO_Init+0x250>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d01f      	beq.n	80079ba <HAL_GPIO_Init+0x222>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a1b      	ldr	r2, [pc, #108]	; (80079ec <HAL_GPIO_Init+0x254>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d019      	beq.n	80079b6 <HAL_GPIO_Init+0x21e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a1a      	ldr	r2, [pc, #104]	; (80079f0 <HAL_GPIO_Init+0x258>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d013      	beq.n	80079b2 <HAL_GPIO_Init+0x21a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a19      	ldr	r2, [pc, #100]	; (80079f4 <HAL_GPIO_Init+0x25c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00d      	beq.n	80079ae <HAL_GPIO_Init+0x216>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a18      	ldr	r2, [pc, #96]	; (80079f8 <HAL_GPIO_Init+0x260>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d007      	beq.n	80079aa <HAL_GPIO_Init+0x212>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a17      	ldr	r2, [pc, #92]	; (80079fc <HAL_GPIO_Init+0x264>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d101      	bne.n	80079a6 <HAL_GPIO_Init+0x20e>
 80079a2:	2309      	movs	r3, #9
 80079a4:	e02d      	b.n	8007a02 <HAL_GPIO_Init+0x26a>
 80079a6:	230a      	movs	r3, #10
 80079a8:	e02b      	b.n	8007a02 <HAL_GPIO_Init+0x26a>
 80079aa:	2308      	movs	r3, #8
 80079ac:	e029      	b.n	8007a02 <HAL_GPIO_Init+0x26a>
 80079ae:	2307      	movs	r3, #7
 80079b0:	e027      	b.n	8007a02 <HAL_GPIO_Init+0x26a>
 80079b2:	2306      	movs	r3, #6
 80079b4:	e025      	b.n	8007a02 <HAL_GPIO_Init+0x26a>
 80079b6:	2305      	movs	r3, #5
 80079b8:	e023      	b.n	8007a02 <HAL_GPIO_Init+0x26a>
 80079ba:	2304      	movs	r3, #4
 80079bc:	e021      	b.n	8007a02 <HAL_GPIO_Init+0x26a>
 80079be:	2303      	movs	r3, #3
 80079c0:	e01f      	b.n	8007a02 <HAL_GPIO_Init+0x26a>
 80079c2:	2302      	movs	r3, #2
 80079c4:	e01d      	b.n	8007a02 <HAL_GPIO_Init+0x26a>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e01b      	b.n	8007a02 <HAL_GPIO_Init+0x26a>
 80079ca:	bf00      	nop
 80079cc:	58000080 	.word	0x58000080
 80079d0:	58024400 	.word	0x58024400
 80079d4:	58000400 	.word	0x58000400
 80079d8:	58020000 	.word	0x58020000
 80079dc:	58020400 	.word	0x58020400
 80079e0:	58020800 	.word	0x58020800
 80079e4:	58020c00 	.word	0x58020c00
 80079e8:	58021000 	.word	0x58021000
 80079ec:	58021400 	.word	0x58021400
 80079f0:	58021800 	.word	0x58021800
 80079f4:	58021c00 	.word	0x58021c00
 80079f8:	58022000 	.word	0x58022000
 80079fc:	58022400 	.word	0x58022400
 8007a00:	2300      	movs	r3, #0
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	f002 0203 	and.w	r2, r2, #3
 8007a08:	0092      	lsls	r2, r2, #2
 8007a0a:	4093      	lsls	r3, r2
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a12:	4938      	ldr	r1, [pc, #224]	; (8007af4 <HAL_GPIO_Init+0x35c>)
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	089b      	lsrs	r3, r3, #2
 8007a18:	3302      	adds	r3, #2
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	43db      	mvns	r3, r3
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007a46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	43db      	mvns	r3, r3
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007a6c:	69ba      	ldr	r2, [r7, #24]
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007a74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	43db      	mvns	r3, r3
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	43db      	mvns	r3, r3
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f47f ae63 	bne.w	80077ac <HAL_GPIO_Init+0x14>
  }
}
 8007ae6:	bf00      	nop
 8007ae8:	bf00      	nop
 8007aea:	3724      	adds	r7, #36	; 0x24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	58000400 	.word	0x58000400

08007af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691a      	ldr	r2, [r3, #16]
 8007b08:	887b      	ldrh	r3, [r7, #2]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b10:	2301      	movs	r3, #1
 8007b12:	73fb      	strb	r3, [r7, #15]
 8007b14:	e001      	b.n	8007b1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	807b      	strh	r3, [r7, #2]
 8007b34:	4613      	mov	r3, r2
 8007b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b38:	787b      	ldrb	r3, [r7, #1]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b3e:	887a      	ldrh	r2, [r7, #2]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007b44:	e003      	b.n	8007b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b46:	887b      	ldrh	r3, [r7, #2]
 8007b48:	041a      	lsls	r2, r3, #16
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	619a      	str	r2, [r3, #24]
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
	...

08007b5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e07f      	b.n	8007c6e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d106      	bne.n	8007b88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7fa fb76 	bl	8002274 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2224      	movs	r2, #36	; 0x24
 8007b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 0201 	bic.w	r2, r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685a      	ldr	r2, [r3, #4]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d107      	bne.n	8007bd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689a      	ldr	r2, [r3, #8]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bd2:	609a      	str	r2, [r3, #8]
 8007bd4:	e006      	b.n	8007be4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007be2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d104      	bne.n	8007bf6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bf4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6859      	ldr	r1, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	4b1d      	ldr	r3, [pc, #116]	; (8007c78 <HAL_I2C_Init+0x11c>)
 8007c02:	430b      	orrs	r3, r1
 8007c04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691a      	ldr	r2, [r3, #16]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	69d9      	ldr	r1, [r3, #28]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a1a      	ldr	r2, [r3, #32]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f042 0201 	orr.w	r2, r2, #1
 8007c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	02008000 	.word	0x02008000

08007c7c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b088      	sub	sp, #32
 8007c80:	af02      	add	r7, sp, #8
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	607a      	str	r2, [r7, #4]
 8007c86:	461a      	mov	r2, r3
 8007c88:	460b      	mov	r3, r1
 8007c8a:	817b      	strh	r3, [r7, #10]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	f040 80da 	bne.w	8007e52 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d101      	bne.n	8007cac <HAL_I2C_Master_Transmit+0x30>
 8007ca8:	2302      	movs	r3, #2
 8007caa:	e0d3      	b.n	8007e54 <HAL_I2C_Master_Transmit+0x1d8>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007cb4:	f7fa fed6 	bl	8002a64 <HAL_GetTick>
 8007cb8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	2319      	movs	r3, #25
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 f9e6 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e0be      	b.n	8007e54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2221      	movs	r2, #33	; 0x21
 8007cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2210      	movs	r2, #16
 8007ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	893a      	ldrh	r2, [r7, #8]
 8007cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	2bff      	cmp	r3, #255	; 0xff
 8007d06:	d90e      	bls.n	8007d26 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	22ff      	movs	r2, #255	; 0xff
 8007d0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	8979      	ldrh	r1, [r7, #10]
 8007d16:	4b51      	ldr	r3, [pc, #324]	; (8007e5c <HAL_I2C_Master_Transmit+0x1e0>)
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f000 fbdc 	bl	80084dc <I2C_TransferConfig>
 8007d24:	e06c      	b.n	8007e00 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	8979      	ldrh	r1, [r7, #10]
 8007d38:	4b48      	ldr	r3, [pc, #288]	; (8007e5c <HAL_I2C_Master_Transmit+0x1e0>)
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 fbcb 	bl	80084dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007d46:	e05b      	b.n	8007e00 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	6a39      	ldr	r1, [r7, #32]
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 f9e3 	bl	8008118 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e07b      	b.n	8007e54 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	781a      	ldrb	r2, [r3, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d034      	beq.n	8007e00 <HAL_I2C_Master_Transmit+0x184>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d130      	bne.n	8007e00 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	2200      	movs	r2, #0
 8007da6:	2180      	movs	r1, #128	; 0x80
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 f975 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e04d      	b.n	8007e54 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2bff      	cmp	r3, #255	; 0xff
 8007dc0:	d90e      	bls.n	8007de0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	22ff      	movs	r2, #255	; 0xff
 8007dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	8979      	ldrh	r1, [r7, #10]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fb7f 	bl	80084dc <I2C_TransferConfig>
 8007dde:	e00f      	b.n	8007e00 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	8979      	ldrh	r1, [r7, #10]
 8007df2:	2300      	movs	r3, #0
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 fb6e 	bl	80084dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d19e      	bne.n	8007d48 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	6a39      	ldr	r1, [r7, #32]
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 f9c2 	bl	8008198 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e01a      	b.n	8007e54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2220      	movs	r2, #32
 8007e24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6859      	ldr	r1, [r3, #4]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <HAL_I2C_Master_Transmit+0x1e4>)
 8007e32:	400b      	ands	r3, r1
 8007e34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e000      	b.n	8007e54 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007e52:	2302      	movs	r3, #2
  }
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	80002000 	.word	0x80002000
 8007e60:	fe00e800 	.word	0xfe00e800

08007e64 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b088      	sub	sp, #32
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	607a      	str	r2, [r7, #4]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	460b      	mov	r3, r1
 8007e72:	817b      	strh	r3, [r7, #10]
 8007e74:	4613      	mov	r3, r2
 8007e76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	f040 80db 	bne.w	800803c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d101      	bne.n	8007e94 <HAL_I2C_Master_Receive+0x30>
 8007e90:	2302      	movs	r3, #2
 8007e92:	e0d4      	b.n	800803e <HAL_I2C_Master_Receive+0x1da>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e9c:	f7fa fde2 	bl	8002a64 <HAL_GetTick>
 8007ea0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	2319      	movs	r3, #25
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 f8f2 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e0bf      	b.n	800803e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2222      	movs	r2, #34	; 0x22
 8007ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2210      	movs	r2, #16
 8007eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	893a      	ldrh	r2, [r7, #8]
 8007ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	2bff      	cmp	r3, #255	; 0xff
 8007eee:	d90e      	bls.n	8007f0e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	22ff      	movs	r2, #255	; 0xff
 8007ef4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	8979      	ldrh	r1, [r7, #10]
 8007efe:	4b52      	ldr	r3, [pc, #328]	; (8008048 <HAL_I2C_Master_Receive+0x1e4>)
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 fae8 	bl	80084dc <I2C_TransferConfig>
 8007f0c:	e06d      	b.n	8007fea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	8979      	ldrh	r1, [r7, #10]
 8007f20:	4b49      	ldr	r3, [pc, #292]	; (8008048 <HAL_I2C_Master_Receive+0x1e4>)
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fad7 	bl	80084dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007f2e:	e05c      	b.n	8007fea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	6a39      	ldr	r1, [r7, #32]
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 f96b 	bl	8008210 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e07c      	b.n	800803e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	b2d2      	uxtb	r2, r2
 8007f50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d034      	beq.n	8007fea <HAL_I2C_Master_Receive+0x186>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d130      	bne.n	8007fea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	2180      	movs	r1, #128	; 0x80
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 f880 	bl	8008098 <I2C_WaitOnFlagUntilTimeout>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e04d      	b.n	800803e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	2bff      	cmp	r3, #255	; 0xff
 8007faa:	d90e      	bls.n	8007fca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	22ff      	movs	r2, #255	; 0xff
 8007fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	8979      	ldrh	r1, [r7, #10]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 fa8a 	bl	80084dc <I2C_TransferConfig>
 8007fc8:	e00f      	b.n	8007fea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	8979      	ldrh	r1, [r7, #10]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 fa79 	bl	80084dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d19d      	bne.n	8007f30 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	6a39      	ldr	r1, [r7, #32]
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 f8cd 	bl	8008198 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e01a      	b.n	800803e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2220      	movs	r2, #32
 800800e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6859      	ldr	r1, [r3, #4]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	4b0c      	ldr	r3, [pc, #48]	; (800804c <HAL_I2C_Master_Receive+0x1e8>)
 800801c:	400b      	ands	r3, r1
 800801e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2220      	movs	r2, #32
 8008024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	e000      	b.n	800803e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800803c:	2302      	movs	r3, #2
  }
}
 800803e:	4618      	mov	r0, r3
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	80002400 	.word	0x80002400
 800804c:	fe00e800 	.word	0xfe00e800

08008050 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	f003 0302 	and.w	r3, r3, #2
 8008062:	2b02      	cmp	r3, #2
 8008064:	d103      	bne.n	800806e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b01      	cmp	r3, #1
 800807a:	d007      	beq.n	800808c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	699a      	ldr	r2, [r3, #24]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f042 0201 	orr.w	r2, r2, #1
 800808a:	619a      	str	r2, [r3, #24]
  }
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	603b      	str	r3, [r7, #0]
 80080a4:	4613      	mov	r3, r2
 80080a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080a8:	e022      	b.n	80080f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080b0:	d01e      	beq.n	80080f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080b2:	f7fa fcd7 	bl	8002a64 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d302      	bcc.n	80080c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d113      	bne.n	80080f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080cc:	f043 0220 	orr.w	r2, r3, #32
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2220      	movs	r2, #32
 80080d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e00f      	b.n	8008110 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	699a      	ldr	r2, [r3, #24]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	4013      	ands	r3, r2
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	bf0c      	ite	eq
 8008100:	2301      	moveq	r3, #1
 8008102:	2300      	movne	r3, #0
 8008104:	b2db      	uxtb	r3, r3
 8008106:	461a      	mov	r2, r3
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	429a      	cmp	r2, r3
 800810c:	d0cd      	beq.n	80080aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008124:	e02c      	b.n	8008180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	68b9      	ldr	r1, [r7, #8]
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 f8ea 	bl	8008304 <I2C_IsErrorOccurred>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e02a      	b.n	8008190 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008140:	d01e      	beq.n	8008180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008142:	f7fa fc8f 	bl	8002a64 <HAL_GetTick>
 8008146:	4602      	mov	r2, r0
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	429a      	cmp	r2, r3
 8008150:	d302      	bcc.n	8008158 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d113      	bne.n	8008180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815c:	f043 0220 	orr.w	r2, r3, #32
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2220      	movs	r2, #32
 8008168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e007      	b.n	8008190 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b02      	cmp	r3, #2
 800818c:	d1cb      	bne.n	8008126 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081a4:	e028      	b.n	80081f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	68b9      	ldr	r1, [r7, #8]
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 f8aa 	bl	8008304 <I2C_IsErrorOccurred>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e026      	b.n	8008208 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ba:	f7fa fc53 	bl	8002a64 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d302      	bcc.n	80081d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d113      	bne.n	80081f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d4:	f043 0220 	orr.w	r2, r3, #32
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e007      	b.n	8008208 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	f003 0320 	and.w	r3, r3, #32
 8008202:	2b20      	cmp	r3, #32
 8008204:	d1cf      	bne.n	80081a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800821c:	e064      	b.n	80082e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	68b9      	ldr	r1, [r7, #8]
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 f86e 	bl	8008304 <I2C_IsErrorOccurred>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e062      	b.n	80082f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	f003 0320 	and.w	r3, r3, #32
 800823c:	2b20      	cmp	r3, #32
 800823e:	d138      	bne.n	80082b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	f003 0304 	and.w	r3, r3, #4
 800824a:	2b04      	cmp	r3, #4
 800824c:	d105      	bne.n	800825a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	e04e      	b.n	80082f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	f003 0310 	and.w	r3, r3, #16
 8008264:	2b10      	cmp	r3, #16
 8008266:	d107      	bne.n	8008278 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2210      	movs	r2, #16
 800826e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2204      	movs	r2, #4
 8008274:	645a      	str	r2, [r3, #68]	; 0x44
 8008276:	e002      	b.n	800827e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2220      	movs	r2, #32
 8008284:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6859      	ldr	r1, [r3, #4]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	4b1b      	ldr	r3, [pc, #108]	; (8008300 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8008292:	400b      	ands	r3, r1
 8008294:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2220      	movs	r2, #32
 800829a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e022      	b.n	80082f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082b2:	f7fa fbd7 	bl	8002a64 <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d302      	bcc.n	80082c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10f      	bne.n	80082e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082cc:	f043 0220 	orr.w	r2, r3, #32
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e007      	b.n	80082f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	f003 0304 	and.w	r3, r3, #4
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	d193      	bne.n	800821e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	fe00e800 	.word	0xfe00e800

08008304 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08a      	sub	sp, #40	; 0x28
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800831e:	2300      	movs	r3, #0
 8008320:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	f003 0310 	and.w	r3, r3, #16
 800832c:	2b00      	cmp	r3, #0
 800832e:	d075      	beq.n	800841c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2210      	movs	r2, #16
 8008336:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008338:	e056      	b.n	80083e8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008340:	d052      	beq.n	80083e8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008342:	f7fa fb8f 	bl	8002a64 <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	429a      	cmp	r2, r3
 8008350:	d302      	bcc.n	8008358 <I2C_IsErrorOccurred+0x54>
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d147      	bne.n	80083e8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008362:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800836a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800837a:	d12e      	bne.n	80083da <I2C_IsErrorOccurred+0xd6>
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008382:	d02a      	beq.n	80083da <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008384:	7cfb      	ldrb	r3, [r7, #19]
 8008386:	2b20      	cmp	r3, #32
 8008388:	d027      	beq.n	80083da <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008398:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800839a:	f7fa fb63 	bl	8002a64 <HAL_GetTick>
 800839e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083a0:	e01b      	b.n	80083da <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80083a2:	f7fa fb5f 	bl	8002a64 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b19      	cmp	r3, #25
 80083ae:	d914      	bls.n	80083da <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b4:	f043 0220 	orr.w	r2, r3, #32
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	f003 0320 	and.w	r3, r3, #32
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	d1dc      	bne.n	80083a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	f003 0320 	and.w	r3, r3, #32
 80083f2:	2b20      	cmp	r3, #32
 80083f4:	d003      	beq.n	80083fe <I2C_IsErrorOccurred+0xfa>
 80083f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d09d      	beq.n	800833a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80083fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008402:	2b00      	cmp	r3, #0
 8008404:	d103      	bne.n	800840e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2220      	movs	r2, #32
 800840c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	f043 0304 	orr.w	r3, r3, #4
 8008414:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00b      	beq.n	8008446 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	f043 0301 	orr.w	r3, r3, #1
 8008434:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800843e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00b      	beq.n	8008468 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	f043 0308 	orr.w	r3, r3, #8
 8008456:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008460:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00b      	beq.n	800848a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	f043 0302 	orr.w	r3, r3, #2
 8008478:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008482:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800848a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800848e:	2b00      	cmp	r3, #0
 8008490:	d01c      	beq.n	80084cc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f7ff fddc 	bl	8008050 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6859      	ldr	r1, [r3, #4]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	4b0d      	ldr	r3, [pc, #52]	; (80084d8 <I2C_IsErrorOccurred+0x1d4>)
 80084a4:	400b      	ands	r3, r1
 80084a6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	431a      	orrs	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2220      	movs	r2, #32
 80084b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80084cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3728      	adds	r7, #40	; 0x28
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	fe00e800 	.word	0xfe00e800

080084dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	607b      	str	r3, [r7, #4]
 80084e6:	460b      	mov	r3, r1
 80084e8:	817b      	strh	r3, [r7, #10]
 80084ea:	4613      	mov	r3, r2
 80084ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084ee:	897b      	ldrh	r3, [r7, #10]
 80084f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084f4:	7a7b      	ldrb	r3, [r7, #9]
 80084f6:	041b      	lsls	r3, r3, #16
 80084f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084fc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	4313      	orrs	r3, r2
 8008506:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800850a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	0d5b      	lsrs	r3, r3, #21
 8008516:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800851a:	4b08      	ldr	r3, [pc, #32]	; (800853c <I2C_TransferConfig+0x60>)
 800851c:	430b      	orrs	r3, r1
 800851e:	43db      	mvns	r3, r3
 8008520:	ea02 0103 	and.w	r1, r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	430a      	orrs	r2, r1
 800852c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800852e:	bf00      	nop
 8008530:	371c      	adds	r7, #28
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	03ff63ff 	.word	0x03ff63ff

08008540 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b20      	cmp	r3, #32
 8008554:	d138      	bne.n	80085c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800855c:	2b01      	cmp	r3, #1
 800855e:	d101      	bne.n	8008564 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008560:	2302      	movs	r3, #2
 8008562:	e032      	b.n	80085ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2224      	movs	r2, #36	; 0x24
 8008570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f022 0201 	bic.w	r2, r2, #1
 8008582:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008592:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6819      	ldr	r1, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f042 0201 	orr.w	r2, r2, #1
 80085b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2220      	movs	r2, #32
 80085b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	e000      	b.n	80085ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80085c8:	2302      	movs	r3, #2
  }
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b085      	sub	sp, #20
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	d139      	bne.n	8008660 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d101      	bne.n	80085fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80085f6:	2302      	movs	r3, #2
 80085f8:	e033      	b.n	8008662 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2224      	movs	r2, #36	; 0x24
 8008606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f022 0201 	bic.w	r2, r2, #1
 8008618:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008628:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4313      	orrs	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f042 0201 	orr.w	r2, r2, #1
 800864a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2220      	movs	r2, #32
 8008650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	e000      	b.n	8008662 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008660:	2302      	movs	r3, #2
  }
}
 8008662:	4618      	mov	r0, r3
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
	...

08008670 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800867c:	4b18      	ldr	r3, [pc, #96]	; (80086e0 <HAL_PWR_EnterSTOPMode+0x70>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f023 0201 	bic.w	r2, r3, #1
 8008684:	4916      	ldr	r1, [pc, #88]	; (80086e0 <HAL_PWR_EnterSTOPMode+0x70>)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4313      	orrs	r3, r2
 800868a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800868c:	4b14      	ldr	r3, [pc, #80]	; (80086e0 <HAL_PWR_EnterSTOPMode+0x70>)
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	4a13      	ldr	r2, [pc, #76]	; (80086e0 <HAL_PWR_EnterSTOPMode+0x70>)
 8008692:	f023 0305 	bic.w	r3, r3, #5
 8008696:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8008698:	4b11      	ldr	r3, [pc, #68]	; (80086e0 <HAL_PWR_EnterSTOPMode+0x70>)
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	4a10      	ldr	r2, [pc, #64]	; (80086e0 <HAL_PWR_EnterSTOPMode+0x70>)
 800869e:	f023 0302 	bic.w	r3, r3, #2
 80086a2:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80086a4:	4b0f      	ldr	r3, [pc, #60]	; (80086e4 <HAL_PWR_EnterSTOPMode+0x74>)
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	4a0e      	ldr	r2, [pc, #56]	; (80086e4 <HAL_PWR_EnterSTOPMode+0x74>)
 80086aa:	f043 0304 	orr.w	r3, r3, #4
 80086ae:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80086b0:	f3bf 8f4f 	dsb	sy
}
 80086b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80086b6:	f3bf 8f6f 	isb	sy
}
 80086ba:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80086bc:	78fb      	ldrb	r3, [r7, #3]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d101      	bne.n	80086c6 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80086c2:	bf30      	wfi
 80086c4:	e000      	b.n	80086c8 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80086c6:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80086c8:	4b06      	ldr	r3, [pc, #24]	; (80086e4 <HAL_PWR_EnterSTOPMode+0x74>)
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	4a05      	ldr	r2, [pc, #20]	; (80086e4 <HAL_PWR_EnterSTOPMode+0x74>)
 80086ce:	f023 0304 	bic.w	r3, r3, #4
 80086d2:	6113      	str	r3, [r2, #16]
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	58024800 	.word	0x58024800
 80086e4:	e000ed00 	.word	0xe000ed00

080086e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80086f0:	4b19      	ldr	r3, [pc, #100]	; (8008758 <HAL_PWREx_ConfigSupply+0x70>)
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f003 0304 	and.w	r3, r3, #4
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	d00a      	beq.n	8008712 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80086fc:	4b16      	ldr	r3, [pc, #88]	; (8008758 <HAL_PWREx_ConfigSupply+0x70>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f003 0307 	and.w	r3, r3, #7
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	429a      	cmp	r2, r3
 8008708:	d001      	beq.n	800870e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e01f      	b.n	800874e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	e01d      	b.n	800874e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008712:	4b11      	ldr	r3, [pc, #68]	; (8008758 <HAL_PWREx_ConfigSupply+0x70>)
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f023 0207 	bic.w	r2, r3, #7
 800871a:	490f      	ldr	r1, [pc, #60]	; (8008758 <HAL_PWREx_ConfigSupply+0x70>)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4313      	orrs	r3, r2
 8008720:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008722:	f7fa f99f 	bl	8002a64 <HAL_GetTick>
 8008726:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008728:	e009      	b.n	800873e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800872a:	f7fa f99b 	bl	8002a64 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008738:	d901      	bls.n	800873e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e007      	b.n	800874e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800873e:	4b06      	ldr	r3, [pc, #24]	; (8008758 <HAL_PWREx_ConfigSupply+0x70>)
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800874a:	d1ee      	bne.n	800872a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	58024800 	.word	0x58024800

0800875c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08c      	sub	sp, #48	; 0x30
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d102      	bne.n	8008770 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	f000 bc1d 	b.w	8008faa <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 8087 	beq.w	800888c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800877e:	4b99      	ldr	r3, [pc, #612]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008786:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008788:	4b96      	ldr	r3, [pc, #600]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 800878a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800878e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008790:	2b10      	cmp	r3, #16
 8008792:	d007      	beq.n	80087a4 <HAL_RCC_OscConfig+0x48>
 8008794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008796:	2b18      	cmp	r3, #24
 8008798:	d110      	bne.n	80087bc <HAL_RCC_OscConfig+0x60>
 800879a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879c:	f003 0303 	and.w	r3, r3, #3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d10b      	bne.n	80087bc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087a4:	4b8f      	ldr	r3, [pc, #572]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d06c      	beq.n	800888a <HAL_RCC_OscConfig+0x12e>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d168      	bne.n	800888a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e3f6      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087c4:	d106      	bne.n	80087d4 <HAL_RCC_OscConfig+0x78>
 80087c6:	4b87      	ldr	r3, [pc, #540]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a86      	ldr	r2, [pc, #536]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80087cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	e02e      	b.n	8008832 <HAL_RCC_OscConfig+0xd6>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10c      	bne.n	80087f6 <HAL_RCC_OscConfig+0x9a>
 80087dc:	4b81      	ldr	r3, [pc, #516]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a80      	ldr	r2, [pc, #512]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80087e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	4b7e      	ldr	r3, [pc, #504]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a7d      	ldr	r2, [pc, #500]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80087ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	e01d      	b.n	8008832 <HAL_RCC_OscConfig+0xd6>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087fe:	d10c      	bne.n	800881a <HAL_RCC_OscConfig+0xbe>
 8008800:	4b78      	ldr	r3, [pc, #480]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a77      	ldr	r2, [pc, #476]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 8008806:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	4b75      	ldr	r3, [pc, #468]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a74      	ldr	r2, [pc, #464]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 8008812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	e00b      	b.n	8008832 <HAL_RCC_OscConfig+0xd6>
 800881a:	4b72      	ldr	r3, [pc, #456]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a71      	ldr	r2, [pc, #452]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 8008820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	4b6f      	ldr	r3, [pc, #444]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a6e      	ldr	r2, [pc, #440]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 800882c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008830:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d013      	beq.n	8008862 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883a:	f7fa f913 	bl	8002a64 <HAL_GetTick>
 800883e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008840:	e008      	b.n	8008854 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008842:	f7fa f90f 	bl	8002a64 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	2b64      	cmp	r3, #100	; 0x64
 800884e:	d901      	bls.n	8008854 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e3aa      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008854:	4b63      	ldr	r3, [pc, #396]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d0f0      	beq.n	8008842 <HAL_RCC_OscConfig+0xe6>
 8008860:	e014      	b.n	800888c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008862:	f7fa f8ff 	bl	8002a64 <HAL_GetTick>
 8008866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008868:	e008      	b.n	800887c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800886a:	f7fa f8fb 	bl	8002a64 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b64      	cmp	r3, #100	; 0x64
 8008876:	d901      	bls.n	800887c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e396      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800887c:	4b59      	ldr	r3, [pc, #356]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1f0      	bne.n	800886a <HAL_RCC_OscConfig+0x10e>
 8008888:	e000      	b.n	800888c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800888a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0302 	and.w	r3, r3, #2
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 80cb 	beq.w	8008a30 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800889a:	4b52      	ldr	r3, [pc, #328]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088a2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088a4:	4b4f      	ldr	r3, [pc, #316]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80088aa:	6a3b      	ldr	r3, [r7, #32]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d007      	beq.n	80088c0 <HAL_RCC_OscConfig+0x164>
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	2b18      	cmp	r3, #24
 80088b4:	d156      	bne.n	8008964 <HAL_RCC_OscConfig+0x208>
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	f003 0303 	and.w	r3, r3, #3
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d151      	bne.n	8008964 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088c0:	4b48      	ldr	r3, [pc, #288]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0304 	and.w	r3, r3, #4
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d005      	beq.n	80088d8 <HAL_RCC_OscConfig+0x17c>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e368      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088d8:	4b42      	ldr	r3, [pc, #264]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f023 0219 	bic.w	r2, r3, #25
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	493f      	ldr	r1, [pc, #252]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80088ea:	f7fa f8bb 	bl	8002a64 <HAL_GetTick>
 80088ee:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088f0:	e008      	b.n	8008904 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088f2:	f7fa f8b7 	bl	8002a64 <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d901      	bls.n	8008904 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e352      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008904:	4b37      	ldr	r3, [pc, #220]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0304 	and.w	r3, r3, #4
 800890c:	2b00      	cmp	r3, #0
 800890e:	d0f0      	beq.n	80088f2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008910:	f7fa f8e8 	bl	8002ae4 <HAL_GetREVID>
 8008914:	4603      	mov	r3, r0
 8008916:	f241 0203 	movw	r2, #4099	; 0x1003
 800891a:	4293      	cmp	r3, r2
 800891c:	d817      	bhi.n	800894e <HAL_RCC_OscConfig+0x1f2>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	2b40      	cmp	r3, #64	; 0x40
 8008924:	d108      	bne.n	8008938 <HAL_RCC_OscConfig+0x1dc>
 8008926:	4b2f      	ldr	r3, [pc, #188]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800892e:	4a2d      	ldr	r2, [pc, #180]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 8008930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008934:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008936:	e07b      	b.n	8008a30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008938:	4b2a      	ldr	r3, [pc, #168]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	031b      	lsls	r3, r3, #12
 8008946:	4927      	ldr	r1, [pc, #156]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 8008948:	4313      	orrs	r3, r2
 800894a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800894c:	e070      	b.n	8008a30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800894e:	4b25      	ldr	r3, [pc, #148]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	061b      	lsls	r3, r3, #24
 800895c:	4921      	ldr	r1, [pc, #132]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 800895e:	4313      	orrs	r3, r2
 8008960:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008962:	e065      	b.n	8008a30 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d048      	beq.n	80089fe <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800896c:	4b1d      	ldr	r3, [pc, #116]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f023 0219 	bic.w	r2, r3, #25
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	491a      	ldr	r1, [pc, #104]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 800897a:	4313      	orrs	r3, r2
 800897c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800897e:	f7fa f871 	bl	8002a64 <HAL_GetTick>
 8008982:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008984:	e008      	b.n	8008998 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008986:	f7fa f86d 	bl	8002a64 <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	2b02      	cmp	r3, #2
 8008992:	d901      	bls.n	8008998 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e308      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008998:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0304 	and.w	r3, r3, #4
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d0f0      	beq.n	8008986 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089a4:	f7fa f89e 	bl	8002ae4 <HAL_GetREVID>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d81a      	bhi.n	80089e8 <HAL_RCC_OscConfig+0x28c>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	2b40      	cmp	r3, #64	; 0x40
 80089b8:	d108      	bne.n	80089cc <HAL_RCC_OscConfig+0x270>
 80089ba:	4b0a      	ldr	r3, [pc, #40]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80089c2:	4a08      	ldr	r2, [pc, #32]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80089c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089c8:	6053      	str	r3, [r2, #4]
 80089ca:	e031      	b.n	8008a30 <HAL_RCC_OscConfig+0x2d4>
 80089cc:	4b05      	ldr	r3, [pc, #20]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	031b      	lsls	r3, r3, #12
 80089da:	4902      	ldr	r1, [pc, #8]	; (80089e4 <HAL_RCC_OscConfig+0x288>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	604b      	str	r3, [r1, #4]
 80089e0:	e026      	b.n	8008a30 <HAL_RCC_OscConfig+0x2d4>
 80089e2:	bf00      	nop
 80089e4:	58024400 	.word	0x58024400
 80089e8:	4b9a      	ldr	r3, [pc, #616]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	061b      	lsls	r3, r3, #24
 80089f6:	4997      	ldr	r1, [pc, #604]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	604b      	str	r3, [r1, #4]
 80089fc:	e018      	b.n	8008a30 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089fe:	4b95      	ldr	r3, [pc, #596]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a94      	ldr	r2, [pc, #592]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008a04:	f023 0301 	bic.w	r3, r3, #1
 8008a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a0a:	f7fa f82b 	bl	8002a64 <HAL_GetTick>
 8008a0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a10:	e008      	b.n	8008a24 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a12:	f7fa f827 	bl	8002a64 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d901      	bls.n	8008a24 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e2c2      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a24:	4b8b      	ldr	r3, [pc, #556]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1f0      	bne.n	8008a12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0310 	and.w	r3, r3, #16
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 80a9 	beq.w	8008b90 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a3e:	4b85      	ldr	r3, [pc, #532]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a46:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a48:	4b82      	ldr	r3, [pc, #520]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	2b08      	cmp	r3, #8
 8008a52:	d007      	beq.n	8008a64 <HAL_RCC_OscConfig+0x308>
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	2b18      	cmp	r3, #24
 8008a58:	d13a      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x374>
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f003 0303 	and.w	r3, r3, #3
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d135      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a64:	4b7b      	ldr	r3, [pc, #492]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d005      	beq.n	8008a7c <HAL_RCC_OscConfig+0x320>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	69db      	ldr	r3, [r3, #28]
 8008a74:	2b80      	cmp	r3, #128	; 0x80
 8008a76:	d001      	beq.n	8008a7c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e296      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a7c:	f7fa f832 	bl	8002ae4 <HAL_GetREVID>
 8008a80:	4603      	mov	r3, r0
 8008a82:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d817      	bhi.n	8008aba <HAL_RCC_OscConfig+0x35e>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	2b20      	cmp	r3, #32
 8008a90:	d108      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x348>
 8008a92:	4b70      	ldr	r3, [pc, #448]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a9a:	4a6e      	ldr	r2, [pc, #440]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008a9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aa0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008aa2:	e075      	b.n	8008b90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008aa4:	4b6b      	ldr	r3, [pc, #428]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	069b      	lsls	r3, r3, #26
 8008ab2:	4968      	ldr	r1, [pc, #416]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ab8:	e06a      	b.n	8008b90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008aba:	4b66      	ldr	r3, [pc, #408]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	061b      	lsls	r3, r3, #24
 8008ac8:	4962      	ldr	r1, [pc, #392]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ace:	e05f      	b.n	8008b90 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d042      	beq.n	8008b5e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008ad8:	4b5e      	ldr	r3, [pc, #376]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a5d      	ldr	r2, [pc, #372]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae4:	f7f9 ffbe 	bl	8002a64 <HAL_GetTick>
 8008ae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008aea:	e008      	b.n	8008afe <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008aec:	f7f9 ffba 	bl	8002a64 <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d901      	bls.n	8008afe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e255      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008afe:	4b55      	ldr	r3, [pc, #340]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0f0      	beq.n	8008aec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b0a:	f7f9 ffeb 	bl	8002ae4 <HAL_GetREVID>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d817      	bhi.n	8008b48 <HAL_RCC_OscConfig+0x3ec>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	2b20      	cmp	r3, #32
 8008b1e:	d108      	bne.n	8008b32 <HAL_RCC_OscConfig+0x3d6>
 8008b20:	4b4c      	ldr	r3, [pc, #304]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008b28:	4a4a      	ldr	r2, [pc, #296]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008b2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b2e:	6053      	str	r3, [r2, #4]
 8008b30:	e02e      	b.n	8008b90 <HAL_RCC_OscConfig+0x434>
 8008b32:	4b48      	ldr	r3, [pc, #288]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	069b      	lsls	r3, r3, #26
 8008b40:	4944      	ldr	r1, [pc, #272]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	604b      	str	r3, [r1, #4]
 8008b46:	e023      	b.n	8008b90 <HAL_RCC_OscConfig+0x434>
 8008b48:	4b42      	ldr	r3, [pc, #264]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	061b      	lsls	r3, r3, #24
 8008b56:	493f      	ldr	r1, [pc, #252]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	60cb      	str	r3, [r1, #12]
 8008b5c:	e018      	b.n	8008b90 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b5e:	4b3d      	ldr	r3, [pc, #244]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a3c      	ldr	r2, [pc, #240]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b6a:	f7f9 ff7b 	bl	8002a64 <HAL_GetTick>
 8008b6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b70:	e008      	b.n	8008b84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008b72:	f7f9 ff77 	bl	8002a64 <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d901      	bls.n	8008b84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e212      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b84:	4b33      	ldr	r3, [pc, #204]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1f0      	bne.n	8008b72 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0308 	and.w	r3, r3, #8
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d036      	beq.n	8008c0a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d019      	beq.n	8008bd8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ba4:	4b2b      	ldr	r3, [pc, #172]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ba8:	4a2a      	ldr	r2, [pc, #168]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008baa:	f043 0301 	orr.w	r3, r3, #1
 8008bae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bb0:	f7f9 ff58 	bl	8002a64 <HAL_GetTick>
 8008bb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008bb6:	e008      	b.n	8008bca <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bb8:	f7f9 ff54 	bl	8002a64 <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d901      	bls.n	8008bca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e1ef      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008bca:	4b22      	ldr	r3, [pc, #136]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bce:	f003 0302 	and.w	r3, r3, #2
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d0f0      	beq.n	8008bb8 <HAL_RCC_OscConfig+0x45c>
 8008bd6:	e018      	b.n	8008c0a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bd8:	4b1e      	ldr	r3, [pc, #120]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bdc:	4a1d      	ldr	r2, [pc, #116]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008bde:	f023 0301 	bic.w	r3, r3, #1
 8008be2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008be4:	f7f9 ff3e 	bl	8002a64 <HAL_GetTick>
 8008be8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bea:	e008      	b.n	8008bfe <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bec:	f7f9 ff3a 	bl	8002a64 <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d901      	bls.n	8008bfe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e1d5      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bfe:	4b15      	ldr	r3, [pc, #84]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1f0      	bne.n	8008bec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0320 	and.w	r3, r3, #32
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d039      	beq.n	8008c8a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d01c      	beq.n	8008c58 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c1e:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a0c      	ldr	r2, [pc, #48]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008c24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c2a:	f7f9 ff1b 	bl	8002a64 <HAL_GetTick>
 8008c2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c30:	e008      	b.n	8008c44 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c32:	f7f9 ff17 	bl	8002a64 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d901      	bls.n	8008c44 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e1b2      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c44:	4b03      	ldr	r3, [pc, #12]	; (8008c54 <HAL_RCC_OscConfig+0x4f8>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0f0      	beq.n	8008c32 <HAL_RCC_OscConfig+0x4d6>
 8008c50:	e01b      	b.n	8008c8a <HAL_RCC_OscConfig+0x52e>
 8008c52:	bf00      	nop
 8008c54:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c58:	4b9b      	ldr	r3, [pc, #620]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a9a      	ldr	r2, [pc, #616]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008c5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c64:	f7f9 fefe 	bl	8002a64 <HAL_GetTick>
 8008c68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c6a:	e008      	b.n	8008c7e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c6c:	f7f9 fefa 	bl	8002a64 <HAL_GetTick>
 8008c70:	4602      	mov	r2, r0
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d901      	bls.n	8008c7e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	e195      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c7e:	4b92      	ldr	r3, [pc, #584]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1f0      	bne.n	8008c6c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 0304 	and.w	r3, r3, #4
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 8081 	beq.w	8008d9a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c98:	4b8c      	ldr	r3, [pc, #560]	; (8008ecc <HAL_RCC_OscConfig+0x770>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a8b      	ldr	r2, [pc, #556]	; (8008ecc <HAL_RCC_OscConfig+0x770>)
 8008c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ca2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ca4:	f7f9 fede 	bl	8002a64 <HAL_GetTick>
 8008ca8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008caa:	e008      	b.n	8008cbe <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008cac:	f7f9 feda 	bl	8002a64 <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b64      	cmp	r3, #100	; 0x64
 8008cb8:	d901      	bls.n	8008cbe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e175      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cbe:	4b83      	ldr	r3, [pc, #524]	; (8008ecc <HAL_RCC_OscConfig+0x770>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0f0      	beq.n	8008cac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d106      	bne.n	8008ce0 <HAL_RCC_OscConfig+0x584>
 8008cd2:	4b7d      	ldr	r3, [pc, #500]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd6:	4a7c      	ldr	r2, [pc, #496]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008cd8:	f043 0301 	orr.w	r3, r3, #1
 8008cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8008cde:	e02d      	b.n	8008d3c <HAL_RCC_OscConfig+0x5e0>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10c      	bne.n	8008d02 <HAL_RCC_OscConfig+0x5a6>
 8008ce8:	4b77      	ldr	r3, [pc, #476]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cec:	4a76      	ldr	r2, [pc, #472]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008cee:	f023 0301 	bic.w	r3, r3, #1
 8008cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8008cf4:	4b74      	ldr	r3, [pc, #464]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf8:	4a73      	ldr	r2, [pc, #460]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008cfa:	f023 0304 	bic.w	r3, r3, #4
 8008cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8008d00:	e01c      	b.n	8008d3c <HAL_RCC_OscConfig+0x5e0>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	2b05      	cmp	r3, #5
 8008d08:	d10c      	bne.n	8008d24 <HAL_RCC_OscConfig+0x5c8>
 8008d0a:	4b6f      	ldr	r3, [pc, #444]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0e:	4a6e      	ldr	r2, [pc, #440]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008d10:	f043 0304 	orr.w	r3, r3, #4
 8008d14:	6713      	str	r3, [r2, #112]	; 0x70
 8008d16:	4b6c      	ldr	r3, [pc, #432]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d1a:	4a6b      	ldr	r2, [pc, #428]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008d1c:	f043 0301 	orr.w	r3, r3, #1
 8008d20:	6713      	str	r3, [r2, #112]	; 0x70
 8008d22:	e00b      	b.n	8008d3c <HAL_RCC_OscConfig+0x5e0>
 8008d24:	4b68      	ldr	r3, [pc, #416]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d28:	4a67      	ldr	r2, [pc, #412]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008d2a:	f023 0301 	bic.w	r3, r3, #1
 8008d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8008d30:	4b65      	ldr	r3, [pc, #404]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d34:	4a64      	ldr	r2, [pc, #400]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008d36:	f023 0304 	bic.w	r3, r3, #4
 8008d3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d015      	beq.n	8008d70 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d44:	f7f9 fe8e 	bl	8002a64 <HAL_GetTick>
 8008d48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d4a:	e00a      	b.n	8008d62 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d4c:	f7f9 fe8a 	bl	8002a64 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d901      	bls.n	8008d62 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e123      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d62:	4b59      	ldr	r3, [pc, #356]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0ee      	beq.n	8008d4c <HAL_RCC_OscConfig+0x5f0>
 8008d6e:	e014      	b.n	8008d9a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d70:	f7f9 fe78 	bl	8002a64 <HAL_GetTick>
 8008d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d76:	e00a      	b.n	8008d8e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d78:	f7f9 fe74 	bl	8002a64 <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d901      	bls.n	8008d8e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e10d      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d8e:	4b4e      	ldr	r3, [pc, #312]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1ee      	bne.n	8008d78 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 8102 	beq.w	8008fa8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008da4:	4b48      	ldr	r3, [pc, #288]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dac:	2b18      	cmp	r3, #24
 8008dae:	f000 80bd 	beq.w	8008f2c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	f040 809e 	bne.w	8008ef8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dbc:	4b42      	ldr	r3, [pc, #264]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a41      	ldr	r2, [pc, #260]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc8:	f7f9 fe4c 	bl	8002a64 <HAL_GetTick>
 8008dcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008dce:	e008      	b.n	8008de2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dd0:	f7f9 fe48 	bl	8002a64 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d901      	bls.n	8008de2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e0e3      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008de2:	4b39      	ldr	r3, [pc, #228]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1f0      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dee:	4b36      	ldr	r3, [pc, #216]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008df2:	4b37      	ldr	r3, [pc, #220]	; (8008ed0 <HAL_RCC_OscConfig+0x774>)
 8008df4:	4013      	ands	r3, r2
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008dfe:	0112      	lsls	r2, r2, #4
 8008e00:	430a      	orrs	r2, r1
 8008e02:	4931      	ldr	r1, [pc, #196]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	628b      	str	r3, [r1, #40]	; 0x28
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e16:	3b01      	subs	r3, #1
 8008e18:	025b      	lsls	r3, r3, #9
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	431a      	orrs	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e22:	3b01      	subs	r3, #1
 8008e24:	041b      	lsls	r3, r3, #16
 8008e26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e30:	3b01      	subs	r3, #1
 8008e32:	061b      	lsls	r3, r3, #24
 8008e34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e38:	4923      	ldr	r1, [pc, #140]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008e3e:	4b22      	ldr	r3, [pc, #136]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e42:	4a21      	ldr	r2, [pc, #132]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e44:	f023 0301 	bic.w	r3, r3, #1
 8008e48:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e4a:	4b1f      	ldr	r3, [pc, #124]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e4e:	4b21      	ldr	r3, [pc, #132]	; (8008ed4 <HAL_RCC_OscConfig+0x778>)
 8008e50:	4013      	ands	r3, r2
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e56:	00d2      	lsls	r2, r2, #3
 8008e58:	491b      	ldr	r1, [pc, #108]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e5e:	4b1a      	ldr	r3, [pc, #104]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	f023 020c 	bic.w	r2, r3, #12
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6a:	4917      	ldr	r1, [pc, #92]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e70:	4b15      	ldr	r3, [pc, #84]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	f023 0202 	bic.w	r2, r3, #2
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7c:	4912      	ldr	r1, [pc, #72]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e82:	4b11      	ldr	r3, [pc, #68]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e86:	4a10      	ldr	r2, [pc, #64]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e8e:	4b0e      	ldr	r3, [pc, #56]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e92:	4a0d      	ldr	r2, [pc, #52]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e9a:	4b0b      	ldr	r3, [pc, #44]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9e:	4a0a      	ldr	r2, [pc, #40]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008ea6:	4b08      	ldr	r3, [pc, #32]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eaa:	4a07      	ldr	r2, [pc, #28]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008eac:	f043 0301 	orr.w	r3, r3, #1
 8008eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008eb2:	4b05      	ldr	r3, [pc, #20]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a04      	ldr	r2, [pc, #16]	; (8008ec8 <HAL_RCC_OscConfig+0x76c>)
 8008eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ebe:	f7f9 fdd1 	bl	8002a64 <HAL_GetTick>
 8008ec2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ec4:	e011      	b.n	8008eea <HAL_RCC_OscConfig+0x78e>
 8008ec6:	bf00      	nop
 8008ec8:	58024400 	.word	0x58024400
 8008ecc:	58024800 	.word	0x58024800
 8008ed0:	fffffc0c 	.word	0xfffffc0c
 8008ed4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ed8:	f7f9 fdc4 	bl	8002a64 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d901      	bls.n	8008eea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e05f      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008eea:	4b32      	ldr	r3, [pc, #200]	; (8008fb4 <HAL_RCC_OscConfig+0x858>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d0f0      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x77c>
 8008ef6:	e057      	b.n	8008fa8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ef8:	4b2e      	ldr	r3, [pc, #184]	; (8008fb4 <HAL_RCC_OscConfig+0x858>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a2d      	ldr	r2, [pc, #180]	; (8008fb4 <HAL_RCC_OscConfig+0x858>)
 8008efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f04:	f7f9 fdae 	bl	8002a64 <HAL_GetTick>
 8008f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f0a:	e008      	b.n	8008f1e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f0c:	f7f9 fdaa 	bl	8002a64 <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d901      	bls.n	8008f1e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e045      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f1e:	4b25      	ldr	r3, [pc, #148]	; (8008fb4 <HAL_RCC_OscConfig+0x858>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1f0      	bne.n	8008f0c <HAL_RCC_OscConfig+0x7b0>
 8008f2a:	e03d      	b.n	8008fa8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008f2c:	4b21      	ldr	r3, [pc, #132]	; (8008fb4 <HAL_RCC_OscConfig+0x858>)
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008f32:	4b20      	ldr	r3, [pc, #128]	; (8008fb4 <HAL_RCC_OscConfig+0x858>)
 8008f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f36:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d031      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f003 0203 	and.w	r2, r3, #3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d12a      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	091b      	lsrs	r3, r3, #4
 8008f52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d122      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f68:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d11a      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	0a5b      	lsrs	r3, r3, #9
 8008f72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f7a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d111      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	0c1b      	lsrs	r3, r3, #16
 8008f84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d108      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	0e1b      	lsrs	r3, r3, #24
 8008f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d001      	beq.n	8008fa8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e000      	b.n	8008faa <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3730      	adds	r7, #48	; 0x30
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	58024400 	.word	0x58024400

08008fb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e19c      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008fcc:	4b8a      	ldr	r3, [pc, #552]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 030f 	and.w	r3, r3, #15
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d910      	bls.n	8008ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fda:	4b87      	ldr	r3, [pc, #540]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f023 020f 	bic.w	r2, r3, #15
 8008fe2:	4985      	ldr	r1, [pc, #532]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fea:	4b83      	ldr	r3, [pc, #524]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 030f 	and.w	r3, r3, #15
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d001      	beq.n	8008ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e184      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0304 	and.w	r3, r3, #4
 8009004:	2b00      	cmp	r3, #0
 8009006:	d010      	beq.n	800902a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691a      	ldr	r2, [r3, #16]
 800900c:	4b7b      	ldr	r3, [pc, #492]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009014:	429a      	cmp	r2, r3
 8009016:	d908      	bls.n	800902a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009018:	4b78      	ldr	r3, [pc, #480]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	4975      	ldr	r1, [pc, #468]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009026:	4313      	orrs	r3, r2
 8009028:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0308 	and.w	r3, r3, #8
 8009032:	2b00      	cmp	r3, #0
 8009034:	d010      	beq.n	8009058 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	695a      	ldr	r2, [r3, #20]
 800903a:	4b70      	ldr	r3, [pc, #448]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009042:	429a      	cmp	r2, r3
 8009044:	d908      	bls.n	8009058 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009046:	4b6d      	ldr	r3, [pc, #436]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	496a      	ldr	r1, [pc, #424]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009054:	4313      	orrs	r3, r2
 8009056:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0310 	and.w	r3, r3, #16
 8009060:	2b00      	cmp	r3, #0
 8009062:	d010      	beq.n	8009086 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	699a      	ldr	r2, [r3, #24]
 8009068:	4b64      	ldr	r3, [pc, #400]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800906a:	69db      	ldr	r3, [r3, #28]
 800906c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009070:	429a      	cmp	r2, r3
 8009072:	d908      	bls.n	8009086 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009074:	4b61      	ldr	r3, [pc, #388]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	495e      	ldr	r1, [pc, #376]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009082:	4313      	orrs	r3, r2
 8009084:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 0320 	and.w	r3, r3, #32
 800908e:	2b00      	cmp	r3, #0
 8009090:	d010      	beq.n	80090b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	69da      	ldr	r2, [r3, #28]
 8009096:	4b59      	ldr	r3, [pc, #356]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800909e:	429a      	cmp	r2, r3
 80090a0:	d908      	bls.n	80090b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80090a2:	4b56      	ldr	r3, [pc, #344]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	4953      	ldr	r1, [pc, #332]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d010      	beq.n	80090e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	4b4d      	ldr	r3, [pc, #308]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d908      	bls.n	80090e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090d0:	4b4a      	ldr	r3, [pc, #296]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	f023 020f 	bic.w	r2, r3, #15
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	4947      	ldr	r1, [pc, #284]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d055      	beq.n	800919a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80090ee:	4b43      	ldr	r3, [pc, #268]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	4940      	ldr	r1, [pc, #256]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	2b02      	cmp	r3, #2
 8009106:	d107      	bne.n	8009118 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009108:	4b3c      	ldr	r3, [pc, #240]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d121      	bne.n	8009158 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e0f6      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	2b03      	cmp	r3, #3
 800911e:	d107      	bne.n	8009130 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009120:	4b36      	ldr	r3, [pc, #216]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d115      	bne.n	8009158 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e0ea      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d107      	bne.n	8009148 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009138:	4b30      	ldr	r3, [pc, #192]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009140:	2b00      	cmp	r3, #0
 8009142:	d109      	bne.n	8009158 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e0de      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009148:	4b2c      	ldr	r3, [pc, #176]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e0d6      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009158:	4b28      	ldr	r3, [pc, #160]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	f023 0207 	bic.w	r2, r3, #7
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	4925      	ldr	r1, [pc, #148]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009166:	4313      	orrs	r3, r2
 8009168:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800916a:	f7f9 fc7b 	bl	8002a64 <HAL_GetTick>
 800916e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009170:	e00a      	b.n	8009188 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009172:	f7f9 fc77 	bl	8002a64 <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009180:	4293      	cmp	r3, r2
 8009182:	d901      	bls.n	8009188 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e0be      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009188:	4b1c      	ldr	r3, [pc, #112]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	00db      	lsls	r3, r3, #3
 8009196:	429a      	cmp	r2, r3
 8009198:	d1eb      	bne.n	8009172 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d010      	beq.n	80091c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68da      	ldr	r2, [r3, #12]
 80091aa:	4b14      	ldr	r3, [pc, #80]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	f003 030f 	and.w	r3, r3, #15
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d208      	bcs.n	80091c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091b6:	4b11      	ldr	r3, [pc, #68]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	f023 020f 	bic.w	r2, r3, #15
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	490e      	ldr	r1, [pc, #56]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091c8:	4b0b      	ldr	r3, [pc, #44]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 030f 	and.w	r3, r3, #15
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d214      	bcs.n	8009200 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091d6:	4b08      	ldr	r3, [pc, #32]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f023 020f 	bic.w	r2, r3, #15
 80091de:	4906      	ldr	r1, [pc, #24]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091e6:	4b04      	ldr	r3, [pc, #16]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 030f 	and.w	r3, r3, #15
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d005      	beq.n	8009200 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e086      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>
 80091f8:	52002000 	.word	0x52002000
 80091fc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	2b00      	cmp	r3, #0
 800920a:	d010      	beq.n	800922e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691a      	ldr	r2, [r3, #16]
 8009210:	4b3f      	ldr	r3, [pc, #252]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009218:	429a      	cmp	r2, r3
 800921a:	d208      	bcs.n	800922e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800921c:	4b3c      	ldr	r3, [pc, #240]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	4939      	ldr	r1, [pc, #228]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 800922a:	4313      	orrs	r3, r2
 800922c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0308 	and.w	r3, r3, #8
 8009236:	2b00      	cmp	r3, #0
 8009238:	d010      	beq.n	800925c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	695a      	ldr	r2, [r3, #20]
 800923e:	4b34      	ldr	r3, [pc, #208]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009246:	429a      	cmp	r2, r3
 8009248:	d208      	bcs.n	800925c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800924a:	4b31      	ldr	r3, [pc, #196]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	492e      	ldr	r1, [pc, #184]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 8009258:	4313      	orrs	r3, r2
 800925a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0310 	and.w	r3, r3, #16
 8009264:	2b00      	cmp	r3, #0
 8009266:	d010      	beq.n	800928a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	699a      	ldr	r2, [r3, #24]
 800926c:	4b28      	ldr	r3, [pc, #160]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009274:	429a      	cmp	r2, r3
 8009276:	d208      	bcs.n	800928a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009278:	4b25      	ldr	r3, [pc, #148]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	4922      	ldr	r1, [pc, #136]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 8009286:	4313      	orrs	r3, r2
 8009288:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 0320 	and.w	r3, r3, #32
 8009292:	2b00      	cmp	r3, #0
 8009294:	d010      	beq.n	80092b8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	69da      	ldr	r2, [r3, #28]
 800929a:	4b1d      	ldr	r3, [pc, #116]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d208      	bcs.n	80092b8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80092a6:	4b1a      	ldr	r3, [pc, #104]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	4917      	ldr	r1, [pc, #92]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 80092b4:	4313      	orrs	r3, r2
 80092b6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80092b8:	f000 f834 	bl	8009324 <HAL_RCC_GetSysClockFreq>
 80092bc:	4602      	mov	r2, r0
 80092be:	4b14      	ldr	r3, [pc, #80]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	0a1b      	lsrs	r3, r3, #8
 80092c4:	f003 030f 	and.w	r3, r3, #15
 80092c8:	4912      	ldr	r1, [pc, #72]	; (8009314 <HAL_RCC_ClockConfig+0x35c>)
 80092ca:	5ccb      	ldrb	r3, [r1, r3]
 80092cc:	f003 031f 	and.w	r3, r3, #31
 80092d0:	fa22 f303 	lsr.w	r3, r2, r3
 80092d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092d6:	4b0e      	ldr	r3, [pc, #56]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	f003 030f 	and.w	r3, r3, #15
 80092de:	4a0d      	ldr	r2, [pc, #52]	; (8009314 <HAL_RCC_ClockConfig+0x35c>)
 80092e0:	5cd3      	ldrb	r3, [r2, r3]
 80092e2:	f003 031f 	and.w	r3, r3, #31
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	fa22 f303 	lsr.w	r3, r2, r3
 80092ec:	4a0a      	ldr	r2, [pc, #40]	; (8009318 <HAL_RCC_ClockConfig+0x360>)
 80092ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092f0:	4a0a      	ldr	r2, [pc, #40]	; (800931c <HAL_RCC_ClockConfig+0x364>)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80092f6:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <HAL_RCC_ClockConfig+0x368>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7f9 fb68 	bl	80029d0 <HAL_InitTick>
 8009300:	4603      	mov	r3, r0
 8009302:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009304:	7bfb      	ldrb	r3, [r7, #15]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	58024400 	.word	0x58024400
 8009314:	0800ffa0 	.word	0x0800ffa0
 8009318:	2400002c 	.word	0x2400002c
 800931c:	24000028 	.word	0x24000028
 8009320:	24000030 	.word	0x24000030

08009324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009324:	b480      	push	{r7}
 8009326:	b089      	sub	sp, #36	; 0x24
 8009328:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800932a:	4bb3      	ldr	r3, [pc, #716]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009332:	2b18      	cmp	r3, #24
 8009334:	f200 8155 	bhi.w	80095e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009338:	a201      	add	r2, pc, #4	; (adr r2, 8009340 <HAL_RCC_GetSysClockFreq+0x1c>)
 800933a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933e:	bf00      	nop
 8009340:	080093a5 	.word	0x080093a5
 8009344:	080095e3 	.word	0x080095e3
 8009348:	080095e3 	.word	0x080095e3
 800934c:	080095e3 	.word	0x080095e3
 8009350:	080095e3 	.word	0x080095e3
 8009354:	080095e3 	.word	0x080095e3
 8009358:	080095e3 	.word	0x080095e3
 800935c:	080095e3 	.word	0x080095e3
 8009360:	080093cb 	.word	0x080093cb
 8009364:	080095e3 	.word	0x080095e3
 8009368:	080095e3 	.word	0x080095e3
 800936c:	080095e3 	.word	0x080095e3
 8009370:	080095e3 	.word	0x080095e3
 8009374:	080095e3 	.word	0x080095e3
 8009378:	080095e3 	.word	0x080095e3
 800937c:	080095e3 	.word	0x080095e3
 8009380:	080093d1 	.word	0x080093d1
 8009384:	080095e3 	.word	0x080095e3
 8009388:	080095e3 	.word	0x080095e3
 800938c:	080095e3 	.word	0x080095e3
 8009390:	080095e3 	.word	0x080095e3
 8009394:	080095e3 	.word	0x080095e3
 8009398:	080095e3 	.word	0x080095e3
 800939c:	080095e3 	.word	0x080095e3
 80093a0:	080093d7 	.word	0x080093d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093a4:	4b94      	ldr	r3, [pc, #592]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0320 	and.w	r3, r3, #32
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d009      	beq.n	80093c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093b0:	4b91      	ldr	r3, [pc, #580]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	08db      	lsrs	r3, r3, #3
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	4a90      	ldr	r2, [pc, #576]	; (80095fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093bc:	fa22 f303 	lsr.w	r3, r2, r3
 80093c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80093c2:	e111      	b.n	80095e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80093c4:	4b8d      	ldr	r3, [pc, #564]	; (80095fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093c6:	61bb      	str	r3, [r7, #24]
    break;
 80093c8:	e10e      	b.n	80095e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80093ca:	4b8d      	ldr	r3, [pc, #564]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093cc:	61bb      	str	r3, [r7, #24]
    break;
 80093ce:	e10b      	b.n	80095e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80093d0:	4b8c      	ldr	r3, [pc, #560]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80093d2:	61bb      	str	r3, [r7, #24]
    break;
 80093d4:	e108      	b.n	80095e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093d6:	4b88      	ldr	r3, [pc, #544]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093da:	f003 0303 	and.w	r3, r3, #3
 80093de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80093e0:	4b85      	ldr	r3, [pc, #532]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e4:	091b      	lsrs	r3, r3, #4
 80093e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80093ec:	4b82      	ldr	r3, [pc, #520]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80093f6:	4b80      	ldr	r3, [pc, #512]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fa:	08db      	lsrs	r3, r3, #3
 80093fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	fb02 f303 	mul.w	r3, r2, r3
 8009406:	ee07 3a90 	vmov	s15, r3
 800940a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 80e1 	beq.w	80095dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2b02      	cmp	r3, #2
 800941e:	f000 8083 	beq.w	8009528 <HAL_RCC_GetSysClockFreq+0x204>
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2b02      	cmp	r3, #2
 8009426:	f200 80a1 	bhi.w	800956c <HAL_RCC_GetSysClockFreq+0x248>
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d003      	beq.n	8009438 <HAL_RCC_GetSysClockFreq+0x114>
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d056      	beq.n	80094e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009436:	e099      	b.n	800956c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009438:	4b6f      	ldr	r3, [pc, #444]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 0320 	and.w	r3, r3, #32
 8009440:	2b00      	cmp	r3, #0
 8009442:	d02d      	beq.n	80094a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009444:	4b6c      	ldr	r3, [pc, #432]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	08db      	lsrs	r3, r3, #3
 800944a:	f003 0303 	and.w	r3, r3, #3
 800944e:	4a6b      	ldr	r2, [pc, #428]	; (80095fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009450:	fa22 f303 	lsr.w	r3, r2, r3
 8009454:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	ee07 3a90 	vmov	s15, r3
 800945c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	ee07 3a90 	vmov	s15, r3
 8009466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800946e:	4b62      	ldr	r3, [pc, #392]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800947e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009482:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800948a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800948e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800949a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800949e:	e087      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800960c <HAL_RCC_GetSysClockFreq+0x2e8>
 80094ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094b2:	4b51      	ldr	r3, [pc, #324]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ba:	ee07 3a90 	vmov	s15, r3
 80094be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80094c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009608 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094e2:	e065      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009610 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094f6:	4b40      	ldr	r3, [pc, #256]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094fe:	ee07 3a90 	vmov	s15, r3
 8009502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009506:	ed97 6a02 	vldr	s12, [r7, #8]
 800950a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009608 <HAL_RCC_GetSysClockFreq+0x2e4>
 800950e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800951a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800951e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009526:	e043      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	ee07 3a90 	vmov	s15, r3
 800952e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009532:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009614 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800953a:	4b2f      	ldr	r3, [pc, #188]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800953c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009542:	ee07 3a90 	vmov	s15, r3
 8009546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800954a:	ed97 6a02 	vldr	s12, [r7, #8]
 800954e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800955a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800955e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800956a:	e021      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	ee07 3a90 	vmov	s15, r3
 8009572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009576:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009610 <HAL_RCC_GetSysClockFreq+0x2ec>
 800957a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800957e:	4b1e      	ldr	r3, [pc, #120]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009586:	ee07 3a90 	vmov	s15, r3
 800958a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800958e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009592:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800959a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800959e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80095b0:	4b11      	ldr	r3, [pc, #68]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b4:	0a5b      	lsrs	r3, r3, #9
 80095b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ba:	3301      	adds	r3, #1
 80095bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	ee07 3a90 	vmov	s15, r3
 80095c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80095cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095d4:	ee17 3a90 	vmov	r3, s15
 80095d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80095da:	e005      	b.n	80095e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80095dc:	2300      	movs	r3, #0
 80095de:	61bb      	str	r3, [r7, #24]
    break;
 80095e0:	e002      	b.n	80095e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80095e2:	4b07      	ldr	r3, [pc, #28]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80095e4:	61bb      	str	r3, [r7, #24]
    break;
 80095e6:	bf00      	nop
  }

  return sysclockfreq;
 80095e8:	69bb      	ldr	r3, [r7, #24]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3724      	adds	r7, #36	; 0x24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	58024400 	.word	0x58024400
 80095fc:	03d09000 	.word	0x03d09000
 8009600:	003d0900 	.word	0x003d0900
 8009604:	017d7840 	.word	0x017d7840
 8009608:	46000000 	.word	0x46000000
 800960c:	4c742400 	.word	0x4c742400
 8009610:	4a742400 	.word	0x4a742400
 8009614:	4bbebc20 	.word	0x4bbebc20

08009618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800961e:	f7ff fe81 	bl	8009324 <HAL_RCC_GetSysClockFreq>
 8009622:	4602      	mov	r2, r0
 8009624:	4b10      	ldr	r3, [pc, #64]	; (8009668 <HAL_RCC_GetHCLKFreq+0x50>)
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	0a1b      	lsrs	r3, r3, #8
 800962a:	f003 030f 	and.w	r3, r3, #15
 800962e:	490f      	ldr	r1, [pc, #60]	; (800966c <HAL_RCC_GetHCLKFreq+0x54>)
 8009630:	5ccb      	ldrb	r3, [r1, r3]
 8009632:	f003 031f 	and.w	r3, r3, #31
 8009636:	fa22 f303 	lsr.w	r3, r2, r3
 800963a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800963c:	4b0a      	ldr	r3, [pc, #40]	; (8009668 <HAL_RCC_GetHCLKFreq+0x50>)
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	f003 030f 	and.w	r3, r3, #15
 8009644:	4a09      	ldr	r2, [pc, #36]	; (800966c <HAL_RCC_GetHCLKFreq+0x54>)
 8009646:	5cd3      	ldrb	r3, [r2, r3]
 8009648:	f003 031f 	and.w	r3, r3, #31
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	fa22 f303 	lsr.w	r3, r2, r3
 8009652:	4a07      	ldr	r2, [pc, #28]	; (8009670 <HAL_RCC_GetHCLKFreq+0x58>)
 8009654:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009656:	4a07      	ldr	r2, [pc, #28]	; (8009674 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800965c:	4b04      	ldr	r3, [pc, #16]	; (8009670 <HAL_RCC_GetHCLKFreq+0x58>)
 800965e:	681b      	ldr	r3, [r3, #0]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	58024400 	.word	0x58024400
 800966c:	0800ffa0 	.word	0x0800ffa0
 8009670:	2400002c 	.word	0x2400002c
 8009674:	24000028 	.word	0x24000028

08009678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800967c:	f7ff ffcc 	bl	8009618 <HAL_RCC_GetHCLKFreq>
 8009680:	4602      	mov	r2, r0
 8009682:	4b06      	ldr	r3, [pc, #24]	; (800969c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	091b      	lsrs	r3, r3, #4
 8009688:	f003 0307 	and.w	r3, r3, #7
 800968c:	4904      	ldr	r1, [pc, #16]	; (80096a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800968e:	5ccb      	ldrb	r3, [r1, r3]
 8009690:	f003 031f 	and.w	r3, r3, #31
 8009694:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009698:	4618      	mov	r0, r3
 800969a:	bd80      	pop	{r7, pc}
 800969c:	58024400 	.word	0x58024400
 80096a0:	0800ffa0 	.word	0x0800ffa0

080096a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80096a8:	f7ff ffb6 	bl	8009618 <HAL_RCC_GetHCLKFreq>
 80096ac:	4602      	mov	r2, r0
 80096ae:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	0a1b      	lsrs	r3, r3, #8
 80096b4:	f003 0307 	and.w	r3, r3, #7
 80096b8:	4904      	ldr	r1, [pc, #16]	; (80096cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80096ba:	5ccb      	ldrb	r3, [r1, r3]
 80096bc:	f003 031f 	and.w	r3, r3, #31
 80096c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	58024400 	.word	0x58024400
 80096cc:	0800ffa0 	.word	0x0800ffa0

080096d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096d8:	2300      	movs	r3, #0
 80096da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096dc:	2300      	movs	r3, #0
 80096de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d03f      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096f4:	d02a      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80096f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096fa:	d824      	bhi.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80096fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009700:	d018      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009702:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009706:	d81e      	bhi.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009708:	2b00      	cmp	r3, #0
 800970a:	d003      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800970c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009710:	d007      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009712:	e018      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009714:	4ba3      	ldr	r3, [pc, #652]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009718:	4aa2      	ldr	r2, [pc, #648]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800971a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800971e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009720:	e015      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	3304      	adds	r3, #4
 8009726:	2102      	movs	r1, #2
 8009728:	4618      	mov	r0, r3
 800972a:	f001 fff9 	bl	800b720 <RCCEx_PLL2_Config>
 800972e:	4603      	mov	r3, r0
 8009730:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009732:	e00c      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3324      	adds	r3, #36	; 0x24
 8009738:	2102      	movs	r1, #2
 800973a:	4618      	mov	r0, r3
 800973c:	f002 f8a2 	bl	800b884 <RCCEx_PLL3_Config>
 8009740:	4603      	mov	r3, r0
 8009742:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009744:	e003      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	75fb      	strb	r3, [r7, #23]
      break;
 800974a:	e000      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800974c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800974e:	7dfb      	ldrb	r3, [r7, #23]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d109      	bne.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009754:	4b93      	ldr	r3, [pc, #588]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009760:	4990      	ldr	r1, [pc, #576]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009762:	4313      	orrs	r3, r2
 8009764:	650b      	str	r3, [r1, #80]	; 0x50
 8009766:	e001      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009768:	7dfb      	ldrb	r3, [r7, #23]
 800976a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009774:	2b00      	cmp	r3, #0
 8009776:	d03d      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800977c:	2b04      	cmp	r3, #4
 800977e:	d826      	bhi.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009780:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009786:	bf00      	nop
 8009788:	0800979d 	.word	0x0800979d
 800978c:	080097ab 	.word	0x080097ab
 8009790:	080097bd 	.word	0x080097bd
 8009794:	080097d5 	.word	0x080097d5
 8009798:	080097d5 	.word	0x080097d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800979c:	4b81      	ldr	r3, [pc, #516]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800979e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a0:	4a80      	ldr	r2, [pc, #512]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097a8:	e015      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	3304      	adds	r3, #4
 80097ae:	2100      	movs	r1, #0
 80097b0:	4618      	mov	r0, r3
 80097b2:	f001 ffb5 	bl	800b720 <RCCEx_PLL2_Config>
 80097b6:	4603      	mov	r3, r0
 80097b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097ba:	e00c      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	3324      	adds	r3, #36	; 0x24
 80097c0:	2100      	movs	r1, #0
 80097c2:	4618      	mov	r0, r3
 80097c4:	f002 f85e 	bl	800b884 <RCCEx_PLL3_Config>
 80097c8:	4603      	mov	r3, r0
 80097ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097cc:	e003      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	75fb      	strb	r3, [r7, #23]
      break;
 80097d2:	e000      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80097d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097d6:	7dfb      	ldrb	r3, [r7, #23]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d109      	bne.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80097dc:	4b71      	ldr	r3, [pc, #452]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e0:	f023 0207 	bic.w	r2, r3, #7
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e8:	496e      	ldr	r1, [pc, #440]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	650b      	str	r3, [r1, #80]	; 0x50
 80097ee:	e001      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f0:	7dfb      	ldrb	r3, [r7, #23]
 80097f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d042      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009808:	d02b      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800980a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800980e:	d825      	bhi.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009810:	2bc0      	cmp	r3, #192	; 0xc0
 8009812:	d028      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009814:	2bc0      	cmp	r3, #192	; 0xc0
 8009816:	d821      	bhi.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009818:	2b80      	cmp	r3, #128	; 0x80
 800981a:	d016      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800981c:	2b80      	cmp	r3, #128	; 0x80
 800981e:	d81d      	bhi.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009820:	2b00      	cmp	r3, #0
 8009822:	d002      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009824:	2b40      	cmp	r3, #64	; 0x40
 8009826:	d007      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009828:	e018      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800982a:	4b5e      	ldr	r3, [pc, #376]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800982c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982e:	4a5d      	ldr	r2, [pc, #372]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009836:	e017      	b.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	3304      	adds	r3, #4
 800983c:	2100      	movs	r1, #0
 800983e:	4618      	mov	r0, r3
 8009840:	f001 ff6e 	bl	800b720 <RCCEx_PLL2_Config>
 8009844:	4603      	mov	r3, r0
 8009846:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009848:	e00e      	b.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	3324      	adds	r3, #36	; 0x24
 800984e:	2100      	movs	r1, #0
 8009850:	4618      	mov	r0, r3
 8009852:	f002 f817 	bl	800b884 <RCCEx_PLL3_Config>
 8009856:	4603      	mov	r3, r0
 8009858:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800985a:	e005      	b.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	75fb      	strb	r3, [r7, #23]
      break;
 8009860:	e002      	b.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009862:	bf00      	nop
 8009864:	e000      	b.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009866:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009868:	7dfb      	ldrb	r3, [r7, #23]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d109      	bne.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800986e:	4b4d      	ldr	r3, [pc, #308]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009872:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800987a:	494a      	ldr	r1, [pc, #296]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800987c:	4313      	orrs	r3, r2
 800987e:	650b      	str	r3, [r1, #80]	; 0x50
 8009880:	e001      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800988e:	2b00      	cmp	r3, #0
 8009890:	d049      	beq.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009898:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800989c:	d030      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800989e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098a2:	d82a      	bhi.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80098a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098a8:	d02c      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80098aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098ae:	d824      	bhi.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80098b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098b4:	d018      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80098b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098ba:	d81e      	bhi.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80098c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098c4:	d007      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80098c6:	e018      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098c8:	4b36      	ldr	r3, [pc, #216]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098cc:	4a35      	ldr	r2, [pc, #212]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80098ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098d4:	e017      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	3304      	adds	r3, #4
 80098da:	2100      	movs	r1, #0
 80098dc:	4618      	mov	r0, r3
 80098de:	f001 ff1f 	bl	800b720 <RCCEx_PLL2_Config>
 80098e2:	4603      	mov	r3, r0
 80098e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80098e6:	e00e      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	3324      	adds	r3, #36	; 0x24
 80098ec:	2100      	movs	r1, #0
 80098ee:	4618      	mov	r0, r3
 80098f0:	f001 ffc8 	bl	800b884 <RCCEx_PLL3_Config>
 80098f4:	4603      	mov	r3, r0
 80098f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098f8:	e005      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	75fb      	strb	r3, [r7, #23]
      break;
 80098fe:	e002      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009900:	bf00      	nop
 8009902:	e000      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10a      	bne.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800990c:	4b25      	ldr	r3, [pc, #148]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800990e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009910:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800991a:	4922      	ldr	r1, [pc, #136]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800991c:	4313      	orrs	r3, r2
 800991e:	658b      	str	r3, [r1, #88]	; 0x58
 8009920:	e001      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009922:	7dfb      	ldrb	r3, [r7, #23]
 8009924:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800992e:	2b00      	cmp	r3, #0
 8009930:	d04b      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800993c:	d030      	beq.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800993e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009942:	d82a      	bhi.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009944:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009948:	d02e      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800994a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800994e:	d824      	bhi.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009950:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009954:	d018      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800995a:	d81e      	bhi.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009964:	d007      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009966:	e018      	b.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009968:	4b0e      	ldr	r3, [pc, #56]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800996a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996c:	4a0d      	ldr	r2, [pc, #52]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800996e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009972:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009974:	e019      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	3304      	adds	r3, #4
 800997a:	2100      	movs	r1, #0
 800997c:	4618      	mov	r0, r3
 800997e:	f001 fecf 	bl	800b720 <RCCEx_PLL2_Config>
 8009982:	4603      	mov	r3, r0
 8009984:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009986:	e010      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3324      	adds	r3, #36	; 0x24
 800998c:	2100      	movs	r1, #0
 800998e:	4618      	mov	r0, r3
 8009990:	f001 ff78 	bl	800b884 <RCCEx_PLL3_Config>
 8009994:	4603      	mov	r3, r0
 8009996:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009998:	e007      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	75fb      	strb	r3, [r7, #23]
      break;
 800999e:	e004      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80099a0:	bf00      	nop
 80099a2:	e002      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80099a4:	58024400 	.word	0x58024400
      break;
 80099a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099aa:	7dfb      	ldrb	r3, [r7, #23]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10a      	bne.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80099b0:	4b99      	ldr	r3, [pc, #612]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80099be:	4996      	ldr	r1, [pc, #600]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099c0:	4313      	orrs	r3, r2
 80099c2:	658b      	str	r3, [r1, #88]	; 0x58
 80099c4:	e001      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099c6:	7dfb      	ldrb	r3, [r7, #23]
 80099c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d032      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099da:	2b30      	cmp	r3, #48	; 0x30
 80099dc:	d01c      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80099de:	2b30      	cmp	r3, #48	; 0x30
 80099e0:	d817      	bhi.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80099e2:	2b20      	cmp	r3, #32
 80099e4:	d00c      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80099e6:	2b20      	cmp	r3, #32
 80099e8:	d813      	bhi.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d016      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80099ee:	2b10      	cmp	r3, #16
 80099f0:	d10f      	bne.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099f2:	4b89      	ldr	r3, [pc, #548]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f6:	4a88      	ldr	r2, [pc, #544]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099fe:	e00e      	b.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	3304      	adds	r3, #4
 8009a04:	2102      	movs	r1, #2
 8009a06:	4618      	mov	r0, r3
 8009a08:	f001 fe8a 	bl	800b720 <RCCEx_PLL2_Config>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009a10:	e005      	b.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	75fb      	strb	r3, [r7, #23]
      break;
 8009a16:	e002      	b.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009a18:	bf00      	nop
 8009a1a:	e000      	b.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d109      	bne.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009a24:	4b7c      	ldr	r3, [pc, #496]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a30:	4979      	ldr	r1, [pc, #484]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a32:	4313      	orrs	r3, r2
 8009a34:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009a36:	e001      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a38:	7dfb      	ldrb	r3, [r7, #23]
 8009a3a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d047      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a50:	d030      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a56:	d82a      	bhi.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a5c:	d02c      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009a5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a62:	d824      	bhi.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a68:	d018      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a6e:	d81e      	bhi.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d003      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a78:	d007      	beq.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009a7a:	e018      	b.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a7c:	4b66      	ldr	r3, [pc, #408]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	4a65      	ldr	r2, [pc, #404]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a88:	e017      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	2100      	movs	r1, #0
 8009a90:	4618      	mov	r0, r3
 8009a92:	f001 fe45 	bl	800b720 <RCCEx_PLL2_Config>
 8009a96:	4603      	mov	r3, r0
 8009a98:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a9a:	e00e      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3324      	adds	r3, #36	; 0x24
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f001 feee 	bl	800b884 <RCCEx_PLL3_Config>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009aac:	e005      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab2:	e002      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009ab4:	bf00      	nop
 8009ab6:	e000      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009aba:	7dfb      	ldrb	r3, [r7, #23]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d109      	bne.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009ac0:	4b55      	ldr	r3, [pc, #340]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ac4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009acc:	4952      	ldr	r1, [pc, #328]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	650b      	str	r3, [r1, #80]	; 0x50
 8009ad2:	e001      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
 8009ad6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d049      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aec:	d02e      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009aee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009af2:	d828      	bhi.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009af4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009af8:	d02a      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009afa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009afe:	d822      	bhi.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009b00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b04:	d026      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009b06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b0a:	d81c      	bhi.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009b0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b10:	d010      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009b12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b16:	d816      	bhi.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01d      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b20:	d111      	bne.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3304      	adds	r3, #4
 8009b26:	2101      	movs	r1, #1
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f001 fdf9 	bl	800b720 <RCCEx_PLL2_Config>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b32:	e012      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3324      	adds	r3, #36	; 0x24
 8009b38:	2101      	movs	r1, #1
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 fea2 	bl	800b884 <RCCEx_PLL3_Config>
 8009b40:	4603      	mov	r3, r0
 8009b42:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b44:	e009      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	75fb      	strb	r3, [r7, #23]
      break;
 8009b4a:	e006      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b4c:	bf00      	nop
 8009b4e:	e004      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b50:	bf00      	nop
 8009b52:	e002      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b54:	bf00      	nop
 8009b56:	e000      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d109      	bne.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b60:	4b2d      	ldr	r3, [pc, #180]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b64:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b6c:	492a      	ldr	r1, [pc, #168]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	650b      	str	r3, [r1, #80]	; 0x50
 8009b72:	e001      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
 8009b76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d04d      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b8e:	d02e      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b94:	d828      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b9a:	d02a      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ba0:	d822      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009ba2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ba6:	d026      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009ba8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bac:	d81c      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bb2:	d010      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bb8:	d816      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d01d      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bc2:	d111      	bne.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	2101      	movs	r1, #1
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f001 fda8 	bl	800b720 <RCCEx_PLL2_Config>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009bd4:	e012      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3324      	adds	r3, #36	; 0x24
 8009bda:	2101      	movs	r1, #1
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f001 fe51 	bl	800b884 <RCCEx_PLL3_Config>
 8009be2:	4603      	mov	r3, r0
 8009be4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009be6:	e009      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	75fb      	strb	r3, [r7, #23]
      break;
 8009bec:	e006      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bee:	bf00      	nop
 8009bf0:	e004      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bf2:	bf00      	nop
 8009bf4:	e002      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bf6:	bf00      	nop
 8009bf8:	e000      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10c      	bne.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009c02:	4b05      	ldr	r3, [pc, #20]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c06:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c10:	4901      	ldr	r1, [pc, #4]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	658b      	str	r3, [r1, #88]	; 0x58
 8009c16:	e003      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009c18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
 8009c1e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d02f      	beq.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c34:	d00e      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c3a:	d814      	bhi.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d015      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009c40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c44:	d10f      	bne.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c46:	4baf      	ldr	r3, [pc, #700]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4a:	4aae      	ldr	r2, [pc, #696]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c52:	e00c      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	3304      	adds	r3, #4
 8009c58:	2101      	movs	r1, #1
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f001 fd60 	bl	800b720 <RCCEx_PLL2_Config>
 8009c60:	4603      	mov	r3, r0
 8009c62:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c64:	e003      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	75fb      	strb	r3, [r7, #23]
      break;
 8009c6a:	e000      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d109      	bne.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c74:	4ba3      	ldr	r3, [pc, #652]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c80:	49a0      	ldr	r1, [pc, #640]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c82:	4313      	orrs	r3, r2
 8009c84:	650b      	str	r3, [r1, #80]	; 0x50
 8009c86:	e001      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c88:	7dfb      	ldrb	r3, [r7, #23]
 8009c8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d032      	beq.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c9c:	2b03      	cmp	r3, #3
 8009c9e:	d81b      	bhi.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009ca0:	a201      	add	r2, pc, #4	; (adr r2, 8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca6:	bf00      	nop
 8009ca8:	08009cdf 	.word	0x08009cdf
 8009cac:	08009cb9 	.word	0x08009cb9
 8009cb0:	08009cc7 	.word	0x08009cc7
 8009cb4:	08009cdf 	.word	0x08009cdf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cb8:	4b92      	ldr	r3, [pc, #584]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cbc:	4a91      	ldr	r2, [pc, #580]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009cc4:	e00c      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	3304      	adds	r3, #4
 8009cca:	2102      	movs	r1, #2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f001 fd27 	bl	800b720 <RCCEx_PLL2_Config>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009cd6:	e003      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	75fb      	strb	r3, [r7, #23]
      break;
 8009cdc:	e000      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d109      	bne.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ce6:	4b87      	ldr	r3, [pc, #540]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cea:	f023 0203 	bic.w	r2, r3, #3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cf2:	4984      	ldr	r1, [pc, #528]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009cf8:	e001      	b.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 8086 	beq.w	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d0c:	4b7e      	ldr	r3, [pc, #504]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a7d      	ldr	r2, [pc, #500]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d18:	f7f8 fea4 	bl	8002a64 <HAL_GetTick>
 8009d1c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d1e:	e009      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d20:	f7f8 fea0 	bl	8002a64 <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	2b64      	cmp	r3, #100	; 0x64
 8009d2c:	d902      	bls.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	75fb      	strb	r3, [r7, #23]
        break;
 8009d32:	e005      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d34:	4b74      	ldr	r3, [pc, #464]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d0ef      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009d40:	7dfb      	ldrb	r3, [r7, #23]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d166      	bne.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d46:	4b6f      	ldr	r3, [pc, #444]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d50:	4053      	eors	r3, r2
 8009d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d013      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d5a:	4b6a      	ldr	r3, [pc, #424]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d62:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d64:	4b67      	ldr	r3, [pc, #412]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d68:	4a66      	ldr	r2, [pc, #408]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d6e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d70:	4b64      	ldr	r3, [pc, #400]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d74:	4a63      	ldr	r2, [pc, #396]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d7a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d7c:	4a61      	ldr	r2, [pc, #388]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d8c:	d115      	bne.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d8e:	f7f8 fe69 	bl	8002a64 <HAL_GetTick>
 8009d92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d94:	e00b      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d96:	f7f8 fe65 	bl	8002a64 <HAL_GetTick>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d902      	bls.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	75fb      	strb	r3, [r7, #23]
            break;
 8009dac:	e005      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dae:	4b55      	ldr	r3, [pc, #340]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db2:	f003 0302 	and.w	r3, r3, #2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d0ed      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d126      	bne.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dce:	d10d      	bne.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009dd0:	4b4c      	ldr	r3, [pc, #304]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dde:	0919      	lsrs	r1, r3, #4
 8009de0:	4b4a      	ldr	r3, [pc, #296]	; (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009de2:	400b      	ands	r3, r1
 8009de4:	4947      	ldr	r1, [pc, #284]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009de6:	4313      	orrs	r3, r2
 8009de8:	610b      	str	r3, [r1, #16]
 8009dea:	e005      	b.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009dec:	4b45      	ldr	r3, [pc, #276]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	4a44      	ldr	r2, [pc, #272]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009df2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009df6:	6113      	str	r3, [r2, #16]
 8009df8:	4b42      	ldr	r3, [pc, #264]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009dfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e06:	493f      	ldr	r1, [pc, #252]	; (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	670b      	str	r3, [r1, #112]	; 0x70
 8009e0c:	e004      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e0e:	7dfb      	ldrb	r3, [r7, #23]
 8009e10:	75bb      	strb	r3, [r7, #22]
 8009e12:	e001      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e14:	7dfb      	ldrb	r3, [r7, #23]
 8009e16:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0301 	and.w	r3, r3, #1
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 8085 	beq.w	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e2a:	2b28      	cmp	r3, #40	; 0x28
 8009e2c:	d866      	bhi.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009e2e:	a201      	add	r2, pc, #4	; (adr r2, 8009e34 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e34:	08009f11 	.word	0x08009f11
 8009e38:	08009efd 	.word	0x08009efd
 8009e3c:	08009efd 	.word	0x08009efd
 8009e40:	08009efd 	.word	0x08009efd
 8009e44:	08009efd 	.word	0x08009efd
 8009e48:	08009efd 	.word	0x08009efd
 8009e4c:	08009efd 	.word	0x08009efd
 8009e50:	08009efd 	.word	0x08009efd
 8009e54:	08009ed9 	.word	0x08009ed9
 8009e58:	08009efd 	.word	0x08009efd
 8009e5c:	08009efd 	.word	0x08009efd
 8009e60:	08009efd 	.word	0x08009efd
 8009e64:	08009efd 	.word	0x08009efd
 8009e68:	08009efd 	.word	0x08009efd
 8009e6c:	08009efd 	.word	0x08009efd
 8009e70:	08009efd 	.word	0x08009efd
 8009e74:	08009eeb 	.word	0x08009eeb
 8009e78:	08009efd 	.word	0x08009efd
 8009e7c:	08009efd 	.word	0x08009efd
 8009e80:	08009efd 	.word	0x08009efd
 8009e84:	08009efd 	.word	0x08009efd
 8009e88:	08009efd 	.word	0x08009efd
 8009e8c:	08009efd 	.word	0x08009efd
 8009e90:	08009efd 	.word	0x08009efd
 8009e94:	08009f11 	.word	0x08009f11
 8009e98:	08009efd 	.word	0x08009efd
 8009e9c:	08009efd 	.word	0x08009efd
 8009ea0:	08009efd 	.word	0x08009efd
 8009ea4:	08009efd 	.word	0x08009efd
 8009ea8:	08009efd 	.word	0x08009efd
 8009eac:	08009efd 	.word	0x08009efd
 8009eb0:	08009efd 	.word	0x08009efd
 8009eb4:	08009f11 	.word	0x08009f11
 8009eb8:	08009efd 	.word	0x08009efd
 8009ebc:	08009efd 	.word	0x08009efd
 8009ec0:	08009efd 	.word	0x08009efd
 8009ec4:	08009efd 	.word	0x08009efd
 8009ec8:	08009efd 	.word	0x08009efd
 8009ecc:	08009efd 	.word	0x08009efd
 8009ed0:	08009efd 	.word	0x08009efd
 8009ed4:	08009f11 	.word	0x08009f11
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	3304      	adds	r3, #4
 8009edc:	2101      	movs	r1, #1
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f001 fc1e 	bl	800b720 <RCCEx_PLL2_Config>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009ee8:	e013      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	3324      	adds	r3, #36	; 0x24
 8009eee:	2101      	movs	r1, #1
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f001 fcc7 	bl	800b884 <RCCEx_PLL3_Config>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009efa:	e00a      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	75fb      	strb	r3, [r7, #23]
      break;
 8009f00:	e007      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009f02:	bf00      	nop
 8009f04:	58024400 	.word	0x58024400
 8009f08:	58024800 	.word	0x58024800
 8009f0c:	00ffffcf 	.word	0x00ffffcf
      break;
 8009f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d109      	bne.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009f18:	4b96      	ldr	r3, [pc, #600]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f1c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f24:	4993      	ldr	r1, [pc, #588]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f26:	4313      	orrs	r3, r2
 8009f28:	654b      	str	r3, [r1, #84]	; 0x54
 8009f2a:	e001      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2c:	7dfb      	ldrb	r3, [r7, #23]
 8009f2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 0302 	and.w	r3, r3, #2
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d038      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f40:	2b05      	cmp	r3, #5
 8009f42:	d821      	bhi.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009f44:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4a:	bf00      	nop
 8009f4c:	08009f8f 	.word	0x08009f8f
 8009f50:	08009f65 	.word	0x08009f65
 8009f54:	08009f77 	.word	0x08009f77
 8009f58:	08009f8f 	.word	0x08009f8f
 8009f5c:	08009f8f 	.word	0x08009f8f
 8009f60:	08009f8f 	.word	0x08009f8f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3304      	adds	r3, #4
 8009f68:	2101      	movs	r1, #1
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f001 fbd8 	bl	800b720 <RCCEx_PLL2_Config>
 8009f70:	4603      	mov	r3, r0
 8009f72:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f74:	e00c      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	3324      	adds	r3, #36	; 0x24
 8009f7a:	2101      	movs	r1, #1
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f001 fc81 	bl	800b884 <RCCEx_PLL3_Config>
 8009f82:	4603      	mov	r3, r0
 8009f84:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f86:	e003      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f8c:	e000      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f90:	7dfb      	ldrb	r3, [r7, #23]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d109      	bne.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f96:	4b77      	ldr	r3, [pc, #476]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f9a:	f023 0207 	bic.w	r2, r3, #7
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fa2:	4974      	ldr	r1, [pc, #464]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	654b      	str	r3, [r1, #84]	; 0x54
 8009fa8:	e001      	b.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009faa:	7dfb      	ldrb	r3, [r7, #23]
 8009fac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 0304 	and.w	r3, r3, #4
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d03a      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fc0:	2b05      	cmp	r3, #5
 8009fc2:	d821      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009fc4:	a201      	add	r2, pc, #4	; (adr r2, 8009fcc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fca:	bf00      	nop
 8009fcc:	0800a00f 	.word	0x0800a00f
 8009fd0:	08009fe5 	.word	0x08009fe5
 8009fd4:	08009ff7 	.word	0x08009ff7
 8009fd8:	0800a00f 	.word	0x0800a00f
 8009fdc:	0800a00f 	.word	0x0800a00f
 8009fe0:	0800a00f 	.word	0x0800a00f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	2101      	movs	r1, #1
 8009fea:	4618      	mov	r0, r3
 8009fec:	f001 fb98 	bl	800b720 <RCCEx_PLL2_Config>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009ff4:	e00c      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3324      	adds	r3, #36	; 0x24
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f001 fc41 	bl	800b884 <RCCEx_PLL3_Config>
 800a002:	4603      	mov	r3, r0
 800a004:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a006:	e003      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	75fb      	strb	r3, [r7, #23]
      break;
 800a00c:	e000      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800a00e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a010:	7dfb      	ldrb	r3, [r7, #23]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a016:	4b57      	ldr	r3, [pc, #348]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a01a:	f023 0207 	bic.w	r2, r3, #7
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a024:	4953      	ldr	r1, [pc, #332]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a026:	4313      	orrs	r3, r2
 800a028:	658b      	str	r3, [r1, #88]	; 0x58
 800a02a:	e001      	b.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 0320 	and.w	r3, r3, #32
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d04b      	beq.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a046:	d02e      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a04c:	d828      	bhi.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a04e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a052:	d02a      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a058:	d822      	bhi.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a05a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a05e:	d026      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a060:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a064:	d81c      	bhi.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a06a:	d010      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800a06c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a070:	d816      	bhi.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a072:	2b00      	cmp	r3, #0
 800a074:	d01d      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800a076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a07a:	d111      	bne.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3304      	adds	r3, #4
 800a080:	2100      	movs	r1, #0
 800a082:	4618      	mov	r0, r3
 800a084:	f001 fb4c 	bl	800b720 <RCCEx_PLL2_Config>
 800a088:	4603      	mov	r3, r0
 800a08a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a08c:	e012      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3324      	adds	r3, #36	; 0x24
 800a092:	2102      	movs	r1, #2
 800a094:	4618      	mov	r0, r3
 800a096:	f001 fbf5 	bl	800b884 <RCCEx_PLL3_Config>
 800a09a:	4603      	mov	r3, r0
 800a09c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a09e:	e009      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a0a4:	e006      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a0a6:	bf00      	nop
 800a0a8:	e004      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a0aa:	bf00      	nop
 800a0ac:	e002      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a0ae:	bf00      	nop
 800a0b0:	e000      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a0b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0b4:	7dfb      	ldrb	r3, [r7, #23]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10a      	bne.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a0ba:	4b2e      	ldr	r3, [pc, #184]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0c8:	492a      	ldr	r1, [pc, #168]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	654b      	str	r3, [r1, #84]	; 0x54
 800a0ce:	e001      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d0:	7dfb      	ldrb	r3, [r7, #23]
 800a0d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d04d      	beq.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0ea:	d02e      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a0ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0f0:	d828      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0f6:	d02a      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a0f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0fc:	d822      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a0fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a102:	d026      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a104:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a108:	d81c      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a10a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a10e:	d010      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800a110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a114:	d816      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a116:	2b00      	cmp	r3, #0
 800a118:	d01d      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a11a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a11e:	d111      	bne.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3304      	adds	r3, #4
 800a124:	2100      	movs	r1, #0
 800a126:	4618      	mov	r0, r3
 800a128:	f001 fafa 	bl	800b720 <RCCEx_PLL2_Config>
 800a12c:	4603      	mov	r3, r0
 800a12e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a130:	e012      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	3324      	adds	r3, #36	; 0x24
 800a136:	2102      	movs	r1, #2
 800a138:	4618      	mov	r0, r3
 800a13a:	f001 fba3 	bl	800b884 <RCCEx_PLL3_Config>
 800a13e:	4603      	mov	r3, r0
 800a140:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a142:	e009      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	75fb      	strb	r3, [r7, #23]
      break;
 800a148:	e006      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a14a:	bf00      	nop
 800a14c:	e004      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a14e:	bf00      	nop
 800a150:	e002      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a152:	bf00      	nop
 800a154:	e000      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a156:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a158:	7dfb      	ldrb	r3, [r7, #23]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10c      	bne.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a15e:	4b05      	ldr	r3, [pc, #20]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a162:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a16c:	4901      	ldr	r1, [pc, #4]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a16e:	4313      	orrs	r3, r2
 800a170:	658b      	str	r3, [r1, #88]	; 0x58
 800a172:	e003      	b.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a174:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a178:	7dfb      	ldrb	r3, [r7, #23]
 800a17a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a184:	2b00      	cmp	r3, #0
 800a186:	d04b      	beq.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a18e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a192:	d02e      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a194:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a198:	d828      	bhi.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a19a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a19e:	d02a      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a1a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1a4:	d822      	bhi.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a1a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a1aa:	d026      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a1ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a1b0:	d81c      	bhi.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a1b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1b6:	d010      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a1b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1bc:	d816      	bhi.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d01d      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a1c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1c6:	d111      	bne.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f001 faa6 	bl	800b720 <RCCEx_PLL2_Config>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a1d8:	e012      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3324      	adds	r3, #36	; 0x24
 800a1de:	2102      	movs	r1, #2
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f001 fb4f 	bl	800b884 <RCCEx_PLL3_Config>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a1ea:	e009      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a1f0:	e006      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1f2:	bf00      	nop
 800a1f4:	e004      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1f6:	bf00      	nop
 800a1f8:	e002      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1fa:	bf00      	nop
 800a1fc:	e000      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a1fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a200:	7dfb      	ldrb	r3, [r7, #23]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10a      	bne.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a206:	4b9d      	ldr	r3, [pc, #628]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a20a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a214:	4999      	ldr	r1, [pc, #612]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a216:	4313      	orrs	r3, r2
 800a218:	658b      	str	r3, [r1, #88]	; 0x58
 800a21a:	e001      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a21c:	7dfb      	ldrb	r3, [r7, #23]
 800a21e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0308 	and.w	r3, r3, #8
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d01a      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a236:	d10a      	bne.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3324      	adds	r3, #36	; 0x24
 800a23c:	2102      	movs	r1, #2
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 fb20 	bl	800b884 <RCCEx_PLL3_Config>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a24e:	4b8b      	ldr	r3, [pc, #556]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a252:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a25c:	4987      	ldr	r1, [pc, #540]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0310 	and.w	r3, r3, #16
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d01a      	beq.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a278:	d10a      	bne.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3324      	adds	r3, #36	; 0x24
 800a27e:	2102      	movs	r1, #2
 800a280:	4618      	mov	r0, r3
 800a282:	f001 faff 	bl	800b884 <RCCEx_PLL3_Config>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d001      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a290:	4b7a      	ldr	r3, [pc, #488]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a29e:	4977      	ldr	r1, [pc, #476]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d034      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a2b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2ba:	d01d      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a2bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2c0:	d817      	bhi.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d003      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a2c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ca:	d009      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a2cc:	e011      	b.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f001 fa23 	bl	800b720 <RCCEx_PLL2_Config>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a2de:	e00c      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3324      	adds	r3, #36	; 0x24
 800a2e4:	2102      	movs	r1, #2
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f001 facc 	bl	800b884 <RCCEx_PLL3_Config>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a2f0:	e003      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a2f6:	e000      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a2f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2fa:	7dfb      	ldrb	r3, [r7, #23]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10a      	bne.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a300:	4b5e      	ldr	r3, [pc, #376]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a30e:	495b      	ldr	r1, [pc, #364]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a310:	4313      	orrs	r3, r2
 800a312:	658b      	str	r3, [r1, #88]	; 0x58
 800a314:	e001      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a316:	7dfb      	ldrb	r3, [r7, #23]
 800a318:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a322:	2b00      	cmp	r3, #0
 800a324:	d033      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a32c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a330:	d01c      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a336:	d816      	bhi.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a33c:	d003      	beq.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a33e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a342:	d007      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a344:	e00f      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a346:	4b4d      	ldr	r3, [pc, #308]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34a:	4a4c      	ldr	r2, [pc, #304]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a34c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a350:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a352:	e00c      	b.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	3324      	adds	r3, #36	; 0x24
 800a358:	2101      	movs	r1, #1
 800a35a:	4618      	mov	r0, r3
 800a35c:	f001 fa92 	bl	800b884 <RCCEx_PLL3_Config>
 800a360:	4603      	mov	r3, r0
 800a362:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a364:	e003      	b.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	75fb      	strb	r3, [r7, #23]
      break;
 800a36a:	e000      	b.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a36c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a36e:	7dfb      	ldrb	r3, [r7, #23]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10a      	bne.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a374:	4b41      	ldr	r3, [pc, #260]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a378:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a382:	493e      	ldr	r1, [pc, #248]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a384:	4313      	orrs	r3, r2
 800a386:	654b      	str	r3, [r1, #84]	; 0x54
 800a388:	e001      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a38a:	7dfb      	ldrb	r3, [r7, #23]
 800a38c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a396:	2b00      	cmp	r3, #0
 800a398:	d029      	beq.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a3a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3a6:	d007      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a3a8:	e00f      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3aa:	4b34      	ldr	r3, [pc, #208]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ae:	4a33      	ldr	r2, [pc, #204]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a3b6:	e00b      	b.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	2102      	movs	r1, #2
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f001 f9ae 	bl	800b720 <RCCEx_PLL2_Config>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a3c8:	e002      	b.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	75fb      	strb	r3, [r7, #23]
      break;
 800a3ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3d0:	7dfb      	ldrb	r3, [r7, #23]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d109      	bne.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a3d6:	4b29      	ldr	r3, [pc, #164]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3e2:	4926      	ldr	r1, [pc, #152]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a3e8:	e001      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
 800a3ec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00a      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	3324      	adds	r3, #36	; 0x24
 800a3fe:	2102      	movs	r1, #2
 800a400:	4618      	mov	r0, r3
 800a402:	f001 fa3f 	bl	800b884 <RCCEx_PLL3_Config>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d033      	beq.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a424:	d017      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a42a:	d811      	bhi.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a42c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a430:	d013      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a436:	d80b      	bhi.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d010      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a43c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a440:	d106      	bne.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a442:	4b0e      	ldr	r3, [pc, #56]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a446:	4a0d      	ldr	r2, [pc, #52]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a44c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a44e:	e007      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	75fb      	strb	r3, [r7, #23]
      break;
 800a454:	e004      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a456:	bf00      	nop
 800a458:	e002      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a45a:	bf00      	nop
 800a45c:	e000      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a45e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a460:	7dfb      	ldrb	r3, [r7, #23]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10c      	bne.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a466:	4b05      	ldr	r3, [pc, #20]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a46a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a472:	4902      	ldr	r1, [pc, #8]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a474:	4313      	orrs	r3, r2
 800a476:	654b      	str	r3, [r1, #84]	; 0x54
 800a478:	e004      	b.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a47a:	bf00      	nop
 800a47c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a480:	7dfb      	ldrb	r3, [r7, #23]
 800a482:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d008      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a490:	4b31      	ldr	r3, [pc, #196]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a494:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a49c:	492e      	ldr	r1, [pc, #184]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d009      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a4ae:	4b2a      	ldr	r3, [pc, #168]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a4bc:	4926      	ldr	r1, [pc, #152]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d008      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4ce:	4b22      	ldr	r3, [pc, #136]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4da:	491f      	ldr	r1, [pc, #124]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00d      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4ec:	4b1a      	ldr	r3, [pc, #104]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	4a19      	ldr	r2, [pc, #100]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4f6:	6113      	str	r3, [r2, #16]
 800a4f8:	4b17      	ldr	r3, [pc, #92]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a4fa:	691a      	ldr	r2, [r3, #16]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a502:	4915      	ldr	r1, [pc, #84]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a504:	4313      	orrs	r3, r2
 800a506:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	da08      	bge.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a510:	4b11      	ldr	r3, [pc, #68]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a514:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a51c:	490e      	ldr	r1, [pc, #56]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d009      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a52e:	4b0a      	ldr	r3, [pc, #40]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a532:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a53c:	4906      	ldr	r1, [pc, #24]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a53e:	4313      	orrs	r3, r2
 800a540:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a542:	7dbb      	ldrb	r3, [r7, #22]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d101      	bne.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a548:	2300      	movs	r3, #0
 800a54a:	e000      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	58024400 	.word	0x58024400

0800a55c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b090      	sub	sp, #64	; 0x40
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a56a:	f040 8095 	bne.w	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a56e:	4b97      	ldr	r3, [pc, #604]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57a:	2b04      	cmp	r3, #4
 800a57c:	f200 8088 	bhi.w	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a580:	a201      	add	r2, pc, #4	; (adr r2, 800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a586:	bf00      	nop
 800a588:	0800a59d 	.word	0x0800a59d
 800a58c:	0800a5c5 	.word	0x0800a5c5
 800a590:	0800a5ed 	.word	0x0800a5ed
 800a594:	0800a689 	.word	0x0800a689
 800a598:	0800a615 	.word	0x0800a615
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a59c:	4b8b      	ldr	r3, [pc, #556]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5a8:	d108      	bne.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f000 ff64 	bl	800b47c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5b8:	f000 bc94 	b.w	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5c0:	f000 bc90 	b.w	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5c4:	4b81      	ldr	r3, [pc, #516]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5d0:	d108      	bne.n	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5d2:	f107 0318 	add.w	r3, r7, #24
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 fca8 	bl	800af2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5e0:	f000 bc80 	b.w	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5e8:	f000 bc7c 	b.w	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5ec:	4b77      	ldr	r3, [pc, #476]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5f8:	d108      	bne.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5fa:	f107 030c 	add.w	r3, r7, #12
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 fde8 	bl	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a608:	f000 bc6c 	b.w	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a60c:	2300      	movs	r3, #0
 800a60e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a610:	f000 bc68 	b.w	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a614:	4b6d      	ldr	r3, [pc, #436]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a618:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a61c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a61e:	4b6b      	ldr	r3, [pc, #428]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0304 	and.w	r3, r3, #4
 800a626:	2b04      	cmp	r3, #4
 800a628:	d10c      	bne.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d109      	bne.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a630:	4b66      	ldr	r3, [pc, #408]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	08db      	lsrs	r3, r3, #3
 800a636:	f003 0303 	and.w	r3, r3, #3
 800a63a:	4a65      	ldr	r2, [pc, #404]	; (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a63c:	fa22 f303 	lsr.w	r3, r2, r3
 800a640:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a642:	e01f      	b.n	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a644:	4b61      	ldr	r3, [pc, #388]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a64c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a650:	d106      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a654:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a658:	d102      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a65a:	4b5e      	ldr	r3, [pc, #376]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a65c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a65e:	e011      	b.n	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a660:	4b5a      	ldr	r3, [pc, #360]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a66c:	d106      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a674:	d102      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a676:	4b58      	ldr	r3, [pc, #352]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a67a:	e003      	b.n	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a680:	f000 bc30 	b.w	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a684:	f000 bc2e 	b.w	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a688:	4b54      	ldr	r3, [pc, #336]	; (800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a68a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a68c:	f000 bc2a 	b.w	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a690:	2300      	movs	r3, #0
 800a692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a694:	f000 bc26 	b.w	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a69e:	f040 809f 	bne.w	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a6a2:	4b4a      	ldr	r3, [pc, #296]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a6aa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6b2:	d04d      	beq.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6ba:	f200 8084 	bhi.w	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	2bc0      	cmp	r3, #192	; 0xc0
 800a6c2:	d07d      	beq.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c6:	2bc0      	cmp	r3, #192	; 0xc0
 800a6c8:	d87d      	bhi.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6cc:	2b80      	cmp	r3, #128	; 0x80
 800a6ce:	d02d      	beq.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d2:	2b80      	cmp	r3, #128	; 0x80
 800a6d4:	d877      	bhi.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d003      	beq.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	2b40      	cmp	r3, #64	; 0x40
 800a6e0:	d012      	beq.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a6e2:	e070      	b.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6e4:	4b39      	ldr	r3, [pc, #228]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6f0:	d107      	bne.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 fec0 	bl	800b47c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a700:	e3f0      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a702:	2300      	movs	r3, #0
 800a704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a706:	e3ed      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a708:	4b30      	ldr	r3, [pc, #192]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a710:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a714:	d107      	bne.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a716:	f107 0318 	add.w	r3, r7, #24
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 fc06 	bl	800af2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a724:	e3de      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a726:	2300      	movs	r3, #0
 800a728:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a72a:	e3db      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a72c:	4b27      	ldr	r3, [pc, #156]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a738:	d107      	bne.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a73a:	f107 030c 	add.w	r3, r7, #12
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 fd48 	bl	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a748:	e3cc      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a74e:	e3c9      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a750:	4b1e      	ldr	r3, [pc, #120]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a754:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a758:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a75a:	4b1c      	ldr	r3, [pc, #112]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 0304 	and.w	r3, r3, #4
 800a762:	2b04      	cmp	r3, #4
 800a764:	d10c      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d109      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a76c:	4b17      	ldr	r3, [pc, #92]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	08db      	lsrs	r3, r3, #3
 800a772:	f003 0303 	and.w	r3, r3, #3
 800a776:	4a16      	ldr	r2, [pc, #88]	; (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a778:	fa22 f303 	lsr.w	r3, r2, r3
 800a77c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a77e:	e01e      	b.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a780:	4b12      	ldr	r3, [pc, #72]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a78c:	d106      	bne.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a790:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a794:	d102      	bne.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a796:	4b0f      	ldr	r3, [pc, #60]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a79a:	e010      	b.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a79c:	4b0b      	ldr	r3, [pc, #44]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7a8:	d106      	bne.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7b0:	d102      	bne.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7b6:	e002      	b.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a7bc:	e392      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a7be:	e391      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a7c0:	4b06      	ldr	r3, [pc, #24]	; (800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7c4:	e38e      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ca:	e38b      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a7cc:	58024400 	.word	0x58024400
 800a7d0:	03d09000 	.word	0x03d09000
 800a7d4:	003d0900 	.word	0x003d0900
 800a7d8:	017d7840 	.word	0x017d7840
 800a7dc:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7e6:	f040 809c 	bne.w	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a7ea:	4b9d      	ldr	r3, [pc, #628]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ee:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a7f2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7fa:	d054      	beq.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a802:	f200 808b 	bhi.w	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a80c:	f000 8083 	beq.w	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a816:	f200 8081 	bhi.w	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a820:	d02f      	beq.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a828:	d878      	bhi.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d004      	beq.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a836:	d012      	beq.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a838:	e070      	b.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a83a:	4b89      	ldr	r3, [pc, #548]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a842:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a846:	d107      	bne.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a84c:	4618      	mov	r0, r3
 800a84e:	f000 fe15 	bl	800b47c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a854:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a856:	e345      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a85c:	e342      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a85e:	4b80      	ldr	r3, [pc, #512]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a866:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a86a:	d107      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a86c:	f107 0318 	add.w	r3, r7, #24
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fb5b 	bl	800af2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a87a:	e333      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a880:	e330      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a882:	4b77      	ldr	r3, [pc, #476]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a88a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a88e:	d107      	bne.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a890:	f107 030c 	add.w	r3, r7, #12
 800a894:	4618      	mov	r0, r3
 800a896:	f000 fc9d 	bl	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a89e:	e321      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8a4:	e31e      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a8a6:	4b6e      	ldr	r3, [pc, #440]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a8ae:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8b0:	4b6b      	ldr	r3, [pc, #428]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 0304 	and.w	r3, r3, #4
 800a8b8:	2b04      	cmp	r3, #4
 800a8ba:	d10c      	bne.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d109      	bne.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8c2:	4b67      	ldr	r3, [pc, #412]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	08db      	lsrs	r3, r3, #3
 800a8c8:	f003 0303 	and.w	r3, r3, #3
 800a8cc:	4a65      	ldr	r2, [pc, #404]	; (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a8ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8d4:	e01e      	b.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8d6:	4b62      	ldr	r3, [pc, #392]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8e2:	d106      	bne.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8ea:	d102      	bne.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a8ec:	4b5e      	ldr	r3, [pc, #376]	; (800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8f0:	e010      	b.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8f2:	4b5b      	ldr	r3, [pc, #364]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8fe:	d106      	bne.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a906:	d102      	bne.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a908:	4b58      	ldr	r3, [pc, #352]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a90a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a90c:	e002      	b.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a90e:	2300      	movs	r3, #0
 800a910:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a912:	e2e7      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a914:	e2e6      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a916:	4b56      	ldr	r3, [pc, #344]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a918:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a91a:	e2e3      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a920:	e2e0      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a928:	f040 80a7 	bne.w	800aa7a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a92c:	4b4c      	ldr	r3, [pc, #304]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a92e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a930:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a934:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a93c:	d055      	beq.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a940:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a944:	f200 8096 	bhi.w	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a94e:	f000 8084 	beq.w	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a958:	f200 808c 	bhi.w	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a962:	d030      	beq.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a966:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a96a:	f200 8083 	bhi.w	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a970:	2b00      	cmp	r3, #0
 800a972:	d004      	beq.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a976:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a97a:	d012      	beq.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a97c:	e07a      	b.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a97e:	4b38      	ldr	r3, [pc, #224]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a98a:	d107      	bne.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a98c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a990:	4618      	mov	r0, r3
 800a992:	f000 fd73 	bl	800b47c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a99a:	e2a3      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a99c:	2300      	movs	r3, #0
 800a99e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9a0:	e2a0      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9a2:	4b2f      	ldr	r3, [pc, #188]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9ae:	d107      	bne.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9b0:	f107 0318 	add.w	r3, r7, #24
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 fab9 	bl	800af2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a9be:	e291      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9c4:	e28e      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9c6:	4b26      	ldr	r3, [pc, #152]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9d2:	d107      	bne.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9d4:	f107 030c 	add.w	r3, r7, #12
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 fbfb 	bl	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9e2:	e27f      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9e8:	e27c      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a9ea:	4b1d      	ldr	r3, [pc, #116]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9f2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9f4:	4b1a      	ldr	r3, [pc, #104]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f003 0304 	and.w	r3, r3, #4
 800a9fc:	2b04      	cmp	r3, #4
 800a9fe:	d10c      	bne.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800aa00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d109      	bne.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa06:	4b16      	ldr	r3, [pc, #88]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	08db      	lsrs	r3, r3, #3
 800aa0c:	f003 0303 	and.w	r3, r3, #3
 800aa10:	4a14      	ldr	r2, [pc, #80]	; (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800aa12:	fa22 f303 	lsr.w	r3, r2, r3
 800aa16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa18:	e01e      	b.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa1a:	4b11      	ldr	r3, [pc, #68]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa26:	d106      	bne.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800aa28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa2e:	d102      	bne.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aa30:	4b0d      	ldr	r3, [pc, #52]	; (800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800aa32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa34:	e010      	b.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa36:	4b0a      	ldr	r3, [pc, #40]	; (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa42:	d106      	bne.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800aa44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa4a:	d102      	bne.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa4c:	4b07      	ldr	r3, [pc, #28]	; (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800aa4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa50:	e002      	b.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa56:	e245      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa58:	e244      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa5a:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa5e:	e241      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa60:	58024400 	.word	0x58024400
 800aa64:	03d09000 	.word	0x03d09000
 800aa68:	003d0900 	.word	0x003d0900
 800aa6c:	017d7840 	.word	0x017d7840
 800aa70:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa78:	e234      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa80:	f040 809c 	bne.w	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800aa84:	4b9b      	ldr	r3, [pc, #620]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa88:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aa8c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa94:	d054      	beq.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800aa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa9c:	f200 808b 	bhi.w	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aaa6:	f000 8083 	beq.w	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800aaaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aab0:	f200 8081 	bhi.w	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aaba:	d02f      	beq.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800aabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aac2:	d878      	bhi.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d004      	beq.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800aaca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aacc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad0:	d012      	beq.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800aad2:	e070      	b.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aad4:	4b87      	ldr	r3, [pc, #540]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aadc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aae0:	d107      	bne.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 fcc8 	bl	800b47c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aaf0:	e1f8      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaf6:	e1f5      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aaf8:	4b7e      	ldr	r3, [pc, #504]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab04:	d107      	bne.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab06:	f107 0318 	add.w	r3, r7, #24
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 fa0e 	bl	800af2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab14:	e1e6      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab1a:	e1e3      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab1c:	4b75      	ldr	r3, [pc, #468]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab28:	d107      	bne.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab2a:	f107 030c 	add.w	r3, r7, #12
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 fb50 	bl	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab38:	e1d4      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab3e:	e1d1      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab40:	4b6c      	ldr	r3, [pc, #432]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab48:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab4a:	4b6a      	ldr	r3, [pc, #424]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0304 	and.w	r3, r3, #4
 800ab52:	2b04      	cmp	r3, #4
 800ab54:	d10c      	bne.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ab56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d109      	bne.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab5c:	4b65      	ldr	r3, [pc, #404]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	08db      	lsrs	r3, r3, #3
 800ab62:	f003 0303 	and.w	r3, r3, #3
 800ab66:	4a64      	ldr	r2, [pc, #400]	; (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ab68:	fa22 f303 	lsr.w	r3, r2, r3
 800ab6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab6e:	e01e      	b.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab70:	4b60      	ldr	r3, [pc, #384]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab7c:	d106      	bne.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800ab7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab84:	d102      	bne.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab86:	4b5d      	ldr	r3, [pc, #372]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ab88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab8a:	e010      	b.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab8c:	4b59      	ldr	r3, [pc, #356]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab98:	d106      	bne.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ab9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aba0:	d102      	bne.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aba2:	4b57      	ldr	r3, [pc, #348]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800aba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aba6:	e002      	b.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aba8:	2300      	movs	r3, #0
 800abaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800abac:	e19a      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800abae:	e199      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800abb0:	4b54      	ldr	r3, [pc, #336]	; (800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abb4:	e196      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800abb6:	2300      	movs	r3, #0
 800abb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abba:	e193      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800abc2:	d173      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800abc4:	4b4b      	ldr	r3, [pc, #300]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800abcc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abd4:	d02f      	beq.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800abd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abdc:	d863      	bhi.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800abde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d004      	beq.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800abe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abea:	d012      	beq.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800abec:	e05b      	b.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abee:	4b41      	ldr	r3, [pc, #260]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abfa:	d107      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abfc:	f107 0318 	add.w	r3, r7, #24
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 f993 	bl	800af2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac0a:	e16b      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac10:	e168      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac12:	4b38      	ldr	r3, [pc, #224]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac1e:	d107      	bne.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac20:	f107 030c 	add.w	r3, r7, #12
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 fad5 	bl	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac2e:	e159      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac34:	e156      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ac36:	4b2f      	ldr	r3, [pc, #188]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac3e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac40:	4b2c      	ldr	r3, [pc, #176]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 0304 	and.w	r3, r3, #4
 800ac48:	2b04      	cmp	r3, #4
 800ac4a:	d10c      	bne.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800ac4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d109      	bne.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac52:	4b28      	ldr	r3, [pc, #160]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	08db      	lsrs	r3, r3, #3
 800ac58:	f003 0303 	and.w	r3, r3, #3
 800ac5c:	4a26      	ldr	r2, [pc, #152]	; (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ac5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac64:	e01e      	b.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac66:	4b23      	ldr	r3, [pc, #140]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac72:	d106      	bne.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800ac74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac7a:	d102      	bne.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ac7c:	4b1f      	ldr	r3, [pc, #124]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ac7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac80:	e010      	b.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac82:	4b1c      	ldr	r3, [pc, #112]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac8e:	d106      	bne.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800ac90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac96:	d102      	bne.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ac98:	4b19      	ldr	r3, [pc, #100]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800ac9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac9c:	e002      	b.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aca2:	e11f      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aca4:	e11e      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acaa:	e11b      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acb2:	d13e      	bne.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800acb4:	4b0f      	ldr	r3, [pc, #60]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800acb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acbc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d004      	beq.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800acc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acca:	d01d      	beq.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800accc:	e02e      	b.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acce:	4b09      	ldr	r3, [pc, #36]	; (800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acda:	d107      	bne.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 fbcb 	bl	800b47c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ace6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acea:	e0fb      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acec:	2300      	movs	r3, #0
 800acee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acf0:	e0f8      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800acf2:	bf00      	nop
 800acf4:	58024400 	.word	0x58024400
 800acf8:	03d09000 	.word	0x03d09000
 800acfc:	003d0900 	.word	0x003d0900
 800ad00:	017d7840 	.word	0x017d7840
 800ad04:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad08:	4b79      	ldr	r3, [pc, #484]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad14:	d107      	bne.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad16:	f107 0318 	add.w	r3, r7, #24
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 f906 	bl	800af2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ad20:	6a3b      	ldr	r3, [r7, #32]
 800ad22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad24:	e0de      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad2a:	e0db      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad30:	e0d8      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad38:	f040 8085 	bne.w	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ad3c:	4b6c      	ldr	r3, [pc, #432]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad40:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ad44:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ad46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad4c:	d06b      	beq.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad54:	d874      	bhi.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad5c:	d056      	beq.n	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad64:	d86c      	bhi.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad6c:	d03b      	beq.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800ad6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad74:	d864      	bhi.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad7c:	d021      	beq.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad84:	d85c      	bhi.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ad86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d004      	beq.n	800ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad92:	d004      	beq.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800ad94:	e054      	b.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ad96:	f000 f8b3 	bl	800af00 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad9a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ad9c:	e0a2      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad9e:	4b54      	ldr	r3, [pc, #336]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ada6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800adaa:	d107      	bne.n	800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adac:	f107 0318 	add.w	r3, r7, #24
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 f8bb 	bl	800af2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800adba:	e093      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800adbc:	2300      	movs	r3, #0
 800adbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adc0:	e090      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adc2:	4b4b      	ldr	r3, [pc, #300]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adce:	d107      	bne.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800add0:	f107 030c 	add.w	r3, r7, #12
 800add4:	4618      	mov	r0, r3
 800add6:	f000 f9fd 	bl	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800adde:	e081      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ade4:	e07e      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ade6:	4b42      	ldr	r3, [pc, #264]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 0304 	and.w	r3, r3, #4
 800adee:	2b04      	cmp	r3, #4
 800adf0:	d109      	bne.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800adf2:	4b3f      	ldr	r3, [pc, #252]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	08db      	lsrs	r3, r3, #3
 800adf8:	f003 0303 	and.w	r3, r3, #3
 800adfc:	4a3d      	ldr	r2, [pc, #244]	; (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800adfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ae02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae04:	e06e      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae06:	2300      	movs	r3, #0
 800ae08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae0a:	e06b      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae0c:	4b38      	ldr	r3, [pc, #224]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae18:	d102      	bne.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800ae1a:	4b37      	ldr	r3, [pc, #220]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ae1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae1e:	e061      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae24:	e05e      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae26:	4b32      	ldr	r3, [pc, #200]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae32:	d102      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800ae34:	4b31      	ldr	r3, [pc, #196]	; (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ae36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae38:	e054      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae3e:	e051      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ae40:	2300      	movs	r3, #0
 800ae42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae44:	e04e      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae4c:	d148      	bne.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ae4e:	4b28      	ldr	r3, [pc, #160]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae56:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ae58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae5e:	d02a      	beq.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800ae60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae66:	d838      	bhi.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800ae68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d004      	beq.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800ae6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae74:	d00d      	beq.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800ae76:	e030      	b.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae78:	4b1d      	ldr	r3, [pc, #116]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae84:	d102      	bne.n	800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800ae86:	4b1d      	ldr	r3, [pc, #116]	; (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ae88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae8a:	e02b      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae90:	e028      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae92:	4b17      	ldr	r3, [pc, #92]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae9e:	d107      	bne.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 fae9 	bl	800b47c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aeae:	e019      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeb4:	e016      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aeb6:	4b0e      	ldr	r3, [pc, #56]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aec2:	d107      	bne.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aec4:	f107 0318 	add.w	r3, r7, #24
 800aec8:	4618      	mov	r0, r3
 800aeca:	f000 f82f 	bl	800af2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aed2:	e007      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aed8:	e004      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aeda:	2300      	movs	r3, #0
 800aedc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aede:	e001      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800aee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3740      	adds	r7, #64	; 0x40
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	58024400 	.word	0x58024400
 800aef4:	03d09000 	.word	0x03d09000
 800aef8:	003d0900 	.word	0x003d0900
 800aefc:	017d7840 	.word	0x017d7840

0800af00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800af04:	f7fe fb88 	bl	8009618 <HAL_RCC_GetHCLKFreq>
 800af08:	4602      	mov	r2, r0
 800af0a:	4b06      	ldr	r3, [pc, #24]	; (800af24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	091b      	lsrs	r3, r3, #4
 800af10:	f003 0307 	and.w	r3, r3, #7
 800af14:	4904      	ldr	r1, [pc, #16]	; (800af28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800af16:	5ccb      	ldrb	r3, [r1, r3]
 800af18:	f003 031f 	and.w	r3, r3, #31
 800af1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800af20:	4618      	mov	r0, r3
 800af22:	bd80      	pop	{r7, pc}
 800af24:	58024400 	.word	0x58024400
 800af28:	0800ffa0 	.word	0x0800ffa0

0800af2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b089      	sub	sp, #36	; 0x24
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af34:	4ba1      	ldr	r3, [pc, #644]	; (800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af38:	f003 0303 	and.w	r3, r3, #3
 800af3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800af3e:	4b9f      	ldr	r3, [pc, #636]	; (800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af42:	0b1b      	lsrs	r3, r3, #12
 800af44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af4a:	4b9c      	ldr	r3, [pc, #624]	; (800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4e:	091b      	lsrs	r3, r3, #4
 800af50:	f003 0301 	and.w	r3, r3, #1
 800af54:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800af56:	4b99      	ldr	r3, [pc, #612]	; (800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af5a:	08db      	lsrs	r3, r3, #3
 800af5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	fb02 f303 	mul.w	r3, r2, r3
 800af66:	ee07 3a90 	vmov	s15, r3
 800af6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	2b00      	cmp	r3, #0
 800af76:	f000 8111 	beq.w	800b19c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	f000 8083 	beq.w	800b088 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	2b02      	cmp	r3, #2
 800af86:	f200 80a1 	bhi.w	800b0cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d003      	beq.n	800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	2b01      	cmp	r3, #1
 800af94:	d056      	beq.n	800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800af96:	e099      	b.n	800b0cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af98:	4b88      	ldr	r3, [pc, #544]	; (800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 0320 	and.w	r3, r3, #32
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d02d      	beq.n	800b000 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800afa4:	4b85      	ldr	r3, [pc, #532]	; (800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	08db      	lsrs	r3, r3, #3
 800afaa:	f003 0303 	and.w	r3, r3, #3
 800afae:	4a84      	ldr	r2, [pc, #528]	; (800b1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800afb0:	fa22 f303 	lsr.w	r3, r2, r3
 800afb4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	ee07 3a90 	vmov	s15, r3
 800afbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	ee07 3a90 	vmov	s15, r3
 800afc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afce:	4b7b      	ldr	r3, [pc, #492]	; (800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd6:	ee07 3a90 	vmov	s15, r3
 800afda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afde:	ed97 6a03 	vldr	s12, [r7, #12]
 800afe2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800affa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800affe:	e087      	b.n	800b110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b00e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b012:	4b6a      	ldr	r3, [pc, #424]	; (800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01a:	ee07 3a90 	vmov	s15, r3
 800b01e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b022:	ed97 6a03 	vldr	s12, [r7, #12]
 800b026:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b02a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b02e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b03a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b03e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b042:	e065      	b.n	800b110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b04e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b056:	4b59      	ldr	r3, [pc, #356]	; (800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b05e:	ee07 3a90 	vmov	s15, r3
 800b062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b066:	ed97 6a03 	vldr	s12, [r7, #12]
 800b06a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b06e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b07a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b07e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b082:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b086:	e043      	b.n	800b110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	ee07 3a90 	vmov	s15, r3
 800b08e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b092:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b09a:	4b48      	ldr	r3, [pc, #288]	; (800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a2:	ee07 3a90 	vmov	s15, r3
 800b0a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0ca:	e021      	b.n	800b110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	ee07 3a90 	vmov	s15, r3
 800b0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0de:	4b37      	ldr	r3, [pc, #220]	; (800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0e6:	ee07 3a90 	vmov	s15, r3
 800b0ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b10a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b10e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b110:	4b2a      	ldr	r3, [pc, #168]	; (800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b114:	0a5b      	lsrs	r3, r3, #9
 800b116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b11a:	ee07 3a90 	vmov	s15, r3
 800b11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b12a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b12e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b136:	ee17 2a90 	vmov	r2, s15
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b13e:	4b1f      	ldr	r3, [pc, #124]	; (800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b142:	0c1b      	lsrs	r3, r3, #16
 800b144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b148:	ee07 3a90 	vmov	s15, r3
 800b14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b154:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b158:	edd7 6a07 	vldr	s13, [r7, #28]
 800b15c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b164:	ee17 2a90 	vmov	r2, s15
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b16c:	4b13      	ldr	r3, [pc, #76]	; (800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b170:	0e1b      	lsrs	r3, r3, #24
 800b172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b176:	ee07 3a90 	vmov	s15, r3
 800b17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b182:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b186:	edd7 6a07 	vldr	s13, [r7, #28]
 800b18a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b18e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b192:	ee17 2a90 	vmov	r2, s15
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b19a:	e008      	b.n	800b1ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	609a      	str	r2, [r3, #8]
}
 800b1ae:	bf00      	nop
 800b1b0:	3724      	adds	r7, #36	; 0x24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	58024400 	.word	0x58024400
 800b1c0:	03d09000 	.word	0x03d09000
 800b1c4:	46000000 	.word	0x46000000
 800b1c8:	4c742400 	.word	0x4c742400
 800b1cc:	4a742400 	.word	0x4a742400
 800b1d0:	4bbebc20 	.word	0x4bbebc20

0800b1d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b089      	sub	sp, #36	; 0x24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1dc:	4ba1      	ldr	r3, [pc, #644]	; (800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e0:	f003 0303 	and.w	r3, r3, #3
 800b1e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b1e6:	4b9f      	ldr	r3, [pc, #636]	; (800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ea:	0d1b      	lsrs	r3, r3, #20
 800b1ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b1f2:	4b9c      	ldr	r3, [pc, #624]	; (800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f6:	0a1b      	lsrs	r3, r3, #8
 800b1f8:	f003 0301 	and.w	r3, r3, #1
 800b1fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b1fe:	4b99      	ldr	r3, [pc, #612]	; (800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b202:	08db      	lsrs	r3, r3, #3
 800b204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	fb02 f303 	mul.w	r3, r2, r3
 800b20e:	ee07 3a90 	vmov	s15, r3
 800b212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 8111 	beq.w	800b444 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	2b02      	cmp	r3, #2
 800b226:	f000 8083 	beq.w	800b330 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	f200 80a1 	bhi.w	800b374 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d003      	beq.n	800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d056      	beq.n	800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b23e:	e099      	b.n	800b374 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b240:	4b88      	ldr	r3, [pc, #544]	; (800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 0320 	and.w	r3, r3, #32
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d02d      	beq.n	800b2a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b24c:	4b85      	ldr	r3, [pc, #532]	; (800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	08db      	lsrs	r3, r3, #3
 800b252:	f003 0303 	and.w	r3, r3, #3
 800b256:	4a84      	ldr	r2, [pc, #528]	; (800b468 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b258:	fa22 f303 	lsr.w	r3, r2, r3
 800b25c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	ee07 3a90 	vmov	s15, r3
 800b264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b276:	4b7b      	ldr	r3, [pc, #492]	; (800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b27e:	ee07 3a90 	vmov	s15, r3
 800b282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b286:	ed97 6a03 	vldr	s12, [r7, #12]
 800b28a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b46c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b2a6:	e087      	b.n	800b3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	ee07 3a90 	vmov	s15, r3
 800b2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b470 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ba:	4b6a      	ldr	r3, [pc, #424]	; (800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c2:	ee07 3a90 	vmov	s15, r3
 800b2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b46c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2ea:	e065      	b.n	800b3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	ee07 3a90 	vmov	s15, r3
 800b2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2fe:	4b59      	ldr	r3, [pc, #356]	; (800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b30e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b312:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b46c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b31e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b32a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b32e:	e043      	b.n	800b3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	ee07 3a90 	vmov	s15, r3
 800b336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b478 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b342:	4b48      	ldr	r3, [pc, #288]	; (800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b34a:	ee07 3a90 	vmov	s15, r3
 800b34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b352:	ed97 6a03 	vldr	s12, [r7, #12]
 800b356:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b46c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b36e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b372:	e021      	b.n	800b3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	ee07 3a90 	vmov	s15, r3
 800b37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b386:	4b37      	ldr	r3, [pc, #220]	; (800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b38e:	ee07 3a90 	vmov	s15, r3
 800b392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b396:	ed97 6a03 	vldr	s12, [r7, #12]
 800b39a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b46c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b39e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b3b8:	4b2a      	ldr	r3, [pc, #168]	; (800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3bc:	0a5b      	lsrs	r3, r3, #9
 800b3be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3c2:	ee07 3a90 	vmov	s15, r3
 800b3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3de:	ee17 2a90 	vmov	r2, s15
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b3e6:	4b1f      	ldr	r3, [pc, #124]	; (800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ea:	0c1b      	lsrs	r3, r3, #16
 800b3ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3f0:	ee07 3a90 	vmov	s15, r3
 800b3f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b400:	edd7 6a07 	vldr	s13, [r7, #28]
 800b404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b40c:	ee17 2a90 	vmov	r2, s15
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b414:	4b13      	ldr	r3, [pc, #76]	; (800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b418:	0e1b      	lsrs	r3, r3, #24
 800b41a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b42a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b42e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b43a:	ee17 2a90 	vmov	r2, s15
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b442:	e008      	b.n	800b456 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	609a      	str	r2, [r3, #8]
}
 800b456:	bf00      	nop
 800b458:	3724      	adds	r7, #36	; 0x24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	58024400 	.word	0x58024400
 800b468:	03d09000 	.word	0x03d09000
 800b46c:	46000000 	.word	0x46000000
 800b470:	4c742400 	.word	0x4c742400
 800b474:	4a742400 	.word	0x4a742400
 800b478:	4bbebc20 	.word	0x4bbebc20

0800b47c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b089      	sub	sp, #36	; 0x24
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b484:	4ba0      	ldr	r3, [pc, #640]	; (800b708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b488:	f003 0303 	and.w	r3, r3, #3
 800b48c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b48e:	4b9e      	ldr	r3, [pc, #632]	; (800b708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b492:	091b      	lsrs	r3, r3, #4
 800b494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b498:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b49a:	4b9b      	ldr	r3, [pc, #620]	; (800b708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49e:	f003 0301 	and.w	r3, r3, #1
 800b4a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b4a4:	4b98      	ldr	r3, [pc, #608]	; (800b708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a8:	08db      	lsrs	r3, r3, #3
 800b4aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4ae:	693a      	ldr	r2, [r7, #16]
 800b4b0:	fb02 f303 	mul.w	r3, r2, r3
 800b4b4:	ee07 3a90 	vmov	s15, r3
 800b4b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f000 8111 	beq.w	800b6ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	f000 8083 	beq.w	800b5d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	f200 80a1 	bhi.w	800b61a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d056      	beq.n	800b592 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b4e4:	e099      	b.n	800b61a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4e6:	4b88      	ldr	r3, [pc, #544]	; (800b708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 0320 	and.w	r3, r3, #32
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d02d      	beq.n	800b54e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4f2:	4b85      	ldr	r3, [pc, #532]	; (800b708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	08db      	lsrs	r3, r3, #3
 800b4f8:	f003 0303 	and.w	r3, r3, #3
 800b4fc:	4a83      	ldr	r2, [pc, #524]	; (800b70c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b502:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	ee07 3a90 	vmov	s15, r3
 800b50a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	ee07 3a90 	vmov	s15, r3
 800b514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b51c:	4b7a      	ldr	r3, [pc, #488]	; (800b708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b524:	ee07 3a90 	vmov	s15, r3
 800b528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b52c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b530:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b53c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b544:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b548:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b54c:	e087      	b.n	800b65e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	ee07 3a90 	vmov	s15, r3
 800b554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b558:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b714 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b55c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b560:	4b69      	ldr	r3, [pc, #420]	; (800b708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b568:	ee07 3a90 	vmov	s15, r3
 800b56c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b570:	ed97 6a03 	vldr	s12, [r7, #12]
 800b574:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b57c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b58c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b590:	e065      	b.n	800b65e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	ee07 3a90 	vmov	s15, r3
 800b598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b59c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b718 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b5a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5a4:	4b58      	ldr	r3, [pc, #352]	; (800b708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ac:	ee07 3a90 	vmov	s15, r3
 800b5b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5d4:	e043      	b.n	800b65e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	ee07 3a90 	vmov	s15, r3
 800b5dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b71c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b5e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5e8:	4b47      	ldr	r3, [pc, #284]	; (800b708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f0:	ee07 3a90 	vmov	s15, r3
 800b5f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b60c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b610:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b614:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b618:	e021      	b.n	800b65e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	ee07 3a90 	vmov	s15, r3
 800b620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b624:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b714 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b62c:	4b36      	ldr	r3, [pc, #216]	; (800b708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b634:	ee07 3a90 	vmov	s15, r3
 800b638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b63c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b640:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b64c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b654:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b658:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b65c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b65e:	4b2a      	ldr	r3, [pc, #168]	; (800b708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b662:	0a5b      	lsrs	r3, r3, #9
 800b664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b668:	ee07 3a90 	vmov	s15, r3
 800b66c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b670:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b674:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b678:	edd7 6a07 	vldr	s13, [r7, #28]
 800b67c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b684:	ee17 2a90 	vmov	r2, s15
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b68c:	4b1e      	ldr	r3, [pc, #120]	; (800b708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b690:	0c1b      	lsrs	r3, r3, #16
 800b692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b696:	ee07 3a90 	vmov	s15, r3
 800b69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b69e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6b2:	ee17 2a90 	vmov	r2, s15
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b6ba:	4b13      	ldr	r3, [pc, #76]	; (800b708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6be:	0e1b      	lsrs	r3, r3, #24
 800b6c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6c4:	ee07 3a90 	vmov	s15, r3
 800b6c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6e0:	ee17 2a90 	vmov	r2, s15
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b6e8:	e008      	b.n	800b6fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	609a      	str	r2, [r3, #8]
}
 800b6fc:	bf00      	nop
 800b6fe:	3724      	adds	r7, #36	; 0x24
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	58024400 	.word	0x58024400
 800b70c:	03d09000 	.word	0x03d09000
 800b710:	46000000 	.word	0x46000000
 800b714:	4c742400 	.word	0x4c742400
 800b718:	4a742400 	.word	0x4a742400
 800b71c:	4bbebc20 	.word	0x4bbebc20

0800b720 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b72e:	4b53      	ldr	r3, [pc, #332]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b732:	f003 0303 	and.w	r3, r3, #3
 800b736:	2b03      	cmp	r3, #3
 800b738:	d101      	bne.n	800b73e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b73a:	2301      	movs	r3, #1
 800b73c:	e099      	b.n	800b872 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b73e:	4b4f      	ldr	r3, [pc, #316]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a4e      	ldr	r2, [pc, #312]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b744:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b74a:	f7f7 f98b 	bl	8002a64 <HAL_GetTick>
 800b74e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b750:	e008      	b.n	800b764 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b752:	f7f7 f987 	bl	8002a64 <HAL_GetTick>
 800b756:	4602      	mov	r2, r0
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	d901      	bls.n	800b764 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b760:	2303      	movs	r3, #3
 800b762:	e086      	b.n	800b872 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b764:	4b45      	ldr	r3, [pc, #276]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1f0      	bne.n	800b752 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b770:	4b42      	ldr	r3, [pc, #264]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b774:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	031b      	lsls	r3, r3, #12
 800b77e:	493f      	ldr	r1, [pc, #252]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b780:	4313      	orrs	r3, r2
 800b782:	628b      	str	r3, [r1, #40]	; 0x28
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	3b01      	subs	r3, #1
 800b78a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	3b01      	subs	r3, #1
 800b794:	025b      	lsls	r3, r3, #9
 800b796:	b29b      	uxth	r3, r3
 800b798:	431a      	orrs	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	041b      	lsls	r3, r3, #16
 800b7a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b7a6:	431a      	orrs	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	061b      	lsls	r3, r3, #24
 800b7b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b7b4:	4931      	ldr	r1, [pc, #196]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b7ba:	4b30      	ldr	r3, [pc, #192]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	695b      	ldr	r3, [r3, #20]
 800b7c6:	492d      	ldr	r1, [pc, #180]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b7cc:	4b2b      	ldr	r3, [pc, #172]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d0:	f023 0220 	bic.w	r2, r3, #32
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	4928      	ldr	r1, [pc, #160]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b7de:	4b27      	ldr	r3, [pc, #156]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e2:	4a26      	ldr	r2, [pc, #152]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b7e4:	f023 0310 	bic.w	r3, r3, #16
 800b7e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b7ea:	4b24      	ldr	r3, [pc, #144]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b7ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7ee:	4b24      	ldr	r3, [pc, #144]	; (800b880 <RCCEx_PLL2_Config+0x160>)
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	69d2      	ldr	r2, [r2, #28]
 800b7f6:	00d2      	lsls	r2, r2, #3
 800b7f8:	4920      	ldr	r1, [pc, #128]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b7fe:	4b1f      	ldr	r3, [pc, #124]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b802:	4a1e      	ldr	r2, [pc, #120]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b804:	f043 0310 	orr.w	r3, r3, #16
 800b808:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d106      	bne.n	800b81e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b810:	4b1a      	ldr	r3, [pc, #104]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b814:	4a19      	ldr	r2, [pc, #100]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b816:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b81a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b81c:	e00f      	b.n	800b83e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2b01      	cmp	r3, #1
 800b822:	d106      	bne.n	800b832 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b824:	4b15      	ldr	r3, [pc, #84]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b828:	4a14      	ldr	r2, [pc, #80]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b82a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b82e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b830:	e005      	b.n	800b83e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b832:	4b12      	ldr	r3, [pc, #72]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b836:	4a11      	ldr	r2, [pc, #68]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b83c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b83e:	4b0f      	ldr	r3, [pc, #60]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a0e      	ldr	r2, [pc, #56]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b844:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b84a:	f7f7 f90b 	bl	8002a64 <HAL_GetTick>
 800b84e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b850:	e008      	b.n	800b864 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b852:	f7f7 f907 	bl	8002a64 <HAL_GetTick>
 800b856:	4602      	mov	r2, r0
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d901      	bls.n	800b864 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b860:	2303      	movs	r3, #3
 800b862:	e006      	b.n	800b872 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b864:	4b05      	ldr	r3, [pc, #20]	; (800b87c <RCCEx_PLL2_Config+0x15c>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0f0      	beq.n	800b852 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b870:	7bfb      	ldrb	r3, [r7, #15]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	58024400 	.word	0x58024400
 800b880:	ffff0007 	.word	0xffff0007

0800b884 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b88e:	2300      	movs	r3, #0
 800b890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b892:	4b53      	ldr	r3, [pc, #332]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b896:	f003 0303 	and.w	r3, r3, #3
 800b89a:	2b03      	cmp	r3, #3
 800b89c:	d101      	bne.n	800b8a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e099      	b.n	800b9d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b8a2:	4b4f      	ldr	r3, [pc, #316]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a4e      	ldr	r2, [pc, #312]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b8a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8ae:	f7f7 f8d9 	bl	8002a64 <HAL_GetTick>
 800b8b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b8b4:	e008      	b.n	800b8c8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b8b6:	f7f7 f8d5 	bl	8002a64 <HAL_GetTick>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	2b02      	cmp	r3, #2
 800b8c2:	d901      	bls.n	800b8c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b8c4:	2303      	movs	r3, #3
 800b8c6:	e086      	b.n	800b9d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b8c8:	4b45      	ldr	r3, [pc, #276]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1f0      	bne.n	800b8b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b8d4:	4b42      	ldr	r3, [pc, #264]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	051b      	lsls	r3, r3, #20
 800b8e2:	493f      	ldr	r1, [pc, #252]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	628b      	str	r3, [r1, #40]	; 0x28
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	025b      	lsls	r3, r3, #9
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	431a      	orrs	r2, r3
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	3b01      	subs	r3, #1
 800b904:	041b      	lsls	r3, r3, #16
 800b906:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b90a:	431a      	orrs	r2, r3
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	691b      	ldr	r3, [r3, #16]
 800b910:	3b01      	subs	r3, #1
 800b912:	061b      	lsls	r3, r3, #24
 800b914:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b918:	4931      	ldr	r1, [pc, #196]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b91a:	4313      	orrs	r3, r2
 800b91c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b91e:	4b30      	ldr	r3, [pc, #192]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b922:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	492d      	ldr	r1, [pc, #180]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b92c:	4313      	orrs	r3, r2
 800b92e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b930:	4b2b      	ldr	r3, [pc, #172]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b934:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	699b      	ldr	r3, [r3, #24]
 800b93c:	4928      	ldr	r1, [pc, #160]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b93e:	4313      	orrs	r3, r2
 800b940:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b942:	4b27      	ldr	r3, [pc, #156]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b946:	4a26      	ldr	r2, [pc, #152]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b94c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b94e:	4b24      	ldr	r3, [pc, #144]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b952:	4b24      	ldr	r3, [pc, #144]	; (800b9e4 <RCCEx_PLL3_Config+0x160>)
 800b954:	4013      	ands	r3, r2
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	69d2      	ldr	r2, [r2, #28]
 800b95a:	00d2      	lsls	r2, r2, #3
 800b95c:	4920      	ldr	r1, [pc, #128]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b95e:	4313      	orrs	r3, r2
 800b960:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b962:	4b1f      	ldr	r3, [pc, #124]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b966:	4a1e      	ldr	r2, [pc, #120]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b96c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d106      	bne.n	800b982 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b974:	4b1a      	ldr	r3, [pc, #104]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b978:	4a19      	ldr	r2, [pc, #100]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b97a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b97e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b980:	e00f      	b.n	800b9a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	2b01      	cmp	r3, #1
 800b986:	d106      	bne.n	800b996 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b988:	4b15      	ldr	r3, [pc, #84]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98c:	4a14      	ldr	r2, [pc, #80]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b98e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b992:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b994:	e005      	b.n	800b9a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b996:	4b12      	ldr	r3, [pc, #72]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99a:	4a11      	ldr	r2, [pc, #68]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b99c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b9a2:	4b0f      	ldr	r3, [pc, #60]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a0e      	ldr	r2, [pc, #56]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b9a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9ae:	f7f7 f859 	bl	8002a64 <HAL_GetTick>
 800b9b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b9b4:	e008      	b.n	800b9c8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b9b6:	f7f7 f855 	bl	8002a64 <HAL_GetTick>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	1ad3      	subs	r3, r2, r3
 800b9c0:	2b02      	cmp	r3, #2
 800b9c2:	d901      	bls.n	800b9c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	e006      	b.n	800b9d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b9c8:	4b05      	ldr	r3, [pc, #20]	; (800b9e0 <RCCEx_PLL3_Config+0x15c>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d0f0      	beq.n	800b9b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	58024400 	.word	0x58024400
 800b9e4:	ffff0007 	.word	0xffff0007

0800b9e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d101      	bne.n	800b9fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e0f1      	b.n	800bbde <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a78      	ldr	r2, [pc, #480]	; (800bbe8 <HAL_SPI_Init+0x200>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d00f      	beq.n	800ba2a <HAL_SPI_Init+0x42>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a77      	ldr	r2, [pc, #476]	; (800bbec <HAL_SPI_Init+0x204>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d00a      	beq.n	800ba2a <HAL_SPI_Init+0x42>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a75      	ldr	r2, [pc, #468]	; (800bbf0 <HAL_SPI_Init+0x208>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d005      	beq.n	800ba2a <HAL_SPI_Init+0x42>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	2b0f      	cmp	r3, #15
 800ba24:	d901      	bls.n	800ba2a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e0d9      	b.n	800bbde <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fd74 	bl	800c518 <SPI_GetPacketSize>
 800ba30:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a6c      	ldr	r2, [pc, #432]	; (800bbe8 <HAL_SPI_Init+0x200>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d00c      	beq.n	800ba56 <HAL_SPI_Init+0x6e>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a6a      	ldr	r2, [pc, #424]	; (800bbec <HAL_SPI_Init+0x204>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d007      	beq.n	800ba56 <HAL_SPI_Init+0x6e>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a69      	ldr	r2, [pc, #420]	; (800bbf0 <HAL_SPI_Init+0x208>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d002      	beq.n	800ba56 <HAL_SPI_Init+0x6e>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2b08      	cmp	r3, #8
 800ba54:	d811      	bhi.n	800ba7a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba5a:	4a63      	ldr	r2, [pc, #396]	; (800bbe8 <HAL_SPI_Init+0x200>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d009      	beq.n	800ba74 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a61      	ldr	r2, [pc, #388]	; (800bbec <HAL_SPI_Init+0x204>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d004      	beq.n	800ba74 <HAL_SPI_Init+0x8c>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a60      	ldr	r2, [pc, #384]	; (800bbf0 <HAL_SPI_Init+0x208>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d104      	bne.n	800ba7e <HAL_SPI_Init+0x96>
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2b10      	cmp	r3, #16
 800ba78:	d901      	bls.n	800ba7e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e0af      	b.n	800bbde <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d106      	bne.n	800ba98 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f7f6 fc54 	bl	8002340 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2202      	movs	r2, #2
 800ba9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f022 0201 	bic.w	r2, r2, #1
 800baae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800baba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	699b      	ldr	r3, [r3, #24]
 800bac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bac4:	d119      	bne.n	800bafa <HAL_SPI_Init+0x112>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bace:	d103      	bne.n	800bad8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d008      	beq.n	800baea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10c      	bne.n	800bafa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bae4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bae8:	d107      	bne.n	800bafa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800baf8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	69da      	ldr	r2, [r3, #28]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb02:	431a      	orrs	r2, r3
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	431a      	orrs	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb0c:	ea42 0103 	orr.w	r1, r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	68da      	ldr	r2, [r3, #12]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	430a      	orrs	r2, r1
 800bb1a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb24:	431a      	orrs	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb2a:	431a      	orrs	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	699b      	ldr	r3, [r3, #24]
 800bb30:	431a      	orrs	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	431a      	orrs	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	695b      	ldr	r3, [r3, #20]
 800bb3c:	431a      	orrs	r2, r3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6a1b      	ldr	r3, [r3, #32]
 800bb42:	431a      	orrs	r2, r3
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	431a      	orrs	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	431a      	orrs	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb5a:	ea42 0103 	orr.w	r1, r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	430a      	orrs	r2, r1
 800bb68:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d113      	bne.n	800bb9a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb84:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb98:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f022 0201 	bic.w	r2, r2, #1
 800bba8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00a      	beq.n	800bbcc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	430a      	orrs	r2, r1
 800bbca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	40013000 	.word	0x40013000
 800bbec:	40003800 	.word	0x40003800
 800bbf0:	40003c00 	.word	0x40003c00

0800bbf4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b08a      	sub	sp, #40	; 0x28
 800bbf8:	af02      	add	r7, sp, #8
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	603b      	str	r3, [r7, #0]
 800bc00:	4613      	mov	r3, r2
 800bc02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3330      	adds	r3, #48	; 0x30
 800bc0e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc18:	d112      	bne.n	800bc40 <HAL_SPI_Receive+0x4c>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10e      	bne.n	800bc40 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2204      	movs	r2, #4
 800bc26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bc2a:	88fa      	ldrh	r2, [r7, #6]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	4613      	mov	r3, r2
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	68b9      	ldr	r1, [r7, #8]
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f000 f978 	bl	800bf2c <HAL_SPI_TransmitReceive>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	e16f      	b.n	800bf20 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d101      	bne.n	800bc4e <HAL_SPI_Receive+0x5a>
 800bc4a:	2302      	movs	r3, #2
 800bc4c:	e168      	b.n	800bf20 <HAL_SPI_Receive+0x32c>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2201      	movs	r2, #1
 800bc52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc56:	f7f6 ff05 	bl	8002a64 <HAL_GetTick>
 800bc5a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d007      	beq.n	800bc78 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800bc68:	2302      	movs	r3, #2
 800bc6a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc74:	7ffb      	ldrb	r3, [r7, #31]
 800bc76:	e153      	b.n	800bf20 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d002      	beq.n	800bc84 <HAL_SPI_Receive+0x90>
 800bc7e:	88fb      	ldrh	r3, [r7, #6]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d107      	bne.n	800bc94 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc90:	7ffb      	ldrb	r3, [r7, #31]
 800bc92:	e145      	b.n	800bf20 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2204      	movs	r2, #4
 800bc98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	88fa      	ldrh	r2, [r7, #6]
 800bcae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	88fa      	ldrh	r2, [r7, #6]
 800bcb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bce4:	d107      	bne.n	800bcf6 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bcf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	4b8a      	ldr	r3, [pc, #552]	; (800bf28 <HAL_SPI_Receive+0x334>)
 800bcfe:	4013      	ands	r3, r2
 800bd00:	88f9      	ldrh	r1, [r7, #6]
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	6812      	ldr	r2, [r2, #0]
 800bd06:	430b      	orrs	r3, r1
 800bd08:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f042 0201 	orr.w	r2, r2, #1
 800bd18:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd22:	d107      	bne.n	800bd34 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	2b0f      	cmp	r3, #15
 800bd3a:	d948      	bls.n	800bdce <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bd3c:	e040      	b.n	800bdc0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	695a      	ldr	r2, [r3, #20]
 800bd44:	f248 0308 	movw	r3, #32776	; 0x8008
 800bd48:	4013      	ands	r3, r2
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d014      	beq.n	800bd78 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd58:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd5e:	1d1a      	adds	r2, r3, #4
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	b29a      	uxth	r2, r3
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd76:	e023      	b.n	800bdc0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd78:	f7f6 fe74 	bl	8002a64 <HAL_GetTick>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	1ad3      	subs	r3, r2, r3
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d803      	bhi.n	800bd90 <HAL_SPI_Receive+0x19c>
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd8e:	d102      	bne.n	800bd96 <HAL_SPI_Receive+0x1a2>
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d114      	bne.n	800bdc0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f000 faf0 	bl	800c37c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e0af      	b.n	800bf20 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1b8      	bne.n	800bd3e <HAL_SPI_Receive+0x14a>
 800bdcc:	e095      	b.n	800befa <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	2b07      	cmp	r3, #7
 800bdd4:	f240 808b 	bls.w	800beee <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bdd8:	e03f      	b.n	800be5a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	695b      	ldr	r3, [r3, #20]
 800bde0:	f003 0301 	and.w	r3, r3, #1
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d114      	bne.n	800be12 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdec:	69ba      	ldr	r2, [r7, #24]
 800bdee:	8812      	ldrh	r2, [r2, #0]
 800bdf0:	b292      	uxth	r2, r2
 800bdf2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdf8:	1c9a      	adds	r2, r3, #2
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be04:	b29b      	uxth	r3, r3
 800be06:	3b01      	subs	r3, #1
 800be08:	b29a      	uxth	r2, r3
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800be10:	e023      	b.n	800be5a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be12:	f7f6 fe27 	bl	8002a64 <HAL_GetTick>
 800be16:	4602      	mov	r2, r0
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	683a      	ldr	r2, [r7, #0]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d803      	bhi.n	800be2a <HAL_SPI_Receive+0x236>
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be28:	d102      	bne.n	800be30 <HAL_SPI_Receive+0x23c>
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d114      	bne.n	800be5a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f000 faa3 	bl	800c37c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2201      	movs	r2, #1
 800be52:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800be56:	2303      	movs	r3, #3
 800be58:	e062      	b.n	800bf20 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be60:	b29b      	uxth	r3, r3
 800be62:	2b00      	cmp	r3, #0
 800be64:	d1b9      	bne.n	800bdda <HAL_SPI_Receive+0x1e6>
 800be66:	e048      	b.n	800befa <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	695b      	ldr	r3, [r3, #20]
 800be6e:	f003 0301 	and.w	r3, r3, #1
 800be72:	2b01      	cmp	r3, #1
 800be74:	d117      	bne.n	800bea6 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be82:	7812      	ldrb	r2, [r2, #0]
 800be84:	b2d2      	uxtb	r2, r2
 800be86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be8c:	1c5a      	adds	r2, r3, #1
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be98:	b29b      	uxth	r3, r3
 800be9a:	3b01      	subs	r3, #1
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bea4:	e023      	b.n	800beee <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bea6:	f7f6 fddd 	bl	8002a64 <HAL_GetTick>
 800beaa:	4602      	mov	r2, r0
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	683a      	ldr	r2, [r7, #0]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d803      	bhi.n	800bebe <HAL_SPI_Receive+0x2ca>
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bebc:	d102      	bne.n	800bec4 <HAL_SPI_Receive+0x2d0>
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d114      	bne.n	800beee <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 fa59 	bl	800c37c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bed8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2201      	movs	r2, #1
 800bee6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800beea:	2303      	movs	r3, #3
 800beec:	e018      	b.n	800bf20 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1b6      	bne.n	800be68 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f000 fa3e 	bl	800c37c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e000      	b.n	800bf20 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800bf1e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3720      	adds	r7, #32
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	ffff0000 	.word	0xffff0000

0800bf2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b08e      	sub	sp, #56	; 0x38
 800bf30:	af02      	add	r7, sp, #8
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	607a      	str	r2, [r7, #4]
 800bf38:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	3320      	adds	r3, #32
 800bf46:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3330      	adds	r3, #48	; 0x30
 800bf4e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d101      	bne.n	800bf5e <HAL_SPI_TransmitReceive+0x32>
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	e209      	b.n	800c372 <HAL_SPI_TransmitReceive+0x446>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf66:	f7f6 fd7d 	bl	8002a64 <HAL_GetTick>
 800bf6a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bf6c:	887b      	ldrh	r3, [r7, #2]
 800bf6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bf70:	887b      	ldrh	r3, [r7, #2]
 800bf72:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bf7a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bf82:	7efb      	ldrb	r3, [r7, #27]
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d014      	beq.n	800bfb2 <HAL_SPI_TransmitReceive+0x86>
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf8e:	d106      	bne.n	800bf9e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d102      	bne.n	800bf9e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bf98:	7efb      	ldrb	r3, [r7, #27]
 800bf9a:	2b04      	cmp	r3, #4
 800bf9c:	d009      	beq.n	800bfb2 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bf9e:	2302      	movs	r3, #2
 800bfa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bfac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfb0:	e1df      	b.n	800c372 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d005      	beq.n	800bfc4 <HAL_SPI_TransmitReceive+0x98>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d002      	beq.n	800bfc4 <HAL_SPI_TransmitReceive+0x98>
 800bfbe:	887b      	ldrh	r3, [r7, #2]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d109      	bne.n	800bfd8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bfd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfd6:	e1cc      	b.n	800c372 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	2b04      	cmp	r3, #4
 800bfe2:	d003      	beq.n	800bfec <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2205      	movs	r2, #5
 800bfe8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	887a      	ldrh	r2, [r7, #2]
 800bffe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	887a      	ldrh	r2, [r7, #2]
 800c006:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	887a      	ldrh	r2, [r7, #2]
 800c014:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	887a      	ldrh	r2, [r7, #2]
 800c01c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2200      	movs	r2, #0
 800c024:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	685a      	ldr	r2, [r3, #4]
 800c032:	4b82      	ldr	r3, [pc, #520]	; (800c23c <HAL_SPI_TransmitReceive+0x310>)
 800c034:	4013      	ands	r3, r2
 800c036:	8879      	ldrh	r1, [r7, #2]
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	6812      	ldr	r2, [r2, #0]
 800c03c:	430b      	orrs	r3, r1
 800c03e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f042 0201 	orr.w	r2, r2, #1
 800c04e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c058:	d107      	bne.n	800c06a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c068:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	2b0f      	cmp	r3, #15
 800c070:	d970      	bls.n	800c154 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c072:	e068      	b.n	800c146 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	695b      	ldr	r3, [r3, #20]
 800c07a:	f003 0302 	and.w	r3, r3, #2
 800c07e:	2b02      	cmp	r3, #2
 800c080:	d11a      	bne.n	800c0b8 <HAL_SPI_TransmitReceive+0x18c>
 800c082:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c084:	2b00      	cmp	r3, #0
 800c086:	d017      	beq.n	800c0b8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6812      	ldr	r2, [r2, #0]
 800c092:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c098:	1d1a      	adds	r2, r3, #4
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	695a      	ldr	r2, [r3, #20]
 800c0be:	f248 0308 	movw	r3, #32776	; 0x8008
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d01a      	beq.n	800c0fe <HAL_SPI_TransmitReceive+0x1d2>
 800c0c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d017      	beq.n	800c0fe <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c0d8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0de:	1d1a      	adds	r2, r3, #4
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0fe:	f7f6 fcb1 	bl	8002a64 <HAL_GetTick>
 800c102:	4602      	mov	r2, r0
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	1ad3      	subs	r3, r2, r3
 800c108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d803      	bhi.n	800c116 <HAL_SPI_TransmitReceive+0x1ea>
 800c10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c114:	d102      	bne.n	800c11c <HAL_SPI_TransmitReceive+0x1f0>
 800c116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d114      	bne.n	800c146 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f000 f92d 	bl	800c37c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c130:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2201      	movs	r2, #1
 800c13e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c142:	2303      	movs	r3, #3
 800c144:	e115      	b.n	800c372 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c146:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d193      	bne.n	800c074 <HAL_SPI_TransmitReceive+0x148>
 800c14c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d190      	bne.n	800c074 <HAL_SPI_TransmitReceive+0x148>
 800c152:	e0e7      	b.n	800c324 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	2b07      	cmp	r3, #7
 800c15a:	f240 80dd 	bls.w	800c318 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c15e:	e066      	b.n	800c22e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	695b      	ldr	r3, [r3, #20]
 800c166:	f003 0302 	and.w	r3, r3, #2
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d119      	bne.n	800c1a2 <HAL_SPI_TransmitReceive+0x276>
 800c16e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c170:	2b00      	cmp	r3, #0
 800c172:	d016      	beq.n	800c1a2 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c178:	881a      	ldrh	r2, [r3, #0]
 800c17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c182:	1c9a      	adds	r2, r3, #2
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c18e:	b29b      	uxth	r3, r3
 800c190:	3b01      	subs	r3, #1
 800c192:	b29a      	uxth	r2, r3
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	695b      	ldr	r3, [r3, #20]
 800c1a8:	f003 0301 	and.w	r3, r3, #1
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d11a      	bne.n	800c1e6 <HAL_SPI_TransmitReceive+0x2ba>
 800c1b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d017      	beq.n	800c1e6 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1ba:	6a3a      	ldr	r2, [r7, #32]
 800c1bc:	8812      	ldrh	r2, [r2, #0]
 800c1be:	b292      	uxth	r2, r2
 800c1c0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1c6:	1c9a      	adds	r2, r3, #2
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1e6:	f7f6 fc3d 	bl	8002a64 <HAL_GetTick>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d803      	bhi.n	800c1fe <HAL_SPI_TransmitReceive+0x2d2>
 800c1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1fc:	d102      	bne.n	800c204 <HAL_SPI_TransmitReceive+0x2d8>
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c200:	2b00      	cmp	r3, #0
 800c202:	d114      	bne.n	800c22e <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f000 f8b9 	bl	800c37c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c218:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2201      	movs	r2, #1
 800c226:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c22a:	2303      	movs	r3, #3
 800c22c:	e0a1      	b.n	800c372 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c22e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c230:	2b00      	cmp	r3, #0
 800c232:	d195      	bne.n	800c160 <HAL_SPI_TransmitReceive+0x234>
 800c234:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c236:	2b00      	cmp	r3, #0
 800c238:	d192      	bne.n	800c160 <HAL_SPI_TransmitReceive+0x234>
 800c23a:	e073      	b.n	800c324 <HAL_SPI_TransmitReceive+0x3f8>
 800c23c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	695b      	ldr	r3, [r3, #20]
 800c246:	f003 0302 	and.w	r3, r3, #2
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d11b      	bne.n	800c286 <HAL_SPI_TransmitReceive+0x35a>
 800c24e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c250:	2b00      	cmp	r3, #0
 800c252:	d018      	beq.n	800c286 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3320      	adds	r3, #32
 800c25e:	7812      	ldrb	r2, [r2, #0]
 800c260:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c266:	1c5a      	adds	r2, r3, #1
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c272:	b29b      	uxth	r3, r3
 800c274:	3b01      	subs	r3, #1
 800c276:	b29a      	uxth	r2, r3
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c284:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	695b      	ldr	r3, [r3, #20]
 800c28c:	f003 0301 	and.w	r3, r3, #1
 800c290:	2b01      	cmp	r3, #1
 800c292:	d11d      	bne.n	800c2d0 <HAL_SPI_TransmitReceive+0x3a4>
 800c294:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c296:	2b00      	cmp	r3, #0
 800c298:	d01a      	beq.n	800c2d0 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2a6:	7812      	ldrb	r2, [r2, #0]
 800c2a8:	b2d2      	uxtb	r2, r2
 800c2aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2b0:	1c5a      	adds	r2, r3, #1
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2d0:	f7f6 fbc8 	bl	8002a64 <HAL_GetTick>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	1ad3      	subs	r3, r2, r3
 800c2da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d803      	bhi.n	800c2e8 <HAL_SPI_TransmitReceive+0x3bc>
 800c2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2e6:	d102      	bne.n	800c2ee <HAL_SPI_TransmitReceive+0x3c2>
 800c2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d114      	bne.n	800c318 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f000 f844 	bl	800c37c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c314:	2303      	movs	r3, #3
 800c316:	e02c      	b.n	800c372 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c318:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d190      	bne.n	800c240 <HAL_SPI_TransmitReceive+0x314>
 800c31e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c320:	2b00      	cmp	r3, #0
 800c322:	d18d      	bne.n	800c240 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	2200      	movs	r2, #0
 800c32c:	2108      	movs	r1, #8
 800c32e:	68f8      	ldr	r0, [r7, #12]
 800c330:	f000 f8c4 	bl	800c4bc <SPI_WaitOnFlagUntilTimeout>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d007      	beq.n	800c34a <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c340:	f043 0220 	orr.w	r2, r3, #32
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	f000 f816 	bl	800c37c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2200      	movs	r2, #0
 800c354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c366:	2b00      	cmp	r3, #0
 800c368:	d001      	beq.n	800c36e <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800c36a:	2301      	movs	r3, #1
 800c36c:	e001      	b.n	800c372 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800c36e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c372:	4618      	mov	r0, r3
 800c374:	3730      	adds	r7, #48	; 0x30
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop

0800c37c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	695b      	ldr	r3, [r3, #20]
 800c38a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	699a      	ldr	r2, [r3, #24]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f042 0208 	orr.w	r2, r2, #8
 800c39a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	699a      	ldr	r2, [r3, #24]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f042 0210 	orr.w	r2, r2, #16
 800c3aa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f022 0201 	bic.w	r2, r2, #1
 800c3ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	6919      	ldr	r1, [r3, #16]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	4b3c      	ldr	r3, [pc, #240]	; (800c4b8 <SPI_CloseTransfer+0x13c>)
 800c3c8:	400b      	ands	r3, r1
 800c3ca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	689a      	ldr	r2, [r3, #8]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c3da:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	2b04      	cmp	r3, #4
 800c3e6:	d014      	beq.n	800c412 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f003 0320 	and.w	r3, r3, #32
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00f      	beq.n	800c412 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	699a      	ldr	r2, [r3, #24]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f042 0220 	orr.w	r2, r2, #32
 800c410:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	2b03      	cmp	r3, #3
 800c41c:	d014      	beq.n	800c448 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00f      	beq.n	800c448 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c42e:	f043 0204 	orr.w	r2, r3, #4
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	699a      	ldr	r2, [r3, #24]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c446:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00f      	beq.n	800c472 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c458:	f043 0201 	orr.w	r2, r3, #1
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	699a      	ldr	r2, [r3, #24]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c470:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00f      	beq.n	800c49c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c482:	f043 0208 	orr.w	r2, r3, #8
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	699a      	ldr	r2, [r3, #24]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c49a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c4ac:	bf00      	nop
 800c4ae:	3714      	adds	r7, #20
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	fffffc90 	.word	0xfffffc90

0800c4bc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	603b      	str	r3, [r7, #0]
 800c4c8:	4613      	mov	r3, r2
 800c4ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c4cc:	e010      	b.n	800c4f0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4ce:	f7f6 fac9 	bl	8002a64 <HAL_GetTick>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	69ba      	ldr	r2, [r7, #24]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d803      	bhi.n	800c4e6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4e4:	d102      	bne.n	800c4ec <SPI_WaitOnFlagUntilTimeout+0x30>
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d101      	bne.n	800c4f0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	e00f      	b.n	800c510 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	695a      	ldr	r2, [r3, #20]
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	4013      	ands	r3, r2
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	bf0c      	ite	eq
 800c500:	2301      	moveq	r3, #1
 800c502:	2300      	movne	r3, #0
 800c504:	b2db      	uxtb	r3, r3
 800c506:	461a      	mov	r2, r3
 800c508:	79fb      	ldrb	r3, [r7, #7]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d0df      	beq.n	800c4ce <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c518:	b480      	push	{r7}
 800c51a:	b085      	sub	sp, #20
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c524:	095b      	lsrs	r3, r3, #5
 800c526:	3301      	adds	r3, #1
 800c528:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	3301      	adds	r3, #1
 800c530:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	3307      	adds	r3, #7
 800c536:	08db      	lsrs	r3, r3, #3
 800c538:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c542:	4618      	mov	r0, r3
 800c544:	3714      	adds	r7, #20
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
	...

0800c550 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c55a:	2300      	movs	r3, #0
 800c55c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d109      	bne.n	800c578 <HAL_TIM_OC_Start_IT+0x28>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	bf14      	ite	ne
 800c570:	2301      	movne	r3, #1
 800c572:	2300      	moveq	r3, #0
 800c574:	b2db      	uxtb	r3, r3
 800c576:	e03c      	b.n	800c5f2 <HAL_TIM_OC_Start_IT+0xa2>
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	2b04      	cmp	r3, #4
 800c57c:	d109      	bne.n	800c592 <HAL_TIM_OC_Start_IT+0x42>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b01      	cmp	r3, #1
 800c588:	bf14      	ite	ne
 800c58a:	2301      	movne	r3, #1
 800c58c:	2300      	moveq	r3, #0
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	e02f      	b.n	800c5f2 <HAL_TIM_OC_Start_IT+0xa2>
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b08      	cmp	r3, #8
 800c596:	d109      	bne.n	800c5ac <HAL_TIM_OC_Start_IT+0x5c>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	bf14      	ite	ne
 800c5a4:	2301      	movne	r3, #1
 800c5a6:	2300      	moveq	r3, #0
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	e022      	b.n	800c5f2 <HAL_TIM_OC_Start_IT+0xa2>
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2b0c      	cmp	r3, #12
 800c5b0:	d109      	bne.n	800c5c6 <HAL_TIM_OC_Start_IT+0x76>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	bf14      	ite	ne
 800c5be:	2301      	movne	r3, #1
 800c5c0:	2300      	moveq	r3, #0
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	e015      	b.n	800c5f2 <HAL_TIM_OC_Start_IT+0xa2>
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	2b10      	cmp	r3, #16
 800c5ca:	d109      	bne.n	800c5e0 <HAL_TIM_OC_Start_IT+0x90>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	bf14      	ite	ne
 800c5d8:	2301      	movne	r3, #1
 800c5da:	2300      	moveq	r3, #0
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	e008      	b.n	800c5f2 <HAL_TIM_OC_Start_IT+0xa2>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	bf14      	ite	ne
 800c5ec:	2301      	movne	r3, #1
 800c5ee:	2300      	moveq	r3, #0
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d001      	beq.n	800c5fa <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e0ec      	b.n	800c7d4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d104      	bne.n	800c60a <HAL_TIM_OC_Start_IT+0xba>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2202      	movs	r2, #2
 800c604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c608:	e023      	b.n	800c652 <HAL_TIM_OC_Start_IT+0x102>
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	2b04      	cmp	r3, #4
 800c60e:	d104      	bne.n	800c61a <HAL_TIM_OC_Start_IT+0xca>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2202      	movs	r2, #2
 800c614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c618:	e01b      	b.n	800c652 <HAL_TIM_OC_Start_IT+0x102>
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	2b08      	cmp	r3, #8
 800c61e:	d104      	bne.n	800c62a <HAL_TIM_OC_Start_IT+0xda>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2202      	movs	r2, #2
 800c624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c628:	e013      	b.n	800c652 <HAL_TIM_OC_Start_IT+0x102>
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	2b0c      	cmp	r3, #12
 800c62e:	d104      	bne.n	800c63a <HAL_TIM_OC_Start_IT+0xea>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2202      	movs	r2, #2
 800c634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c638:	e00b      	b.n	800c652 <HAL_TIM_OC_Start_IT+0x102>
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	2b10      	cmp	r3, #16
 800c63e:	d104      	bne.n	800c64a <HAL_TIM_OC_Start_IT+0xfa>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2202      	movs	r2, #2
 800c644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c648:	e003      	b.n	800c652 <HAL_TIM_OC_Start_IT+0x102>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2202      	movs	r2, #2
 800c64e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2b0c      	cmp	r3, #12
 800c656:	d841      	bhi.n	800c6dc <HAL_TIM_OC_Start_IT+0x18c>
 800c658:	a201      	add	r2, pc, #4	; (adr r2, 800c660 <HAL_TIM_OC_Start_IT+0x110>)
 800c65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c65e:	bf00      	nop
 800c660:	0800c695 	.word	0x0800c695
 800c664:	0800c6dd 	.word	0x0800c6dd
 800c668:	0800c6dd 	.word	0x0800c6dd
 800c66c:	0800c6dd 	.word	0x0800c6dd
 800c670:	0800c6a7 	.word	0x0800c6a7
 800c674:	0800c6dd 	.word	0x0800c6dd
 800c678:	0800c6dd 	.word	0x0800c6dd
 800c67c:	0800c6dd 	.word	0x0800c6dd
 800c680:	0800c6b9 	.word	0x0800c6b9
 800c684:	0800c6dd 	.word	0x0800c6dd
 800c688:	0800c6dd 	.word	0x0800c6dd
 800c68c:	0800c6dd 	.word	0x0800c6dd
 800c690:	0800c6cb 	.word	0x0800c6cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	68da      	ldr	r2, [r3, #12]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f042 0202 	orr.w	r2, r2, #2
 800c6a2:	60da      	str	r2, [r3, #12]
      break;
 800c6a4:	e01d      	b.n	800c6e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	68da      	ldr	r2, [r3, #12]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f042 0204 	orr.w	r2, r2, #4
 800c6b4:	60da      	str	r2, [r3, #12]
      break;
 800c6b6:	e014      	b.n	800c6e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	68da      	ldr	r2, [r3, #12]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f042 0208 	orr.w	r2, r2, #8
 800c6c6:	60da      	str	r2, [r3, #12]
      break;
 800c6c8:	e00b      	b.n	800c6e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68da      	ldr	r2, [r3, #12]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f042 0210 	orr.w	r2, r2, #16
 800c6d8:	60da      	str	r2, [r3, #12]
      break;
 800c6da:	e002      	b.n	800c6e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	73fb      	strb	r3, [r7, #15]
      break;
 800c6e0:	bf00      	nop
  }

  if (status == HAL_OK)
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d174      	bne.n	800c7d2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f000 fea9 	bl	800d448 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a38      	ldr	r2, [pc, #224]	; (800c7dc <HAL_TIM_OC_Start_IT+0x28c>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d013      	beq.n	800c728 <HAL_TIM_OC_Start_IT+0x1d8>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a36      	ldr	r2, [pc, #216]	; (800c7e0 <HAL_TIM_OC_Start_IT+0x290>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d00e      	beq.n	800c728 <HAL_TIM_OC_Start_IT+0x1d8>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a35      	ldr	r2, [pc, #212]	; (800c7e4 <HAL_TIM_OC_Start_IT+0x294>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d009      	beq.n	800c728 <HAL_TIM_OC_Start_IT+0x1d8>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a33      	ldr	r2, [pc, #204]	; (800c7e8 <HAL_TIM_OC_Start_IT+0x298>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d004      	beq.n	800c728 <HAL_TIM_OC_Start_IT+0x1d8>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4a32      	ldr	r2, [pc, #200]	; (800c7ec <HAL_TIM_OC_Start_IT+0x29c>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d101      	bne.n	800c72c <HAL_TIM_OC_Start_IT+0x1dc>
 800c728:	2301      	movs	r3, #1
 800c72a:	e000      	b.n	800c72e <HAL_TIM_OC_Start_IT+0x1de>
 800c72c:	2300      	movs	r3, #0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d007      	beq.n	800c742 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c740:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a25      	ldr	r2, [pc, #148]	; (800c7dc <HAL_TIM_OC_Start_IT+0x28c>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d022      	beq.n	800c792 <HAL_TIM_OC_Start_IT+0x242>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c754:	d01d      	beq.n	800c792 <HAL_TIM_OC_Start_IT+0x242>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a25      	ldr	r2, [pc, #148]	; (800c7f0 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d018      	beq.n	800c792 <HAL_TIM_OC_Start_IT+0x242>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a23      	ldr	r2, [pc, #140]	; (800c7f4 <HAL_TIM_OC_Start_IT+0x2a4>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d013      	beq.n	800c792 <HAL_TIM_OC_Start_IT+0x242>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a22      	ldr	r2, [pc, #136]	; (800c7f8 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d00e      	beq.n	800c792 <HAL_TIM_OC_Start_IT+0x242>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a19      	ldr	r2, [pc, #100]	; (800c7e0 <HAL_TIM_OC_Start_IT+0x290>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d009      	beq.n	800c792 <HAL_TIM_OC_Start_IT+0x242>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a1e      	ldr	r2, [pc, #120]	; (800c7fc <HAL_TIM_OC_Start_IT+0x2ac>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d004      	beq.n	800c792 <HAL_TIM_OC_Start_IT+0x242>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a15      	ldr	r2, [pc, #84]	; (800c7e4 <HAL_TIM_OC_Start_IT+0x294>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d115      	bne.n	800c7be <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	689a      	ldr	r2, [r3, #8]
 800c798:	4b19      	ldr	r3, [pc, #100]	; (800c800 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c79a:	4013      	ands	r3, r2
 800c79c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	2b06      	cmp	r3, #6
 800c7a2:	d015      	beq.n	800c7d0 <HAL_TIM_OC_Start_IT+0x280>
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7aa:	d011      	beq.n	800c7d0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f042 0201 	orr.w	r2, r2, #1
 800c7ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7bc:	e008      	b.n	800c7d0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f042 0201 	orr.w	r2, r2, #1
 800c7cc:	601a      	str	r2, [r3, #0]
 800c7ce:	e000      	b.n	800c7d2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7d0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3710      	adds	r7, #16
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	40010000 	.word	0x40010000
 800c7e0:	40010400 	.word	0x40010400
 800c7e4:	40014000 	.word	0x40014000
 800c7e8:	40014400 	.word	0x40014400
 800c7ec:	40014800 	.word	0x40014800
 800c7f0:	40000400 	.word	0x40000400
 800c7f4:	40000800 	.word	0x40000800
 800c7f8:	40000c00 	.word	0x40000c00
 800c7fc:	40001800 	.word	0x40001800
 800c800:	00010007 	.word	0x00010007

0800c804 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d101      	bne.n	800c816 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	e049      	b.n	800c8aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d106      	bne.n	800c830 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f7f5 fe38 	bl	80024a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2202      	movs	r2, #2
 800c834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	3304      	adds	r3, #4
 800c840:	4619      	mov	r1, r3
 800c842:	4610      	mov	r0, r2
 800c844:	f000 fa90 	bl	800cd68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2201      	movs	r2, #1
 800c87c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2201      	movs	r2, #1
 800c884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8a8:	2300      	movs	r3, #0
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3708      	adds	r7, #8
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b082      	sub	sp, #8
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	f003 0302 	and.w	r3, r3, #2
 800c8c4:	2b02      	cmp	r3, #2
 800c8c6:	d122      	bne.n	800c90e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	f003 0302 	and.w	r3, r3, #2
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d11b      	bne.n	800c90e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f06f 0202 	mvn.w	r2, #2
 800c8de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	699b      	ldr	r3, [r3, #24]
 800c8ec:	f003 0303 	and.w	r3, r3, #3
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d003      	beq.n	800c8fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 fa19 	bl	800cd2c <HAL_TIM_IC_CaptureCallback>
 800c8fa:	e005      	b.n	800c908 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7f3 fe83 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 fa1c 	bl	800cd40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	691b      	ldr	r3, [r3, #16]
 800c914:	f003 0304 	and.w	r3, r3, #4
 800c918:	2b04      	cmp	r3, #4
 800c91a:	d122      	bne.n	800c962 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	f003 0304 	and.w	r3, r3, #4
 800c926:	2b04      	cmp	r3, #4
 800c928:	d11b      	bne.n	800c962 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f06f 0204 	mvn.w	r2, #4
 800c932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2202      	movs	r2, #2
 800c938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	699b      	ldr	r3, [r3, #24]
 800c940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c944:	2b00      	cmp	r3, #0
 800c946:	d003      	beq.n	800c950 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f9ef 	bl	800cd2c <HAL_TIM_IC_CaptureCallback>
 800c94e:	e005      	b.n	800c95c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f7f3 fe59 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 f9f2 	bl	800cd40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	691b      	ldr	r3, [r3, #16]
 800c968:	f003 0308 	and.w	r3, r3, #8
 800c96c:	2b08      	cmp	r3, #8
 800c96e:	d122      	bne.n	800c9b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	f003 0308 	and.w	r3, r3, #8
 800c97a:	2b08      	cmp	r3, #8
 800c97c:	d11b      	bne.n	800c9b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f06f 0208 	mvn.w	r2, #8
 800c986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2204      	movs	r2, #4
 800c98c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	69db      	ldr	r3, [r3, #28]
 800c994:	f003 0303 	and.w	r3, r3, #3
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d003      	beq.n	800c9a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 f9c5 	bl	800cd2c <HAL_TIM_IC_CaptureCallback>
 800c9a2:	e005      	b.n	800c9b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7f3 fe2f 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f9c8 	bl	800cd40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	691b      	ldr	r3, [r3, #16]
 800c9bc:	f003 0310 	and.w	r3, r3, #16
 800c9c0:	2b10      	cmp	r3, #16
 800c9c2:	d122      	bne.n	800ca0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	f003 0310 	and.w	r3, r3, #16
 800c9ce:	2b10      	cmp	r3, #16
 800c9d0:	d11b      	bne.n	800ca0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f06f 0210 	mvn.w	r2, #16
 800c9da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2208      	movs	r2, #8
 800c9e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	69db      	ldr	r3, [r3, #28]
 800c9e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d003      	beq.n	800c9f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 f99b 	bl	800cd2c <HAL_TIM_IC_CaptureCallback>
 800c9f6:	e005      	b.n	800ca04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f7f3 fe05 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 f99e 	bl	800cd40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	f003 0301 	and.w	r3, r3, #1
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d10e      	bne.n	800ca36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	f003 0301 	and.w	r3, r3, #1
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d107      	bne.n	800ca36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f06f 0201 	mvn.w	r2, #1
 800ca2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 f971 	bl	800cd18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	691b      	ldr	r3, [r3, #16]
 800ca3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca40:	2b80      	cmp	r3, #128	; 0x80
 800ca42:	d10e      	bne.n	800ca62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca4e:	2b80      	cmp	r3, #128	; 0x80
 800ca50:	d107      	bne.n	800ca62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ca5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 fe2f 	bl	800d6c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	691b      	ldr	r3, [r3, #16]
 800ca68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca70:	d10e      	bne.n	800ca90 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca7c:	2b80      	cmp	r3, #128	; 0x80
 800ca7e:	d107      	bne.n	800ca90 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ca88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 fe22 	bl	800d6d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	691b      	ldr	r3, [r3, #16]
 800ca96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca9a:	2b40      	cmp	r3, #64	; 0x40
 800ca9c:	d10e      	bne.n	800cabc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caa8:	2b40      	cmp	r3, #64	; 0x40
 800caaa:	d107      	bne.n	800cabc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 f94c 	bl	800cd54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	691b      	ldr	r3, [r3, #16]
 800cac2:	f003 0320 	and.w	r3, r3, #32
 800cac6:	2b20      	cmp	r3, #32
 800cac8:	d10e      	bne.n	800cae8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	f003 0320 	and.w	r3, r3, #32
 800cad4:	2b20      	cmp	r3, #32
 800cad6:	d107      	bne.n	800cae8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f06f 0220 	mvn.w	r2, #32
 800cae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f000 fde2 	bl	800d6ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cae8:	bf00      	nop
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cafc:	2300      	movs	r3, #0
 800cafe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d101      	bne.n	800cb0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cb0a:	2302      	movs	r3, #2
 800cb0c:	e0ff      	b.n	800cd0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2201      	movs	r2, #1
 800cb12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2b14      	cmp	r3, #20
 800cb1a:	f200 80f0 	bhi.w	800ccfe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cb1e:	a201      	add	r2, pc, #4	; (adr r2, 800cb24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb24:	0800cb79 	.word	0x0800cb79
 800cb28:	0800ccff 	.word	0x0800ccff
 800cb2c:	0800ccff 	.word	0x0800ccff
 800cb30:	0800ccff 	.word	0x0800ccff
 800cb34:	0800cbb9 	.word	0x0800cbb9
 800cb38:	0800ccff 	.word	0x0800ccff
 800cb3c:	0800ccff 	.word	0x0800ccff
 800cb40:	0800ccff 	.word	0x0800ccff
 800cb44:	0800cbfb 	.word	0x0800cbfb
 800cb48:	0800ccff 	.word	0x0800ccff
 800cb4c:	0800ccff 	.word	0x0800ccff
 800cb50:	0800ccff 	.word	0x0800ccff
 800cb54:	0800cc3b 	.word	0x0800cc3b
 800cb58:	0800ccff 	.word	0x0800ccff
 800cb5c:	0800ccff 	.word	0x0800ccff
 800cb60:	0800ccff 	.word	0x0800ccff
 800cb64:	0800cc7d 	.word	0x0800cc7d
 800cb68:	0800ccff 	.word	0x0800ccff
 800cb6c:	0800ccff 	.word	0x0800ccff
 800cb70:	0800ccff 	.word	0x0800ccff
 800cb74:	0800ccbd 	.word	0x0800ccbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	68b9      	ldr	r1, [r7, #8]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f000 f98c 	bl	800ce9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	699a      	ldr	r2, [r3, #24]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f042 0208 	orr.w	r2, r2, #8
 800cb92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	699a      	ldr	r2, [r3, #24]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f022 0204 	bic.w	r2, r2, #4
 800cba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	6999      	ldr	r1, [r3, #24]
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	691a      	ldr	r2, [r3, #16]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	430a      	orrs	r2, r1
 800cbb4:	619a      	str	r2, [r3, #24]
      break;
 800cbb6:	e0a5      	b.n	800cd04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	68b9      	ldr	r1, [r7, #8]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f000 f9fc 	bl	800cfbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	699a      	ldr	r2, [r3, #24]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	699a      	ldr	r2, [r3, #24]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6999      	ldr	r1, [r3, #24]
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	021a      	lsls	r2, r3, #8
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	430a      	orrs	r2, r1
 800cbf6:	619a      	str	r2, [r3, #24]
      break;
 800cbf8:	e084      	b.n	800cd04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	68b9      	ldr	r1, [r7, #8]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f000 fa65 	bl	800d0d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	69da      	ldr	r2, [r3, #28]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f042 0208 	orr.w	r2, r2, #8
 800cc14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	69da      	ldr	r2, [r3, #28]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f022 0204 	bic.w	r2, r2, #4
 800cc24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	69d9      	ldr	r1, [r3, #28]
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	691a      	ldr	r2, [r3, #16]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	430a      	orrs	r2, r1
 800cc36:	61da      	str	r2, [r3, #28]
      break;
 800cc38:	e064      	b.n	800cd04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	68b9      	ldr	r1, [r7, #8]
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 facd 	bl	800d1e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	69da      	ldr	r2, [r3, #28]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	69da      	ldr	r2, [r3, #28]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	69d9      	ldr	r1, [r3, #28]
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	691b      	ldr	r3, [r3, #16]
 800cc70:	021a      	lsls	r2, r3, #8
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	430a      	orrs	r2, r1
 800cc78:	61da      	str	r2, [r3, #28]
      break;
 800cc7a:	e043      	b.n	800cd04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	68b9      	ldr	r1, [r7, #8]
 800cc82:	4618      	mov	r0, r3
 800cc84:	f000 fb16 	bl	800d2b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f042 0208 	orr.w	r2, r2, #8
 800cc96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f022 0204 	bic.w	r2, r2, #4
 800cca6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	691a      	ldr	r2, [r3, #16]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	430a      	orrs	r2, r1
 800ccb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ccba:	e023      	b.n	800cd04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68b9      	ldr	r1, [r7, #8]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 fb5a 	bl	800d37c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cce6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	691b      	ldr	r3, [r3, #16]
 800ccf2:	021a      	lsls	r2, r3, #8
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	430a      	orrs	r2, r1
 800ccfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ccfc:	e002      	b.n	800cd04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	75fb      	strb	r3, [r7, #23]
      break;
 800cd02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cd0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3718      	adds	r7, #24
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop

0800cd18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cd20:	bf00      	nop
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd34:	bf00      	nop
 800cd36:	370c      	adds	r7, #12
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd48:	bf00      	nop
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd5c:	bf00      	nop
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4a40      	ldr	r2, [pc, #256]	; (800ce7c <TIM_Base_SetConfig+0x114>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d013      	beq.n	800cda8 <TIM_Base_SetConfig+0x40>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd86:	d00f      	beq.n	800cda8 <TIM_Base_SetConfig+0x40>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a3d      	ldr	r2, [pc, #244]	; (800ce80 <TIM_Base_SetConfig+0x118>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d00b      	beq.n	800cda8 <TIM_Base_SetConfig+0x40>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a3c      	ldr	r2, [pc, #240]	; (800ce84 <TIM_Base_SetConfig+0x11c>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d007      	beq.n	800cda8 <TIM_Base_SetConfig+0x40>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a3b      	ldr	r2, [pc, #236]	; (800ce88 <TIM_Base_SetConfig+0x120>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d003      	beq.n	800cda8 <TIM_Base_SetConfig+0x40>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4a3a      	ldr	r2, [pc, #232]	; (800ce8c <TIM_Base_SetConfig+0x124>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d108      	bne.n	800cdba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4a2f      	ldr	r2, [pc, #188]	; (800ce7c <TIM_Base_SetConfig+0x114>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d01f      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdc8:	d01b      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4a2c      	ldr	r2, [pc, #176]	; (800ce80 <TIM_Base_SetConfig+0x118>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d017      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	4a2b      	ldr	r2, [pc, #172]	; (800ce84 <TIM_Base_SetConfig+0x11c>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d013      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4a2a      	ldr	r2, [pc, #168]	; (800ce88 <TIM_Base_SetConfig+0x120>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d00f      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	4a29      	ldr	r2, [pc, #164]	; (800ce8c <TIM_Base_SetConfig+0x124>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d00b      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	4a28      	ldr	r2, [pc, #160]	; (800ce90 <TIM_Base_SetConfig+0x128>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d007      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4a27      	ldr	r2, [pc, #156]	; (800ce94 <TIM_Base_SetConfig+0x12c>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d003      	beq.n	800ce02 <TIM_Base_SetConfig+0x9a>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4a26      	ldr	r2, [pc, #152]	; (800ce98 <TIM_Base_SetConfig+0x130>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d108      	bne.n	800ce14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	68fa      	ldr	r2, [r7, #12]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	695b      	ldr	r3, [r3, #20]
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	689a      	ldr	r2, [r3, #8]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4a10      	ldr	r2, [pc, #64]	; (800ce7c <TIM_Base_SetConfig+0x114>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d00f      	beq.n	800ce60 <TIM_Base_SetConfig+0xf8>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4a12      	ldr	r2, [pc, #72]	; (800ce8c <TIM_Base_SetConfig+0x124>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d00b      	beq.n	800ce60 <TIM_Base_SetConfig+0xf8>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4a11      	ldr	r2, [pc, #68]	; (800ce90 <TIM_Base_SetConfig+0x128>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d007      	beq.n	800ce60 <TIM_Base_SetConfig+0xf8>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	4a10      	ldr	r2, [pc, #64]	; (800ce94 <TIM_Base_SetConfig+0x12c>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d003      	beq.n	800ce60 <TIM_Base_SetConfig+0xf8>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4a0f      	ldr	r2, [pc, #60]	; (800ce98 <TIM_Base_SetConfig+0x130>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d103      	bne.n	800ce68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	691a      	ldr	r2, [r3, #16]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	615a      	str	r2, [r3, #20]
}
 800ce6e:	bf00      	nop
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	40010000 	.word	0x40010000
 800ce80:	40000400 	.word	0x40000400
 800ce84:	40000800 	.word	0x40000800
 800ce88:	40000c00 	.word	0x40000c00
 800ce8c:	40010400 	.word	0x40010400
 800ce90:	40014000 	.word	0x40014000
 800ce94:	40014400 	.word	0x40014400
 800ce98:	40014800 	.word	0x40014800

0800ce9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b087      	sub	sp, #28
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a1b      	ldr	r3, [r3, #32]
 800ceaa:	f023 0201 	bic.w	r2, r3, #1
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6a1b      	ldr	r3, [r3, #32]
 800ceb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	699b      	ldr	r3, [r3, #24]
 800cec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cec4:	68fa      	ldr	r2, [r7, #12]
 800cec6:	4b37      	ldr	r3, [pc, #220]	; (800cfa4 <TIM_OC1_SetConfig+0x108>)
 800cec8:	4013      	ands	r3, r2
 800ceca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f023 0303 	bic.w	r3, r3, #3
 800ced2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	4313      	orrs	r3, r2
 800cedc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	f023 0302 	bic.w	r3, r3, #2
 800cee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	697a      	ldr	r2, [r7, #20]
 800ceec:	4313      	orrs	r3, r2
 800ceee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	4a2d      	ldr	r2, [pc, #180]	; (800cfa8 <TIM_OC1_SetConfig+0x10c>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d00f      	beq.n	800cf18 <TIM_OC1_SetConfig+0x7c>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	4a2c      	ldr	r2, [pc, #176]	; (800cfac <TIM_OC1_SetConfig+0x110>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d00b      	beq.n	800cf18 <TIM_OC1_SetConfig+0x7c>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4a2b      	ldr	r2, [pc, #172]	; (800cfb0 <TIM_OC1_SetConfig+0x114>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d007      	beq.n	800cf18 <TIM_OC1_SetConfig+0x7c>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4a2a      	ldr	r2, [pc, #168]	; (800cfb4 <TIM_OC1_SetConfig+0x118>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d003      	beq.n	800cf18 <TIM_OC1_SetConfig+0x7c>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4a29      	ldr	r2, [pc, #164]	; (800cfb8 <TIM_OC1_SetConfig+0x11c>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d10c      	bne.n	800cf32 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	f023 0308 	bic.w	r3, r3, #8
 800cf1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	68db      	ldr	r3, [r3, #12]
 800cf24:	697a      	ldr	r2, [r7, #20]
 800cf26:	4313      	orrs	r3, r2
 800cf28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	f023 0304 	bic.w	r3, r3, #4
 800cf30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4a1c      	ldr	r2, [pc, #112]	; (800cfa8 <TIM_OC1_SetConfig+0x10c>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d00f      	beq.n	800cf5a <TIM_OC1_SetConfig+0xbe>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4a1b      	ldr	r2, [pc, #108]	; (800cfac <TIM_OC1_SetConfig+0x110>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d00b      	beq.n	800cf5a <TIM_OC1_SetConfig+0xbe>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4a1a      	ldr	r2, [pc, #104]	; (800cfb0 <TIM_OC1_SetConfig+0x114>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d007      	beq.n	800cf5a <TIM_OC1_SetConfig+0xbe>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4a19      	ldr	r2, [pc, #100]	; (800cfb4 <TIM_OC1_SetConfig+0x118>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d003      	beq.n	800cf5a <TIM_OC1_SetConfig+0xbe>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4a18      	ldr	r2, [pc, #96]	; (800cfb8 <TIM_OC1_SetConfig+0x11c>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d111      	bne.n	800cf7e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	695b      	ldr	r3, [r3, #20]
 800cf6e:	693a      	ldr	r2, [r7, #16]
 800cf70:	4313      	orrs	r3, r2
 800cf72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	699b      	ldr	r3, [r3, #24]
 800cf78:	693a      	ldr	r2, [r7, #16]
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	693a      	ldr	r2, [r7, #16]
 800cf82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	685a      	ldr	r2, [r3, #4]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	697a      	ldr	r2, [r7, #20]
 800cf96:	621a      	str	r2, [r3, #32]
}
 800cf98:	bf00      	nop
 800cf9a:	371c      	adds	r7, #28
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	fffeff8f 	.word	0xfffeff8f
 800cfa8:	40010000 	.word	0x40010000
 800cfac:	40010400 	.word	0x40010400
 800cfb0:	40014000 	.word	0x40014000
 800cfb4:	40014400 	.word	0x40014400
 800cfb8:	40014800 	.word	0x40014800

0800cfbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b087      	sub	sp, #28
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6a1b      	ldr	r3, [r3, #32]
 800cfca:	f023 0210 	bic.w	r2, r3, #16
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6a1b      	ldr	r3, [r3, #32]
 800cfd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	4b34      	ldr	r3, [pc, #208]	; (800d0b8 <TIM_OC2_SetConfig+0xfc>)
 800cfe8:	4013      	ands	r3, r2
 800cfea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	021b      	lsls	r3, r3, #8
 800cffa:	68fa      	ldr	r2, [r7, #12]
 800cffc:	4313      	orrs	r3, r2
 800cffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	f023 0320 	bic.w	r3, r3, #32
 800d006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	011b      	lsls	r3, r3, #4
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	4313      	orrs	r3, r2
 800d012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4a29      	ldr	r2, [pc, #164]	; (800d0bc <TIM_OC2_SetConfig+0x100>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d003      	beq.n	800d024 <TIM_OC2_SetConfig+0x68>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	4a28      	ldr	r2, [pc, #160]	; (800d0c0 <TIM_OC2_SetConfig+0x104>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d10d      	bne.n	800d040 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d02a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	011b      	lsls	r3, r3, #4
 800d032:	697a      	ldr	r2, [r7, #20]
 800d034:	4313      	orrs	r3, r2
 800d036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d03e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4a1e      	ldr	r2, [pc, #120]	; (800d0bc <TIM_OC2_SetConfig+0x100>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d00f      	beq.n	800d068 <TIM_OC2_SetConfig+0xac>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4a1d      	ldr	r2, [pc, #116]	; (800d0c0 <TIM_OC2_SetConfig+0x104>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d00b      	beq.n	800d068 <TIM_OC2_SetConfig+0xac>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4a1c      	ldr	r2, [pc, #112]	; (800d0c4 <TIM_OC2_SetConfig+0x108>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d007      	beq.n	800d068 <TIM_OC2_SetConfig+0xac>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4a1b      	ldr	r2, [pc, #108]	; (800d0c8 <TIM_OC2_SetConfig+0x10c>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d003      	beq.n	800d068 <TIM_OC2_SetConfig+0xac>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a1a      	ldr	r2, [pc, #104]	; (800d0cc <TIM_OC2_SetConfig+0x110>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d113      	bne.n	800d090 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d06e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	695b      	ldr	r3, [r3, #20]
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	693a      	ldr	r2, [r7, #16]
 800d080:	4313      	orrs	r3, r2
 800d082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	699b      	ldr	r3, [r3, #24]
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	4313      	orrs	r3, r2
 800d08e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	693a      	ldr	r2, [r7, #16]
 800d094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	685a      	ldr	r2, [r3, #4]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	697a      	ldr	r2, [r7, #20]
 800d0a8:	621a      	str	r2, [r3, #32]
}
 800d0aa:	bf00      	nop
 800d0ac:	371c      	adds	r7, #28
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop
 800d0b8:	feff8fff 	.word	0xfeff8fff
 800d0bc:	40010000 	.word	0x40010000
 800d0c0:	40010400 	.word	0x40010400
 800d0c4:	40014000 	.word	0x40014000
 800d0c8:	40014400 	.word	0x40014400
 800d0cc:	40014800 	.word	0x40014800

0800d0d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b087      	sub	sp, #28
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6a1b      	ldr	r3, [r3, #32]
 800d0de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a1b      	ldr	r3, [r3, #32]
 800d0ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	69db      	ldr	r3, [r3, #28]
 800d0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	4b33      	ldr	r3, [pc, #204]	; (800d1c8 <TIM_OC3_SetConfig+0xf8>)
 800d0fc:	4013      	ands	r3, r2
 800d0fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f023 0303 	bic.w	r3, r3, #3
 800d106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	4313      	orrs	r3, r2
 800d110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	689b      	ldr	r3, [r3, #8]
 800d11e:	021b      	lsls	r3, r3, #8
 800d120:	697a      	ldr	r2, [r7, #20]
 800d122:	4313      	orrs	r3, r2
 800d124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	4a28      	ldr	r2, [pc, #160]	; (800d1cc <TIM_OC3_SetConfig+0xfc>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d003      	beq.n	800d136 <TIM_OC3_SetConfig+0x66>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	4a27      	ldr	r2, [pc, #156]	; (800d1d0 <TIM_OC3_SetConfig+0x100>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d10d      	bne.n	800d152 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d13c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	021b      	lsls	r3, r3, #8
 800d144:	697a      	ldr	r2, [r7, #20]
 800d146:	4313      	orrs	r3, r2
 800d148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4a1d      	ldr	r2, [pc, #116]	; (800d1cc <TIM_OC3_SetConfig+0xfc>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d00f      	beq.n	800d17a <TIM_OC3_SetConfig+0xaa>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	4a1c      	ldr	r2, [pc, #112]	; (800d1d0 <TIM_OC3_SetConfig+0x100>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d00b      	beq.n	800d17a <TIM_OC3_SetConfig+0xaa>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	4a1b      	ldr	r2, [pc, #108]	; (800d1d4 <TIM_OC3_SetConfig+0x104>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d007      	beq.n	800d17a <TIM_OC3_SetConfig+0xaa>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4a1a      	ldr	r2, [pc, #104]	; (800d1d8 <TIM_OC3_SetConfig+0x108>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d003      	beq.n	800d17a <TIM_OC3_SetConfig+0xaa>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4a19      	ldr	r2, [pc, #100]	; (800d1dc <TIM_OC3_SetConfig+0x10c>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d113      	bne.n	800d1a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	695b      	ldr	r3, [r3, #20]
 800d18e:	011b      	lsls	r3, r3, #4
 800d190:	693a      	ldr	r2, [r7, #16]
 800d192:	4313      	orrs	r3, r2
 800d194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	699b      	ldr	r3, [r3, #24]
 800d19a:	011b      	lsls	r3, r3, #4
 800d19c:	693a      	ldr	r2, [r7, #16]
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	693a      	ldr	r2, [r7, #16]
 800d1a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	685a      	ldr	r2, [r3, #4]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	697a      	ldr	r2, [r7, #20]
 800d1ba:	621a      	str	r2, [r3, #32]
}
 800d1bc:	bf00      	nop
 800d1be:	371c      	adds	r7, #28
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr
 800d1c8:	fffeff8f 	.word	0xfffeff8f
 800d1cc:	40010000 	.word	0x40010000
 800d1d0:	40010400 	.word	0x40010400
 800d1d4:	40014000 	.word	0x40014000
 800d1d8:	40014400 	.word	0x40014400
 800d1dc:	40014800 	.word	0x40014800

0800d1e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b087      	sub	sp, #28
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6a1b      	ldr	r3, [r3, #32]
 800d1ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6a1b      	ldr	r3, [r3, #32]
 800d1fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	69db      	ldr	r3, [r3, #28]
 800d206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	4b24      	ldr	r3, [pc, #144]	; (800d29c <TIM_OC4_SetConfig+0xbc>)
 800d20c:	4013      	ands	r3, r2
 800d20e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	021b      	lsls	r3, r3, #8
 800d21e:	68fa      	ldr	r2, [r7, #12]
 800d220:	4313      	orrs	r3, r2
 800d222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d22a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	031b      	lsls	r3, r3, #12
 800d232:	693a      	ldr	r2, [r7, #16]
 800d234:	4313      	orrs	r3, r2
 800d236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	4a19      	ldr	r2, [pc, #100]	; (800d2a0 <TIM_OC4_SetConfig+0xc0>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d00f      	beq.n	800d260 <TIM_OC4_SetConfig+0x80>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4a18      	ldr	r2, [pc, #96]	; (800d2a4 <TIM_OC4_SetConfig+0xc4>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d00b      	beq.n	800d260 <TIM_OC4_SetConfig+0x80>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	4a17      	ldr	r2, [pc, #92]	; (800d2a8 <TIM_OC4_SetConfig+0xc8>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d007      	beq.n	800d260 <TIM_OC4_SetConfig+0x80>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	4a16      	ldr	r2, [pc, #88]	; (800d2ac <TIM_OC4_SetConfig+0xcc>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d003      	beq.n	800d260 <TIM_OC4_SetConfig+0x80>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4a15      	ldr	r2, [pc, #84]	; (800d2b0 <TIM_OC4_SetConfig+0xd0>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d109      	bne.n	800d274 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	695b      	ldr	r3, [r3, #20]
 800d26c:	019b      	lsls	r3, r3, #6
 800d26e:	697a      	ldr	r2, [r7, #20]
 800d270:	4313      	orrs	r3, r2
 800d272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	697a      	ldr	r2, [r7, #20]
 800d278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	685a      	ldr	r2, [r3, #4]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	693a      	ldr	r2, [r7, #16]
 800d28c:	621a      	str	r2, [r3, #32]
}
 800d28e:	bf00      	nop
 800d290:	371c      	adds	r7, #28
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	feff8fff 	.word	0xfeff8fff
 800d2a0:	40010000 	.word	0x40010000
 800d2a4:	40010400 	.word	0x40010400
 800d2a8:	40014000 	.word	0x40014000
 800d2ac:	40014400 	.word	0x40014400
 800d2b0:	40014800 	.word	0x40014800

0800d2b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b087      	sub	sp, #28
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6a1b      	ldr	r3, [r3, #32]
 800d2c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a1b      	ldr	r3, [r3, #32]
 800d2ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d2dc:	68fa      	ldr	r2, [r7, #12]
 800d2de:	4b21      	ldr	r3, [pc, #132]	; (800d364 <TIM_OC5_SetConfig+0xb0>)
 800d2e0:	4013      	ands	r3, r2
 800d2e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d2f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	041b      	lsls	r3, r3, #16
 800d2fc:	693a      	ldr	r2, [r7, #16]
 800d2fe:	4313      	orrs	r3, r2
 800d300:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4a18      	ldr	r2, [pc, #96]	; (800d368 <TIM_OC5_SetConfig+0xb4>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d00f      	beq.n	800d32a <TIM_OC5_SetConfig+0x76>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4a17      	ldr	r2, [pc, #92]	; (800d36c <TIM_OC5_SetConfig+0xb8>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d00b      	beq.n	800d32a <TIM_OC5_SetConfig+0x76>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4a16      	ldr	r2, [pc, #88]	; (800d370 <TIM_OC5_SetConfig+0xbc>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d007      	beq.n	800d32a <TIM_OC5_SetConfig+0x76>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4a15      	ldr	r2, [pc, #84]	; (800d374 <TIM_OC5_SetConfig+0xc0>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d003      	beq.n	800d32a <TIM_OC5_SetConfig+0x76>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	4a14      	ldr	r2, [pc, #80]	; (800d378 <TIM_OC5_SetConfig+0xc4>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d109      	bne.n	800d33e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d330:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	695b      	ldr	r3, [r3, #20]
 800d336:	021b      	lsls	r3, r3, #8
 800d338:	697a      	ldr	r2, [r7, #20]
 800d33a:	4313      	orrs	r3, r2
 800d33c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	697a      	ldr	r2, [r7, #20]
 800d342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	68fa      	ldr	r2, [r7, #12]
 800d348:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	685a      	ldr	r2, [r3, #4]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	693a      	ldr	r2, [r7, #16]
 800d356:	621a      	str	r2, [r3, #32]
}
 800d358:	bf00      	nop
 800d35a:	371c      	adds	r7, #28
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr
 800d364:	fffeff8f 	.word	0xfffeff8f
 800d368:	40010000 	.word	0x40010000
 800d36c:	40010400 	.word	0x40010400
 800d370:	40014000 	.word	0x40014000
 800d374:	40014400 	.word	0x40014400
 800d378:	40014800 	.word	0x40014800

0800d37c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b087      	sub	sp, #28
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6a1b      	ldr	r3, [r3, #32]
 800d396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	4b22      	ldr	r3, [pc, #136]	; (800d430 <TIM_OC6_SetConfig+0xb4>)
 800d3a8:	4013      	ands	r3, r2
 800d3aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	021b      	lsls	r3, r3, #8
 800d3b2:	68fa      	ldr	r2, [r7, #12]
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d3be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	051b      	lsls	r3, r3, #20
 800d3c6:	693a      	ldr	r2, [r7, #16]
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	4a19      	ldr	r2, [pc, #100]	; (800d434 <TIM_OC6_SetConfig+0xb8>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d00f      	beq.n	800d3f4 <TIM_OC6_SetConfig+0x78>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	4a18      	ldr	r2, [pc, #96]	; (800d438 <TIM_OC6_SetConfig+0xbc>)
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d00b      	beq.n	800d3f4 <TIM_OC6_SetConfig+0x78>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	4a17      	ldr	r2, [pc, #92]	; (800d43c <TIM_OC6_SetConfig+0xc0>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d007      	beq.n	800d3f4 <TIM_OC6_SetConfig+0x78>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	4a16      	ldr	r2, [pc, #88]	; (800d440 <TIM_OC6_SetConfig+0xc4>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d003      	beq.n	800d3f4 <TIM_OC6_SetConfig+0x78>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	4a15      	ldr	r2, [pc, #84]	; (800d444 <TIM_OC6_SetConfig+0xc8>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d109      	bne.n	800d408 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d3fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	695b      	ldr	r3, [r3, #20]
 800d400:	029b      	lsls	r3, r3, #10
 800d402:	697a      	ldr	r2, [r7, #20]
 800d404:	4313      	orrs	r3, r2
 800d406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	685a      	ldr	r2, [r3, #4]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	693a      	ldr	r2, [r7, #16]
 800d420:	621a      	str	r2, [r3, #32]
}
 800d422:	bf00      	nop
 800d424:	371c      	adds	r7, #28
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	feff8fff 	.word	0xfeff8fff
 800d434:	40010000 	.word	0x40010000
 800d438:	40010400 	.word	0x40010400
 800d43c:	40014000 	.word	0x40014000
 800d440:	40014400 	.word	0x40014400
 800d444:	40014800 	.word	0x40014800

0800d448 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d448:	b480      	push	{r7}
 800d44a:	b087      	sub	sp, #28
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	f003 031f 	and.w	r3, r3, #31
 800d45a:	2201      	movs	r2, #1
 800d45c:	fa02 f303 	lsl.w	r3, r2, r3
 800d460:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	6a1a      	ldr	r2, [r3, #32]
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	43db      	mvns	r3, r3
 800d46a:	401a      	ands	r2, r3
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	6a1a      	ldr	r2, [r3, #32]
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	f003 031f 	and.w	r3, r3, #31
 800d47a:	6879      	ldr	r1, [r7, #4]
 800d47c:	fa01 f303 	lsl.w	r3, r1, r3
 800d480:	431a      	orrs	r2, r3
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	621a      	str	r2, [r3, #32]
}
 800d486:	bf00      	nop
 800d488:	371c      	adds	r7, #28
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
	...

0800d494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d494:	b480      	push	{r7}
 800d496:	b085      	sub	sp, #20
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d101      	bne.n	800d4ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d4a8:	2302      	movs	r3, #2
 800d4aa:	e06d      	b.n	800d588 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2202      	movs	r2, #2
 800d4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a30      	ldr	r2, [pc, #192]	; (800d594 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d004      	beq.n	800d4e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a2f      	ldr	r2, [pc, #188]	; (800d598 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d108      	bne.n	800d4f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d4e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	68fa      	ldr	r2, [r7, #12]
 800d500:	4313      	orrs	r3, r2
 800d502:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a20      	ldr	r2, [pc, #128]	; (800d594 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d022      	beq.n	800d55c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d51e:	d01d      	beq.n	800d55c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a1d      	ldr	r2, [pc, #116]	; (800d59c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d018      	beq.n	800d55c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a1c      	ldr	r2, [pc, #112]	; (800d5a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d013      	beq.n	800d55c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a1a      	ldr	r2, [pc, #104]	; (800d5a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d00e      	beq.n	800d55c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a15      	ldr	r2, [pc, #84]	; (800d598 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d009      	beq.n	800d55c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a16      	ldr	r2, [pc, #88]	; (800d5a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d004      	beq.n	800d55c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a15      	ldr	r2, [pc, #84]	; (800d5ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d10c      	bne.n	800d576 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d562:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	689b      	ldr	r3, [r3, #8]
 800d568:	68ba      	ldr	r2, [r7, #8]
 800d56a:	4313      	orrs	r3, r2
 800d56c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	68ba      	ldr	r2, [r7, #8]
 800d574:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3714      	adds	r7, #20
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr
 800d594:	40010000 	.word	0x40010000
 800d598:	40010400 	.word	0x40010400
 800d59c:	40000400 	.word	0x40000400
 800d5a0:	40000800 	.word	0x40000800
 800d5a4:	40000c00 	.word	0x40000c00
 800d5a8:	40001800 	.word	0x40001800
 800d5ac:	40014000 	.word	0x40014000

0800d5b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d101      	bne.n	800d5cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d5c8:	2302      	movs	r3, #2
 800d5ca:	e065      	b.n	800d698 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	689b      	ldr	r3, [r3, #8]
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4313      	orrs	r3, r2
 800d60a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	4313      	orrs	r3, r2
 800d618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	695b      	ldr	r3, [r3, #20]
 800d624:	4313      	orrs	r3, r2
 800d626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d632:	4313      	orrs	r3, r2
 800d634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	699b      	ldr	r3, [r3, #24]
 800d640:	041b      	lsls	r3, r3, #16
 800d642:	4313      	orrs	r3, r2
 800d644:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a16      	ldr	r2, [pc, #88]	; (800d6a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d004      	beq.n	800d65a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a14      	ldr	r2, [pc, #80]	; (800d6a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d115      	bne.n	800d686 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d664:	051b      	lsls	r3, r3, #20
 800d666:	4313      	orrs	r3, r2
 800d668:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	69db      	ldr	r3, [r3, #28]
 800d674:	4313      	orrs	r3, r2
 800d676:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	4313      	orrs	r3, r2
 800d684:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	68fa      	ldr	r2, [r7, #12]
 800d68c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2200      	movs	r2, #0
 800d692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3714      	adds	r7, #20
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr
 800d6a4:	40010000 	.word	0x40010000
 800d6a8:	40010400 	.word	0x40010400

0800d6ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d6b4:	bf00      	nop
 800d6b6:	370c      	adds	r7, #12
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d6c8:	bf00      	nop
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d6dc:	bf00      	nop
 800d6de:	370c      	adds	r7, #12
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d101      	bne.n	800d6fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e042      	b.n	800d780 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d700:	2b00      	cmp	r3, #0
 800d702:	d106      	bne.n	800d712 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f7f4 ff89 	bl	8002624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2224      	movs	r2, #36	; 0x24
 800d716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f022 0201 	bic.w	r2, r2, #1
 800d728:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f000 fcd6 	bl	800e0dc <UART_SetConfig>
 800d730:	4603      	mov	r3, r0
 800d732:	2b01      	cmp	r3, #1
 800d734:	d101      	bne.n	800d73a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d736:	2301      	movs	r3, #1
 800d738:	e022      	b.n	800d780 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d002      	beq.n	800d748 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f001 fa32 	bl	800ebac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	685a      	ldr	r2, [r3, #4]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	689a      	ldr	r2, [r3, #8]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	681a      	ldr	r2, [r3, #0]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f042 0201 	orr.w	r2, r2, #1
 800d776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f001 fab9 	bl	800ecf0 <UART_CheckIdleState>
 800d77e:	4603      	mov	r3, r0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b08a      	sub	sp, #40	; 0x28
 800d78c:	af02      	add	r7, sp, #8
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	60b9      	str	r1, [r7, #8]
 800d792:	603b      	str	r3, [r7, #0]
 800d794:	4613      	mov	r3, r2
 800d796:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d79e:	2b20      	cmp	r3, #32
 800d7a0:	f040 8083 	bne.w	800d8aa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d002      	beq.n	800d7b0 <HAL_UART_Transmit+0x28>
 800d7aa:	88fb      	ldrh	r3, [r7, #6]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d101      	bne.n	800d7b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e07b      	b.n	800d8ac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d101      	bne.n	800d7c2 <HAL_UART_Transmit+0x3a>
 800d7be:	2302      	movs	r3, #2
 800d7c0:	e074      	b.n	800d8ac <HAL_UART_Transmit+0x124>
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2221      	movs	r2, #33	; 0x21
 800d7d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d7da:	f7f5 f943 	bl	8002a64 <HAL_GetTick>
 800d7de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	88fa      	ldrh	r2, [r7, #6]
 800d7e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	88fa      	ldrh	r2, [r7, #6]
 800d7ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	689b      	ldr	r3, [r3, #8]
 800d7f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7f8:	d108      	bne.n	800d80c <HAL_UART_Transmit+0x84>
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	691b      	ldr	r3, [r3, #16]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d104      	bne.n	800d80c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d802:	2300      	movs	r3, #0
 800d804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	61bb      	str	r3, [r7, #24]
 800d80a:	e003      	b.n	800d814 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d810:	2300      	movs	r3, #0
 800d812:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d81c:	e02c      	b.n	800d878 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	9300      	str	r3, [sp, #0]
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	2200      	movs	r2, #0
 800d826:	2180      	movs	r1, #128	; 0x80
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f001 faac 	bl	800ed86 <UART_WaitOnFlagUntilTimeout>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d001      	beq.n	800d838 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d834:	2303      	movs	r3, #3
 800d836:	e039      	b.n	800d8ac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d838:	69fb      	ldr	r3, [r7, #28]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d10b      	bne.n	800d856 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	881b      	ldrh	r3, [r3, #0]
 800d842:	461a      	mov	r2, r3
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d84c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	3302      	adds	r3, #2
 800d852:	61bb      	str	r3, [r7, #24]
 800d854:	e007      	b.n	800d866 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	781a      	ldrb	r2, [r3, #0]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	3301      	adds	r3, #1
 800d864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	3b01      	subs	r3, #1
 800d870:	b29a      	uxth	r2, r3
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d87e:	b29b      	uxth	r3, r3
 800d880:	2b00      	cmp	r3, #0
 800d882:	d1cc      	bne.n	800d81e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	2200      	movs	r2, #0
 800d88c:	2140      	movs	r1, #64	; 0x40
 800d88e:	68f8      	ldr	r0, [r7, #12]
 800d890:	f001 fa79 	bl	800ed86 <UART_WaitOnFlagUntilTimeout>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d89a:	2303      	movs	r3, #3
 800d89c:	e006      	b.n	800d8ac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2220      	movs	r2, #32
 800d8a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	e000      	b.n	800d8ac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d8aa:	2302      	movs	r3, #2
  }
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3720      	adds	r7, #32
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b08a      	sub	sp, #40	; 0x28
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8c8:	2b20      	cmp	r3, #32
 800d8ca:	d142      	bne.n	800d952 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d002      	beq.n	800d8d8 <HAL_UART_Receive_IT+0x24>
 800d8d2:	88fb      	ldrh	r3, [r7, #6]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e03b      	b.n	800d954 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d101      	bne.n	800d8ea <HAL_UART_Receive_IT+0x36>
 800d8e6:	2302      	movs	r3, #2
 800d8e8:	e034      	b.n	800d954 <HAL_UART_Receive_IT+0xa0>
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a17      	ldr	r2, [pc, #92]	; (800d95c <HAL_UART_Receive_IT+0xa8>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d01f      	beq.n	800d942 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d018      	beq.n	800d942 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	e853 3f00 	ldrex	r3, [r3]
 800d91c:	613b      	str	r3, [r7, #16]
   return(result);
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d924:	627b      	str	r3, [r7, #36]	; 0x24
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	461a      	mov	r2, r3
 800d92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92e:	623b      	str	r3, [r7, #32]
 800d930:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d932:	69f9      	ldr	r1, [r7, #28]
 800d934:	6a3a      	ldr	r2, [r7, #32]
 800d936:	e841 2300 	strex	r3, r2, [r1]
 800d93a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d1e6      	bne.n	800d910 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d942:	88fb      	ldrh	r3, [r7, #6]
 800d944:	461a      	mov	r2, r3
 800d946:	68b9      	ldr	r1, [r7, #8]
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f001 fae5 	bl	800ef18 <UART_Start_Receive_IT>
 800d94e:	4603      	mov	r3, r0
 800d950:	e000      	b.n	800d954 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d952:	2302      	movs	r3, #2
  }
}
 800d954:	4618      	mov	r0, r3
 800d956:	3728      	adds	r7, #40	; 0x28
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	58000c00 	.word	0x58000c00

0800d960 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b0ba      	sub	sp, #232	; 0xe8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	69db      	ldr	r3, [r3, #28]
 800d96e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	689b      	ldr	r3, [r3, #8]
 800d982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d986:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d98a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d98e:	4013      	ands	r3, r2
 800d990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d11b      	bne.n	800d9d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9a0:	f003 0320 	and.w	r3, r3, #32
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d015      	beq.n	800d9d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9ac:	f003 0320 	and.w	r3, r3, #32
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d105      	bne.n	800d9c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d9b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d009      	beq.n	800d9d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f000 835a 	beq.w	800e07e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	4798      	blx	r3
      }
      return;
 800d9d2:	e354      	b.n	800e07e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d9d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 811f 	beq.w	800dc1c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d9de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d9e2:	4b8b      	ldr	r3, [pc, #556]	; (800dc10 <HAL_UART_IRQHandler+0x2b0>)
 800d9e4:	4013      	ands	r3, r2
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d106      	bne.n	800d9f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d9ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d9ee:	4b89      	ldr	r3, [pc, #548]	; (800dc14 <HAL_UART_IRQHandler+0x2b4>)
 800d9f0:	4013      	ands	r3, r2
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	f000 8112 	beq.w	800dc1c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9fc:	f003 0301 	and.w	r3, r3, #1
 800da00:	2b00      	cmp	r3, #0
 800da02:	d011      	beq.n	800da28 <HAL_UART_IRQHandler+0xc8>
 800da04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00b      	beq.n	800da28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2201      	movs	r2, #1
 800da16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da1e:	f043 0201 	orr.w	r2, r3, #1
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da2c:	f003 0302 	and.w	r3, r3, #2
 800da30:	2b00      	cmp	r3, #0
 800da32:	d011      	beq.n	800da58 <HAL_UART_IRQHandler+0xf8>
 800da34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da38:	f003 0301 	and.w	r3, r3, #1
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00b      	beq.n	800da58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2202      	movs	r2, #2
 800da46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da4e:	f043 0204 	orr.w	r2, r3, #4
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da5c:	f003 0304 	and.w	r3, r3, #4
 800da60:	2b00      	cmp	r3, #0
 800da62:	d011      	beq.n	800da88 <HAL_UART_IRQHandler+0x128>
 800da64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da68:	f003 0301 	and.w	r3, r3, #1
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d00b      	beq.n	800da88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2204      	movs	r2, #4
 800da76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da7e:	f043 0202 	orr.w	r2, r3, #2
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800da88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da8c:	f003 0308 	and.w	r3, r3, #8
 800da90:	2b00      	cmp	r3, #0
 800da92:	d017      	beq.n	800dac4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800da94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da98:	f003 0320 	and.w	r3, r3, #32
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d105      	bne.n	800daac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800daa0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800daa4:	4b5a      	ldr	r3, [pc, #360]	; (800dc10 <HAL_UART_IRQHandler+0x2b0>)
 800daa6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d00b      	beq.n	800dac4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2208      	movs	r2, #8
 800dab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800daba:	f043 0208 	orr.w	r2, r3, #8
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d012      	beq.n	800daf6 <HAL_UART_IRQHandler+0x196>
 800dad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dad4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d00c      	beq.n	800daf6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dae4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800daec:	f043 0220 	orr.w	r2, r3, #32
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	f000 82c0 	beq.w	800e082 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800db02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db06:	f003 0320 	and.w	r3, r3, #32
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d013      	beq.n	800db36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800db0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db12:	f003 0320 	and.w	r3, r3, #32
 800db16:	2b00      	cmp	r3, #0
 800db18:	d105      	bne.n	800db26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800db1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db22:	2b00      	cmp	r3, #0
 800db24:	d007      	beq.n	800db36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d003      	beq.n	800db36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	689b      	ldr	r3, [r3, #8]
 800db46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db4a:	2b40      	cmp	r3, #64	; 0x40
 800db4c:	d005      	beq.n	800db5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800db4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db56:	2b00      	cmp	r3, #0
 800db58:	d04f      	beq.n	800dbfa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f001 fb06 	bl	800f16c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	689b      	ldr	r3, [r3, #8]
 800db66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db6a:	2b40      	cmp	r3, #64	; 0x40
 800db6c:	d141      	bne.n	800dbf2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	3308      	adds	r3, #8
 800db74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db7c:	e853 3f00 	ldrex	r3, [r3]
 800db80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800db84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	3308      	adds	r3, #8
 800db96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800db9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800db9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dba6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dbaa:	e841 2300 	strex	r3, r2, [r1]
 800dbae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dbb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1d9      	bne.n	800db6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d013      	beq.n	800dbea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbc6:	4a14      	ldr	r2, [pc, #80]	; (800dc18 <HAL_UART_IRQHandler+0x2b8>)
 800dbc8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7f8 f88a 	bl	8005ce8 <HAL_DMA_Abort_IT>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d017      	beq.n	800dc0a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbe8:	e00f      	b.n	800dc0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 fa60 	bl	800e0b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbf0:	e00b      	b.n	800dc0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 fa5c 	bl	800e0b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbf8:	e007      	b.n	800dc0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 fa58 	bl	800e0b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800dc08:	e23b      	b.n	800e082 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc0a:	bf00      	nop
    return;
 800dc0c:	e239      	b.n	800e082 <HAL_UART_IRQHandler+0x722>
 800dc0e:	bf00      	nop
 800dc10:	10000001 	.word	0x10000001
 800dc14:	04000120 	.word	0x04000120
 800dc18:	0800f239 	.word	0x0800f239

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	f040 81ce 	bne.w	800dfc2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dc26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc2a:	f003 0310 	and.w	r3, r3, #16
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	f000 81c7 	beq.w	800dfc2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dc34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc38:	f003 0310 	and.w	r3, r3, #16
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	f000 81c0 	beq.w	800dfc2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2210      	movs	r2, #16
 800dc48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc54:	2b40      	cmp	r3, #64	; 0x40
 800dc56:	f040 813b 	bne.w	800ded0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4a8b      	ldr	r2, [pc, #556]	; (800de90 <HAL_UART_IRQHandler+0x530>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d059      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a89      	ldr	r2, [pc, #548]	; (800de94 <HAL_UART_IRQHandler+0x534>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d053      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a87      	ldr	r2, [pc, #540]	; (800de98 <HAL_UART_IRQHandler+0x538>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d04d      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a85      	ldr	r2, [pc, #532]	; (800de9c <HAL_UART_IRQHandler+0x53c>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d047      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a83      	ldr	r2, [pc, #524]	; (800dea0 <HAL_UART_IRQHandler+0x540>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d041      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a81      	ldr	r2, [pc, #516]	; (800dea4 <HAL_UART_IRQHandler+0x544>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d03b      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a7f      	ldr	r2, [pc, #508]	; (800dea8 <HAL_UART_IRQHandler+0x548>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d035      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a7d      	ldr	r2, [pc, #500]	; (800deac <HAL_UART_IRQHandler+0x54c>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d02f      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a7b      	ldr	r2, [pc, #492]	; (800deb0 <HAL_UART_IRQHandler+0x550>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d029      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a79      	ldr	r2, [pc, #484]	; (800deb4 <HAL_UART_IRQHandler+0x554>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d023      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4a77      	ldr	r2, [pc, #476]	; (800deb8 <HAL_UART_IRQHandler+0x558>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d01d      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a75      	ldr	r2, [pc, #468]	; (800debc <HAL_UART_IRQHandler+0x55c>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d017      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a73      	ldr	r2, [pc, #460]	; (800dec0 <HAL_UART_IRQHandler+0x560>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d011      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a71      	ldr	r2, [pc, #452]	; (800dec4 <HAL_UART_IRQHandler+0x564>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d00b      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a6f      	ldr	r2, [pc, #444]	; (800dec8 <HAL_UART_IRQHandler+0x568>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d005      	beq.n	800dd1a <HAL_UART_IRQHandler+0x3ba>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a6d      	ldr	r2, [pc, #436]	; (800decc <HAL_UART_IRQHandler+0x56c>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d105      	bne.n	800dd26 <HAL_UART_IRQHandler+0x3c6>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	e004      	b.n	800dd30 <HAL_UART_IRQHandler+0x3d0>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dd34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f000 81a4 	beq.w	800e086 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	f080 819c 	bcs.w	800e086 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd5c:	69db      	ldr	r3, [r3, #28]
 800dd5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd62:	f000 8086 	beq.w	800de72 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd72:	e853 3f00 	ldrex	r3, [r3]
 800dd76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dd7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dd90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dd94:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd98:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dd9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dda0:	e841 2300 	strex	r3, r2, [r1]
 800dda4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dda8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d1da      	bne.n	800dd66 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	3308      	adds	r3, #8
 800ddb6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddba:	e853 3f00 	ldrex	r3, [r3]
 800ddbe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ddc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ddc2:	f023 0301 	bic.w	r3, r3, #1
 800ddc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3308      	adds	r3, #8
 800ddd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ddd4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ddd8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddda:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dddc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dde0:	e841 2300 	strex	r3, r2, [r1]
 800dde4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dde6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1e1      	bne.n	800ddb0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	3308      	adds	r3, #8
 800ddf2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddf6:	e853 3f00 	ldrex	r3, [r3]
 800ddfa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ddfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	3308      	adds	r3, #8
 800de0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800de10:	66fa      	str	r2, [r7, #108]	; 0x6c
 800de12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800de16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800de18:	e841 2300 	strex	r3, r2, [r1]
 800de1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800de1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1e3      	bne.n	800ddec <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2220      	movs	r2, #32
 800de28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de3a:	e853 3f00 	ldrex	r3, [r3]
 800de3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800de40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de42:	f023 0310 	bic.w	r3, r3, #16
 800de46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	461a      	mov	r2, r3
 800de50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de54:	65bb      	str	r3, [r7, #88]	; 0x58
 800de56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de5c:	e841 2300 	strex	r3, r2, [r1]
 800de60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800de62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de64:	2b00      	cmp	r3, #0
 800de66:	d1e4      	bne.n	800de32 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7f7 fc1d 	bl	80056ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de7e:	b29b      	uxth	r3, r3
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	b29b      	uxth	r3, r3
 800de84:	4619      	mov	r1, r3
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 f91c 	bl	800e0c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800de8c:	e0fb      	b.n	800e086 <HAL_UART_IRQHandler+0x726>
 800de8e:	bf00      	nop
 800de90:	40020010 	.word	0x40020010
 800de94:	40020028 	.word	0x40020028
 800de98:	40020040 	.word	0x40020040
 800de9c:	40020058 	.word	0x40020058
 800dea0:	40020070 	.word	0x40020070
 800dea4:	40020088 	.word	0x40020088
 800dea8:	400200a0 	.word	0x400200a0
 800deac:	400200b8 	.word	0x400200b8
 800deb0:	40020410 	.word	0x40020410
 800deb4:	40020428 	.word	0x40020428
 800deb8:	40020440 	.word	0x40020440
 800debc:	40020458 	.word	0x40020458
 800dec0:	40020470 	.word	0x40020470
 800dec4:	40020488 	.word	0x40020488
 800dec8:	400204a0 	.word	0x400204a0
 800decc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dedc:	b29b      	uxth	r3, r3
 800dede:	1ad3      	subs	r3, r2, r3
 800dee0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800deea:	b29b      	uxth	r3, r3
 800deec:	2b00      	cmp	r3, #0
 800deee:	f000 80cc 	beq.w	800e08a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800def2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800def6:	2b00      	cmp	r3, #0
 800def8:	f000 80c7 	beq.w	800e08a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df04:	e853 3f00 	ldrex	r3, [r3]
 800df08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800df0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	461a      	mov	r2, r3
 800df1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800df1e:	647b      	str	r3, [r7, #68]	; 0x44
 800df20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800df24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df26:	e841 2300 	strex	r3, r2, [r1]
 800df2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800df2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1e4      	bne.n	800defc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	3308      	adds	r3, #8
 800df38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	e853 3f00 	ldrex	r3, [r3]
 800df40:	623b      	str	r3, [r7, #32]
   return(result);
 800df42:	6a3a      	ldr	r2, [r7, #32]
 800df44:	4b54      	ldr	r3, [pc, #336]	; (800e098 <HAL_UART_IRQHandler+0x738>)
 800df46:	4013      	ands	r3, r2
 800df48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	3308      	adds	r3, #8
 800df52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800df56:	633a      	str	r2, [r7, #48]	; 0x30
 800df58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df5e:	e841 2300 	strex	r3, r2, [r1]
 800df62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800df64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df66:	2b00      	cmp	r3, #0
 800df68:	d1e3      	bne.n	800df32 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2220      	movs	r2, #32
 800df6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	e853 3f00 	ldrex	r3, [r3]
 800df8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f023 0310 	bic.w	r3, r3, #16
 800df92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	461a      	mov	r2, r3
 800df9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dfa0:	61fb      	str	r3, [r7, #28]
 800dfa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa4:	69b9      	ldr	r1, [r7, #24]
 800dfa6:	69fa      	ldr	r2, [r7, #28]
 800dfa8:	e841 2300 	strex	r3, r2, [r1]
 800dfac:	617b      	str	r3, [r7, #20]
   return(result);
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1e4      	bne.n	800df7e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dfb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dfb8:	4619      	mov	r1, r3
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 f882 	bl	800e0c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dfc0:	e063      	b.n	800e08a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dfc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d00e      	beq.n	800dfec <HAL_UART_IRQHandler+0x68c>
 800dfce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d008      	beq.n	800dfec <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dfe2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f001 fdc5 	bl	800fb74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dfea:	e051      	b.n	800e090 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dfec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d014      	beq.n	800e022 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e000:	2b00      	cmp	r3, #0
 800e002:	d105      	bne.n	800e010 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d008      	beq.n	800e022 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e014:	2b00      	cmp	r3, #0
 800e016:	d03a      	beq.n	800e08e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	4798      	blx	r3
    }
    return;
 800e020:	e035      	b.n	800e08e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d009      	beq.n	800e042 <HAL_UART_IRQHandler+0x6e2>
 800e02e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e036:	2b00      	cmp	r3, #0
 800e038:	d003      	beq.n	800e042 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f001 f912 	bl	800f264 <UART_EndTransmit_IT>
    return;
 800e040:	e026      	b.n	800e090 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d009      	beq.n	800e062 <HAL_UART_IRQHandler+0x702>
 800e04e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e052:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e056:	2b00      	cmp	r3, #0
 800e058:	d003      	beq.n	800e062 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f001 fd9e 	bl	800fb9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e060:	e016      	b.n	800e090 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d010      	beq.n	800e090 <HAL_UART_IRQHandler+0x730>
 800e06e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e072:	2b00      	cmp	r3, #0
 800e074:	da0c      	bge.n	800e090 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f001 fd86 	bl	800fb88 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e07c:	e008      	b.n	800e090 <HAL_UART_IRQHandler+0x730>
      return;
 800e07e:	bf00      	nop
 800e080:	e006      	b.n	800e090 <HAL_UART_IRQHandler+0x730>
    return;
 800e082:	bf00      	nop
 800e084:	e004      	b.n	800e090 <HAL_UART_IRQHandler+0x730>
      return;
 800e086:	bf00      	nop
 800e088:	e002      	b.n	800e090 <HAL_UART_IRQHandler+0x730>
      return;
 800e08a:	bf00      	nop
 800e08c:	e000      	b.n	800e090 <HAL_UART_IRQHandler+0x730>
    return;
 800e08e:	bf00      	nop
  }
}
 800e090:	37e8      	adds	r7, #232	; 0xe8
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	effffffe 	.word	0xeffffffe

0800e09c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e0a4:	bf00      	nop
 800e0a6:	370c      	adds	r7, #12
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b083      	sub	sp, #12
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e0b8:	bf00      	nop
 800e0ba:	370c      	adds	r7, #12
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr

0800e0c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e0d0:	bf00      	nop
 800e0d2:	370c      	adds	r7, #12
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e0dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0e0:	b092      	sub	sp, #72	; 0x48
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	689a      	ldr	r2, [r3, #8]
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	691b      	ldr	r3, [r3, #16]
 800e0f4:	431a      	orrs	r2, r3
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	695b      	ldr	r3, [r3, #20]
 800e0fa:	431a      	orrs	r2, r3
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	69db      	ldr	r3, [r3, #28]
 800e100:	4313      	orrs	r3, r2
 800e102:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	4bbe      	ldr	r3, [pc, #760]	; (800e404 <UART_SetConfig+0x328>)
 800e10c:	4013      	ands	r3, r2
 800e10e:	697a      	ldr	r2, [r7, #20]
 800e110:	6812      	ldr	r2, [r2, #0]
 800e112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e114:	430b      	orrs	r3, r1
 800e116:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	68da      	ldr	r2, [r3, #12]
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	430a      	orrs	r2, r1
 800e12c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	699b      	ldr	r3, [r3, #24]
 800e132:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4ab3      	ldr	r2, [pc, #716]	; (800e408 <UART_SetConfig+0x32c>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d004      	beq.n	800e148 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	6a1b      	ldr	r3, [r3, #32]
 800e142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e144:	4313      	orrs	r3, r2
 800e146:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	689a      	ldr	r2, [r3, #8]
 800e14e:	4baf      	ldr	r3, [pc, #700]	; (800e40c <UART_SetConfig+0x330>)
 800e150:	4013      	ands	r3, r2
 800e152:	697a      	ldr	r2, [r7, #20]
 800e154:	6812      	ldr	r2, [r2, #0]
 800e156:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e158:	430b      	orrs	r3, r1
 800e15a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e162:	f023 010f 	bic.w	r1, r3, #15
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	430a      	orrs	r2, r1
 800e170:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4aa6      	ldr	r2, [pc, #664]	; (800e410 <UART_SetConfig+0x334>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d177      	bne.n	800e26c <UART_SetConfig+0x190>
 800e17c:	4ba5      	ldr	r3, [pc, #660]	; (800e414 <UART_SetConfig+0x338>)
 800e17e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e180:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e184:	2b28      	cmp	r3, #40	; 0x28
 800e186:	d86d      	bhi.n	800e264 <UART_SetConfig+0x188>
 800e188:	a201      	add	r2, pc, #4	; (adr r2, 800e190 <UART_SetConfig+0xb4>)
 800e18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e18e:	bf00      	nop
 800e190:	0800e235 	.word	0x0800e235
 800e194:	0800e265 	.word	0x0800e265
 800e198:	0800e265 	.word	0x0800e265
 800e19c:	0800e265 	.word	0x0800e265
 800e1a0:	0800e265 	.word	0x0800e265
 800e1a4:	0800e265 	.word	0x0800e265
 800e1a8:	0800e265 	.word	0x0800e265
 800e1ac:	0800e265 	.word	0x0800e265
 800e1b0:	0800e23d 	.word	0x0800e23d
 800e1b4:	0800e265 	.word	0x0800e265
 800e1b8:	0800e265 	.word	0x0800e265
 800e1bc:	0800e265 	.word	0x0800e265
 800e1c0:	0800e265 	.word	0x0800e265
 800e1c4:	0800e265 	.word	0x0800e265
 800e1c8:	0800e265 	.word	0x0800e265
 800e1cc:	0800e265 	.word	0x0800e265
 800e1d0:	0800e245 	.word	0x0800e245
 800e1d4:	0800e265 	.word	0x0800e265
 800e1d8:	0800e265 	.word	0x0800e265
 800e1dc:	0800e265 	.word	0x0800e265
 800e1e0:	0800e265 	.word	0x0800e265
 800e1e4:	0800e265 	.word	0x0800e265
 800e1e8:	0800e265 	.word	0x0800e265
 800e1ec:	0800e265 	.word	0x0800e265
 800e1f0:	0800e24d 	.word	0x0800e24d
 800e1f4:	0800e265 	.word	0x0800e265
 800e1f8:	0800e265 	.word	0x0800e265
 800e1fc:	0800e265 	.word	0x0800e265
 800e200:	0800e265 	.word	0x0800e265
 800e204:	0800e265 	.word	0x0800e265
 800e208:	0800e265 	.word	0x0800e265
 800e20c:	0800e265 	.word	0x0800e265
 800e210:	0800e255 	.word	0x0800e255
 800e214:	0800e265 	.word	0x0800e265
 800e218:	0800e265 	.word	0x0800e265
 800e21c:	0800e265 	.word	0x0800e265
 800e220:	0800e265 	.word	0x0800e265
 800e224:	0800e265 	.word	0x0800e265
 800e228:	0800e265 	.word	0x0800e265
 800e22c:	0800e265 	.word	0x0800e265
 800e230:	0800e25d 	.word	0x0800e25d
 800e234:	2301      	movs	r3, #1
 800e236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23a:	e222      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e23c:	2304      	movs	r3, #4
 800e23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e242:	e21e      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e244:	2308      	movs	r3, #8
 800e246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24a:	e21a      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e24c:	2310      	movs	r3, #16
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e252:	e216      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e254:	2320      	movs	r3, #32
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25a:	e212      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e25c:	2340      	movs	r3, #64	; 0x40
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e262:	e20e      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e264:	2380      	movs	r3, #128	; 0x80
 800e266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26a:	e20a      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a69      	ldr	r2, [pc, #420]	; (800e418 <UART_SetConfig+0x33c>)
 800e272:	4293      	cmp	r3, r2
 800e274:	d130      	bne.n	800e2d8 <UART_SetConfig+0x1fc>
 800e276:	4b67      	ldr	r3, [pc, #412]	; (800e414 <UART_SetConfig+0x338>)
 800e278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e27a:	f003 0307 	and.w	r3, r3, #7
 800e27e:	2b05      	cmp	r3, #5
 800e280:	d826      	bhi.n	800e2d0 <UART_SetConfig+0x1f4>
 800e282:	a201      	add	r2, pc, #4	; (adr r2, 800e288 <UART_SetConfig+0x1ac>)
 800e284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e288:	0800e2a1 	.word	0x0800e2a1
 800e28c:	0800e2a9 	.word	0x0800e2a9
 800e290:	0800e2b1 	.word	0x0800e2b1
 800e294:	0800e2b9 	.word	0x0800e2b9
 800e298:	0800e2c1 	.word	0x0800e2c1
 800e29c:	0800e2c9 	.word	0x0800e2c9
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2a6:	e1ec      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e2a8:	2304      	movs	r3, #4
 800e2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ae:	e1e8      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e2b0:	2308      	movs	r3, #8
 800e2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2b6:	e1e4      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e2b8:	2310      	movs	r3, #16
 800e2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2be:	e1e0      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e2c0:	2320      	movs	r3, #32
 800e2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2c6:	e1dc      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e2c8:	2340      	movs	r3, #64	; 0x40
 800e2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ce:	e1d8      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e2d0:	2380      	movs	r3, #128	; 0x80
 800e2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2d6:	e1d4      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a4f      	ldr	r2, [pc, #316]	; (800e41c <UART_SetConfig+0x340>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d130      	bne.n	800e344 <UART_SetConfig+0x268>
 800e2e2:	4b4c      	ldr	r3, [pc, #304]	; (800e414 <UART_SetConfig+0x338>)
 800e2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2e6:	f003 0307 	and.w	r3, r3, #7
 800e2ea:	2b05      	cmp	r3, #5
 800e2ec:	d826      	bhi.n	800e33c <UART_SetConfig+0x260>
 800e2ee:	a201      	add	r2, pc, #4	; (adr r2, 800e2f4 <UART_SetConfig+0x218>)
 800e2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f4:	0800e30d 	.word	0x0800e30d
 800e2f8:	0800e315 	.word	0x0800e315
 800e2fc:	0800e31d 	.word	0x0800e31d
 800e300:	0800e325 	.word	0x0800e325
 800e304:	0800e32d 	.word	0x0800e32d
 800e308:	0800e335 	.word	0x0800e335
 800e30c:	2300      	movs	r3, #0
 800e30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e312:	e1b6      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e314:	2304      	movs	r3, #4
 800e316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e31a:	e1b2      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e31c:	2308      	movs	r3, #8
 800e31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e322:	e1ae      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e324:	2310      	movs	r3, #16
 800e326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e32a:	e1aa      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e32c:	2320      	movs	r3, #32
 800e32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e332:	e1a6      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e334:	2340      	movs	r3, #64	; 0x40
 800e336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e33a:	e1a2      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e33c:	2380      	movs	r3, #128	; 0x80
 800e33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e342:	e19e      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4a35      	ldr	r2, [pc, #212]	; (800e420 <UART_SetConfig+0x344>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d130      	bne.n	800e3b0 <UART_SetConfig+0x2d4>
 800e34e:	4b31      	ldr	r3, [pc, #196]	; (800e414 <UART_SetConfig+0x338>)
 800e350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e352:	f003 0307 	and.w	r3, r3, #7
 800e356:	2b05      	cmp	r3, #5
 800e358:	d826      	bhi.n	800e3a8 <UART_SetConfig+0x2cc>
 800e35a:	a201      	add	r2, pc, #4	; (adr r2, 800e360 <UART_SetConfig+0x284>)
 800e35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e360:	0800e379 	.word	0x0800e379
 800e364:	0800e381 	.word	0x0800e381
 800e368:	0800e389 	.word	0x0800e389
 800e36c:	0800e391 	.word	0x0800e391
 800e370:	0800e399 	.word	0x0800e399
 800e374:	0800e3a1 	.word	0x0800e3a1
 800e378:	2300      	movs	r3, #0
 800e37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e37e:	e180      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e380:	2304      	movs	r3, #4
 800e382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e386:	e17c      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e388:	2308      	movs	r3, #8
 800e38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e38e:	e178      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e390:	2310      	movs	r3, #16
 800e392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e396:	e174      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e398:	2320      	movs	r3, #32
 800e39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39e:	e170      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e3a0:	2340      	movs	r3, #64	; 0x40
 800e3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a6:	e16c      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e3a8:	2380      	movs	r3, #128	; 0x80
 800e3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ae:	e168      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a1b      	ldr	r2, [pc, #108]	; (800e424 <UART_SetConfig+0x348>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d142      	bne.n	800e440 <UART_SetConfig+0x364>
 800e3ba:	4b16      	ldr	r3, [pc, #88]	; (800e414 <UART_SetConfig+0x338>)
 800e3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3be:	f003 0307 	and.w	r3, r3, #7
 800e3c2:	2b05      	cmp	r3, #5
 800e3c4:	d838      	bhi.n	800e438 <UART_SetConfig+0x35c>
 800e3c6:	a201      	add	r2, pc, #4	; (adr r2, 800e3cc <UART_SetConfig+0x2f0>)
 800e3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3cc:	0800e3e5 	.word	0x0800e3e5
 800e3d0:	0800e3ed 	.word	0x0800e3ed
 800e3d4:	0800e3f5 	.word	0x0800e3f5
 800e3d8:	0800e3fd 	.word	0x0800e3fd
 800e3dc:	0800e429 	.word	0x0800e429
 800e3e0:	0800e431 	.word	0x0800e431
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ea:	e14a      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e3ec:	2304      	movs	r3, #4
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f2:	e146      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e3f4:	2308      	movs	r3, #8
 800e3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fa:	e142      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e3fc:	2310      	movs	r3, #16
 800e3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e402:	e13e      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e404:	cfff69f3 	.word	0xcfff69f3
 800e408:	58000c00 	.word	0x58000c00
 800e40c:	11fff4ff 	.word	0x11fff4ff
 800e410:	40011000 	.word	0x40011000
 800e414:	58024400 	.word	0x58024400
 800e418:	40004400 	.word	0x40004400
 800e41c:	40004800 	.word	0x40004800
 800e420:	40004c00 	.word	0x40004c00
 800e424:	40005000 	.word	0x40005000
 800e428:	2320      	movs	r3, #32
 800e42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42e:	e128      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e430:	2340      	movs	r3, #64	; 0x40
 800e432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e436:	e124      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e438:	2380      	movs	r3, #128	; 0x80
 800e43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43e:	e120      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4acb      	ldr	r2, [pc, #812]	; (800e774 <UART_SetConfig+0x698>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d176      	bne.n	800e538 <UART_SetConfig+0x45c>
 800e44a:	4bcb      	ldr	r3, [pc, #812]	; (800e778 <UART_SetConfig+0x69c>)
 800e44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e44e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e452:	2b28      	cmp	r3, #40	; 0x28
 800e454:	d86c      	bhi.n	800e530 <UART_SetConfig+0x454>
 800e456:	a201      	add	r2, pc, #4	; (adr r2, 800e45c <UART_SetConfig+0x380>)
 800e458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e45c:	0800e501 	.word	0x0800e501
 800e460:	0800e531 	.word	0x0800e531
 800e464:	0800e531 	.word	0x0800e531
 800e468:	0800e531 	.word	0x0800e531
 800e46c:	0800e531 	.word	0x0800e531
 800e470:	0800e531 	.word	0x0800e531
 800e474:	0800e531 	.word	0x0800e531
 800e478:	0800e531 	.word	0x0800e531
 800e47c:	0800e509 	.word	0x0800e509
 800e480:	0800e531 	.word	0x0800e531
 800e484:	0800e531 	.word	0x0800e531
 800e488:	0800e531 	.word	0x0800e531
 800e48c:	0800e531 	.word	0x0800e531
 800e490:	0800e531 	.word	0x0800e531
 800e494:	0800e531 	.word	0x0800e531
 800e498:	0800e531 	.word	0x0800e531
 800e49c:	0800e511 	.word	0x0800e511
 800e4a0:	0800e531 	.word	0x0800e531
 800e4a4:	0800e531 	.word	0x0800e531
 800e4a8:	0800e531 	.word	0x0800e531
 800e4ac:	0800e531 	.word	0x0800e531
 800e4b0:	0800e531 	.word	0x0800e531
 800e4b4:	0800e531 	.word	0x0800e531
 800e4b8:	0800e531 	.word	0x0800e531
 800e4bc:	0800e519 	.word	0x0800e519
 800e4c0:	0800e531 	.word	0x0800e531
 800e4c4:	0800e531 	.word	0x0800e531
 800e4c8:	0800e531 	.word	0x0800e531
 800e4cc:	0800e531 	.word	0x0800e531
 800e4d0:	0800e531 	.word	0x0800e531
 800e4d4:	0800e531 	.word	0x0800e531
 800e4d8:	0800e531 	.word	0x0800e531
 800e4dc:	0800e521 	.word	0x0800e521
 800e4e0:	0800e531 	.word	0x0800e531
 800e4e4:	0800e531 	.word	0x0800e531
 800e4e8:	0800e531 	.word	0x0800e531
 800e4ec:	0800e531 	.word	0x0800e531
 800e4f0:	0800e531 	.word	0x0800e531
 800e4f4:	0800e531 	.word	0x0800e531
 800e4f8:	0800e531 	.word	0x0800e531
 800e4fc:	0800e529 	.word	0x0800e529
 800e500:	2301      	movs	r3, #1
 800e502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e506:	e0bc      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e508:	2304      	movs	r3, #4
 800e50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50e:	e0b8      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e510:	2308      	movs	r3, #8
 800e512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e516:	e0b4      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e518:	2310      	movs	r3, #16
 800e51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51e:	e0b0      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e520:	2320      	movs	r3, #32
 800e522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e526:	e0ac      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e528:	2340      	movs	r3, #64	; 0x40
 800e52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52e:	e0a8      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e530:	2380      	movs	r3, #128	; 0x80
 800e532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e536:	e0a4      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a8f      	ldr	r2, [pc, #572]	; (800e77c <UART_SetConfig+0x6a0>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d130      	bne.n	800e5a4 <UART_SetConfig+0x4c8>
 800e542:	4b8d      	ldr	r3, [pc, #564]	; (800e778 <UART_SetConfig+0x69c>)
 800e544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e546:	f003 0307 	and.w	r3, r3, #7
 800e54a:	2b05      	cmp	r3, #5
 800e54c:	d826      	bhi.n	800e59c <UART_SetConfig+0x4c0>
 800e54e:	a201      	add	r2, pc, #4	; (adr r2, 800e554 <UART_SetConfig+0x478>)
 800e550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e554:	0800e56d 	.word	0x0800e56d
 800e558:	0800e575 	.word	0x0800e575
 800e55c:	0800e57d 	.word	0x0800e57d
 800e560:	0800e585 	.word	0x0800e585
 800e564:	0800e58d 	.word	0x0800e58d
 800e568:	0800e595 	.word	0x0800e595
 800e56c:	2300      	movs	r3, #0
 800e56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e572:	e086      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e574:	2304      	movs	r3, #4
 800e576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e57a:	e082      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e57c:	2308      	movs	r3, #8
 800e57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e582:	e07e      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e584:	2310      	movs	r3, #16
 800e586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e58a:	e07a      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e58c:	2320      	movs	r3, #32
 800e58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e592:	e076      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e594:	2340      	movs	r3, #64	; 0x40
 800e596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e59a:	e072      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e59c:	2380      	movs	r3, #128	; 0x80
 800e59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5a2:	e06e      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a75      	ldr	r2, [pc, #468]	; (800e780 <UART_SetConfig+0x6a4>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d130      	bne.n	800e610 <UART_SetConfig+0x534>
 800e5ae:	4b72      	ldr	r3, [pc, #456]	; (800e778 <UART_SetConfig+0x69c>)
 800e5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5b2:	f003 0307 	and.w	r3, r3, #7
 800e5b6:	2b05      	cmp	r3, #5
 800e5b8:	d826      	bhi.n	800e608 <UART_SetConfig+0x52c>
 800e5ba:	a201      	add	r2, pc, #4	; (adr r2, 800e5c0 <UART_SetConfig+0x4e4>)
 800e5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c0:	0800e5d9 	.word	0x0800e5d9
 800e5c4:	0800e5e1 	.word	0x0800e5e1
 800e5c8:	0800e5e9 	.word	0x0800e5e9
 800e5cc:	0800e5f1 	.word	0x0800e5f1
 800e5d0:	0800e5f9 	.word	0x0800e5f9
 800e5d4:	0800e601 	.word	0x0800e601
 800e5d8:	2300      	movs	r3, #0
 800e5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5de:	e050      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e5e0:	2304      	movs	r3, #4
 800e5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5e6:	e04c      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e5e8:	2308      	movs	r3, #8
 800e5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ee:	e048      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e5f0:	2310      	movs	r3, #16
 800e5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5f6:	e044      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e5f8:	2320      	movs	r3, #32
 800e5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5fe:	e040      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e600:	2340      	movs	r3, #64	; 0x40
 800e602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e606:	e03c      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e608:	2380      	movs	r3, #128	; 0x80
 800e60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e60e:	e038      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a5b      	ldr	r2, [pc, #364]	; (800e784 <UART_SetConfig+0x6a8>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d130      	bne.n	800e67c <UART_SetConfig+0x5a0>
 800e61a:	4b57      	ldr	r3, [pc, #348]	; (800e778 <UART_SetConfig+0x69c>)
 800e61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e61e:	f003 0307 	and.w	r3, r3, #7
 800e622:	2b05      	cmp	r3, #5
 800e624:	d826      	bhi.n	800e674 <UART_SetConfig+0x598>
 800e626:	a201      	add	r2, pc, #4	; (adr r2, 800e62c <UART_SetConfig+0x550>)
 800e628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e62c:	0800e645 	.word	0x0800e645
 800e630:	0800e64d 	.word	0x0800e64d
 800e634:	0800e655 	.word	0x0800e655
 800e638:	0800e65d 	.word	0x0800e65d
 800e63c:	0800e665 	.word	0x0800e665
 800e640:	0800e66d 	.word	0x0800e66d
 800e644:	2302      	movs	r3, #2
 800e646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e64a:	e01a      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e64c:	2304      	movs	r3, #4
 800e64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e652:	e016      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e654:	2308      	movs	r3, #8
 800e656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e65a:	e012      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e65c:	2310      	movs	r3, #16
 800e65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e662:	e00e      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e664:	2320      	movs	r3, #32
 800e666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e66a:	e00a      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e66c:	2340      	movs	r3, #64	; 0x40
 800e66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e672:	e006      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e674:	2380      	movs	r3, #128	; 0x80
 800e676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67a:	e002      	b.n	800e682 <UART_SetConfig+0x5a6>
 800e67c:	2380      	movs	r3, #128	; 0x80
 800e67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4a3f      	ldr	r2, [pc, #252]	; (800e784 <UART_SetConfig+0x6a8>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	f040 80f8 	bne.w	800e87e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e68e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e692:	2b20      	cmp	r3, #32
 800e694:	dc46      	bgt.n	800e724 <UART_SetConfig+0x648>
 800e696:	2b02      	cmp	r3, #2
 800e698:	f2c0 8082 	blt.w	800e7a0 <UART_SetConfig+0x6c4>
 800e69c:	3b02      	subs	r3, #2
 800e69e:	2b1e      	cmp	r3, #30
 800e6a0:	d87e      	bhi.n	800e7a0 <UART_SetConfig+0x6c4>
 800e6a2:	a201      	add	r2, pc, #4	; (adr r2, 800e6a8 <UART_SetConfig+0x5cc>)
 800e6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6a8:	0800e72b 	.word	0x0800e72b
 800e6ac:	0800e7a1 	.word	0x0800e7a1
 800e6b0:	0800e733 	.word	0x0800e733
 800e6b4:	0800e7a1 	.word	0x0800e7a1
 800e6b8:	0800e7a1 	.word	0x0800e7a1
 800e6bc:	0800e7a1 	.word	0x0800e7a1
 800e6c0:	0800e743 	.word	0x0800e743
 800e6c4:	0800e7a1 	.word	0x0800e7a1
 800e6c8:	0800e7a1 	.word	0x0800e7a1
 800e6cc:	0800e7a1 	.word	0x0800e7a1
 800e6d0:	0800e7a1 	.word	0x0800e7a1
 800e6d4:	0800e7a1 	.word	0x0800e7a1
 800e6d8:	0800e7a1 	.word	0x0800e7a1
 800e6dc:	0800e7a1 	.word	0x0800e7a1
 800e6e0:	0800e753 	.word	0x0800e753
 800e6e4:	0800e7a1 	.word	0x0800e7a1
 800e6e8:	0800e7a1 	.word	0x0800e7a1
 800e6ec:	0800e7a1 	.word	0x0800e7a1
 800e6f0:	0800e7a1 	.word	0x0800e7a1
 800e6f4:	0800e7a1 	.word	0x0800e7a1
 800e6f8:	0800e7a1 	.word	0x0800e7a1
 800e6fc:	0800e7a1 	.word	0x0800e7a1
 800e700:	0800e7a1 	.word	0x0800e7a1
 800e704:	0800e7a1 	.word	0x0800e7a1
 800e708:	0800e7a1 	.word	0x0800e7a1
 800e70c:	0800e7a1 	.word	0x0800e7a1
 800e710:	0800e7a1 	.word	0x0800e7a1
 800e714:	0800e7a1 	.word	0x0800e7a1
 800e718:	0800e7a1 	.word	0x0800e7a1
 800e71c:	0800e7a1 	.word	0x0800e7a1
 800e720:	0800e793 	.word	0x0800e793
 800e724:	2b40      	cmp	r3, #64	; 0x40
 800e726:	d037      	beq.n	800e798 <UART_SetConfig+0x6bc>
 800e728:	e03a      	b.n	800e7a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e72a:	f7fc fbe9 	bl	800af00 <HAL_RCCEx_GetD3PCLK1Freq>
 800e72e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e730:	e03c      	b.n	800e7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e736:	4618      	mov	r0, r3
 800e738:	f7fc fbf8 	bl	800af2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e740:	e034      	b.n	800e7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e742:	f107 0318 	add.w	r3, r7, #24
 800e746:	4618      	mov	r0, r3
 800e748:	f7fc fd44 	bl	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e750:	e02c      	b.n	800e7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e752:	4b09      	ldr	r3, [pc, #36]	; (800e778 <UART_SetConfig+0x69c>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f003 0320 	and.w	r3, r3, #32
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d016      	beq.n	800e78c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e75e:	4b06      	ldr	r3, [pc, #24]	; (800e778 <UART_SetConfig+0x69c>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	08db      	lsrs	r3, r3, #3
 800e764:	f003 0303 	and.w	r3, r3, #3
 800e768:	4a07      	ldr	r2, [pc, #28]	; (800e788 <UART_SetConfig+0x6ac>)
 800e76a:	fa22 f303 	lsr.w	r3, r2, r3
 800e76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e770:	e01c      	b.n	800e7ac <UART_SetConfig+0x6d0>
 800e772:	bf00      	nop
 800e774:	40011400 	.word	0x40011400
 800e778:	58024400 	.word	0x58024400
 800e77c:	40007800 	.word	0x40007800
 800e780:	40007c00 	.word	0x40007c00
 800e784:	58000c00 	.word	0x58000c00
 800e788:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e78c:	4b9d      	ldr	r3, [pc, #628]	; (800ea04 <UART_SetConfig+0x928>)
 800e78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e790:	e00c      	b.n	800e7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e792:	4b9d      	ldr	r3, [pc, #628]	; (800ea08 <UART_SetConfig+0x92c>)
 800e794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e796:	e009      	b.n	800e7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e79e:	e005      	b.n	800e7ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e7aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	f000 81de 	beq.w	800eb70 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b8:	4a94      	ldr	r2, [pc, #592]	; (800ea0c <UART_SetConfig+0x930>)
 800e7ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7c6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	4613      	mov	r3, r2
 800e7ce:	005b      	lsls	r3, r3, #1
 800e7d0:	4413      	add	r3, r2
 800e7d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d305      	bcc.n	800e7e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e7de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d903      	bls.n	800e7ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e7ea:	e1c1      	b.n	800eb70 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	60bb      	str	r3, [r7, #8]
 800e7f2:	60fa      	str	r2, [r7, #12]
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f8:	4a84      	ldr	r2, [pc, #528]	; (800ea0c <UART_SetConfig+0x930>)
 800e7fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	2200      	movs	r2, #0
 800e802:	603b      	str	r3, [r7, #0]
 800e804:	607a      	str	r2, [r7, #4]
 800e806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e80a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e80e:	f7f1 fd63 	bl	80002d8 <__aeabi_uldivmod>
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
 800e816:	4610      	mov	r0, r2
 800e818:	4619      	mov	r1, r3
 800e81a:	f04f 0200 	mov.w	r2, #0
 800e81e:	f04f 0300 	mov.w	r3, #0
 800e822:	020b      	lsls	r3, r1, #8
 800e824:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e828:	0202      	lsls	r2, r0, #8
 800e82a:	6979      	ldr	r1, [r7, #20]
 800e82c:	6849      	ldr	r1, [r1, #4]
 800e82e:	0849      	lsrs	r1, r1, #1
 800e830:	2000      	movs	r0, #0
 800e832:	460c      	mov	r4, r1
 800e834:	4605      	mov	r5, r0
 800e836:	eb12 0804 	adds.w	r8, r2, r4
 800e83a:	eb43 0905 	adc.w	r9, r3, r5
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	2200      	movs	r2, #0
 800e844:	469a      	mov	sl, r3
 800e846:	4693      	mov	fp, r2
 800e848:	4652      	mov	r2, sl
 800e84a:	465b      	mov	r3, fp
 800e84c:	4640      	mov	r0, r8
 800e84e:	4649      	mov	r1, r9
 800e850:	f7f1 fd42 	bl	80002d8 <__aeabi_uldivmod>
 800e854:	4602      	mov	r2, r0
 800e856:	460b      	mov	r3, r1
 800e858:	4613      	mov	r3, r2
 800e85a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e862:	d308      	bcc.n	800e876 <UART_SetConfig+0x79a>
 800e864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e86a:	d204      	bcs.n	800e876 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e872:	60da      	str	r2, [r3, #12]
 800e874:	e17c      	b.n	800eb70 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e876:	2301      	movs	r3, #1
 800e878:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e87c:	e178      	b.n	800eb70 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	69db      	ldr	r3, [r3, #28]
 800e882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e886:	f040 80c5 	bne.w	800ea14 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e88a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e88e:	2b20      	cmp	r3, #32
 800e890:	dc48      	bgt.n	800e924 <UART_SetConfig+0x848>
 800e892:	2b00      	cmp	r3, #0
 800e894:	db7b      	blt.n	800e98e <UART_SetConfig+0x8b2>
 800e896:	2b20      	cmp	r3, #32
 800e898:	d879      	bhi.n	800e98e <UART_SetConfig+0x8b2>
 800e89a:	a201      	add	r2, pc, #4	; (adr r2, 800e8a0 <UART_SetConfig+0x7c4>)
 800e89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a0:	0800e92b 	.word	0x0800e92b
 800e8a4:	0800e933 	.word	0x0800e933
 800e8a8:	0800e98f 	.word	0x0800e98f
 800e8ac:	0800e98f 	.word	0x0800e98f
 800e8b0:	0800e93b 	.word	0x0800e93b
 800e8b4:	0800e98f 	.word	0x0800e98f
 800e8b8:	0800e98f 	.word	0x0800e98f
 800e8bc:	0800e98f 	.word	0x0800e98f
 800e8c0:	0800e94b 	.word	0x0800e94b
 800e8c4:	0800e98f 	.word	0x0800e98f
 800e8c8:	0800e98f 	.word	0x0800e98f
 800e8cc:	0800e98f 	.word	0x0800e98f
 800e8d0:	0800e98f 	.word	0x0800e98f
 800e8d4:	0800e98f 	.word	0x0800e98f
 800e8d8:	0800e98f 	.word	0x0800e98f
 800e8dc:	0800e98f 	.word	0x0800e98f
 800e8e0:	0800e95b 	.word	0x0800e95b
 800e8e4:	0800e98f 	.word	0x0800e98f
 800e8e8:	0800e98f 	.word	0x0800e98f
 800e8ec:	0800e98f 	.word	0x0800e98f
 800e8f0:	0800e98f 	.word	0x0800e98f
 800e8f4:	0800e98f 	.word	0x0800e98f
 800e8f8:	0800e98f 	.word	0x0800e98f
 800e8fc:	0800e98f 	.word	0x0800e98f
 800e900:	0800e98f 	.word	0x0800e98f
 800e904:	0800e98f 	.word	0x0800e98f
 800e908:	0800e98f 	.word	0x0800e98f
 800e90c:	0800e98f 	.word	0x0800e98f
 800e910:	0800e98f 	.word	0x0800e98f
 800e914:	0800e98f 	.word	0x0800e98f
 800e918:	0800e98f 	.word	0x0800e98f
 800e91c:	0800e98f 	.word	0x0800e98f
 800e920:	0800e981 	.word	0x0800e981
 800e924:	2b40      	cmp	r3, #64	; 0x40
 800e926:	d02e      	beq.n	800e986 <UART_SetConfig+0x8aa>
 800e928:	e031      	b.n	800e98e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e92a:	f7fa fea5 	bl	8009678 <HAL_RCC_GetPCLK1Freq>
 800e92e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e930:	e033      	b.n	800e99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e932:	f7fa feb7 	bl	80096a4 <HAL_RCC_GetPCLK2Freq>
 800e936:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e938:	e02f      	b.n	800e99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e93a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e93e:	4618      	mov	r0, r3
 800e940:	f7fc faf4 	bl	800af2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e948:	e027      	b.n	800e99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e94a:	f107 0318 	add.w	r3, r7, #24
 800e94e:	4618      	mov	r0, r3
 800e950:	f7fc fc40 	bl	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e958:	e01f      	b.n	800e99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e95a:	4b2d      	ldr	r3, [pc, #180]	; (800ea10 <UART_SetConfig+0x934>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f003 0320 	and.w	r3, r3, #32
 800e962:	2b00      	cmp	r3, #0
 800e964:	d009      	beq.n	800e97a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e966:	4b2a      	ldr	r3, [pc, #168]	; (800ea10 <UART_SetConfig+0x934>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	08db      	lsrs	r3, r3, #3
 800e96c:	f003 0303 	and.w	r3, r3, #3
 800e970:	4a24      	ldr	r2, [pc, #144]	; (800ea04 <UART_SetConfig+0x928>)
 800e972:	fa22 f303 	lsr.w	r3, r2, r3
 800e976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e978:	e00f      	b.n	800e99a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e97a:	4b22      	ldr	r3, [pc, #136]	; (800ea04 <UART_SetConfig+0x928>)
 800e97c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e97e:	e00c      	b.n	800e99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e980:	4b21      	ldr	r3, [pc, #132]	; (800ea08 <UART_SetConfig+0x92c>)
 800e982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e984:	e009      	b.n	800e99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e98c:	e005      	b.n	800e99a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e98e:	2300      	movs	r3, #0
 800e990:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e992:	2301      	movs	r3, #1
 800e994:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e998:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	f000 80e7 	beq.w	800eb70 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a6:	4a19      	ldr	r2, [pc, #100]	; (800ea0c <UART_SetConfig+0x930>)
 800e9a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9b4:	005a      	lsls	r2, r3, #1
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	085b      	lsrs	r3, r3, #1
 800e9bc:	441a      	add	r2, r3
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ca:	2b0f      	cmp	r3, #15
 800e9cc:	d916      	bls.n	800e9fc <UART_SetConfig+0x920>
 800e9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9d4:	d212      	bcs.n	800e9fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	f023 030f 	bic.w	r3, r3, #15
 800e9de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e2:	085b      	lsrs	r3, r3, #1
 800e9e4:	b29b      	uxth	r3, r3
 800e9e6:	f003 0307 	and.w	r3, r3, #7
 800e9ea:	b29a      	uxth	r2, r3
 800e9ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e9f8:	60da      	str	r2, [r3, #12]
 800e9fa:	e0b9      	b.n	800eb70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ea02:	e0b5      	b.n	800eb70 <UART_SetConfig+0xa94>
 800ea04:	03d09000 	.word	0x03d09000
 800ea08:	003d0900 	.word	0x003d0900
 800ea0c:	0800ffb8 	.word	0x0800ffb8
 800ea10:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ea14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ea18:	2b20      	cmp	r3, #32
 800ea1a:	dc49      	bgt.n	800eab0 <UART_SetConfig+0x9d4>
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	db7c      	blt.n	800eb1a <UART_SetConfig+0xa3e>
 800ea20:	2b20      	cmp	r3, #32
 800ea22:	d87a      	bhi.n	800eb1a <UART_SetConfig+0xa3e>
 800ea24:	a201      	add	r2, pc, #4	; (adr r2, 800ea2c <UART_SetConfig+0x950>)
 800ea26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea2a:	bf00      	nop
 800ea2c:	0800eab7 	.word	0x0800eab7
 800ea30:	0800eabf 	.word	0x0800eabf
 800ea34:	0800eb1b 	.word	0x0800eb1b
 800ea38:	0800eb1b 	.word	0x0800eb1b
 800ea3c:	0800eac7 	.word	0x0800eac7
 800ea40:	0800eb1b 	.word	0x0800eb1b
 800ea44:	0800eb1b 	.word	0x0800eb1b
 800ea48:	0800eb1b 	.word	0x0800eb1b
 800ea4c:	0800ead7 	.word	0x0800ead7
 800ea50:	0800eb1b 	.word	0x0800eb1b
 800ea54:	0800eb1b 	.word	0x0800eb1b
 800ea58:	0800eb1b 	.word	0x0800eb1b
 800ea5c:	0800eb1b 	.word	0x0800eb1b
 800ea60:	0800eb1b 	.word	0x0800eb1b
 800ea64:	0800eb1b 	.word	0x0800eb1b
 800ea68:	0800eb1b 	.word	0x0800eb1b
 800ea6c:	0800eae7 	.word	0x0800eae7
 800ea70:	0800eb1b 	.word	0x0800eb1b
 800ea74:	0800eb1b 	.word	0x0800eb1b
 800ea78:	0800eb1b 	.word	0x0800eb1b
 800ea7c:	0800eb1b 	.word	0x0800eb1b
 800ea80:	0800eb1b 	.word	0x0800eb1b
 800ea84:	0800eb1b 	.word	0x0800eb1b
 800ea88:	0800eb1b 	.word	0x0800eb1b
 800ea8c:	0800eb1b 	.word	0x0800eb1b
 800ea90:	0800eb1b 	.word	0x0800eb1b
 800ea94:	0800eb1b 	.word	0x0800eb1b
 800ea98:	0800eb1b 	.word	0x0800eb1b
 800ea9c:	0800eb1b 	.word	0x0800eb1b
 800eaa0:	0800eb1b 	.word	0x0800eb1b
 800eaa4:	0800eb1b 	.word	0x0800eb1b
 800eaa8:	0800eb1b 	.word	0x0800eb1b
 800eaac:	0800eb0d 	.word	0x0800eb0d
 800eab0:	2b40      	cmp	r3, #64	; 0x40
 800eab2:	d02e      	beq.n	800eb12 <UART_SetConfig+0xa36>
 800eab4:	e031      	b.n	800eb1a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eab6:	f7fa fddf 	bl	8009678 <HAL_RCC_GetPCLK1Freq>
 800eaba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eabc:	e033      	b.n	800eb26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eabe:	f7fa fdf1 	bl	80096a4 <HAL_RCC_GetPCLK2Freq>
 800eac2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eac4:	e02f      	b.n	800eb26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fc fa2e 	bl	800af2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ead0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ead4:	e027      	b.n	800eb26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ead6:	f107 0318 	add.w	r3, r7, #24
 800eada:	4618      	mov	r0, r3
 800eadc:	f7fc fb7a 	bl	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eae4:	e01f      	b.n	800eb26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eae6:	4b2d      	ldr	r3, [pc, #180]	; (800eb9c <UART_SetConfig+0xac0>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f003 0320 	and.w	r3, r3, #32
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d009      	beq.n	800eb06 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eaf2:	4b2a      	ldr	r3, [pc, #168]	; (800eb9c <UART_SetConfig+0xac0>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	08db      	lsrs	r3, r3, #3
 800eaf8:	f003 0303 	and.w	r3, r3, #3
 800eafc:	4a28      	ldr	r2, [pc, #160]	; (800eba0 <UART_SetConfig+0xac4>)
 800eafe:	fa22 f303 	lsr.w	r3, r2, r3
 800eb02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eb04:	e00f      	b.n	800eb26 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800eb06:	4b26      	ldr	r3, [pc, #152]	; (800eba0 <UART_SetConfig+0xac4>)
 800eb08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb0a:	e00c      	b.n	800eb26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eb0c:	4b25      	ldr	r3, [pc, #148]	; (800eba4 <UART_SetConfig+0xac8>)
 800eb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb10:	e009      	b.n	800eb26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb18:	e005      	b.n	800eb26 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eb24:	bf00      	nop
    }

    if (pclk != 0U)
 800eb26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d021      	beq.n	800eb70 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb30:	4a1d      	ldr	r2, [pc, #116]	; (800eba8 <UART_SetConfig+0xacc>)
 800eb32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb36:	461a      	mov	r2, r3
 800eb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb3a:	fbb3 f2f2 	udiv	r2, r3, r2
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	085b      	lsrs	r3, r3, #1
 800eb44:	441a      	add	r2, r3
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb4e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb52:	2b0f      	cmp	r3, #15
 800eb54:	d909      	bls.n	800eb6a <UART_SetConfig+0xa8e>
 800eb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb5c:	d205      	bcs.n	800eb6a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb60:	b29a      	uxth	r2, r3
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	60da      	str	r2, [r3, #12]
 800eb68:	e002      	b.n	800eb70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	2201      	movs	r2, #1
 800eb74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	2200      	movs	r2, #0
 800eb84:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800eb8c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3748      	adds	r7, #72	; 0x48
 800eb94:	46bd      	mov	sp, r7
 800eb96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb9a:	bf00      	nop
 800eb9c:	58024400 	.word	0x58024400
 800eba0:	03d09000 	.word	0x03d09000
 800eba4:	003d0900 	.word	0x003d0900
 800eba8:	0800ffb8 	.word	0x0800ffb8

0800ebac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb8:	f003 0301 	and.w	r3, r3, #1
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d00a      	beq.n	800ebd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	430a      	orrs	r2, r1
 800ebd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebda:	f003 0302 	and.w	r3, r3, #2
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d00a      	beq.n	800ebf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	430a      	orrs	r2, r1
 800ebf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebfc:	f003 0304 	and.w	r3, r3, #4
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d00a      	beq.n	800ec1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	430a      	orrs	r2, r1
 800ec18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec1e:	f003 0308 	and.w	r3, r3, #8
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d00a      	beq.n	800ec3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	430a      	orrs	r2, r1
 800ec3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec40:	f003 0310 	and.w	r3, r3, #16
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d00a      	beq.n	800ec5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	689b      	ldr	r3, [r3, #8]
 800ec4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	430a      	orrs	r2, r1
 800ec5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec62:	f003 0320 	and.w	r3, r3, #32
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d00a      	beq.n	800ec80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	689b      	ldr	r3, [r3, #8]
 800ec70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	430a      	orrs	r2, r1
 800ec7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d01a      	beq.n	800ecc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	430a      	orrs	r2, r1
 800eca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecaa:	d10a      	bne.n	800ecc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	430a      	orrs	r2, r1
 800ecc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d00a      	beq.n	800ece4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	430a      	orrs	r2, r1
 800ece2:	605a      	str	r2, [r3, #4]
  }
}
 800ece4:	bf00      	nop
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af02      	add	r7, sp, #8
 800ecf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ed00:	f7f3 feb0 	bl	8002a64 <HAL_GetTick>
 800ed04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f003 0308 	and.w	r3, r3, #8
 800ed10:	2b08      	cmp	r3, #8
 800ed12:	d10e      	bne.n	800ed32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed18:	9300      	str	r3, [sp, #0]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 f82f 	bl	800ed86 <UART_WaitOnFlagUntilTimeout>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d001      	beq.n	800ed32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed2e:	2303      	movs	r3, #3
 800ed30:	e025      	b.n	800ed7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f003 0304 	and.w	r3, r3, #4
 800ed3c:	2b04      	cmp	r3, #4
 800ed3e:	d10e      	bne.n	800ed5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed44:	9300      	str	r3, [sp, #0]
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 f819 	bl	800ed86 <UART_WaitOnFlagUntilTimeout>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d001      	beq.n	800ed5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed5a:	2303      	movs	r3, #3
 800ed5c:	e00f      	b.n	800ed7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2220      	movs	r2, #32
 800ed62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2220      	movs	r2, #32
 800ed6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2200      	movs	r2, #0
 800ed78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed7c:	2300      	movs	r3, #0
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3710      	adds	r7, #16
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ed86:	b580      	push	{r7, lr}
 800ed88:	b09c      	sub	sp, #112	; 0x70
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	60f8      	str	r0, [r7, #12]
 800ed8e:	60b9      	str	r1, [r7, #8]
 800ed90:	603b      	str	r3, [r7, #0]
 800ed92:	4613      	mov	r3, r2
 800ed94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed96:	e0a9      	b.n	800eeec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed9e:	f000 80a5 	beq.w	800eeec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eda2:	f7f3 fe5f 	bl	8002a64 <HAL_GetTick>
 800eda6:	4602      	mov	r2, r0
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	1ad3      	subs	r3, r2, r3
 800edac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800edae:	429a      	cmp	r2, r3
 800edb0:	d302      	bcc.n	800edb8 <UART_WaitOnFlagUntilTimeout+0x32>
 800edb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d140      	bne.n	800ee3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edc0:	e853 3f00 	ldrex	r3, [r3]
 800edc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800edc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800edcc:	667b      	str	r3, [r7, #100]	; 0x64
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	461a      	mov	r2, r3
 800edd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edd8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eddc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800edde:	e841 2300 	strex	r3, r2, [r1]
 800ede2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ede4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d1e6      	bne.n	800edb8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	3308      	adds	r3, #8
 800edf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edf4:	e853 3f00 	ldrex	r3, [r3]
 800edf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800edfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfc:	f023 0301 	bic.w	r3, r3, #1
 800ee00:	663b      	str	r3, [r7, #96]	; 0x60
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	3308      	adds	r3, #8
 800ee08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee0a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ee0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee12:	e841 2300 	strex	r3, r2, [r1]
 800ee16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ee18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d1e5      	bne.n	800edea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2220      	movs	r2, #32
 800ee22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2220      	movs	r2, #32
 800ee2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2200      	movs	r2, #0
 800ee32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ee36:	2303      	movs	r3, #3
 800ee38:	e069      	b.n	800ef0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f003 0304 	and.w	r3, r3, #4
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d051      	beq.n	800eeec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	69db      	ldr	r3, [r3, #28]
 800ee4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee56:	d149      	bne.n	800eeec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6a:	e853 3f00 	ldrex	r3, [r3]
 800ee6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ee76:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee80:	637b      	str	r3, [r7, #52]	; 0x34
 800ee82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee88:	e841 2300 	strex	r3, r2, [r1]
 800ee8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ee8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d1e6      	bne.n	800ee62 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	3308      	adds	r3, #8
 800ee9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	e853 3f00 	ldrex	r3, [r3]
 800eea2:	613b      	str	r3, [r7, #16]
   return(result);
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	f023 0301 	bic.w	r3, r3, #1
 800eeaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	3308      	adds	r3, #8
 800eeb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eeb4:	623a      	str	r2, [r7, #32]
 800eeb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeb8:	69f9      	ldr	r1, [r7, #28]
 800eeba:	6a3a      	ldr	r2, [r7, #32]
 800eebc:	e841 2300 	strex	r3, r2, [r1]
 800eec0:	61bb      	str	r3, [r7, #24]
   return(result);
 800eec2:	69bb      	ldr	r3, [r7, #24]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d1e5      	bne.n	800ee94 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2220      	movs	r2, #32
 800eecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2220      	movs	r2, #32
 800eed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2220      	movs	r2, #32
 800eedc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2200      	movs	r2, #0
 800eee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800eee8:	2303      	movs	r3, #3
 800eeea:	e010      	b.n	800ef0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	69da      	ldr	r2, [r3, #28]
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	4013      	ands	r3, r2
 800eef6:	68ba      	ldr	r2, [r7, #8]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	bf0c      	ite	eq
 800eefc:	2301      	moveq	r3, #1
 800eefe:	2300      	movne	r3, #0
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	461a      	mov	r2, r3
 800ef04:	79fb      	ldrb	r3, [r7, #7]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	f43f af46 	beq.w	800ed98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ef0c:	2300      	movs	r3, #0
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3770      	adds	r7, #112	; 0x70
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
	...

0800ef18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b0a3      	sub	sp, #140	; 0x8c
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	4613      	mov	r3, r2
 800ef24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	68ba      	ldr	r2, [r7, #8]
 800ef2a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	88fa      	ldrh	r2, [r7, #6]
 800ef30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	88fa      	ldrh	r2, [r7, #6]
 800ef38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	689b      	ldr	r3, [r3, #8]
 800ef46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef4a:	d10e      	bne.n	800ef6a <UART_Start_Receive_IT+0x52>
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	691b      	ldr	r3, [r3, #16]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d105      	bne.n	800ef60 <UART_Start_Receive_IT+0x48>
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ef5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef5e:	e02d      	b.n	800efbc <UART_Start_Receive_IT+0xa4>
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	22ff      	movs	r2, #255	; 0xff
 800ef64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef68:	e028      	b.n	800efbc <UART_Start_Receive_IT+0xa4>
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d10d      	bne.n	800ef8e <UART_Start_Receive_IT+0x76>
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	691b      	ldr	r3, [r3, #16]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d104      	bne.n	800ef84 <UART_Start_Receive_IT+0x6c>
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	22ff      	movs	r2, #255	; 0xff
 800ef7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef82:	e01b      	b.n	800efbc <UART_Start_Receive_IT+0xa4>
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	227f      	movs	r2, #127	; 0x7f
 800ef88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef8c:	e016      	b.n	800efbc <UART_Start_Receive_IT+0xa4>
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	689b      	ldr	r3, [r3, #8]
 800ef92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef96:	d10d      	bne.n	800efb4 <UART_Start_Receive_IT+0x9c>
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	691b      	ldr	r3, [r3, #16]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d104      	bne.n	800efaa <UART_Start_Receive_IT+0x92>
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	227f      	movs	r2, #127	; 0x7f
 800efa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efa8:	e008      	b.n	800efbc <UART_Start_Receive_IT+0xa4>
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	223f      	movs	r2, #63	; 0x3f
 800efae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efb2:	e003      	b.n	800efbc <UART_Start_Receive_IT+0xa4>
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2200      	movs	r2, #0
 800efb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2200      	movs	r2, #0
 800efc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2222      	movs	r2, #34	; 0x22
 800efc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	3308      	adds	r3, #8
 800efd2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efd6:	e853 3f00 	ldrex	r3, [r3]
 800efda:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800efdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efde:	f043 0301 	orr.w	r3, r3, #1
 800efe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	3308      	adds	r3, #8
 800efec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800eff0:	673a      	str	r2, [r7, #112]	; 0x70
 800eff2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800eff6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eff8:	e841 2300 	strex	r3, r2, [r1]
 800effc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800effe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f000:	2b00      	cmp	r3, #0
 800f002:	d1e3      	bne.n	800efcc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f00c:	d153      	bne.n	800f0b6 <UART_Start_Receive_IT+0x19e>
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f014:	88fa      	ldrh	r2, [r7, #6]
 800f016:	429a      	cmp	r2, r3
 800f018:	d34d      	bcc.n	800f0b6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	689b      	ldr	r3, [r3, #8]
 800f01e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f022:	d107      	bne.n	800f034 <UART_Start_Receive_IT+0x11c>
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	691b      	ldr	r3, [r3, #16]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d103      	bne.n	800f034 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	4a4b      	ldr	r2, [pc, #300]	; (800f15c <UART_Start_Receive_IT+0x244>)
 800f030:	671a      	str	r2, [r3, #112]	; 0x70
 800f032:	e002      	b.n	800f03a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	4a4a      	ldr	r2, [pc, #296]	; (800f160 <UART_Start_Receive_IT+0x248>)
 800f038:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2200      	movs	r2, #0
 800f03e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	691b      	ldr	r3, [r3, #16]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d01a      	beq.n	800f080 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f052:	e853 3f00 	ldrex	r3, [r3]
 800f056:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f05a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f05e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	461a      	mov	r2, r3
 800f068:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f06c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f06e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f070:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f072:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f074:	e841 2300 	strex	r3, r2, [r1]
 800f078:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f07a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d1e4      	bne.n	800f04a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	3308      	adds	r3, #8
 800f086:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f08a:	e853 3f00 	ldrex	r3, [r3]
 800f08e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f096:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	3308      	adds	r3, #8
 800f09e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f0a0:	64ba      	str	r2, [r7, #72]	; 0x48
 800f0a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0a8:	e841 2300 	strex	r3, r2, [r1]
 800f0ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f0ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d1e5      	bne.n	800f080 <UART_Start_Receive_IT+0x168>
 800f0b4:	e04a      	b.n	800f14c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	689b      	ldr	r3, [r3, #8]
 800f0ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0be:	d107      	bne.n	800f0d0 <UART_Start_Receive_IT+0x1b8>
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d103      	bne.n	800f0d0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	4a26      	ldr	r2, [pc, #152]	; (800f164 <UART_Start_Receive_IT+0x24c>)
 800f0cc:	671a      	str	r2, [r3, #112]	; 0x70
 800f0ce:	e002      	b.n	800f0d6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	4a25      	ldr	r2, [pc, #148]	; (800f168 <UART_Start_Receive_IT+0x250>)
 800f0d4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	691b      	ldr	r3, [r3, #16]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d019      	beq.n	800f11a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ee:	e853 3f00 	ldrex	r3, [r3]
 800f0f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f0fa:	677b      	str	r3, [r7, #116]	; 0x74
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	461a      	mov	r2, r3
 800f102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f104:	637b      	str	r3, [r7, #52]	; 0x34
 800f106:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f10a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f10c:	e841 2300 	strex	r3, r2, [r1]
 800f110:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f114:	2b00      	cmp	r3, #0
 800f116:	d1e6      	bne.n	800f0e6 <UART_Start_Receive_IT+0x1ce>
 800f118:	e018      	b.n	800f14c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	e853 3f00 	ldrex	r3, [r3]
 800f126:	613b      	str	r3, [r7, #16]
   return(result);
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	f043 0320 	orr.w	r3, r3, #32
 800f12e:	67bb      	str	r3, [r7, #120]	; 0x78
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	461a      	mov	r2, r3
 800f136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f138:	623b      	str	r3, [r7, #32]
 800f13a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f13c:	69f9      	ldr	r1, [r7, #28]
 800f13e:	6a3a      	ldr	r2, [r7, #32]
 800f140:	e841 2300 	strex	r3, r2, [r1]
 800f144:	61bb      	str	r3, [r7, #24]
   return(result);
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d1e6      	bne.n	800f11a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800f14c:	2300      	movs	r3, #0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	378c      	adds	r7, #140	; 0x8c
 800f152:	46bd      	mov	sp, r7
 800f154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop
 800f15c:	0800f875 	.word	0x0800f875
 800f160:	0800f57d 	.word	0x0800f57d
 800f164:	0800f41b 	.word	0x0800f41b
 800f168:	0800f2bb 	.word	0x0800f2bb

0800f16c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b095      	sub	sp, #84	; 0x54
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f17c:	e853 3f00 	ldrex	r3, [r3]
 800f180:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f184:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	461a      	mov	r2, r3
 800f190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f192:	643b      	str	r3, [r7, #64]	; 0x40
 800f194:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f196:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f198:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f19a:	e841 2300 	strex	r3, r2, [r1]
 800f19e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d1e6      	bne.n	800f174 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	3308      	adds	r3, #8
 800f1ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ae:	6a3b      	ldr	r3, [r7, #32]
 800f1b0:	e853 3f00 	ldrex	r3, [r3]
 800f1b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1b6:	69fa      	ldr	r2, [r7, #28]
 800f1b8:	4b1e      	ldr	r3, [pc, #120]	; (800f234 <UART_EndRxTransfer+0xc8>)
 800f1ba:	4013      	ands	r3, r2
 800f1bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	3308      	adds	r3, #8
 800f1c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f1c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1ce:	e841 2300 	strex	r3, r2, [r1]
 800f1d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d1e5      	bne.n	800f1a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d118      	bne.n	800f214 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	e853 3f00 	ldrex	r3, [r3]
 800f1ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	f023 0310 	bic.w	r3, r3, #16
 800f1f6:	647b      	str	r3, [r7, #68]	; 0x44
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f200:	61bb      	str	r3, [r7, #24]
 800f202:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f204:	6979      	ldr	r1, [r7, #20]
 800f206:	69ba      	ldr	r2, [r7, #24]
 800f208:	e841 2300 	strex	r3, r2, [r1]
 800f20c:	613b      	str	r3, [r7, #16]
   return(result);
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d1e6      	bne.n	800f1e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2220      	movs	r2, #32
 800f218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2200      	movs	r2, #0
 800f220:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2200      	movs	r2, #0
 800f226:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f228:	bf00      	nop
 800f22a:	3754      	adds	r7, #84	; 0x54
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr
 800f234:	effffffe 	.word	0xeffffffe

0800f238 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b084      	sub	sp, #16
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f244:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2200      	movs	r2, #0
 800f24a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2200      	movs	r2, #0
 800f252:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f256:	68f8      	ldr	r0, [r7, #12]
 800f258:	f7fe ff2a 	bl	800e0b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f25c:	bf00      	nop
 800f25e:	3710      	adds	r7, #16
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b088      	sub	sp, #32
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	e853 3f00 	ldrex	r3, [r3]
 800f278:	60bb      	str	r3, [r7, #8]
   return(result);
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f280:	61fb      	str	r3, [r7, #28]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	461a      	mov	r2, r3
 800f288:	69fb      	ldr	r3, [r7, #28]
 800f28a:	61bb      	str	r3, [r7, #24]
 800f28c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f28e:	6979      	ldr	r1, [r7, #20]
 800f290:	69ba      	ldr	r2, [r7, #24]
 800f292:	e841 2300 	strex	r3, r2, [r1]
 800f296:	613b      	str	r3, [r7, #16]
   return(result);
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1e6      	bne.n	800f26c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2220      	movs	r2, #32
 800f2a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7fe fef5 	bl	800e09c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2b2:	bf00      	nop
 800f2b4:	3720      	adds	r7, #32
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f2ba:	b580      	push	{r7, lr}
 800f2bc:	b096      	sub	sp, #88	; 0x58
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2d2:	2b22      	cmp	r3, #34	; 0x22
 800f2d4:	f040 8095 	bne.w	800f402 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f2e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f2e6:	b2d9      	uxtb	r1, r3
 800f2e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f2ec:	b2da      	uxtb	r2, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2f2:	400a      	ands	r2, r1
 800f2f4:	b2d2      	uxtb	r2, r2
 800f2f6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2fc:	1c5a      	adds	r2, r3, #1
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f308:	b29b      	uxth	r3, r3
 800f30a:	3b01      	subs	r3, #1
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d178      	bne.n	800f412 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f328:	e853 3f00 	ldrex	r3, [r3]
 800f32c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f330:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f334:	653b      	str	r3, [r7, #80]	; 0x50
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	461a      	mov	r2, r3
 800f33c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f33e:	647b      	str	r3, [r7, #68]	; 0x44
 800f340:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f342:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f346:	e841 2300 	strex	r3, r2, [r1]
 800f34a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d1e6      	bne.n	800f320 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	3308      	adds	r3, #8
 800f358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35c:	e853 3f00 	ldrex	r3, [r3]
 800f360:	623b      	str	r3, [r7, #32]
   return(result);
 800f362:	6a3b      	ldr	r3, [r7, #32]
 800f364:	f023 0301 	bic.w	r3, r3, #1
 800f368:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	3308      	adds	r3, #8
 800f370:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f372:	633a      	str	r2, [r7, #48]	; 0x30
 800f374:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f37a:	e841 2300 	strex	r3, r2, [r1]
 800f37e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f382:	2b00      	cmp	r3, #0
 800f384:	d1e5      	bne.n	800f352 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2220      	movs	r2, #32
 800f38a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f398:	2b01      	cmp	r3, #1
 800f39a:	d12e      	bne.n	800f3fa <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	e853 3f00 	ldrex	r3, [r3]
 800f3ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f023 0310 	bic.w	r3, r3, #16
 800f3b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	461a      	mov	r2, r3
 800f3be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3c0:	61fb      	str	r3, [r7, #28]
 800f3c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3c4:	69b9      	ldr	r1, [r7, #24]
 800f3c6:	69fa      	ldr	r2, [r7, #28]
 800f3c8:	e841 2300 	strex	r3, r2, [r1]
 800f3cc:	617b      	str	r3, [r7, #20]
   return(result);
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d1e6      	bne.n	800f3a2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	69db      	ldr	r3, [r3, #28]
 800f3da:	f003 0310 	and.w	r3, r3, #16
 800f3de:	2b10      	cmp	r3, #16
 800f3e0:	d103      	bne.n	800f3ea <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2210      	movs	r2, #16
 800f3e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f7fe fe66 	bl	800e0c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f3f8:	e00b      	b.n	800f412 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f7f1 fcd4 	bl	8000da8 <HAL_UART_RxCpltCallback>
}
 800f400:	e007      	b.n	800f412 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	699a      	ldr	r2, [r3, #24]
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f042 0208 	orr.w	r2, r2, #8
 800f410:	619a      	str	r2, [r3, #24]
}
 800f412:	bf00      	nop
 800f414:	3758      	adds	r7, #88	; 0x58
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}

0800f41a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f41a:	b580      	push	{r7, lr}
 800f41c:	b096      	sub	sp, #88	; 0x58
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f428:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f432:	2b22      	cmp	r3, #34	; 0x22
 800f434:	f040 8095 	bne.w	800f562 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f43e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f446:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f448:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f44c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f450:	4013      	ands	r3, r2
 800f452:	b29a      	uxth	r2, r3
 800f454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f456:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f45c:	1c9a      	adds	r2, r3, #2
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f468:	b29b      	uxth	r3, r3
 800f46a:	3b01      	subs	r3, #1
 800f46c:	b29a      	uxth	r2, r3
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f47a:	b29b      	uxth	r3, r3
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d178      	bne.n	800f572 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f488:	e853 3f00 	ldrex	r3, [r3]
 800f48c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f490:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f494:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	461a      	mov	r2, r3
 800f49c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f49e:	643b      	str	r3, [r7, #64]	; 0x40
 800f4a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f4a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f4a6:	e841 2300 	strex	r3, r2, [r1]
 800f4aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d1e6      	bne.n	800f480 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	3308      	adds	r3, #8
 800f4b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ba:	6a3b      	ldr	r3, [r7, #32]
 800f4bc:	e853 3f00 	ldrex	r3, [r3]
 800f4c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f4c2:	69fb      	ldr	r3, [r7, #28]
 800f4c4:	f023 0301 	bic.w	r3, r3, #1
 800f4c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	3308      	adds	r3, #8
 800f4d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f4d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f4d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4da:	e841 2300 	strex	r3, r2, [r1]
 800f4de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d1e5      	bne.n	800f4b2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2220      	movs	r2, #32
 800f4ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d12e      	bne.n	800f55a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2200      	movs	r2, #0
 800f500:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	e853 3f00 	ldrex	r3, [r3]
 800f50e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	f023 0310 	bic.w	r3, r3, #16
 800f516:	647b      	str	r3, [r7, #68]	; 0x44
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	461a      	mov	r2, r3
 800f51e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f520:	61bb      	str	r3, [r7, #24]
 800f522:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f524:	6979      	ldr	r1, [r7, #20]
 800f526:	69ba      	ldr	r2, [r7, #24]
 800f528:	e841 2300 	strex	r3, r2, [r1]
 800f52c:	613b      	str	r3, [r7, #16]
   return(result);
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d1e6      	bne.n	800f502 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	69db      	ldr	r3, [r3, #28]
 800f53a:	f003 0310 	and.w	r3, r3, #16
 800f53e:	2b10      	cmp	r3, #16
 800f540:	d103      	bne.n	800f54a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	2210      	movs	r2, #16
 800f548:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f550:	4619      	mov	r1, r3
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f7fe fdb6 	bl	800e0c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f558:	e00b      	b.n	800f572 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f7f1 fc24 	bl	8000da8 <HAL_UART_RxCpltCallback>
}
 800f560:	e007      	b.n	800f572 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	699a      	ldr	r2, [r3, #24]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	f042 0208 	orr.w	r2, r2, #8
 800f570:	619a      	str	r2, [r3, #24]
}
 800f572:	bf00      	nop
 800f574:	3758      	adds	r7, #88	; 0x58
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
	...

0800f57c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b0a6      	sub	sp, #152	; 0x98
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f58a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	69db      	ldr	r3, [r3, #28]
 800f594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	689b      	ldr	r3, [r3, #8]
 800f5a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5b2:	2b22      	cmp	r3, #34	; 0x22
 800f5b4:	f040 814d 	bne.w	800f852 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f5be:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f5c2:	e0f4      	b.n	800f7ae <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ca:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f5ce:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f5d2:	b2d9      	uxtb	r1, r3
 800f5d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f5d8:	b2da      	uxtb	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5de:	400a      	ands	r2, r1
 800f5e0:	b2d2      	uxtb	r2, r2
 800f5e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5e8:	1c5a      	adds	r2, r3, #1
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	3b01      	subs	r3, #1
 800f5f8:	b29a      	uxth	r2, r3
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	69db      	ldr	r3, [r3, #28]
 800f606:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f60a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f60e:	f003 0307 	and.w	r3, r3, #7
 800f612:	2b00      	cmp	r3, #0
 800f614:	d053      	beq.n	800f6be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f616:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f61a:	f003 0301 	and.w	r3, r3, #1
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d011      	beq.n	800f646 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00b      	beq.n	800f646 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2201      	movs	r2, #1
 800f634:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f63c:	f043 0201 	orr.w	r2, r3, #1
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f646:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f64a:	f003 0302 	and.w	r3, r3, #2
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d011      	beq.n	800f676 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f652:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f656:	f003 0301 	and.w	r3, r3, #1
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00b      	beq.n	800f676 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	2202      	movs	r2, #2
 800f664:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f66c:	f043 0204 	orr.w	r2, r3, #4
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f676:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f67a:	f003 0304 	and.w	r3, r3, #4
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d011      	beq.n	800f6a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f682:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f686:	f003 0301 	and.w	r3, r3, #1
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d00b      	beq.n	800f6a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	2204      	movs	r2, #4
 800f694:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f69c:	f043 0202 	orr.w	r2, r3, #2
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d006      	beq.n	800f6be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f7fe fcfd 	bl	800e0b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d171      	bne.n	800f7ae <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6d2:	e853 3f00 	ldrex	r3, [r3]
 800f6d6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f6d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f6ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800f6ee:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6f0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f6f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f6f4:	e841 2300 	strex	r3, r2, [r1]
 800f6f8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f6fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d1e4      	bne.n	800f6ca <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	3308      	adds	r3, #8
 800f706:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f70a:	e853 3f00 	ldrex	r3, [r3]
 800f70e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f712:	4b56      	ldr	r3, [pc, #344]	; (800f86c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800f714:	4013      	ands	r3, r2
 800f716:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	3308      	adds	r3, #8
 800f71e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f720:	657a      	str	r2, [r7, #84]	; 0x54
 800f722:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f724:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f726:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f728:	e841 2300 	strex	r3, r2, [r1]
 800f72c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f730:	2b00      	cmp	r3, #0
 800f732:	d1e5      	bne.n	800f700 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2220      	movs	r2, #32
 800f738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2200      	movs	r2, #0
 800f740:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f746:	2b01      	cmp	r3, #1
 800f748:	d12e      	bne.n	800f7a8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2200      	movs	r2, #0
 800f74e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f758:	e853 3f00 	ldrex	r3, [r3]
 800f75c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f760:	f023 0310 	bic.w	r3, r3, #16
 800f764:	67bb      	str	r3, [r7, #120]	; 0x78
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	461a      	mov	r2, r3
 800f76c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f76e:	643b      	str	r3, [r7, #64]	; 0x40
 800f770:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f772:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f774:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f776:	e841 2300 	strex	r3, r2, [r1]
 800f77a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d1e6      	bne.n	800f750 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	69db      	ldr	r3, [r3, #28]
 800f788:	f003 0310 	and.w	r3, r3, #16
 800f78c:	2b10      	cmp	r3, #16
 800f78e:	d103      	bne.n	800f798 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	2210      	movs	r2, #16
 800f796:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f79e:	4619      	mov	r1, r3
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f7fe fc8f 	bl	800e0c4 <HAL_UARTEx_RxEventCallback>
 800f7a6:	e002      	b.n	800f7ae <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f7f1 fafd 	bl	8000da8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f7ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d006      	beq.n	800f7c4 <UART_RxISR_8BIT_FIFOEN+0x248>
 800f7b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f7ba:	f003 0320 	and.w	r3, r3, #32
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	f47f af00 	bne.w	800f5c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f7ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f7ce:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d045      	beq.n	800f862 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d23e      	bcs.n	800f862 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	3308      	adds	r3, #8
 800f7ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ec:	6a3b      	ldr	r3, [r7, #32]
 800f7ee:	e853 3f00 	ldrex	r3, [r3]
 800f7f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f7fa:	673b      	str	r3, [r7, #112]	; 0x70
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	3308      	adds	r3, #8
 800f802:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f804:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f80a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f80c:	e841 2300 	strex	r3, r2, [r1]
 800f810:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f814:	2b00      	cmp	r3, #0
 800f816:	d1e5      	bne.n	800f7e4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	4a15      	ldr	r2, [pc, #84]	; (800f870 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f81c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	e853 3f00 	ldrex	r3, [r3]
 800f82a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	f043 0320 	orr.w	r3, r3, #32
 800f832:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	461a      	mov	r2, r3
 800f83a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f83c:	61bb      	str	r3, [r7, #24]
 800f83e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f840:	6979      	ldr	r1, [r7, #20]
 800f842:	69ba      	ldr	r2, [r7, #24]
 800f844:	e841 2300 	strex	r3, r2, [r1]
 800f848:	613b      	str	r3, [r7, #16]
   return(result);
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d1e6      	bne.n	800f81e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f850:	e007      	b.n	800f862 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	699a      	ldr	r2, [r3, #24]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f042 0208 	orr.w	r2, r2, #8
 800f860:	619a      	str	r2, [r3, #24]
}
 800f862:	bf00      	nop
 800f864:	3798      	adds	r7, #152	; 0x98
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	effffffe 	.word	0xeffffffe
 800f870:	0800f2bb 	.word	0x0800f2bb

0800f874 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b0a8      	sub	sp, #160	; 0xa0
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f882:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	69db      	ldr	r3, [r3, #28]
 800f88c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8aa:	2b22      	cmp	r3, #34	; 0x22
 800f8ac:	f040 8151 	bne.w	800fb52 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f8b6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f8ba:	e0f8      	b.n	800faae <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800f8ce:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800f8d2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f8d6:	4013      	ands	r3, r2
 800f8d8:	b29a      	uxth	r2, r3
 800f8da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8e4:	1c9a      	adds	r2, r3, #2
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	3b01      	subs	r3, #1
 800f8f4:	b29a      	uxth	r2, r3
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	69db      	ldr	r3, [r3, #28]
 800f902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f906:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f90a:	f003 0307 	and.w	r3, r3, #7
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d053      	beq.n	800f9ba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f912:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f916:	f003 0301 	and.w	r3, r3, #1
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d011      	beq.n	800f942 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f91e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00b      	beq.n	800f942 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2201      	movs	r2, #1
 800f930:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f938:	f043 0201 	orr.w	r2, r3, #1
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f942:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f946:	f003 0302 	and.w	r3, r3, #2
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d011      	beq.n	800f972 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f94e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f952:	f003 0301 	and.w	r3, r3, #1
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00b      	beq.n	800f972 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2202      	movs	r2, #2
 800f960:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f968:	f043 0204 	orr.w	r2, r3, #4
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f972:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f976:	f003 0304 	and.w	r3, r3, #4
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d011      	beq.n	800f9a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f97e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f982:	f003 0301 	and.w	r3, r3, #1
 800f986:	2b00      	cmp	r3, #0
 800f988:	d00b      	beq.n	800f9a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2204      	movs	r2, #4
 800f990:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f998:	f043 0202 	orr.w	r2, r3, #2
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d006      	beq.n	800f9ba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f7fe fb7f 	bl	800e0b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d173      	bne.n	800faae <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9ce:	e853 3f00 	ldrex	r3, [r3]
 800f9d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f9d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f9e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f9ea:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f9ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f9f0:	e841 2300 	strex	r3, r2, [r1]
 800f9f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f9f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d1e4      	bne.n	800f9c6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	3308      	adds	r3, #8
 800fa02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa06:	e853 3f00 	ldrex	r3, [r3]
 800fa0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fa0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa0e:	4b57      	ldr	r3, [pc, #348]	; (800fb6c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800fa10:	4013      	ands	r3, r2
 800fa12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	3308      	adds	r3, #8
 800fa1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fa20:	65ba      	str	r2, [r7, #88]	; 0x58
 800fa22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fa26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa28:	e841 2300 	strex	r3, r2, [r1]
 800fa2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fa2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d1e3      	bne.n	800f9fc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2220      	movs	r2, #32
 800fa38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa46:	2b01      	cmp	r3, #1
 800fa48:	d12e      	bne.n	800faa8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa58:	e853 3f00 	ldrex	r3, [r3]
 800fa5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fa5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa60:	f023 0310 	bic.w	r3, r3, #16
 800fa64:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa6e:	647b      	str	r3, [r7, #68]	; 0x44
 800fa70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa76:	e841 2300 	strex	r3, r2, [r1]
 800fa7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fa7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d1e6      	bne.n	800fa50 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	69db      	ldr	r3, [r3, #28]
 800fa88:	f003 0310 	and.w	r3, r3, #16
 800fa8c:	2b10      	cmp	r3, #16
 800fa8e:	d103      	bne.n	800fa98 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	2210      	movs	r2, #16
 800fa96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa9e:	4619      	mov	r1, r3
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7fe fb0f 	bl	800e0c4 <HAL_UARTEx_RxEventCallback>
 800faa6:	e002      	b.n	800faae <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f7f1 f97d 	bl	8000da8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800faae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d006      	beq.n	800fac4 <UART_RxISR_16BIT_FIFOEN+0x250>
 800fab6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800faba:	f003 0320 	and.w	r3, r3, #32
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	f47f aefc 	bne.w	800f8bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800faca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800face:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d045      	beq.n	800fb62 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fadc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d23e      	bcs.n	800fb62 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	3308      	adds	r3, #8
 800faea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faee:	e853 3f00 	ldrex	r3, [r3]
 800faf2:	623b      	str	r3, [r7, #32]
   return(result);
 800faf4:	6a3b      	ldr	r3, [r7, #32]
 800faf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fafa:	677b      	str	r3, [r7, #116]	; 0x74
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	3308      	adds	r3, #8
 800fb02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fb04:	633a      	str	r2, [r7, #48]	; 0x30
 800fb06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb0c:	e841 2300 	strex	r3, r2, [r1]
 800fb10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d1e5      	bne.n	800fae4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	4a15      	ldr	r2, [pc, #84]	; (800fb70 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800fb1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	e853 3f00 	ldrex	r3, [r3]
 800fb2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f043 0320 	orr.w	r3, r3, #32
 800fb32:	673b      	str	r3, [r7, #112]	; 0x70
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	461a      	mov	r2, r3
 800fb3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb3c:	61fb      	str	r3, [r7, #28]
 800fb3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb40:	69b9      	ldr	r1, [r7, #24]
 800fb42:	69fa      	ldr	r2, [r7, #28]
 800fb44:	e841 2300 	strex	r3, r2, [r1]
 800fb48:	617b      	str	r3, [r7, #20]
   return(result);
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d1e6      	bne.n	800fb1e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fb50:	e007      	b.n	800fb62 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	699a      	ldr	r2, [r3, #24]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f042 0208 	orr.w	r2, r2, #8
 800fb60:	619a      	str	r2, [r3, #24]
}
 800fb62:	bf00      	nop
 800fb64:	37a0      	adds	r7, #160	; 0xa0
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
 800fb6a:	bf00      	nop
 800fb6c:	effffffe 	.word	0xeffffffe
 800fb70:	0800f41b 	.word	0x0800f41b

0800fb74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb7c:	bf00      	nop
 800fb7e:	370c      	adds	r7, #12
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b083      	sub	sp, #12
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb90:	bf00      	nop
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr

0800fb9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b083      	sub	sp, #12
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fba4:	bf00      	nop
 800fba6:	370c      	adds	r7, #12
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbae:	4770      	bx	lr

0800fbb0 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b088      	sub	sp, #32
 800fbb4:	af02      	add	r7, sp, #8
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	1d3b      	adds	r3, r7, #4
 800fbba:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	d101      	bne.n	800fbd0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800fbcc:	2302      	movs	r3, #2
 800fbce:	e046      	b.n	800fc5e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	2224      	movs	r2, #36	; 0x24
 800fbdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	681a      	ldr	r2, [r3, #0]
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f022 0201 	bic.w	r2, r2, #1
 800fbee:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800fbfa:	687a      	ldr	r2, [r7, #4]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	430a      	orrs	r2, r1
 800fc02:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d105      	bne.n	800fc16 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800fc0a:	1d3b      	adds	r3, r7, #4
 800fc0c:	e893 0006 	ldmia.w	r3, {r1, r2}
 800fc10:	68f8      	ldr	r0, [r7, #12]
 800fc12:	f000 f910 	bl	800fe36 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	681a      	ldr	r2, [r3, #0]
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f042 0201 	orr.w	r2, r2, #1
 800fc24:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fc26:	f7f2 ff1d 	bl	8002a64 <HAL_GetTick>
 800fc2a:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fc30:	9300      	str	r3, [sp, #0]
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	2200      	movs	r2, #0
 800fc36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fc3a:	68f8      	ldr	r0, [r7, #12]
 800fc3c:	f7ff f8a3 	bl	800ed86 <UART_WaitOnFlagUntilTimeout>
 800fc40:	4603      	mov	r3, r0
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d002      	beq.n	800fc4c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800fc46:	2303      	movs	r3, #3
 800fc48:	75fb      	strb	r3, [r7, #23]
 800fc4a:	e003      	b.n	800fc54 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2220      	movs	r2, #32
 800fc50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2200      	movs	r2, #0
 800fc58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800fc5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3718      	adds	r7, #24
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}

0800fc66 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800fc66:	b480      	push	{r7}
 800fc68:	b089      	sub	sp, #36	; 0x24
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d101      	bne.n	800fc7c <HAL_UARTEx_EnableStopMode+0x16>
 800fc78:	2302      	movs	r3, #2
 800fc7a:	e021      	b.n	800fcc0 <HAL_UARTEx_EnableStopMode+0x5a>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	e853 3f00 	ldrex	r3, [r3]
 800fc90:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	f043 0302 	orr.w	r3, r3, #2
 800fc98:	61fb      	str	r3, [r7, #28]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	461a      	mov	r2, r3
 800fca0:	69fb      	ldr	r3, [r7, #28]
 800fca2:	61bb      	str	r3, [r7, #24]
 800fca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca6:	6979      	ldr	r1, [r7, #20]
 800fca8:	69ba      	ldr	r2, [r7, #24]
 800fcaa:	e841 2300 	strex	r3, r2, [r1]
 800fcae:	613b      	str	r3, [r7, #16]
   return(result);
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d1e6      	bne.n	800fc84 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fcbe:	2300      	movs	r3, #0
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3724      	adds	r7, #36	; 0x24
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr

0800fccc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b085      	sub	sp, #20
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d101      	bne.n	800fce2 <HAL_UARTEx_DisableFifoMode+0x16>
 800fcde:	2302      	movs	r3, #2
 800fce0:	e027      	b.n	800fd32 <HAL_UARTEx_DisableFifoMode+0x66>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2201      	movs	r2, #1
 800fce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2224      	movs	r2, #36	; 0x24
 800fcee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f022 0201 	bic.w	r2, r2, #1
 800fd08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fd10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2200      	movs	r2, #0
 800fd16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	68fa      	ldr	r2, [r7, #12]
 800fd1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2220      	movs	r2, #32
 800fd24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd30:	2300      	movs	r3, #0
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3714      	adds	r7, #20
 800fd36:	46bd      	mov	sp, r7
 800fd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3c:	4770      	bx	lr

0800fd3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b084      	sub	sp, #16
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
 800fd46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	d101      	bne.n	800fd56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fd52:	2302      	movs	r3, #2
 800fd54:	e02d      	b.n	800fdb2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2201      	movs	r2, #1
 800fd5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2224      	movs	r2, #36	; 0x24
 800fd62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	681a      	ldr	r2, [r3, #0]
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	f022 0201 	bic.w	r2, r2, #1
 800fd7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	689b      	ldr	r3, [r3, #8]
 800fd84:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	683a      	ldr	r2, [r7, #0]
 800fd8e:	430a      	orrs	r2, r1
 800fd90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f000 f872 	bl	800fe7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2220      	movs	r2, #32
 800fda4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fdb0:	2300      	movs	r3, #0
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3710      	adds	r7, #16
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b084      	sub	sp, #16
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
 800fdc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d101      	bne.n	800fdd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fdce:	2302      	movs	r3, #2
 800fdd0:	e02d      	b.n	800fe2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2224      	movs	r2, #36	; 0x24
 800fdde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	681a      	ldr	r2, [r3, #0]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f022 0201 	bic.w	r2, r2, #1
 800fdf8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	689b      	ldr	r3, [r3, #8]
 800fe00:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	683a      	ldr	r2, [r7, #0]
 800fe0a:	430a      	orrs	r2, r1
 800fe0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f000 f834 	bl	800fe7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	68fa      	ldr	r2, [r7, #12]
 800fe1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2220      	movs	r2, #32
 800fe20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2200      	movs	r2, #0
 800fe28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fe2c:	2300      	movs	r3, #0
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3710      	adds	r7, #16
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}

0800fe36 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800fe36:	b480      	push	{r7}
 800fe38:	b085      	sub	sp, #20
 800fe3a:	af00      	add	r7, sp, #0
 800fe3c:	60f8      	str	r0, [r7, #12]
 800fe3e:	1d3b      	adds	r3, r7, #4
 800fe40:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	f023 0210 	bic.w	r2, r3, #16
 800fe4e:	893b      	ldrh	r3, [r7, #8]
 800fe50:	4619      	mov	r1, r3
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	430a      	orrs	r2, r1
 800fe58:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	685b      	ldr	r3, [r3, #4]
 800fe60:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800fe64:	7abb      	ldrb	r3, [r7, #10]
 800fe66:	061a      	lsls	r2, r3, #24
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	430a      	orrs	r2, r1
 800fe6e:	605a      	str	r2, [r3, #4]
}
 800fe70:	bf00      	nop
 800fe72:	3714      	adds	r7, #20
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr

0800fe7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b085      	sub	sp, #20
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d108      	bne.n	800fe9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2201      	movs	r2, #1
 800fe90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2201      	movs	r2, #1
 800fe98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fe9c:	e031      	b.n	800ff02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fe9e:	2310      	movs	r3, #16
 800fea0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fea2:	2310      	movs	r3, #16
 800fea4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	0e5b      	lsrs	r3, r3, #25
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	f003 0307 	and.w	r3, r3, #7
 800feb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	689b      	ldr	r3, [r3, #8]
 800febc:	0f5b      	lsrs	r3, r3, #29
 800febe:	b2db      	uxtb	r3, r3
 800fec0:	f003 0307 	and.w	r3, r3, #7
 800fec4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fec6:	7bbb      	ldrb	r3, [r7, #14]
 800fec8:	7b3a      	ldrb	r2, [r7, #12]
 800feca:	4911      	ldr	r1, [pc, #68]	; (800ff10 <UARTEx_SetNbDataToProcess+0x94>)
 800fecc:	5c8a      	ldrb	r2, [r1, r2]
 800fece:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fed2:	7b3a      	ldrb	r2, [r7, #12]
 800fed4:	490f      	ldr	r1, [pc, #60]	; (800ff14 <UARTEx_SetNbDataToProcess+0x98>)
 800fed6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fed8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fedc:	b29a      	uxth	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fee4:	7bfb      	ldrb	r3, [r7, #15]
 800fee6:	7b7a      	ldrb	r2, [r7, #13]
 800fee8:	4909      	ldr	r1, [pc, #36]	; (800ff10 <UARTEx_SetNbDataToProcess+0x94>)
 800feea:	5c8a      	ldrb	r2, [r1, r2]
 800feec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fef0:	7b7a      	ldrb	r2, [r7, #13]
 800fef2:	4908      	ldr	r1, [pc, #32]	; (800ff14 <UARTEx_SetNbDataToProcess+0x98>)
 800fef4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fef6:	fb93 f3f2 	sdiv	r3, r3, r2
 800fefa:	b29a      	uxth	r2, r3
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ff02:	bf00      	nop
 800ff04:	3714      	adds	r7, #20
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr
 800ff0e:	bf00      	nop
 800ff10:	0800ffd0 	.word	0x0800ffd0
 800ff14:	0800ffd8 	.word	0x0800ffd8

0800ff18 <__libc_init_array>:
 800ff18:	b570      	push	{r4, r5, r6, lr}
 800ff1a:	4d0d      	ldr	r5, [pc, #52]	; (800ff50 <__libc_init_array+0x38>)
 800ff1c:	4c0d      	ldr	r4, [pc, #52]	; (800ff54 <__libc_init_array+0x3c>)
 800ff1e:	1b64      	subs	r4, r4, r5
 800ff20:	10a4      	asrs	r4, r4, #2
 800ff22:	2600      	movs	r6, #0
 800ff24:	42a6      	cmp	r6, r4
 800ff26:	d109      	bne.n	800ff3c <__libc_init_array+0x24>
 800ff28:	4d0b      	ldr	r5, [pc, #44]	; (800ff58 <__libc_init_array+0x40>)
 800ff2a:	4c0c      	ldr	r4, [pc, #48]	; (800ff5c <__libc_init_array+0x44>)
 800ff2c:	f000 f820 	bl	800ff70 <_init>
 800ff30:	1b64      	subs	r4, r4, r5
 800ff32:	10a4      	asrs	r4, r4, #2
 800ff34:	2600      	movs	r6, #0
 800ff36:	42a6      	cmp	r6, r4
 800ff38:	d105      	bne.n	800ff46 <__libc_init_array+0x2e>
 800ff3a:	bd70      	pop	{r4, r5, r6, pc}
 800ff3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff40:	4798      	blx	r3
 800ff42:	3601      	adds	r6, #1
 800ff44:	e7ee      	b.n	800ff24 <__libc_init_array+0xc>
 800ff46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff4a:	4798      	blx	r3
 800ff4c:	3601      	adds	r6, #1
 800ff4e:	e7f2      	b.n	800ff36 <__libc_init_array+0x1e>
 800ff50:	0800ffe8 	.word	0x0800ffe8
 800ff54:	0800ffe8 	.word	0x0800ffe8
 800ff58:	0800ffe8 	.word	0x0800ffe8
 800ff5c:	0800ffec 	.word	0x0800ffec

0800ff60 <memset>:
 800ff60:	4402      	add	r2, r0
 800ff62:	4603      	mov	r3, r0
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d100      	bne.n	800ff6a <memset+0xa>
 800ff68:	4770      	bx	lr
 800ff6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ff6e:	e7f9      	b.n	800ff64 <memset+0x4>

0800ff70 <_init>:
 800ff70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff72:	bf00      	nop
 800ff74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff76:	bc08      	pop	{r3}
 800ff78:	469e      	mov	lr, r3
 800ff7a:	4770      	bx	lr

0800ff7c <_fini>:
 800ff7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff7e:	bf00      	nop
 800ff80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff82:	bc08      	pop	{r3}
 800ff84:	469e      	mov	lr, r3
 800ff86:	4770      	bx	lr
