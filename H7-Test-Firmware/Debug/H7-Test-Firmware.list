
H7-Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbd4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800fe6c  0800fe6c  0001fe6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fec4  0800fec4  0001fec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fecc  0800fecc  0001fecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fed0  0800fed0  0001fed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  0800fed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000534  240000a0  0800ff74  000200a0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240005d4  0800ff74  000205d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023a1a  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036dd  00000000  00000000  00043ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b50  00000000  00000000  000471c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a38  00000000  00000000  00048d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b205  00000000  00000000  0004a750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023fdb  00000000  00000000  00085955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018061b  00000000  00000000  000a9930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00229f4b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007938  00000000  00000000  00229f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000a0 	.word	0x240000a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800fe54 	.word	0x0800fe54

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000a4 	.word	0x240000a4
 80002d4:	0800fe54 	.word	0x0800fe54

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  int16_t output;
  uint8_t buf[2];
  HAL_StatusTypeDef ret;
  buf[0] = REG_TEMP;
 8000612:	2300      	movs	r3, #0
 8000614:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1,
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b299      	uxth	r1, r3
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <poll_i2c_sensor+0x94>)
 8000628:	f007 f944 	bl	80078b4 <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
                                1000);
  if (ret != HAL_OK)
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <poll_i2c_sensor+0x42>
  {
    strcpy((char *)buf, "Error Tx\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <poll_i2c_sensor+0x98>)
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e022      	b.n	8000690 <poll_i2c_sensor+0x88>
  }
  else
  {
    /* Read 2 bytes from the temperature register */
    ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2,
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b299      	uxth	r1, r3
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <poll_i2c_sensor+0x94>)
 800065c:	f007 fa1e 	bl	8007a9c <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
                                 1000);
    if (ret != HAL_OK)
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <poll_i2c_sensor+0x76>
    {
      strcpy((char *)buf, "Error Rx\r\n");
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <poll_i2c_sensor+0x9c>)
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	c303      	stmia	r3!, {r0, r1}
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	3302      	adds	r3, #2
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e008      	b.n	8000690 <poll_i2c_sensor+0x88>
    }
    else
    {
      output = (int16_t)(buf[0] << 8);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	81fb      	strh	r3, [r7, #14]
      output = (output | buf[1]) >> 3;
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	7a7a      	ldrb	r2, [r7, #9]
 800068a:	4313      	orrs	r3, r2
 800068c:	10db      	asrs	r3, r3, #3
 800068e:	81fb      	strh	r3, [r7, #14]
    }
  }
  return output;
 8000690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	24000288 	.word	0x24000288
 80006a0:	0800fe6c 	.word	0x0800fe6c
 80006a4:	0800fe78 	.word	0x0800fe78

080006a8 <i2c>:
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t *i2c()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa9 	bl	8000608 <poll_i2c_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
  int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006ba:	2394      	movs	r3, #148	; 0x94
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa3 	bl	8000608 <poll_i2c_sensor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
  int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006c6:	2392      	movs	r3, #146	; 0x92
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9d 	bl	8000608 <poll_i2c_sensor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
  int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006d2:	2396      	movs	r3, #150	; 0x96
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff97 	bl	8000608 <poll_i2c_sensor>
 80006da:	4603      	mov	r3, r0
 80006dc:	813b      	strh	r3, [r7, #8]

  int16_t *results = malloc(4 * sizeof(int16_t));
 80006de:	2008      	movs	r0, #8
 80006e0:	f00f fa94 	bl	800fc0c <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
  results[0] = output1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	89fa      	ldrh	r2, [r7, #14]
 80006ec:	801a      	strh	r2, [r3, #0]
  results[1] = output2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3302      	adds	r3, #2
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	801a      	strh	r2, [r3, #0]
  results[2] = output3;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	897a      	ldrh	r2, [r7, #10]
 80006fc:	801a      	strh	r2, [r3, #0]
  results[3] = output4;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	893a      	ldrh	r2, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
  return results;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <do_auto_sweep>:
/**
 * @brief if auto sweep is enabled, will increase step
 *
 */
void do_auto_sweep()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	if (step == 9)
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <do_auto_sweep+0x80>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b09      	cmp	r3, #9
 800071a:	d109      	bne.n	8000730 <do_auto_sweep+0x20>
	  {
		  is_increasing = 0;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <do_auto_sweep+0x84>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
		  step--;
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <do_auto_sweep+0x80>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	3b01      	subs	r3, #1
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <do_auto_sweep+0x80>)
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e00c      	b.n	800074a <do_auto_sweep+0x3a>
	  }
	  else if (step == 0)
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <do_auto_sweep+0x80>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d108      	bne.n	800074a <do_auto_sweep+0x3a>
	  {
	    is_increasing = 1;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <do_auto_sweep+0x84>)
 800073a:	2201      	movs	r2, #1
 800073c:	601a      	str	r2, [r3, #0]
	    step++;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <do_auto_sweep+0x80>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <do_auto_sweep+0x80>)
 8000748:	701a      	strb	r2, [r3, #0]
	  }

	  if (is_increasing)
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <do_auto_sweep+0x84>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d006      	beq.n	8000760 <do_auto_sweep+0x50>
	  {
	    step++;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <do_auto_sweep+0x80>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <do_auto_sweep+0x80>)
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	e005      	b.n	800076c <do_auto_sweep+0x5c>
	  }
	  else
	  {
	    step--;
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <do_auto_sweep+0x80>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3b01      	subs	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <do_auto_sweep+0x80>)
 800076a:	701a      	strb	r2, [r3, #0]
	  }

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <do_auto_sweep+0x80>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <do_auto_sweep+0x88>)
 8000774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	4807      	ldr	r0, [pc, #28]	; (800079c <do_auto_sweep+0x8c>)
 800077e:	f003 fe96 	bl	80044ae <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000782:	2100      	movs	r1, #0
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <do_auto_sweep+0x8c>)
 8000786:	f003 fe40 	bl	800440a <HAL_DAC_Start>

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	240005a8 	.word	0x240005a8
 8000794:	24000028 	.word	0x24000028
 8000798:	24000000 	.word	0x24000000
 800079c:	24000274 	.word	0x24000274

080007a0 <spi>:
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi)
{
 80007a0:	b084      	sub	sp, #16
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	f107 0c18 	add.w	ip, r7, #24
 80007ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi,(uint8_t *)spiRxBuffer, 1, 1);
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	2301      	movs	r3, #1
 80007b4:	2201      	movs	r2, #1
 80007b6:	f107 0018 	add.w	r0, r7, #24
 80007ba:	f00b f837 	bl	800b82c <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 80007c2:	797b      	ldrb	r3, [r7, #5]
 80007c4:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007d0:	601a      	str	r2, [r3, #0]
	uint8_t* results = malloc(2 * sizeof(uint8_t));
 80007d2:	2002      	movs	r0, #2
 80007d4:	f00f fa1a 	bl	800fc0c <malloc>
 80007d8:	4603      	mov	r3, r0
 80007da:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	7bba      	ldrb	r2, [r7, #14]
 80007e0:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3301      	adds	r3, #1
 80007e6:	7bfa      	ldrb	r2, [r7, #15]
 80007e8:	701a      	strb	r2, [r3, #0]
	return results;
 80007ea:	68bb      	ldr	r3, [r7, #8]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f6:	b004      	add	sp, #16
 80007f8:	4770      	bx	lr
	...

080007fc <set_erpa_sweep>:
/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <set_erpa_sweep+0x28>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <set_erpa_sweep+0x2c>)
 8000808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <set_erpa_sweep+0x30>)
 8000812:	f003 fe4c 	bl	80044ae <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000816:	2100      	movs	r1, #0
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <set_erpa_sweep+0x30>)
 800081a:	f003 fdf6 	bl	800440a <HAL_DAC_Start>

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	240005a8 	.word	0x240005a8
 8000828:	24000000 	.word	0x24000000
 800082c:	24000274 	.word	0x24000274

08000830 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0

	uint16_t PA0 = ADC1Data[10]; 			// ENDmon -- verified
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <erpa_adc+0x44>)
 8000838:	8a9b      	ldrh	r3, [r3, #20]
 800083a:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3]; 			// SWPmon -- verified
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <erpa_adc+0x44>)
 800083e:	88db      	ldrh	r3, [r3, #6]
 8000840:	81bb      	strh	r3, [r7, #12]
	uint16_t PB0 = ADC1Data[5]; 			// TEMP1 -- verified
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <erpa_adc+0x44>)
 8000844:	895b      	ldrh	r3, [r3, #10]
 8000846:	817b      	strh	r3, [r7, #10]

	uint16_t* results = malloc(3 * sizeof(uint16_t));
 8000848:	2006      	movs	r0, #6
 800084a:	f00f f9df 	bl	800fc0c <malloc>
 800084e:	4603      	mov	r3, r0
 8000850:	607b      	str	r3, [r7, #4]
	results[0] = PA0;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	89fa      	ldrh	r2, [r7, #14]
 8000856:	801a      	strh	r2, [r3, #0]
	results[1] = PA7;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3302      	adds	r3, #2
 800085c:	89ba      	ldrh	r2, [r7, #12]
 800085e:	801a      	strh	r2, [r3, #0]
	results[2] = PB0;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3304      	adds	r3, #4
 8000864:	897a      	ldrh	r2, [r7, #10]
 8000866:	801a      	strh	r2, [r3, #0]

	return results;
 8000868:	687b      	ldr	r3, [r7, #4]


}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	24000580 	.word	0x24000580

08000878 <hk_adc1>:

uint16_t* hk_adc1() {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[11];			// BUSVmon -- verified
 800087e:	4b24      	ldr	r3, [pc, #144]	; (8000910 <hk_adc1+0x98>)
 8000880:	8adb      	ldrh	r3, [r3, #22]
 8000882:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[1];				// BUSImon -- acting weird
 8000884:	4b22      	ldr	r3, [pc, #136]	; (8000910 <hk_adc1+0x98>)
 8000886:	885b      	ldrh	r3, [r3, #2]
 8000888:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];				// 2v5mon -- verified
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <hk_adc1+0x98>)
 800088c:	899b      	ldrh	r3, [r3, #12]
 800088e:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// 3v3mon -- verified
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <hk_adc1+0x98>)
 8000892:	8a5b      	ldrh	r3, [r3, #18]
 8000894:	823b      	strh	r3, [r7, #16]
	uint16_t PC2 = ADC1Data[0];				// 5vmon -- NOT VERIFIED, ISSUES WITH PC2_C
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <hk_adc1+0x98>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	81fb      	strh	r3, [r7, #14]
	uint16_t PC3 = ADC1Data[8];				// n3v3mon -- NOT VERIFIED, ISSUES WITH PC3_C
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <hk_adc1+0x98>)
 800089e:	8a1b      	ldrh	r3, [r3, #16]
 80008a0:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// n5vmon -- verified
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <hk_adc1+0x98>)
 80008a4:	89db      	ldrh	r3, [r3, #14]
 80008a6:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];				// 15vmon -- verified
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <hk_adc1+0x98>)
 80008aa:	891b      	ldrh	r3, [r3, #8]
 80008ac:	813b      	strh	r3, [r7, #8]
	uint16_t PB1 = ADC1Data[2];			// 5vrefmon --
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <hk_adc1+0x98>)
 80008b0:	889b      	ldrh	r3, [r3, #4]
 80008b2:	80fb      	strh	r3, [r7, #6]

	uint16_t* results = malloc(9 * sizeof(uint16_t));
 80008b4:	2012      	movs	r0, #18
 80008b6:	f00f f9a9 	bl	800fc0c <malloc>
 80008ba:	4603      	mov	r3, r0
 80008bc:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	8afa      	ldrh	r2, [r7, #22]
 80008c2:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	3302      	adds	r3, #2
 80008c8:	8aba      	ldrh	r2, [r7, #20]
 80008ca:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	3304      	adds	r3, #4
 80008d0:	8a7a      	ldrh	r2, [r7, #18]
 80008d2:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	3306      	adds	r3, #6
 80008d8:	8a3a      	ldrh	r2, [r7, #16]
 80008da:	801a      	strh	r2, [r3, #0]
	results[4] = PC2;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	3308      	adds	r3, #8
 80008e0:	89fa      	ldrh	r2, [r7, #14]
 80008e2:	801a      	strh	r2, [r3, #0]
	results[5] = PC3;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	330a      	adds	r3, #10
 80008e8:	89ba      	ldrh	r2, [r7, #12]
 80008ea:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	330c      	adds	r3, #12
 80008f0:	897a      	ldrh	r2, [r7, #10]
 80008f2:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	330e      	adds	r3, #14
 80008f8:	893a      	ldrh	r2, [r7, #8]
 80008fa:	801a      	strh	r2, [r3, #0]
	results[8] = PB1;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	3310      	adds	r3, #16
 8000900:	88fa      	ldrh	r2, [r7, #6]
 8000902:	801a      	strh	r2, [r3, #0]

	return results;
 8000904:	683b      	ldr	r3, [r7, #0]

}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	24000580 	.word	0x24000580

08000914 <hk_adc3>:

uint16_t* hk_adc3() {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[1];
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <hk_adc3+0x50>)
 800091c:	885b      	ldrh	r3, [r3, #2]
 800091e:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[2];
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <hk_adc3+0x50>)
 8000922:	889b      	ldrh	r3, [r3, #4]
 8000924:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2_C = ADC3Data[0]; 		// n200v
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <hk_adc3+0x50>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	817b      	strh	r3, [r7, #10]
	uint16_t PC3_C = ADC3Data[3];		// n800v
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <hk_adc3+0x50>)
 800092e:	88db      	ldrh	r3, [r3, #6]
 8000930:	813b      	strh	r3, [r7, #8]

	uint16_t* results = malloc(4 * sizeof(uint16_t));
 8000932:	2008      	movs	r0, #8
 8000934:	f00f f96a 	bl	800fc0c <malloc>
 8000938:	4603      	mov	r3, r0
 800093a:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	89fa      	ldrh	r2, [r7, #14]
 8000940:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3302      	adds	r3, #2
 8000946:	89ba      	ldrh	r2, [r7, #12]
 8000948:	801a      	strh	r2, [r3, #0]
	results[2] = PC2_C;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3304      	adds	r3, #4
 800094e:	897a      	ldrh	r2, [r7, #10]
 8000950:	801a      	strh	r2, [r3, #0]
	results[3] = PC3_C;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3306      	adds	r3, #6
 8000956:	893a      	ldrh	r2, [r7, #8]
 8000958:	801a      	strh	r2, [r3, #0]

	return results;
 800095a:	687b      	ldr	r3, [r7, #4]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	240005a0 	.word	0x240005a0

08000968 <send_erpa_packet>:
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t* erpa_spi, uint16_t *erpa_adc_results)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  						// ERPA SYNC 0xAA MSB
 8000972:	23aa      	movs	r3, #170	; 0xaa
 8000974:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  						// ERPA SYNC 0xAA LSB
 8000976:	23aa      	movs	r3, #170	; 0xaa
 8000978:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 						// ERPA SEQ # MSB
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <send_erpa_packet+0xa0>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	b29b      	uxth	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          						// ERPA SEQ # MSB
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <send_erpa_packet+0xa0>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((erpa_adc_results[0] & 0xFF00) >> 8); 	  		// ENDmon MSB
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	b29b      	uxth	r3, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (erpa_adc_results[0] & 0xFF);               		// ENDmon LSB
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[1] & 0xFF00) >> 8);      		// SWP Monitored MSB
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	3302      	adds	r3, #2
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[1] & 0xFF);               		// SWP Monitored LSB
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	3302      	adds	r3, #2
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[2] & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	3304      	adds	r3, #4
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[2] & 0xFF);               		// TEMPURATURE 1 LSB
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	3304      	adds	r3, #4
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     						// TEMPURATURE 2 MSB
 80009d2:	2300      	movs	r3, #0
 80009d4:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    					// TEMPURATURE 2 LSB
 80009d6:	2300      	movs	r3, #0
 80009d8:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];										// ERPA eADC MSB
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];										// ERPA eADC LSB
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	785b      	ldrb	r3, [r3, #1]
 80009e4:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80009e6:	f107 0108 	add.w	r1, r7, #8
 80009ea:	2364      	movs	r3, #100	; 0x64
 80009ec:	220e      	movs	r2, #14
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <send_erpa_packet+0xa4>)
 80009f0:	f00c fdca 	bl	800d588 <HAL_UART_Transmit>
	erpa_seq++;
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <send_erpa_packet+0xa0>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <send_erpa_packet+0xa0>)
 80009fe:	801a      	strh	r2, [r3, #0]

}
 8000a00:	bf00      	nop
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	240005b0 	.word	0x240005b0
 8000a0c:	2400047c 	.word	0x2400047c

08000a10 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results, uint16_t *hk_adc3_results)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	; 0x38
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];

	hk_buf[0] = hk_sync;                     		// HK SYNC 0xCC MSB					0 SYNC
 8000a1c:	23cc      	movs	r3, #204	; 0xcc
 8000a1e:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     		// HK SYNC 0xCC LSB
 8000a20:	23cc      	movs	r3, #204	; 0xcc
 8000a22:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    		// HK SEQ # MSB		1 SEQUENCE
 8000a24:	4b7d      	ldr	r3, [pc, #500]	; (8000c1c <send_hk_packet+0x20c>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             		// HK SEQ # LSB
 8000a30:	4b7a      	ldr	r3, [pc, #488]	; (8000c1c <send_hk_packet+0x20c>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3302      	adds	r3, #2
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a6a:	121b      	asrs	r3, r3, #8
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a82:	121b      	asrs	r3, r3, #8
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3304      	adds	r3, #4
 8000a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a9c:	121b      	asrs	r3, r3, #8
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3306      	adds	r3, #6
 8000ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab6:	121b      	asrs	r3, r3, #8
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3306      	adds	r3, #6
 8000ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	3302      	adds	r3, #2
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	3304      	adds	r3, #4
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	3304      	adds	r3, #4
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc1_results[3] & 0xFF00) >> 8);
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3306      	adds	r3, #6
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc1_results[3] & 0xFF);
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	3306      	adds	r3, #6
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[4] & 0xFF00) >> 8);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	3308      	adds	r3, #8
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[4] & 0xFF);
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	3308      	adds	r3, #8
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[5] & 0xFF00) >> 8);
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	330a      	adds	r3, #10
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	0a1b      	lsrs	r3, r3, #8
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[5] & 0xFF);
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	330a      	adds	r3, #10
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc1_results[6] & 0xFF00) >> 8);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	330c      	adds	r3, #12
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	0a1b      	lsrs	r3, r3, #8
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc1_results[6] & 0xFF);
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	330c      	adds	r3, #12
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	330e      	adds	r3, #14
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	0a1b      	lsrs	r3, r3, #8
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	330e      	adds	r3, #14
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	3310      	adds	r3, #16
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	0a1b      	lsrs	r3, r3, #8
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	3310      	adds	r3, #16
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc3_results[2] & 0xFF00) >> 8);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	0a1b      	lsrs	r3, r3, #8
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc3_results[2] & 0xFF);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3304      	adds	r3, #4
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc3_results[3] & 0xFF00) >> 8);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3306      	adds	r3, #6
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	0a1b      	lsrs	r3, r3, #8
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc3_results[3] & 0xFF);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3306      	adds	r3, #6
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000bf8:	f107 0110 	add.w	r1, r7, #16
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	2226      	movs	r2, #38	; 0x26
 8000c00:	4807      	ldr	r0, [pc, #28]	; (8000c20 <send_hk_packet+0x210>)
 8000c02:	f00c fcc1 	bl	800d588 <HAL_UART_Transmit>
	hk_seq++;
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <send_hk_packet+0x20c>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <send_hk_packet+0x20c>)
 8000c10:	801a      	strh	r2, [r3, #0]


}
 8000c12:	bf00      	nop
 8000c14:	3738      	adds	r7, #56	; 0x38
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	240005b4 	.word	0x240005b4
 8000c20:	2400047c 	.word	0x2400047c

08000c24 <send_pmt_packet>:
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t* pmt_spi)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;
 8000c2c:	23bb      	movs	r3, #187	; 0xbb
 8000c2e:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;
 8000c30:	23bb      	movs	r3, #187	; 0xbb
 8000c32:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <send_pmt_packet+0x54>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <send_pmt_packet+0x54>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	785b      	ldrb	r3, [r3, #1]
 8000c52:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000c54:	f107 0108 	add.w	r1, r7, #8
 8000c58:	2364      	movs	r3, #100	; 0x64
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	4807      	ldr	r0, [pc, #28]	; (8000c7c <send_pmt_packet+0x58>)
 8000c5e:	f00c fc93 	bl	800d588 <HAL_UART_Transmit>
	pmt_seq++;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <send_pmt_packet+0x54>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <send_pmt_packet+0x54>)
 8000c6c:	801a      	strh	r2, [r3, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	240005b2 	.word	0x240005b2
 8000c7c:	2400047c 	.word	0x2400047c

08000c80 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b0a7      	sub	sp, #156	; 0x9c
 8000c84:	af1e      	add	r7, sp, #120	; 0x78
 8000c86:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a3b      	ldr	r2, [pc, #236]	; (8000d78 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d14b      	bne.n	8000d28 <HAL_TIM_OC_DelayElapsedCallback+0xa8>
  {
      if (ERPA_ON)
 8000c90:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d02b      	beq.n	8000cf0 <HAL_TIM_OC_DelayElapsedCallback+0x70>
      {


		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {}
 8000c98:	bf00      	nop
 8000c9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c9e:	4838      	ldr	r0, [pc, #224]	; (8000d80 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000ca0:	f006 fd46 	bl	8007730 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f7      	bne.n	8000c9a <HAL_TIM_OC_DelayElapsedCallback+0x1a>

		uint8_t* spi2_results = spi(hspi2);
 8000caa:	4c36      	ldr	r4, [pc, #216]	; (8000d84 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000cac:	4668      	mov	r0, sp
 8000cae:	f104 0310 	add.w	r3, r4, #16
 8000cb2:	2278      	movs	r2, #120	; 0x78
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f00e ffb9 	bl	800fc2c <memcpy>
 8000cba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cbe:	f7ff fd6f 	bl	80007a0 <spi>
 8000cc2:	61b8      	str	r0, [r7, #24]
        uint16_t *erpa_adc_results = erpa_adc();
 8000cc4:	f7ff fdb4 	bl	8000830 <erpa_adc>
 8000cc8:	6178      	str	r0, [r7, #20]

        if (auto_sweep)
 8000cca:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x58>
		{
		  do_auto_sweep();
 8000cd2:	f7ff fd1d 	bl	8000710 <do_auto_sweep>
 8000cd6:	e001      	b.n	8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x5c>
		} else {
		  set_erpa_sweep();
 8000cd8:	f7ff fd90 	bl	80007fc <set_erpa_sweep>
		}


		send_erpa_packet(spi2_results, erpa_adc_results);
 8000cdc:	6979      	ldr	r1, [r7, #20]
 8000cde:	69b8      	ldr	r0, [r7, #24]
 8000ce0:	f7ff fe42 	bl	8000968 <send_erpa_packet>

		free(spi2_results);
 8000ce4:	69b8      	ldr	r0, [r7, #24]
 8000ce6:	f00e ff99 	bl	800fc1c <free>
		free(erpa_adc_results);
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f00e ff96 	bl	800fc1c <free>
      }
      if (HK_ON)
 8000cf0:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d03b      	beq.n	8000d70 <HAL_TIM_OC_DelayElapsedCallback+0xf0>
      {
    	  int16_t *i2c_values = i2c();
 8000cf8:	f7ff fcd6 	bl	80006a8 <i2c>
 8000cfc:	6138      	str	r0, [r7, #16]
    	  uint16_t* hk_adc1_results = hk_adc1();
 8000cfe:	f7ff fdbb 	bl	8000878 <hk_adc1>
 8000d02:	60f8      	str	r0, [r7, #12]
    	  uint16_t* hk_adc3_results = hk_adc3();
 8000d04:	f7ff fe06 	bl	8000914 <hk_adc3>
 8000d08:	60b8      	str	r0, [r7, #8]


    	  send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	68f9      	ldr	r1, [r7, #12]
 8000d0e:	6938      	ldr	r0, [r7, #16]
 8000d10:	f7ff fe7e 	bl	8000a10 <send_hk_packet>


          free(i2c_values);
 8000d14:	6938      	ldr	r0, [r7, #16]
 8000d16:	f00e ff81 	bl	800fc1c <free>
          free(hk_adc1_results);
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f00e ff7e 	bl	800fc1c <free>
          free(hk_adc3_results);
 8000d20:	68b8      	ldr	r0, [r7, #8]
 8000d22:	f00e ff7b 	bl	800fc1c <free>
  		send_pmt_packet(spi1_results);

		free(spi1_results);
      }
  }
}
 8000d26:	e023      	b.n	8000d70 <HAL_TIM_OC_DelayElapsedCallback+0xf0>
  else if (htim == &htim1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d11f      	bne.n	8000d70 <HAL_TIM_OC_DelayElapsedCallback+0xf0>
      if (PMT_ON)
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d01b      	beq.n	8000d70 <HAL_TIM_OC_DelayElapsedCallback+0xf0>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {}
 8000d38:	bf00      	nop
 8000d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3e:	4816      	ldr	r0, [pc, #88]	; (8000d98 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8000d40:	f006 fcf6 	bl	8007730 <HAL_GPIO_ReadPin>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1f7      	bne.n	8000d3a <HAL_TIM_OC_DelayElapsedCallback+0xba>
  		uint8_t* spi1_results = spi(hspi1);
 8000d4a:	4c14      	ldr	r4, [pc, #80]	; (8000d9c <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8000d4c:	4668      	mov	r0, sp
 8000d4e:	f104 0310 	add.w	r3, r4, #16
 8000d52:	2278      	movs	r2, #120	; 0x78
 8000d54:	4619      	mov	r1, r3
 8000d56:	f00e ff69 	bl	800fc2c <memcpy>
 8000d5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d5e:	f7ff fd1f 	bl	80007a0 <spi>
 8000d62:	61f8      	str	r0, [r7, #28]
  		send_pmt_packet(spi1_results);
 8000d64:	69f8      	ldr	r0, [r7, #28]
 8000d66:	f7ff ff5d 	bl	8000c24 <send_pmt_packet>
		free(spi1_results);
 8000d6a:	69f8      	ldr	r0, [r7, #28]
 8000d6c:	f00e ff56 	bl	800fc1c <free>
}
 8000d70:	bf00      	nop
 8000d72:	3724      	adds	r7, #36	; 0x24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	24000430 	.word	0x24000430
 8000d7c:	240005b7 	.word	0x240005b7
 8000d80:	58020400 	.word	0x58020400
 8000d84:	2400035c 	.word	0x2400035c
 8000d88:	240005ac 	.word	0x240005ac
 8000d8c:	240005b8 	.word	0x240005b8
 8000d90:	240003e4 	.word	0x240003e4
 8000d94:	240005b6 	.word	0x240005b6
 8000d98:	58020000 	.word	0x58020000
 8000d9c:	240002d4 	.word	0x240002d4

08000da0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000da8:	2201      	movs	r2, #1
 8000daa:	49a0      	ldr	r1, [pc, #640]	; (800102c <HAL_UART_RxCpltCallback+0x28c>)
 8000dac:	48a0      	ldr	r0, [pc, #640]	; (8001030 <HAL_UART_RxCpltCallback+0x290>)
 8000dae:	f00c fc81 	bl	800d6b4 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000db2:	4b9e      	ldr	r3, [pc, #632]	; (800102c <HAL_UART_RxCpltCallback+0x28c>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2b1d      	cmp	r3, #29
 8000dbc:	f200 8131 	bhi.w	8001022 <HAL_UART_RxCpltCallback+0x282>
 8000dc0:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <HAL_UART_RxCpltCallback+0x28>)
 8000dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc6:	bf00      	nop
 8000dc8:	08000ecd 	.word	0x08000ecd
 8000dcc:	08000ee9 	.word	0x08000ee9
 8000dd0:	08000f05 	.word	0x08000f05
 8000dd4:	08000f25 	.word	0x08000f25
 8000dd8:	08000f45 	.word	0x08000f45
 8000ddc:	08000f61 	.word	0x08000f61
 8000de0:	08000f81 	.word	0x08000f81
 8000de4:	08000fa1 	.word	0x08000fa1
 8000de8:	08000e5d 	.word	0x08000e5d
 8000dec:	08000e6b 	.word	0x08000e6b
 8000df0:	08000e4f 	.word	0x08000e4f
 8000df4:	08000e41 	.word	0x08000e41
 8000df8:	08000fbd 	.word	0x08000fbd
 8000dfc:	08000fcd 	.word	0x08000fcd
 8000e00:	08000fed 	.word	0x08000fed
 8000e04:	0800100d 	.word	0x0800100d
 8000e08:	08000fdd 	.word	0x08000fdd
 8000e0c:	08000ffd 	.word	0x08000ffd
 8000e10:	08001015 	.word	0x08001015
 8000e14:	08000edb 	.word	0x08000edb
 8000e18:	08000ef7 	.word	0x08000ef7
 8000e1c:	08000f15 	.word	0x08000f15
 8000e20:	08000f35 	.word	0x08000f35
 8000e24:	08000f53 	.word	0x08000f53
 8000e28:	08000f71 	.word	0x08000f71
 8000e2c:	08000f91 	.word	0x08000f91
 8000e30:	08000faf 	.word	0x08000faf
 8000e34:	08000e79 	.word	0x08000e79
 8000e38:	08000e91 	.word	0x08000e91
 8000e3c:	08000ea9 	.word	0x08000ea9
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000e40:	4b7c      	ldr	r3, [pc, #496]	; (8001034 <HAL_UART_RxCpltCallback+0x294>)
 8000e42:	2140      	movs	r1, #64	; 0x40
 8000e44:	2201      	movs	r2, #1
 8000e46:	4618      	mov	r0, r3
 8000e48:	f006 fc8a 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000e4c:	e0e9      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000e4e:	4b79      	ldr	r3, [pc, #484]	; (8001034 <HAL_UART_RxCpltCallback+0x294>)
 8000e50:	2140      	movs	r1, #64	; 0x40
 8000e52:	2200      	movs	r2, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f006 fc83 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000e5a:	e0e2      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000e5c:	4b75      	ldr	r3, [pc, #468]	; (8001034 <HAL_UART_RxCpltCallback+0x294>)
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	2201      	movs	r2, #1
 8000e62:	4618      	mov	r0, r3
 8000e64:	f006 fc7c 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000e68:	e0db      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000e6a:	4b72      	ldr	r3, [pc, #456]	; (8001034 <HAL_UART_RxCpltCallback+0x294>)
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f006 fc75 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000e76:	e0d4      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x1B:
  {
	  if (step < 9)
 8000e78:	4b6f      	ldr	r3, [pc, #444]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	f200 80cd 	bhi.w	800101c <HAL_UART_RxCpltCallback+0x27c>
	  {
		step++;
 8000e82:	4b6d      	ldr	r3, [pc, #436]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b6b      	ldr	r3, [pc, #428]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000e8c:	701a      	strb	r2, [r3, #0]
	  }
	  break;
 8000e8e:	e0c5      	b.n	800101c <HAL_UART_RxCpltCallback+0x27c>
  }
  case 0x1C:
  {
    if (step > 0)
 8000e90:	4b69      	ldr	r3, [pc, #420]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 80c3 	beq.w	8001020 <HAL_UART_RxCpltCallback+0x280>
    {
      step--;
 8000e9a:	4b67      	ldr	r3, [pc, #412]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b65      	ldr	r3, [pc, #404]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000ea4:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000ea6:	e0bb      	b.n	8001020 <HAL_UART_RxCpltCallback+0x280>
  }
  case 0x1D: {
	if (!auto_sweep) {
 8000ea8:	4b64      	ldr	r3, [pc, #400]	; (800103c <HAL_UART_RxCpltCallback+0x29c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d106      	bne.n	8000ebe <HAL_UART_RxCpltCallback+0x11e>
		auto_sweep = 1;
 8000eb0:	4b62      	ldr	r3, [pc, #392]	; (800103c <HAL_UART_RxCpltCallback+0x29c>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
		step = 0;
 8000eb6:	4b60      	ldr	r3, [pc, #384]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
	} else {
		auto_sweep = 0;
		step = 0;
	}
  	break;
 8000ebc:	e0b1      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
		auto_sweep = 0;
 8000ebe:	4b5f      	ldr	r3, [pc, #380]	; (800103c <HAL_UART_RxCpltCallback+0x29c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
		step = 0;
 8000ec4:	4b5c      	ldr	r3, [pc, #368]	; (8001038 <HAL_UART_RxCpltCallback+0x298>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
  	break;
 8000eca:	e0aa      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
   }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000ecc:	4b5c      	ldr	r3, [pc, #368]	; (8001040 <HAL_UART_RxCpltCallback+0x2a0>)
 8000ece:	2120      	movs	r1, #32
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f006 fc44 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000ed8:	e0a3      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000eda:	4b59      	ldr	r3, [pc, #356]	; (8001040 <HAL_UART_RxCpltCallback+0x2a0>)
 8000edc:	2120      	movs	r1, #32
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f006 fc3d 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000ee6:	e09c      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000ee8:	4b55      	ldr	r3, [pc, #340]	; (8001040 <HAL_UART_RxCpltCallback+0x2a0>)
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	2201      	movs	r2, #1
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f006 fc36 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000ef4:	e095      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000ef6:	4b52      	ldr	r3, [pc, #328]	; (8001040 <HAL_UART_RxCpltCallback+0x2a0>)
 8000ef8:	2140      	movs	r1, #64	; 0x40
 8000efa:	2200      	movs	r2, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f006 fc2f 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000f02:	e08e      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000f04:	4b4f      	ldr	r3, [pc, #316]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f006 fc27 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000f12:	e086      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000f14:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f006 fc1f 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000f22:	e07e      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000f24:	4b47      	ldr	r3, [pc, #284]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f006 fc17 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000f32:	e076      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000f34:	4b43      	ldr	r3, [pc, #268]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f006 fc0f 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000f42:	e06e      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000f44:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f006 fc08 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000f50:	e067      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000f52:	4b3c      	ldr	r3, [pc, #240]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	2200      	movs	r2, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f006 fc01 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000f5e:	e060      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000f60:	4b38      	ldr	r3, [pc, #224]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f66:	2201      	movs	r2, #1
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f006 fbf9 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000f6e:	e058      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000f70:	4b34      	ldr	r3, [pc, #208]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f76:	2200      	movs	r2, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 fbf1 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000f7e:	e050      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f86:	2201      	movs	r2, #1
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f006 fbe9 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000f8e:	e048      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000f90:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f96:	2200      	movs	r2, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f006 fbe1 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000f9e:	e040      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000fa0:	4b28      	ldr	r3, [pc, #160]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 fbda 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000fac:	e039      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <HAL_UART_RxCpltCallback+0x2a4>)
 8000fb0:	2140      	movs	r1, #64	; 0x40
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f006 fbd3 	bl	8007760 <HAL_GPIO_WritePin>
    break;
 8000fba:	e032      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000fbc:	f001 fcc6 	bl	800294c <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f007 f970 	bl	80082a8 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000fc8:	f7ff fb08 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	481d      	ldr	r0, [pc, #116]	; (800104c <HAL_UART_RxCpltCallback+0x2ac>)
 8000fd6:	f00b f8d7 	bl	800c188 <HAL_TIM_OC_Start_IT>
    break;
 8000fda:	e022      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4819      	ldr	r0, [pc, #100]	; (800104c <HAL_UART_RxCpltCallback+0x2ac>)
 8000fe6:	f00b fa29 	bl	800c43c <HAL_TIM_OC_Stop_IT>

    break;
 8000fea:	e01a      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_UART_RxCpltCallback+0x2b0>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000ff2:	210c      	movs	r1, #12
 8000ff4:	4817      	ldr	r0, [pc, #92]	; (8001054 <HAL_UART_RxCpltCallback+0x2b4>)
 8000ff6:	f00b f8c7 	bl	800c188 <HAL_TIM_OC_Start_IT>
    break;
 8000ffa:	e012      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_UART_RxCpltCallback+0x2b0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001002:	210c      	movs	r1, #12
 8001004:	4813      	ldr	r0, [pc, #76]	; (8001054 <HAL_UART_RxCpltCallback+0x2b4>)
 8001006:	f00b fa19 	bl	800c43c <HAL_TIM_OC_Stop_IT>

    break;
 800100a:	e00a      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x0F:
  {
    HK_ON = 1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_UART_RxCpltCallback+0x2b8>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
    break;
 8001012:	e006      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
  }
  case 0x12:
  {
    HK_ON = 0;
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_UART_RxCpltCallback+0x2b8>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
    break;
 800101a:	e002      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
	  break;
 800101c:	bf00      	nop
 800101e:	e000      	b.n	8001022 <HAL_UART_RxCpltCallback+0x282>
    break;
 8001020:	bf00      	nop
  }
  }
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2400050c 	.word	0x2400050c
 8001030:	2400047c 	.word	0x2400047c
 8001034:	58021400 	.word	0x58021400
 8001038:	240005a8 	.word	0x240005a8
 800103c:	240005ac 	.word	0x240005ac
 8001040:	58020400 	.word	0x58020400
 8001044:	58020800 	.word	0x58020800
 8001048:	240005b6 	.word	0x240005b6
 800104c:	240003e4 	.word	0x240003e4
 8001050:	240005b7 	.word	0x240005b7
 8001054:	24000430 	.word	0x24000430
 8001058:	240005b8 	.word	0x240005b8

0800105c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001060:	f001 fbbe 	bl	80027e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001064:	f000 f868 	bl	8001138 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001068:	f000 f8ec 	bl	8001244 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106c:	f000 fd66 	bl	8001b3c <MX_GPIO_Init>
  MX_DAC1_Init();
 8001070:	f000 fada 	bl	8001628 <MX_DAC1_Init>
  MX_TIM1_Init();
 8001074:	f000 fc04 	bl	8001880 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001078:	f000 fc92 	bl	80019a0 <MX_TIM2_Init>
  MX_I2C1_Init();
 800107c:	f000 fb10 	bl	80016a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001080:	f000 fb4e 	bl	8001720 <MX_SPI1_Init>
  MX_DMA_Init();
 8001084:	f000 fd32 	bl	8001aec <MX_DMA_Init>
  MX_ADC1_Init();
 8001088:	f000 f90a 	bl	80012a0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800108c:	f000 fce2 	bl	8001a54 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8001090:	f000 fa38 	bl	8001504 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001094:	f000 fb9c 	bl	80017d0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

//  SYSCFG->PMCR &= ~(1 << 27);
//  SYSCFG->PMCR &= ~(1 << 26);

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8001098:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800109c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010a0:	481f      	ldr	r0, [pc, #124]	; (8001120 <main+0xc4>)
 80010a2:	f002 ff3f 	bl	8003f24 <HAL_ADCEx_Calibration_Start>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <main+0x54>
  {
    /* Calibration Error */
    Error_Handler();
 80010ac:	f000 fe70 	bl	8001d90 <Error_Handler>
  }

  if (HAL_ADC_Start_DMA(&hadc1,
 80010b0:	220c      	movs	r2, #12
 80010b2:	491c      	ldr	r1, [pc, #112]	; (8001124 <main+0xc8>)
 80010b4:	481a      	ldr	r0, [pc, #104]	; (8001120 <main+0xc4>)
 80010b6:	f002 f82b 	bl	8003110 <HAL_ADC_Start_DMA>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <main+0x68>
		  (uint32_t *)ADC1Data,
		  ADC1NumChannels
		  ) != HAL_OK) {
	  Error_Handler();
 80010c0:	f000 fe66 	bl	8001d90 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80010c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010cc:	4816      	ldr	r0, [pc, #88]	; (8001128 <main+0xcc>)
 80010ce:	f002 ff29 	bl	8003f24 <HAL_ADCEx_Calibration_Start>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <main+0x80>
  {
	/* Calibration Error */
	Error_Handler();
 80010d8:	f000 fe5a 	bl	8001d90 <Error_Handler>
  }

  if (HAL_ADC_Start_DMA(&hadc3,
 80010dc:	2204      	movs	r2, #4
 80010de:	4913      	ldr	r1, [pc, #76]	; (800112c <main+0xd0>)
 80010e0:	4811      	ldr	r0, [pc, #68]	; (8001128 <main+0xcc>)
 80010e2:	f002 f815 	bl	8003110 <HAL_ADC_Start_DMA>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <main+0x94>
		  (uint32_t *)ADC3Data,
		  ADC3NumChannels)
		  != HAL_OK) {
	  Error_Handler();
 80010ec:	f000 fe50 	bl	8001d90 <Error_Handler>
  }


  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80010f0:	bf00      	nop
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <main+0xd4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d0f7      	beq.n	80010f2 <main+0x96>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001102:	bf00      	nop
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <main+0xd4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001112:	d1f7      	bne.n	8001104 <main+0xa8>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8001114:	2201      	movs	r2, #1
 8001116:	4907      	ldr	r1, [pc, #28]	; (8001134 <main+0xd8>)
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <main+0xd4>)
 800111a:	f00c facb 	bl	800d6b4 <HAL_UART_Receive_IT>
 800111e:	e7f9      	b.n	8001114 <main+0xb8>
 8001120:	240000bc 	.word	0x240000bc
 8001124:	24000580 	.word	0x24000580
 8001128:	24000120 	.word	0x24000120
 800112c:	240005a0 	.word	0x240005a0
 8001130:	2400047c 	.word	0x2400047c
 8001134:	2400050c 	.word	0x2400050c

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b09c      	sub	sp, #112	; 0x70
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	224c      	movs	r2, #76	; 0x4c
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f00e fd7e 	bl	800fc48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2220      	movs	r2, #32
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f00e fd78 	bl	800fc48 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001158:	2002      	movs	r0, #2
 800115a:	f007 f8e1 	bl	8008320 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	4b35      	ldr	r3, [pc, #212]	; (8001238 <SystemClock_Config+0x100>)
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001166:	4a34      	ldr	r2, [pc, #208]	; (8001238 <SystemClock_Config+0x100>)
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800116e:	4b32      	ldr	r3, [pc, #200]	; (8001238 <SystemClock_Config+0x100>)
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	4b30      	ldr	r3, [pc, #192]	; (800123c <SystemClock_Config+0x104>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001180:	4a2e      	ldr	r2, [pc, #184]	; (800123c <SystemClock_Config+0x104>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b2c      	ldr	r3, [pc, #176]	; (800123c <SystemClock_Config+0x104>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001194:	bf00      	nop
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <SystemClock_Config+0x104>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800119e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a2:	d1f8      	bne.n	8001196 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <SystemClock_Config+0x108>)
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	4a25      	ldr	r2, [pc, #148]	; (8001240 <SystemClock_Config+0x108>)
 80011aa:	f023 0303 	bic.w	r3, r3, #3
 80011ae:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b0:	2302      	movs	r3, #2
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2340      	movs	r3, #64	; 0x40
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c0:	2300      	movs	r3, #0
 80011c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011c4:	2304      	movs	r3, #4
 80011c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80011c8:	230c      	movs	r3, #12
 80011ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011d8:	230c      	movs	r3, #12
 80011da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011dc:	2300      	movs	r3, #0
 80011de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	4618      	mov	r0, r3
 80011ea:	f007 f8d3 	bl	8008394 <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011f4:	f000 fdcc 	bl	8001d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	233f      	movs	r3, #63	; 0x3f
 80011fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2303      	movs	r3, #3
 80011fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001204:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2101      	movs	r1, #1
 800121e:	4618      	mov	r0, r3
 8001220:	f007 fce6 	bl	8008bf0 <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800122a:	f000 fdb1 	bl	8001d90 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3770      	adds	r7, #112	; 0x70
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	58000400 	.word	0x58000400
 800123c:	58024800 	.word	0x58024800
 8001240:	58024400 	.word	0x58024400

08001244 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0b0      	sub	sp, #192	; 0xc0
 8001248:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	22bc      	movs	r2, #188	; 0xbc
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f00e fcf9 	bl	800fc48 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001256:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800125a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800125c:	2304      	movs	r3, #4
 800125e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001260:	2309      	movs	r3, #9
 8001262:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001268:	2302      	movs	r3, #2
 800126a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800126c:	2302      	movs	r3, #2
 800126e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001270:	23c0      	movs	r3, #192	; 0xc0
 8001272:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001274:	2320      	movs	r3, #32
 8001276:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001278:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4618      	mov	r0, r3
 8001288:	f008 f83e 	bl	8009308 <HAL_RCCEx_PeriphCLKConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8001292:	f000 fd7d 	bl	8001d90 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	37c0      	adds	r7, #192	; 0xc0
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b2:	463b      	mov	r3, r7
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
 80012c0:	615a      	str	r2, [r3, #20]
 80012c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012c4:	4b81      	ldr	r3, [pc, #516]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012c6:	4a82      	ldr	r2, [pc, #520]	; (80014d0 <MX_ADC1_Init+0x230>)
 80012c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012ca:	4b80      	ldr	r3, [pc, #512]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d2:	4b7e      	ldr	r3, [pc, #504]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012d4:	2208      	movs	r2, #8
 80012d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012d8:	4b7c      	ldr	r3, [pc, #496]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012da:	2201      	movs	r2, #1
 80012dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012de:	4b7b      	ldr	r3, [pc, #492]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012e0:	2204      	movs	r2, #4
 80012e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012e4:	4b79      	ldr	r3, [pc, #484]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ea:	4b78      	ldr	r3, [pc, #480]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 12;
 80012f0:	4b76      	ldr	r3, [pc, #472]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f6:	4b75      	ldr	r3, [pc, #468]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012fc:	4b73      	ldr	r3, [pc, #460]	; (80014cc <MX_ADC1_Init+0x22c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001302:	4b72      	ldr	r3, [pc, #456]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001308:	4b70      	ldr	r3, [pc, #448]	; (80014cc <MX_ADC1_Init+0x22c>)
 800130a:	2203      	movs	r2, #3
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800130e:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001310:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001314:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001316:	4b6d      	ldr	r3, [pc, #436]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001318:	2200      	movs	r2, #0
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800131c:	4b6b      	ldr	r3, [pc, #428]	; (80014cc <MX_ADC1_Init+0x22c>)
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001324:	4869      	ldr	r0, [pc, #420]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001326:	f001 fd51 	bl	8002dcc <HAL_ADC_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001330:	f000 fd2e 	bl	8001d90 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4863      	ldr	r0, [pc, #396]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001340:	f002 fe54 	bl	8003fec <HAL_ADCEx_MultiModeConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800134a:	f000 fd21 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800134e:	4b61      	ldr	r3, [pc, #388]	; (80014d4 <MX_ADC1_Init+0x234>)
 8001350:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001352:	2306      	movs	r3, #6
 8001354:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001356:	2307      	movs	r3, #7
 8001358:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800135a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800135e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001360:	2304      	movs	r3, #4
 8001362:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4856      	ldr	r0, [pc, #344]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001372:	f001 ffa5 	bl	80032c0 <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800137c:	f000 fd08 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001380:	4b55      	ldr	r3, [pc, #340]	; (80014d8 <MX_ADC1_Init+0x238>)
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001384:	230c      	movs	r3, #12
 8001386:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	484f      	ldr	r0, [pc, #316]	; (80014cc <MX_ADC1_Init+0x22c>)
 800138e:	f001 ff97 	bl	80032c0 <HAL_ADC_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001398:	f000 fcfa 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800139c:	4b4f      	ldr	r3, [pc, #316]	; (80014dc <MX_ADC1_Init+0x23c>)
 800139e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013a0:	2312      	movs	r3, #18
 80013a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4848      	ldr	r0, [pc, #288]	; (80014cc <MX_ADC1_Init+0x22c>)
 80013aa:	f001 ff89 	bl	80032c0 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80013b4:	f000 fcec 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013b8:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <MX_ADC1_Init+0x240>)
 80013ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013bc:	2318      	movs	r3, #24
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4841      	ldr	r0, [pc, #260]	; (80014cc <MX_ADC1_Init+0x22c>)
 80013c6:	f001 ff7b 	bl	80032c0 <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80013d0:	f000 fcde 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013d4:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <MX_ADC1_Init+0x244>)
 80013d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	483a      	ldr	r0, [pc, #232]	; (80014cc <MX_ADC1_Init+0x22c>)
 80013e4:	f001 ff6c 	bl	80032c0 <HAL_ADC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80013ee:	f000 fccf 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013f2:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <MX_ADC1_Init+0x248>)
 80013f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013f6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	4619      	mov	r1, r3
 8001400:	4832      	ldr	r0, [pc, #200]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001402:	f001 ff5d 	bl	80032c0 <HAL_ADC_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800140c:	f000 fcc0 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <MX_ADC1_Init+0x24c>)
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001414:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001418:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	482b      	ldr	r0, [pc, #172]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001420:	f001 ff4e 	bl	80032c0 <HAL_ADC_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800142a:	f000 fcb1 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <MX_ADC1_Init+0x250>)
 8001430:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001432:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001436:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4823      	ldr	r0, [pc, #140]	; (80014cc <MX_ADC1_Init+0x22c>)
 800143e:	f001 ff3f 	bl	80032c0 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001448:	f000 fca2 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <MX_ADC1_Init+0x254>)
 800144e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001450:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001454:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001456:	463b      	mov	r3, r7
 8001458:	4619      	mov	r1, r3
 800145a:	481c      	ldr	r0, [pc, #112]	; (80014cc <MX_ADC1_Init+0x22c>)
 800145c:	f001 ff30 	bl	80032c0 <HAL_ADC_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001466:	f000 fc93 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <MX_ADC1_Init+0x258>)
 800146c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800146e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001472:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001474:	463b      	mov	r3, r7
 8001476:	4619      	mov	r1, r3
 8001478:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_ADC1_Init+0x22c>)
 800147a:	f001 ff21 	bl	80032c0 <HAL_ADC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001484:	f000 fc84 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_ADC1_Init+0x25c>)
 800148a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800148c:	f240 2306 	movw	r3, #518	; 0x206
 8001490:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_ADC1_Init+0x22c>)
 8001498:	f001 ff12 	bl	80032c0 <HAL_ADC_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80014a2:	f000 fc75 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_ADC1_Init+0x260>)
 80014a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80014aa:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_ADC1_Init+0x22c>)
 80014b6:	f001 ff03 	bl	80032c0 <HAL_ADC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 80014c0:	f000 fc66 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	240000bc 	.word	0x240000bc
 80014d0:	40022000 	.word	0x40022000
 80014d4:	0c900008 	.word	0x0c900008
 80014d8:	10c00010 	.word	0x10c00010
 80014dc:	14f00020 	.word	0x14f00020
 80014e0:	1d500080 	.word	0x1d500080
 80014e4:	21800100 	.word	0x21800100
 80014e8:	25b00200 	.word	0x25b00200
 80014ec:	2a000400 	.word	0x2a000400
 80014f0:	2e300800 	.word	0x2e300800
 80014f4:	3ac04000 	.word	0x3ac04000
 80014f8:	3ef08000 	.word	0x3ef08000
 80014fc:	43210000 	.word	0x43210000
 8001500:	47520000 	.word	0x47520000

08001504 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	615a      	str	r2, [r3, #20]
 800151a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800151c:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <MX_ADC3_Init+0x110>)
 800151e:	4a3e      	ldr	r2, [pc, #248]	; (8001618 <MX_ADC3_Init+0x114>)
 8001520:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001522:	4b3c      	ldr	r3, [pc, #240]	; (8001614 <MX_ADC3_Init+0x110>)
 8001524:	2208      	movs	r2, #8
 8001526:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001528:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <MX_ADC3_Init+0x110>)
 800152a:	2201      	movs	r2, #1
 800152c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <MX_ADC3_Init+0x110>)
 8001530:	2204      	movs	r2, #4
 8001532:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001534:	4b37      	ldr	r3, [pc, #220]	; (8001614 <MX_ADC3_Init+0x110>)
 8001536:	2200      	movs	r2, #0
 8001538:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800153a:	4b36      	ldr	r3, [pc, #216]	; (8001614 <MX_ADC3_Init+0x110>)
 800153c:	2201      	movs	r2, #1
 800153e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001540:	4b34      	ldr	r3, [pc, #208]	; (8001614 <MX_ADC3_Init+0x110>)
 8001542:	2204      	movs	r2, #4
 8001544:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <MX_ADC3_Init+0x110>)
 8001548:	2200      	movs	r2, #0
 800154a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800154c:	4b31      	ldr	r3, [pc, #196]	; (8001614 <MX_ADC3_Init+0x110>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001552:	4b30      	ldr	r3, [pc, #192]	; (8001614 <MX_ADC3_Init+0x110>)
 8001554:	2200      	movs	r2, #0
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <MX_ADC3_Init+0x110>)
 800155a:	2203      	movs	r2, #3
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800155e:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <MX_ADC3_Init+0x110>)
 8001560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <MX_ADC3_Init+0x110>)
 8001568:	2200      	movs	r2, #0
 800156a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800156c:	4b29      	ldr	r3, [pc, #164]	; (8001614 <MX_ADC3_Init+0x110>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001574:	4827      	ldr	r0, [pc, #156]	; (8001614 <MX_ADC3_Init+0x110>)
 8001576:	f001 fc29 	bl	8002dcc <HAL_ADC_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001580:	f000 fc06 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001584:	4b25      	ldr	r3, [pc, #148]	; (800161c <MX_ADC3_Init+0x118>)
 8001586:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001588:	2306      	movs	r3, #6
 800158a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800158c:	2307      	movs	r3, #7
 800158e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001590:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001594:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001596:	2304      	movs	r3, #4
 8001598:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	481b      	ldr	r0, [pc, #108]	; (8001614 <MX_ADC3_Init+0x110>)
 80015a8:	f001 fe8a 	bl	80032c0 <HAL_ADC_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80015b2:	f000 fbed 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MX_ADC3_Init+0x11c>)
 80015b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015ba:	230c      	movs	r3, #12
 80015bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4814      	ldr	r0, [pc, #80]	; (8001614 <MX_ADC3_Init+0x110>)
 80015c4:	f001 fe7c 	bl	80032c0 <HAL_ADC_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80015ce:	f000 fbdf 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015d2:	2301      	movs	r3, #1
 80015d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015d6:	2312      	movs	r3, #18
 80015d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_ADC3_Init+0x110>)
 80015e0:	f001 fe6e 	bl	80032c0 <HAL_ADC_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015ea:	f000 fbd1 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <MX_ADC3_Init+0x120>)
 80015f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015f2:	2318      	movs	r3, #24
 80015f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_ADC3_Init+0x110>)
 80015fc:	f001 fe60 	bl	80032c0 <HAL_ADC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001606:	f000 fbc3 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	24000120 	.word	0x24000120
 8001618:	58026000 	.word	0x58026000
 800161c:	cfb80000 	.word	0xcfb80000
 8001620:	cb840000 	.word	0xcb840000
 8001624:	04300002 	.word	0x04300002

08001628 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2224      	movs	r2, #36	; 0x24
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f00e fb07 	bl	800fc48 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <MX_DAC1_Init+0x70>)
 800163c:	4a17      	ldr	r2, [pc, #92]	; (800169c <MX_DAC1_Init+0x74>)
 800163e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001640:	4815      	ldr	r0, [pc, #84]	; (8001698 <MX_DAC1_Init+0x70>)
 8001642:	f002 fec0 	bl	80043c6 <HAL_DAC_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800164c:	f000 fba0 	bl	8001d90 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001654:	2302      	movs	r3, #2
 8001656:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800165c:	2301      	movs	r3, #1
 800165e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	4619      	mov	r1, r3
 800166a:	480b      	ldr	r0, [pc, #44]	; (8001698 <MX_DAC1_Init+0x70>)
 800166c:	f002 ff44 	bl	80044f8 <HAL_DAC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001676:	f000 fb8b 	bl	8001d90 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2210      	movs	r2, #16
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_DAC1_Init+0x70>)
 8001682:	f002 ff39 	bl	80044f8 <HAL_DAC_ConfigChannel>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800168c:	f000 fb80 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	; 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	24000274 	.word	0x24000274
 800169c:	40007400 	.word	0x40007400

080016a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <MX_I2C1_Init+0x74>)
 80016a6:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <MX_I2C1_Init+0x78>)
 80016a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_I2C1_Init+0x74>)
 80016ac:	4a1b      	ldr	r2, [pc, #108]	; (800171c <MX_I2C1_Init+0x7c>)
 80016ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <MX_I2C1_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MX_I2C1_Init+0x74>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <MX_I2C1_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <MX_I2C1_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <MX_I2C1_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_I2C1_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_I2C1_Init+0x74>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016da:	480e      	ldr	r0, [pc, #56]	; (8001714 <MX_I2C1_Init+0x74>)
 80016dc:	f006 f85a 	bl	8007794 <HAL_I2C_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016e6:	f000 fb53 	bl	8001d90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ea:	2100      	movs	r1, #0
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <MX_I2C1_Init+0x74>)
 80016ee:	f006 fd43 	bl	8008178 <HAL_I2CEx_ConfigAnalogFilter>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016f8:	f000 fb4a 	bl	8001d90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016fc:	2100      	movs	r1, #0
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_I2C1_Init+0x74>)
 8001700:	f006 fd85 	bl	800820e <HAL_I2CEx_ConfigDigitalFilter>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800170a:	f000 fb41 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	24000288 	.word	0x24000288
 8001718:	40005400 	.word	0x40005400
 800171c:	20303e5d 	.word	0x20303e5d

08001720 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <MX_SPI1_Init+0xa8>)
 8001726:	4a29      	ldr	r2, [pc, #164]	; (80017cc <MX_SPI1_Init+0xac>)
 8001728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800172a:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <MX_SPI1_Init+0xa8>)
 800172c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <MX_SPI1_Init+0xa8>)
 8001734:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001738:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <MX_SPI1_Init+0xa8>)
 800173c:	220f      	movs	r2, #15
 800173e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <MX_SPI1_Init+0xa8>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <MX_SPI1_Init+0xa8>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <MX_SPI1_Init+0xa8>)
 800174e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001752:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_SPI1_Init+0xa8>)
 8001756:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800175a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_SPI1_Init+0xa8>)
 800175e:	2200      	movs	r2, #0
 8001760:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_SPI1_Init+0xa8>)
 8001764:	2200      	movs	r2, #0
 8001766:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_SPI1_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_SPI1_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_SPI1_Init+0xa8>)
 8001776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_SPI1_Init+0xa8>)
 800177e:	2200      	movs	r2, #0
 8001780:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_SPI1_Init+0xa8>)
 8001784:	2200      	movs	r2, #0
 8001786:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_SPI1_Init+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_SPI1_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_SPI1_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <MX_SPI1_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_SPI1_Init+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <MX_SPI1_Init+0xa8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_SPI1_Init+0xa8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_SPI1_Init+0xa8>)
 80017b4:	f009 ff34 	bl	800b620 <HAL_SPI_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80017be:	f000 fae7 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	240002d4 	.word	0x240002d4
 80017cc:	40013000 	.word	0x40013000

080017d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <MX_SPI2_Init+0xa8>)
 80017d6:	4a29      	ldr	r2, [pc, #164]	; (800187c <MX_SPI2_Init+0xac>)
 80017d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <MX_SPI2_Init+0xa8>)
 80017dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <MX_SPI2_Init+0xa8>)
 80017e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017e8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <MX_SPI2_Init+0xa8>)
 80017ec:	220f      	movs	r2, #15
 80017ee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <MX_SPI2_Init+0xa8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <MX_SPI2_Init+0xa8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <MX_SPI2_Init+0xa8>)
 80017fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001802:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_SPI2_Init+0xa8>)
 8001806:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800180a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_SPI2_Init+0xa8>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MX_SPI2_Init+0xa8>)
 8001814:	2200      	movs	r2, #0
 8001816:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_SPI2_Init+0xa8>)
 800181a:	2200      	movs	r2, #0
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <MX_SPI2_Init+0xa8>)
 8001820:	2200      	movs	r2, #0
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_SPI2_Init+0xa8>)
 8001826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <MX_SPI2_Init+0xa8>)
 800182e:	2200      	movs	r2, #0
 8001830:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_SPI2_Init+0xa8>)
 8001834:	2200      	movs	r2, #0
 8001836:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_SPI2_Init+0xa8>)
 800183a:	2200      	movs	r2, #0
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_SPI2_Init+0xa8>)
 8001840:	2200      	movs	r2, #0
 8001842:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_SPI2_Init+0xa8>)
 8001846:	2200      	movs	r2, #0
 8001848:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <MX_SPI2_Init+0xa8>)
 800184c:	2200      	movs	r2, #0
 800184e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_SPI2_Init+0xa8>)
 8001852:	2200      	movs	r2, #0
 8001854:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <MX_SPI2_Init+0xa8>)
 8001858:	2200      	movs	r2, #0
 800185a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_SPI2_Init+0xa8>)
 800185e:	2200      	movs	r2, #0
 8001860:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_SPI2_Init+0xa8>)
 8001864:	f009 fedc 	bl	800b620 <HAL_SPI_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800186e:	f000 fa8f 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	2400035c 	.word	0x2400035c
 800187c:	40003800 	.word	0x40003800

08001880 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b096      	sub	sp, #88	; 0x58
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001886:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]
 80018a2:	615a      	str	r2, [r3, #20]
 80018a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	222c      	movs	r2, #44	; 0x2c
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00e f9cb 	bl	800fc48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <MX_TIM1_Init+0x118>)
 80018b4:	4a39      	ldr	r2, [pc, #228]	; (800199c <MX_TIM1_Init+0x11c>)
 80018b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 80018b8:	4b37      	ldr	r3, [pc, #220]	; (8001998 <MX_TIM1_Init+0x118>)
 80018ba:	2263      	movs	r2, #99	; 0x63
 80018bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018be:	4b36      	ldr	r3, [pc, #216]	; (8001998 <MX_TIM1_Init+0x118>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 80018c4:	4b34      	ldr	r3, [pc, #208]	; (8001998 <MX_TIM1_Init+0x118>)
 80018c6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80018ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018cc:	4b32      	ldr	r3, [pc, #200]	; (8001998 <MX_TIM1_Init+0x118>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <MX_TIM1_Init+0x118>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d8:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <MX_TIM1_Init+0x118>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018de:	482e      	ldr	r0, [pc, #184]	; (8001998 <MX_TIM1_Init+0x118>)
 80018e0:	f00a fe90 	bl	800c604 <HAL_TIM_PWM_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80018ea:	f000 fa51 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018fe:	4619      	mov	r1, r3
 8001900:	4825      	ldr	r0, [pc, #148]	; (8001998 <MX_TIM1_Init+0x118>)
 8001902:	f00b fcc7 	bl	800d294 <HAL_TIMEx_MasterConfigSynchronization>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800190c:	f000 fa40 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001910:	2360      	movs	r3, #96	; 0x60
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 -1;
 8001914:	f240 13df 	movw	r3, #479	; 0x1df
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191a:	2300      	movs	r3, #0
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800191e:	2300      	movs	r3, #0
 8001920:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800192e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001932:	2200      	movs	r2, #0
 8001934:	4619      	mov	r1, r3
 8001936:	4818      	ldr	r0, [pc, #96]	; (8001998 <MX_TIM1_Init+0x118>)
 8001938:	f00a ffda 	bl	800c8f0 <HAL_TIM_PWM_ConfigChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001942:	f000 fa25 	bl	8001d90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800195a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001968:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	4619      	mov	r1, r3
 800197a:	4807      	ldr	r0, [pc, #28]	; (8001998 <MX_TIM1_Init+0x118>)
 800197c:	f00b fd18 	bl	800d3b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001986:	f000 fa03 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800198a:	4803      	ldr	r0, [pc, #12]	; (8001998 <MX_TIM1_Init+0x118>)
 800198c:	f000 fcf4 	bl	8002378 <HAL_TIM_MspPostInit>

}
 8001990:	bf00      	nop
 8001992:	3758      	adds	r7, #88	; 0x58
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	240003e4 	.word	0x240003e4
 800199c:	40010000 	.word	0x40010000

080019a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b2:	463b      	mov	r3, r7
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	615a      	str	r2, [r3, #20]
 80019c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <MX_TIM2_Init+0xb0>)
 80019c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 -1;
 80019cc:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <MX_TIM2_Init+0xb0>)
 80019ce:	2263      	movs	r2, #99	; 0x63
 80019d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <MX_TIM2_Init+0xb0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000 - 1;
 80019d8:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <MX_TIM2_Init+0xb0>)
 80019da:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80019de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <MX_TIM2_Init+0xb0>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <MX_TIM2_Init+0xb0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019ec:	4818      	ldr	r0, [pc, #96]	; (8001a50 <MX_TIM2_Init+0xb0>)
 80019ee:	f00a fe09 	bl	800c604 <HAL_TIM_PWM_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80019f8:	f000 f9ca 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4811      	ldr	r0, [pc, #68]	; (8001a50 <MX_TIM2_Init+0xb0>)
 8001a0c:	f00b fc42 	bl	800d294 <HAL_TIMEx_MasterConfigSynchronization>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001a16:	f000 f9bb 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a1a:	2360      	movs	r3, #96	; 0x60
 8001a1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 480 - 1;
 8001a1e:	f240 13df 	movw	r3, #479	; 0x1df
 8001a22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	220c      	movs	r2, #12
 8001a30:	4619      	mov	r1, r3
 8001a32:	4807      	ldr	r0, [pc, #28]	; (8001a50 <MX_TIM2_Init+0xb0>)
 8001a34:	f00a ff5c 	bl	800c8f0 <HAL_TIM_PWM_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001a3e:	f000 f9a7 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <MX_TIM2_Init+0xb0>)
 8001a44:	f000 fc98 	bl	8002378 <HAL_TIM_MspPostInit>

}
 8001a48:	bf00      	nop
 8001a4a:	3728      	adds	r7, #40	; 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	24000430 	.word	0x24000430

08001a54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a5a:	4a23      	ldr	r2, [pc, #140]	; (8001ae8 <MX_USART1_UART_Init+0x94>)
 8001a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a60:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a66:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a9c:	4811      	ldr	r0, [pc, #68]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a9e:	f00b fd23 	bl	800d4e8 <HAL_UART_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001aa8:	f000 f972 	bl	8001d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aac:	2100      	movs	r1, #0
 8001aae:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001ab0:	f00d ffb7 	bl	800fa22 <HAL_UARTEx_SetTxFifoThreshold>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001aba:	f000 f969 	bl	8001d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4808      	ldr	r0, [pc, #32]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001ac2:	f00d ffec 	bl	800fa9e <HAL_UARTEx_SetRxFifoThreshold>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001acc:	f000 f960 	bl	8001d90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ad0:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001ad2:	f00d ff6d 	bl	800f9b0 <HAL_UARTEx_DisableFifoMode>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001adc:	f000 f958 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	2400047c 	.word	0x2400047c
 8001ae8:	40011000 	.word	0x40011000

08001aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MX_DMA_Init+0x4c>)
 8001af4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001af8:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <MX_DMA_Init+0x4c>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <MX_DMA_Init+0x4c>)
 8001b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2100      	movs	r1, #0
 8001b14:	200b      	movs	r0, #11
 8001b16:	f002 fc22 	bl	800435e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b1a:	200b      	movs	r0, #11
 8001b1c:	f002 fc39 	bl	8004392 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2100      	movs	r1, #0
 8001b24:	200c      	movs	r0, #12
 8001b26:	f002 fc1a 	bl	800435e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b2a:	200c      	movs	r0, #12
 8001b2c:	f002 fc31 	bl	8004392 <HAL_NVIC_EnableIRQ>

}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	58024400 	.word	0x58024400

08001b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	; 0x30
 8001b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b52:	4b54      	ldr	r3, [pc, #336]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b58:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b62:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b70:	4b4c      	ldr	r3, [pc, #304]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b76:	4a4b      	ldr	r2, [pc, #300]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b78:	f043 0320 	orr.w	r3, r3, #32
 8001b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b80:	4b48      	ldr	r3, [pc, #288]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b8e:	4b45      	ldr	r3, [pc, #276]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b94:	4a43      	ldr	r2, [pc, #268]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b9e:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb2:	4a3c      	ldr	r2, [pc, #240]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bbc:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd0:	4a34      	ldr	r2, [pc, #208]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bda:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be8:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bee:	4a2d      	ldr	r2, [pc, #180]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001bf0:	f043 0308 	orr.w	r3, r3, #8
 8001bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	21c0      	movs	r1, #192	; 0xc0
 8001c0a:	4827      	ldr	r0, [pc, #156]	; (8001ca8 <MX_GPIO_Init+0x16c>)
 8001c0c:	f005 fda8 	bl	8007760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001c10:	2200      	movs	r2, #0
 8001c12:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001c16:	4825      	ldr	r0, [pc, #148]	; (8001cac <MX_GPIO_Init+0x170>)
 8001c18:	f005 fda2 	bl	8007760 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2160      	movs	r1, #96	; 0x60
 8001c20:	4823      	ldr	r0, [pc, #140]	; (8001cb0 <MX_GPIO_Init+0x174>)
 8001c22:	f005 fd9d 	bl	8007760 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c26:	23c0      	movs	r3, #192	; 0xc0
 8001c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	481a      	ldr	r0, [pc, #104]	; (8001ca8 <MX_GPIO_Init+0x16c>)
 8001c3e:	f005 fbc7 	bl	80073d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001c42:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c46:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4814      	ldr	r0, [pc, #80]	; (8001cac <MX_GPIO_Init+0x170>)
 8001c5c:	f005 fbb8 	bl	80073d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c60:	2360      	movs	r3, #96	; 0x60
 8001c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c70:	2307      	movs	r3, #7
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480e      	ldr	r0, [pc, #56]	; (8001cb4 <MX_GPIO_Init+0x178>)
 8001c7c:	f005 fba8 	bl	80073d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c80:	2360      	movs	r3, #96	; 0x60
 8001c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <MX_GPIO_Init+0x174>)
 8001c98:	f005 fb9a 	bl	80073d0 <HAL_GPIO_Init>

}
 8001c9c:	bf00      	nop
 8001c9e:	3730      	adds	r7, #48	; 0x30
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	58024400 	.word	0x58024400
 8001ca8:	58021400 	.word	0x58021400
 8001cac:	58020800 	.word	0x58020800
 8001cb0:	58020400 	.word	0x58020400
 8001cb4:	58020c00 	.word	0x58020c00

08001cb8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b08b      	sub	sp, #44	; 0x2c
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a2e      	ldr	r2, [pc, #184]	; (8001d7c <HAL_ADC_ConvCpltCallback+0xc4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d125      	bne.n	8001d14 <HAL_ADC_ConvCpltCallback+0x5c>
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ccc:	230c      	movs	r3, #12
 8001cce:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	dd48      	ble.n	8001d68 <HAL_ADC_ConvCpltCallback+0xb0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	4413      	add	r3, r2
 8001ce0:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce6:	f3bf 8f4f 	dsb	sy
}
 8001cea:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001cec:	4a25      	ldr	r2, [pc, #148]	; (8001d84 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	3320      	adds	r3, #32
 8001cf8:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3b20      	subs	r3, #32
 8001cfe:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	dcf2      	bgt.n	8001cec <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d06:	f3bf 8f4f 	dsb	sy
}
 8001d0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0c:	f3bf 8f6f 	isb	sy
}
 8001d10:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001d12:	e029      	b.n	8001d68 <HAL_ADC_ConvCpltCallback+0xb0>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC1Data[ADC1NumChannels/2], ADC1NumChannels);
	} else if (hadc == &hadc3) {
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d128      	bne.n	8001d6e <HAL_ADC_ConvCpltCallback+0xb6>
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	2304      	movs	r3, #4
 8001d22:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	dd20      	ble.n	8001d6c <HAL_ADC_ConvCpltCallback+0xb4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d3a:	f3bf 8f4f 	dsb	sy
}
 8001d3e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d40:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	3320      	adds	r3, #32
 8001d4c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3b20      	subs	r3, #32
 8001d52:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	dcf2      	bgt.n	8001d40 <HAL_ADC_ConvCpltCallback+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d5a:	f3bf 8f4f 	dsb	sy
}
 8001d5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d60:	f3bf 8f6f 	isb	sy
}
 8001d64:	bf00      	nop
}
 8001d66:	e001      	b.n	8001d6c <HAL_ADC_ConvCpltCallback+0xb4>
 8001d68:	bf00      	nop
 8001d6a:	e000      	b.n	8001d6e <HAL_ADC_ConvCpltCallback+0xb6>
 8001d6c:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &ADC3Data[ADC3NumChannels/2], ADC3NumChannels);

	}

}
 8001d6e:	bf00      	nop
 8001d70:	372c      	adds	r7, #44	; 0x2c
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	240000bc 	.word	0x240000bc
 8001d80:	2400058c 	.word	0x2400058c
 8001d84:	e000ed00 	.word	0xe000ed00
 8001d88:	24000120 	.word	0x24000120
 8001d8c:	240005a4 	.word	0x240005a4

08001d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
}
 8001d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <Error_Handler+0x8>
	...

08001d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_MspInit+0x30>)
 8001da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001da8:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <HAL_MspInit+0x30>)
 8001daa:	f043 0302 	orr.w	r3, r3, #2
 8001dae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_MspInit+0x30>)
 8001db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	58024400 	.word	0x58024400

08001dd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08e      	sub	sp, #56	; 0x38
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a7b      	ldr	r2, [pc, #492]	; (8001fdc <HAL_ADC_MspInit+0x20c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	f040 8091 	bne.w	8001f16 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001df4:	4b7a      	ldr	r3, [pc, #488]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001df6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dfa:	4a79      	ldr	r2, [pc, #484]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001dfc:	f043 0320 	orr.w	r3, r3, #32
 8001e00:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e04:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001e06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	623b      	str	r3, [r7, #32]
 8001e10:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e12:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e18:	4a71      	ldr	r2, [pc, #452]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e22:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e30:	4b6b      	ldr	r3, [pc, #428]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e36:	4a6a      	ldr	r2, [pc, #424]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e40:	4b67      	ldr	r3, [pc, #412]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	4b64      	ldr	r3, [pc, #400]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e54:	4a62      	ldr	r2, [pc, #392]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001e56:	f043 0302 	orr.w	r3, r3, #2
 8001e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e5e:	4b60      	ldr	r3, [pc, #384]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001e6c:	2333      	movs	r3, #51	; 0x33
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e70:	2303      	movs	r3, #3
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4859      	ldr	r0, [pc, #356]	; (8001fe4 <HAL_ADC_MspInit+0x214>)
 8001e80:	f005 faa6 	bl	80073d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e84:	23cf      	movs	r3, #207	; 0xcf
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	4619      	mov	r1, r3
 8001e96:	4854      	ldr	r0, [pc, #336]	; (8001fe8 <HAL_ADC_MspInit+0x218>)
 8001e98:	f005 fa9a 	bl	80073d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eac:	4619      	mov	r1, r3
 8001eae:	484f      	ldr	r0, [pc, #316]	; (8001fec <HAL_ADC_MspInit+0x21c>)
 8001eb0:	f005 fa8e 	bl	80073d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001eb4:	4b4e      	ldr	r3, [pc, #312]	; (8001ff0 <HAL_ADC_MspInit+0x220>)
 8001eb6:	4a4f      	ldr	r2, [pc, #316]	; (8001ff4 <HAL_ADC_MspInit+0x224>)
 8001eb8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001eba:	4b4d      	ldr	r3, [pc, #308]	; (8001ff0 <HAL_ADC_MspInit+0x220>)
 8001ebc:	2209      	movs	r2, #9
 8001ebe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec0:	4b4b      	ldr	r3, [pc, #300]	; (8001ff0 <HAL_ADC_MspInit+0x220>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec6:	4b4a      	ldr	r3, [pc, #296]	; (8001ff0 <HAL_ADC_MspInit+0x220>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ecc:	4b48      	ldr	r3, [pc, #288]	; (8001ff0 <HAL_ADC_MspInit+0x220>)
 8001ece:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ed4:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <HAL_ADC_MspInit+0x220>)
 8001ed6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eda:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001edc:	4b44      	ldr	r3, [pc, #272]	; (8001ff0 <HAL_ADC_MspInit+0x220>)
 8001ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ee4:	4b42      	ldr	r3, [pc, #264]	; (8001ff0 <HAL_ADC_MspInit+0x220>)
 8001ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eec:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <HAL_ADC_MspInit+0x220>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef2:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <HAL_ADC_MspInit+0x220>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ef8:	483d      	ldr	r0, [pc, #244]	; (8001ff0 <HAL_ADC_MspInit+0x220>)
 8001efa:	f002 fc2d 	bl	8004758 <HAL_DMA_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001f04:	f7ff ff44 	bl	8001d90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a39      	ldr	r2, [pc, #228]	; (8001ff0 <HAL_ADC_MspInit+0x220>)
 8001f0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f0e:	4a38      	ldr	r2, [pc, #224]	; (8001ff0 <HAL_ADC_MspInit+0x220>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f14:	e05e      	b.n	8001fd4 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a37      	ldr	r2, [pc, #220]	; (8001ff8 <HAL_ADC_MspInit+0x228>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d159      	bne.n	8001fd4 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f20:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f26:	4a2e      	ldr	r2, [pc, #184]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001f28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f30:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f44:	4a26      	ldr	r2, [pc, #152]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_ADC_MspInit+0x210>)
 8001f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001f5c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001f60:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f64:	f000 fd0e 	bl	8002984 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001f68:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001f6c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001f70:	f000 fd08 	bl	8002984 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_ADC_MspInit+0x22c>)
 8001f76:	4a22      	ldr	r2, [pc, #136]	; (8002000 <HAL_ADC_MspInit+0x230>)
 8001f78:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <HAL_ADC_MspInit+0x22c>)
 8001f7c:	2273      	movs	r2, #115	; 0x73
 8001f7e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f80:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <HAL_ADC_MspInit+0x22c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_ADC_MspInit+0x22c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_ADC_MspInit+0x22c>)
 8001f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f92:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_ADC_MspInit+0x22c>)
 8001f96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f9a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_ADC_MspInit+0x22c>)
 8001f9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fa2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_ADC_MspInit+0x22c>)
 8001fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001faa:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_ADC_MspInit+0x22c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_ADC_MspInit+0x22c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001fb8:	4810      	ldr	r0, [pc, #64]	; (8001ffc <HAL_ADC_MspInit+0x22c>)
 8001fba:	f002 fbcd 	bl	8004758 <HAL_DMA_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001fc4:	f7ff fee4 	bl	8001d90 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <HAL_ADC_MspInit+0x22c>)
 8001fcc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fce:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <HAL_ADC_MspInit+0x22c>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001fd4:	bf00      	nop
 8001fd6:	3738      	adds	r7, #56	; 0x38
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	58024400 	.word	0x58024400
 8001fe4:	58020800 	.word	0x58020800
 8001fe8:	58020000 	.word	0x58020000
 8001fec:	58020400 	.word	0x58020400
 8001ff0:	24000184 	.word	0x24000184
 8001ff4:	40020010 	.word	0x40020010
 8001ff8:	58026000 	.word	0x58026000
 8001ffc:	240001fc 	.word	0x240001fc
 8002000:	40020028 	.word	0x40020028

08002004 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a18      	ldr	r2, [pc, #96]	; (8002084 <HAL_DAC_MspInit+0x80>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d129      	bne.n	800207a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_DAC_MspInit+0x84>)
 8002028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800202c:	4a16      	ldr	r2, [pc, #88]	; (8002088 <HAL_DAC_MspInit+0x84>)
 800202e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002032:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002036:	4b14      	ldr	r3, [pc, #80]	; (8002088 <HAL_DAC_MspInit+0x84>)
 8002038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800203c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_DAC_MspInit+0x84>)
 8002046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204a:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <HAL_DAC_MspInit+0x84>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_DAC_MspInit+0x84>)
 8002056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002062:	2330      	movs	r3, #48	; 0x30
 8002064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002066:	2303      	movs	r3, #3
 8002068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	4805      	ldr	r0, [pc, #20]	; (800208c <HAL_DAC_MspInit+0x88>)
 8002076:	f005 f9ab 	bl	80073d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800207a:	bf00      	nop
 800207c:	3728      	adds	r7, #40	; 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40007400 	.word	0x40007400
 8002088:	58024400 	.word	0x58024400
 800208c:	58020000 	.word	0x58020000

08002090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b0b8      	sub	sp, #224	; 0xe0
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	22bc      	movs	r2, #188	; 0xbc
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f00d fdc9 	bl	800fc48 <memset>
  if(hi2c->Instance==I2C1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a25      	ldr	r2, [pc, #148]	; (8002150 <HAL_I2C_MspInit+0xc0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d142      	bne.n	8002146 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020c0:	2308      	movs	r3, #8
 80020c2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ca:	f107 0310 	add.w	r3, r7, #16
 80020ce:	4618      	mov	r0, r3
 80020d0:	f007 f91a 	bl	8009308 <HAL_RCCEx_PeriphCLKConfig>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020da:	f7ff fe59 	bl	8001d90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_I2C_MspInit+0xc4>)
 80020e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_I2C_MspInit+0xc4>)
 80020e6:	f043 0302 	orr.w	r3, r3, #2
 80020ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_I2C_MspInit+0xc4>)
 80020f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002100:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002104:	2312      	movs	r3, #18
 8002106:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002116:	2304      	movs	r3, #4
 8002118:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002120:	4619      	mov	r1, r3
 8002122:	480d      	ldr	r0, [pc, #52]	; (8002158 <HAL_I2C_MspInit+0xc8>)
 8002124:	f005 f954 	bl	80073d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_I2C_MspInit+0xc4>)
 800212a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_I2C_MspInit+0xc4>)
 8002130:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002134:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_I2C_MspInit+0xc4>)
 800213a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800213e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002146:	bf00      	nop
 8002148:	37e0      	adds	r7, #224	; 0xe0
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40005400 	.word	0x40005400
 8002154:	58024400 	.word	0x58024400
 8002158:	58020400 	.word	0x58020400

0800215c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b0ba      	sub	sp, #232	; 0xe8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002174:	f107 0318 	add.w	r3, r7, #24
 8002178:	22bc      	movs	r2, #188	; 0xbc
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f00d fd63 	bl	800fc48 <memset>
  if(hspi->Instance==SPI1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a49      	ldr	r2, [pc, #292]	; (80022ac <HAL_SPI_MspInit+0x150>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d142      	bne.n	8002212 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800218c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002190:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002192:	2300      	movs	r3, #0
 8002194:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002196:	f107 0318 	add.w	r3, r7, #24
 800219a:	4618      	mov	r0, r3
 800219c:	f007 f8b4 	bl	8009308 <HAL_RCCEx_PeriphCLKConfig>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80021a6:	f7ff fdf3 	bl	8001d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_SPI_MspInit+0x154>)
 80021ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021b0:	4a3f      	ldr	r2, [pc, #252]	; (80022b0 <HAL_SPI_MspInit+0x154>)
 80021b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_SPI_MspInit+0x154>)
 80021bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c8:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_SPI_MspInit+0x154>)
 80021ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ce:	4a38      	ldr	r2, [pc, #224]	; (80022b0 <HAL_SPI_MspInit+0x154>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021d8:	4b35      	ldr	r3, [pc, #212]	; (80022b0 <HAL_SPI_MspInit+0x154>)
 80021da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80021e6:	2318      	movs	r3, #24
 80021e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021fe:	2305      	movs	r3, #5
 8002200:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002204:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002208:	4619      	mov	r1, r3
 800220a:	482a      	ldr	r0, [pc, #168]	; (80022b4 <HAL_SPI_MspInit+0x158>)
 800220c:	f005 f8e0 	bl	80073d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002210:	e047      	b.n	80022a2 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <HAL_SPI_MspInit+0x15c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d142      	bne.n	80022a2 <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800221c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002220:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002222:	2300      	movs	r3, #0
 8002224:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002226:	f107 0318 	add.w	r3, r7, #24
 800222a:	4618      	mov	r0, r3
 800222c:	f007 f86c 	bl	8009308 <HAL_RCCEx_PeriphCLKConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8002236:	f7ff fdab 	bl	8001d90 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800223a:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_SPI_MspInit+0x154>)
 800223c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002240:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <HAL_SPI_MspInit+0x154>)
 8002242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002246:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800224a:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_SPI_MspInit+0x154>)
 800224c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_SPI_MspInit+0x154>)
 800225a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225e:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <HAL_SPI_MspInit+0x154>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_SPI_MspInit+0x154>)
 800226a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002276:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800227a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002290:	2305      	movs	r3, #5
 8002292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002296:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800229a:	4619      	mov	r1, r3
 800229c:	4805      	ldr	r0, [pc, #20]	; (80022b4 <HAL_SPI_MspInit+0x158>)
 800229e:	f005 f897 	bl	80073d0 <HAL_GPIO_Init>
}
 80022a2:	bf00      	nop
 80022a4:	37e8      	adds	r7, #232	; 0xe8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40013000 	.word	0x40013000
 80022b0:	58024400 	.word	0x58024400
 80022b4:	58020400 	.word	0x58020400
 80022b8:	40003800 	.word	0x40003800

080022bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a29      	ldr	r2, [pc, #164]	; (8002370 <HAL_TIM_PWM_MspInit+0xb4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d12f      	bne.n	800232e <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ce:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HAL_TIM_PWM_MspInit+0xb8>)
 80022d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022d4:	4a27      	ldr	r2, [pc, #156]	; (8002374 <HAL_TIM_PWM_MspInit+0xb8>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022de:	4b25      	ldr	r3, [pc, #148]	; (8002374 <HAL_TIM_PWM_MspInit+0xb8>)
 80022e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	2018      	movs	r0, #24
 80022f2:	f002 f834 	bl	800435e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80022f6:	2018      	movs	r0, #24
 80022f8:	f002 f84b 	bl	8004392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	2019      	movs	r0, #25
 8002302:	f002 f82c 	bl	800435e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002306:	2019      	movs	r0, #25
 8002308:	f002 f843 	bl	8004392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800230c:	2200      	movs	r2, #0
 800230e:	2100      	movs	r1, #0
 8002310:	201a      	movs	r0, #26
 8002312:	f002 f824 	bl	800435e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002316:	201a      	movs	r0, #26
 8002318:	f002 f83b 	bl	8004392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	201b      	movs	r0, #27
 8002322:	f002 f81c 	bl	800435e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002326:	201b      	movs	r0, #27
 8002328:	f002 f833 	bl	8004392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800232c:	e01b      	b.n	8002366 <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002336:	d116      	bne.n	8002366 <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_TIM_PWM_MspInit+0xb8>)
 800233a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800233e:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <HAL_TIM_PWM_MspInit+0xb8>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_TIM_PWM_MspInit+0xb8>)
 800234a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	201c      	movs	r0, #28
 800235c:	f001 ffff 	bl	800435e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002360:	201c      	movs	r0, #28
 8002362:	f002 f816 	bl	8004392 <HAL_NVIC_EnableIRQ>
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40010000 	.word	0x40010000
 8002374:	58024400 	.word	0x58024400

08002378 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a26      	ldr	r2, [pc, #152]	; (8002430 <HAL_TIM_MspPostInit+0xb8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d120      	bne.n	80023dc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_TIM_MspPostInit+0xbc>)
 800239c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a0:	4a24      	ldr	r2, [pc, #144]	; (8002434 <HAL_TIM_MspPostInit+0xbc>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023aa:	4b22      	ldr	r3, [pc, #136]	; (8002434 <HAL_TIM_MspPostInit+0xbc>)
 80023ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023ca:	2301      	movs	r3, #1
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	4818      	ldr	r0, [pc, #96]	; (8002438 <HAL_TIM_MspPostInit+0xc0>)
 80023d6:	f004 fffb 	bl	80073d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023da:	e024      	b.n	8002426 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e4:	d11f      	bne.n	8002426 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_TIM_MspPostInit+0xbc>)
 80023e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ec:	4a11      	ldr	r2, [pc, #68]	; (8002434 <HAL_TIM_MspPostInit+0xbc>)
 80023ee:	f043 0302 	orr.w	r3, r3, #2
 80023f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023f6:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <HAL_TIM_MspPostInit+0xbc>)
 80023f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002404:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002416:	2301      	movs	r3, #1
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	4619      	mov	r1, r3
 8002420:	4806      	ldr	r0, [pc, #24]	; (800243c <HAL_TIM_MspPostInit+0xc4>)
 8002422:	f004 ffd5 	bl	80073d0 <HAL_GPIO_Init>
}
 8002426:	bf00      	nop
 8002428:	3728      	adds	r7, #40	; 0x28
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40010000 	.word	0x40010000
 8002434:	58024400 	.word	0x58024400
 8002438:	58020000 	.word	0x58020000
 800243c:	58020400 	.word	0x58020400

08002440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b0b8      	sub	sp, #224	; 0xe0
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002458:	f107 0310 	add.w	r3, r7, #16
 800245c:	22bc      	movs	r2, #188	; 0xbc
 800245e:	2100      	movs	r1, #0
 8002460:	4618      	mov	r0, r3
 8002462:	f00d fbf1 	bl	800fc48 <memset>
  if(huart->Instance==USART1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a29      	ldr	r2, [pc, #164]	; (8002510 <HAL_UART_MspInit+0xd0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d14a      	bne.n	8002506 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002470:	2301      	movs	r3, #1
 8002472:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800247a:	f107 0310 	add.w	r3, r7, #16
 800247e:	4618      	mov	r0, r3
 8002480:	f006 ff42 	bl	8009308 <HAL_RCCEx_PeriphCLKConfig>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800248a:	f7ff fc81 	bl	8001d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800248e:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_UART_MspInit+0xd4>)
 8002490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002494:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <HAL_UART_MspInit+0xd4>)
 8002496:	f043 0310 	orr.w	r3, r3, #16
 800249a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_UART_MspInit+0xd4>)
 80024a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_UART_MspInit+0xd4>)
 80024ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b2:	4a18      	ldr	r2, [pc, #96]	; (8002514 <HAL_UART_MspInit+0xd4>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_UART_MspInit+0xd4>)
 80024be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024e4:	2307      	movs	r3, #7
 80024e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024ee:	4619      	mov	r1, r3
 80024f0:	4809      	ldr	r0, [pc, #36]	; (8002518 <HAL_UART_MspInit+0xd8>)
 80024f2:	f004 ff6d 	bl	80073d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024f6:	2200      	movs	r2, #0
 80024f8:	2100      	movs	r1, #0
 80024fa:	2025      	movs	r0, #37	; 0x25
 80024fc:	f001 ff2f 	bl	800435e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002500:	2025      	movs	r0, #37	; 0x25
 8002502:	f001 ff46 	bl	8004392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002506:	bf00      	nop
 8002508:	37e0      	adds	r7, #224	; 0xe0
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40011000 	.word	0x40011000
 8002514:	58024400 	.word	0x58024400
 8002518:	58020000 	.word	0x58020000

0800251c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <NMI_Handler+0x4>

08002522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002526:	e7fe      	b.n	8002526 <HardFault_Handler+0x4>

08002528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800252c:	e7fe      	b.n	800252c <MemManage_Handler+0x4>

0800252e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002532:	e7fe      	b.n	8002532 <BusFault_Handler+0x4>

08002534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <UsageFault_Handler+0x4>

0800253a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002568:	f000 f9ac 	bl	80028c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}

08002570 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <DMA1_Stream0_IRQHandler+0x10>)
 8002576:	f003 fc19 	bl	8005dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	24000184 	.word	0x24000184

08002584 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <DMA1_Stream1_IRQHandler+0x10>)
 800258a:	f003 fc0f 	bl	8005dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	240001fc 	.word	0x240001fc

08002598 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <TIM1_BRK_IRQHandler+0x10>)
 800259e:	f00a f888 	bl	800c6b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	240003e4 	.word	0x240003e4

080025ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <TIM1_UP_IRQHandler+0x10>)
 80025b2:	f00a f87e 	bl	800c6b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	240003e4 	.word	0x240003e4

080025c0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80025c6:	f00a f874 	bl	800c6b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	240003e4 	.word	0x240003e4

080025d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025d8:	4802      	ldr	r0, [pc, #8]	; (80025e4 <TIM1_CC_IRQHandler+0x10>)
 80025da:	f00a f86a 	bl	800c6b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	240003e4 	.word	0x240003e4

080025e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <TIM2_IRQHandler+0x10>)
 80025ee:	f00a f860 	bl	800c6b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	24000430 	.word	0x24000430

080025fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002600:	4802      	ldr	r0, [pc, #8]	; (800260c <USART1_IRQHandler+0x10>)
 8002602:	f00b f8ad 	bl	800d760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	2400047c 	.word	0x2400047c

08002610 <_sbrk>:
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	4a14      	ldr	r2, [pc, #80]	; (800266c <_sbrk+0x5c>)
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <_sbrk+0x60>)
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <_sbrk+0x64>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <_sbrk+0x22>
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <_sbrk+0x64>)
 800262e:	4a12      	ldr	r2, [pc, #72]	; (8002678 <_sbrk+0x68>)
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <_sbrk+0x64>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	429a      	cmp	r2, r3
 800263e:	d207      	bcs.n	8002650 <_sbrk+0x40>
 8002640:	f00d faba 	bl	800fbb8 <__errno>
 8002644:	4603      	mov	r3, r0
 8002646:	220c      	movs	r2, #12
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800264e:	e009      	b.n	8002664 <_sbrk+0x54>
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <_sbrk+0x64>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <_sbrk+0x64>)
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	24080000 	.word	0x24080000
 8002670:	00000400 	.word	0x00000400
 8002674:	240005bc 	.word	0x240005bc
 8002678:	240005d8 	.word	0x240005d8

0800267c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002680:	4b37      	ldr	r3, [pc, #220]	; (8002760 <SystemInit+0xe4>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	4a36      	ldr	r2, [pc, #216]	; (8002760 <SystemInit+0xe4>)
 8002688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800268c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002690:	4b34      	ldr	r3, [pc, #208]	; (8002764 <SystemInit+0xe8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	2b06      	cmp	r3, #6
 800269a:	d807      	bhi.n	80026ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800269c:	4b31      	ldr	r3, [pc, #196]	; (8002764 <SystemInit+0xe8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 030f 	bic.w	r3, r3, #15
 80026a4:	4a2f      	ldr	r2, [pc, #188]	; (8002764 <SystemInit+0xe8>)
 80026a6:	f043 0307 	orr.w	r3, r3, #7
 80026aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026ac:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <SystemInit+0xec>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a2d      	ldr	r2, [pc, #180]	; (8002768 <SystemInit+0xec>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026b8:	4b2b      	ldr	r3, [pc, #172]	; (8002768 <SystemInit+0xec>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026be:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <SystemInit+0xec>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4929      	ldr	r1, [pc, #164]	; (8002768 <SystemInit+0xec>)
 80026c4:	4b29      	ldr	r3, [pc, #164]	; (800276c <SystemInit+0xf0>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026ca:	4b26      	ldr	r3, [pc, #152]	; (8002764 <SystemInit+0xe8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <SystemInit+0xe8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 030f 	bic.w	r3, r3, #15
 80026de:	4a21      	ldr	r2, [pc, #132]	; (8002764 <SystemInit+0xe8>)
 80026e0:	f043 0307 	orr.w	r3, r3, #7
 80026e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <SystemInit+0xec>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <SystemInit+0xec>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <SystemInit+0xec>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <SystemInit+0xec>)
 80026fa:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <SystemInit+0xf4>)
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <SystemInit+0xec>)
 8002700:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <SystemInit+0xf8>)
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <SystemInit+0xec>)
 8002706:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <SystemInit+0xfc>)
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <SystemInit+0xec>)
 800270c:	2200      	movs	r2, #0
 800270e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <SystemInit+0xec>)
 8002712:	4a19      	ldr	r2, [pc, #100]	; (8002778 <SystemInit+0xfc>)
 8002714:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <SystemInit+0xec>)
 8002718:	2200      	movs	r2, #0
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <SystemInit+0xec>)
 800271e:	4a16      	ldr	r2, [pc, #88]	; (8002778 <SystemInit+0xfc>)
 8002720:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <SystemInit+0xec>)
 8002724:	2200      	movs	r2, #0
 8002726:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <SystemInit+0xec>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <SystemInit+0xec>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <SystemInit+0xec>)
 8002736:	2200      	movs	r2, #0
 8002738:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <SystemInit+0x100>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <SystemInit+0x104>)
 8002740:	4013      	ands	r3, r2
 8002742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002746:	d202      	bcs.n	800274e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002748:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <SystemInit+0x108>)
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <SystemInit+0x10c>)
 8002750:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002754:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000ed00 	.word	0xe000ed00
 8002764:	52002000 	.word	0x52002000
 8002768:	58024400 	.word	0x58024400
 800276c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002770:	02020200 	.word	0x02020200
 8002774:	01ff0000 	.word	0x01ff0000
 8002778:	01010280 	.word	0x01010280
 800277c:	5c001000 	.word	0x5c001000
 8002780:	ffff0000 	.word	0xffff0000
 8002784:	51008108 	.word	0x51008108
 8002788:	52004000 	.word	0x52004000

0800278c <Reset_Handler>:
 800278c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c4 <LoopFillZerobss+0xe>
 8002790:	f7ff ff74 	bl	800267c <SystemInit>
 8002794:	480c      	ldr	r0, [pc, #48]	; (80027c8 <LoopFillZerobss+0x12>)
 8002796:	490d      	ldr	r1, [pc, #52]	; (80027cc <LoopFillZerobss+0x16>)
 8002798:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <LoopFillZerobss+0x1a>)
 800279a:	2300      	movs	r3, #0
 800279c:	e002      	b.n	80027a4 <LoopCopyDataInit>

0800279e <CopyDataInit>:
 800279e:	58d4      	ldr	r4, [r2, r3]
 80027a0:	50c4      	str	r4, [r0, r3]
 80027a2:	3304      	adds	r3, #4

080027a4 <LoopCopyDataInit>:
 80027a4:	18c4      	adds	r4, r0, r3
 80027a6:	428c      	cmp	r4, r1
 80027a8:	d3f9      	bcc.n	800279e <CopyDataInit>
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <LoopFillZerobss+0x1e>)
 80027ac:	4c0a      	ldr	r4, [pc, #40]	; (80027d8 <LoopFillZerobss+0x22>)
 80027ae:	2300      	movs	r3, #0
 80027b0:	e001      	b.n	80027b6 <LoopFillZerobss>

080027b2 <FillZerobss>:
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	3204      	adds	r2, #4

080027b6 <LoopFillZerobss>:
 80027b6:	42a2      	cmp	r2, r4
 80027b8:	d3fb      	bcc.n	80027b2 <FillZerobss>
 80027ba:	f00d fa03 	bl	800fbc4 <__libc_init_array>
 80027be:	f7fe fc4d 	bl	800105c <main>
 80027c2:	4770      	bx	lr
 80027c4:	24080000 	.word	0x24080000
 80027c8:	24000000 	.word	0x24000000
 80027cc:	240000a0 	.word	0x240000a0
 80027d0:	0800fed4 	.word	0x0800fed4
 80027d4:	240000a0 	.word	0x240000a0
 80027d8:	240005d4 	.word	0x240005d4

080027dc <ADC3_IRQHandler>:
 80027dc:	e7fe      	b.n	80027dc <ADC3_IRQHandler>
	...

080027e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e6:	2003      	movs	r0, #3
 80027e8:	f001 fdae 	bl	8004348 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027ec:	f006 fbb6 	bl	8008f5c <HAL_RCC_GetSysClockFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <HAL_Init+0x68>)
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	4913      	ldr	r1, [pc, #76]	; (800284c <HAL_Init+0x6c>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
 8002808:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800280a:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <HAL_Init+0x68>)
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	4a0e      	ldr	r2, [pc, #56]	; (800284c <HAL_Init+0x6c>)
 8002814:	5cd3      	ldrb	r3, [r2, r3]
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
 8002820:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <HAL_Init+0x70>)
 8002822:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <HAL_Init+0x74>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800282a:	200f      	movs	r0, #15
 800282c:	f000 f814 	bl	8002858 <HAL_InitTick>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e002      	b.n	8002840 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800283a:	f7ff faaf 	bl	8001d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	58024400 	.word	0x58024400
 800284c:	0800fe84 	.word	0x0800fe84
 8002850:	24000030 	.word	0x24000030
 8002854:	2400002c 	.word	0x2400002c

08002858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002860:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_InitTick+0x60>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e021      	b.n	80028b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800286c:	4b13      	ldr	r3, [pc, #76]	; (80028bc <HAL_InitTick+0x64>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_InitTick+0x60>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4619      	mov	r1, r3
 8002876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800287a:	fbb3 f3f1 	udiv	r3, r3, r1
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	4618      	mov	r0, r3
 8002884:	f001 fd93 	bl	80043ae <HAL_SYSTICK_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e00e      	b.n	80028b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b0f      	cmp	r3, #15
 8002896:	d80a      	bhi.n	80028ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002898:	2200      	movs	r2, #0
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028a0:	f001 fd5d 	bl	800435e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a4:	4a06      	ldr	r2, [pc, #24]	; (80028c0 <HAL_InitTick+0x68>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	24000038 	.word	0x24000038
 80028bc:	2400002c 	.word	0x2400002c
 80028c0:	24000034 	.word	0x24000034

080028c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_IncTick+0x20>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_IncTick+0x24>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <HAL_IncTick+0x24>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	24000038 	.word	0x24000038
 80028e8:	240005c0 	.word	0x240005c0

080028ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return uwTick;
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_GetTick+0x14>)
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	240005c0 	.word	0x240005c0

08002904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800290c:	f7ff ffee 	bl	80028ec <HAL_GetTick>
 8002910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800291c:	d005      	beq.n	800292a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_Delay+0x44>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800292a:	bf00      	nop
 800292c:	f7ff ffde 	bl	80028ec <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	429a      	cmp	r2, r3
 800293a:	d8f7      	bhi.n	800292c <HAL_Delay+0x28>
  {
  }
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	24000038 	.word	0x24000038

0800294c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_SuspendTick+0x1c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_SuspendTick+0x1c>)
 8002956:	f023 0302 	bic.w	r3, r3, #2
 800295a:	6013      	str	r3, [r2, #0]
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000e010 	.word	0xe000e010

0800296c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_GetREVID+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0c1b      	lsrs	r3, r3, #16
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	5c001000 	.word	0x5c001000

08002984 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	43db      	mvns	r3, r3
 8002996:	401a      	ands	r2, r3
 8002998:	4904      	ldr	r1, [pc, #16]	; (80029ac <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	58000400 	.word	0x58000400

080029b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	609a      	str	r2, [r3, #8]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	609a      	str	r2, [r3, #8]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3360      	adds	r3, #96	; 0x60
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	431a      	orrs	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	611a      	str	r2, [r3, #16]
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b087      	sub	sp, #28
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3360      	adds	r3, #96	; 0x60
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	601a      	str	r2, [r3, #0]
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b087      	sub	sp, #28
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3330      	adds	r3, #48	; 0x30
 8002af6:	461a      	mov	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	0a1b      	lsrs	r3, r3, #8
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	4413      	add	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	211f      	movs	r1, #31
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	401a      	ands	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	0e9b      	lsrs	r3, r3, #26
 8002b1e:	f003 011f 	and.w	r1, r3, #31
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f023 0203 	bic.w	r2, r3, #3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	60da      	str	r2, [r3, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3314      	adds	r3, #20
 8002b74:	461a      	mov	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	0e5b      	lsrs	r3, r3, #25
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	4413      	add	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	0d1b      	lsrs	r3, r3, #20
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	2107      	movs	r1, #7
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	401a      	ands	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	0d1b      	lsrs	r3, r3, #20
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f003 0318 	and.w	r3, r3, #24
 8002bde:	4908      	ldr	r1, [pc, #32]	; (8002c00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002be0:	40d9      	lsrs	r1, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	400b      	ands	r3, r1
 8002be6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bea:	431a      	orrs	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	000fffff 	.word	0x000fffff

08002c04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 031f 	and.w	r3, r3, #31
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6093      	str	r3, [r2, #8]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	5fffffc0 	.word	0x5fffffc0

08002c44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c58:	d101      	bne.n	8002c5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <LL_ADC_EnableInternalRegulator+0x24>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	6fffffc0 	.word	0x6fffffc0

08002c94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ca8:	d101      	bne.n	8002cae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <LL_ADC_Enable+0x24>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	f043 0201 	orr.w	r2, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	7fffffc0 	.word	0x7fffffc0

08002ce4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <LL_ADC_Disable+0x24>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	f043 0202 	orr.w	r2, r3, #2
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	7fffffc0 	.word	0x7fffffc0

08002d0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <LL_ADC_IsEnabled+0x18>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <LL_ADC_IsEnabled+0x1a>
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d101      	bne.n	8002d4a <LL_ADC_IsDisableOngoing+0x18>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <LL_ADC_IsDisableOngoing+0x1a>
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <LL_ADC_REG_StartConversion+0x24>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	f043 0204 	orr.w	r2, r3, #4
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	7fffffc0 	.word	0x7fffffc0

08002d80 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d101      	bne.n	8002d98 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d101      	bne.n	8002dbe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b089      	sub	sp, #36	; 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e18f      	b.n	8003106 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d109      	bne.n	8002e08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7fe ffeb 	bl	8001dd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff19 	bl	8002c44 <LL_ADC_IsDeepPowerDownEnabled>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff feff 	bl	8002c20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff ff34 	bl	8002c94 <LL_ADC_IsInternalRegulatorEnabled>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d114      	bne.n	8002e5c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff ff18 	bl	8002c6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e3c:	4b87      	ldr	r3, [pc, #540]	; (800305c <HAL_ADC_Init+0x290>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	099b      	lsrs	r3, r3, #6
 8002e42:	4a87      	ldr	r2, [pc, #540]	; (8003060 <HAL_ADC_Init+0x294>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e4e:	e002      	b.n	8002e56 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f9      	bne.n	8002e50 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff17 	bl	8002c94 <LL_ADC_IsInternalRegulatorEnabled>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10d      	bne.n	8002e88 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e70:	f043 0210 	orr.w	r2, r3, #16
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7c:	f043 0201 	orr.w	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff77 	bl	8002d80 <LL_ADC_REG_IsConversionOngoing>
 8002e92:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f040 8129 	bne.w	80030f4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f040 8125 	bne.w	80030f4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002eb2:	f043 0202 	orr.w	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ff24 	bl	8002d0c <LL_ADC_IsEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d136      	bne.n	8002f38 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a65      	ldr	r2, [pc, #404]	; (8003064 <HAL_ADC_Init+0x298>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_ADC_Init+0x112>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a63      	ldr	r2, [pc, #396]	; (8003068 <HAL_ADC_Init+0x29c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d10e      	bne.n	8002efc <HAL_ADC_Init+0x130>
 8002ede:	4861      	ldr	r0, [pc, #388]	; (8003064 <HAL_ADC_Init+0x298>)
 8002ee0:	f7ff ff14 	bl	8002d0c <LL_ADC_IsEnabled>
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	4860      	ldr	r0, [pc, #384]	; (8003068 <HAL_ADC_Init+0x29c>)
 8002ee8:	f7ff ff10 	bl	8002d0c <LL_ADC_IsEnabled>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4323      	orrs	r3, r4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e008      	b.n	8002f0e <HAL_ADC_Init+0x142>
 8002efc:	485b      	ldr	r0, [pc, #364]	; (800306c <HAL_ADC_Init+0x2a0>)
 8002efe:	f7ff ff05 	bl	8002d0c <LL_ADC_IsEnabled>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d012      	beq.n	8002f38 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a53      	ldr	r2, [pc, #332]	; (8003064 <HAL_ADC_Init+0x298>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_ADC_Init+0x15a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a51      	ldr	r2, [pc, #324]	; (8003068 <HAL_ADC_Init+0x29c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_Init+0x15e>
 8002f26:	4a52      	ldr	r2, [pc, #328]	; (8003070 <HAL_ADC_Init+0x2a4>)
 8002f28:	e000      	b.n	8002f2c <HAL_ADC_Init+0x160>
 8002f2a:	4a52      	ldr	r2, [pc, #328]	; (8003074 <HAL_ADC_Init+0x2a8>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f7ff fd3c 	bl	80029b0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002f38:	f7ff fd18 	bl	800296c <HAL_GetREVID>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d914      	bls.n	8002f70 <HAL_ADC_Init+0x1a4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d110      	bne.n	8002f70 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7d5b      	ldrb	r3, [r3, #21]
 8002f52:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f58:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f5e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7f1b      	ldrb	r3, [r3, #28]
 8002f64:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f66:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f68:	f043 030c 	orr.w	r3, r3, #12
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	e00d      	b.n	8002f8c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	7d5b      	ldrb	r3, [r3, #21]
 8002f74:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f7a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f80:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	7f1b      	ldrb	r3, [r3, #28]
 8002f86:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7f1b      	ldrb	r3, [r3, #28]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d106      	bne.n	8002fa2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	045b      	lsls	r3, r3, #17
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	4b2c      	ldr	r3, [pc, #176]	; (8003078 <HAL_ADC_Init+0x2ac>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	69b9      	ldr	r1, [r7, #24]
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fed2 	bl	8002d80 <LL_ADC_REG_IsConversionOngoing>
 8002fdc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fedf 	bl	8002da6 <LL_ADC_INJ_IsConversionOngoing>
 8002fe8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d15f      	bne.n	80030b0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d15c      	bne.n	80030b0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7d1b      	ldrb	r3, [r3, #20]
 8002ffa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	4b1c      	ldr	r3, [pc, #112]	; (800307c <HAL_ADC_Init+0x2b0>)
 800300c:	4013      	ands	r3, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	69b9      	ldr	r1, [r7, #24]
 8003014:	430b      	orrs	r3, r1
 8003016:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800301e:	2b01      	cmp	r3, #1
 8003020:	d130      	bne.n	8003084 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <HAL_ADC_Init+0x2b4>)
 8003030:	4013      	ands	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003036:	3a01      	subs	r2, #1
 8003038:	0411      	lsls	r1, r2, #16
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003044:	4311      	orrs	r1, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800304a:	430a      	orrs	r2, r1
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	611a      	str	r2, [r3, #16]
 8003058:	e01c      	b.n	8003094 <HAL_ADC_Init+0x2c8>
 800305a:	bf00      	nop
 800305c:	2400002c 	.word	0x2400002c
 8003060:	053e2d63 	.word	0x053e2d63
 8003064:	40022000 	.word	0x40022000
 8003068:	40022100 	.word	0x40022100
 800306c:	58026000 	.word	0x58026000
 8003070:	40022300 	.word	0x40022300
 8003074:	58026300 	.word	0x58026300
 8003078:	fff0c003 	.word	0xfff0c003
 800307c:	ffffbffc 	.word	0xffffbffc
 8003080:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fdd6 	bl	8003c5c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10c      	bne.n	80030d2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f023 010f 	bic.w	r1, r3, #15
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	1e5a      	subs	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
 80030d0:	e007      	b.n	80030e2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 020f 	bic.w	r2, r2, #15
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f023 0303 	bic.w	r3, r3, #3
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54
 80030f2:	e007      	b.n	8003104 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f8:	f043 0210 	orr.w	r2, r3, #16
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003104:	7ffb      	ldrb	r3, [r7, #31]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3724      	adds	r7, #36	; 0x24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd90      	pop	{r4, r7, pc}
 800310e:	bf00      	nop

08003110 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a55      	ldr	r2, [pc, #340]	; (8003278 <HAL_ADC_Start_DMA+0x168>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_ADC_Start_DMA+0x20>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a54      	ldr	r2, [pc, #336]	; (800327c <HAL_ADC_Start_DMA+0x16c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_ADC_Start_DMA+0x24>
 8003130:	4b53      	ldr	r3, [pc, #332]	; (8003280 <HAL_ADC_Start_DMA+0x170>)
 8003132:	e000      	b.n	8003136 <HAL_ADC_Start_DMA+0x26>
 8003134:	4b53      	ldr	r3, [pc, #332]	; (8003284 <HAL_ADC_Start_DMA+0x174>)
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fd64 	bl	8002c04 <LL_ADC_GetMultimode>
 800313c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fe1c 	bl	8002d80 <LL_ADC_REG_IsConversionOngoing>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 808c 	bne.w	8003268 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_ADC_Start_DMA+0x4e>
 800315a:	2302      	movs	r3, #2
 800315c:	e087      	b.n	800326e <HAL_ADC_Start_DMA+0x15e>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b05      	cmp	r3, #5
 8003170:	d002      	beq.n	8003178 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b09      	cmp	r3, #9
 8003176:	d170      	bne.n	800325a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fbf1 	bl	8003960 <ADC_Enable>
 800317e:	4603      	mov	r3, r0
 8003180:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003182:	7dfb      	ldrb	r3, [r7, #23]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d163      	bne.n	8003250 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800318c:	4b3e      	ldr	r3, [pc, #248]	; (8003288 <HAL_ADC_Start_DMA+0x178>)
 800318e:	4013      	ands	r3, r2
 8003190:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a37      	ldr	r2, [pc, #220]	; (800327c <HAL_ADC_Start_DMA+0x16c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d002      	beq.n	80031a8 <HAL_ADC_Start_DMA+0x98>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	e000      	b.n	80031aa <HAL_ADC_Start_DMA+0x9a>
 80031a8:	4b33      	ldr	r3, [pc, #204]	; (8003278 <HAL_ADC_Start_DMA+0x168>)
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d002      	beq.n	80031b8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d006      	beq.n	80031de <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	f023 0206 	bic.w	r2, r3, #6
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	659a      	str	r2, [r3, #88]	; 0x58
 80031dc:	e002      	b.n	80031e4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e8:	4a28      	ldr	r2, [pc, #160]	; (800328c <HAL_ADC_Start_DMA+0x17c>)
 80031ea:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f0:	4a27      	ldr	r2, [pc, #156]	; (8003290 <HAL_ADC_Start_DMA+0x180>)
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f8:	4a26      	ldr	r2, [pc, #152]	; (8003294 <HAL_ADC_Start_DMA+0x184>)
 80031fa:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	221c      	movs	r2, #28
 8003202:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0210 	orr.w	r2, r2, #16
 800321a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f7ff fc89 	bl	8002b3e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3340      	adds	r3, #64	; 0x40
 8003236:	4619      	mov	r1, r3
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f001 fde8 	bl	8004e10 <HAL_DMA_Start_IT>
 8003240:	4603      	mov	r3, r0
 8003242:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fd85 	bl	8002d58 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800324e:	e00d      	b.n	800326c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003258:	e008      	b.n	800326c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003266:	e001      	b.n	800326c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003268:	2302      	movs	r3, #2
 800326a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40022000 	.word	0x40022000
 800327c:	40022100 	.word	0x40022100
 8003280:	40022300 	.word	0x40022300
 8003284:	58026300 	.word	0x58026300
 8003288:	fffff0fe 	.word	0xfffff0fe
 800328c:	08003b33 	.word	0x08003b33
 8003290:	08003c0b 	.word	0x08003c0b
 8003294:	08003c27 	.word	0x08003c27

08003298 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b0a1      	sub	sp, #132	; 0x84
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a9d      	ldr	r2, [pc, #628]	; (8003550 <HAL_ADC_ConfigChannel+0x290>)
 80032da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x2a>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e321      	b.n	800392e <HAL_ADC_ConfigChannel+0x66e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fd42 	bl	8002d80 <LL_ADC_REG_IsConversionOngoing>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 8306 	bne.w	8003910 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800330c:	2b00      	cmp	r3, #0
 800330e:	d108      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x62>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2201      	movs	r2, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	e016      	b.n	8003350 <HAL_ADC_ConfigChannel+0x90>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003332:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800333a:	2320      	movs	r3, #32
 800333c:	e003      	b.n	8003346 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800333e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2201      	movs	r2, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	69d1      	ldr	r1, [r2, #28]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	430b      	orrs	r3, r1
 800335c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	f7ff fbbb 	bl	8002ae6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fd03 	bl	8002d80 <LL_ADC_REG_IsConversionOngoing>
 800337a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fd10 	bl	8002da6 <LL_ADC_INJ_IsConversionOngoing>
 8003386:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800338a:	2b00      	cmp	r3, #0
 800338c:	f040 80b3 	bne.w	80034f6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 80af 	bne.w	80034f6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6819      	ldr	r1, [r3, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	461a      	mov	r2, r3
 80033a6:	f7ff fbdd 	bl	8002b64 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033aa:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_ADC_ConfigChannel+0x294>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033b6:	d10b      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x110>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	e01d      	b.n	800340c <HAL_ADC_ConfigChannel+0x14c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x136>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	089b      	lsrs	r3, r3, #2
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	e00a      	b.n	800340c <HAL_ADC_ConfigChannel+0x14c>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d027      	beq.n	8003466 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6919      	ldr	r1, [r3, #16]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003424:	f7ff faf8 	bl	8002a18 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6919      	ldr	r1, [r3, #16]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	7e5b      	ldrb	r3, [r3, #25]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d102      	bne.n	800343e <HAL_ADC_ConfigChannel+0x17e>
 8003438:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800343c:	e000      	b.n	8003440 <HAL_ADC_ConfigChannel+0x180>
 800343e:	2300      	movs	r3, #0
 8003440:	461a      	mov	r2, r3
 8003442:	f7ff fb22 	bl	8002a8a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6919      	ldr	r1, [r3, #16]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	7e1b      	ldrb	r3, [r3, #24]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d102      	bne.n	800345c <HAL_ADC_ConfigChannel+0x19c>
 8003456:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800345a:	e000      	b.n	800345e <HAL_ADC_ConfigChannel+0x19e>
 800345c:	2300      	movs	r3, #0
 800345e:	461a      	mov	r2, r3
 8003460:	f7ff fafa 	bl	8002a58 <LL_ADC_SetDataRightShift>
 8003464:	e047      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	069b      	lsls	r3, r3, #26
 8003476:	429a      	cmp	r2, r3
 8003478:	d107      	bne.n	800348a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003488:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	069b      	lsls	r3, r3, #26
 800349a:	429a      	cmp	r2, r3
 800349c:	d107      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034ac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	069b      	lsls	r3, r3, #26
 80034be:	429a      	cmp	r2, r3
 80034c0:	d107      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034d0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	069b      	lsls	r3, r3, #26
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d107      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fc06 	bl	8002d0c <LL_ADC_IsEnabled>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	f040 820d 	bne.w	8003922 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	461a      	mov	r2, r3
 8003516:	f7ff fb51 	bl	8002bbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <HAL_ADC_ConfigChannel+0x290>)
 8003520:	4293      	cmp	r3, r2
 8003522:	f040 8133 	bne.w	800378c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003532:	2b00      	cmp	r3, #0
 8003534:	d110      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x298>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	0e9b      	lsrs	r3, r3, #26
 800353c:	3301      	adds	r3, #1
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2b09      	cmp	r3, #9
 8003544:	bf94      	ite	ls
 8003546:	2301      	movls	r3, #1
 8003548:	2300      	movhi	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e01e      	b.n	800358c <HAL_ADC_ConfigChannel+0x2cc>
 800354e:	bf00      	nop
 8003550:	47ff0000 	.word	0x47ff0000
 8003554:	5c001000 	.word	0x5c001000
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003568:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800356a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003570:	2320      	movs	r3, #32
 8003572:	e003      	b.n	800357c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	3301      	adds	r3, #1
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	2b09      	cmp	r3, #9
 8003584:	bf94      	ite	ls
 8003586:	2301      	movls	r3, #1
 8003588:	2300      	movhi	r3, #0
 800358a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800358c:	2b00      	cmp	r3, #0
 800358e:	d079      	beq.n	8003684 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003598:	2b00      	cmp	r3, #0
 800359a:	d107      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x2ec>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0e9b      	lsrs	r3, r3, #26
 80035a2:	3301      	adds	r3, #1
 80035a4:	069b      	lsls	r3, r3, #26
 80035a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035aa:	e015      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x318>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80035ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80035be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80035c4:	2320      	movs	r3, #32
 80035c6:	e003      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80035c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	069b      	lsls	r3, r3, #26
 80035d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x338>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0e9b      	lsrs	r3, r3, #26
 80035ea:	3301      	adds	r3, #1
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	e017      	b.n	8003628 <HAL_ADC_ConfigChannel+0x368>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003608:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800360a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003610:	2320      	movs	r3, #32
 8003612:	e003      	b.n	800361c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	3301      	adds	r3, #1
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	2101      	movs	r1, #1
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	ea42 0103 	orr.w	r1, r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <HAL_ADC_ConfigChannel+0x38e>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	0e9b      	lsrs	r3, r3, #26
 800363e:	3301      	adds	r3, #1
 8003640:	f003 021f 	and.w	r2, r3, #31
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	051b      	lsls	r3, r3, #20
 800364c:	e018      	b.n	8003680 <HAL_ADC_ConfigChannel+0x3c0>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003666:	2320      	movs	r3, #32
 8003668:	e003      	b.n	8003672 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	3301      	adds	r3, #1
 8003674:	f003 021f 	and.w	r2, r3, #31
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003680:	430b      	orrs	r3, r1
 8003682:	e07e      	b.n	8003782 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x3e0>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	0e9b      	lsrs	r3, r3, #26
 8003696:	3301      	adds	r3, #1
 8003698:	069b      	lsls	r3, r3, #26
 800369a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800369e:	e015      	b.n	80036cc <HAL_ADC_ConfigChannel+0x40c>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80036b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80036b8:	2320      	movs	r3, #32
 80036ba:	e003      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	069b      	lsls	r3, r3, #26
 80036c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d109      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x42c>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0e9b      	lsrs	r3, r3, #26
 80036de:	3301      	adds	r3, #1
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	2101      	movs	r1, #1
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	e017      	b.n	800371c <HAL_ADC_ConfigChannel+0x45c>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	61bb      	str	r3, [r7, #24]
  return result;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003704:	2320      	movs	r3, #32
 8003706:	e003      	b.n	8003710 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	3301      	adds	r3, #1
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2101      	movs	r1, #1
 8003718:	fa01 f303 	lsl.w	r3, r1, r3
 800371c:	ea42 0103 	orr.w	r1, r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10d      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x488>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	0e9b      	lsrs	r3, r3, #26
 8003732:	3301      	adds	r3, #1
 8003734:	f003 021f 	and.w	r2, r3, #31
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	3b1e      	subs	r3, #30
 8003740:	051b      	lsls	r3, r3, #20
 8003742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003746:	e01b      	b.n	8003780 <HAL_ADC_ConfigChannel+0x4c0>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	60fb      	str	r3, [r7, #12]
  return result;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003760:	2320      	movs	r3, #32
 8003762:	e003      	b.n	800376c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	3301      	adds	r3, #1
 800376e:	f003 021f 	and.w	r2, r3, #31
 8003772:	4613      	mov	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4413      	add	r3, r2
 8003778:	3b1e      	subs	r3, #30
 800377a:	051b      	lsls	r3, r3, #20
 800377c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003780:	430b      	orrs	r3, r1
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	6892      	ldr	r2, [r2, #8]
 8003786:	4619      	mov	r1, r3
 8003788:	f7ff f9ec 	bl	8002b64 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f280 80c6 	bge.w	8003922 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a67      	ldr	r2, [pc, #412]	; (8003938 <HAL_ADC_ConfigChannel+0x678>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_ADC_ConfigChannel+0x4ea>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a65      	ldr	r2, [pc, #404]	; (800393c <HAL_ADC_ConfigChannel+0x67c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x4ee>
 80037aa:	4b65      	ldr	r3, [pc, #404]	; (8003940 <HAL_ADC_ConfigChannel+0x680>)
 80037ac:	e000      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x4f0>
 80037ae:	4b65      	ldr	r3, [pc, #404]	; (8003944 <HAL_ADC_ConfigChannel+0x684>)
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff f923 	bl	80029fc <LL_ADC_GetCommonPathInternalCh>
 80037b6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a5e      	ldr	r2, [pc, #376]	; (8003938 <HAL_ADC_ConfigChannel+0x678>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_ADC_ConfigChannel+0x50c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a5d      	ldr	r2, [pc, #372]	; (800393c <HAL_ADC_ConfigChannel+0x67c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d10e      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x52a>
 80037cc:	485a      	ldr	r0, [pc, #360]	; (8003938 <HAL_ADC_ConfigChannel+0x678>)
 80037ce:	f7ff fa9d 	bl	8002d0c <LL_ADC_IsEnabled>
 80037d2:	4604      	mov	r4, r0
 80037d4:	4859      	ldr	r0, [pc, #356]	; (800393c <HAL_ADC_ConfigChannel+0x67c>)
 80037d6:	f7ff fa99 	bl	8002d0c <LL_ADC_IsEnabled>
 80037da:	4603      	mov	r3, r0
 80037dc:	4323      	orrs	r3, r4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	e008      	b.n	80037fc <HAL_ADC_ConfigChannel+0x53c>
 80037ea:	4857      	ldr	r0, [pc, #348]	; (8003948 <HAL_ADC_ConfigChannel+0x688>)
 80037ec:	f7ff fa8e 	bl	8002d0c <LL_ADC_IsEnabled>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf0c      	ite	eq
 80037f6:	2301      	moveq	r3, #1
 80037f8:	2300      	movne	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d07d      	beq.n	80038fc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a51      	ldr	r2, [pc, #324]	; (800394c <HAL_ADC_ConfigChannel+0x68c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d130      	bne.n	800386c <HAL_ADC_ConfigChannel+0x5ac>
 800380a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d12b      	bne.n	800386c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a4b      	ldr	r2, [pc, #300]	; (8003948 <HAL_ADC_ConfigChannel+0x688>)
 800381a:	4293      	cmp	r3, r2
 800381c:	f040 8081 	bne.w	8003922 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a44      	ldr	r2, [pc, #272]	; (8003938 <HAL_ADC_ConfigChannel+0x678>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_ADC_ConfigChannel+0x574>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a43      	ldr	r2, [pc, #268]	; (800393c <HAL_ADC_ConfigChannel+0x67c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x578>
 8003834:	4a42      	ldr	r2, [pc, #264]	; (8003940 <HAL_ADC_ConfigChannel+0x680>)
 8003836:	e000      	b.n	800383a <HAL_ADC_ConfigChannel+0x57a>
 8003838:	4a42      	ldr	r2, [pc, #264]	; (8003944 <HAL_ADC_ConfigChannel+0x684>)
 800383a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f7ff f8c7 	bl	80029d6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003848:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_ADC_ConfigChannel+0x690>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	4a41      	ldr	r2, [pc, #260]	; (8003954 <HAL_ADC_ConfigChannel+0x694>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	099b      	lsrs	r3, r3, #6
 8003856:	3301      	adds	r3, #1
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800385c:	e002      	b.n	8003864 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	3b01      	subs	r3, #1
 8003862:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f9      	bne.n	800385e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800386a:	e05a      	b.n	8003922 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a39      	ldr	r2, [pc, #228]	; (8003958 <HAL_ADC_ConfigChannel+0x698>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d11e      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x5f4>
 8003876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d119      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a30      	ldr	r2, [pc, #192]	; (8003948 <HAL_ADC_ConfigChannel+0x688>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d14b      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2a      	ldr	r2, [pc, #168]	; (8003938 <HAL_ADC_ConfigChannel+0x678>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d004      	beq.n	800389e <HAL_ADC_ConfigChannel+0x5de>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a28      	ldr	r2, [pc, #160]	; (800393c <HAL_ADC_ConfigChannel+0x67c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d101      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x5e2>
 800389e:	4a28      	ldr	r2, [pc, #160]	; (8003940 <HAL_ADC_ConfigChannel+0x680>)
 80038a0:	e000      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x5e4>
 80038a2:	4a28      	ldr	r2, [pc, #160]	; (8003944 <HAL_ADC_ConfigChannel+0x684>)
 80038a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038aa:	4619      	mov	r1, r3
 80038ac:	4610      	mov	r0, r2
 80038ae:	f7ff f892 	bl	80029d6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038b2:	e036      	b.n	8003922 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a28      	ldr	r2, [pc, #160]	; (800395c <HAL_ADC_ConfigChannel+0x69c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d131      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x662>
 80038be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d12c      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <HAL_ADC_ConfigChannel+0x688>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d127      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a18      	ldr	r2, [pc, #96]	; (8003938 <HAL_ADC_ConfigChannel+0x678>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d004      	beq.n	80038e6 <HAL_ADC_ConfigChannel+0x626>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a16      	ldr	r2, [pc, #88]	; (800393c <HAL_ADC_ConfigChannel+0x67c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x62a>
 80038e6:	4a16      	ldr	r2, [pc, #88]	; (8003940 <HAL_ADC_ConfigChannel+0x680>)
 80038e8:	e000      	b.n	80038ec <HAL_ADC_ConfigChannel+0x62c>
 80038ea:	4a16      	ldr	r2, [pc, #88]	; (8003944 <HAL_ADC_ConfigChannel+0x684>)
 80038ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f7ff f86e 	bl	80029d6 <LL_ADC_SetCommonPathInternalCh>
 80038fa:	e012      	b.n	8003922 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	f043 0220 	orr.w	r2, r3, #32
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800390e:	e008      	b.n	8003922 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800392a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800392e:	4618      	mov	r0, r3
 8003930:	3784      	adds	r7, #132	; 0x84
 8003932:	46bd      	mov	sp, r7
 8003934:	bd90      	pop	{r4, r7, pc}
 8003936:	bf00      	nop
 8003938:	40022000 	.word	0x40022000
 800393c:	40022100 	.word	0x40022100
 8003940:	40022300 	.word	0x40022300
 8003944:	58026300 	.word	0x58026300
 8003948:	58026000 	.word	0x58026000
 800394c:	cb840000 	.word	0xcb840000
 8003950:	2400002c 	.word	0x2400002c
 8003954:	053e2d63 	.word	0x053e2d63
 8003958:	c7520000 	.word	0xc7520000
 800395c:	cfb80000 	.word	0xcfb80000

08003960 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff f9cd 	bl	8002d0c <LL_ADC_IsEnabled>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d16e      	bne.n	8003a56 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	4b38      	ldr	r3, [pc, #224]	; (8003a60 <ADC_Enable+0x100>)
 8003980:	4013      	ands	r3, r2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00d      	beq.n	80039a2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f043 0210 	orr.w	r2, r3, #16
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	f043 0201 	orr.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e05a      	b.n	8003a58 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff f988 	bl	8002cbc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039ac:	f7fe ff9e 	bl	80028ec <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2b      	ldr	r2, [pc, #172]	; (8003a64 <ADC_Enable+0x104>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d004      	beq.n	80039c6 <ADC_Enable+0x66>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a29      	ldr	r2, [pc, #164]	; (8003a68 <ADC_Enable+0x108>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <ADC_Enable+0x6a>
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <ADC_Enable+0x10c>)
 80039c8:	e000      	b.n	80039cc <ADC_Enable+0x6c>
 80039ca:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <ADC_Enable+0x110>)
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff f919 	bl	8002c04 <LL_ADC_GetMultimode>
 80039d2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a23      	ldr	r2, [pc, #140]	; (8003a68 <ADC_Enable+0x108>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d002      	beq.n	80039e4 <ADC_Enable+0x84>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	e000      	b.n	80039e6 <ADC_Enable+0x86>
 80039e4:	4b1f      	ldr	r3, [pc, #124]	; (8003a64 <ADC_Enable+0x104>)
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d02c      	beq.n	8003a48 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d130      	bne.n	8003a56 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039f4:	e028      	b.n	8003a48 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff f986 	bl	8002d0c <LL_ADC_IsEnabled>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d104      	bne.n	8003a10 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff f956 	bl	8002cbc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a10:	f7fe ff6c 	bl	80028ec <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d914      	bls.n	8003a48 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d00d      	beq.n	8003a48 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a30:	f043 0210 	orr.w	r2, r3, #16
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	f043 0201 	orr.w	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e007      	b.n	8003a58 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d1cf      	bne.n	80039f6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	8000003f 	.word	0x8000003f
 8003a64:	40022000 	.word	0x40022000
 8003a68:	40022100 	.word	0x40022100
 8003a6c:	40022300 	.word	0x40022300
 8003a70:	58026300 	.word	0x58026300

08003a74 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff f956 	bl	8002d32 <LL_ADC_IsDisableOngoing>
 8003a86:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff f93d 	bl	8002d0c <LL_ADC_IsEnabled>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d047      	beq.n	8003b28 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d144      	bne.n	8003b28 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 030d 	and.w	r3, r3, #13
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d10c      	bne.n	8003ac6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff f917 	bl	8002ce4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2203      	movs	r2, #3
 8003abc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003abe:	f7fe ff15 	bl	80028ec <HAL_GetTick>
 8003ac2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ac4:	e029      	b.n	8003b1a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	f043 0210 	orr.w	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	f043 0201 	orr.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e023      	b.n	8003b2a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ae2:	f7fe ff03 	bl	80028ec <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d914      	bls.n	8003b1a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00d      	beq.n	8003b1a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	f043 0210 	orr.w	r2, r3, #16
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	f043 0201 	orr.w	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e007      	b.n	8003b2a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1dc      	bne.n	8003ae2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d14b      	bne.n	8003be4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d021      	beq.n	8003baa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fe ffa8 	bl	8002ac0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d032      	beq.n	8003bdc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d12b      	bne.n	8003bdc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d11f      	bne.n	8003bdc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	f043 0201 	orr.w	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
 8003ba8:	e018      	b.n	8003bdc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d111      	bne.n	8003bdc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	f043 0201 	orr.w	r2, r3, #1
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f7fe f86b 	bl	8001cb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003be2:	e00e      	b.n	8003c02 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff fb5b 	bl	80032ac <HAL_ADC_ErrorCallback>
}
 8003bf6:	e004      	b.n	8003c02 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	4798      	blx	r3
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff fb3d 	bl	8003298 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	f043 0204 	orr.w	r2, r3, #4
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f7ff fb2d 	bl	80032ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a79      	ldr	r2, [pc, #484]	; (8003e50 <ADC_ConfigureBoostMode+0x1f4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <ADC_ConfigureBoostMode+0x1c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a78      	ldr	r2, [pc, #480]	; (8003e54 <ADC_ConfigureBoostMode+0x1f8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d109      	bne.n	8003c8c <ADC_ConfigureBoostMode+0x30>
 8003c78:	4b77      	ldr	r3, [pc, #476]	; (8003e58 <ADC_ConfigureBoostMode+0x1fc>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf14      	ite	ne
 8003c84:	2301      	movne	r3, #1
 8003c86:	2300      	moveq	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e008      	b.n	8003c9e <ADC_ConfigureBoostMode+0x42>
 8003c8c:	4b73      	ldr	r3, [pc, #460]	; (8003e5c <ADC_ConfigureBoostMode+0x200>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01c      	beq.n	8003cdc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ca2:	f005 fad5 	bl	8009250 <HAL_RCC_GetHCLKFreq>
 8003ca6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cb0:	d010      	beq.n	8003cd4 <ADC_ConfigureBoostMode+0x78>
 8003cb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cb6:	d871      	bhi.n	8003d9c <ADC_ConfigureBoostMode+0x140>
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d002      	beq.n	8003cc4 <ADC_ConfigureBoostMode+0x68>
 8003cbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cc2:	d16b      	bne.n	8003d9c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	0c1b      	lsrs	r3, r3, #16
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	60fb      	str	r3, [r7, #12]
        break;
 8003cd2:	e066      	b.n	8003da2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	60fb      	str	r3, [r7, #12]
        break;
 8003cda:	e062      	b.n	8003da2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003cdc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ce0:	f006 fa58 	bl	800a194 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ce4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003cee:	d051      	beq.n	8003d94 <ADC_ConfigureBoostMode+0x138>
 8003cf0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003cf4:	d854      	bhi.n	8003da0 <ADC_ConfigureBoostMode+0x144>
 8003cf6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003cfa:	d047      	beq.n	8003d8c <ADC_ConfigureBoostMode+0x130>
 8003cfc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d00:	d84e      	bhi.n	8003da0 <ADC_ConfigureBoostMode+0x144>
 8003d02:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d06:	d03d      	beq.n	8003d84 <ADC_ConfigureBoostMode+0x128>
 8003d08:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d0c:	d848      	bhi.n	8003da0 <ADC_ConfigureBoostMode+0x144>
 8003d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d12:	d033      	beq.n	8003d7c <ADC_ConfigureBoostMode+0x120>
 8003d14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d18:	d842      	bhi.n	8003da0 <ADC_ConfigureBoostMode+0x144>
 8003d1a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d1e:	d029      	beq.n	8003d74 <ADC_ConfigureBoostMode+0x118>
 8003d20:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d24:	d83c      	bhi.n	8003da0 <ADC_ConfigureBoostMode+0x144>
 8003d26:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d2a:	d01a      	beq.n	8003d62 <ADC_ConfigureBoostMode+0x106>
 8003d2c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d30:	d836      	bhi.n	8003da0 <ADC_ConfigureBoostMode+0x144>
 8003d32:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d36:	d014      	beq.n	8003d62 <ADC_ConfigureBoostMode+0x106>
 8003d38:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d3c:	d830      	bhi.n	8003da0 <ADC_ConfigureBoostMode+0x144>
 8003d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d42:	d00e      	beq.n	8003d62 <ADC_ConfigureBoostMode+0x106>
 8003d44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d48:	d82a      	bhi.n	8003da0 <ADC_ConfigureBoostMode+0x144>
 8003d4a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d4e:	d008      	beq.n	8003d62 <ADC_ConfigureBoostMode+0x106>
 8003d50:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d54:	d824      	bhi.n	8003da0 <ADC_ConfigureBoostMode+0x144>
 8003d56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d5a:	d002      	beq.n	8003d62 <ADC_ConfigureBoostMode+0x106>
 8003d5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d60:	d11e      	bne.n	8003da0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	0c9b      	lsrs	r3, r3, #18
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	60fb      	str	r3, [r7, #12]
        break;
 8003d72:	e016      	b.n	8003da2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	60fb      	str	r3, [r7, #12]
        break;
 8003d7a:	e012      	b.n	8003da2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	60fb      	str	r3, [r7, #12]
        break;
 8003d82:	e00e      	b.n	8003da2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	099b      	lsrs	r3, r3, #6
 8003d88:	60fb      	str	r3, [r7, #12]
        break;
 8003d8a:	e00a      	b.n	8003da2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	09db      	lsrs	r3, r3, #7
 8003d90:	60fb      	str	r3, [r7, #12]
        break;
 8003d92:	e006      	b.n	8003da2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	60fb      	str	r3, [r7, #12]
        break;
 8003d9a:	e002      	b.n	8003da2 <ADC_ConfigureBoostMode+0x146>
        break;
 8003d9c:	bf00      	nop
 8003d9e:	e000      	b.n	8003da2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003da0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003da2:	f7fe fde3 	bl	800296c <HAL_GetREVID>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d815      	bhi.n	8003ddc <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a2b      	ldr	r2, [pc, #172]	; (8003e60 <ADC_ConfigureBoostMode+0x204>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d908      	bls.n	8003dca <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003dc8:	e03e      	b.n	8003e48 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dd8:	609a      	str	r2, [r3, #8]
}
 8003dda:	e035      	b.n	8003e48 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <ADC_ConfigureBoostMode+0x208>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d808      	bhi.n	8003dfc <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003df8:	609a      	str	r2, [r3, #8]
}
 8003dfa:	e025      	b.n	8003e48 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a1a      	ldr	r2, [pc, #104]	; (8003e68 <ADC_ConfigureBoostMode+0x20c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d80a      	bhi.n	8003e1a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e16:	609a      	str	r2, [r3, #8]
}
 8003e18:	e016      	b.n	8003e48 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4a13      	ldr	r2, [pc, #76]	; (8003e6c <ADC_ConfigureBoostMode+0x210>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d80a      	bhi.n	8003e38 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e34:	609a      	str	r2, [r3, #8]
}
 8003e36:	e007      	b.n	8003e48 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e46:	609a      	str	r2, [r3, #8]
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40022000 	.word	0x40022000
 8003e54:	40022100 	.word	0x40022100
 8003e58:	40022300 	.word	0x40022300
 8003e5c:	58026300 	.word	0x58026300
 8003e60:	01312d00 	.word	0x01312d00
 8003e64:	005f5e10 	.word	0x005f5e10
 8003e68:	00bebc20 	.word	0x00bebc20
 8003e6c:	017d7840 	.word	0x017d7840

08003e70 <LL_ADC_IsEnabled>:
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <LL_ADC_IsEnabled+0x18>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <LL_ADC_IsEnabled+0x1a>
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <LL_ADC_StartCalibration>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <LL_ADC_StartCalibration+0x38>)
 8003eaa:	4013      	ands	r3, r2
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	609a      	str	r2, [r3, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	3ffeffc0 	.word	0x3ffeffc0

08003ed4 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee8:	d101      	bne.n	8003eee <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_ADC_REG_IsConversionOngoing>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d101      	bne.n	8003f14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
	...

08003f24 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_ADCEx_Calibration_Start+0x1e>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e04c      	b.n	8003fdc <HAL_ADCEx_Calibration_Start+0xb8>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff fd92 	bl	8003a74 <ADC_Disable>
 8003f50:	4603      	mov	r3, r0
 8003f52:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d135      	bne.n	8003fc6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f5e:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	f043 0202 	orr.w	r2, r3, #2
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ff90 	bl	8003e98 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f78:	e014      	b.n	8003fa4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d30d      	bcc.n	8003fa4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	f023 0312 	bic.w	r3, r3, #18
 8003f90:	f043 0210 	orr.w	r2, r3, #16
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e01b      	b.n	8003fdc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff93 	bl	8003ed4 <LL_ADC_IsCalibrationOnGoing>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e2      	bne.n	8003f7a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	f023 0303 	bic.w	r3, r3, #3
 8003fbc:	f043 0201 	orr.w	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	655a      	str	r2, [r3, #84]	; 0x54
 8003fc4:	e005      	b.n	8003fd2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	f043 0210 	orr.w	r2, r3, #16
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	ffffeefd 	.word	0xffffeefd
 8003fe8:	25c3f800 	.word	0x25c3f800

08003fec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b09f      	sub	sp, #124	; 0x7c
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004006:	2302      	movs	r3, #2
 8004008:	e0be      	b.n	8004188 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004012:	2300      	movs	r3, #0
 8004014:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004016:	2300      	movs	r3, #0
 8004018:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a5c      	ldr	r2, [pc, #368]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d102      	bne.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004024:	4b5b      	ldr	r3, [pc, #364]	; (8004194 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	e001      	b.n	800402e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10b      	bne.n	800404c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004038:	f043 0220 	orr.w	r2, r3, #32
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e09d      	b.n	8004188 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff ff54 	bl	8003efc <LL_ADC_REG_IsConversionOngoing>
 8004054:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff ff4e 	bl	8003efc <LL_ADC_REG_IsConversionOngoing>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d17f      	bne.n	8004166 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004068:	2b00      	cmp	r3, #0
 800406a:	d17c      	bne.n	8004166 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a47      	ldr	r2, [pc, #284]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a46      	ldr	r2, [pc, #280]	; (8004194 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d101      	bne.n	8004084 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004080:	4b45      	ldr	r3, [pc, #276]	; (8004198 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004082:	e000      	b.n	8004086 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004084:	4b45      	ldr	r3, [pc, #276]	; (800419c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004086:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d039      	beq.n	8004104 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	431a      	orrs	r2, r3
 800409e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a3a      	ldr	r2, [pc, #232]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d004      	beq.n	80040b6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a38      	ldr	r2, [pc, #224]	; (8004194 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d10e      	bne.n	80040d4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80040b6:	4836      	ldr	r0, [pc, #216]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040b8:	f7ff feda 	bl	8003e70 <LL_ADC_IsEnabled>
 80040bc:	4604      	mov	r4, r0
 80040be:	4835      	ldr	r0, [pc, #212]	; (8004194 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040c0:	f7ff fed6 	bl	8003e70 <LL_ADC_IsEnabled>
 80040c4:	4603      	mov	r3, r0
 80040c6:	4323      	orrs	r3, r4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	e008      	b.n	80040e6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80040d4:	4832      	ldr	r0, [pc, #200]	; (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80040d6:	f7ff fecb 	bl	8003e70 <LL_ADC_IsEnabled>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bf0c      	ite	eq
 80040e0:	2301      	moveq	r3, #1
 80040e2:	2300      	movne	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d047      	beq.n	800417a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	4b2d      	ldr	r3, [pc, #180]	; (80041a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	6811      	ldr	r1, [r2, #0]
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	6892      	ldr	r2, [r2, #8]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	431a      	orrs	r2, r3
 80040fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004100:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004102:	e03a      	b.n	800417a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800410c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1e      	ldr	r2, [pc, #120]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d10e      	bne.n	8004142 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004124:	481a      	ldr	r0, [pc, #104]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004126:	f7ff fea3 	bl	8003e70 <LL_ADC_IsEnabled>
 800412a:	4604      	mov	r4, r0
 800412c:	4819      	ldr	r0, [pc, #100]	; (8004194 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800412e:	f7ff fe9f 	bl	8003e70 <LL_ADC_IsEnabled>
 8004132:	4603      	mov	r3, r0
 8004134:	4323      	orrs	r3, r4
 8004136:	2b00      	cmp	r3, #0
 8004138:	bf0c      	ite	eq
 800413a:	2301      	moveq	r3, #1
 800413c:	2300      	movne	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	e008      	b.n	8004154 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004142:	4817      	ldr	r0, [pc, #92]	; (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004144:	f7ff fe94 	bl	8003e70 <LL_ADC_IsEnabled>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d010      	beq.n	800417a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800415e:	4013      	ands	r3, r2
 8004160:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004162:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004164:	e009      	b.n	800417a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416a:	f043 0220 	orr.w	r2, r3, #32
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004178:	e000      	b.n	800417c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800417a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004184:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004188:	4618      	mov	r0, r3
 800418a:	377c      	adds	r7, #124	; 0x7c
 800418c:	46bd      	mov	sp, r7
 800418e:	bd90      	pop	{r4, r7, pc}
 8004190:	40022000 	.word	0x40022000
 8004194:	40022100 	.word	0x40022100
 8004198:	40022300 	.word	0x40022300
 800419c:	58026300 	.word	0x58026300
 80041a0:	58026000 	.word	0x58026000
 80041a4:	fffff0e0 	.word	0xfffff0e0

080041a8 <__NVIC_SetPriorityGrouping>:
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <__NVIC_SetPriorityGrouping+0x40>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041c4:	4013      	ands	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <__NVIC_SetPriorityGrouping+0x44>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041d6:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <__NVIC_SetPriorityGrouping+0x40>)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	60d3      	str	r3, [r2, #12]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	e000ed00 	.word	0xe000ed00
 80041ec:	05fa0000 	.word	0x05fa0000

080041f0 <__NVIC_GetPriorityGrouping>:
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <__NVIC_GetPriorityGrouping+0x18>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	0a1b      	lsrs	r3, r3, #8
 80041fa:	f003 0307 	and.w	r3, r3, #7
}
 80041fe:	4618      	mov	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	e000ed00 	.word	0xe000ed00

0800420c <__NVIC_EnableIRQ>:
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800421a:	2b00      	cmp	r3, #0
 800421c:	db0b      	blt.n	8004236 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	f003 021f 	and.w	r2, r3, #31
 8004224:	4907      	ldr	r1, [pc, #28]	; (8004244 <__NVIC_EnableIRQ+0x38>)
 8004226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	2001      	movs	r0, #1
 800422e:	fa00 f202 	lsl.w	r2, r0, r2
 8004232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	e000e100 	.word	0xe000e100

08004248 <__NVIC_SetPriority>:
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	6039      	str	r1, [r7, #0]
 8004252:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004258:	2b00      	cmp	r3, #0
 800425a:	db0a      	blt.n	8004272 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	b2da      	uxtb	r2, r3
 8004260:	490c      	ldr	r1, [pc, #48]	; (8004294 <__NVIC_SetPriority+0x4c>)
 8004262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004266:	0112      	lsls	r2, r2, #4
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	440b      	add	r3, r1
 800426c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004270:	e00a      	b.n	8004288 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	b2da      	uxtb	r2, r3
 8004276:	4908      	ldr	r1, [pc, #32]	; (8004298 <__NVIC_SetPriority+0x50>)
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	3b04      	subs	r3, #4
 8004280:	0112      	lsls	r2, r2, #4
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	440b      	add	r3, r1
 8004286:	761a      	strb	r2, [r3, #24]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	e000e100 	.word	0xe000e100
 8004298:	e000ed00 	.word	0xe000ed00

0800429c <NVIC_EncodePriority>:
{
 800429c:	b480      	push	{r7}
 800429e:	b089      	sub	sp, #36	; 0x24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f1c3 0307 	rsb	r3, r3, #7
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	bf28      	it	cs
 80042ba:	2304      	movcs	r3, #4
 80042bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3304      	adds	r3, #4
 80042c2:	2b06      	cmp	r3, #6
 80042c4:	d902      	bls.n	80042cc <NVIC_EncodePriority+0x30>
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3b03      	subs	r3, #3
 80042ca:	e000      	b.n	80042ce <NVIC_EncodePriority+0x32>
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43da      	mvns	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	401a      	ands	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	fa01 f303 	lsl.w	r3, r1, r3
 80042ee:	43d9      	mvns	r1, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f4:	4313      	orrs	r3, r2
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3724      	adds	r7, #36	; 0x24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3b01      	subs	r3, #1
 8004310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004314:	d301      	bcc.n	800431a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004316:	2301      	movs	r3, #1
 8004318:	e00f      	b.n	800433a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800431a:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <SysTick_Config+0x40>)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3b01      	subs	r3, #1
 8004320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004322:	210f      	movs	r1, #15
 8004324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004328:	f7ff ff8e 	bl	8004248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <SysTick_Config+0x40>)
 800432e:	2200      	movs	r2, #0
 8004330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004332:	4b04      	ldr	r3, [pc, #16]	; (8004344 <SysTick_Config+0x40>)
 8004334:	2207      	movs	r2, #7
 8004336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	e000e010 	.word	0xe000e010

08004348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff ff29 	bl	80041a8 <__NVIC_SetPriorityGrouping>
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b086      	sub	sp, #24
 8004362:	af00      	add	r7, sp, #0
 8004364:	4603      	mov	r3, r0
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800436c:	f7ff ff40 	bl	80041f0 <__NVIC_GetPriorityGrouping>
 8004370:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	6978      	ldr	r0, [r7, #20]
 8004378:	f7ff ff90 	bl	800429c <NVIC_EncodePriority>
 800437c:	4602      	mov	r2, r0
 800437e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff ff5f 	bl	8004248 <__NVIC_SetPriority>
}
 800438a:	bf00      	nop
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	4603      	mov	r3, r0
 800439a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800439c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ff33 	bl	800420c <__NVIC_EnableIRQ>
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff ffa4 	bl	8004304 <SysTick_Config>
 80043bc:	4603      	mov	r3, r0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e014      	b.n	8004402 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	791b      	ldrb	r3, [r3, #4]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d105      	bne.n	80043ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7fd fe0b 	bl	8002004 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	795b      	ldrb	r3, [r3, #5]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_DAC_Start+0x16>
 800441c:	2302      	movs	r3, #2
 800441e:	e040      	b.n	80044a2 <HAL_DAC_Start+0x98>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6819      	ldr	r1, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2201      	movs	r2, #1
 800443a:	409a      	lsls	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10f      	bne.n	800446a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004454:	2b02      	cmp	r3, #2
 8004456:	d11d      	bne.n	8004494 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	605a      	str	r2, [r3, #4]
 8004468:	e014      	b.n	8004494 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2102      	movs	r1, #2
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	429a      	cmp	r2, r3
 8004482:	d107      	bne.n	8004494 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0202 	orr.w	r2, r2, #2
 8004492:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b087      	sub	sp, #28
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	3308      	adds	r3, #8
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	e004      	b.n	80044e2 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4413      	add	r3, r2
 80044de:	3314      	adds	r3, #20
 80044e0:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	461a      	mov	r2, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	795b      	ldrb	r3, [r3, #5]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_DAC_ConfigChannel+0x18>
 800450c:	2302      	movs	r3, #2
 800450e:	e11d      	b.n	800474c <HAL_DAC_ConfigChannel+0x254>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2201      	movs	r2, #1
 8004514:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2202      	movs	r2, #2
 800451a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d174      	bne.n	800460e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004524:	f7fe f9e2 	bl	80028ec <HAL_GetTick>
 8004528:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d134      	bne.n	800459a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004530:	e011      	b.n	8004556 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004532:	f7fe f9db 	bl	80028ec <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	d90a      	bls.n	8004556 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f043 0208 	orr.w	r2, r3, #8
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2203      	movs	r2, #3
 8004550:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0fa      	b.n	800474c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800455c:	4b7d      	ldr	r3, [pc, #500]	; (8004754 <HAL_DAC_ConfigChannel+0x25c>)
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e6      	bne.n	8004532 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004564:	2001      	movs	r0, #1
 8004566:	f7fe f9cd 	bl	8002904 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	6992      	ldr	r2, [r2, #24]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40
 8004574:	e01e      	b.n	80045b4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004576:	f7fe f9b9 	bl	80028ec <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d90a      	bls.n	800459a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f043 0208 	orr.w	r2, r3, #8
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2203      	movs	r2, #3
 8004594:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e0d8      	b.n	800474c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	dbe8      	blt.n	8004576 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80045a4:	2001      	movs	r0, #1
 80045a6:	f7fe f9ad 	bl	8002904 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	6992      	ldr	r2, [r2, #24]
 80045b2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	ea02 0103 	and.w	r1, r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	409a      	lsls	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	21ff      	movs	r1, #255	; 0xff
 80045f0:	fa01 f303 	lsl.w	r3, r1, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	ea02 0103 	and.w	r1, r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6a1a      	ldr	r2, [r3, #32]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	409a      	lsls	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d11d      	bne.n	8004652 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	221f      	movs	r2, #31
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4013      	ands	r3, r2
 8004630:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004658:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2207      	movs	r2, #7
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4013      	ands	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d102      	bne.n	800467c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e00f      	b.n	800469c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d102      	bne.n	800468a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004684:	2301      	movs	r3, #1
 8004686:	61fb      	str	r3, [r7, #28]
 8004688:	e008      	b.n	800469c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004692:	2301      	movs	r3, #1
 8004694:	61fb      	str	r3, [r7, #28]
 8004696:	e001      	b.n	800469c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004698:	2300      	movs	r3, #0
 800469a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6819      	ldr	r1, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f003 0310 	and.w	r3, r3, #16
 80046d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	43da      	mvns	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	400a      	ands	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43db      	mvns	r3, r3
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4013      	ands	r3, r2
 8004700:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6819      	ldr	r1, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	22c0      	movs	r2, #192	; 0xc0
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	43da      	mvns	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	400a      	ands	r2, r1
 800473c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20008000 	.word	0x20008000

08004758 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004760:	f7fe f8c4 	bl	80028ec <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e316      	b.n	8004d9e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a66      	ldr	r2, [pc, #408]	; (8004910 <HAL_DMA_Init+0x1b8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d04a      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a65      	ldr	r2, [pc, #404]	; (8004914 <HAL_DMA_Init+0x1bc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d045      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a63      	ldr	r2, [pc, #396]	; (8004918 <HAL_DMA_Init+0x1c0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d040      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a62      	ldr	r2, [pc, #392]	; (800491c <HAL_DMA_Init+0x1c4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d03b      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a60      	ldr	r2, [pc, #384]	; (8004920 <HAL_DMA_Init+0x1c8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d036      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a5f      	ldr	r2, [pc, #380]	; (8004924 <HAL_DMA_Init+0x1cc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d031      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a5d      	ldr	r2, [pc, #372]	; (8004928 <HAL_DMA_Init+0x1d0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d02c      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a5c      	ldr	r2, [pc, #368]	; (800492c <HAL_DMA_Init+0x1d4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d027      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a5a      	ldr	r2, [pc, #360]	; (8004930 <HAL_DMA_Init+0x1d8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a59      	ldr	r2, [pc, #356]	; (8004934 <HAL_DMA_Init+0x1dc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d01d      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a57      	ldr	r2, [pc, #348]	; (8004938 <HAL_DMA_Init+0x1e0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a56      	ldr	r2, [pc, #344]	; (800493c <HAL_DMA_Init+0x1e4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a54      	ldr	r2, [pc, #336]	; (8004940 <HAL_DMA_Init+0x1e8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a53      	ldr	r2, [pc, #332]	; (8004944 <HAL_DMA_Init+0x1ec>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a51      	ldr	r2, [pc, #324]	; (8004948 <HAL_DMA_Init+0x1f0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_DMA_Init+0xb8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a50      	ldr	r2, [pc, #320]	; (800494c <HAL_DMA_Init+0x1f4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d101      	bne.n	8004814 <HAL_DMA_Init+0xbc>
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <HAL_DMA_Init+0xbe>
 8004814:	2300      	movs	r3, #0
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 813b 	beq.w	8004a92 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a37      	ldr	r2, [pc, #220]	; (8004910 <HAL_DMA_Init+0x1b8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d04a      	beq.n	80048cc <HAL_DMA_Init+0x174>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a36      	ldr	r2, [pc, #216]	; (8004914 <HAL_DMA_Init+0x1bc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d045      	beq.n	80048cc <HAL_DMA_Init+0x174>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a34      	ldr	r2, [pc, #208]	; (8004918 <HAL_DMA_Init+0x1c0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d040      	beq.n	80048cc <HAL_DMA_Init+0x174>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a33      	ldr	r2, [pc, #204]	; (800491c <HAL_DMA_Init+0x1c4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d03b      	beq.n	80048cc <HAL_DMA_Init+0x174>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a31      	ldr	r2, [pc, #196]	; (8004920 <HAL_DMA_Init+0x1c8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d036      	beq.n	80048cc <HAL_DMA_Init+0x174>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a30      	ldr	r2, [pc, #192]	; (8004924 <HAL_DMA_Init+0x1cc>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d031      	beq.n	80048cc <HAL_DMA_Init+0x174>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a2e      	ldr	r2, [pc, #184]	; (8004928 <HAL_DMA_Init+0x1d0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d02c      	beq.n	80048cc <HAL_DMA_Init+0x174>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a2d      	ldr	r2, [pc, #180]	; (800492c <HAL_DMA_Init+0x1d4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d027      	beq.n	80048cc <HAL_DMA_Init+0x174>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a2b      	ldr	r2, [pc, #172]	; (8004930 <HAL_DMA_Init+0x1d8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d022      	beq.n	80048cc <HAL_DMA_Init+0x174>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a2a      	ldr	r2, [pc, #168]	; (8004934 <HAL_DMA_Init+0x1dc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d01d      	beq.n	80048cc <HAL_DMA_Init+0x174>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a28      	ldr	r2, [pc, #160]	; (8004938 <HAL_DMA_Init+0x1e0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d018      	beq.n	80048cc <HAL_DMA_Init+0x174>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a27      	ldr	r2, [pc, #156]	; (800493c <HAL_DMA_Init+0x1e4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <HAL_DMA_Init+0x174>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a25      	ldr	r2, [pc, #148]	; (8004940 <HAL_DMA_Init+0x1e8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00e      	beq.n	80048cc <HAL_DMA_Init+0x174>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a24      	ldr	r2, [pc, #144]	; (8004944 <HAL_DMA_Init+0x1ec>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d009      	beq.n	80048cc <HAL_DMA_Init+0x174>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a22      	ldr	r2, [pc, #136]	; (8004948 <HAL_DMA_Init+0x1f0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_DMA_Init+0x174>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a21      	ldr	r2, [pc, #132]	; (800494c <HAL_DMA_Init+0x1f4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <HAL_DMA_Init+0x186>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0201 	bic.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	e007      	b.n	80048ee <HAL_DMA_Init+0x196>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0201 	bic.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048ee:	e02f      	b.n	8004950 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048f0:	f7fd fffc 	bl	80028ec <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b05      	cmp	r3, #5
 80048fc:	d928      	bls.n	8004950 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2203      	movs	r2, #3
 8004908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e246      	b.n	8004d9e <HAL_DMA_Init+0x646>
 8004910:	40020010 	.word	0x40020010
 8004914:	40020028 	.word	0x40020028
 8004918:	40020040 	.word	0x40020040
 800491c:	40020058 	.word	0x40020058
 8004920:	40020070 	.word	0x40020070
 8004924:	40020088 	.word	0x40020088
 8004928:	400200a0 	.word	0x400200a0
 800492c:	400200b8 	.word	0x400200b8
 8004930:	40020410 	.word	0x40020410
 8004934:	40020428 	.word	0x40020428
 8004938:	40020440 	.word	0x40020440
 800493c:	40020458 	.word	0x40020458
 8004940:	40020470 	.word	0x40020470
 8004944:	40020488 	.word	0x40020488
 8004948:	400204a0 	.word	0x400204a0
 800494c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1c8      	bne.n	80048f0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4b83      	ldr	r3, [pc, #524]	; (8004b78 <HAL_DMA_Init+0x420>)
 800496a:	4013      	ands	r3, r2
 800496c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004976:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004982:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800498e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d107      	bne.n	80049b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	4313      	orrs	r3, r2
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80049b4:	4b71      	ldr	r3, [pc, #452]	; (8004b7c <HAL_DMA_Init+0x424>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b71      	ldr	r3, [pc, #452]	; (8004b80 <HAL_DMA_Init+0x428>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c0:	d328      	bcc.n	8004a14 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b28      	cmp	r3, #40	; 0x28
 80049c8:	d903      	bls.n	80049d2 <HAL_DMA_Init+0x27a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b2e      	cmp	r3, #46	; 0x2e
 80049d0:	d917      	bls.n	8004a02 <HAL_DMA_Init+0x2aa>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b3e      	cmp	r3, #62	; 0x3e
 80049d8:	d903      	bls.n	80049e2 <HAL_DMA_Init+0x28a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b42      	cmp	r3, #66	; 0x42
 80049e0:	d90f      	bls.n	8004a02 <HAL_DMA_Init+0x2aa>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b46      	cmp	r3, #70	; 0x46
 80049e8:	d903      	bls.n	80049f2 <HAL_DMA_Init+0x29a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b48      	cmp	r3, #72	; 0x48
 80049f0:	d907      	bls.n	8004a02 <HAL_DMA_Init+0x2aa>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b4e      	cmp	r3, #78	; 0x4e
 80049f8:	d905      	bls.n	8004a06 <HAL_DMA_Init+0x2ae>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b52      	cmp	r3, #82	; 0x52
 8004a00:	d801      	bhi.n	8004a06 <HAL_DMA_Init+0x2ae>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <HAL_DMA_Init+0x2b0>
 8004a06:	2300      	movs	r3, #0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a12:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f023 0307 	bic.w	r3, r3, #7
 8004a2a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d117      	bne.n	8004a6e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00e      	beq.n	8004a6e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f002 fb33 	bl	80070bc <DMA_CheckFifoParam>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2240      	movs	r2, #64	; 0x40
 8004a60:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e197      	b.n	8004d9e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f002 fa6e 	bl	8006f58 <DMA_CalcBaseAndBitshift>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	223f      	movs	r2, #63	; 0x3f
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	609a      	str	r2, [r3, #8]
 8004a90:	e0cd      	b.n	8004c2e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a3b      	ldr	r2, [pc, #236]	; (8004b84 <HAL_DMA_Init+0x42c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d022      	beq.n	8004ae2 <HAL_DMA_Init+0x38a>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a39      	ldr	r2, [pc, #228]	; (8004b88 <HAL_DMA_Init+0x430>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d01d      	beq.n	8004ae2 <HAL_DMA_Init+0x38a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a38      	ldr	r2, [pc, #224]	; (8004b8c <HAL_DMA_Init+0x434>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d018      	beq.n	8004ae2 <HAL_DMA_Init+0x38a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a36      	ldr	r2, [pc, #216]	; (8004b90 <HAL_DMA_Init+0x438>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <HAL_DMA_Init+0x38a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a35      	ldr	r2, [pc, #212]	; (8004b94 <HAL_DMA_Init+0x43c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_DMA_Init+0x38a>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a33      	ldr	r2, [pc, #204]	; (8004b98 <HAL_DMA_Init+0x440>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_DMA_Init+0x38a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a32      	ldr	r2, [pc, #200]	; (8004b9c <HAL_DMA_Init+0x444>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_DMA_Init+0x38a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a30      	ldr	r2, [pc, #192]	; (8004ba0 <HAL_DMA_Init+0x448>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d101      	bne.n	8004ae6 <HAL_DMA_Init+0x38e>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_DMA_Init+0x390>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8097 	beq.w	8004c1c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a24      	ldr	r2, [pc, #144]	; (8004b84 <HAL_DMA_Init+0x42c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d021      	beq.n	8004b3c <HAL_DMA_Init+0x3e4>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a22      	ldr	r2, [pc, #136]	; (8004b88 <HAL_DMA_Init+0x430>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d01c      	beq.n	8004b3c <HAL_DMA_Init+0x3e4>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a21      	ldr	r2, [pc, #132]	; (8004b8c <HAL_DMA_Init+0x434>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d017      	beq.n	8004b3c <HAL_DMA_Init+0x3e4>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1f      	ldr	r2, [pc, #124]	; (8004b90 <HAL_DMA_Init+0x438>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d012      	beq.n	8004b3c <HAL_DMA_Init+0x3e4>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1e      	ldr	r2, [pc, #120]	; (8004b94 <HAL_DMA_Init+0x43c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00d      	beq.n	8004b3c <HAL_DMA_Init+0x3e4>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <HAL_DMA_Init+0x440>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d008      	beq.n	8004b3c <HAL_DMA_Init+0x3e4>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a1b      	ldr	r2, [pc, #108]	; (8004b9c <HAL_DMA_Init+0x444>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <HAL_DMA_Init+0x3e4>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a19      	ldr	r2, [pc, #100]	; (8004ba0 <HAL_DMA_Init+0x448>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <HAL_DMA_Init+0x44c>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	d020      	beq.n	8004ba8 <HAL_DMA_Init+0x450>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b80      	cmp	r3, #128	; 0x80
 8004b6c:	d102      	bne.n	8004b74 <HAL_DMA_Init+0x41c>
 8004b6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b72:	e01a      	b.n	8004baa <HAL_DMA_Init+0x452>
 8004b74:	2300      	movs	r3, #0
 8004b76:	e018      	b.n	8004baa <HAL_DMA_Init+0x452>
 8004b78:	fe10803f 	.word	0xfe10803f
 8004b7c:	5c001000 	.word	0x5c001000
 8004b80:	ffff0000 	.word	0xffff0000
 8004b84:	58025408 	.word	0x58025408
 8004b88:	5802541c 	.word	0x5802541c
 8004b8c:	58025430 	.word	0x58025430
 8004b90:	58025444 	.word	0x58025444
 8004b94:	58025458 	.word	0x58025458
 8004b98:	5802546c 	.word	0x5802546c
 8004b9c:	58025480 	.word	0x58025480
 8004ba0:	58025494 	.word	0x58025494
 8004ba4:	fffe000f 	.word	0xfffe000f
 8004ba8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68d2      	ldr	r2, [r2, #12]
 8004bae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004bb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004bc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004bc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004bd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004bd8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	4b6e      	ldr	r3, [pc, #440]	; (8004da8 <HAL_DMA_Init+0x650>)
 8004bf0:	4413      	add	r3, r2
 8004bf2:	4a6e      	ldr	r2, [pc, #440]	; (8004dac <HAL_DMA_Init+0x654>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	009a      	lsls	r2, r3, #2
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f002 f9a9 	bl	8006f58 <DMA_CalcBaseAndBitshift>
 8004c06:	4603      	mov	r3, r0
 8004c08:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0e:	f003 031f 	and.w	r3, r3, #31
 8004c12:	2201      	movs	r2, #1
 8004c14:	409a      	lsls	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	605a      	str	r2, [r3, #4]
 8004c1a:	e008      	b.n	8004c2e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2240      	movs	r2, #64	; 0x40
 8004c20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2203      	movs	r2, #3
 8004c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e0b7      	b.n	8004d9e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a5f      	ldr	r2, [pc, #380]	; (8004db0 <HAL_DMA_Init+0x658>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d072      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a5d      	ldr	r2, [pc, #372]	; (8004db4 <HAL_DMA_Init+0x65c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d06d      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a5c      	ldr	r2, [pc, #368]	; (8004db8 <HAL_DMA_Init+0x660>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d068      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a5a      	ldr	r2, [pc, #360]	; (8004dbc <HAL_DMA_Init+0x664>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d063      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a59      	ldr	r2, [pc, #356]	; (8004dc0 <HAL_DMA_Init+0x668>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d05e      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a57      	ldr	r2, [pc, #348]	; (8004dc4 <HAL_DMA_Init+0x66c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d059      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a56      	ldr	r2, [pc, #344]	; (8004dc8 <HAL_DMA_Init+0x670>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d054      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a54      	ldr	r2, [pc, #336]	; (8004dcc <HAL_DMA_Init+0x674>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d04f      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a53      	ldr	r2, [pc, #332]	; (8004dd0 <HAL_DMA_Init+0x678>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d04a      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a51      	ldr	r2, [pc, #324]	; (8004dd4 <HAL_DMA_Init+0x67c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d045      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a50      	ldr	r2, [pc, #320]	; (8004dd8 <HAL_DMA_Init+0x680>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d040      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a4e      	ldr	r2, [pc, #312]	; (8004ddc <HAL_DMA_Init+0x684>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d03b      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a4d      	ldr	r2, [pc, #308]	; (8004de0 <HAL_DMA_Init+0x688>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d036      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a4b      	ldr	r2, [pc, #300]	; (8004de4 <HAL_DMA_Init+0x68c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d031      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a4a      	ldr	r2, [pc, #296]	; (8004de8 <HAL_DMA_Init+0x690>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d02c      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a48      	ldr	r2, [pc, #288]	; (8004dec <HAL_DMA_Init+0x694>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d027      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a47      	ldr	r2, [pc, #284]	; (8004df0 <HAL_DMA_Init+0x698>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d022      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a45      	ldr	r2, [pc, #276]	; (8004df4 <HAL_DMA_Init+0x69c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01d      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a44      	ldr	r2, [pc, #272]	; (8004df8 <HAL_DMA_Init+0x6a0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d018      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a42      	ldr	r2, [pc, #264]	; (8004dfc <HAL_DMA_Init+0x6a4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a41      	ldr	r2, [pc, #260]	; (8004e00 <HAL_DMA_Init+0x6a8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00e      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a3f      	ldr	r2, [pc, #252]	; (8004e04 <HAL_DMA_Init+0x6ac>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d009      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a3e      	ldr	r2, [pc, #248]	; (8004e08 <HAL_DMA_Init+0x6b0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_DMA_Init+0x5c6>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a3c      	ldr	r2, [pc, #240]	; (8004e0c <HAL_DMA_Init+0x6b4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d101      	bne.n	8004d22 <HAL_DMA_Init+0x5ca>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <HAL_DMA_Init+0x5cc>
 8004d22:	2300      	movs	r3, #0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d032      	beq.n	8004d8e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f002 fa43 	bl	80071b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d102      	bne.n	8004d3c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d50:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d010      	beq.n	8004d7c <HAL_DMA_Init+0x624>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d80c      	bhi.n	8004d7c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f002 fac0 	bl	80072e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d78:	605a      	str	r2, [r3, #4]
 8004d7a:	e008      	b.n	8004d8e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	a7fdabf8 	.word	0xa7fdabf8
 8004dac:	cccccccd 	.word	0xcccccccd
 8004db0:	40020010 	.word	0x40020010
 8004db4:	40020028 	.word	0x40020028
 8004db8:	40020040 	.word	0x40020040
 8004dbc:	40020058 	.word	0x40020058
 8004dc0:	40020070 	.word	0x40020070
 8004dc4:	40020088 	.word	0x40020088
 8004dc8:	400200a0 	.word	0x400200a0
 8004dcc:	400200b8 	.word	0x400200b8
 8004dd0:	40020410 	.word	0x40020410
 8004dd4:	40020428 	.word	0x40020428
 8004dd8:	40020440 	.word	0x40020440
 8004ddc:	40020458 	.word	0x40020458
 8004de0:	40020470 	.word	0x40020470
 8004de4:	40020488 	.word	0x40020488
 8004de8:	400204a0 	.word	0x400204a0
 8004dec:	400204b8 	.word	0x400204b8
 8004df0:	58025408 	.word	0x58025408
 8004df4:	5802541c 	.word	0x5802541c
 8004df8:	58025430 	.word	0x58025430
 8004dfc:	58025444 	.word	0x58025444
 8004e00:	58025458 	.word	0x58025458
 8004e04:	5802546c 	.word	0x5802546c
 8004e08:	58025480 	.word	0x58025480
 8004e0c:	58025494 	.word	0x58025494

08004e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e226      	b.n	800527a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_DMA_Start_IT+0x2a>
 8004e36:	2302      	movs	r3, #2
 8004e38:	e21f      	b.n	800527a <HAL_DMA_Start_IT+0x46a>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	f040 820a 	bne.w	8005264 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a68      	ldr	r2, [pc, #416]	; (8005004 <HAL_DMA_Start_IT+0x1f4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d04a      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a66      	ldr	r2, [pc, #408]	; (8005008 <HAL_DMA_Start_IT+0x1f8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d045      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a65      	ldr	r2, [pc, #404]	; (800500c <HAL_DMA_Start_IT+0x1fc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d040      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a63      	ldr	r2, [pc, #396]	; (8005010 <HAL_DMA_Start_IT+0x200>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d03b      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a62      	ldr	r2, [pc, #392]	; (8005014 <HAL_DMA_Start_IT+0x204>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d036      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a60      	ldr	r2, [pc, #384]	; (8005018 <HAL_DMA_Start_IT+0x208>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d031      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a5f      	ldr	r2, [pc, #380]	; (800501c <HAL_DMA_Start_IT+0x20c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d02c      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a5d      	ldr	r2, [pc, #372]	; (8005020 <HAL_DMA_Start_IT+0x210>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d027      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a5c      	ldr	r2, [pc, #368]	; (8005024 <HAL_DMA_Start_IT+0x214>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d022      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a5a      	ldr	r2, [pc, #360]	; (8005028 <HAL_DMA_Start_IT+0x218>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01d      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a59      	ldr	r2, [pc, #356]	; (800502c <HAL_DMA_Start_IT+0x21c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d018      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a57      	ldr	r2, [pc, #348]	; (8005030 <HAL_DMA_Start_IT+0x220>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d013      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a56      	ldr	r2, [pc, #344]	; (8005034 <HAL_DMA_Start_IT+0x224>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00e      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a54      	ldr	r2, [pc, #336]	; (8005038 <HAL_DMA_Start_IT+0x228>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d009      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a53      	ldr	r2, [pc, #332]	; (800503c <HAL_DMA_Start_IT+0x22c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d004      	beq.n	8004efe <HAL_DMA_Start_IT+0xee>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a51      	ldr	r2, [pc, #324]	; (8005040 <HAL_DMA_Start_IT+0x230>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d108      	bne.n	8004f10 <HAL_DMA_Start_IT+0x100>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0201 	bic.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	e007      	b.n	8004f20 <HAL_DMA_Start_IT+0x110>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f001 fe6a 	bl	8006c00 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a34      	ldr	r2, [pc, #208]	; (8005004 <HAL_DMA_Start_IT+0x1f4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d04a      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a33      	ldr	r2, [pc, #204]	; (8005008 <HAL_DMA_Start_IT+0x1f8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d045      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a31      	ldr	r2, [pc, #196]	; (800500c <HAL_DMA_Start_IT+0x1fc>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d040      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a30      	ldr	r2, [pc, #192]	; (8005010 <HAL_DMA_Start_IT+0x200>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d03b      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2e      	ldr	r2, [pc, #184]	; (8005014 <HAL_DMA_Start_IT+0x204>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d036      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2d      	ldr	r2, [pc, #180]	; (8005018 <HAL_DMA_Start_IT+0x208>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d031      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a2b      	ldr	r2, [pc, #172]	; (800501c <HAL_DMA_Start_IT+0x20c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d02c      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2a      	ldr	r2, [pc, #168]	; (8005020 <HAL_DMA_Start_IT+0x210>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d027      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a28      	ldr	r2, [pc, #160]	; (8005024 <HAL_DMA_Start_IT+0x214>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d022      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a27      	ldr	r2, [pc, #156]	; (8005028 <HAL_DMA_Start_IT+0x218>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d01d      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a25      	ldr	r2, [pc, #148]	; (800502c <HAL_DMA_Start_IT+0x21c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d018      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a24      	ldr	r2, [pc, #144]	; (8005030 <HAL_DMA_Start_IT+0x220>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d013      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a22      	ldr	r2, [pc, #136]	; (8005034 <HAL_DMA_Start_IT+0x224>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00e      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a21      	ldr	r2, [pc, #132]	; (8005038 <HAL_DMA_Start_IT+0x228>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d009      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1f      	ldr	r2, [pc, #124]	; (800503c <HAL_DMA_Start_IT+0x22c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <HAL_DMA_Start_IT+0x1bc>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1e      	ldr	r2, [pc, #120]	; (8005040 <HAL_DMA_Start_IT+0x230>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d101      	bne.n	8004fd0 <HAL_DMA_Start_IT+0x1c0>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <HAL_DMA_Start_IT+0x1c2>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d036      	beq.n	8005044 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f023 021e 	bic.w	r2, r3, #30
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0216 	orr.w	r2, r2, #22
 8004fe8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d03e      	beq.n	8005070 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0208 	orr.w	r2, r2, #8
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	e035      	b.n	8005070 <HAL_DMA_Start_IT+0x260>
 8005004:	40020010 	.word	0x40020010
 8005008:	40020028 	.word	0x40020028
 800500c:	40020040 	.word	0x40020040
 8005010:	40020058 	.word	0x40020058
 8005014:	40020070 	.word	0x40020070
 8005018:	40020088 	.word	0x40020088
 800501c:	400200a0 	.word	0x400200a0
 8005020:	400200b8 	.word	0x400200b8
 8005024:	40020410 	.word	0x40020410
 8005028:	40020428 	.word	0x40020428
 800502c:	40020440 	.word	0x40020440
 8005030:	40020458 	.word	0x40020458
 8005034:	40020470 	.word	0x40020470
 8005038:	40020488 	.word	0x40020488
 800503c:	400204a0 	.word	0x400204a0
 8005040:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f023 020e 	bic.w	r2, r3, #14
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 020a 	orr.w	r2, r2, #10
 8005056:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0204 	orr.w	r2, r2, #4
 800506e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a83      	ldr	r2, [pc, #524]	; (8005284 <HAL_DMA_Start_IT+0x474>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d072      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a82      	ldr	r2, [pc, #520]	; (8005288 <HAL_DMA_Start_IT+0x478>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d06d      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a80      	ldr	r2, [pc, #512]	; (800528c <HAL_DMA_Start_IT+0x47c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d068      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a7f      	ldr	r2, [pc, #508]	; (8005290 <HAL_DMA_Start_IT+0x480>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d063      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a7d      	ldr	r2, [pc, #500]	; (8005294 <HAL_DMA_Start_IT+0x484>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d05e      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a7c      	ldr	r2, [pc, #496]	; (8005298 <HAL_DMA_Start_IT+0x488>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d059      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a7a      	ldr	r2, [pc, #488]	; (800529c <HAL_DMA_Start_IT+0x48c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d054      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a79      	ldr	r2, [pc, #484]	; (80052a0 <HAL_DMA_Start_IT+0x490>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d04f      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a77      	ldr	r2, [pc, #476]	; (80052a4 <HAL_DMA_Start_IT+0x494>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d04a      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a76      	ldr	r2, [pc, #472]	; (80052a8 <HAL_DMA_Start_IT+0x498>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d045      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a74      	ldr	r2, [pc, #464]	; (80052ac <HAL_DMA_Start_IT+0x49c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d040      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a73      	ldr	r2, [pc, #460]	; (80052b0 <HAL_DMA_Start_IT+0x4a0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d03b      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a71      	ldr	r2, [pc, #452]	; (80052b4 <HAL_DMA_Start_IT+0x4a4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d036      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a70      	ldr	r2, [pc, #448]	; (80052b8 <HAL_DMA_Start_IT+0x4a8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d031      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a6e      	ldr	r2, [pc, #440]	; (80052bc <HAL_DMA_Start_IT+0x4ac>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d02c      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a6d      	ldr	r2, [pc, #436]	; (80052c0 <HAL_DMA_Start_IT+0x4b0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d027      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a6b      	ldr	r2, [pc, #428]	; (80052c4 <HAL_DMA_Start_IT+0x4b4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d022      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a6a      	ldr	r2, [pc, #424]	; (80052c8 <HAL_DMA_Start_IT+0x4b8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d01d      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a68      	ldr	r2, [pc, #416]	; (80052cc <HAL_DMA_Start_IT+0x4bc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d018      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a67      	ldr	r2, [pc, #412]	; (80052d0 <HAL_DMA_Start_IT+0x4c0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d013      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a65      	ldr	r2, [pc, #404]	; (80052d4 <HAL_DMA_Start_IT+0x4c4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00e      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a64      	ldr	r2, [pc, #400]	; (80052d8 <HAL_DMA_Start_IT+0x4c8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d009      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a62      	ldr	r2, [pc, #392]	; (80052dc <HAL_DMA_Start_IT+0x4cc>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <HAL_DMA_Start_IT+0x350>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a61      	ldr	r2, [pc, #388]	; (80052e0 <HAL_DMA_Start_IT+0x4d0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d101      	bne.n	8005164 <HAL_DMA_Start_IT+0x354>
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <HAL_DMA_Start_IT+0x356>
 8005164:	2300      	movs	r3, #0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01a      	beq.n	80051a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005186:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d007      	beq.n	80051a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800519a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800519e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a37      	ldr	r2, [pc, #220]	; (8005284 <HAL_DMA_Start_IT+0x474>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d04a      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a36      	ldr	r2, [pc, #216]	; (8005288 <HAL_DMA_Start_IT+0x478>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d045      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a34      	ldr	r2, [pc, #208]	; (800528c <HAL_DMA_Start_IT+0x47c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d040      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a33      	ldr	r2, [pc, #204]	; (8005290 <HAL_DMA_Start_IT+0x480>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d03b      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a31      	ldr	r2, [pc, #196]	; (8005294 <HAL_DMA_Start_IT+0x484>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d036      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a30      	ldr	r2, [pc, #192]	; (8005298 <HAL_DMA_Start_IT+0x488>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d031      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a2e      	ldr	r2, [pc, #184]	; (800529c <HAL_DMA_Start_IT+0x48c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d02c      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2d      	ldr	r2, [pc, #180]	; (80052a0 <HAL_DMA_Start_IT+0x490>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d027      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a2b      	ldr	r2, [pc, #172]	; (80052a4 <HAL_DMA_Start_IT+0x494>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d022      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a2a      	ldr	r2, [pc, #168]	; (80052a8 <HAL_DMA_Start_IT+0x498>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d01d      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a28      	ldr	r2, [pc, #160]	; (80052ac <HAL_DMA_Start_IT+0x49c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d018      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a27      	ldr	r2, [pc, #156]	; (80052b0 <HAL_DMA_Start_IT+0x4a0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d013      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a25      	ldr	r2, [pc, #148]	; (80052b4 <HAL_DMA_Start_IT+0x4a4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00e      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a24      	ldr	r2, [pc, #144]	; (80052b8 <HAL_DMA_Start_IT+0x4a8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d009      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a22      	ldr	r2, [pc, #136]	; (80052bc <HAL_DMA_Start_IT+0x4ac>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <HAL_DMA_Start_IT+0x430>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a21      	ldr	r2, [pc, #132]	; (80052c0 <HAL_DMA_Start_IT+0x4b0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d108      	bne.n	8005252 <HAL_DMA_Start_IT+0x442>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	e012      	b.n	8005278 <HAL_DMA_Start_IT+0x468>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f042 0201 	orr.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	e009      	b.n	8005278 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800526a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40020010 	.word	0x40020010
 8005288:	40020028 	.word	0x40020028
 800528c:	40020040 	.word	0x40020040
 8005290:	40020058 	.word	0x40020058
 8005294:	40020070 	.word	0x40020070
 8005298:	40020088 	.word	0x40020088
 800529c:	400200a0 	.word	0x400200a0
 80052a0:	400200b8 	.word	0x400200b8
 80052a4:	40020410 	.word	0x40020410
 80052a8:	40020428 	.word	0x40020428
 80052ac:	40020440 	.word	0x40020440
 80052b0:	40020458 	.word	0x40020458
 80052b4:	40020470 	.word	0x40020470
 80052b8:	40020488 	.word	0x40020488
 80052bc:	400204a0 	.word	0x400204a0
 80052c0:	400204b8 	.word	0x400204b8
 80052c4:	58025408 	.word	0x58025408
 80052c8:	5802541c 	.word	0x5802541c
 80052cc:	58025430 	.word	0x58025430
 80052d0:	58025444 	.word	0x58025444
 80052d4:	58025458 	.word	0x58025458
 80052d8:	5802546c 	.word	0x5802546c
 80052dc:	58025480 	.word	0x58025480
 80052e0:	58025494 	.word	0x58025494

080052e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80052ec:	f7fd fafe 	bl	80028ec <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e2dc      	b.n	80058b6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d008      	beq.n	800531a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2280      	movs	r2, #128	; 0x80
 800530c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e2cd      	b.n	80058b6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a76      	ldr	r2, [pc, #472]	; (80054f8 <HAL_DMA_Abort+0x214>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d04a      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a74      	ldr	r2, [pc, #464]	; (80054fc <HAL_DMA_Abort+0x218>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d045      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a73      	ldr	r2, [pc, #460]	; (8005500 <HAL_DMA_Abort+0x21c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d040      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a71      	ldr	r2, [pc, #452]	; (8005504 <HAL_DMA_Abort+0x220>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d03b      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a70      	ldr	r2, [pc, #448]	; (8005508 <HAL_DMA_Abort+0x224>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d036      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a6e      	ldr	r2, [pc, #440]	; (800550c <HAL_DMA_Abort+0x228>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d031      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a6d      	ldr	r2, [pc, #436]	; (8005510 <HAL_DMA_Abort+0x22c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d02c      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a6b      	ldr	r2, [pc, #428]	; (8005514 <HAL_DMA_Abort+0x230>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d027      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a6a      	ldr	r2, [pc, #424]	; (8005518 <HAL_DMA_Abort+0x234>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d022      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a68      	ldr	r2, [pc, #416]	; (800551c <HAL_DMA_Abort+0x238>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01d      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a67      	ldr	r2, [pc, #412]	; (8005520 <HAL_DMA_Abort+0x23c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d018      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a65      	ldr	r2, [pc, #404]	; (8005524 <HAL_DMA_Abort+0x240>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a64      	ldr	r2, [pc, #400]	; (8005528 <HAL_DMA_Abort+0x244>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00e      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a62      	ldr	r2, [pc, #392]	; (800552c <HAL_DMA_Abort+0x248>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d009      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a61      	ldr	r2, [pc, #388]	; (8005530 <HAL_DMA_Abort+0x24c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <HAL_DMA_Abort+0xd6>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a5f      	ldr	r2, [pc, #380]	; (8005534 <HAL_DMA_Abort+0x250>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d101      	bne.n	80053be <HAL_DMA_Abort+0xda>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <HAL_DMA_Abort+0xdc>
 80053be:	2300      	movs	r3, #0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d013      	beq.n	80053ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 021e 	bic.w	r2, r2, #30
 80053d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	e00a      	b.n	8005402 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 020e 	bic.w	r2, r2, #14
 80053fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a3c      	ldr	r2, [pc, #240]	; (80054f8 <HAL_DMA_Abort+0x214>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d072      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a3a      	ldr	r2, [pc, #232]	; (80054fc <HAL_DMA_Abort+0x218>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d06d      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a39      	ldr	r2, [pc, #228]	; (8005500 <HAL_DMA_Abort+0x21c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d068      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a37      	ldr	r2, [pc, #220]	; (8005504 <HAL_DMA_Abort+0x220>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d063      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a36      	ldr	r2, [pc, #216]	; (8005508 <HAL_DMA_Abort+0x224>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d05e      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a34      	ldr	r2, [pc, #208]	; (800550c <HAL_DMA_Abort+0x228>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d059      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a33      	ldr	r2, [pc, #204]	; (8005510 <HAL_DMA_Abort+0x22c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d054      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a31      	ldr	r2, [pc, #196]	; (8005514 <HAL_DMA_Abort+0x230>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d04f      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a30      	ldr	r2, [pc, #192]	; (8005518 <HAL_DMA_Abort+0x234>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d04a      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a2e      	ldr	r2, [pc, #184]	; (800551c <HAL_DMA_Abort+0x238>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d045      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a2d      	ldr	r2, [pc, #180]	; (8005520 <HAL_DMA_Abort+0x23c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d040      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a2b      	ldr	r2, [pc, #172]	; (8005524 <HAL_DMA_Abort+0x240>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d03b      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a2a      	ldr	r2, [pc, #168]	; (8005528 <HAL_DMA_Abort+0x244>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d036      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a28      	ldr	r2, [pc, #160]	; (800552c <HAL_DMA_Abort+0x248>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d031      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a27      	ldr	r2, [pc, #156]	; (8005530 <HAL_DMA_Abort+0x24c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d02c      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a25      	ldr	r2, [pc, #148]	; (8005534 <HAL_DMA_Abort+0x250>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d027      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a24      	ldr	r2, [pc, #144]	; (8005538 <HAL_DMA_Abort+0x254>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d022      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a22      	ldr	r2, [pc, #136]	; (800553c <HAL_DMA_Abort+0x258>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01d      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a21      	ldr	r2, [pc, #132]	; (8005540 <HAL_DMA_Abort+0x25c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d018      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1f      	ldr	r2, [pc, #124]	; (8005544 <HAL_DMA_Abort+0x260>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1e      	ldr	r2, [pc, #120]	; (8005548 <HAL_DMA_Abort+0x264>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00e      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1c      	ldr	r2, [pc, #112]	; (800554c <HAL_DMA_Abort+0x268>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1b      	ldr	r2, [pc, #108]	; (8005550 <HAL_DMA_Abort+0x26c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_DMA_Abort+0x20e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a19      	ldr	r2, [pc, #100]	; (8005554 <HAL_DMA_Abort+0x270>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d132      	bne.n	8005558 <HAL_DMA_Abort+0x274>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e031      	b.n	800555a <HAL_DMA_Abort+0x276>
 80054f6:	bf00      	nop
 80054f8:	40020010 	.word	0x40020010
 80054fc:	40020028 	.word	0x40020028
 8005500:	40020040 	.word	0x40020040
 8005504:	40020058 	.word	0x40020058
 8005508:	40020070 	.word	0x40020070
 800550c:	40020088 	.word	0x40020088
 8005510:	400200a0 	.word	0x400200a0
 8005514:	400200b8 	.word	0x400200b8
 8005518:	40020410 	.word	0x40020410
 800551c:	40020428 	.word	0x40020428
 8005520:	40020440 	.word	0x40020440
 8005524:	40020458 	.word	0x40020458
 8005528:	40020470 	.word	0x40020470
 800552c:	40020488 	.word	0x40020488
 8005530:	400204a0 	.word	0x400204a0
 8005534:	400204b8 	.word	0x400204b8
 8005538:	58025408 	.word	0x58025408
 800553c:	5802541c 	.word	0x5802541c
 8005540:	58025430 	.word	0x58025430
 8005544:	58025444 	.word	0x58025444
 8005548:	58025458 	.word	0x58025458
 800554c:	5802546c 	.word	0x5802546c
 8005550:	58025480 	.word	0x58025480
 8005554:	58025494 	.word	0x58025494
 8005558:	2300      	movs	r3, #0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d007      	beq.n	800556e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800556c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a6d      	ldr	r2, [pc, #436]	; (8005728 <HAL_DMA_Abort+0x444>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d04a      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a6b      	ldr	r2, [pc, #428]	; (800572c <HAL_DMA_Abort+0x448>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d045      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a6a      	ldr	r2, [pc, #424]	; (8005730 <HAL_DMA_Abort+0x44c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d040      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a68      	ldr	r2, [pc, #416]	; (8005734 <HAL_DMA_Abort+0x450>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d03b      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a67      	ldr	r2, [pc, #412]	; (8005738 <HAL_DMA_Abort+0x454>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d036      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a65      	ldr	r2, [pc, #404]	; (800573c <HAL_DMA_Abort+0x458>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d031      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a64      	ldr	r2, [pc, #400]	; (8005740 <HAL_DMA_Abort+0x45c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d02c      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a62      	ldr	r2, [pc, #392]	; (8005744 <HAL_DMA_Abort+0x460>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d027      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a61      	ldr	r2, [pc, #388]	; (8005748 <HAL_DMA_Abort+0x464>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d022      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a5f      	ldr	r2, [pc, #380]	; (800574c <HAL_DMA_Abort+0x468>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01d      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a5e      	ldr	r2, [pc, #376]	; (8005750 <HAL_DMA_Abort+0x46c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d018      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a5c      	ldr	r2, [pc, #368]	; (8005754 <HAL_DMA_Abort+0x470>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a5b      	ldr	r2, [pc, #364]	; (8005758 <HAL_DMA_Abort+0x474>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a59      	ldr	r2, [pc, #356]	; (800575c <HAL_DMA_Abort+0x478>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a58      	ldr	r2, [pc, #352]	; (8005760 <HAL_DMA_Abort+0x47c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_DMA_Abort+0x32a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a56      	ldr	r2, [pc, #344]	; (8005764 <HAL_DMA_Abort+0x480>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d108      	bne.n	8005620 <HAL_DMA_Abort+0x33c>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0201 	bic.w	r2, r2, #1
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e007      	b.n	8005630 <HAL_DMA_Abort+0x34c>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0201 	bic.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005630:	e013      	b.n	800565a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005632:	f7fd f95b 	bl	80028ec <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b05      	cmp	r3, #5
 800563e:	d90c      	bls.n	800565a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2203      	movs	r2, #3
 800564a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e12d      	b.n	80058b6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e5      	bne.n	8005632 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a2f      	ldr	r2, [pc, #188]	; (8005728 <HAL_DMA_Abort+0x444>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d04a      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a2d      	ldr	r2, [pc, #180]	; (800572c <HAL_DMA_Abort+0x448>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d045      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a2c      	ldr	r2, [pc, #176]	; (8005730 <HAL_DMA_Abort+0x44c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d040      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <HAL_DMA_Abort+0x450>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d03b      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a29      	ldr	r2, [pc, #164]	; (8005738 <HAL_DMA_Abort+0x454>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d036      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a27      	ldr	r2, [pc, #156]	; (800573c <HAL_DMA_Abort+0x458>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d031      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a26      	ldr	r2, [pc, #152]	; (8005740 <HAL_DMA_Abort+0x45c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d02c      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a24      	ldr	r2, [pc, #144]	; (8005744 <HAL_DMA_Abort+0x460>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d027      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a23      	ldr	r2, [pc, #140]	; (8005748 <HAL_DMA_Abort+0x464>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d022      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a21      	ldr	r2, [pc, #132]	; (800574c <HAL_DMA_Abort+0x468>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d01d      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a20      	ldr	r2, [pc, #128]	; (8005750 <HAL_DMA_Abort+0x46c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d018      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <HAL_DMA_Abort+0x470>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <HAL_DMA_Abort+0x474>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00e      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1b      	ldr	r2, [pc, #108]	; (800575c <HAL_DMA_Abort+0x478>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d009      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1a      	ldr	r2, [pc, #104]	; (8005760 <HAL_DMA_Abort+0x47c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d004      	beq.n	8005706 <HAL_DMA_Abort+0x422>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a18      	ldr	r2, [pc, #96]	; (8005764 <HAL_DMA_Abort+0x480>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d101      	bne.n	800570a <HAL_DMA_Abort+0x426>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <HAL_DMA_Abort+0x428>
 800570a:	2300      	movs	r3, #0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d02b      	beq.n	8005768 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005714:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571a:	f003 031f 	and.w	r3, r3, #31
 800571e:	223f      	movs	r2, #63	; 0x3f
 8005720:	409a      	lsls	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	609a      	str	r2, [r3, #8]
 8005726:	e02a      	b.n	800577e <HAL_DMA_Abort+0x49a>
 8005728:	40020010 	.word	0x40020010
 800572c:	40020028 	.word	0x40020028
 8005730:	40020040 	.word	0x40020040
 8005734:	40020058 	.word	0x40020058
 8005738:	40020070 	.word	0x40020070
 800573c:	40020088 	.word	0x40020088
 8005740:	400200a0 	.word	0x400200a0
 8005744:	400200b8 	.word	0x400200b8
 8005748:	40020410 	.word	0x40020410
 800574c:	40020428 	.word	0x40020428
 8005750:	40020440 	.word	0x40020440
 8005754:	40020458 	.word	0x40020458
 8005758:	40020470 	.word	0x40020470
 800575c:	40020488 	.word	0x40020488
 8005760:	400204a0 	.word	0x400204a0
 8005764:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	2201      	movs	r2, #1
 8005778:	409a      	lsls	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a4f      	ldr	r2, [pc, #316]	; (80058c0 <HAL_DMA_Abort+0x5dc>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d072      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a4d      	ldr	r2, [pc, #308]	; (80058c4 <HAL_DMA_Abort+0x5e0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d06d      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a4c      	ldr	r2, [pc, #304]	; (80058c8 <HAL_DMA_Abort+0x5e4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d068      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a4a      	ldr	r2, [pc, #296]	; (80058cc <HAL_DMA_Abort+0x5e8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d063      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a49      	ldr	r2, [pc, #292]	; (80058d0 <HAL_DMA_Abort+0x5ec>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d05e      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a47      	ldr	r2, [pc, #284]	; (80058d4 <HAL_DMA_Abort+0x5f0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d059      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a46      	ldr	r2, [pc, #280]	; (80058d8 <HAL_DMA_Abort+0x5f4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d054      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a44      	ldr	r2, [pc, #272]	; (80058dc <HAL_DMA_Abort+0x5f8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d04f      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a43      	ldr	r2, [pc, #268]	; (80058e0 <HAL_DMA_Abort+0x5fc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d04a      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a41      	ldr	r2, [pc, #260]	; (80058e4 <HAL_DMA_Abort+0x600>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d045      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a40      	ldr	r2, [pc, #256]	; (80058e8 <HAL_DMA_Abort+0x604>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d040      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a3e      	ldr	r2, [pc, #248]	; (80058ec <HAL_DMA_Abort+0x608>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d03b      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a3d      	ldr	r2, [pc, #244]	; (80058f0 <HAL_DMA_Abort+0x60c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d036      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a3b      	ldr	r2, [pc, #236]	; (80058f4 <HAL_DMA_Abort+0x610>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d031      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a3a      	ldr	r2, [pc, #232]	; (80058f8 <HAL_DMA_Abort+0x614>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d02c      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a38      	ldr	r2, [pc, #224]	; (80058fc <HAL_DMA_Abort+0x618>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d027      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a37      	ldr	r2, [pc, #220]	; (8005900 <HAL_DMA_Abort+0x61c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d022      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a35      	ldr	r2, [pc, #212]	; (8005904 <HAL_DMA_Abort+0x620>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d01d      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a34      	ldr	r2, [pc, #208]	; (8005908 <HAL_DMA_Abort+0x624>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d018      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a32      	ldr	r2, [pc, #200]	; (800590c <HAL_DMA_Abort+0x628>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a31      	ldr	r2, [pc, #196]	; (8005910 <HAL_DMA_Abort+0x62c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00e      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a2f      	ldr	r2, [pc, #188]	; (8005914 <HAL_DMA_Abort+0x630>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d009      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a2e      	ldr	r2, [pc, #184]	; (8005918 <HAL_DMA_Abort+0x634>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d004      	beq.n	800586e <HAL_DMA_Abort+0x58a>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a2c      	ldr	r2, [pc, #176]	; (800591c <HAL_DMA_Abort+0x638>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d101      	bne.n	8005872 <HAL_DMA_Abort+0x58e>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <HAL_DMA_Abort+0x590>
 8005872:	2300      	movs	r3, #0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d015      	beq.n	80058a4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005880:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00c      	beq.n	80058a4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005898:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058a2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40020010 	.word	0x40020010
 80058c4:	40020028 	.word	0x40020028
 80058c8:	40020040 	.word	0x40020040
 80058cc:	40020058 	.word	0x40020058
 80058d0:	40020070 	.word	0x40020070
 80058d4:	40020088 	.word	0x40020088
 80058d8:	400200a0 	.word	0x400200a0
 80058dc:	400200b8 	.word	0x400200b8
 80058e0:	40020410 	.word	0x40020410
 80058e4:	40020428 	.word	0x40020428
 80058e8:	40020440 	.word	0x40020440
 80058ec:	40020458 	.word	0x40020458
 80058f0:	40020470 	.word	0x40020470
 80058f4:	40020488 	.word	0x40020488
 80058f8:	400204a0 	.word	0x400204a0
 80058fc:	400204b8 	.word	0x400204b8
 8005900:	58025408 	.word	0x58025408
 8005904:	5802541c 	.word	0x5802541c
 8005908:	58025430 	.word	0x58025430
 800590c:	58025444 	.word	0x58025444
 8005910:	58025458 	.word	0x58025458
 8005914:	5802546c 	.word	0x5802546c
 8005918:	58025480 	.word	0x58025480
 800591c:	58025494 	.word	0x58025494

08005920 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e237      	b.n	8005da2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d004      	beq.n	8005948 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2280      	movs	r2, #128	; 0x80
 8005942:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e22c      	b.n	8005da2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a5c      	ldr	r2, [pc, #368]	; (8005ac0 <HAL_DMA_Abort_IT+0x1a0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d04a      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a5b      	ldr	r2, [pc, #364]	; (8005ac4 <HAL_DMA_Abort_IT+0x1a4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d045      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a59      	ldr	r2, [pc, #356]	; (8005ac8 <HAL_DMA_Abort_IT+0x1a8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d040      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a58      	ldr	r2, [pc, #352]	; (8005acc <HAL_DMA_Abort_IT+0x1ac>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d03b      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a56      	ldr	r2, [pc, #344]	; (8005ad0 <HAL_DMA_Abort_IT+0x1b0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d036      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a55      	ldr	r2, [pc, #340]	; (8005ad4 <HAL_DMA_Abort_IT+0x1b4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d031      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a53      	ldr	r2, [pc, #332]	; (8005ad8 <HAL_DMA_Abort_IT+0x1b8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d02c      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a52      	ldr	r2, [pc, #328]	; (8005adc <HAL_DMA_Abort_IT+0x1bc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d027      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a50      	ldr	r2, [pc, #320]	; (8005ae0 <HAL_DMA_Abort_IT+0x1c0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d022      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a4f      	ldr	r2, [pc, #316]	; (8005ae4 <HAL_DMA_Abort_IT+0x1c4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d01d      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a4d      	ldr	r2, [pc, #308]	; (8005ae8 <HAL_DMA_Abort_IT+0x1c8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d018      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a4c      	ldr	r2, [pc, #304]	; (8005aec <HAL_DMA_Abort_IT+0x1cc>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d013      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a4a      	ldr	r2, [pc, #296]	; (8005af0 <HAL_DMA_Abort_IT+0x1d0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00e      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a49      	ldr	r2, [pc, #292]	; (8005af4 <HAL_DMA_Abort_IT+0x1d4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d009      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a47      	ldr	r2, [pc, #284]	; (8005af8 <HAL_DMA_Abort_IT+0x1d8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <HAL_DMA_Abort_IT+0xc8>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a46      	ldr	r2, [pc, #280]	; (8005afc <HAL_DMA_Abort_IT+0x1dc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d101      	bne.n	80059ec <HAL_DMA_Abort_IT+0xcc>
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <HAL_DMA_Abort_IT+0xce>
 80059ec:	2300      	movs	r3, #0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 8086 	beq.w	8005b00 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2204      	movs	r2, #4
 80059f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a2f      	ldr	r2, [pc, #188]	; (8005ac0 <HAL_DMA_Abort_IT+0x1a0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d04a      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a2e      	ldr	r2, [pc, #184]	; (8005ac4 <HAL_DMA_Abort_IT+0x1a4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d045      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a2c      	ldr	r2, [pc, #176]	; (8005ac8 <HAL_DMA_Abort_IT+0x1a8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d040      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a2b      	ldr	r2, [pc, #172]	; (8005acc <HAL_DMA_Abort_IT+0x1ac>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d03b      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a29      	ldr	r2, [pc, #164]	; (8005ad0 <HAL_DMA_Abort_IT+0x1b0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d036      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a28      	ldr	r2, [pc, #160]	; (8005ad4 <HAL_DMA_Abort_IT+0x1b4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d031      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a26      	ldr	r2, [pc, #152]	; (8005ad8 <HAL_DMA_Abort_IT+0x1b8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d02c      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a25      	ldr	r2, [pc, #148]	; (8005adc <HAL_DMA_Abort_IT+0x1bc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d027      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a23      	ldr	r2, [pc, #140]	; (8005ae0 <HAL_DMA_Abort_IT+0x1c0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d022      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a22      	ldr	r2, [pc, #136]	; (8005ae4 <HAL_DMA_Abort_IT+0x1c4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d01d      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a20      	ldr	r2, [pc, #128]	; (8005ae8 <HAL_DMA_Abort_IT+0x1c8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d018      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1f      	ldr	r2, [pc, #124]	; (8005aec <HAL_DMA_Abort_IT+0x1cc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d013      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <HAL_DMA_Abort_IT+0x1d0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00e      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <HAL_DMA_Abort_IT+0x1d4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d009      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a1a      	ldr	r2, [pc, #104]	; (8005af8 <HAL_DMA_Abort_IT+0x1d8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d004      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x17c>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a19      	ldr	r2, [pc, #100]	; (8005afc <HAL_DMA_Abort_IT+0x1dc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d108      	bne.n	8005aae <HAL_DMA_Abort_IT+0x18e>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	e178      	b.n	8005da0 <HAL_DMA_Abort_IT+0x480>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0201 	bic.w	r2, r2, #1
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e16f      	b.n	8005da0 <HAL_DMA_Abort_IT+0x480>
 8005ac0:	40020010 	.word	0x40020010
 8005ac4:	40020028 	.word	0x40020028
 8005ac8:	40020040 	.word	0x40020040
 8005acc:	40020058 	.word	0x40020058
 8005ad0:	40020070 	.word	0x40020070
 8005ad4:	40020088 	.word	0x40020088
 8005ad8:	400200a0 	.word	0x400200a0
 8005adc:	400200b8 	.word	0x400200b8
 8005ae0:	40020410 	.word	0x40020410
 8005ae4:	40020428 	.word	0x40020428
 8005ae8:	40020440 	.word	0x40020440
 8005aec:	40020458 	.word	0x40020458
 8005af0:	40020470 	.word	0x40020470
 8005af4:	40020488 	.word	0x40020488
 8005af8:	400204a0 	.word	0x400204a0
 8005afc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 020e 	bic.w	r2, r2, #14
 8005b0e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a6c      	ldr	r2, [pc, #432]	; (8005cc8 <HAL_DMA_Abort_IT+0x3a8>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d04a      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a6b      	ldr	r2, [pc, #428]	; (8005ccc <HAL_DMA_Abort_IT+0x3ac>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d045      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a69      	ldr	r2, [pc, #420]	; (8005cd0 <HAL_DMA_Abort_IT+0x3b0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d040      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a68      	ldr	r2, [pc, #416]	; (8005cd4 <HAL_DMA_Abort_IT+0x3b4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d03b      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a66      	ldr	r2, [pc, #408]	; (8005cd8 <HAL_DMA_Abort_IT+0x3b8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d036      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a65      	ldr	r2, [pc, #404]	; (8005cdc <HAL_DMA_Abort_IT+0x3bc>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d031      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a63      	ldr	r2, [pc, #396]	; (8005ce0 <HAL_DMA_Abort_IT+0x3c0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d02c      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a62      	ldr	r2, [pc, #392]	; (8005ce4 <HAL_DMA_Abort_IT+0x3c4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d027      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a60      	ldr	r2, [pc, #384]	; (8005ce8 <HAL_DMA_Abort_IT+0x3c8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d022      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a5f      	ldr	r2, [pc, #380]	; (8005cec <HAL_DMA_Abort_IT+0x3cc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d01d      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a5d      	ldr	r2, [pc, #372]	; (8005cf0 <HAL_DMA_Abort_IT+0x3d0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d018      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a5c      	ldr	r2, [pc, #368]	; (8005cf4 <HAL_DMA_Abort_IT+0x3d4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d013      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a5a      	ldr	r2, [pc, #360]	; (8005cf8 <HAL_DMA_Abort_IT+0x3d8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00e      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a59      	ldr	r2, [pc, #356]	; (8005cfc <HAL_DMA_Abort_IT+0x3dc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d009      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a57      	ldr	r2, [pc, #348]	; (8005d00 <HAL_DMA_Abort_IT+0x3e0>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x290>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a56      	ldr	r2, [pc, #344]	; (8005d04 <HAL_DMA_Abort_IT+0x3e4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d108      	bne.n	8005bc2 <HAL_DMA_Abort_IT+0x2a2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	e007      	b.n	8005bd2 <HAL_DMA_Abort_IT+0x2b2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0201 	bic.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a3c      	ldr	r2, [pc, #240]	; (8005cc8 <HAL_DMA_Abort_IT+0x3a8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d072      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a3a      	ldr	r2, [pc, #232]	; (8005ccc <HAL_DMA_Abort_IT+0x3ac>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d06d      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a39      	ldr	r2, [pc, #228]	; (8005cd0 <HAL_DMA_Abort_IT+0x3b0>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d068      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a37      	ldr	r2, [pc, #220]	; (8005cd4 <HAL_DMA_Abort_IT+0x3b4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d063      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a36      	ldr	r2, [pc, #216]	; (8005cd8 <HAL_DMA_Abort_IT+0x3b8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d05e      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a34      	ldr	r2, [pc, #208]	; (8005cdc <HAL_DMA_Abort_IT+0x3bc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d059      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a33      	ldr	r2, [pc, #204]	; (8005ce0 <HAL_DMA_Abort_IT+0x3c0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d054      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a31      	ldr	r2, [pc, #196]	; (8005ce4 <HAL_DMA_Abort_IT+0x3c4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d04f      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a30      	ldr	r2, [pc, #192]	; (8005ce8 <HAL_DMA_Abort_IT+0x3c8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d04a      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2e      	ldr	r2, [pc, #184]	; (8005cec <HAL_DMA_Abort_IT+0x3cc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d045      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a2d      	ldr	r2, [pc, #180]	; (8005cf0 <HAL_DMA_Abort_IT+0x3d0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d040      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a2b      	ldr	r2, [pc, #172]	; (8005cf4 <HAL_DMA_Abort_IT+0x3d4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d03b      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a2a      	ldr	r2, [pc, #168]	; (8005cf8 <HAL_DMA_Abort_IT+0x3d8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d036      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a28      	ldr	r2, [pc, #160]	; (8005cfc <HAL_DMA_Abort_IT+0x3dc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d031      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a27      	ldr	r2, [pc, #156]	; (8005d00 <HAL_DMA_Abort_IT+0x3e0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d02c      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a25      	ldr	r2, [pc, #148]	; (8005d04 <HAL_DMA_Abort_IT+0x3e4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d027      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a24      	ldr	r2, [pc, #144]	; (8005d08 <HAL_DMA_Abort_IT+0x3e8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d022      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a22      	ldr	r2, [pc, #136]	; (8005d0c <HAL_DMA_Abort_IT+0x3ec>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01d      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a21      	ldr	r2, [pc, #132]	; (8005d10 <HAL_DMA_Abort_IT+0x3f0>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d018      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1f      	ldr	r2, [pc, #124]	; (8005d14 <HAL_DMA_Abort_IT+0x3f4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1e      	ldr	r2, [pc, #120]	; (8005d18 <HAL_DMA_Abort_IT+0x3f8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1c      	ldr	r2, [pc, #112]	; (8005d1c <HAL_DMA_Abort_IT+0x3fc>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1b      	ldr	r2, [pc, #108]	; (8005d20 <HAL_DMA_Abort_IT+0x400>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_DMA_Abort_IT+0x3a2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a19      	ldr	r2, [pc, #100]	; (8005d24 <HAL_DMA_Abort_IT+0x404>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d132      	bne.n	8005d28 <HAL_DMA_Abort_IT+0x408>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e031      	b.n	8005d2a <HAL_DMA_Abort_IT+0x40a>
 8005cc6:	bf00      	nop
 8005cc8:	40020010 	.word	0x40020010
 8005ccc:	40020028 	.word	0x40020028
 8005cd0:	40020040 	.word	0x40020040
 8005cd4:	40020058 	.word	0x40020058
 8005cd8:	40020070 	.word	0x40020070
 8005cdc:	40020088 	.word	0x40020088
 8005ce0:	400200a0 	.word	0x400200a0
 8005ce4:	400200b8 	.word	0x400200b8
 8005ce8:	40020410 	.word	0x40020410
 8005cec:	40020428 	.word	0x40020428
 8005cf0:	40020440 	.word	0x40020440
 8005cf4:	40020458 	.word	0x40020458
 8005cf8:	40020470 	.word	0x40020470
 8005cfc:	40020488 	.word	0x40020488
 8005d00:	400204a0 	.word	0x400204a0
 8005d04:	400204b8 	.word	0x400204b8
 8005d08:	58025408 	.word	0x58025408
 8005d0c:	5802541c 	.word	0x5802541c
 8005d10:	58025430 	.word	0x58025430
 8005d14:	58025444 	.word	0x58025444
 8005d18:	58025458 	.word	0x58025458
 8005d1c:	5802546c 	.word	0x5802546c
 8005d20:	58025480 	.word	0x58025480
 8005d24:	58025494 	.word	0x58025494
 8005d28:	2300      	movs	r3, #0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d028      	beq.n	8005d80 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d3c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d42:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d48:	f003 031f 	and.w	r3, r3, #31
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	409a      	lsls	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d5c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00c      	beq.n	8005d80 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d74:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d7e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop

08005dac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08a      	sub	sp, #40	; 0x28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005db8:	4b67      	ldr	r3, [pc, #412]	; (8005f58 <HAL_DMA_IRQHandler+0x1ac>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a67      	ldr	r2, [pc, #412]	; (8005f5c <HAL_DMA_IRQHandler+0x1b0>)
 8005dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc2:	0a9b      	lsrs	r3, r3, #10
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a5f      	ldr	r2, [pc, #380]	; (8005f60 <HAL_DMA_IRQHandler+0x1b4>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d04a      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a5d      	ldr	r2, [pc, #372]	; (8005f64 <HAL_DMA_IRQHandler+0x1b8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d045      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a5c      	ldr	r2, [pc, #368]	; (8005f68 <HAL_DMA_IRQHandler+0x1bc>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d040      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a5a      	ldr	r2, [pc, #360]	; (8005f6c <HAL_DMA_IRQHandler+0x1c0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d03b      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a59      	ldr	r2, [pc, #356]	; (8005f70 <HAL_DMA_IRQHandler+0x1c4>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d036      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a57      	ldr	r2, [pc, #348]	; (8005f74 <HAL_DMA_IRQHandler+0x1c8>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d031      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a56      	ldr	r2, [pc, #344]	; (8005f78 <HAL_DMA_IRQHandler+0x1cc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d02c      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a54      	ldr	r2, [pc, #336]	; (8005f7c <HAL_DMA_IRQHandler+0x1d0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d027      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a53      	ldr	r2, [pc, #332]	; (8005f80 <HAL_DMA_IRQHandler+0x1d4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d022      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a51      	ldr	r2, [pc, #324]	; (8005f84 <HAL_DMA_IRQHandler+0x1d8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d01d      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a50      	ldr	r2, [pc, #320]	; (8005f88 <HAL_DMA_IRQHandler+0x1dc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d018      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a4e      	ldr	r2, [pc, #312]	; (8005f8c <HAL_DMA_IRQHandler+0x1e0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a4d      	ldr	r2, [pc, #308]	; (8005f90 <HAL_DMA_IRQHandler+0x1e4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00e      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a4b      	ldr	r2, [pc, #300]	; (8005f94 <HAL_DMA_IRQHandler+0x1e8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d009      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a4a      	ldr	r2, [pc, #296]	; (8005f98 <HAL_DMA_IRQHandler+0x1ec>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d004      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xd2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a48      	ldr	r2, [pc, #288]	; (8005f9c <HAL_DMA_IRQHandler+0x1f0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d101      	bne.n	8005e82 <HAL_DMA_IRQHandler+0xd6>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <HAL_DMA_IRQHandler+0xd8>
 8005e82:	2300      	movs	r3, #0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 842b 	beq.w	80066e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8e:	f003 031f 	and.w	r3, r3, #31
 8005e92:	2208      	movs	r2, #8
 8005e94:	409a      	lsls	r2, r3
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 80a2 	beq.w	8005fe4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a2e      	ldr	r2, [pc, #184]	; (8005f60 <HAL_DMA_IRQHandler+0x1b4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d04a      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a2d      	ldr	r2, [pc, #180]	; (8005f64 <HAL_DMA_IRQHandler+0x1b8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d045      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a2b      	ldr	r2, [pc, #172]	; (8005f68 <HAL_DMA_IRQHandler+0x1bc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d040      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a2a      	ldr	r2, [pc, #168]	; (8005f6c <HAL_DMA_IRQHandler+0x1c0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d03b      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a28      	ldr	r2, [pc, #160]	; (8005f70 <HAL_DMA_IRQHandler+0x1c4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d036      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a27      	ldr	r2, [pc, #156]	; (8005f74 <HAL_DMA_IRQHandler+0x1c8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d031      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a25      	ldr	r2, [pc, #148]	; (8005f78 <HAL_DMA_IRQHandler+0x1cc>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d02c      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a24      	ldr	r2, [pc, #144]	; (8005f7c <HAL_DMA_IRQHandler+0x1d0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d027      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a22      	ldr	r2, [pc, #136]	; (8005f80 <HAL_DMA_IRQHandler+0x1d4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d022      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a21      	ldr	r2, [pc, #132]	; (8005f84 <HAL_DMA_IRQHandler+0x1d8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d01d      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <HAL_DMA_IRQHandler+0x1dc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d018      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1e      	ldr	r2, [pc, #120]	; (8005f8c <HAL_DMA_IRQHandler+0x1e0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d013      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1c      	ldr	r2, [pc, #112]	; (8005f90 <HAL_DMA_IRQHandler+0x1e4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00e      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <HAL_DMA_IRQHandler+0x1e8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d009      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a19      	ldr	r2, [pc, #100]	; (8005f98 <HAL_DMA_IRQHandler+0x1ec>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d004      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x194>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a18      	ldr	r2, [pc, #96]	; (8005f9c <HAL_DMA_IRQHandler+0x1f0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d12f      	bne.n	8005fa0 <HAL_DMA_IRQHandler+0x1f4>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bf14      	ite	ne
 8005f4e:	2301      	movne	r3, #1
 8005f50:	2300      	moveq	r3, #0
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	e02e      	b.n	8005fb4 <HAL_DMA_IRQHandler+0x208>
 8005f56:	bf00      	nop
 8005f58:	2400002c 	.word	0x2400002c
 8005f5c:	1b4e81b5 	.word	0x1b4e81b5
 8005f60:	40020010 	.word	0x40020010
 8005f64:	40020028 	.word	0x40020028
 8005f68:	40020040 	.word	0x40020040
 8005f6c:	40020058 	.word	0x40020058
 8005f70:	40020070 	.word	0x40020070
 8005f74:	40020088 	.word	0x40020088
 8005f78:	400200a0 	.word	0x400200a0
 8005f7c:	400200b8 	.word	0x400200b8
 8005f80:	40020410 	.word	0x40020410
 8005f84:	40020428 	.word	0x40020428
 8005f88:	40020440 	.word	0x40020440
 8005f8c:	40020458 	.word	0x40020458
 8005f90:	40020470 	.word	0x40020470
 8005f94:	40020488 	.word	0x40020488
 8005f98:	400204a0 	.word	0x400204a0
 8005f9c:	400204b8 	.word	0x400204b8
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	bf14      	ite	ne
 8005fae:	2301      	movne	r3, #1
 8005fb0:	2300      	moveq	r3, #0
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d015      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0204 	bic.w	r2, r2, #4
 8005fc6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fcc:	f003 031f 	and.w	r3, r3, #31
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	409a      	lsls	r2, r3
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fdc:	f043 0201 	orr.w	r2, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d06e      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a69      	ldr	r2, [pc, #420]	; (80061a4 <HAL_DMA_IRQHandler+0x3f8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d04a      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a67      	ldr	r2, [pc, #412]	; (80061a8 <HAL_DMA_IRQHandler+0x3fc>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d045      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a66      	ldr	r2, [pc, #408]	; (80061ac <HAL_DMA_IRQHandler+0x400>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d040      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a64      	ldr	r2, [pc, #400]	; (80061b0 <HAL_DMA_IRQHandler+0x404>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d03b      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a63      	ldr	r2, [pc, #396]	; (80061b4 <HAL_DMA_IRQHandler+0x408>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d036      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a61      	ldr	r2, [pc, #388]	; (80061b8 <HAL_DMA_IRQHandler+0x40c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d031      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a60      	ldr	r2, [pc, #384]	; (80061bc <HAL_DMA_IRQHandler+0x410>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d02c      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a5e      	ldr	r2, [pc, #376]	; (80061c0 <HAL_DMA_IRQHandler+0x414>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d027      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a5d      	ldr	r2, [pc, #372]	; (80061c4 <HAL_DMA_IRQHandler+0x418>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d022      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a5b      	ldr	r2, [pc, #364]	; (80061c8 <HAL_DMA_IRQHandler+0x41c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d01d      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a5a      	ldr	r2, [pc, #360]	; (80061cc <HAL_DMA_IRQHandler+0x420>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d018      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a58      	ldr	r2, [pc, #352]	; (80061d0 <HAL_DMA_IRQHandler+0x424>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d013      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a57      	ldr	r2, [pc, #348]	; (80061d4 <HAL_DMA_IRQHandler+0x428>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00e      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a55      	ldr	r2, [pc, #340]	; (80061d8 <HAL_DMA_IRQHandler+0x42c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d009      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a54      	ldr	r2, [pc, #336]	; (80061dc <HAL_DMA_IRQHandler+0x430>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d004      	beq.n	800609a <HAL_DMA_IRQHandler+0x2ee>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a52      	ldr	r2, [pc, #328]	; (80061e0 <HAL_DMA_IRQHandler+0x434>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d10a      	bne.n	80060b0 <HAL_DMA_IRQHandler+0x304>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bf14      	ite	ne
 80060a8:	2301      	movne	r3, #1
 80060aa:	2300      	moveq	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	e003      	b.n	80060b8 <HAL_DMA_IRQHandler+0x30c>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2300      	movs	r3, #0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00d      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	2201      	movs	r2, #1
 80060c6:	409a      	lsls	r2, r3
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d0:	f043 0202 	orr.w	r2, r3, #2
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	2204      	movs	r2, #4
 80060e2:	409a      	lsls	r2, r3
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	4013      	ands	r3, r2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 808f 	beq.w	800620c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a2c      	ldr	r2, [pc, #176]	; (80061a4 <HAL_DMA_IRQHandler+0x3f8>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d04a      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a2a      	ldr	r2, [pc, #168]	; (80061a8 <HAL_DMA_IRQHandler+0x3fc>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d045      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a29      	ldr	r2, [pc, #164]	; (80061ac <HAL_DMA_IRQHandler+0x400>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d040      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a27      	ldr	r2, [pc, #156]	; (80061b0 <HAL_DMA_IRQHandler+0x404>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d03b      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a26      	ldr	r2, [pc, #152]	; (80061b4 <HAL_DMA_IRQHandler+0x408>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d036      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a24      	ldr	r2, [pc, #144]	; (80061b8 <HAL_DMA_IRQHandler+0x40c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d031      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a23      	ldr	r2, [pc, #140]	; (80061bc <HAL_DMA_IRQHandler+0x410>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d02c      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a21      	ldr	r2, [pc, #132]	; (80061c0 <HAL_DMA_IRQHandler+0x414>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d027      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a20      	ldr	r2, [pc, #128]	; (80061c4 <HAL_DMA_IRQHandler+0x418>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d022      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a1e      	ldr	r2, [pc, #120]	; (80061c8 <HAL_DMA_IRQHandler+0x41c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d01d      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1d      	ldr	r2, [pc, #116]	; (80061cc <HAL_DMA_IRQHandler+0x420>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d018      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a1b      	ldr	r2, [pc, #108]	; (80061d0 <HAL_DMA_IRQHandler+0x424>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d013      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1a      	ldr	r2, [pc, #104]	; (80061d4 <HAL_DMA_IRQHandler+0x428>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00e      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a18      	ldr	r2, [pc, #96]	; (80061d8 <HAL_DMA_IRQHandler+0x42c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d009      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a17      	ldr	r2, [pc, #92]	; (80061dc <HAL_DMA_IRQHandler+0x430>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d004      	beq.n	800618e <HAL_DMA_IRQHandler+0x3e2>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a15      	ldr	r2, [pc, #84]	; (80061e0 <HAL_DMA_IRQHandler+0x434>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d12a      	bne.n	80061e4 <HAL_DMA_IRQHandler+0x438>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	bf14      	ite	ne
 800619c:	2301      	movne	r3, #1
 800619e:	2300      	moveq	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	e023      	b.n	80061ec <HAL_DMA_IRQHandler+0x440>
 80061a4:	40020010 	.word	0x40020010
 80061a8:	40020028 	.word	0x40020028
 80061ac:	40020040 	.word	0x40020040
 80061b0:	40020058 	.word	0x40020058
 80061b4:	40020070 	.word	0x40020070
 80061b8:	40020088 	.word	0x40020088
 80061bc:	400200a0 	.word	0x400200a0
 80061c0:	400200b8 	.word	0x400200b8
 80061c4:	40020410 	.word	0x40020410
 80061c8:	40020428 	.word	0x40020428
 80061cc:	40020440 	.word	0x40020440
 80061d0:	40020458 	.word	0x40020458
 80061d4:	40020470 	.word	0x40020470
 80061d8:	40020488 	.word	0x40020488
 80061dc:	400204a0 	.word	0x400204a0
 80061e0:	400204b8 	.word	0x400204b8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2300      	movs	r3, #0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00d      	beq.n	800620c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	2204      	movs	r2, #4
 80061fa:	409a      	lsls	r2, r3
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006204:	f043 0204 	orr.w	r2, r3, #4
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006210:	f003 031f 	and.w	r3, r3, #31
 8006214:	2210      	movs	r2, #16
 8006216:	409a      	lsls	r2, r3
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	4013      	ands	r3, r2
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80a6 	beq.w	800636e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a85      	ldr	r2, [pc, #532]	; (800643c <HAL_DMA_IRQHandler+0x690>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d04a      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a83      	ldr	r2, [pc, #524]	; (8006440 <HAL_DMA_IRQHandler+0x694>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d045      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a82      	ldr	r2, [pc, #520]	; (8006444 <HAL_DMA_IRQHandler+0x698>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d040      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a80      	ldr	r2, [pc, #512]	; (8006448 <HAL_DMA_IRQHandler+0x69c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d03b      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a7f      	ldr	r2, [pc, #508]	; (800644c <HAL_DMA_IRQHandler+0x6a0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d036      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a7d      	ldr	r2, [pc, #500]	; (8006450 <HAL_DMA_IRQHandler+0x6a4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d031      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a7c      	ldr	r2, [pc, #496]	; (8006454 <HAL_DMA_IRQHandler+0x6a8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d02c      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a7a      	ldr	r2, [pc, #488]	; (8006458 <HAL_DMA_IRQHandler+0x6ac>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d027      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a79      	ldr	r2, [pc, #484]	; (800645c <HAL_DMA_IRQHandler+0x6b0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d022      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a77      	ldr	r2, [pc, #476]	; (8006460 <HAL_DMA_IRQHandler+0x6b4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d01d      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a76      	ldr	r2, [pc, #472]	; (8006464 <HAL_DMA_IRQHandler+0x6b8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d018      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a74      	ldr	r2, [pc, #464]	; (8006468 <HAL_DMA_IRQHandler+0x6bc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a73      	ldr	r2, [pc, #460]	; (800646c <HAL_DMA_IRQHandler+0x6c0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00e      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a71      	ldr	r2, [pc, #452]	; (8006470 <HAL_DMA_IRQHandler+0x6c4>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d009      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a70      	ldr	r2, [pc, #448]	; (8006474 <HAL_DMA_IRQHandler+0x6c8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d004      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x516>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a6e      	ldr	r2, [pc, #440]	; (8006478 <HAL_DMA_IRQHandler+0x6cc>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d10a      	bne.n	80062d8 <HAL_DMA_IRQHandler+0x52c>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0308 	and.w	r3, r3, #8
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bf14      	ite	ne
 80062d0:	2301      	movne	r3, #1
 80062d2:	2300      	moveq	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	e009      	b.n	80062ec <HAL_DMA_IRQHandler+0x540>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	bf14      	ite	ne
 80062e6:	2301      	movne	r3, #1
 80062e8:	2300      	moveq	r3, #0
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d03e      	beq.n	800636e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f4:	f003 031f 	and.w	r3, r3, #31
 80062f8:	2210      	movs	r2, #16
 80062fa:	409a      	lsls	r2, r3
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d018      	beq.n	8006340 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d108      	bne.n	800632e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	2b00      	cmp	r3, #0
 8006322:	d024      	beq.n	800636e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	4798      	blx	r3
 800632c:	e01f      	b.n	800636e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01b      	beq.n	800636e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
 800633e:	e016      	b.n	800636e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634a:	2b00      	cmp	r3, #0
 800634c:	d107      	bne.n	800635e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0208 	bic.w	r2, r2, #8
 800635c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006372:	f003 031f 	and.w	r3, r3, #31
 8006376:	2220      	movs	r2, #32
 8006378:	409a      	lsls	r2, r3
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	4013      	ands	r3, r2
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 8110 	beq.w	80065a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a2c      	ldr	r2, [pc, #176]	; (800643c <HAL_DMA_IRQHandler+0x690>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d04a      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a2b      	ldr	r2, [pc, #172]	; (8006440 <HAL_DMA_IRQHandler+0x694>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d045      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a29      	ldr	r2, [pc, #164]	; (8006444 <HAL_DMA_IRQHandler+0x698>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d040      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a28      	ldr	r2, [pc, #160]	; (8006448 <HAL_DMA_IRQHandler+0x69c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d03b      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a26      	ldr	r2, [pc, #152]	; (800644c <HAL_DMA_IRQHandler+0x6a0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d036      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a25      	ldr	r2, [pc, #148]	; (8006450 <HAL_DMA_IRQHandler+0x6a4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d031      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a23      	ldr	r2, [pc, #140]	; (8006454 <HAL_DMA_IRQHandler+0x6a8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d02c      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a22      	ldr	r2, [pc, #136]	; (8006458 <HAL_DMA_IRQHandler+0x6ac>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d027      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a20      	ldr	r2, [pc, #128]	; (800645c <HAL_DMA_IRQHandler+0x6b0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d022      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a1f      	ldr	r2, [pc, #124]	; (8006460 <HAL_DMA_IRQHandler+0x6b4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d01d      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1d      	ldr	r2, [pc, #116]	; (8006464 <HAL_DMA_IRQHandler+0x6b8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d018      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a1c      	ldr	r2, [pc, #112]	; (8006468 <HAL_DMA_IRQHandler+0x6bc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d013      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1a      	ldr	r2, [pc, #104]	; (800646c <HAL_DMA_IRQHandler+0x6c0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00e      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a19      	ldr	r2, [pc, #100]	; (8006470 <HAL_DMA_IRQHandler+0x6c4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d009      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a17      	ldr	r2, [pc, #92]	; (8006474 <HAL_DMA_IRQHandler+0x6c8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_DMA_IRQHandler+0x678>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a16      	ldr	r2, [pc, #88]	; (8006478 <HAL_DMA_IRQHandler+0x6cc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d12b      	bne.n	800647c <HAL_DMA_IRQHandler+0x6d0>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0310 	and.w	r3, r3, #16
 800642e:	2b00      	cmp	r3, #0
 8006430:	bf14      	ite	ne
 8006432:	2301      	movne	r3, #1
 8006434:	2300      	moveq	r3, #0
 8006436:	b2db      	uxtb	r3, r3
 8006438:	e02a      	b.n	8006490 <HAL_DMA_IRQHandler+0x6e4>
 800643a:	bf00      	nop
 800643c:	40020010 	.word	0x40020010
 8006440:	40020028 	.word	0x40020028
 8006444:	40020040 	.word	0x40020040
 8006448:	40020058 	.word	0x40020058
 800644c:	40020070 	.word	0x40020070
 8006450:	40020088 	.word	0x40020088
 8006454:	400200a0 	.word	0x400200a0
 8006458:	400200b8 	.word	0x400200b8
 800645c:	40020410 	.word	0x40020410
 8006460:	40020428 	.word	0x40020428
 8006464:	40020440 	.word	0x40020440
 8006468:	40020458 	.word	0x40020458
 800646c:	40020470 	.word	0x40020470
 8006470:	40020488 	.word	0x40020488
 8006474:	400204a0 	.word	0x400204a0
 8006478:	400204b8 	.word	0x400204b8
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	bf14      	ite	ne
 800648a:	2301      	movne	r3, #1
 800648c:	2300      	moveq	r3, #0
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 8087 	beq.w	80065a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800649a:	f003 031f 	and.w	r3, r3, #31
 800649e:	2220      	movs	r2, #32
 80064a0:	409a      	lsls	r2, r3
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d139      	bne.n	8006526 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0216 	bic.w	r2, r2, #22
 80064c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	695a      	ldr	r2, [r3, #20]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d103      	bne.n	80064e2 <HAL_DMA_IRQHandler+0x736>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d007      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0208 	bic.w	r2, r2, #8
 80064f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	223f      	movs	r2, #63	; 0x3f
 80064fc:	409a      	lsls	r2, r3
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 834a 	beq.w	8006bb0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
          }
          return;
 8006524:	e344      	b.n	8006bb0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d018      	beq.n	8006566 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d108      	bne.n	8006554 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006546:	2b00      	cmp	r3, #0
 8006548:	d02c      	beq.n	80065a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	4798      	blx	r3
 8006552:	e027      	b.n	80065a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006558:	2b00      	cmp	r3, #0
 800655a:	d023      	beq.n	80065a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	4798      	blx	r3
 8006564:	e01e      	b.n	80065a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10f      	bne.n	8006594 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0210 	bic.w	r2, r2, #16
 8006582:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 8306 	beq.w	8006bba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 8088 	beq.w	80066cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2204      	movs	r2, #4
 80065c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a7a      	ldr	r2, [pc, #488]	; (80067b4 <HAL_DMA_IRQHandler+0xa08>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d04a      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a79      	ldr	r2, [pc, #484]	; (80067b8 <HAL_DMA_IRQHandler+0xa0c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d045      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a77      	ldr	r2, [pc, #476]	; (80067bc <HAL_DMA_IRQHandler+0xa10>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d040      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a76      	ldr	r2, [pc, #472]	; (80067c0 <HAL_DMA_IRQHandler+0xa14>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d03b      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a74      	ldr	r2, [pc, #464]	; (80067c4 <HAL_DMA_IRQHandler+0xa18>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d036      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a73      	ldr	r2, [pc, #460]	; (80067c8 <HAL_DMA_IRQHandler+0xa1c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d031      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a71      	ldr	r2, [pc, #452]	; (80067cc <HAL_DMA_IRQHandler+0xa20>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d02c      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a70      	ldr	r2, [pc, #448]	; (80067d0 <HAL_DMA_IRQHandler+0xa24>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d027      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a6e      	ldr	r2, [pc, #440]	; (80067d4 <HAL_DMA_IRQHandler+0xa28>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d022      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a6d      	ldr	r2, [pc, #436]	; (80067d8 <HAL_DMA_IRQHandler+0xa2c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d01d      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a6b      	ldr	r2, [pc, #428]	; (80067dc <HAL_DMA_IRQHandler+0xa30>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d018      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a6a      	ldr	r2, [pc, #424]	; (80067e0 <HAL_DMA_IRQHandler+0xa34>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d013      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a68      	ldr	r2, [pc, #416]	; (80067e4 <HAL_DMA_IRQHandler+0xa38>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00e      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a67      	ldr	r2, [pc, #412]	; (80067e8 <HAL_DMA_IRQHandler+0xa3c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d009      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a65      	ldr	r2, [pc, #404]	; (80067ec <HAL_DMA_IRQHandler+0xa40>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d004      	beq.n	8006664 <HAL_DMA_IRQHandler+0x8b8>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a64      	ldr	r2, [pc, #400]	; (80067f0 <HAL_DMA_IRQHandler+0xa44>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d108      	bne.n	8006676 <HAL_DMA_IRQHandler+0x8ca>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0201 	bic.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	e007      	b.n	8006686 <HAL_DMA_IRQHandler+0x8da>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0201 	bic.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3301      	adds	r3, #1
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800668e:	429a      	cmp	r2, r3
 8006690:	d307      	bcc.n	80066a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f2      	bne.n	8006686 <HAL_DMA_IRQHandler+0x8da>
 80066a0:	e000      	b.n	80066a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80066a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d004      	beq.n	80066bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2203      	movs	r2, #3
 80066b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80066ba:	e003      	b.n	80066c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8272 	beq.w	8006bba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	4798      	blx	r3
 80066de:	e26c      	b.n	8006bba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a43      	ldr	r2, [pc, #268]	; (80067f4 <HAL_DMA_IRQHandler+0xa48>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d022      	beq.n	8006730 <HAL_DMA_IRQHandler+0x984>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a42      	ldr	r2, [pc, #264]	; (80067f8 <HAL_DMA_IRQHandler+0xa4c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d01d      	beq.n	8006730 <HAL_DMA_IRQHandler+0x984>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a40      	ldr	r2, [pc, #256]	; (80067fc <HAL_DMA_IRQHandler+0xa50>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d018      	beq.n	8006730 <HAL_DMA_IRQHandler+0x984>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a3f      	ldr	r2, [pc, #252]	; (8006800 <HAL_DMA_IRQHandler+0xa54>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d013      	beq.n	8006730 <HAL_DMA_IRQHandler+0x984>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a3d      	ldr	r2, [pc, #244]	; (8006804 <HAL_DMA_IRQHandler+0xa58>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00e      	beq.n	8006730 <HAL_DMA_IRQHandler+0x984>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a3c      	ldr	r2, [pc, #240]	; (8006808 <HAL_DMA_IRQHandler+0xa5c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d009      	beq.n	8006730 <HAL_DMA_IRQHandler+0x984>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a3a      	ldr	r2, [pc, #232]	; (800680c <HAL_DMA_IRQHandler+0xa60>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d004      	beq.n	8006730 <HAL_DMA_IRQHandler+0x984>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a39      	ldr	r2, [pc, #228]	; (8006810 <HAL_DMA_IRQHandler+0xa64>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d101      	bne.n	8006734 <HAL_DMA_IRQHandler+0x988>
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <HAL_DMA_IRQHandler+0x98a>
 8006734:	2300      	movs	r3, #0
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 823f 	beq.w	8006bba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	2204      	movs	r2, #4
 800674e:	409a      	lsls	r2, r3
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	4013      	ands	r3, r2
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80cd 	beq.w	80068f4 <HAL_DMA_IRQHandler+0xb48>
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 80c7 	beq.w	80068f4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800676a:	f003 031f 	and.w	r3, r3, #31
 800676e:	2204      	movs	r2, #4
 8006770:	409a      	lsls	r2, r3
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d049      	beq.n	8006814 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 8210 	beq.w	8006bb4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800679c:	e20a      	b.n	8006bb4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 8206 	beq.w	8006bb4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067b0:	e200      	b.n	8006bb4 <HAL_DMA_IRQHandler+0xe08>
 80067b2:	bf00      	nop
 80067b4:	40020010 	.word	0x40020010
 80067b8:	40020028 	.word	0x40020028
 80067bc:	40020040 	.word	0x40020040
 80067c0:	40020058 	.word	0x40020058
 80067c4:	40020070 	.word	0x40020070
 80067c8:	40020088 	.word	0x40020088
 80067cc:	400200a0 	.word	0x400200a0
 80067d0:	400200b8 	.word	0x400200b8
 80067d4:	40020410 	.word	0x40020410
 80067d8:	40020428 	.word	0x40020428
 80067dc:	40020440 	.word	0x40020440
 80067e0:	40020458 	.word	0x40020458
 80067e4:	40020470 	.word	0x40020470
 80067e8:	40020488 	.word	0x40020488
 80067ec:	400204a0 	.word	0x400204a0
 80067f0:	400204b8 	.word	0x400204b8
 80067f4:	58025408 	.word	0x58025408
 80067f8:	5802541c 	.word	0x5802541c
 80067fc:	58025430 	.word	0x58025430
 8006800:	58025444 	.word	0x58025444
 8006804:	58025458 	.word	0x58025458
 8006808:	5802546c 	.word	0x5802546c
 800680c:	58025480 	.word	0x58025480
 8006810:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d160      	bne.n	80068e0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a7f      	ldr	r2, [pc, #508]	; (8006a20 <HAL_DMA_IRQHandler+0xc74>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d04a      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a7d      	ldr	r2, [pc, #500]	; (8006a24 <HAL_DMA_IRQHandler+0xc78>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d045      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a7c      	ldr	r2, [pc, #496]	; (8006a28 <HAL_DMA_IRQHandler+0xc7c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d040      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a7a      	ldr	r2, [pc, #488]	; (8006a2c <HAL_DMA_IRQHandler+0xc80>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d03b      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a79      	ldr	r2, [pc, #484]	; (8006a30 <HAL_DMA_IRQHandler+0xc84>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d036      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a77      	ldr	r2, [pc, #476]	; (8006a34 <HAL_DMA_IRQHandler+0xc88>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d031      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a76      	ldr	r2, [pc, #472]	; (8006a38 <HAL_DMA_IRQHandler+0xc8c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d02c      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a74      	ldr	r2, [pc, #464]	; (8006a3c <HAL_DMA_IRQHandler+0xc90>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d027      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a73      	ldr	r2, [pc, #460]	; (8006a40 <HAL_DMA_IRQHandler+0xc94>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d022      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a71      	ldr	r2, [pc, #452]	; (8006a44 <HAL_DMA_IRQHandler+0xc98>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d01d      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a70      	ldr	r2, [pc, #448]	; (8006a48 <HAL_DMA_IRQHandler+0xc9c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d018      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a6e      	ldr	r2, [pc, #440]	; (8006a4c <HAL_DMA_IRQHandler+0xca0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d013      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a6d      	ldr	r2, [pc, #436]	; (8006a50 <HAL_DMA_IRQHandler+0xca4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00e      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a6b      	ldr	r2, [pc, #428]	; (8006a54 <HAL_DMA_IRQHandler+0xca8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d009      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a6a      	ldr	r2, [pc, #424]	; (8006a58 <HAL_DMA_IRQHandler+0xcac>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d004      	beq.n	80068be <HAL_DMA_IRQHandler+0xb12>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a68      	ldr	r2, [pc, #416]	; (8006a5c <HAL_DMA_IRQHandler+0xcb0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d108      	bne.n	80068d0 <HAL_DMA_IRQHandler+0xb24>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0208 	bic.w	r2, r2, #8
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	e007      	b.n	80068e0 <HAL_DMA_IRQHandler+0xb34>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0204 	bic.w	r2, r2, #4
 80068de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 8165 	beq.w	8006bb4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068f2:	e15f      	b.n	8006bb4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f8:	f003 031f 	and.w	r3, r3, #31
 80068fc:	2202      	movs	r2, #2
 80068fe:	409a      	lsls	r2, r3
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	4013      	ands	r3, r2
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 80c5 	beq.w	8006a94 <HAL_DMA_IRQHandler+0xce8>
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80bf 	beq.w	8006a94 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	2202      	movs	r2, #2
 8006920:	409a      	lsls	r2, r3
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d018      	beq.n	8006962 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d109      	bne.n	800694e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 813a 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800694c:	e134      	b.n	8006bb8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 8130 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006960:	e12a      	b.n	8006bb8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	f040 8089 	bne.w	8006a80 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a2b      	ldr	r2, [pc, #172]	; (8006a20 <HAL_DMA_IRQHandler+0xc74>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d04a      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a29      	ldr	r2, [pc, #164]	; (8006a24 <HAL_DMA_IRQHandler+0xc78>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d045      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a28      	ldr	r2, [pc, #160]	; (8006a28 <HAL_DMA_IRQHandler+0xc7c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d040      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a26      	ldr	r2, [pc, #152]	; (8006a2c <HAL_DMA_IRQHandler+0xc80>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d03b      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a25      	ldr	r2, [pc, #148]	; (8006a30 <HAL_DMA_IRQHandler+0xc84>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d036      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a23      	ldr	r2, [pc, #140]	; (8006a34 <HAL_DMA_IRQHandler+0xc88>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d031      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a22      	ldr	r2, [pc, #136]	; (8006a38 <HAL_DMA_IRQHandler+0xc8c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d02c      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a20      	ldr	r2, [pc, #128]	; (8006a3c <HAL_DMA_IRQHandler+0xc90>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d027      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1f      	ldr	r2, [pc, #124]	; (8006a40 <HAL_DMA_IRQHandler+0xc94>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d022      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <HAL_DMA_IRQHandler+0xc98>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d01d      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1c      	ldr	r2, [pc, #112]	; (8006a48 <HAL_DMA_IRQHandler+0xc9c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d018      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1a      	ldr	r2, [pc, #104]	; (8006a4c <HAL_DMA_IRQHandler+0xca0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d013      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a19      	ldr	r2, [pc, #100]	; (8006a50 <HAL_DMA_IRQHandler+0xca4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00e      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a17      	ldr	r2, [pc, #92]	; (8006a54 <HAL_DMA_IRQHandler+0xca8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d009      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a16      	ldr	r2, [pc, #88]	; (8006a58 <HAL_DMA_IRQHandler+0xcac>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d004      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc62>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a14      	ldr	r2, [pc, #80]	; (8006a5c <HAL_DMA_IRQHandler+0xcb0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d128      	bne.n	8006a60 <HAL_DMA_IRQHandler+0xcb4>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0214 	bic.w	r2, r2, #20
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	e027      	b.n	8006a70 <HAL_DMA_IRQHandler+0xcc4>
 8006a20:	40020010 	.word	0x40020010
 8006a24:	40020028 	.word	0x40020028
 8006a28:	40020040 	.word	0x40020040
 8006a2c:	40020058 	.word	0x40020058
 8006a30:	40020070 	.word	0x40020070
 8006a34:	40020088 	.word	0x40020088
 8006a38:	400200a0 	.word	0x400200a0
 8006a3c:	400200b8 	.word	0x400200b8
 8006a40:	40020410 	.word	0x40020410
 8006a44:	40020428 	.word	0x40020428
 8006a48:	40020440 	.word	0x40020440
 8006a4c:	40020458 	.word	0x40020458
 8006a50:	40020470 	.word	0x40020470
 8006a54:	40020488 	.word	0x40020488
 8006a58:	400204a0 	.word	0x400204a0
 8006a5c:	400204b8 	.word	0x400204b8
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 020a 	bic.w	r2, r2, #10
 8006a6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8097 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a92:	e091      	b.n	8006bb8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a98:	f003 031f 	and.w	r3, r3, #31
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	409a      	lsls	r2, r3
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8088 	beq.w	8006bba <HAL_DMA_IRQHandler+0xe0e>
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8082 	beq.w	8006bba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a41      	ldr	r2, [pc, #260]	; (8006bc0 <HAL_DMA_IRQHandler+0xe14>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d04a      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a3f      	ldr	r2, [pc, #252]	; (8006bc4 <HAL_DMA_IRQHandler+0xe18>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d045      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a3e      	ldr	r2, [pc, #248]	; (8006bc8 <HAL_DMA_IRQHandler+0xe1c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d040      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a3c      	ldr	r2, [pc, #240]	; (8006bcc <HAL_DMA_IRQHandler+0xe20>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d03b      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a3b      	ldr	r2, [pc, #236]	; (8006bd0 <HAL_DMA_IRQHandler+0xe24>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d036      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a39      	ldr	r2, [pc, #228]	; (8006bd4 <HAL_DMA_IRQHandler+0xe28>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d031      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a38      	ldr	r2, [pc, #224]	; (8006bd8 <HAL_DMA_IRQHandler+0xe2c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d02c      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a36      	ldr	r2, [pc, #216]	; (8006bdc <HAL_DMA_IRQHandler+0xe30>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d027      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a35      	ldr	r2, [pc, #212]	; (8006be0 <HAL_DMA_IRQHandler+0xe34>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d022      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a33      	ldr	r2, [pc, #204]	; (8006be4 <HAL_DMA_IRQHandler+0xe38>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d01d      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a32      	ldr	r2, [pc, #200]	; (8006be8 <HAL_DMA_IRQHandler+0xe3c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d018      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a30      	ldr	r2, [pc, #192]	; (8006bec <HAL_DMA_IRQHandler+0xe40>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d013      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a2f      	ldr	r2, [pc, #188]	; (8006bf0 <HAL_DMA_IRQHandler+0xe44>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00e      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a2d      	ldr	r2, [pc, #180]	; (8006bf4 <HAL_DMA_IRQHandler+0xe48>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d009      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2c      	ldr	r2, [pc, #176]	; (8006bf8 <HAL_DMA_IRQHandler+0xe4c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d004      	beq.n	8006b56 <HAL_DMA_IRQHandler+0xdaa>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a2a      	ldr	r2, [pc, #168]	; (8006bfc <HAL_DMA_IRQHandler+0xe50>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d108      	bne.n	8006b68 <HAL_DMA_IRQHandler+0xdbc>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 021c 	bic.w	r2, r2, #28
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	e007      	b.n	8006b78 <HAL_DMA_IRQHandler+0xdcc>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 020e 	bic.w	r2, r2, #14
 8006b76:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b7c:	f003 031f 	and.w	r3, r3, #31
 8006b80:	2201      	movs	r2, #1
 8006b82:	409a      	lsls	r2, r3
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
 8006bae:	e004      	b.n	8006bba <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006bb0:	bf00      	nop
 8006bb2:	e002      	b.n	8006bba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb4:	bf00      	nop
 8006bb6:	e000      	b.n	8006bba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006bba:	3728      	adds	r7, #40	; 0x28
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40020010 	.word	0x40020010
 8006bc4:	40020028 	.word	0x40020028
 8006bc8:	40020040 	.word	0x40020040
 8006bcc:	40020058 	.word	0x40020058
 8006bd0:	40020070 	.word	0x40020070
 8006bd4:	40020088 	.word	0x40020088
 8006bd8:	400200a0 	.word	0x400200a0
 8006bdc:	400200b8 	.word	0x400200b8
 8006be0:	40020410 	.word	0x40020410
 8006be4:	40020428 	.word	0x40020428
 8006be8:	40020440 	.word	0x40020440
 8006bec:	40020458 	.word	0x40020458
 8006bf0:	40020470 	.word	0x40020470
 8006bf4:	40020488 	.word	0x40020488
 8006bf8:	400204a0 	.word	0x400204a0
 8006bfc:	400204b8 	.word	0x400204b8

08006c00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c12:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c18:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a7f      	ldr	r2, [pc, #508]	; (8006e1c <DMA_SetConfig+0x21c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d072      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a7d      	ldr	r2, [pc, #500]	; (8006e20 <DMA_SetConfig+0x220>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d06d      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a7c      	ldr	r2, [pc, #496]	; (8006e24 <DMA_SetConfig+0x224>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d068      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a7a      	ldr	r2, [pc, #488]	; (8006e28 <DMA_SetConfig+0x228>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d063      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a79      	ldr	r2, [pc, #484]	; (8006e2c <DMA_SetConfig+0x22c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d05e      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a77      	ldr	r2, [pc, #476]	; (8006e30 <DMA_SetConfig+0x230>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d059      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a76      	ldr	r2, [pc, #472]	; (8006e34 <DMA_SetConfig+0x234>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d054      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a74      	ldr	r2, [pc, #464]	; (8006e38 <DMA_SetConfig+0x238>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d04f      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a73      	ldr	r2, [pc, #460]	; (8006e3c <DMA_SetConfig+0x23c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d04a      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a71      	ldr	r2, [pc, #452]	; (8006e40 <DMA_SetConfig+0x240>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d045      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a70      	ldr	r2, [pc, #448]	; (8006e44 <DMA_SetConfig+0x244>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d040      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a6e      	ldr	r2, [pc, #440]	; (8006e48 <DMA_SetConfig+0x248>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d03b      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a6d      	ldr	r2, [pc, #436]	; (8006e4c <DMA_SetConfig+0x24c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d036      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a6b      	ldr	r2, [pc, #428]	; (8006e50 <DMA_SetConfig+0x250>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d031      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a6a      	ldr	r2, [pc, #424]	; (8006e54 <DMA_SetConfig+0x254>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d02c      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a68      	ldr	r2, [pc, #416]	; (8006e58 <DMA_SetConfig+0x258>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d027      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a67      	ldr	r2, [pc, #412]	; (8006e5c <DMA_SetConfig+0x25c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d022      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a65      	ldr	r2, [pc, #404]	; (8006e60 <DMA_SetConfig+0x260>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01d      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a64      	ldr	r2, [pc, #400]	; (8006e64 <DMA_SetConfig+0x264>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d018      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a62      	ldr	r2, [pc, #392]	; (8006e68 <DMA_SetConfig+0x268>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a61      	ldr	r2, [pc, #388]	; (8006e6c <DMA_SetConfig+0x26c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00e      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a5f      	ldr	r2, [pc, #380]	; (8006e70 <DMA_SetConfig+0x270>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a5e      	ldr	r2, [pc, #376]	; (8006e74 <DMA_SetConfig+0x274>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d004      	beq.n	8006d0a <DMA_SetConfig+0x10a>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a5c      	ldr	r2, [pc, #368]	; (8006e78 <DMA_SetConfig+0x278>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d101      	bne.n	8006d0e <DMA_SetConfig+0x10e>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <DMA_SetConfig+0x110>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00d      	beq.n	8006d30 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d1c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d004      	beq.n	8006d30 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d2e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a39      	ldr	r2, [pc, #228]	; (8006e1c <DMA_SetConfig+0x21c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d04a      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a38      	ldr	r2, [pc, #224]	; (8006e20 <DMA_SetConfig+0x220>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d045      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a36      	ldr	r2, [pc, #216]	; (8006e24 <DMA_SetConfig+0x224>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d040      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a35      	ldr	r2, [pc, #212]	; (8006e28 <DMA_SetConfig+0x228>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d03b      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a33      	ldr	r2, [pc, #204]	; (8006e2c <DMA_SetConfig+0x22c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d036      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a32      	ldr	r2, [pc, #200]	; (8006e30 <DMA_SetConfig+0x230>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d031      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a30      	ldr	r2, [pc, #192]	; (8006e34 <DMA_SetConfig+0x234>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d02c      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a2f      	ldr	r2, [pc, #188]	; (8006e38 <DMA_SetConfig+0x238>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d027      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a2d      	ldr	r2, [pc, #180]	; (8006e3c <DMA_SetConfig+0x23c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d022      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a2c      	ldr	r2, [pc, #176]	; (8006e40 <DMA_SetConfig+0x240>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d01d      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a2a      	ldr	r2, [pc, #168]	; (8006e44 <DMA_SetConfig+0x244>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d018      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a29      	ldr	r2, [pc, #164]	; (8006e48 <DMA_SetConfig+0x248>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d013      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a27      	ldr	r2, [pc, #156]	; (8006e4c <DMA_SetConfig+0x24c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00e      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a26      	ldr	r2, [pc, #152]	; (8006e50 <DMA_SetConfig+0x250>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d009      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a24      	ldr	r2, [pc, #144]	; (8006e54 <DMA_SetConfig+0x254>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d004      	beq.n	8006dd0 <DMA_SetConfig+0x1d0>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a23      	ldr	r2, [pc, #140]	; (8006e58 <DMA_SetConfig+0x258>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d101      	bne.n	8006dd4 <DMA_SetConfig+0x1d4>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e000      	b.n	8006dd6 <DMA_SetConfig+0x1d6>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d059      	beq.n	8006e8e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dde:	f003 031f 	and.w	r3, r3, #31
 8006de2:	223f      	movs	r2, #63	; 0x3f
 8006de4:	409a      	lsls	r2, r3
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006df8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b40      	cmp	r3, #64	; 0x40
 8006e08:	d138      	bne.n	8006e7c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e1a:	e086      	b.n	8006f2a <DMA_SetConfig+0x32a>
 8006e1c:	40020010 	.word	0x40020010
 8006e20:	40020028 	.word	0x40020028
 8006e24:	40020040 	.word	0x40020040
 8006e28:	40020058 	.word	0x40020058
 8006e2c:	40020070 	.word	0x40020070
 8006e30:	40020088 	.word	0x40020088
 8006e34:	400200a0 	.word	0x400200a0
 8006e38:	400200b8 	.word	0x400200b8
 8006e3c:	40020410 	.word	0x40020410
 8006e40:	40020428 	.word	0x40020428
 8006e44:	40020440 	.word	0x40020440
 8006e48:	40020458 	.word	0x40020458
 8006e4c:	40020470 	.word	0x40020470
 8006e50:	40020488 	.word	0x40020488
 8006e54:	400204a0 	.word	0x400204a0
 8006e58:	400204b8 	.word	0x400204b8
 8006e5c:	58025408 	.word	0x58025408
 8006e60:	5802541c 	.word	0x5802541c
 8006e64:	58025430 	.word	0x58025430
 8006e68:	58025444 	.word	0x58025444
 8006e6c:	58025458 	.word	0x58025458
 8006e70:	5802546c 	.word	0x5802546c
 8006e74:	58025480 	.word	0x58025480
 8006e78:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	60da      	str	r2, [r3, #12]
}
 8006e8c:	e04d      	b.n	8006f2a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a29      	ldr	r2, [pc, #164]	; (8006f38 <DMA_SetConfig+0x338>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d022      	beq.n	8006ede <DMA_SetConfig+0x2de>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a27      	ldr	r2, [pc, #156]	; (8006f3c <DMA_SetConfig+0x33c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d01d      	beq.n	8006ede <DMA_SetConfig+0x2de>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a26      	ldr	r2, [pc, #152]	; (8006f40 <DMA_SetConfig+0x340>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d018      	beq.n	8006ede <DMA_SetConfig+0x2de>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a24      	ldr	r2, [pc, #144]	; (8006f44 <DMA_SetConfig+0x344>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d013      	beq.n	8006ede <DMA_SetConfig+0x2de>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a23      	ldr	r2, [pc, #140]	; (8006f48 <DMA_SetConfig+0x348>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00e      	beq.n	8006ede <DMA_SetConfig+0x2de>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a21      	ldr	r2, [pc, #132]	; (8006f4c <DMA_SetConfig+0x34c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d009      	beq.n	8006ede <DMA_SetConfig+0x2de>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a20      	ldr	r2, [pc, #128]	; (8006f50 <DMA_SetConfig+0x350>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d004      	beq.n	8006ede <DMA_SetConfig+0x2de>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1e      	ldr	r2, [pc, #120]	; (8006f54 <DMA_SetConfig+0x354>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d101      	bne.n	8006ee2 <DMA_SetConfig+0x2e2>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e000      	b.n	8006ee4 <DMA_SetConfig+0x2e4>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d020      	beq.n	8006f2a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	409a      	lsls	r2, r3
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	2b40      	cmp	r3, #64	; 0x40
 8006f06:	d108      	bne.n	8006f1a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	60da      	str	r2, [r3, #12]
}
 8006f18:	e007      	b.n	8006f2a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	60da      	str	r2, [r3, #12]
}
 8006f2a:	bf00      	nop
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	58025408 	.word	0x58025408
 8006f3c:	5802541c 	.word	0x5802541c
 8006f40:	58025430 	.word	0x58025430
 8006f44:	58025444 	.word	0x58025444
 8006f48:	58025458 	.word	0x58025458
 8006f4c:	5802546c 	.word	0x5802546c
 8006f50:	58025480 	.word	0x58025480
 8006f54:	58025494 	.word	0x58025494

08006f58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a42      	ldr	r2, [pc, #264]	; (8007070 <DMA_CalcBaseAndBitshift+0x118>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d04a      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a41      	ldr	r2, [pc, #260]	; (8007074 <DMA_CalcBaseAndBitshift+0x11c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d045      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a3f      	ldr	r2, [pc, #252]	; (8007078 <DMA_CalcBaseAndBitshift+0x120>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d040      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a3e      	ldr	r2, [pc, #248]	; (800707c <DMA_CalcBaseAndBitshift+0x124>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d03b      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a3c      	ldr	r2, [pc, #240]	; (8007080 <DMA_CalcBaseAndBitshift+0x128>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d036      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a3b      	ldr	r2, [pc, #236]	; (8007084 <DMA_CalcBaseAndBitshift+0x12c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d031      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a39      	ldr	r2, [pc, #228]	; (8007088 <DMA_CalcBaseAndBitshift+0x130>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d02c      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a38      	ldr	r2, [pc, #224]	; (800708c <DMA_CalcBaseAndBitshift+0x134>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d027      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a36      	ldr	r2, [pc, #216]	; (8007090 <DMA_CalcBaseAndBitshift+0x138>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d022      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a35      	ldr	r2, [pc, #212]	; (8007094 <DMA_CalcBaseAndBitshift+0x13c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d01d      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a33      	ldr	r2, [pc, #204]	; (8007098 <DMA_CalcBaseAndBitshift+0x140>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d018      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a32      	ldr	r2, [pc, #200]	; (800709c <DMA_CalcBaseAndBitshift+0x144>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d013      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a30      	ldr	r2, [pc, #192]	; (80070a0 <DMA_CalcBaseAndBitshift+0x148>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00e      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a2f      	ldr	r2, [pc, #188]	; (80070a4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d009      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a2d      	ldr	r2, [pc, #180]	; (80070a8 <DMA_CalcBaseAndBitshift+0x150>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d004      	beq.n	8007000 <DMA_CalcBaseAndBitshift+0xa8>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a2c      	ldr	r2, [pc, #176]	; (80070ac <DMA_CalcBaseAndBitshift+0x154>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d101      	bne.n	8007004 <DMA_CalcBaseAndBitshift+0xac>
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <DMA_CalcBaseAndBitshift+0xae>
 8007004:	2300      	movs	r3, #0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d024      	beq.n	8007054 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	3b10      	subs	r3, #16
 8007012:	4a27      	ldr	r2, [pc, #156]	; (80070b0 <DMA_CalcBaseAndBitshift+0x158>)
 8007014:	fba2 2303 	umull	r2, r3, r2, r3
 8007018:	091b      	lsrs	r3, r3, #4
 800701a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	4a24      	ldr	r2, [pc, #144]	; (80070b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007024:	5cd3      	ldrb	r3, [r2, r3]
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b03      	cmp	r3, #3
 8007030:	d908      	bls.n	8007044 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	4b1f      	ldr	r3, [pc, #124]	; (80070b8 <DMA_CalcBaseAndBitshift+0x160>)
 800703a:	4013      	ands	r3, r2
 800703c:	1d1a      	adds	r2, r3, #4
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	659a      	str	r2, [r3, #88]	; 0x58
 8007042:	e00d      	b.n	8007060 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	4b1b      	ldr	r3, [pc, #108]	; (80070b8 <DMA_CalcBaseAndBitshift+0x160>)
 800704c:	4013      	ands	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	6593      	str	r3, [r2, #88]	; 0x58
 8007052:	e005      	b.n	8007060 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	40020010 	.word	0x40020010
 8007074:	40020028 	.word	0x40020028
 8007078:	40020040 	.word	0x40020040
 800707c:	40020058 	.word	0x40020058
 8007080:	40020070 	.word	0x40020070
 8007084:	40020088 	.word	0x40020088
 8007088:	400200a0 	.word	0x400200a0
 800708c:	400200b8 	.word	0x400200b8
 8007090:	40020410 	.word	0x40020410
 8007094:	40020428 	.word	0x40020428
 8007098:	40020440 	.word	0x40020440
 800709c:	40020458 	.word	0x40020458
 80070a0:	40020470 	.word	0x40020470
 80070a4:	40020488 	.word	0x40020488
 80070a8:	400204a0 	.word	0x400204a0
 80070ac:	400204b8 	.word	0x400204b8
 80070b0:	aaaaaaab 	.word	0xaaaaaaab
 80070b4:	0800fe94 	.word	0x0800fe94
 80070b8:	fffffc00 	.word	0xfffffc00

080070bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d120      	bne.n	8007112 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d858      	bhi.n	800718a <DMA_CheckFifoParam+0xce>
 80070d8:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <DMA_CheckFifoParam+0x24>)
 80070da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070de:	bf00      	nop
 80070e0:	080070f1 	.word	0x080070f1
 80070e4:	08007103 	.word	0x08007103
 80070e8:	080070f1 	.word	0x080070f1
 80070ec:	0800718b 	.word	0x0800718b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d048      	beq.n	800718e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007100:	e045      	b.n	800718e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800710a:	d142      	bne.n	8007192 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007110:	e03f      	b.n	8007192 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800711a:	d123      	bne.n	8007164 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	2b03      	cmp	r3, #3
 8007122:	d838      	bhi.n	8007196 <DMA_CheckFifoParam+0xda>
 8007124:	a201      	add	r2, pc, #4	; (adr r2, 800712c <DMA_CheckFifoParam+0x70>)
 8007126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712a:	bf00      	nop
 800712c:	0800713d 	.word	0x0800713d
 8007130:	08007143 	.word	0x08007143
 8007134:	0800713d 	.word	0x0800713d
 8007138:	08007155 	.word	0x08007155
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	73fb      	strb	r3, [r7, #15]
        break;
 8007140:	e030      	b.n	80071a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d025      	beq.n	800719a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007152:	e022      	b.n	800719a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800715c:	d11f      	bne.n	800719e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007162:	e01c      	b.n	800719e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	2b02      	cmp	r3, #2
 800716a:	d902      	bls.n	8007172 <DMA_CheckFifoParam+0xb6>
 800716c:	2b03      	cmp	r3, #3
 800716e:	d003      	beq.n	8007178 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007170:	e018      	b.n	80071a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	73fb      	strb	r3, [r7, #15]
        break;
 8007176:	e015      	b.n	80071a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00e      	beq.n	80071a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	73fb      	strb	r3, [r7, #15]
    break;
 8007188:	e00b      	b.n	80071a2 <DMA_CheckFifoParam+0xe6>
        break;
 800718a:	bf00      	nop
 800718c:	e00a      	b.n	80071a4 <DMA_CheckFifoParam+0xe8>
        break;
 800718e:	bf00      	nop
 8007190:	e008      	b.n	80071a4 <DMA_CheckFifoParam+0xe8>
        break;
 8007192:	bf00      	nop
 8007194:	e006      	b.n	80071a4 <DMA_CheckFifoParam+0xe8>
        break;
 8007196:	bf00      	nop
 8007198:	e004      	b.n	80071a4 <DMA_CheckFifoParam+0xe8>
        break;
 800719a:	bf00      	nop
 800719c:	e002      	b.n	80071a4 <DMA_CheckFifoParam+0xe8>
        break;
 800719e:	bf00      	nop
 80071a0:	e000      	b.n	80071a4 <DMA_CheckFifoParam+0xe8>
    break;
 80071a2:	bf00      	nop
    }
  }

  return status;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop

080071b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a38      	ldr	r2, [pc, #224]	; (80072a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d022      	beq.n	8007212 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a36      	ldr	r2, [pc, #216]	; (80072ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d01d      	beq.n	8007212 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a35      	ldr	r2, [pc, #212]	; (80072b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d018      	beq.n	8007212 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a33      	ldr	r2, [pc, #204]	; (80072b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a32      	ldr	r2, [pc, #200]	; (80072b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00e      	beq.n	8007212 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a30      	ldr	r2, [pc, #192]	; (80072bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d009      	beq.n	8007212 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a2f      	ldr	r2, [pc, #188]	; (80072c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d004      	beq.n	8007212 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a2d      	ldr	r2, [pc, #180]	; (80072c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d101      	bne.n	8007216 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007212:	2301      	movs	r3, #1
 8007214:	e000      	b.n	8007218 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007216:	2300      	movs	r3, #0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01a      	beq.n	8007252 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	3b08      	subs	r3, #8
 8007224:	4a28      	ldr	r2, [pc, #160]	; (80072c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007226:	fba2 2303 	umull	r2, r3, r2, r3
 800722a:	091b      	lsrs	r3, r3, #4
 800722c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	4b26      	ldr	r3, [pc, #152]	; (80072cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007232:	4413      	add	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	461a      	mov	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a24      	ldr	r2, [pc, #144]	; (80072d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007240:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f003 031f 	and.w	r3, r3, #31
 8007248:	2201      	movs	r2, #1
 800724a:	409a      	lsls	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007250:	e024      	b.n	800729c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	3b10      	subs	r3, #16
 800725a:	4a1e      	ldr	r2, [pc, #120]	; (80072d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800725c:	fba2 2303 	umull	r2, r3, r2, r3
 8007260:	091b      	lsrs	r3, r3, #4
 8007262:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	4a1c      	ldr	r2, [pc, #112]	; (80072d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d806      	bhi.n	800727a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	4a1b      	ldr	r2, [pc, #108]	; (80072dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d902      	bls.n	800727a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3308      	adds	r3, #8
 8007278:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	4b18      	ldr	r3, [pc, #96]	; (80072e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	461a      	mov	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a16      	ldr	r2, [pc, #88]	; (80072e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800728c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f003 031f 	and.w	r3, r3, #31
 8007294:	2201      	movs	r2, #1
 8007296:	409a      	lsls	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800729c:	bf00      	nop
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	58025408 	.word	0x58025408
 80072ac:	5802541c 	.word	0x5802541c
 80072b0:	58025430 	.word	0x58025430
 80072b4:	58025444 	.word	0x58025444
 80072b8:	58025458 	.word	0x58025458
 80072bc:	5802546c 	.word	0x5802546c
 80072c0:	58025480 	.word	0x58025480
 80072c4:	58025494 	.word	0x58025494
 80072c8:	cccccccd 	.word	0xcccccccd
 80072cc:	16009600 	.word	0x16009600
 80072d0:	58025880 	.word	0x58025880
 80072d4:	aaaaaaab 	.word	0xaaaaaaab
 80072d8:	400204b8 	.word	0x400204b8
 80072dc:	4002040f 	.word	0x4002040f
 80072e0:	10008200 	.word	0x10008200
 80072e4:	40020880 	.word	0x40020880

080072e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d04a      	beq.n	8007394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b08      	cmp	r3, #8
 8007302:	d847      	bhi.n	8007394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a25      	ldr	r2, [pc, #148]	; (80073a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d022      	beq.n	8007354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a24      	ldr	r2, [pc, #144]	; (80073a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d01d      	beq.n	8007354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a22      	ldr	r2, [pc, #136]	; (80073a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d018      	beq.n	8007354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a21      	ldr	r2, [pc, #132]	; (80073ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d013      	beq.n	8007354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1f      	ldr	r2, [pc, #124]	; (80073b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00e      	beq.n	8007354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1e      	ldr	r2, [pc, #120]	; (80073b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d009      	beq.n	8007354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a1c      	ldr	r2, [pc, #112]	; (80073b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d004      	beq.n	8007354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a1b      	ldr	r2, [pc, #108]	; (80073bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d101      	bne.n	8007358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007354:	2301      	movs	r3, #1
 8007356:	e000      	b.n	800735a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007358:	2300      	movs	r3, #0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4b17      	ldr	r3, [pc, #92]	; (80073c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	461a      	mov	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a15      	ldr	r2, [pc, #84]	; (80073c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007370:	671a      	str	r2, [r3, #112]	; 0x70
 8007372:	e009      	b.n	8007388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4b14      	ldr	r3, [pc, #80]	; (80073c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007378:	4413      	add	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	461a      	mov	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a11      	ldr	r2, [pc, #68]	; (80073cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007386:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3b01      	subs	r3, #1
 800738c:	2201      	movs	r2, #1
 800738e:	409a      	lsls	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007394:	bf00      	nop
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	58025408 	.word	0x58025408
 80073a4:	5802541c 	.word	0x5802541c
 80073a8:	58025430 	.word	0x58025430
 80073ac:	58025444 	.word	0x58025444
 80073b0:	58025458 	.word	0x58025458
 80073b4:	5802546c 	.word	0x5802546c
 80073b8:	58025480 	.word	0x58025480
 80073bc:	58025494 	.word	0x58025494
 80073c0:	1600963f 	.word	0x1600963f
 80073c4:	58025940 	.word	0x58025940
 80073c8:	1000823f 	.word	0x1000823f
 80073cc:	40020940 	.word	0x40020940

080073d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b089      	sub	sp, #36	; 0x24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80073da:	2300      	movs	r3, #0
 80073dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80073de:	4b89      	ldr	r3, [pc, #548]	; (8007604 <HAL_GPIO_Init+0x234>)
 80073e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073e2:	e194      	b.n	800770e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	2101      	movs	r1, #1
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	fa01 f303 	lsl.w	r3, r1, r3
 80073f0:	4013      	ands	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 8186 	beq.w	8007708 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f003 0303 	and.w	r3, r3, #3
 8007404:	2b01      	cmp	r3, #1
 8007406:	d005      	beq.n	8007414 <HAL_GPIO_Init+0x44>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f003 0303 	and.w	r3, r3, #3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d130      	bne.n	8007476 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	2203      	movs	r2, #3
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	43db      	mvns	r3, r3
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	4013      	ands	r3, r2
 800742a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	fa02 f303 	lsl.w	r3, r2, r3
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	4313      	orrs	r3, r2
 800743c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800744a:	2201      	movs	r2, #1
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	fa02 f303 	lsl.w	r3, r2, r3
 8007452:	43db      	mvns	r3, r3
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	4013      	ands	r3, r2
 8007458:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	091b      	lsrs	r3, r3, #4
 8007460:	f003 0201 	and.w	r2, r3, #1
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	fa02 f303 	lsl.w	r3, r2, r3
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	4313      	orrs	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f003 0303 	and.w	r3, r3, #3
 800747e:	2b03      	cmp	r3, #3
 8007480:	d017      	beq.n	80074b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	2203      	movs	r2, #3
 800748e:	fa02 f303 	lsl.w	r3, r2, r3
 8007492:	43db      	mvns	r3, r3
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	4013      	ands	r3, r2
 8007498:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	fa02 f303 	lsl.w	r3, r2, r3
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d123      	bne.n	8007506 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	08da      	lsrs	r2, r3, #3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3208      	adds	r2, #8
 80074c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	220f      	movs	r2, #15
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	43db      	mvns	r3, r3
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	4013      	ands	r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	691a      	ldr	r2, [r3, #16]
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	fa02 f303 	lsl.w	r3, r2, r3
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	08da      	lsrs	r2, r3, #3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3208      	adds	r2, #8
 8007500:	69b9      	ldr	r1, [r7, #24]
 8007502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	2203      	movs	r2, #3
 8007512:	fa02 f303 	lsl.w	r3, r2, r3
 8007516:	43db      	mvns	r3, r3
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	4013      	ands	r3, r2
 800751c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f003 0203 	and.w	r2, r3, #3
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	fa02 f303 	lsl.w	r3, r2, r3
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	4313      	orrs	r3, r2
 8007532:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 80e0 	beq.w	8007708 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007548:	4b2f      	ldr	r3, [pc, #188]	; (8007608 <HAL_GPIO_Init+0x238>)
 800754a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800754e:	4a2e      	ldr	r2, [pc, #184]	; (8007608 <HAL_GPIO_Init+0x238>)
 8007550:	f043 0302 	orr.w	r3, r3, #2
 8007554:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007558:	4b2b      	ldr	r3, [pc, #172]	; (8007608 <HAL_GPIO_Init+0x238>)
 800755a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007566:	4a29      	ldr	r2, [pc, #164]	; (800760c <HAL_GPIO_Init+0x23c>)
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	089b      	lsrs	r3, r3, #2
 800756c:	3302      	adds	r3, #2
 800756e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	220f      	movs	r2, #15
 800757e:	fa02 f303 	lsl.w	r3, r2, r3
 8007582:	43db      	mvns	r3, r3
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	4013      	ands	r3, r2
 8007588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a20      	ldr	r2, [pc, #128]	; (8007610 <HAL_GPIO_Init+0x240>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d052      	beq.n	8007638 <HAL_GPIO_Init+0x268>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a1f      	ldr	r2, [pc, #124]	; (8007614 <HAL_GPIO_Init+0x244>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d031      	beq.n	80075fe <HAL_GPIO_Init+0x22e>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a1e      	ldr	r2, [pc, #120]	; (8007618 <HAL_GPIO_Init+0x248>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d02b      	beq.n	80075fa <HAL_GPIO_Init+0x22a>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a1d      	ldr	r2, [pc, #116]	; (800761c <HAL_GPIO_Init+0x24c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d025      	beq.n	80075f6 <HAL_GPIO_Init+0x226>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a1c      	ldr	r2, [pc, #112]	; (8007620 <HAL_GPIO_Init+0x250>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d01f      	beq.n	80075f2 <HAL_GPIO_Init+0x222>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a1b      	ldr	r2, [pc, #108]	; (8007624 <HAL_GPIO_Init+0x254>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d019      	beq.n	80075ee <HAL_GPIO_Init+0x21e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a1a      	ldr	r2, [pc, #104]	; (8007628 <HAL_GPIO_Init+0x258>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d013      	beq.n	80075ea <HAL_GPIO_Init+0x21a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a19      	ldr	r2, [pc, #100]	; (800762c <HAL_GPIO_Init+0x25c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00d      	beq.n	80075e6 <HAL_GPIO_Init+0x216>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a18      	ldr	r2, [pc, #96]	; (8007630 <HAL_GPIO_Init+0x260>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d007      	beq.n	80075e2 <HAL_GPIO_Init+0x212>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a17      	ldr	r2, [pc, #92]	; (8007634 <HAL_GPIO_Init+0x264>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d101      	bne.n	80075de <HAL_GPIO_Init+0x20e>
 80075da:	2309      	movs	r3, #9
 80075dc:	e02d      	b.n	800763a <HAL_GPIO_Init+0x26a>
 80075de:	230a      	movs	r3, #10
 80075e0:	e02b      	b.n	800763a <HAL_GPIO_Init+0x26a>
 80075e2:	2308      	movs	r3, #8
 80075e4:	e029      	b.n	800763a <HAL_GPIO_Init+0x26a>
 80075e6:	2307      	movs	r3, #7
 80075e8:	e027      	b.n	800763a <HAL_GPIO_Init+0x26a>
 80075ea:	2306      	movs	r3, #6
 80075ec:	e025      	b.n	800763a <HAL_GPIO_Init+0x26a>
 80075ee:	2305      	movs	r3, #5
 80075f0:	e023      	b.n	800763a <HAL_GPIO_Init+0x26a>
 80075f2:	2304      	movs	r3, #4
 80075f4:	e021      	b.n	800763a <HAL_GPIO_Init+0x26a>
 80075f6:	2303      	movs	r3, #3
 80075f8:	e01f      	b.n	800763a <HAL_GPIO_Init+0x26a>
 80075fa:	2302      	movs	r3, #2
 80075fc:	e01d      	b.n	800763a <HAL_GPIO_Init+0x26a>
 80075fe:	2301      	movs	r3, #1
 8007600:	e01b      	b.n	800763a <HAL_GPIO_Init+0x26a>
 8007602:	bf00      	nop
 8007604:	58000080 	.word	0x58000080
 8007608:	58024400 	.word	0x58024400
 800760c:	58000400 	.word	0x58000400
 8007610:	58020000 	.word	0x58020000
 8007614:	58020400 	.word	0x58020400
 8007618:	58020800 	.word	0x58020800
 800761c:	58020c00 	.word	0x58020c00
 8007620:	58021000 	.word	0x58021000
 8007624:	58021400 	.word	0x58021400
 8007628:	58021800 	.word	0x58021800
 800762c:	58021c00 	.word	0x58021c00
 8007630:	58022000 	.word	0x58022000
 8007634:	58022400 	.word	0x58022400
 8007638:	2300      	movs	r3, #0
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	f002 0203 	and.w	r2, r2, #3
 8007640:	0092      	lsls	r2, r2, #2
 8007642:	4093      	lsls	r3, r2
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	4313      	orrs	r3, r2
 8007648:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800764a:	4938      	ldr	r1, [pc, #224]	; (800772c <HAL_GPIO_Init+0x35c>)
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	089b      	lsrs	r3, r3, #2
 8007650:	3302      	adds	r3, #2
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	43db      	mvns	r3, r3
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	4013      	ands	r3, r2
 8007668:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	4313      	orrs	r3, r2
 800767c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800767e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	43db      	mvns	r3, r3
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	4013      	ands	r3, r2
 8007696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80076ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	43db      	mvns	r3, r3
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	4013      	ands	r3, r2
 80076c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	43db      	mvns	r3, r3
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	4013      	ands	r3, r2
 80076ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	4313      	orrs	r3, r2
 8007700:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	3301      	adds	r3, #1
 800770c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	fa22 f303 	lsr.w	r3, r2, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	f47f ae63 	bne.w	80073e4 <HAL_GPIO_Init+0x14>
  }
}
 800771e:	bf00      	nop
 8007720:	bf00      	nop
 8007722:	3724      	adds	r7, #36	; 0x24
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	58000400 	.word	0x58000400

08007730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	691a      	ldr	r2, [r3, #16]
 8007740:	887b      	ldrh	r3, [r7, #2]
 8007742:	4013      	ands	r3, r2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007748:	2301      	movs	r3, #1
 800774a:	73fb      	strb	r3, [r7, #15]
 800774c:	e001      	b.n	8007752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007752:	7bfb      	ldrb	r3, [r7, #15]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	807b      	strh	r3, [r7, #2]
 800776c:	4613      	mov	r3, r2
 800776e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007770:	787b      	ldrb	r3, [r7, #1]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007776:	887a      	ldrh	r2, [r7, #2]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800777c:	e003      	b.n	8007786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800777e:	887b      	ldrh	r3, [r7, #2]
 8007780:	041a      	lsls	r2, r3, #16
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	619a      	str	r2, [r3, #24]
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
	...

08007794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e07f      	b.n	80078a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d106      	bne.n	80077c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7fa fc68 	bl	8002090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2224      	movs	r2, #36	; 0x24
 80077c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0201 	bic.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d107      	bne.n	800780e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800780a:	609a      	str	r2, [r3, #8]
 800780c:	e006      	b.n	800781c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800781a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d104      	bne.n	800782e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800782c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6859      	ldr	r1, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	4b1d      	ldr	r3, [pc, #116]	; (80078b0 <HAL_I2C_Init+0x11c>)
 800783a:	430b      	orrs	r3, r1
 800783c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68da      	ldr	r2, [r3, #12]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800784c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691a      	ldr	r2, [r3, #16]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	430a      	orrs	r2, r1
 8007866:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	69d9      	ldr	r1, [r3, #28]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a1a      	ldr	r2, [r3, #32]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f042 0201 	orr.w	r2, r2, #1
 8007886:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	02008000 	.word	0x02008000

080078b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	607a      	str	r2, [r7, #4]
 80078be:	461a      	mov	r2, r3
 80078c0:	460b      	mov	r3, r1
 80078c2:	817b      	strh	r3, [r7, #10]
 80078c4:	4613      	mov	r3, r2
 80078c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	f040 80da 	bne.w	8007a8a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_I2C_Master_Transmit+0x30>
 80078e0:	2302      	movs	r3, #2
 80078e2:	e0d3      	b.n	8007a8c <HAL_I2C_Master_Transmit+0x1d8>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078ec:	f7fa fffe 	bl	80028ec <HAL_GetTick>
 80078f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	2319      	movs	r3, #25
 80078f8:	2201      	movs	r2, #1
 80078fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 f9e6 	bl	8007cd0 <I2C_WaitOnFlagUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e0be      	b.n	8007a8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2221      	movs	r2, #33	; 0x21
 8007912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2210      	movs	r2, #16
 800791a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	893a      	ldrh	r2, [r7, #8]
 800792e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793a:	b29b      	uxth	r3, r3
 800793c:	2bff      	cmp	r3, #255	; 0xff
 800793e:	d90e      	bls.n	800795e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	22ff      	movs	r2, #255	; 0xff
 8007944:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800794a:	b2da      	uxtb	r2, r3
 800794c:	8979      	ldrh	r1, [r7, #10]
 800794e:	4b51      	ldr	r3, [pc, #324]	; (8007a94 <HAL_I2C_Master_Transmit+0x1e0>)
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fbdc 	bl	8008114 <I2C_TransferConfig>
 800795c:	e06c      	b.n	8007a38 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007962:	b29a      	uxth	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800796c:	b2da      	uxtb	r2, r3
 800796e:	8979      	ldrh	r1, [r7, #10]
 8007970:	4b48      	ldr	r3, [pc, #288]	; (8007a94 <HAL_I2C_Master_Transmit+0x1e0>)
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 fbcb 	bl	8008114 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800797e:	e05b      	b.n	8007a38 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	6a39      	ldr	r1, [r7, #32]
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f9e3 	bl	8007d50 <I2C_WaitOnTXISFlagUntilTimeout>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e07b      	b.n	8007a8c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	781a      	ldrb	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	3b01      	subs	r3, #1
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d034      	beq.n	8007a38 <HAL_I2C_Master_Transmit+0x184>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d130      	bne.n	8007a38 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	2200      	movs	r2, #0
 80079de:	2180      	movs	r1, #128	; 0x80
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 f975 	bl	8007cd0 <I2C_WaitOnFlagUntilTimeout>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e04d      	b.n	8007a8c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2bff      	cmp	r3, #255	; 0xff
 80079f8:	d90e      	bls.n	8007a18 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	22ff      	movs	r2, #255	; 0xff
 80079fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	8979      	ldrh	r1, [r7, #10]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 fb7f 	bl	8008114 <I2C_TransferConfig>
 8007a16:	e00f      	b.n	8007a38 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	8979      	ldrh	r1, [r7, #10]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 fb6e 	bl	8008114 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d19e      	bne.n	8007980 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	6a39      	ldr	r1, [r7, #32]
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f000 f9c2 	bl	8007dd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e01a      	b.n	8007a8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6859      	ldr	r1, [r3, #4]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4b0b      	ldr	r3, [pc, #44]	; (8007a98 <HAL_I2C_Master_Transmit+0x1e4>)
 8007a6a:	400b      	ands	r3, r1
 8007a6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2220      	movs	r2, #32
 8007a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	e000      	b.n	8007a8c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007a8a:	2302      	movs	r3, #2
  }
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	80002000 	.word	0x80002000
 8007a98:	fe00e800 	.word	0xfe00e800

08007a9c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af02      	add	r7, sp, #8
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	607a      	str	r2, [r7, #4]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	817b      	strh	r3, [r7, #10]
 8007aac:	4613      	mov	r3, r2
 8007aae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b20      	cmp	r3, #32
 8007aba:	f040 80db 	bne.w	8007c74 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d101      	bne.n	8007acc <HAL_I2C_Master_Receive+0x30>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e0d4      	b.n	8007c76 <HAL_I2C_Master_Receive+0x1da>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ad4:	f7fa ff0a 	bl	80028ec <HAL_GetTick>
 8007ad8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	2319      	movs	r3, #25
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 f8f2 	bl	8007cd0 <I2C_WaitOnFlagUntilTimeout>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e0bf      	b.n	8007c76 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2222      	movs	r2, #34	; 0x22
 8007afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2210      	movs	r2, #16
 8007b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	893a      	ldrh	r2, [r7, #8]
 8007b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	2bff      	cmp	r3, #255	; 0xff
 8007b26:	d90e      	bls.n	8007b46 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	22ff      	movs	r2, #255	; 0xff
 8007b2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	8979      	ldrh	r1, [r7, #10]
 8007b36:	4b52      	ldr	r3, [pc, #328]	; (8007c80 <HAL_I2C_Master_Receive+0x1e4>)
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 fae8 	bl	8008114 <I2C_TransferConfig>
 8007b44:	e06d      	b.n	8007c22 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	8979      	ldrh	r1, [r7, #10]
 8007b58:	4b49      	ldr	r3, [pc, #292]	; (8007c80 <HAL_I2C_Master_Receive+0x1e4>)
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fad7 	bl	8008114 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007b66:	e05c      	b.n	8007c22 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	6a39      	ldr	r1, [r7, #32]
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 f96b 	bl	8007e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e07c      	b.n	8007c76 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	b2d2      	uxtb	r2, r2
 8007b88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d034      	beq.n	8007c22 <HAL_I2C_Master_Receive+0x186>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d130      	bne.n	8007c22 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2180      	movs	r1, #128	; 0x80
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 f880 	bl	8007cd0 <I2C_WaitOnFlagUntilTimeout>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e04d      	b.n	8007c76 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	2bff      	cmp	r3, #255	; 0xff
 8007be2:	d90e      	bls.n	8007c02 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	22ff      	movs	r2, #255	; 0xff
 8007be8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	8979      	ldrh	r1, [r7, #10]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fa8a 	bl	8008114 <I2C_TransferConfig>
 8007c00:	e00f      	b.n	8007c22 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	8979      	ldrh	r1, [r7, #10]
 8007c14:	2300      	movs	r3, #0
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 fa79 	bl	8008114 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d19d      	bne.n	8007b68 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	6a39      	ldr	r1, [r7, #32]
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f8cd 	bl	8007dd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e01a      	b.n	8007c76 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2220      	movs	r2, #32
 8007c46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6859      	ldr	r1, [r3, #4]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	4b0c      	ldr	r3, [pc, #48]	; (8007c84 <HAL_I2C_Master_Receive+0x1e8>)
 8007c54:	400b      	ands	r3, r1
 8007c56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	e000      	b.n	8007c76 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007c74:	2302      	movs	r3, #2
  }
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	80002400 	.word	0x80002400
 8007c84:	fe00e800 	.word	0xfe00e800

08007c88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d103      	bne.n	8007ca6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d007      	beq.n	8007cc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	699a      	ldr	r2, [r3, #24]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f042 0201 	orr.w	r2, r2, #1
 8007cc2:	619a      	str	r2, [r3, #24]
  }
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	603b      	str	r3, [r7, #0]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ce0:	e022      	b.n	8007d28 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ce8:	d01e      	beq.n	8007d28 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cea:	f7fa fdff 	bl	80028ec <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d302      	bcc.n	8007d00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d113      	bne.n	8007d28 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d04:	f043 0220 	orr.w	r2, r3, #32
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e00f      	b.n	8007d48 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	699a      	ldr	r2, [r3, #24]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	4013      	ands	r3, r2
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	bf0c      	ite	eq
 8007d38:	2301      	moveq	r3, #1
 8007d3a:	2300      	movne	r3, #0
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	461a      	mov	r2, r3
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d0cd      	beq.n	8007ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d5c:	e02c      	b.n	8007db8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 f8ea 	bl	8007f3c <I2C_IsErrorOccurred>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e02a      	b.n	8007dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d78:	d01e      	beq.n	8007db8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d7a:	f7fa fdb7 	bl	80028ec <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d302      	bcc.n	8007d90 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d113      	bne.n	8007db8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d94:	f043 0220 	orr.w	r2, r3, #32
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e007      	b.n	8007dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d1cb      	bne.n	8007d5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ddc:	e028      	b.n	8007e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	68b9      	ldr	r1, [r7, #8]
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 f8aa 	bl	8007f3c <I2C_IsErrorOccurred>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e026      	b.n	8007e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007df2:	f7fa fd7b 	bl	80028ec <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d302      	bcc.n	8007e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d113      	bne.n	8007e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0c:	f043 0220 	orr.w	r2, r3, #32
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2220      	movs	r2, #32
 8007e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e007      	b.n	8007e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b20      	cmp	r3, #32
 8007e3c:	d1cf      	bne.n	8007dde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e54:	e064      	b.n	8007f20 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 f86e 	bl	8007f3c <I2C_IsErrorOccurred>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e062      	b.n	8007f30 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d138      	bne.n	8007eea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	f003 0304 	and.w	r3, r3, #4
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d105      	bne.n	8007e92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e04e      	b.n	8007f30 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	f003 0310 	and.w	r3, r3, #16
 8007e9c:	2b10      	cmp	r3, #16
 8007e9e:	d107      	bne.n	8007eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2210      	movs	r2, #16
 8007ea6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2204      	movs	r2, #4
 8007eac:	645a      	str	r2, [r3, #68]	; 0x44
 8007eae:	e002      	b.n	8007eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6859      	ldr	r1, [r3, #4]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	4b1b      	ldr	r3, [pc, #108]	; (8007f38 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007eca:	400b      	ands	r3, r1
 8007ecc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e022      	b.n	8007f30 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eea:	f7fa fcff 	bl	80028ec <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d302      	bcc.n	8007f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10f      	bne.n	8007f20 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f04:	f043 0220 	orr.w	r2, r3, #32
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e007      	b.n	8007f30 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	f003 0304 	and.w	r3, r3, #4
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d193      	bne.n	8007e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	fe00e800 	.word	0xfe00e800

08007f3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b08a      	sub	sp, #40	; 0x28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	f003 0310 	and.w	r3, r3, #16
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d075      	beq.n	8008054 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2210      	movs	r2, #16
 8007f6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f70:	e056      	b.n	8008020 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f78:	d052      	beq.n	8008020 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f7a:	f7fa fcb7 	bl	80028ec <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d302      	bcc.n	8007f90 <I2C_IsErrorOccurred+0x54>
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d147      	bne.n	8008020 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fa2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fb2:	d12e      	bne.n	8008012 <I2C_IsErrorOccurred+0xd6>
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fba:	d02a      	beq.n	8008012 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007fbc:	7cfb      	ldrb	r3, [r7, #19]
 8007fbe:	2b20      	cmp	r3, #32
 8007fc0:	d027      	beq.n	8008012 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fd0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007fd2:	f7fa fc8b 	bl	80028ec <HAL_GetTick>
 8007fd6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fd8:	e01b      	b.n	8008012 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007fda:	f7fa fc87 	bl	80028ec <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	2b19      	cmp	r3, #25
 8007fe6:	d914      	bls.n	8008012 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fec:	f043 0220 	orr.w	r2, r3, #32
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	f003 0320 	and.w	r3, r3, #32
 800801c:	2b20      	cmp	r3, #32
 800801e:	d1dc      	bne.n	8007fda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b20      	cmp	r3, #32
 800802c:	d003      	beq.n	8008036 <I2C_IsErrorOccurred+0xfa>
 800802e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008032:	2b00      	cmp	r3, #0
 8008034:	d09d      	beq.n	8007f72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800803a:	2b00      	cmp	r3, #0
 800803c:	d103      	bne.n	8008046 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2220      	movs	r2, #32
 8008044:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	f043 0304 	orr.w	r3, r3, #4
 800804c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00b      	beq.n	800807e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	f043 0301 	orr.w	r3, r3, #1
 800806c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008076:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00b      	beq.n	80080a0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	f043 0308 	orr.w	r3, r3, #8
 800808e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008098:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00b      	beq.n	80080c2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	f043 0302 	orr.w	r3, r3, #2
 80080b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80080c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d01c      	beq.n	8008104 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f7ff fddc 	bl	8007c88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6859      	ldr	r1, [r3, #4]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	4b0d      	ldr	r3, [pc, #52]	; (8008110 <I2C_IsErrorOccurred+0x1d4>)
 80080dc:	400b      	ands	r3, r1
 80080de:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	431a      	orrs	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2220      	movs	r2, #32
 80080f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008108:	4618      	mov	r0, r3
 800810a:	3728      	adds	r7, #40	; 0x28
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	fe00e800 	.word	0xfe00e800

08008114 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	607b      	str	r3, [r7, #4]
 800811e:	460b      	mov	r3, r1
 8008120:	817b      	strh	r3, [r7, #10]
 8008122:	4613      	mov	r3, r2
 8008124:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008126:	897b      	ldrh	r3, [r7, #10]
 8008128:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800812c:	7a7b      	ldrb	r3, [r7, #9]
 800812e:	041b      	lsls	r3, r3, #16
 8008130:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008134:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	4313      	orrs	r3, r2
 800813e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008142:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	0d5b      	lsrs	r3, r3, #21
 800814e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008152:	4b08      	ldr	r3, [pc, #32]	; (8008174 <I2C_TransferConfig+0x60>)
 8008154:	430b      	orrs	r3, r1
 8008156:	43db      	mvns	r3, r3
 8008158:	ea02 0103 	and.w	r1, r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008166:	bf00      	nop
 8008168:	371c      	adds	r7, #28
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	03ff63ff 	.word	0x03ff63ff

08008178 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b20      	cmp	r3, #32
 800818c:	d138      	bne.n	8008200 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008198:	2302      	movs	r3, #2
 800819a:	e032      	b.n	8008202 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2224      	movs	r2, #36	; 0x24
 80081a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 0201 	bic.w	r2, r2, #1
 80081ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6819      	ldr	r1, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0201 	orr.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2220      	movs	r2, #32
 80081f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	e000      	b.n	8008202 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008200:	2302      	movs	r3, #2
  }
}
 8008202:	4618      	mov	r0, r3
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800820e:	b480      	push	{r7}
 8008210:	b085      	sub	sp, #20
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b20      	cmp	r3, #32
 8008222:	d139      	bne.n	8008298 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800822a:	2b01      	cmp	r3, #1
 800822c:	d101      	bne.n	8008232 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800822e:	2302      	movs	r3, #2
 8008230:	e033      	b.n	800829a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2224      	movs	r2, #36	; 0x24
 800823e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0201 	bic.w	r2, r2, #1
 8008250:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008260:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	021b      	lsls	r3, r3, #8
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	4313      	orrs	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0201 	orr.w	r2, r2, #1
 8008282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2220      	movs	r2, #32
 8008288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	e000      	b.n	800829a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008298:	2302      	movs	r3, #2
  }
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
	...

080082a8 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	460b      	mov	r3, r1
 80082b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 80082b4:	4b18      	ldr	r3, [pc, #96]	; (8008318 <HAL_PWR_EnterSTOPMode+0x70>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f023 0201 	bic.w	r2, r3, #1
 80082bc:	4916      	ldr	r1, [pc, #88]	; (8008318 <HAL_PWR_EnterSTOPMode+0x70>)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 80082c4:	4b14      	ldr	r3, [pc, #80]	; (8008318 <HAL_PWR_EnterSTOPMode+0x70>)
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	4a13      	ldr	r2, [pc, #76]	; (8008318 <HAL_PWR_EnterSTOPMode+0x70>)
 80082ca:	f023 0305 	bic.w	r3, r3, #5
 80082ce:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 80082d0:	4b11      	ldr	r3, [pc, #68]	; (8008318 <HAL_PWR_EnterSTOPMode+0x70>)
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	4a10      	ldr	r2, [pc, #64]	; (8008318 <HAL_PWR_EnterSTOPMode+0x70>)
 80082d6:	f023 0302 	bic.w	r3, r3, #2
 80082da:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80082dc:	4b0f      	ldr	r3, [pc, #60]	; (800831c <HAL_PWR_EnterSTOPMode+0x74>)
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	4a0e      	ldr	r2, [pc, #56]	; (800831c <HAL_PWR_EnterSTOPMode+0x74>)
 80082e2:	f043 0304 	orr.w	r3, r3, #4
 80082e6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80082e8:	f3bf 8f4f 	dsb	sy
}
 80082ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80082ee:	f3bf 8f6f 	isb	sy
}
 80082f2:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80082f4:	78fb      	ldrb	r3, [r7, #3]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d101      	bne.n	80082fe <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80082fa:	bf30      	wfi
 80082fc:	e000      	b.n	8008300 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80082fe:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008300:	4b06      	ldr	r3, [pc, #24]	; (800831c <HAL_PWR_EnterSTOPMode+0x74>)
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	4a05      	ldr	r2, [pc, #20]	; (800831c <HAL_PWR_EnterSTOPMode+0x74>)
 8008306:	f023 0304 	bic.w	r3, r3, #4
 800830a:	6113      	str	r3, [r2, #16]
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	58024800 	.word	0x58024800
 800831c:	e000ed00 	.word	0xe000ed00

08008320 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008328:	4b19      	ldr	r3, [pc, #100]	; (8008390 <HAL_PWREx_ConfigSupply+0x70>)
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b04      	cmp	r3, #4
 8008332:	d00a      	beq.n	800834a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008334:	4b16      	ldr	r3, [pc, #88]	; (8008390 <HAL_PWREx_ConfigSupply+0x70>)
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f003 0307 	and.w	r3, r3, #7
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	429a      	cmp	r2, r3
 8008340:	d001      	beq.n	8008346 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e01f      	b.n	8008386 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	e01d      	b.n	8008386 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800834a:	4b11      	ldr	r3, [pc, #68]	; (8008390 <HAL_PWREx_ConfigSupply+0x70>)
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	f023 0207 	bic.w	r2, r3, #7
 8008352:	490f      	ldr	r1, [pc, #60]	; (8008390 <HAL_PWREx_ConfigSupply+0x70>)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4313      	orrs	r3, r2
 8008358:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800835a:	f7fa fac7 	bl	80028ec <HAL_GetTick>
 800835e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008360:	e009      	b.n	8008376 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008362:	f7fa fac3 	bl	80028ec <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008370:	d901      	bls.n	8008376 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e007      	b.n	8008386 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008376:	4b06      	ldr	r3, [pc, #24]	; (8008390 <HAL_PWREx_ConfigSupply+0x70>)
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800837e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008382:	d1ee      	bne.n	8008362 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	58024800 	.word	0x58024800

08008394 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08c      	sub	sp, #48	; 0x30
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d102      	bne.n	80083a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	f000 bc1d 	b.w	8008be2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 8087 	beq.w	80084c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083b6:	4b99      	ldr	r3, [pc, #612]	; (800861c <HAL_RCC_OscConfig+0x288>)
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083c0:	4b96      	ldr	r3, [pc, #600]	; (800861c <HAL_RCC_OscConfig+0x288>)
 80083c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80083c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c8:	2b10      	cmp	r3, #16
 80083ca:	d007      	beq.n	80083dc <HAL_RCC_OscConfig+0x48>
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	2b18      	cmp	r3, #24
 80083d0:	d110      	bne.n	80083f4 <HAL_RCC_OscConfig+0x60>
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	f003 0303 	and.w	r3, r3, #3
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d10b      	bne.n	80083f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083dc:	4b8f      	ldr	r3, [pc, #572]	; (800861c <HAL_RCC_OscConfig+0x288>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d06c      	beq.n	80084c2 <HAL_RCC_OscConfig+0x12e>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d168      	bne.n	80084c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e3f6      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083fc:	d106      	bne.n	800840c <HAL_RCC_OscConfig+0x78>
 80083fe:	4b87      	ldr	r3, [pc, #540]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a86      	ldr	r2, [pc, #536]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	e02e      	b.n	800846a <HAL_RCC_OscConfig+0xd6>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10c      	bne.n	800842e <HAL_RCC_OscConfig+0x9a>
 8008414:	4b81      	ldr	r3, [pc, #516]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a80      	ldr	r2, [pc, #512]	; (800861c <HAL_RCC_OscConfig+0x288>)
 800841a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	4b7e      	ldr	r3, [pc, #504]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a7d      	ldr	r2, [pc, #500]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	e01d      	b.n	800846a <HAL_RCC_OscConfig+0xd6>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008436:	d10c      	bne.n	8008452 <HAL_RCC_OscConfig+0xbe>
 8008438:	4b78      	ldr	r3, [pc, #480]	; (800861c <HAL_RCC_OscConfig+0x288>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a77      	ldr	r2, [pc, #476]	; (800861c <HAL_RCC_OscConfig+0x288>)
 800843e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008442:	6013      	str	r3, [r2, #0]
 8008444:	4b75      	ldr	r3, [pc, #468]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a74      	ldr	r2, [pc, #464]	; (800861c <HAL_RCC_OscConfig+0x288>)
 800844a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	e00b      	b.n	800846a <HAL_RCC_OscConfig+0xd6>
 8008452:	4b72      	ldr	r3, [pc, #456]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a71      	ldr	r2, [pc, #452]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	4b6f      	ldr	r3, [pc, #444]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a6e      	ldr	r2, [pc, #440]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008468:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d013      	beq.n	800849a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008472:	f7fa fa3b 	bl	80028ec <HAL_GetTick>
 8008476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008478:	e008      	b.n	800848c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800847a:	f7fa fa37 	bl	80028ec <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b64      	cmp	r3, #100	; 0x64
 8008486:	d901      	bls.n	800848c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e3aa      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800848c:	4b63      	ldr	r3, [pc, #396]	; (800861c <HAL_RCC_OscConfig+0x288>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0f0      	beq.n	800847a <HAL_RCC_OscConfig+0xe6>
 8008498:	e014      	b.n	80084c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849a:	f7fa fa27 	bl	80028ec <HAL_GetTick>
 800849e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084a0:	e008      	b.n	80084b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084a2:	f7fa fa23 	bl	80028ec <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b64      	cmp	r3, #100	; 0x64
 80084ae:	d901      	bls.n	80084b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e396      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084b4:	4b59      	ldr	r3, [pc, #356]	; (800861c <HAL_RCC_OscConfig+0x288>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1f0      	bne.n	80084a2 <HAL_RCC_OscConfig+0x10e>
 80084c0:	e000      	b.n	80084c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 80cb 	beq.w	8008668 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084d2:	4b52      	ldr	r3, [pc, #328]	; (800861c <HAL_RCC_OscConfig+0x288>)
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084dc:	4b4f      	ldr	r3, [pc, #316]	; (800861c <HAL_RCC_OscConfig+0x288>)
 80084de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d007      	beq.n	80084f8 <HAL_RCC_OscConfig+0x164>
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	2b18      	cmp	r3, #24
 80084ec:	d156      	bne.n	800859c <HAL_RCC_OscConfig+0x208>
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	f003 0303 	and.w	r3, r3, #3
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d151      	bne.n	800859c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084f8:	4b48      	ldr	r3, [pc, #288]	; (800861c <HAL_RCC_OscConfig+0x288>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	2b00      	cmp	r3, #0
 8008502:	d005      	beq.n	8008510 <HAL_RCC_OscConfig+0x17c>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e368      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008510:	4b42      	ldr	r3, [pc, #264]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f023 0219 	bic.w	r2, r3, #25
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	493f      	ldr	r1, [pc, #252]	; (800861c <HAL_RCC_OscConfig+0x288>)
 800851e:	4313      	orrs	r3, r2
 8008520:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008522:	f7fa f9e3 	bl	80028ec <HAL_GetTick>
 8008526:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008528:	e008      	b.n	800853c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800852a:	f7fa f9df 	bl	80028ec <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	2b02      	cmp	r3, #2
 8008536:	d901      	bls.n	800853c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e352      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800853c:	4b37      	ldr	r3, [pc, #220]	; (800861c <HAL_RCC_OscConfig+0x288>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0304 	and.w	r3, r3, #4
 8008544:	2b00      	cmp	r3, #0
 8008546:	d0f0      	beq.n	800852a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008548:	f7fa fa10 	bl	800296c <HAL_GetREVID>
 800854c:	4603      	mov	r3, r0
 800854e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008552:	4293      	cmp	r3, r2
 8008554:	d817      	bhi.n	8008586 <HAL_RCC_OscConfig+0x1f2>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	2b40      	cmp	r3, #64	; 0x40
 800855c:	d108      	bne.n	8008570 <HAL_RCC_OscConfig+0x1dc>
 800855e:	4b2f      	ldr	r3, [pc, #188]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008566:	4a2d      	ldr	r2, [pc, #180]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800856c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800856e:	e07b      	b.n	8008668 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008570:	4b2a      	ldr	r3, [pc, #168]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	031b      	lsls	r3, r3, #12
 800857e:	4927      	ldr	r1, [pc, #156]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008580:	4313      	orrs	r3, r2
 8008582:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008584:	e070      	b.n	8008668 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008586:	4b25      	ldr	r3, [pc, #148]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	061b      	lsls	r3, r3, #24
 8008594:	4921      	ldr	r1, [pc, #132]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008596:	4313      	orrs	r3, r2
 8008598:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800859a:	e065      	b.n	8008668 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d048      	beq.n	8008636 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085a4:	4b1d      	ldr	r3, [pc, #116]	; (800861c <HAL_RCC_OscConfig+0x288>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f023 0219 	bic.w	r2, r3, #25
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	491a      	ldr	r1, [pc, #104]	; (800861c <HAL_RCC_OscConfig+0x288>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b6:	f7fa f999 	bl	80028ec <HAL_GetTick>
 80085ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085bc:	e008      	b.n	80085d0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085be:	f7fa f995 	bl	80028ec <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d901      	bls.n	80085d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e308      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085d0:	4b12      	ldr	r3, [pc, #72]	; (800861c <HAL_RCC_OscConfig+0x288>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d0f0      	beq.n	80085be <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085dc:	f7fa f9c6 	bl	800296c <HAL_GetREVID>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d81a      	bhi.n	8008620 <HAL_RCC_OscConfig+0x28c>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	2b40      	cmp	r3, #64	; 0x40
 80085f0:	d108      	bne.n	8008604 <HAL_RCC_OscConfig+0x270>
 80085f2:	4b0a      	ldr	r3, [pc, #40]	; (800861c <HAL_RCC_OscConfig+0x288>)
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80085fa:	4a08      	ldr	r2, [pc, #32]	; (800861c <HAL_RCC_OscConfig+0x288>)
 80085fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008600:	6053      	str	r3, [r2, #4]
 8008602:	e031      	b.n	8008668 <HAL_RCC_OscConfig+0x2d4>
 8008604:	4b05      	ldr	r3, [pc, #20]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	031b      	lsls	r3, r3, #12
 8008612:	4902      	ldr	r1, [pc, #8]	; (800861c <HAL_RCC_OscConfig+0x288>)
 8008614:	4313      	orrs	r3, r2
 8008616:	604b      	str	r3, [r1, #4]
 8008618:	e026      	b.n	8008668 <HAL_RCC_OscConfig+0x2d4>
 800861a:	bf00      	nop
 800861c:	58024400 	.word	0x58024400
 8008620:	4b9a      	ldr	r3, [pc, #616]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	061b      	lsls	r3, r3, #24
 800862e:	4997      	ldr	r1, [pc, #604]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008630:	4313      	orrs	r3, r2
 8008632:	604b      	str	r3, [r1, #4]
 8008634:	e018      	b.n	8008668 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008636:	4b95      	ldr	r3, [pc, #596]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a94      	ldr	r2, [pc, #592]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 800863c:	f023 0301 	bic.w	r3, r3, #1
 8008640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008642:	f7fa f953 	bl	80028ec <HAL_GetTick>
 8008646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008648:	e008      	b.n	800865c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800864a:	f7fa f94f 	bl	80028ec <HAL_GetTick>
 800864e:	4602      	mov	r2, r0
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	2b02      	cmp	r3, #2
 8008656:	d901      	bls.n	800865c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008658:	2303      	movs	r3, #3
 800865a:	e2c2      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800865c:	4b8b      	ldr	r3, [pc, #556]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0304 	and.w	r3, r3, #4
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1f0      	bne.n	800864a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0310 	and.w	r3, r3, #16
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 80a9 	beq.w	80087c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008676:	4b85      	ldr	r3, [pc, #532]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800867e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008680:	4b82      	ldr	r3, [pc, #520]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008684:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	2b08      	cmp	r3, #8
 800868a:	d007      	beq.n	800869c <HAL_RCC_OscConfig+0x308>
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	2b18      	cmp	r3, #24
 8008690:	d13a      	bne.n	8008708 <HAL_RCC_OscConfig+0x374>
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f003 0303 	and.w	r3, r3, #3
 8008698:	2b01      	cmp	r3, #1
 800869a:	d135      	bne.n	8008708 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800869c:	4b7b      	ldr	r3, [pc, #492]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d005      	beq.n	80086b4 <HAL_RCC_OscConfig+0x320>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	2b80      	cmp	r3, #128	; 0x80
 80086ae:	d001      	beq.n	80086b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e296      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086b4:	f7fa f95a 	bl	800296c <HAL_GetREVID>
 80086b8:	4603      	mov	r3, r0
 80086ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80086be:	4293      	cmp	r3, r2
 80086c0:	d817      	bhi.n	80086f2 <HAL_RCC_OscConfig+0x35e>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	2b20      	cmp	r3, #32
 80086c8:	d108      	bne.n	80086dc <HAL_RCC_OscConfig+0x348>
 80086ca:	4b70      	ldr	r3, [pc, #448]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80086d2:	4a6e      	ldr	r2, [pc, #440]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 80086d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086da:	e075      	b.n	80087c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086dc:	4b6b      	ldr	r3, [pc, #428]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a1b      	ldr	r3, [r3, #32]
 80086e8:	069b      	lsls	r3, r3, #26
 80086ea:	4968      	ldr	r1, [pc, #416]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086f0:	e06a      	b.n	80087c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086f2:	4b66      	ldr	r3, [pc, #408]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	061b      	lsls	r3, r3, #24
 8008700:	4962      	ldr	r1, [pc, #392]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008702:	4313      	orrs	r3, r2
 8008704:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008706:	e05f      	b.n	80087c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d042      	beq.n	8008796 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008710:	4b5e      	ldr	r3, [pc, #376]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a5d      	ldr	r2, [pc, #372]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800871a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800871c:	f7fa f8e6 	bl	80028ec <HAL_GetTick>
 8008720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008722:	e008      	b.n	8008736 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008724:	f7fa f8e2 	bl	80028ec <HAL_GetTick>
 8008728:	4602      	mov	r2, r0
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b02      	cmp	r3, #2
 8008730:	d901      	bls.n	8008736 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e255      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008736:	4b55      	ldr	r3, [pc, #340]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0f0      	beq.n	8008724 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008742:	f7fa f913 	bl	800296c <HAL_GetREVID>
 8008746:	4603      	mov	r3, r0
 8008748:	f241 0203 	movw	r2, #4099	; 0x1003
 800874c:	4293      	cmp	r3, r2
 800874e:	d817      	bhi.n	8008780 <HAL_RCC_OscConfig+0x3ec>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	2b20      	cmp	r3, #32
 8008756:	d108      	bne.n	800876a <HAL_RCC_OscConfig+0x3d6>
 8008758:	4b4c      	ldr	r3, [pc, #304]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008760:	4a4a      	ldr	r2, [pc, #296]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008766:	6053      	str	r3, [r2, #4]
 8008768:	e02e      	b.n	80087c8 <HAL_RCC_OscConfig+0x434>
 800876a:	4b48      	ldr	r3, [pc, #288]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	069b      	lsls	r3, r3, #26
 8008778:	4944      	ldr	r1, [pc, #272]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 800877a:	4313      	orrs	r3, r2
 800877c:	604b      	str	r3, [r1, #4]
 800877e:	e023      	b.n	80087c8 <HAL_RCC_OscConfig+0x434>
 8008780:	4b42      	ldr	r3, [pc, #264]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a1b      	ldr	r3, [r3, #32]
 800878c:	061b      	lsls	r3, r3, #24
 800878e:	493f      	ldr	r1, [pc, #252]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008790:	4313      	orrs	r3, r2
 8008792:	60cb      	str	r3, [r1, #12]
 8008794:	e018      	b.n	80087c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008796:	4b3d      	ldr	r3, [pc, #244]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a3c      	ldr	r2, [pc, #240]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 800879c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a2:	f7fa f8a3 	bl	80028ec <HAL_GetTick>
 80087a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087a8:	e008      	b.n	80087bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80087aa:	f7fa f89f 	bl	80028ec <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d901      	bls.n	80087bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e212      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087bc:	4b33      	ldr	r3, [pc, #204]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1f0      	bne.n	80087aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0308 	and.w	r3, r3, #8
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d036      	beq.n	8008842 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d019      	beq.n	8008810 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087dc:	4b2b      	ldr	r3, [pc, #172]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 80087de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087e0:	4a2a      	ldr	r2, [pc, #168]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 80087e2:	f043 0301 	orr.w	r3, r3, #1
 80087e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087e8:	f7fa f880 	bl	80028ec <HAL_GetTick>
 80087ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087ee:	e008      	b.n	8008802 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087f0:	f7fa f87c 	bl	80028ec <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e1ef      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008802:	4b22      	ldr	r3, [pc, #136]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0f0      	beq.n	80087f0 <HAL_RCC_OscConfig+0x45c>
 800880e:	e018      	b.n	8008842 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008810:	4b1e      	ldr	r3, [pc, #120]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008814:	4a1d      	ldr	r2, [pc, #116]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008816:	f023 0301 	bic.w	r3, r3, #1
 800881a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800881c:	f7fa f866 	bl	80028ec <HAL_GetTick>
 8008820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008824:	f7fa f862 	bl	80028ec <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e1d5      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008836:	4b15      	ldr	r3, [pc, #84]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f0      	bne.n	8008824 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0320 	and.w	r3, r3, #32
 800884a:	2b00      	cmp	r3, #0
 800884c:	d039      	beq.n	80088c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d01c      	beq.n	8008890 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008856:	4b0d      	ldr	r3, [pc, #52]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a0c      	ldr	r2, [pc, #48]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 800885c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008860:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008862:	f7fa f843 	bl	80028ec <HAL_GetTick>
 8008866:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008868:	e008      	b.n	800887c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800886a:	f7fa f83f 	bl	80028ec <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	d901      	bls.n	800887c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e1b2      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800887c:	4b03      	ldr	r3, [pc, #12]	; (800888c <HAL_RCC_OscConfig+0x4f8>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0f0      	beq.n	800886a <HAL_RCC_OscConfig+0x4d6>
 8008888:	e01b      	b.n	80088c2 <HAL_RCC_OscConfig+0x52e>
 800888a:	bf00      	nop
 800888c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008890:	4b9b      	ldr	r3, [pc, #620]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a9a      	ldr	r2, [pc, #616]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800889a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800889c:	f7fa f826 	bl	80028ec <HAL_GetTick>
 80088a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088a2:	e008      	b.n	80088b6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80088a4:	f7fa f822 	bl	80028ec <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d901      	bls.n	80088b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e195      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088b6:	4b92      	ldr	r3, [pc, #584]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1f0      	bne.n	80088a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0304 	and.w	r3, r3, #4
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 8081 	beq.w	80089d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80088d0:	4b8c      	ldr	r3, [pc, #560]	; (8008b04 <HAL_RCC_OscConfig+0x770>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a8b      	ldr	r2, [pc, #556]	; (8008b04 <HAL_RCC_OscConfig+0x770>)
 80088d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088dc:	f7fa f806 	bl	80028ec <HAL_GetTick>
 80088e0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088e2:	e008      	b.n	80088f6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80088e4:	f7fa f802 	bl	80028ec <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b64      	cmp	r3, #100	; 0x64
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e175      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088f6:	4b83      	ldr	r3, [pc, #524]	; (8008b04 <HAL_RCC_OscConfig+0x770>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0f0      	beq.n	80088e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d106      	bne.n	8008918 <HAL_RCC_OscConfig+0x584>
 800890a:	4b7d      	ldr	r3, [pc, #500]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 800890c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890e:	4a7c      	ldr	r2, [pc, #496]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008910:	f043 0301 	orr.w	r3, r3, #1
 8008914:	6713      	str	r3, [r2, #112]	; 0x70
 8008916:	e02d      	b.n	8008974 <HAL_RCC_OscConfig+0x5e0>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10c      	bne.n	800893a <HAL_RCC_OscConfig+0x5a6>
 8008920:	4b77      	ldr	r3, [pc, #476]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008924:	4a76      	ldr	r2, [pc, #472]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008926:	f023 0301 	bic.w	r3, r3, #1
 800892a:	6713      	str	r3, [r2, #112]	; 0x70
 800892c:	4b74      	ldr	r3, [pc, #464]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 800892e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008930:	4a73      	ldr	r2, [pc, #460]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008932:	f023 0304 	bic.w	r3, r3, #4
 8008936:	6713      	str	r3, [r2, #112]	; 0x70
 8008938:	e01c      	b.n	8008974 <HAL_RCC_OscConfig+0x5e0>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	2b05      	cmp	r3, #5
 8008940:	d10c      	bne.n	800895c <HAL_RCC_OscConfig+0x5c8>
 8008942:	4b6f      	ldr	r3, [pc, #444]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008946:	4a6e      	ldr	r2, [pc, #440]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008948:	f043 0304 	orr.w	r3, r3, #4
 800894c:	6713      	str	r3, [r2, #112]	; 0x70
 800894e:	4b6c      	ldr	r3, [pc, #432]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008952:	4a6b      	ldr	r2, [pc, #428]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008954:	f043 0301 	orr.w	r3, r3, #1
 8008958:	6713      	str	r3, [r2, #112]	; 0x70
 800895a:	e00b      	b.n	8008974 <HAL_RCC_OscConfig+0x5e0>
 800895c:	4b68      	ldr	r3, [pc, #416]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 800895e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008960:	4a67      	ldr	r2, [pc, #412]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008962:	f023 0301 	bic.w	r3, r3, #1
 8008966:	6713      	str	r3, [r2, #112]	; 0x70
 8008968:	4b65      	ldr	r3, [pc, #404]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 800896a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896c:	4a64      	ldr	r2, [pc, #400]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 800896e:	f023 0304 	bic.w	r3, r3, #4
 8008972:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d015      	beq.n	80089a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800897c:	f7f9 ffb6 	bl	80028ec <HAL_GetTick>
 8008980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008982:	e00a      	b.n	800899a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008984:	f7f9 ffb2 	bl	80028ec <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008992:	4293      	cmp	r3, r2
 8008994:	d901      	bls.n	800899a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e123      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800899a:	4b59      	ldr	r3, [pc, #356]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 800899c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0ee      	beq.n	8008984 <HAL_RCC_OscConfig+0x5f0>
 80089a6:	e014      	b.n	80089d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089a8:	f7f9 ffa0 	bl	80028ec <HAL_GetTick>
 80089ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089ae:	e00a      	b.n	80089c6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089b0:	f7f9 ff9c 	bl	80028ec <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80089be:	4293      	cmp	r3, r2
 80089c0:	d901      	bls.n	80089c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e10d      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089c6:	4b4e      	ldr	r3, [pc, #312]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 80089c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1ee      	bne.n	80089b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f000 8102 	beq.w	8008be0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80089dc:	4b48      	ldr	r3, [pc, #288]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089e4:	2b18      	cmp	r3, #24
 80089e6:	f000 80bd 	beq.w	8008b64 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	f040 809e 	bne.w	8008b30 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089f4:	4b42      	ldr	r3, [pc, #264]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a41      	ldr	r2, [pc, #260]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 80089fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a00:	f7f9 ff74 	bl	80028ec <HAL_GetTick>
 8008a04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a06:	e008      	b.n	8008a1a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a08:	f7f9 ff70 	bl	80028ec <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d901      	bls.n	8008a1a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e0e3      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a1a:	4b39      	ldr	r3, [pc, #228]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1f0      	bne.n	8008a08 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a26:	4b36      	ldr	r3, [pc, #216]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a2a:	4b37      	ldr	r3, [pc, #220]	; (8008b08 <HAL_RCC_OscConfig+0x774>)
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a36:	0112      	lsls	r2, r2, #4
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	4931      	ldr	r1, [pc, #196]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	628b      	str	r3, [r1, #40]	; 0x28
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a44:	3b01      	subs	r3, #1
 8008a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	025b      	lsls	r3, r3, #9
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	431a      	orrs	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	041b      	lsls	r3, r3, #16
 8008a5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a62:	431a      	orrs	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	061b      	lsls	r3, r3, #24
 8008a6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a70:	4923      	ldr	r1, [pc, #140]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008a76:	4b22      	ldr	r3, [pc, #136]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7a:	4a21      	ldr	r2, [pc, #132]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008a7c:	f023 0301 	bic.w	r3, r3, #1
 8008a80:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a82:	4b1f      	ldr	r3, [pc, #124]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a86:	4b21      	ldr	r3, [pc, #132]	; (8008b0c <HAL_RCC_OscConfig+0x778>)
 8008a88:	4013      	ands	r3, r2
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008a8e:	00d2      	lsls	r2, r2, #3
 8008a90:	491b      	ldr	r1, [pc, #108]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008a92:	4313      	orrs	r3, r2
 8008a94:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a96:	4b1a      	ldr	r3, [pc, #104]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9a:	f023 020c 	bic.w	r2, r3, #12
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	4917      	ldr	r1, [pc, #92]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008aa8:	4b15      	ldr	r3, [pc, #84]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	f023 0202 	bic.w	r2, r3, #2
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab4:	4912      	ldr	r1, [pc, #72]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008aba:	4b11      	ldr	r3, [pc, #68]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abe:	4a10      	ldr	r2, [pc, #64]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ac6:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aca:	4a0d      	ldr	r2, [pc, #52]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008ad2:	4b0b      	ldr	r3, [pc, #44]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad6:	4a0a      	ldr	r2, [pc, #40]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008adc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008ade:	4b08      	ldr	r3, [pc, #32]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae2:	4a07      	ldr	r2, [pc, #28]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008ae4:	f043 0301 	orr.w	r3, r3, #1
 8008ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008aea:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a04      	ldr	r2, [pc, #16]	; (8008b00 <HAL_RCC_OscConfig+0x76c>)
 8008af0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af6:	f7f9 fef9 	bl	80028ec <HAL_GetTick>
 8008afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008afc:	e011      	b.n	8008b22 <HAL_RCC_OscConfig+0x78e>
 8008afe:	bf00      	nop
 8008b00:	58024400 	.word	0x58024400
 8008b04:	58024800 	.word	0x58024800
 8008b08:	fffffc0c 	.word	0xfffffc0c
 8008b0c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b10:	f7f9 feec 	bl	80028ec <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d901      	bls.n	8008b22 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e05f      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b22:	4b32      	ldr	r3, [pc, #200]	; (8008bec <HAL_RCC_OscConfig+0x858>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0f0      	beq.n	8008b10 <HAL_RCC_OscConfig+0x77c>
 8008b2e:	e057      	b.n	8008be0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b30:	4b2e      	ldr	r3, [pc, #184]	; (8008bec <HAL_RCC_OscConfig+0x858>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a2d      	ldr	r2, [pc, #180]	; (8008bec <HAL_RCC_OscConfig+0x858>)
 8008b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b3c:	f7f9 fed6 	bl	80028ec <HAL_GetTick>
 8008b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b42:	e008      	b.n	8008b56 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b44:	f7f9 fed2 	bl	80028ec <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d901      	bls.n	8008b56 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e045      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b56:	4b25      	ldr	r3, [pc, #148]	; (8008bec <HAL_RCC_OscConfig+0x858>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1f0      	bne.n	8008b44 <HAL_RCC_OscConfig+0x7b0>
 8008b62:	e03d      	b.n	8008be0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b64:	4b21      	ldr	r3, [pc, #132]	; (8008bec <HAL_RCC_OscConfig+0x858>)
 8008b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b6a:	4b20      	ldr	r3, [pc, #128]	; (8008bec <HAL_RCC_OscConfig+0x858>)
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d031      	beq.n	8008bdc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	f003 0203 	and.w	r2, r3, #3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d12a      	bne.n	8008bdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	091b      	lsrs	r3, r3, #4
 8008b8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d122      	bne.n	8008bdc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d11a      	bne.n	8008bdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	0a5b      	lsrs	r3, r3, #9
 8008baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d111      	bne.n	8008bdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	0c1b      	lsrs	r3, r3, #16
 8008bbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d108      	bne.n	8008bdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	0e1b      	lsrs	r3, r3, #24
 8008bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bd6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d001      	beq.n	8008be0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e000      	b.n	8008be2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3730      	adds	r7, #48	; 0x30
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	58024400 	.word	0x58024400

08008bf0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e19c      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c04:	4b8a      	ldr	r3, [pc, #552]	; (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 030f 	and.w	r3, r3, #15
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d910      	bls.n	8008c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c12:	4b87      	ldr	r3, [pc, #540]	; (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f023 020f 	bic.w	r2, r3, #15
 8008c1a:	4985      	ldr	r1, [pc, #532]	; (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c22:	4b83      	ldr	r3, [pc, #524]	; (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d001      	beq.n	8008c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e184      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0304 	and.w	r3, r3, #4
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d010      	beq.n	8008c62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691a      	ldr	r2, [r3, #16]
 8008c44:	4b7b      	ldr	r3, [pc, #492]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d908      	bls.n	8008c62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c50:	4b78      	ldr	r3, [pc, #480]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	4975      	ldr	r1, [pc, #468]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0308 	and.w	r3, r3, #8
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d010      	beq.n	8008c90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695a      	ldr	r2, [r3, #20]
 8008c72:	4b70      	ldr	r3, [pc, #448]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d908      	bls.n	8008c90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c7e:	4b6d      	ldr	r3, [pc, #436]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	496a      	ldr	r1, [pc, #424]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0310 	and.w	r3, r3, #16
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d010      	beq.n	8008cbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	699a      	ldr	r2, [r3, #24]
 8008ca0:	4b64      	ldr	r3, [pc, #400]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008ca2:	69db      	ldr	r3, [r3, #28]
 8008ca4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d908      	bls.n	8008cbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008cac:	4b61      	ldr	r3, [pc, #388]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	495e      	ldr	r1, [pc, #376]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d010      	beq.n	8008cec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	69da      	ldr	r2, [r3, #28]
 8008cce:	4b59      	ldr	r3, [pc, #356]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d908      	bls.n	8008cec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008cda:	4b56      	ldr	r3, [pc, #344]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	4953      	ldr	r1, [pc, #332]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0302 	and.w	r3, r3, #2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d010      	beq.n	8008d1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	4b4d      	ldr	r3, [pc, #308]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	f003 030f 	and.w	r3, r3, #15
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d908      	bls.n	8008d1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d08:	4b4a      	ldr	r3, [pc, #296]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	f023 020f 	bic.w	r2, r3, #15
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	4947      	ldr	r1, [pc, #284]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0301 	and.w	r3, r3, #1
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d055      	beq.n	8008dd2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d26:	4b43      	ldr	r3, [pc, #268]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	4940      	ldr	r1, [pc, #256]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d107      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d40:	4b3c      	ldr	r3, [pc, #240]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d121      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0f6      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d107      	bne.n	8008d68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d58:	4b36      	ldr	r3, [pc, #216]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d115      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e0ea      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d107      	bne.n	8008d80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d70:	4b30      	ldr	r3, [pc, #192]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d109      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e0de      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d80:	4b2c      	ldr	r3, [pc, #176]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e0d6      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d90:	4b28      	ldr	r3, [pc, #160]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f023 0207 	bic.w	r2, r3, #7
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	4925      	ldr	r1, [pc, #148]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008da2:	f7f9 fda3 	bl	80028ec <HAL_GetTick>
 8008da6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008da8:	e00a      	b.n	8008dc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008daa:	f7f9 fd9f 	bl	80028ec <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d901      	bls.n	8008dc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e0be      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dc0:	4b1c      	ldr	r3, [pc, #112]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d1eb      	bne.n	8008daa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d010      	beq.n	8008e00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	4b14      	ldr	r3, [pc, #80]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	f003 030f 	and.w	r3, r3, #15
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d208      	bcs.n	8008e00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dee:	4b11      	ldr	r3, [pc, #68]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f023 020f 	bic.w	r2, r3, #15
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	490e      	ldr	r1, [pc, #56]	; (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e00:	4b0b      	ldr	r3, [pc, #44]	; (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 030f 	and.w	r3, r3, #15
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d214      	bcs.n	8008e38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e0e:	4b08      	ldr	r3, [pc, #32]	; (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f023 020f 	bic.w	r2, r3, #15
 8008e16:	4906      	ldr	r1, [pc, #24]	; (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e1e:	4b04      	ldr	r3, [pc, #16]	; (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 030f 	and.w	r3, r3, #15
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d005      	beq.n	8008e38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e086      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
 8008e30:	52002000 	.word	0x52002000
 8008e34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d010      	beq.n	8008e66 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691a      	ldr	r2, [r3, #16]
 8008e48:	4b3f      	ldr	r3, [pc, #252]	; (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d208      	bcs.n	8008e66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e54:	4b3c      	ldr	r3, [pc, #240]	; (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	4939      	ldr	r1, [pc, #228]	; (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0308 	and.w	r3, r3, #8
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d010      	beq.n	8008e94 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	695a      	ldr	r2, [r3, #20]
 8008e76:	4b34      	ldr	r3, [pc, #208]	; (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d208      	bcs.n	8008e94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e82:	4b31      	ldr	r3, [pc, #196]	; (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	492e      	ldr	r1, [pc, #184]	; (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0310 	and.w	r3, r3, #16
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d010      	beq.n	8008ec2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699a      	ldr	r2, [r3, #24]
 8008ea4:	4b28      	ldr	r3, [pc, #160]	; (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d208      	bcs.n	8008ec2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008eb0:	4b25      	ldr	r3, [pc, #148]	; (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	4922      	ldr	r1, [pc, #136]	; (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d010      	beq.n	8008ef0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	69da      	ldr	r2, [r3, #28]
 8008ed2:	4b1d      	ldr	r3, [pc, #116]	; (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d208      	bcs.n	8008ef0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008ede:	4b1a      	ldr	r3, [pc, #104]	; (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	4917      	ldr	r1, [pc, #92]	; (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ef0:	f000 f834 	bl	8008f5c <HAL_RCC_GetSysClockFreq>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	4b14      	ldr	r3, [pc, #80]	; (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	0a1b      	lsrs	r3, r3, #8
 8008efc:	f003 030f 	and.w	r3, r3, #15
 8008f00:	4912      	ldr	r1, [pc, #72]	; (8008f4c <HAL_RCC_ClockConfig+0x35c>)
 8008f02:	5ccb      	ldrb	r3, [r1, r3]
 8008f04:	f003 031f 	and.w	r3, r3, #31
 8008f08:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f0e:	4b0e      	ldr	r3, [pc, #56]	; (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	f003 030f 	and.w	r3, r3, #15
 8008f16:	4a0d      	ldr	r2, [pc, #52]	; (8008f4c <HAL_RCC_ClockConfig+0x35c>)
 8008f18:	5cd3      	ldrb	r3, [r2, r3]
 8008f1a:	f003 031f 	and.w	r3, r3, #31
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	fa22 f303 	lsr.w	r3, r2, r3
 8008f24:	4a0a      	ldr	r2, [pc, #40]	; (8008f50 <HAL_RCC_ClockConfig+0x360>)
 8008f26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f28:	4a0a      	ldr	r2, [pc, #40]	; (8008f54 <HAL_RCC_ClockConfig+0x364>)
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008f2e:	4b0a      	ldr	r3, [pc, #40]	; (8008f58 <HAL_RCC_ClockConfig+0x368>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7f9 fc90 	bl	8002858 <HAL_InitTick>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	58024400 	.word	0x58024400
 8008f4c:	0800fe84 	.word	0x0800fe84
 8008f50:	24000030 	.word	0x24000030
 8008f54:	2400002c 	.word	0x2400002c
 8008f58:	24000034 	.word	0x24000034

08008f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b089      	sub	sp, #36	; 0x24
 8008f60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f62:	4bb3      	ldr	r3, [pc, #716]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f6a:	2b18      	cmp	r3, #24
 8008f6c:	f200 8155 	bhi.w	800921a <HAL_RCC_GetSysClockFreq+0x2be>
 8008f70:	a201      	add	r2, pc, #4	; (adr r2, 8008f78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f76:	bf00      	nop
 8008f78:	08008fdd 	.word	0x08008fdd
 8008f7c:	0800921b 	.word	0x0800921b
 8008f80:	0800921b 	.word	0x0800921b
 8008f84:	0800921b 	.word	0x0800921b
 8008f88:	0800921b 	.word	0x0800921b
 8008f8c:	0800921b 	.word	0x0800921b
 8008f90:	0800921b 	.word	0x0800921b
 8008f94:	0800921b 	.word	0x0800921b
 8008f98:	08009003 	.word	0x08009003
 8008f9c:	0800921b 	.word	0x0800921b
 8008fa0:	0800921b 	.word	0x0800921b
 8008fa4:	0800921b 	.word	0x0800921b
 8008fa8:	0800921b 	.word	0x0800921b
 8008fac:	0800921b 	.word	0x0800921b
 8008fb0:	0800921b 	.word	0x0800921b
 8008fb4:	0800921b 	.word	0x0800921b
 8008fb8:	08009009 	.word	0x08009009
 8008fbc:	0800921b 	.word	0x0800921b
 8008fc0:	0800921b 	.word	0x0800921b
 8008fc4:	0800921b 	.word	0x0800921b
 8008fc8:	0800921b 	.word	0x0800921b
 8008fcc:	0800921b 	.word	0x0800921b
 8008fd0:	0800921b 	.word	0x0800921b
 8008fd4:	0800921b 	.word	0x0800921b
 8008fd8:	0800900f 	.word	0x0800900f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fdc:	4b94      	ldr	r3, [pc, #592]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 0320 	and.w	r3, r3, #32
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d009      	beq.n	8008ffc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fe8:	4b91      	ldr	r3, [pc, #580]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	08db      	lsrs	r3, r3, #3
 8008fee:	f003 0303 	and.w	r3, r3, #3
 8008ff2:	4a90      	ldr	r2, [pc, #576]	; (8009234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008ffa:	e111      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ffc:	4b8d      	ldr	r3, [pc, #564]	; (8009234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ffe:	61bb      	str	r3, [r7, #24]
    break;
 8009000:	e10e      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009002:	4b8d      	ldr	r3, [pc, #564]	; (8009238 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009004:	61bb      	str	r3, [r7, #24]
    break;
 8009006:	e10b      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009008:	4b8c      	ldr	r3, [pc, #560]	; (800923c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800900a:	61bb      	str	r3, [r7, #24]
    break;
 800900c:	e108      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800900e:	4b88      	ldr	r3, [pc, #544]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009012:	f003 0303 	and.w	r3, r3, #3
 8009016:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009018:	4b85      	ldr	r3, [pc, #532]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800901a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901c:	091b      	lsrs	r3, r3, #4
 800901e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009022:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009024:	4b82      	ldr	r3, [pc, #520]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800902e:	4b80      	ldr	r3, [pc, #512]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009032:	08db      	lsrs	r3, r3, #3
 8009034:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	fb02 f303 	mul.w	r3, r2, r3
 800903e:	ee07 3a90 	vmov	s15, r3
 8009042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009046:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 80e1 	beq.w	8009214 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2b02      	cmp	r3, #2
 8009056:	f000 8083 	beq.w	8009160 <HAL_RCC_GetSysClockFreq+0x204>
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2b02      	cmp	r3, #2
 800905e:	f200 80a1 	bhi.w	80091a4 <HAL_RCC_GetSysClockFreq+0x248>
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <HAL_RCC_GetSysClockFreq+0x114>
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d056      	beq.n	800911c <HAL_RCC_GetSysClockFreq+0x1c0>
 800906e:	e099      	b.n	80091a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009070:	4b6f      	ldr	r3, [pc, #444]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0320 	and.w	r3, r3, #32
 8009078:	2b00      	cmp	r3, #0
 800907a:	d02d      	beq.n	80090d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800907c:	4b6c      	ldr	r3, [pc, #432]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	08db      	lsrs	r3, r3, #3
 8009082:	f003 0303 	and.w	r3, r3, #3
 8009086:	4a6b      	ldr	r2, [pc, #428]	; (8009234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009088:	fa22 f303 	lsr.w	r3, r2, r3
 800908c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	ee07 3a90 	vmov	s15, r3
 8009094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a6:	4b62      	ldr	r3, [pc, #392]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ae:	ee07 3a90 	vmov	s15, r3
 80090b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80090ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009240 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80090d6:	e087      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	ee07 3a90 	vmov	s15, r3
 80090de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009244 <HAL_RCC_GetSysClockFreq+0x2e8>
 80090e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ea:	4b51      	ldr	r3, [pc, #324]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80090fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009240 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800910a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800910e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800911a:	e065      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	ee07 3a90 	vmov	s15, r3
 8009122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009126:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009248 <HAL_RCC_GetSysClockFreq+0x2ec>
 800912a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800912e:	4b40      	ldr	r3, [pc, #256]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009142:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009240 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800914a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800914e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800915e:	e043      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	ee07 3a90 	vmov	s15, r3
 8009166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800924c <HAL_RCC_GetSysClockFreq+0x2f0>
 800916e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009172:	4b2f      	ldr	r3, [pc, #188]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009182:	ed97 6a02 	vldr	s12, [r7, #8]
 8009186:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009240 <HAL_RCC_GetSysClockFreq+0x2e4>
 800918a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800919a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091a2:	e021      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	ee07 3a90 	vmov	s15, r3
 80091aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009248 <HAL_RCC_GetSysClockFreq+0x2ec>
 80091b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091b6:	4b1e      	ldr	r3, [pc, #120]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80091ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009240 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80091e8:	4b11      	ldr	r3, [pc, #68]	; (8009230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ec:	0a5b      	lsrs	r3, r3, #9
 80091ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091f2:	3301      	adds	r3, #1
 80091f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	ee07 3a90 	vmov	s15, r3
 80091fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009200:	edd7 6a07 	vldr	s13, [r7, #28]
 8009204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800920c:	ee17 3a90 	vmov	r3, s15
 8009210:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009212:	e005      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	61bb      	str	r3, [r7, #24]
    break;
 8009218:	e002      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800921a:	4b07      	ldr	r3, [pc, #28]	; (8009238 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800921c:	61bb      	str	r3, [r7, #24]
    break;
 800921e:	bf00      	nop
  }

  return sysclockfreq;
 8009220:	69bb      	ldr	r3, [r7, #24]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3724      	adds	r7, #36	; 0x24
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	58024400 	.word	0x58024400
 8009234:	03d09000 	.word	0x03d09000
 8009238:	003d0900 	.word	0x003d0900
 800923c:	017d7840 	.word	0x017d7840
 8009240:	46000000 	.word	0x46000000
 8009244:	4c742400 	.word	0x4c742400
 8009248:	4a742400 	.word	0x4a742400
 800924c:	4bbebc20 	.word	0x4bbebc20

08009250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009256:	f7ff fe81 	bl	8008f5c <HAL_RCC_GetSysClockFreq>
 800925a:	4602      	mov	r2, r0
 800925c:	4b10      	ldr	r3, [pc, #64]	; (80092a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	0a1b      	lsrs	r3, r3, #8
 8009262:	f003 030f 	and.w	r3, r3, #15
 8009266:	490f      	ldr	r1, [pc, #60]	; (80092a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009268:	5ccb      	ldrb	r3, [r1, r3]
 800926a:	f003 031f 	and.w	r3, r3, #31
 800926e:	fa22 f303 	lsr.w	r3, r2, r3
 8009272:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009274:	4b0a      	ldr	r3, [pc, #40]	; (80092a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	f003 030f 	and.w	r3, r3, #15
 800927c:	4a09      	ldr	r2, [pc, #36]	; (80092a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800927e:	5cd3      	ldrb	r3, [r2, r3]
 8009280:	f003 031f 	and.w	r3, r3, #31
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	fa22 f303 	lsr.w	r3, r2, r3
 800928a:	4a07      	ldr	r2, [pc, #28]	; (80092a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800928c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800928e:	4a07      	ldr	r2, [pc, #28]	; (80092ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009294:	4b04      	ldr	r3, [pc, #16]	; (80092a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009296:	681b      	ldr	r3, [r3, #0]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	58024400 	.word	0x58024400
 80092a4:	0800fe84 	.word	0x0800fe84
 80092a8:	24000030 	.word	0x24000030
 80092ac:	2400002c 	.word	0x2400002c

080092b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80092b4:	f7ff ffcc 	bl	8009250 <HAL_RCC_GetHCLKFreq>
 80092b8:	4602      	mov	r2, r0
 80092ba:	4b06      	ldr	r3, [pc, #24]	; (80092d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	091b      	lsrs	r3, r3, #4
 80092c0:	f003 0307 	and.w	r3, r3, #7
 80092c4:	4904      	ldr	r1, [pc, #16]	; (80092d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092c6:	5ccb      	ldrb	r3, [r1, r3]
 80092c8:	f003 031f 	and.w	r3, r3, #31
 80092cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	58024400 	.word	0x58024400
 80092d8:	0800fe84 	.word	0x0800fe84

080092dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80092e0:	f7ff ffb6 	bl	8009250 <HAL_RCC_GetHCLKFreq>
 80092e4:	4602      	mov	r2, r0
 80092e6:	4b06      	ldr	r3, [pc, #24]	; (8009300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	0a1b      	lsrs	r3, r3, #8
 80092ec:	f003 0307 	and.w	r3, r3, #7
 80092f0:	4904      	ldr	r1, [pc, #16]	; (8009304 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092f2:	5ccb      	ldrb	r3, [r1, r3]
 80092f4:	f003 031f 	and.w	r3, r3, #31
 80092f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	58024400 	.word	0x58024400
 8009304:	0800fe84 	.word	0x0800fe84

08009308 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009310:	2300      	movs	r3, #0
 8009312:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009314:	2300      	movs	r3, #0
 8009316:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d03f      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009328:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800932c:	d02a      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800932e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009332:	d824      	bhi.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009338:	d018      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800933a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800933e:	d81e      	bhi.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009340:	2b00      	cmp	r3, #0
 8009342:	d003      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009348:	d007      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800934a:	e018      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800934c:	4ba3      	ldr	r3, [pc, #652]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009350:	4aa2      	ldr	r2, [pc, #648]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009356:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009358:	e015      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	3304      	adds	r3, #4
 800935e:	2102      	movs	r1, #2
 8009360:	4618      	mov	r0, r3
 8009362:	f001 fff9 	bl	800b358 <RCCEx_PLL2_Config>
 8009366:	4603      	mov	r3, r0
 8009368:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800936a:	e00c      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3324      	adds	r3, #36	; 0x24
 8009370:	2102      	movs	r1, #2
 8009372:	4618      	mov	r0, r3
 8009374:	f002 f8a2 	bl	800b4bc <RCCEx_PLL3_Config>
 8009378:	4603      	mov	r3, r0
 800937a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800937c:	e003      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	75fb      	strb	r3, [r7, #23]
      break;
 8009382:	e000      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009386:	7dfb      	ldrb	r3, [r7, #23]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d109      	bne.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800938c:	4b93      	ldr	r3, [pc, #588]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800938e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009398:	4990      	ldr	r1, [pc, #576]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800939a:	4313      	orrs	r3, r2
 800939c:	650b      	str	r3, [r1, #80]	; 0x50
 800939e:	e001      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
 80093a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d03d      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	d826      	bhi.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80093b8:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80093ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093be:	bf00      	nop
 80093c0:	080093d5 	.word	0x080093d5
 80093c4:	080093e3 	.word	0x080093e3
 80093c8:	080093f5 	.word	0x080093f5
 80093cc:	0800940d 	.word	0x0800940d
 80093d0:	0800940d 	.word	0x0800940d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093d4:	4b81      	ldr	r3, [pc, #516]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d8:	4a80      	ldr	r2, [pc, #512]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093e0:	e015      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	3304      	adds	r3, #4
 80093e6:	2100      	movs	r1, #0
 80093e8:	4618      	mov	r0, r3
 80093ea:	f001 ffb5 	bl	800b358 <RCCEx_PLL2_Config>
 80093ee:	4603      	mov	r3, r0
 80093f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093f2:	e00c      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3324      	adds	r3, #36	; 0x24
 80093f8:	2100      	movs	r1, #0
 80093fa:	4618      	mov	r0, r3
 80093fc:	f002 f85e 	bl	800b4bc <RCCEx_PLL3_Config>
 8009400:	4603      	mov	r3, r0
 8009402:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009404:	e003      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	75fb      	strb	r3, [r7, #23]
      break;
 800940a:	e000      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800940c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d109      	bne.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009414:	4b71      	ldr	r3, [pc, #452]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009418:	f023 0207 	bic.w	r2, r3, #7
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009420:	496e      	ldr	r1, [pc, #440]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009422:	4313      	orrs	r3, r2
 8009424:	650b      	str	r3, [r1, #80]	; 0x50
 8009426:	e001      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009428:	7dfb      	ldrb	r3, [r7, #23]
 800942a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009434:	2b00      	cmp	r3, #0
 8009436:	d042      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800943c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009440:	d02b      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009446:	d825      	bhi.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009448:	2bc0      	cmp	r3, #192	; 0xc0
 800944a:	d028      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800944c:	2bc0      	cmp	r3, #192	; 0xc0
 800944e:	d821      	bhi.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009450:	2b80      	cmp	r3, #128	; 0x80
 8009452:	d016      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009454:	2b80      	cmp	r3, #128	; 0x80
 8009456:	d81d      	bhi.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009458:	2b00      	cmp	r3, #0
 800945a:	d002      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800945c:	2b40      	cmp	r3, #64	; 0x40
 800945e:	d007      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009460:	e018      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009462:	4b5e      	ldr	r3, [pc, #376]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009466:	4a5d      	ldr	r2, [pc, #372]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800946c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800946e:	e017      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	3304      	adds	r3, #4
 8009474:	2100      	movs	r1, #0
 8009476:	4618      	mov	r0, r3
 8009478:	f001 ff6e 	bl	800b358 <RCCEx_PLL2_Config>
 800947c:	4603      	mov	r3, r0
 800947e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009480:	e00e      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	3324      	adds	r3, #36	; 0x24
 8009486:	2100      	movs	r1, #0
 8009488:	4618      	mov	r0, r3
 800948a:	f002 f817 	bl	800b4bc <RCCEx_PLL3_Config>
 800948e:	4603      	mov	r3, r0
 8009490:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009492:	e005      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	75fb      	strb	r3, [r7, #23]
      break;
 8009498:	e002      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800949a:	bf00      	nop
 800949c:	e000      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800949e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d109      	bne.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80094a6:	4b4d      	ldr	r3, [pc, #308]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b2:	494a      	ldr	r1, [pc, #296]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	650b      	str	r3, [r1, #80]	; 0x50
 80094b8:	e001      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d049      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094d4:	d030      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80094d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094da:	d82a      	bhi.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094e0:	d02c      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80094e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094e6:	d824      	bhi.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094ec:	d018      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80094ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094f2:	d81e      	bhi.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d003      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80094f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094fc:	d007      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80094fe:	e018      	b.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009500:	4b36      	ldr	r3, [pc, #216]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009504:	4a35      	ldr	r2, [pc, #212]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800950a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800950c:	e017      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	3304      	adds	r3, #4
 8009512:	2100      	movs	r1, #0
 8009514:	4618      	mov	r0, r3
 8009516:	f001 ff1f 	bl	800b358 <RCCEx_PLL2_Config>
 800951a:	4603      	mov	r3, r0
 800951c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800951e:	e00e      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3324      	adds	r3, #36	; 0x24
 8009524:	2100      	movs	r1, #0
 8009526:	4618      	mov	r0, r3
 8009528:	f001 ffc8 	bl	800b4bc <RCCEx_PLL3_Config>
 800952c:	4603      	mov	r3, r0
 800952e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009530:	e005      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	75fb      	strb	r3, [r7, #23]
      break;
 8009536:	e002      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009538:	bf00      	nop
 800953a:	e000      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800953c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10a      	bne.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009544:	4b25      	ldr	r3, [pc, #148]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009548:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009552:	4922      	ldr	r1, [pc, #136]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009554:	4313      	orrs	r3, r2
 8009556:	658b      	str	r3, [r1, #88]	; 0x58
 8009558:	e001      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800955a:	7dfb      	ldrb	r3, [r7, #23]
 800955c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009566:	2b00      	cmp	r3, #0
 8009568:	d04b      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009570:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009574:	d030      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009576:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800957a:	d82a      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800957c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009580:	d02e      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009582:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009586:	d824      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800958c:	d018      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800958e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009592:	d81e      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009594:	2b00      	cmp	r3, #0
 8009596:	d003      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800959c:	d007      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800959e:	e018      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095a0:	4b0e      	ldr	r3, [pc, #56]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a4:	4a0d      	ldr	r2, [pc, #52]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095ac:	e019      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	3304      	adds	r3, #4
 80095b2:	2100      	movs	r1, #0
 80095b4:	4618      	mov	r0, r3
 80095b6:	f001 fecf 	bl	800b358 <RCCEx_PLL2_Config>
 80095ba:	4603      	mov	r3, r0
 80095bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80095be:	e010      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3324      	adds	r3, #36	; 0x24
 80095c4:	2100      	movs	r1, #0
 80095c6:	4618      	mov	r0, r3
 80095c8:	f001 ff78 	bl	800b4bc <RCCEx_PLL3_Config>
 80095cc:	4603      	mov	r3, r0
 80095ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095d0:	e007      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	75fb      	strb	r3, [r7, #23]
      break;
 80095d6:	e004      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80095d8:	bf00      	nop
 80095da:	e002      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80095dc:	58024400 	.word	0x58024400
      break;
 80095e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095e2:	7dfb      	ldrb	r3, [r7, #23]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095e8:	4b99      	ldr	r3, [pc, #612]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095f6:	4996      	ldr	r1, [pc, #600]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095f8:	4313      	orrs	r3, r2
 80095fa:	658b      	str	r3, [r1, #88]	; 0x58
 80095fc:	e001      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095fe:	7dfb      	ldrb	r3, [r7, #23]
 8009600:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800960a:	2b00      	cmp	r3, #0
 800960c:	d032      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009612:	2b30      	cmp	r3, #48	; 0x30
 8009614:	d01c      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8009616:	2b30      	cmp	r3, #48	; 0x30
 8009618:	d817      	bhi.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800961a:	2b20      	cmp	r3, #32
 800961c:	d00c      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800961e:	2b20      	cmp	r3, #32
 8009620:	d813      	bhi.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009622:	2b00      	cmp	r3, #0
 8009624:	d016      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009626:	2b10      	cmp	r3, #16
 8009628:	d10f      	bne.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800962a:	4b89      	ldr	r3, [pc, #548]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800962c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962e:	4a88      	ldr	r2, [pc, #544]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009636:	e00e      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3304      	adds	r3, #4
 800963c:	2102      	movs	r1, #2
 800963e:	4618      	mov	r0, r3
 8009640:	f001 fe8a 	bl	800b358 <RCCEx_PLL2_Config>
 8009644:	4603      	mov	r3, r0
 8009646:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009648:	e005      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	75fb      	strb	r3, [r7, #23]
      break;
 800964e:	e002      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009650:	bf00      	nop
 8009652:	e000      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009656:	7dfb      	ldrb	r3, [r7, #23]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d109      	bne.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800965c:	4b7c      	ldr	r3, [pc, #496]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800965e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009660:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009668:	4979      	ldr	r1, [pc, #484]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800966a:	4313      	orrs	r3, r2
 800966c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800966e:	e001      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d047      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009688:	d030      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800968a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800968e:	d82a      	bhi.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009690:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009694:	d02c      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009696:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800969a:	d824      	bhi.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800969c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096a0:	d018      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80096a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096a6:	d81e      	bhi.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80096ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096b0:	d007      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80096b2:	e018      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096b4:	4b66      	ldr	r3, [pc, #408]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b8:	4a65      	ldr	r2, [pc, #404]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096c0:	e017      	b.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	3304      	adds	r3, #4
 80096c6:	2100      	movs	r1, #0
 80096c8:	4618      	mov	r0, r3
 80096ca:	f001 fe45 	bl	800b358 <RCCEx_PLL2_Config>
 80096ce:	4603      	mov	r3, r0
 80096d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096d2:	e00e      	b.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3324      	adds	r3, #36	; 0x24
 80096d8:	2100      	movs	r1, #0
 80096da:	4618      	mov	r0, r3
 80096dc:	f001 feee 	bl	800b4bc <RCCEx_PLL3_Config>
 80096e0:	4603      	mov	r3, r0
 80096e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096e4:	e005      	b.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	75fb      	strb	r3, [r7, #23]
      break;
 80096ea:	e002      	b.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80096ec:	bf00      	nop
 80096ee:	e000      	b.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80096f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d109      	bne.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096f8:	4b55      	ldr	r3, [pc, #340]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80096fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009704:	4952      	ldr	r1, [pc, #328]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009706:	4313      	orrs	r3, r2
 8009708:	650b      	str	r3, [r1, #80]	; 0x50
 800970a:	e001      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800970c:	7dfb      	ldrb	r3, [r7, #23]
 800970e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d049      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009724:	d02e      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800972a:	d828      	bhi.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800972c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009730:	d02a      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009732:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009736:	d822      	bhi.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009738:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800973c:	d026      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800973e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009742:	d81c      	bhi.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009744:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009748:	d010      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800974a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800974e:	d816      	bhi.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009750:	2b00      	cmp	r3, #0
 8009752:	d01d      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009758:	d111      	bne.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	3304      	adds	r3, #4
 800975e:	2101      	movs	r1, #1
 8009760:	4618      	mov	r0, r3
 8009762:	f001 fdf9 	bl	800b358 <RCCEx_PLL2_Config>
 8009766:	4603      	mov	r3, r0
 8009768:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800976a:	e012      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	3324      	adds	r3, #36	; 0x24
 8009770:	2101      	movs	r1, #1
 8009772:	4618      	mov	r0, r3
 8009774:	f001 fea2 	bl	800b4bc <RCCEx_PLL3_Config>
 8009778:	4603      	mov	r3, r0
 800977a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800977c:	e009      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	75fb      	strb	r3, [r7, #23]
      break;
 8009782:	e006      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009784:	bf00      	nop
 8009786:	e004      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009788:	bf00      	nop
 800978a:	e002      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800978c:	bf00      	nop
 800978e:	e000      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009792:	7dfb      	ldrb	r3, [r7, #23]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d109      	bne.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009798:	4b2d      	ldr	r3, [pc, #180]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800979a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800979c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097a4:	492a      	ldr	r1, [pc, #168]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80097a6:	4313      	orrs	r3, r2
 80097a8:	650b      	str	r3, [r1, #80]	; 0x50
 80097aa:	e001      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ac:	7dfb      	ldrb	r3, [r7, #23]
 80097ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d04d      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80097c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097c6:	d02e      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80097c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097cc:	d828      	bhi.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097d2:	d02a      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80097d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097d8:	d822      	bhi.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097de:	d026      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80097e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097e4:	d81c      	bhi.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ea:	d010      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80097ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097f0:	d816      	bhi.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d01d      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80097f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097fa:	d111      	bne.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3304      	adds	r3, #4
 8009800:	2101      	movs	r1, #1
 8009802:	4618      	mov	r0, r3
 8009804:	f001 fda8 	bl	800b358 <RCCEx_PLL2_Config>
 8009808:	4603      	mov	r3, r0
 800980a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800980c:	e012      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	3324      	adds	r3, #36	; 0x24
 8009812:	2101      	movs	r1, #1
 8009814:	4618      	mov	r0, r3
 8009816:	f001 fe51 	bl	800b4bc <RCCEx_PLL3_Config>
 800981a:	4603      	mov	r3, r0
 800981c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800981e:	e009      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	75fb      	strb	r3, [r7, #23]
      break;
 8009824:	e006      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009826:	bf00      	nop
 8009828:	e004      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800982a:	bf00      	nop
 800982c:	e002      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800982e:	bf00      	nop
 8009830:	e000      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009834:	7dfb      	ldrb	r3, [r7, #23]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10c      	bne.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800983a:	4b05      	ldr	r3, [pc, #20]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800983c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800983e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009848:	4901      	ldr	r1, [pc, #4]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800984a:	4313      	orrs	r3, r2
 800984c:	658b      	str	r3, [r1, #88]	; 0x58
 800984e:	e003      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009850:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d02f      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800986c:	d00e      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800986e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009872:	d814      	bhi.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009874:	2b00      	cmp	r3, #0
 8009876:	d015      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800987c:	d10f      	bne.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800987e:	4baf      	ldr	r3, [pc, #700]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009882:	4aae      	ldr	r2, [pc, #696]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009888:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800988a:	e00c      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	3304      	adds	r3, #4
 8009890:	2101      	movs	r1, #1
 8009892:	4618      	mov	r0, r3
 8009894:	f001 fd60 	bl	800b358 <RCCEx_PLL2_Config>
 8009898:	4603      	mov	r3, r0
 800989a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800989c:	e003      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	75fb      	strb	r3, [r7, #23]
      break;
 80098a2:	e000      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80098a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098a6:	7dfb      	ldrb	r3, [r7, #23]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d109      	bne.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80098ac:	4ba3      	ldr	r3, [pc, #652]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b8:	49a0      	ldr	r1, [pc, #640]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	650b      	str	r3, [r1, #80]	; 0x50
 80098be:	e001      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c0:	7dfb      	ldrb	r3, [r7, #23]
 80098c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d032      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d4:	2b03      	cmp	r3, #3
 80098d6:	d81b      	bhi.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80098d8:	a201      	add	r2, pc, #4	; (adr r2, 80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80098da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098de:	bf00      	nop
 80098e0:	08009917 	.word	0x08009917
 80098e4:	080098f1 	.word	0x080098f1
 80098e8:	080098ff 	.word	0x080098ff
 80098ec:	08009917 	.word	0x08009917
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098f0:	4b92      	ldr	r3, [pc, #584]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	4a91      	ldr	r2, [pc, #580]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80098f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098fc:	e00c      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	3304      	adds	r3, #4
 8009902:	2102      	movs	r1, #2
 8009904:	4618      	mov	r0, r3
 8009906:	f001 fd27 	bl	800b358 <RCCEx_PLL2_Config>
 800990a:	4603      	mov	r3, r0
 800990c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800990e:	e003      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	75fb      	strb	r3, [r7, #23]
      break;
 8009914:	e000      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009918:	7dfb      	ldrb	r3, [r7, #23]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d109      	bne.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800991e:	4b87      	ldr	r3, [pc, #540]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009922:	f023 0203 	bic.w	r2, r3, #3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800992a:	4984      	ldr	r1, [pc, #528]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800992c:	4313      	orrs	r3, r2
 800992e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009930:	e001      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009932:	7dfb      	ldrb	r3, [r7, #23]
 8009934:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800993e:	2b00      	cmp	r3, #0
 8009940:	f000 8086 	beq.w	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009944:	4b7e      	ldr	r3, [pc, #504]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a7d      	ldr	r2, [pc, #500]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800994a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800994e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009950:	f7f8 ffcc 	bl	80028ec <HAL_GetTick>
 8009954:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009956:	e009      	b.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009958:	f7f8 ffc8 	bl	80028ec <HAL_GetTick>
 800995c:	4602      	mov	r2, r0
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	2b64      	cmp	r3, #100	; 0x64
 8009964:	d902      	bls.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009966:	2303      	movs	r3, #3
 8009968:	75fb      	strb	r3, [r7, #23]
        break;
 800996a:	e005      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800996c:	4b74      	ldr	r3, [pc, #464]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009974:	2b00      	cmp	r3, #0
 8009976:	d0ef      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d166      	bne.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800997e:	4b6f      	ldr	r3, [pc, #444]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009980:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009988:	4053      	eors	r3, r2
 800998a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800998e:	2b00      	cmp	r3, #0
 8009990:	d013      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009992:	4b6a      	ldr	r3, [pc, #424]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800999a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800999c:	4b67      	ldr	r3, [pc, #412]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800999e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a0:	4a66      	ldr	r2, [pc, #408]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80099a8:	4b64      	ldr	r3, [pc, #400]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ac:	4a63      	ldr	r2, [pc, #396]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80099b4:	4a61      	ldr	r2, [pc, #388]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099c4:	d115      	bne.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c6:	f7f8 ff91 	bl	80028ec <HAL_GetTick>
 80099ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099cc:	e00b      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099ce:	f7f8 ff8d 	bl	80028ec <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099dc:	4293      	cmp	r3, r2
 80099de:	d902      	bls.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80099e0:	2303      	movs	r3, #3
 80099e2:	75fb      	strb	r3, [r7, #23]
            break;
 80099e4:	e005      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099e6:	4b55      	ldr	r3, [pc, #340]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80099e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0ed      	beq.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80099f2:	7dfb      	ldrb	r3, [r7, #23]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d126      	bne.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a06:	d10d      	bne.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009a08:	4b4c      	ldr	r3, [pc, #304]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a16:	0919      	lsrs	r1, r3, #4
 8009a18:	4b4a      	ldr	r3, [pc, #296]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009a1a:	400b      	ands	r3, r1
 8009a1c:	4947      	ldr	r1, [pc, #284]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	610b      	str	r3, [r1, #16]
 8009a22:	e005      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009a24:	4b45      	ldr	r3, [pc, #276]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	4a44      	ldr	r2, [pc, #272]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a2e:	6113      	str	r3, [r2, #16]
 8009a30:	4b42      	ldr	r3, [pc, #264]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a3e:	493f      	ldr	r1, [pc, #252]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a40:	4313      	orrs	r3, r2
 8009a42:	670b      	str	r3, [r1, #112]	; 0x70
 8009a44:	e004      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
 8009a48:	75bb      	strb	r3, [r7, #22]
 8009a4a:	e001      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 8085 	beq.w	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a62:	2b28      	cmp	r3, #40	; 0x28
 8009a64:	d866      	bhi.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009a66:	a201      	add	r2, pc, #4	; (adr r2, 8009a6c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6c:	08009b49 	.word	0x08009b49
 8009a70:	08009b35 	.word	0x08009b35
 8009a74:	08009b35 	.word	0x08009b35
 8009a78:	08009b35 	.word	0x08009b35
 8009a7c:	08009b35 	.word	0x08009b35
 8009a80:	08009b35 	.word	0x08009b35
 8009a84:	08009b35 	.word	0x08009b35
 8009a88:	08009b35 	.word	0x08009b35
 8009a8c:	08009b11 	.word	0x08009b11
 8009a90:	08009b35 	.word	0x08009b35
 8009a94:	08009b35 	.word	0x08009b35
 8009a98:	08009b35 	.word	0x08009b35
 8009a9c:	08009b35 	.word	0x08009b35
 8009aa0:	08009b35 	.word	0x08009b35
 8009aa4:	08009b35 	.word	0x08009b35
 8009aa8:	08009b35 	.word	0x08009b35
 8009aac:	08009b23 	.word	0x08009b23
 8009ab0:	08009b35 	.word	0x08009b35
 8009ab4:	08009b35 	.word	0x08009b35
 8009ab8:	08009b35 	.word	0x08009b35
 8009abc:	08009b35 	.word	0x08009b35
 8009ac0:	08009b35 	.word	0x08009b35
 8009ac4:	08009b35 	.word	0x08009b35
 8009ac8:	08009b35 	.word	0x08009b35
 8009acc:	08009b49 	.word	0x08009b49
 8009ad0:	08009b35 	.word	0x08009b35
 8009ad4:	08009b35 	.word	0x08009b35
 8009ad8:	08009b35 	.word	0x08009b35
 8009adc:	08009b35 	.word	0x08009b35
 8009ae0:	08009b35 	.word	0x08009b35
 8009ae4:	08009b35 	.word	0x08009b35
 8009ae8:	08009b35 	.word	0x08009b35
 8009aec:	08009b49 	.word	0x08009b49
 8009af0:	08009b35 	.word	0x08009b35
 8009af4:	08009b35 	.word	0x08009b35
 8009af8:	08009b35 	.word	0x08009b35
 8009afc:	08009b35 	.word	0x08009b35
 8009b00:	08009b35 	.word	0x08009b35
 8009b04:	08009b35 	.word	0x08009b35
 8009b08:	08009b35 	.word	0x08009b35
 8009b0c:	08009b49 	.word	0x08009b49
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	3304      	adds	r3, #4
 8009b14:	2101      	movs	r1, #1
 8009b16:	4618      	mov	r0, r3
 8009b18:	f001 fc1e 	bl	800b358 <RCCEx_PLL2_Config>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b20:	e013      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3324      	adds	r3, #36	; 0x24
 8009b26:	2101      	movs	r1, #1
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f001 fcc7 	bl	800b4bc <RCCEx_PLL3_Config>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b32:	e00a      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	75fb      	strb	r3, [r7, #23]
      break;
 8009b38:	e007      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009b3a:	bf00      	nop
 8009b3c:	58024400 	.word	0x58024400
 8009b40:	58024800 	.word	0x58024800
 8009b44:	00ffffcf 	.word	0x00ffffcf
      break;
 8009b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b4a:	7dfb      	ldrb	r3, [r7, #23]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d109      	bne.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b50:	4b96      	ldr	r3, [pc, #600]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b54:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b5c:	4993      	ldr	r1, [pc, #588]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	654b      	str	r3, [r1, #84]	; 0x54
 8009b62:	e001      	b.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
 8009b66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 0302 	and.w	r3, r3, #2
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d038      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b78:	2b05      	cmp	r3, #5
 8009b7a:	d821      	bhi.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009b7c:	a201      	add	r2, pc, #4	; (adr r2, 8009b84 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b82:	bf00      	nop
 8009b84:	08009bc7 	.word	0x08009bc7
 8009b88:	08009b9d 	.word	0x08009b9d
 8009b8c:	08009baf 	.word	0x08009baf
 8009b90:	08009bc7 	.word	0x08009bc7
 8009b94:	08009bc7 	.word	0x08009bc7
 8009b98:	08009bc7 	.word	0x08009bc7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f001 fbd8 	bl	800b358 <RCCEx_PLL2_Config>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009bac:	e00c      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	3324      	adds	r3, #36	; 0x24
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f001 fc81 	bl	800b4bc <RCCEx_PLL3_Config>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009bbe:	e003      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8009bc4:	e000      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d109      	bne.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009bce:	4b77      	ldr	r3, [pc, #476]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd2:	f023 0207 	bic.w	r2, r3, #7
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bda:	4974      	ldr	r1, [pc, #464]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	654b      	str	r3, [r1, #84]	; 0x54
 8009be0:	e001      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 0304 	and.w	r3, r3, #4
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d03a      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bf8:	2b05      	cmp	r3, #5
 8009bfa:	d821      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009bfc:	a201      	add	r2, pc, #4	; (adr r2, 8009c04 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c02:	bf00      	nop
 8009c04:	08009c47 	.word	0x08009c47
 8009c08:	08009c1d 	.word	0x08009c1d
 8009c0c:	08009c2f 	.word	0x08009c2f
 8009c10:	08009c47 	.word	0x08009c47
 8009c14:	08009c47 	.word	0x08009c47
 8009c18:	08009c47 	.word	0x08009c47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	2101      	movs	r1, #1
 8009c22:	4618      	mov	r0, r3
 8009c24:	f001 fb98 	bl	800b358 <RCCEx_PLL2_Config>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c2c:	e00c      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	3324      	adds	r3, #36	; 0x24
 8009c32:	2101      	movs	r1, #1
 8009c34:	4618      	mov	r0, r3
 8009c36:	f001 fc41 	bl	800b4bc <RCCEx_PLL3_Config>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c3e:	e003      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	75fb      	strb	r3, [r7, #23]
      break;
 8009c44:	e000      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10a      	bne.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c4e:	4b57      	ldr	r3, [pc, #348]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c52:	f023 0207 	bic.w	r2, r3, #7
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c5c:	4953      	ldr	r1, [pc, #332]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	658b      	str	r3, [r1, #88]	; 0x58
 8009c62:	e001      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0320 	and.w	r3, r3, #32
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d04b      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c7e:	d02e      	beq.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c84:	d828      	bhi.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c8a:	d02a      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c90:	d822      	bhi.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c96:	d026      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009c98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c9c:	d81c      	bhi.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ca2:	d010      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ca8:	d816      	bhi.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d01d      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cb2:	d111      	bne.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	2100      	movs	r1, #0
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f001 fb4c 	bl	800b358 <RCCEx_PLL2_Config>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009cc4:	e012      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	3324      	adds	r3, #36	; 0x24
 8009cca:	2102      	movs	r1, #2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f001 fbf5 	bl	800b4bc <RCCEx_PLL3_Config>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009cd6:	e009      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	75fb      	strb	r3, [r7, #23]
      break;
 8009cdc:	e006      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cde:	bf00      	nop
 8009ce0:	e004      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009ce2:	bf00      	nop
 8009ce4:	e002      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009ce6:	bf00      	nop
 8009ce8:	e000      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10a      	bne.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cf2:	4b2e      	ldr	r3, [pc, #184]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d00:	492a      	ldr	r1, [pc, #168]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d02:	4313      	orrs	r3, r2
 8009d04:	654b      	str	r3, [r1, #84]	; 0x54
 8009d06:	e001      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d08:	7dfb      	ldrb	r3, [r7, #23]
 8009d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d04d      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d22:	d02e      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009d24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d28:	d828      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d2e:	d02a      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d34:	d822      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d3a:	d026      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009d3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d40:	d81c      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d46:	d010      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d4c:	d816      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d01d      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d56:	d111      	bne.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f001 fafa 	bl	800b358 <RCCEx_PLL2_Config>
 8009d64:	4603      	mov	r3, r0
 8009d66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d68:	e012      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	3324      	adds	r3, #36	; 0x24
 8009d6e:	2102      	movs	r1, #2
 8009d70:	4618      	mov	r0, r3
 8009d72:	f001 fba3 	bl	800b4bc <RCCEx_PLL3_Config>
 8009d76:	4603      	mov	r3, r0
 8009d78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d7a:	e009      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d80:	e006      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d82:	bf00      	nop
 8009d84:	e004      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d86:	bf00      	nop
 8009d88:	e002      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d8a:	bf00      	nop
 8009d8c:	e000      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10c      	bne.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d96:	4b05      	ldr	r3, [pc, #20]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009da4:	4901      	ldr	r1, [pc, #4]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	658b      	str	r3, [r1, #88]	; 0x58
 8009daa:	e003      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009dac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db0:	7dfb      	ldrb	r3, [r7, #23]
 8009db2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d04b      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009dc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009dca:	d02e      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009dcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009dd0:	d828      	bhi.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dd6:	d02a      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ddc:	d822      	bhi.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009dde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009de2:	d026      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009de4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009de8:	d81c      	bhi.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009dea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dee:	d010      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009df4:	d816      	bhi.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d01d      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dfe:	d111      	bne.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3304      	adds	r3, #4
 8009e04:	2100      	movs	r1, #0
 8009e06:	4618      	mov	r0, r3
 8009e08:	f001 faa6 	bl	800b358 <RCCEx_PLL2_Config>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e10:	e012      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	3324      	adds	r3, #36	; 0x24
 8009e16:	2102      	movs	r1, #2
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f001 fb4f 	bl	800b4bc <RCCEx_PLL3_Config>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e22:	e009      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	75fb      	strb	r3, [r7, #23]
      break;
 8009e28:	e006      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e2a:	bf00      	nop
 8009e2c:	e004      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e2e:	bf00      	nop
 8009e30:	e002      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e32:	bf00      	nop
 8009e34:	e000      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e38:	7dfb      	ldrb	r3, [r7, #23]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d10a      	bne.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e3e:	4b9d      	ldr	r3, [pc, #628]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e4c:	4999      	ldr	r1, [pc, #612]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	658b      	str	r3, [r1, #88]	; 0x58
 8009e52:	e001      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
 8009e56:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0308 	and.w	r3, r3, #8
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d01a      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e6e:	d10a      	bne.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3324      	adds	r3, #36	; 0x24
 8009e74:	2102      	movs	r1, #2
 8009e76:	4618      	mov	r0, r3
 8009e78:	f001 fb20 	bl	800b4bc <RCCEx_PLL3_Config>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e86:	4b8b      	ldr	r3, [pc, #556]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e94:	4987      	ldr	r1, [pc, #540]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e96:	4313      	orrs	r3, r2
 8009e98:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 0310 	and.w	r3, r3, #16
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d01a      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eb0:	d10a      	bne.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	3324      	adds	r3, #36	; 0x24
 8009eb6:	2102      	movs	r1, #2
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f001 faff 	bl	800b4bc <RCCEx_PLL3_Config>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ec8:	4b7a      	ldr	r3, [pc, #488]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ed6:	4977      	ldr	r1, [pc, #476]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d034      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ef2:	d01d      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ef8:	d817      	bhi.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f02:	d009      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009f04:	e011      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	3304      	adds	r3, #4
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f001 fa23 	bl	800b358 <RCCEx_PLL2_Config>
 8009f12:	4603      	mov	r3, r0
 8009f14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f16:	e00c      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3324      	adds	r3, #36	; 0x24
 8009f1c:	2102      	movs	r1, #2
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f001 facc 	bl	800b4bc <RCCEx_PLL3_Config>
 8009f24:	4603      	mov	r3, r0
 8009f26:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f28:	e003      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f2e:	e000      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10a      	bne.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f38:	4b5e      	ldr	r3, [pc, #376]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f46:	495b      	ldr	r1, [pc, #364]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	658b      	str	r3, [r1, #88]	; 0x58
 8009f4c:	e001      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f4e:	7dfb      	ldrb	r3, [r7, #23]
 8009f50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d033      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f68:	d01c      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009f6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f6e:	d816      	bhi.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f74:	d003      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f7a:	d007      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009f7c:	e00f      	b.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f7e:	4b4d      	ldr	r3, [pc, #308]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f82:	4a4c      	ldr	r2, [pc, #304]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f8a:	e00c      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3324      	adds	r3, #36	; 0x24
 8009f90:	2101      	movs	r1, #1
 8009f92:	4618      	mov	r0, r3
 8009f94:	f001 fa92 	bl	800b4bc <RCCEx_PLL3_Config>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f9c:	e003      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa2:	e000      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fa6:	7dfb      	ldrb	r3, [r7, #23]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10a      	bne.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009fac:	4b41      	ldr	r3, [pc, #260]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fba:	493e      	ldr	r1, [pc, #248]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	654b      	str	r3, [r1, #84]	; 0x54
 8009fc0:	e001      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc2:	7dfb      	ldrb	r3, [r7, #23]
 8009fc4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d029      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d003      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fde:	d007      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009fe0:	e00f      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fe2:	4b34      	ldr	r3, [pc, #208]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	4a33      	ldr	r2, [pc, #204]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fee:	e00b      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	2102      	movs	r1, #2
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f001 f9ae 	bl	800b358 <RCCEx_PLL2_Config>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a000:	e002      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	75fb      	strb	r3, [r7, #23]
      break;
 800a006:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a008:	7dfb      	ldrb	r3, [r7, #23]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d109      	bne.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a00e:	4b29      	ldr	r3, [pc, #164]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a012:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a01a:	4926      	ldr	r1, [pc, #152]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a01c:	4313      	orrs	r3, r2
 800a01e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a020:	e001      	b.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
 800a024:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00a      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	3324      	adds	r3, #36	; 0x24
 800a036:	2102      	movs	r1, #2
 800a038:	4618      	mov	r0, r3
 800a03a:	f001 fa3f 	bl	800b4bc <RCCEx_PLL3_Config>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d033      	beq.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a05c:	d017      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a05e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a062:	d811      	bhi.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a068:	d013      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a06a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a06e:	d80b      	bhi.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a070:	2b00      	cmp	r3, #0
 800a072:	d010      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a078:	d106      	bne.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a07a:	4b0e      	ldr	r3, [pc, #56]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07e:	4a0d      	ldr	r2, [pc, #52]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a084:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a086:	e007      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	75fb      	strb	r3, [r7, #23]
      break;
 800a08c:	e004      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a08e:	bf00      	nop
 800a090:	e002      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a092:	bf00      	nop
 800a094:	e000      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a096:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10c      	bne.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a09e:	4b05      	ldr	r3, [pc, #20]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0aa:	4902      	ldr	r1, [pc, #8]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	654b      	str	r3, [r1, #84]	; 0x54
 800a0b0:	e004      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a0b2:	bf00      	nop
 800a0b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d008      	beq.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a0c8:	4b31      	ldr	r3, [pc, #196]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d4:	492e      	ldr	r1, [pc, #184]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d009      	beq.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a0e6:	4b2a      	ldr	r3, [pc, #168]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0f4:	4926      	ldr	r1, [pc, #152]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d008      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a106:	4b22      	ldr	r3, [pc, #136]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a10a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a112:	491f      	ldr	r1, [pc, #124]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a114:	4313      	orrs	r3, r2
 800a116:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00d      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a124:	4b1a      	ldr	r3, [pc, #104]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	4a19      	ldr	r2, [pc, #100]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a12a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a12e:	6113      	str	r3, [r2, #16]
 800a130:	4b17      	ldr	r3, [pc, #92]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a132:	691a      	ldr	r2, [r3, #16]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a13a:	4915      	ldr	r1, [pc, #84]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a13c:	4313      	orrs	r3, r2
 800a13e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	da08      	bge.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a148:	4b11      	ldr	r3, [pc, #68]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a14a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a14c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a154:	490e      	ldr	r1, [pc, #56]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a156:	4313      	orrs	r3, r2
 800a158:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d009      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a166:	4b0a      	ldr	r3, [pc, #40]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a16a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a174:	4906      	ldr	r1, [pc, #24]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a176:	4313      	orrs	r3, r2
 800a178:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a17a:	7dbb      	ldrb	r3, [r7, #22]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d101      	bne.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	e000      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a184:	2301      	movs	r3, #1
}
 800a186:	4618      	mov	r0, r3
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	58024400 	.word	0x58024400

0800a194 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b090      	sub	sp, #64	; 0x40
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1a2:	f040 8095 	bne.w	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a1a6:	4b97      	ldr	r3, [pc, #604]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1aa:	f003 0307 	and.w	r3, r3, #7
 800a1ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	2b04      	cmp	r3, #4
 800a1b4:	f200 8088 	bhi.w	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a1b8:	a201      	add	r2, pc, #4	; (adr r2, 800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1be:	bf00      	nop
 800a1c0:	0800a1d5 	.word	0x0800a1d5
 800a1c4:	0800a1fd 	.word	0x0800a1fd
 800a1c8:	0800a225 	.word	0x0800a225
 800a1cc:	0800a2c1 	.word	0x0800a2c1
 800a1d0:	0800a24d 	.word	0x0800a24d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1d4:	4b8b      	ldr	r3, [pc, #556]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1e0:	d108      	bne.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 ff64 	bl	800b0b4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1f0:	f000 bc94 	b.w	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f8:	f000 bc90 	b.w	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1fc:	4b81      	ldr	r3, [pc, #516]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a208:	d108      	bne.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a20a:	f107 0318 	add.w	r3, r7, #24
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 fca8 	bl	800ab64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a218:	f000 bc80 	b.w	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a21c:	2300      	movs	r3, #0
 800a21e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a220:	f000 bc7c 	b.w	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a224:	4b77      	ldr	r3, [pc, #476]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a22c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a230:	d108      	bne.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a232:	f107 030c 	add.w	r3, r7, #12
 800a236:	4618      	mov	r0, r3
 800a238:	f000 fde8 	bl	800ae0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a240:	f000 bc6c 	b.w	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a248:	f000 bc68 	b.w	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a24c:	4b6d      	ldr	r3, [pc, #436]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a24e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a254:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a256:	4b6b      	ldr	r3, [pc, #428]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 0304 	and.w	r3, r3, #4
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d10c      	bne.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a264:	2b00      	cmp	r3, #0
 800a266:	d109      	bne.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a268:	4b66      	ldr	r3, [pc, #408]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	08db      	lsrs	r3, r3, #3
 800a26e:	f003 0303 	and.w	r3, r3, #3
 800a272:	4a65      	ldr	r2, [pc, #404]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a274:	fa22 f303 	lsr.w	r3, r2, r3
 800a278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a27a:	e01f      	b.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a27c:	4b61      	ldr	r3, [pc, #388]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a288:	d106      	bne.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a28c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a290:	d102      	bne.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a292:	4b5e      	ldr	r3, [pc, #376]	; (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a294:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a296:	e011      	b.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a298:	4b5a      	ldr	r3, [pc, #360]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2a4:	d106      	bne.n	800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2ac:	d102      	bne.n	800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a2ae:	4b58      	ldr	r3, [pc, #352]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2b2:	e003      	b.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a2b8:	f000 bc30 	b.w	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a2bc:	f000 bc2e 	b.w	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a2c0:	4b54      	ldr	r3, [pc, #336]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2c4:	f000 bc2a 	b.w	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2cc:	f000 bc26 	b.w	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2d6:	f040 809f 	bne.w	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a2da:	4b4a      	ldr	r3, [pc, #296]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a2dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a2e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2ea:	d04d      	beq.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2f2:	f200 8084 	bhi.w	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f8:	2bc0      	cmp	r3, #192	; 0xc0
 800a2fa:	d07d      	beq.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fe:	2bc0      	cmp	r3, #192	; 0xc0
 800a300:	d87d      	bhi.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a304:	2b80      	cmp	r3, #128	; 0x80
 800a306:	d02d      	beq.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30a:	2b80      	cmp	r3, #128	; 0x80
 800a30c:	d877      	bhi.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	2b00      	cmp	r3, #0
 800a312:	d003      	beq.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a316:	2b40      	cmp	r3, #64	; 0x40
 800a318:	d012      	beq.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a31a:	e070      	b.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a31c:	4b39      	ldr	r3, [pc, #228]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a324:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a328:	d107      	bne.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a32a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 fec0 	bl	800b0b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a336:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a338:	e3f0      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a33a:	2300      	movs	r3, #0
 800a33c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a33e:	e3ed      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a340:	4b30      	ldr	r3, [pc, #192]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a34c:	d107      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a34e:	f107 0318 	add.w	r3, r7, #24
 800a352:	4618      	mov	r0, r3
 800a354:	f000 fc06 	bl	800ab64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a35c:	e3de      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a362:	e3db      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a364:	4b27      	ldr	r3, [pc, #156]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a36c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a370:	d107      	bne.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a372:	f107 030c 	add.w	r3, r7, #12
 800a376:	4618      	mov	r0, r3
 800a378:	f000 fd48 	bl	800ae0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a380:	e3cc      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a382:	2300      	movs	r3, #0
 800a384:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a386:	e3c9      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a388:	4b1e      	ldr	r3, [pc, #120]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a38a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a38c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a390:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a392:	4b1c      	ldr	r3, [pc, #112]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 0304 	and.w	r3, r3, #4
 800a39a:	2b04      	cmp	r3, #4
 800a39c:	d10c      	bne.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d109      	bne.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3a4:	4b17      	ldr	r3, [pc, #92]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	08db      	lsrs	r3, r3, #3
 800a3aa:	f003 0303 	and.w	r3, r3, #3
 800a3ae:	4a16      	ldr	r2, [pc, #88]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a3b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3b6:	e01e      	b.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3b8:	4b12      	ldr	r3, [pc, #72]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3c4:	d106      	bne.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3cc:	d102      	bne.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a3ce:	4b0f      	ldr	r3, [pc, #60]	; (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3d2:	e010      	b.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3d4:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3e0:	d106      	bne.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3e8:	d102      	bne.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a3ea:	4b09      	ldr	r3, [pc, #36]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ee:	e002      	b.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a3f4:	e392      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3f6:	e391      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a3f8:	4b06      	ldr	r3, [pc, #24]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3fc:	e38e      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a3fe:	2300      	movs	r3, #0
 800a400:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a402:	e38b      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a404:	58024400 	.word	0x58024400
 800a408:	03d09000 	.word	0x03d09000
 800a40c:	003d0900 	.word	0x003d0900
 800a410:	017d7840 	.word	0x017d7840
 800a414:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a41e:	f040 809c 	bne.w	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a422:	4b9d      	ldr	r3, [pc, #628]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a426:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a42a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a432:	d054      	beq.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a436:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a43a:	f200 808b 	bhi.w	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a440:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a444:	f000 8083 	beq.w	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a44e:	f200 8081 	bhi.w	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a458:	d02f      	beq.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a460:	d878      	bhi.n	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a464:	2b00      	cmp	r3, #0
 800a466:	d004      	beq.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a46e:	d012      	beq.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a470:	e070      	b.n	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a472:	4b89      	ldr	r3, [pc, #548]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a47a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a47e:	d107      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a484:	4618      	mov	r0, r3
 800a486:	f000 fe15 	bl	800b0b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a48e:	e345      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a494:	e342      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a496:	4b80      	ldr	r3, [pc, #512]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a49e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4a2:	d107      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4a4:	f107 0318 	add.w	r3, r7, #24
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f000 fb5b 	bl	800ab64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4b2:	e333      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4b8:	e330      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4ba:	4b77      	ldr	r3, [pc, #476]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4c6:	d107      	bne.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4c8:	f107 030c 	add.w	r3, r7, #12
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 fc9d 	bl	800ae0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4d6:	e321      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4dc:	e31e      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a4de:	4b6e      	ldr	r3, [pc, #440]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4e6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4e8:	4b6b      	ldr	r3, [pc, #428]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0304 	and.w	r3, r3, #4
 800a4f0:	2b04      	cmp	r3, #4
 800a4f2:	d10c      	bne.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d109      	bne.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4fa:	4b67      	ldr	r3, [pc, #412]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	08db      	lsrs	r3, r3, #3
 800a500:	f003 0303 	and.w	r3, r3, #3
 800a504:	4a65      	ldr	r2, [pc, #404]	; (800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a506:	fa22 f303 	lsr.w	r3, r2, r3
 800a50a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a50c:	e01e      	b.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a50e:	4b62      	ldr	r3, [pc, #392]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a51a:	d106      	bne.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a51e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a522:	d102      	bne.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a524:	4b5e      	ldr	r3, [pc, #376]	; (800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a526:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a528:	e010      	b.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a52a:	4b5b      	ldr	r3, [pc, #364]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a536:	d106      	bne.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a53a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a53e:	d102      	bne.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a540:	4b58      	ldr	r3, [pc, #352]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a542:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a544:	e002      	b.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a54a:	e2e7      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a54c:	e2e6      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a54e:	4b56      	ldr	r3, [pc, #344]	; (800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a552:	e2e3      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a558:	e2e0      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a560:	f040 80a7 	bne.w	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a564:	4b4c      	ldr	r3, [pc, #304]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a568:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a56c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a574:	d055      	beq.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a578:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a57c:	f200 8096 	bhi.w	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a586:	f000 8084 	beq.w	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a590:	f200 808c 	bhi.w	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a59a:	d030      	beq.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5a2:	f200 8083 	bhi.w	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d004      	beq.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a5b2:	d012      	beq.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a5b4:	e07a      	b.n	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5b6:	4b38      	ldr	r3, [pc, #224]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5c2:	d107      	bne.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 fd73 	bl	800b0b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5d2:	e2a3      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5d8:	e2a0      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5da:	4b2f      	ldr	r3, [pc, #188]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5e6:	d107      	bne.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5e8:	f107 0318 	add.w	r3, r7, #24
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 fab9 	bl	800ab64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a5f6:	e291      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5fc:	e28e      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5fe:	4b26      	ldr	r3, [pc, #152]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a60a:	d107      	bne.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a60c:	f107 030c 	add.w	r3, r7, #12
 800a610:	4618      	mov	r0, r3
 800a612:	f000 fbfb 	bl	800ae0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a61a:	e27f      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a620:	e27c      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a622:	4b1d      	ldr	r3, [pc, #116]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a626:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a62a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a62c:	4b1a      	ldr	r3, [pc, #104]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0304 	and.w	r3, r3, #4
 800a634:	2b04      	cmp	r3, #4
 800a636:	d10c      	bne.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d109      	bne.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a63e:	4b16      	ldr	r3, [pc, #88]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	08db      	lsrs	r3, r3, #3
 800a644:	f003 0303 	and.w	r3, r3, #3
 800a648:	4a14      	ldr	r2, [pc, #80]	; (800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a64a:	fa22 f303 	lsr.w	r3, r2, r3
 800a64e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a650:	e01e      	b.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a652:	4b11      	ldr	r3, [pc, #68]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a65a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a65e:	d106      	bne.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a666:	d102      	bne.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a668:	4b0d      	ldr	r3, [pc, #52]	; (800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a66a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a66c:	e010      	b.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a66e:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a67a:	d106      	bne.n	800a68a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a67e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a682:	d102      	bne.n	800a68a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a684:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a686:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a688:	e002      	b.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a68e:	e245      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a690:	e244      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a692:	4b05      	ldr	r3, [pc, #20]	; (800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a696:	e241      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a698:	58024400 	.word	0x58024400
 800a69c:	03d09000 	.word	0x03d09000
 800a6a0:	003d0900 	.word	0x003d0900
 800a6a4:	017d7840 	.word	0x017d7840
 800a6a8:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6b0:	e234      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6b8:	f040 809c 	bne.w	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a6bc:	4b9b      	ldr	r3, [pc, #620]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a6be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a6c4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6cc:	d054      	beq.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6d4:	f200 808b 	bhi.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6de:	f000 8083 	beq.w	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6e8:	f200 8081 	bhi.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6f2:	d02f      	beq.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6fa:	d878      	bhi.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d004      	beq.n	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a708:	d012      	beq.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a70a:	e070      	b.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a70c:	4b87      	ldr	r3, [pc, #540]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a714:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a718:	d107      	bne.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a71a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 fcc8 	bl	800b0b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a726:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a728:	e1f8      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a72e:	e1f5      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a730:	4b7e      	ldr	r3, [pc, #504]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a73c:	d107      	bne.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a73e:	f107 0318 	add.w	r3, r7, #24
 800a742:	4618      	mov	r0, r3
 800a744:	f000 fa0e 	bl	800ab64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a74c:	e1e6      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a74e:	2300      	movs	r3, #0
 800a750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a752:	e1e3      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a754:	4b75      	ldr	r3, [pc, #468]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a75c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a760:	d107      	bne.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a762:	f107 030c 	add.w	r3, r7, #12
 800a766:	4618      	mov	r0, r3
 800a768:	f000 fb50 	bl	800ae0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a770:	e1d4      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a772:	2300      	movs	r3, #0
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a776:	e1d1      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a778:	4b6c      	ldr	r3, [pc, #432]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a77a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a77c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a780:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a782:	4b6a      	ldr	r3, [pc, #424]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f003 0304 	and.w	r3, r3, #4
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	d10c      	bne.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a790:	2b00      	cmp	r3, #0
 800a792:	d109      	bne.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a794:	4b65      	ldr	r3, [pc, #404]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	08db      	lsrs	r3, r3, #3
 800a79a:	f003 0303 	and.w	r3, r3, #3
 800a79e:	4a64      	ldr	r2, [pc, #400]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a7a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7a6:	e01e      	b.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7a8:	4b60      	ldr	r3, [pc, #384]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7b4:	d106      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7bc:	d102      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a7be:	4b5d      	ldr	r3, [pc, #372]	; (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7c2:	e010      	b.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7c4:	4b59      	ldr	r3, [pc, #356]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7d0:	d106      	bne.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7d8:	d102      	bne.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a7da:	4b57      	ldr	r3, [pc, #348]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7de:	e002      	b.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a7e4:	e19a      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a7e6:	e199      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a7e8:	4b54      	ldr	r3, [pc, #336]	; (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ec:	e196      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7f2:	e193      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a7fa:	d173      	bne.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a7fc:	4b4b      	ldr	r3, [pc, #300]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a7fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a800:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a804:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a80c:	d02f      	beq.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a814:	d863      	bhi.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800a816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d004      	beq.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a822:	d012      	beq.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800a824:	e05b      	b.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a826:	4b41      	ldr	r3, [pc, #260]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a82e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a832:	d107      	bne.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a834:	f107 0318 	add.w	r3, r7, #24
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 f993 	bl	800ab64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a842:	e16b      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a848:	e168      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a84a:	4b38      	ldr	r3, [pc, #224]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a856:	d107      	bne.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a858:	f107 030c 	add.w	r3, r7, #12
 800a85c:	4618      	mov	r0, r3
 800a85e:	f000 fad5 	bl	800ae0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a866:	e159      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a86c:	e156      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a86e:	4b2f      	ldr	r3, [pc, #188]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a872:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a876:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a878:	4b2c      	ldr	r3, [pc, #176]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0304 	and.w	r3, r3, #4
 800a880:	2b04      	cmp	r3, #4
 800a882:	d10c      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800a884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a886:	2b00      	cmp	r3, #0
 800a888:	d109      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a88a:	4b28      	ldr	r3, [pc, #160]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	08db      	lsrs	r3, r3, #3
 800a890:	f003 0303 	and.w	r3, r3, #3
 800a894:	4a26      	ldr	r2, [pc, #152]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a896:	fa22 f303 	lsr.w	r3, r2, r3
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a89c:	e01e      	b.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a89e:	4b23      	ldr	r3, [pc, #140]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8aa:	d106      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800a8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8b2:	d102      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a8b4:	4b1f      	ldr	r3, [pc, #124]	; (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b8:	e010      	b.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8ba:	4b1c      	ldr	r3, [pc, #112]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8c6:	d106      	bne.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8ce:	d102      	bne.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a8d0:	4b19      	ldr	r3, [pc, #100]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8d4:	e002      	b.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a8da:	e11f      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8dc:	e11e      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8e2:	e11b      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ea:	d13e      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a8ec:	4b0f      	ldr	r3, [pc, #60]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d004      	beq.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800a8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a902:	d01d      	beq.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a904:	e02e      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a906:	4b09      	ldr	r3, [pc, #36]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a90e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a912:	d107      	bne.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a918:	4618      	mov	r0, r3
 800a91a:	f000 fbcb 	bl	800b0b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a922:	e0fb      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a928:	e0f8      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a92a:	bf00      	nop
 800a92c:	58024400 	.word	0x58024400
 800a930:	03d09000 	.word	0x03d09000
 800a934:	003d0900 	.word	0x003d0900
 800a938:	017d7840 	.word	0x017d7840
 800a93c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a940:	4b79      	ldr	r3, [pc, #484]	; (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a94c:	d107      	bne.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a94e:	f107 0318 	add.w	r3, r7, #24
 800a952:	4618      	mov	r0, r3
 800a954:	f000 f906 	bl	800ab64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a95c:	e0de      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a962:	e0db      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a968:	e0d8      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a970:	f040 8085 	bne.w	800aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a974:	4b6c      	ldr	r3, [pc, #432]	; (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a978:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a97c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a984:	d06b      	beq.n	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a988:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a98c:	d874      	bhi.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a994:	d056      	beq.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a99c:	d86c      	bhi.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9a4:	d03b      	beq.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9ac:	d864      	bhi.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9b4:	d021      	beq.n	800a9fa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9bc:	d85c      	bhi.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d004      	beq.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9ca:	d004      	beq.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800a9cc:	e054      	b.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a9ce:	f000 f8b3 	bl	800ab38 <HAL_RCCEx_GetD3PCLK1Freq>
 800a9d2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a9d4:	e0a2      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9d6:	4b54      	ldr	r3, [pc, #336]	; (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9e2:	d107      	bne.n	800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9e4:	f107 0318 	add.w	r3, r7, #24
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 f8bb 	bl	800ab64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9f2:	e093      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9f8:	e090      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9fa:	4b4b      	ldr	r3, [pc, #300]	; (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa06:	d107      	bne.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa08:	f107 030c 	add.w	r3, r7, #12
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 f9fd 	bl	800ae0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa16:	e081      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa1c:	e07e      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa1e:	4b42      	ldr	r3, [pc, #264]	; (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0304 	and.w	r3, r3, #4
 800aa26:	2b04      	cmp	r3, #4
 800aa28:	d109      	bne.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa2a:	4b3f      	ldr	r3, [pc, #252]	; (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	08db      	lsrs	r3, r3, #3
 800aa30:	f003 0303 	and.w	r3, r3, #3
 800aa34:	4a3d      	ldr	r2, [pc, #244]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800aa36:	fa22 f303 	lsr.w	r3, r2, r3
 800aa3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa3c:	e06e      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa42:	e06b      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa44:	4b38      	ldr	r3, [pc, #224]	; (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa50:	d102      	bne.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800aa52:	4b37      	ldr	r3, [pc, #220]	; (800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa56:	e061      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa5c:	e05e      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa5e:	4b32      	ldr	r3, [pc, #200]	; (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa6a:	d102      	bne.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800aa6c:	4b31      	ldr	r3, [pc, #196]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa70:	e054      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa76:	e051      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa7c:	e04e      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa84:	d148      	bne.n	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800aa86:	4b28      	ldr	r3, [pc, #160]	; (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa8e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa96:	d02a      	beq.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800aa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa9e:	d838      	bhi.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d004      	beq.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800aaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aaac:	d00d      	beq.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800aaae:	e030      	b.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aab0:	4b1d      	ldr	r3, [pc, #116]	; (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aabc:	d102      	bne.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800aabe:	4b1d      	ldr	r3, [pc, #116]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aac0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aac2:	e02b      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aac8:	e028      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aaca:	4b17      	ldr	r3, [pc, #92]	; (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aad6:	d107      	bne.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aadc:	4618      	mov	r0, r3
 800aade:	f000 fae9 	bl	800b0b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aae6:	e019      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaec:	e016      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aaee:	4b0e      	ldr	r3, [pc, #56]	; (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aaf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aafa:	d107      	bne.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aafc:	f107 0318 	add.w	r3, r7, #24
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 f82f 	bl	800ab64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab0a:	e007      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab10:	e004      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ab12:	2300      	movs	r3, #0
 800ab14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab16:	e001      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800ab1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3740      	adds	r7, #64	; 0x40
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	58024400 	.word	0x58024400
 800ab2c:	03d09000 	.word	0x03d09000
 800ab30:	003d0900 	.word	0x003d0900
 800ab34:	017d7840 	.word	0x017d7840

0800ab38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab3c:	f7fe fb88 	bl	8009250 <HAL_RCC_GetHCLKFreq>
 800ab40:	4602      	mov	r2, r0
 800ab42:	4b06      	ldr	r3, [pc, #24]	; (800ab5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab44:	6a1b      	ldr	r3, [r3, #32]
 800ab46:	091b      	lsrs	r3, r3, #4
 800ab48:	f003 0307 	and.w	r3, r3, #7
 800ab4c:	4904      	ldr	r1, [pc, #16]	; (800ab60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ab4e:	5ccb      	ldrb	r3, [r1, r3]
 800ab50:	f003 031f 	and.w	r3, r3, #31
 800ab54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	58024400 	.word	0x58024400
 800ab60:	0800fe84 	.word	0x0800fe84

0800ab64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b089      	sub	sp, #36	; 0x24
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab6c:	4ba1      	ldr	r3, [pc, #644]	; (800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab70:	f003 0303 	and.w	r3, r3, #3
 800ab74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ab76:	4b9f      	ldr	r3, [pc, #636]	; (800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7a:	0b1b      	lsrs	r3, r3, #12
 800ab7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab82:	4b9c      	ldr	r3, [pc, #624]	; (800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab86:	091b      	lsrs	r3, r3, #4
 800ab88:	f003 0301 	and.w	r3, r3, #1
 800ab8c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ab8e:	4b99      	ldr	r3, [pc, #612]	; (800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab92:	08db      	lsrs	r3, r3, #3
 800ab94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	fb02 f303 	mul.w	r3, r2, r3
 800ab9e:	ee07 3a90 	vmov	s15, r3
 800aba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aba6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	2b00      	cmp	r3, #0
 800abae:	f000 8111 	beq.w	800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	f000 8083 	beq.w	800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	2b02      	cmp	r3, #2
 800abbe:	f200 80a1 	bhi.w	800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d003      	beq.n	800abd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d056      	beq.n	800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800abce:	e099      	b.n	800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abd0:	4b88      	ldr	r3, [pc, #544]	; (800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 0320 	and.w	r3, r3, #32
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d02d      	beq.n	800ac38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800abdc:	4b85      	ldr	r3, [pc, #532]	; (800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	08db      	lsrs	r3, r3, #3
 800abe2:	f003 0303 	and.w	r3, r3, #3
 800abe6:	4a84      	ldr	r2, [pc, #528]	; (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800abe8:	fa22 f303 	lsr.w	r3, r2, r3
 800abec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	ee07 3a90 	vmov	s15, r3
 800abf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	ee07 3a90 	vmov	s15, r3
 800abfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac06:	4b7b      	ldr	r3, [pc, #492]	; (800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac0e:	ee07 3a90 	vmov	s15, r3
 800ac12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800adfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ac36:	e087      	b.n	800ad48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	ee07 3a90 	vmov	s15, r3
 800ac3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ac46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac4a:	4b6a      	ldr	r3, [pc, #424]	; (800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800adfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac7a:	e065      	b.n	800ad48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac8e:	4b59      	ldr	r3, [pc, #356]	; (800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aca2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800adfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acbe:	e043      	b.n	800ad48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	ee07 3a90 	vmov	s15, r3
 800acc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800acce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd2:	4b48      	ldr	r3, [pc, #288]	; (800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acda:	ee07 3a90 	vmov	s15, r3
 800acde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ace6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800adfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad02:	e021      	b.n	800ad48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad16:	4b37      	ldr	r3, [pc, #220]	; (800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad1e:	ee07 3a90 	vmov	s15, r3
 800ad22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800adfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ad48:	4b2a      	ldr	r3, [pc, #168]	; (800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4c:	0a5b      	lsrs	r3, r3, #9
 800ad4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad52:	ee07 3a90 	vmov	s15, r3
 800ad56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad6e:	ee17 2a90 	vmov	r2, s15
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ad76:	4b1f      	ldr	r3, [pc, #124]	; (800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7a:	0c1b      	lsrs	r3, r3, #16
 800ad7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad80:	ee07 3a90 	vmov	s15, r3
 800ad84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad90:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad9c:	ee17 2a90 	vmov	r2, s15
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ada4:	4b13      	ldr	r3, [pc, #76]	; (800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ada6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada8:	0e1b      	lsrs	r3, r3, #24
 800adaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adae:	ee07 3a90 	vmov	s15, r3
 800adb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800adc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adca:	ee17 2a90 	vmov	r2, s15
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800add2:	e008      	b.n	800ade6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	609a      	str	r2, [r3, #8]
}
 800ade6:	bf00      	nop
 800ade8:	3724      	adds	r7, #36	; 0x24
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	58024400 	.word	0x58024400
 800adf8:	03d09000 	.word	0x03d09000
 800adfc:	46000000 	.word	0x46000000
 800ae00:	4c742400 	.word	0x4c742400
 800ae04:	4a742400 	.word	0x4a742400
 800ae08:	4bbebc20 	.word	0x4bbebc20

0800ae0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b089      	sub	sp, #36	; 0x24
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae14:	4ba1      	ldr	r3, [pc, #644]	; (800b09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae18:	f003 0303 	and.w	r3, r3, #3
 800ae1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ae1e:	4b9f      	ldr	r3, [pc, #636]	; (800b09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae22:	0d1b      	lsrs	r3, r3, #20
 800ae24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae2a:	4b9c      	ldr	r3, [pc, #624]	; (800b09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2e:	0a1b      	lsrs	r3, r3, #8
 800ae30:	f003 0301 	and.w	r3, r3, #1
 800ae34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ae36:	4b99      	ldr	r3, [pc, #612]	; (800b09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae3a:	08db      	lsrs	r3, r3, #3
 800ae3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	fb02 f303 	mul.w	r3, r2, r3
 800ae46:	ee07 3a90 	vmov	s15, r3
 800ae4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f000 8111 	beq.w	800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	f000 8083 	beq.w	800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	f200 80a1 	bhi.w	800afac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d003      	beq.n	800ae78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d056      	beq.n	800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ae76:	e099      	b.n	800afac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae78:	4b88      	ldr	r3, [pc, #544]	; (800b09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 0320 	and.w	r3, r3, #32
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d02d      	beq.n	800aee0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae84:	4b85      	ldr	r3, [pc, #532]	; (800b09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	08db      	lsrs	r3, r3, #3
 800ae8a:	f003 0303 	and.w	r3, r3, #3
 800ae8e:	4a84      	ldr	r2, [pc, #528]	; (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ae90:	fa22 f303 	lsr.w	r3, r2, r3
 800ae94:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	ee07 3a90 	vmov	s15, r3
 800ae9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	ee07 3a90 	vmov	s15, r3
 800aea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeae:	4b7b      	ldr	r3, [pc, #492]	; (800b09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeb6:	ee07 3a90 	vmov	s15, r3
 800aeba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aebe:	ed97 6a03 	vldr	s12, [r7, #12]
 800aec2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aede:	e087      	b.n	800aff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	ee07 3a90 	vmov	s15, r3
 800aee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aeee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aef2:	4b6a      	ldr	r3, [pc, #424]	; (800b09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aefa:	ee07 3a90 	vmov	s15, r3
 800aefe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af02:	ed97 6a03 	vldr	s12, [r7, #12]
 800af06:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af22:	e065      	b.n	800aff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b0ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af36:	4b59      	ldr	r3, [pc, #356]	; (800b09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af3e:	ee07 3a90 	vmov	s15, r3
 800af42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af46:	ed97 6a03 	vldr	s12, [r7, #12]
 800af4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af66:	e043      	b.n	800aff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	ee07 3a90 	vmov	s15, r3
 800af6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800af76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af7a:	4b48      	ldr	r3, [pc, #288]	; (800b09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af82:	ee07 3a90 	vmov	s15, r3
 800af86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afaa:	e021      	b.n	800aff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	ee07 3a90 	vmov	s15, r3
 800afb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b0ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800afba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afbe:	4b37      	ldr	r3, [pc, #220]	; (800b09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afc6:	ee07 3a90 	vmov	s15, r3
 800afca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afce:	ed97 6a03 	vldr	s12, [r7, #12]
 800afd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800aff0:	4b2a      	ldr	r3, [pc, #168]	; (800b09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff4:	0a5b      	lsrs	r3, r3, #9
 800aff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800affa:	ee07 3a90 	vmov	s15, r3
 800affe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b00a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b00e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b016:	ee17 2a90 	vmov	r2, s15
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b01e:	4b1f      	ldr	r3, [pc, #124]	; (800b09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b022:	0c1b      	lsrs	r3, r3, #16
 800b024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b028:	ee07 3a90 	vmov	s15, r3
 800b02c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b034:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b038:	edd7 6a07 	vldr	s13, [r7, #28]
 800b03c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b044:	ee17 2a90 	vmov	r2, s15
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b04c:	4b13      	ldr	r3, [pc, #76]	; (800b09c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b050:	0e1b      	lsrs	r3, r3, #24
 800b052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b056:	ee07 3a90 	vmov	s15, r3
 800b05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b062:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b066:	edd7 6a07 	vldr	s13, [r7, #28]
 800b06a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b06e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b072:	ee17 2a90 	vmov	r2, s15
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b07a:	e008      	b.n	800b08e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	609a      	str	r2, [r3, #8]
}
 800b08e:	bf00      	nop
 800b090:	3724      	adds	r7, #36	; 0x24
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	58024400 	.word	0x58024400
 800b0a0:	03d09000 	.word	0x03d09000
 800b0a4:	46000000 	.word	0x46000000
 800b0a8:	4c742400 	.word	0x4c742400
 800b0ac:	4a742400 	.word	0x4a742400
 800b0b0:	4bbebc20 	.word	0x4bbebc20

0800b0b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b089      	sub	sp, #36	; 0x24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0bc:	4ba0      	ldr	r3, [pc, #640]	; (800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c0:	f003 0303 	and.w	r3, r3, #3
 800b0c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b0c6:	4b9e      	ldr	r3, [pc, #632]	; (800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ca:	091b      	lsrs	r3, r3, #4
 800b0cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b0d2:	4b9b      	ldr	r3, [pc, #620]	; (800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d6:	f003 0301 	and.w	r3, r3, #1
 800b0da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b0dc:	4b98      	ldr	r3, [pc, #608]	; (800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e0:	08db      	lsrs	r3, r3, #3
 800b0e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	fb02 f303 	mul.w	r3, r2, r3
 800b0ec:	ee07 3a90 	vmov	s15, r3
 800b0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	f000 8111 	beq.w	800b322 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	2b02      	cmp	r3, #2
 800b104:	f000 8083 	beq.w	800b20e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	f200 80a1 	bhi.w	800b252 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d056      	beq.n	800b1ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b11c:	e099      	b.n	800b252 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b11e:	4b88      	ldr	r3, [pc, #544]	; (800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f003 0320 	and.w	r3, r3, #32
 800b126:	2b00      	cmp	r3, #0
 800b128:	d02d      	beq.n	800b186 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b12a:	4b85      	ldr	r3, [pc, #532]	; (800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	08db      	lsrs	r3, r3, #3
 800b130:	f003 0303 	and.w	r3, r3, #3
 800b134:	4a83      	ldr	r2, [pc, #524]	; (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b136:	fa22 f303 	lsr.w	r3, r2, r3
 800b13a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	ee07 3a90 	vmov	s15, r3
 800b14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b154:	4b7a      	ldr	r3, [pc, #488]	; (800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b15c:	ee07 3a90 	vmov	s15, r3
 800b160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b164:	ed97 6a03 	vldr	s12, [r7, #12]
 800b168:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b16c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b174:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b17c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b180:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b184:	e087      	b.n	800b296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	ee07 3a90 	vmov	s15, r3
 800b18c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b190:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b198:	4b69      	ldr	r3, [pc, #420]	; (800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1a0:	ee07 3a90 	vmov	s15, r3
 800b1a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1c8:	e065      	b.n	800b296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	ee07 3a90 	vmov	s15, r3
 800b1d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b350 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b1d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1dc:	4b58      	ldr	r3, [pc, #352]	; (800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e4:	ee07 3a90 	vmov	s15, r3
 800b1e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b204:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b208:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b20c:	e043      	b.n	800b296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	ee07 3a90 	vmov	s15, r3
 800b214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b218:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b21c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b220:	4b47      	ldr	r3, [pc, #284]	; (800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b228:	ee07 3a90 	vmov	s15, r3
 800b22c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b230:	ed97 6a03 	vldr	s12, [r7, #12]
 800b234:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b23c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b250:	e021      	b.n	800b296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	ee07 3a90 	vmov	s15, r3
 800b258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b264:	4b36      	ldr	r3, [pc, #216]	; (800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b26c:	ee07 3a90 	vmov	s15, r3
 800b270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b274:	ed97 6a03 	vldr	s12, [r7, #12]
 800b278:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b27c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b28c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b290:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b294:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b296:	4b2a      	ldr	r3, [pc, #168]	; (800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b29a:	0a5b      	lsrs	r3, r3, #9
 800b29c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2a0:	ee07 3a90 	vmov	s15, r3
 800b2a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2bc:	ee17 2a90 	vmov	r2, s15
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b2c4:	4b1e      	ldr	r3, [pc, #120]	; (800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c8:	0c1b      	lsrs	r3, r3, #16
 800b2ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2ce:	ee07 3a90 	vmov	s15, r3
 800b2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ea:	ee17 2a90 	vmov	r2, s15
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b2f2:	4b13      	ldr	r3, [pc, #76]	; (800b340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f6:	0e1b      	lsrs	r3, r3, #24
 800b2f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2fc:	ee07 3a90 	vmov	s15, r3
 800b300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b308:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b30c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b318:	ee17 2a90 	vmov	r2, s15
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b320:	e008      	b.n	800b334 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	609a      	str	r2, [r3, #8]
}
 800b334:	bf00      	nop
 800b336:	3724      	adds	r7, #36	; 0x24
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr
 800b340:	58024400 	.word	0x58024400
 800b344:	03d09000 	.word	0x03d09000
 800b348:	46000000 	.word	0x46000000
 800b34c:	4c742400 	.word	0x4c742400
 800b350:	4a742400 	.word	0x4a742400
 800b354:	4bbebc20 	.word	0x4bbebc20

0800b358 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b366:	4b53      	ldr	r3, [pc, #332]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36a:	f003 0303 	and.w	r3, r3, #3
 800b36e:	2b03      	cmp	r3, #3
 800b370:	d101      	bne.n	800b376 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	e099      	b.n	800b4aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b376:	4b4f      	ldr	r3, [pc, #316]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a4e      	ldr	r2, [pc, #312]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b37c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b382:	f7f7 fab3 	bl	80028ec <HAL_GetTick>
 800b386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b388:	e008      	b.n	800b39c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b38a:	f7f7 faaf 	bl	80028ec <HAL_GetTick>
 800b38e:	4602      	mov	r2, r0
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	2b02      	cmp	r3, #2
 800b396:	d901      	bls.n	800b39c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b398:	2303      	movs	r3, #3
 800b39a:	e086      	b.n	800b4aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b39c:	4b45      	ldr	r3, [pc, #276]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1f0      	bne.n	800b38a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b3a8:	4b42      	ldr	r3, [pc, #264]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	031b      	lsls	r3, r3, #12
 800b3b6:	493f      	ldr	r1, [pc, #252]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	628b      	str	r3, [r1, #40]	; 0x28
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	3b01      	subs	r3, #1
 800b3c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	025b      	lsls	r3, r3, #9
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	431a      	orrs	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	041b      	lsls	r3, r3, #16
 800b3da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3de:	431a      	orrs	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	061b      	lsls	r3, r3, #24
 800b3e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3ec:	4931      	ldr	r1, [pc, #196]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b3f2:	4b30      	ldr	r3, [pc, #192]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	695b      	ldr	r3, [r3, #20]
 800b3fe:	492d      	ldr	r1, [pc, #180]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b400:	4313      	orrs	r3, r2
 800b402:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b404:	4b2b      	ldr	r3, [pc, #172]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b408:	f023 0220 	bic.w	r2, r3, #32
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	4928      	ldr	r1, [pc, #160]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b412:	4313      	orrs	r3, r2
 800b414:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b416:	4b27      	ldr	r3, [pc, #156]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	4a26      	ldr	r2, [pc, #152]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b41c:	f023 0310 	bic.w	r3, r3, #16
 800b420:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b422:	4b24      	ldr	r3, [pc, #144]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b426:	4b24      	ldr	r3, [pc, #144]	; (800b4b8 <RCCEx_PLL2_Config+0x160>)
 800b428:	4013      	ands	r3, r2
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	69d2      	ldr	r2, [r2, #28]
 800b42e:	00d2      	lsls	r2, r2, #3
 800b430:	4920      	ldr	r1, [pc, #128]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b432:	4313      	orrs	r3, r2
 800b434:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b436:	4b1f      	ldr	r3, [pc, #124]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43a:	4a1e      	ldr	r2, [pc, #120]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b43c:	f043 0310 	orr.w	r3, r3, #16
 800b440:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d106      	bne.n	800b456 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b448:	4b1a      	ldr	r3, [pc, #104]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44c:	4a19      	ldr	r2, [pc, #100]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b44e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b452:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b454:	e00f      	b.n	800b476 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d106      	bne.n	800b46a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b45c:	4b15      	ldr	r3, [pc, #84]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b460:	4a14      	ldr	r2, [pc, #80]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b466:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b468:	e005      	b.n	800b476 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b46a:	4b12      	ldr	r3, [pc, #72]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46e:	4a11      	ldr	r2, [pc, #68]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b474:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b476:	4b0f      	ldr	r3, [pc, #60]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a0e      	ldr	r2, [pc, #56]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b47c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b482:	f7f7 fa33 	bl	80028ec <HAL_GetTick>
 800b486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b488:	e008      	b.n	800b49c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b48a:	f7f7 fa2f 	bl	80028ec <HAL_GetTick>
 800b48e:	4602      	mov	r2, r0
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	2b02      	cmp	r3, #2
 800b496:	d901      	bls.n	800b49c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b498:	2303      	movs	r3, #3
 800b49a:	e006      	b.n	800b4aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b49c:	4b05      	ldr	r3, [pc, #20]	; (800b4b4 <RCCEx_PLL2_Config+0x15c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d0f0      	beq.n	800b48a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	58024400 	.word	0x58024400
 800b4b8:	ffff0007 	.word	0xffff0007

0800b4bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4ca:	4b53      	ldr	r3, [pc, #332]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ce:	f003 0303 	and.w	r3, r3, #3
 800b4d2:	2b03      	cmp	r3, #3
 800b4d4:	d101      	bne.n	800b4da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e099      	b.n	800b60e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b4da:	4b4f      	ldr	r3, [pc, #316]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a4e      	ldr	r2, [pc, #312]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b4e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4e6:	f7f7 fa01 	bl	80028ec <HAL_GetTick>
 800b4ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4ec:	e008      	b.n	800b500 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b4ee:	f7f7 f9fd 	bl	80028ec <HAL_GetTick>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	1ad3      	subs	r3, r2, r3
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d901      	bls.n	800b500 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e086      	b.n	800b60e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b500:	4b45      	ldr	r3, [pc, #276]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1f0      	bne.n	800b4ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b50c:	4b42      	ldr	r3, [pc, #264]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b510:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	051b      	lsls	r3, r3, #20
 800b51a:	493f      	ldr	r1, [pc, #252]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b51c:	4313      	orrs	r3, r2
 800b51e:	628b      	str	r3, [r1, #40]	; 0x28
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	3b01      	subs	r3, #1
 800b526:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	3b01      	subs	r3, #1
 800b530:	025b      	lsls	r3, r3, #9
 800b532:	b29b      	uxth	r3, r3
 800b534:	431a      	orrs	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	3b01      	subs	r3, #1
 800b53c:	041b      	lsls	r3, r3, #16
 800b53e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b542:	431a      	orrs	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	3b01      	subs	r3, #1
 800b54a:	061b      	lsls	r3, r3, #24
 800b54c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b550:	4931      	ldr	r1, [pc, #196]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b552:	4313      	orrs	r3, r2
 800b554:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b556:	4b30      	ldr	r3, [pc, #192]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	695b      	ldr	r3, [r3, #20]
 800b562:	492d      	ldr	r1, [pc, #180]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b564:	4313      	orrs	r3, r2
 800b566:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b568:	4b2b      	ldr	r3, [pc, #172]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	699b      	ldr	r3, [r3, #24]
 800b574:	4928      	ldr	r1, [pc, #160]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b576:	4313      	orrs	r3, r2
 800b578:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b57a:	4b27      	ldr	r3, [pc, #156]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57e:	4a26      	ldr	r2, [pc, #152]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b584:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b586:	4b24      	ldr	r3, [pc, #144]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b58a:	4b24      	ldr	r3, [pc, #144]	; (800b61c <RCCEx_PLL3_Config+0x160>)
 800b58c:	4013      	ands	r3, r2
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	69d2      	ldr	r2, [r2, #28]
 800b592:	00d2      	lsls	r2, r2, #3
 800b594:	4920      	ldr	r1, [pc, #128]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b596:	4313      	orrs	r3, r2
 800b598:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b59a:	4b1f      	ldr	r3, [pc, #124]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59e:	4a1e      	ldr	r2, [pc, #120]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b5a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d106      	bne.n	800b5ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b5ac:	4b1a      	ldr	r3, [pc, #104]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b0:	4a19      	ldr	r2, [pc, #100]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b5b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b5b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5b8:	e00f      	b.n	800b5da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d106      	bne.n	800b5ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b5c0:	4b15      	ldr	r3, [pc, #84]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c4:	4a14      	ldr	r2, [pc, #80]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b5c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b5ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5cc:	e005      	b.n	800b5da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b5ce:	4b12      	ldr	r3, [pc, #72]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d2:	4a11      	ldr	r2, [pc, #68]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b5d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b5d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b5da:	4b0f      	ldr	r3, [pc, #60]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a0e      	ldr	r2, [pc, #56]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b5e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5e6:	f7f7 f981 	bl	80028ec <HAL_GetTick>
 800b5ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5ec:	e008      	b.n	800b600 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b5ee:	f7f7 f97d 	bl	80028ec <HAL_GetTick>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d901      	bls.n	800b600 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	e006      	b.n	800b60e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b600:	4b05      	ldr	r3, [pc, #20]	; (800b618 <RCCEx_PLL3_Config+0x15c>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d0f0      	beq.n	800b5ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	58024400 	.word	0x58024400
 800b61c:	ffff0007 	.word	0xffff0007

0800b620 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d101      	bne.n	800b632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	e0f1      	b.n	800b816 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a78      	ldr	r2, [pc, #480]	; (800b820 <HAL_SPI_Init+0x200>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d00f      	beq.n	800b662 <HAL_SPI_Init+0x42>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a77      	ldr	r2, [pc, #476]	; (800b824 <HAL_SPI_Init+0x204>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d00a      	beq.n	800b662 <HAL_SPI_Init+0x42>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a75      	ldr	r2, [pc, #468]	; (800b828 <HAL_SPI_Init+0x208>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d005      	beq.n	800b662 <HAL_SPI_Init+0x42>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	2b0f      	cmp	r3, #15
 800b65c:	d901      	bls.n	800b662 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e0d9      	b.n	800b816 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fd74 	bl	800c150 <SPI_GetPacketSize>
 800b668:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a6c      	ldr	r2, [pc, #432]	; (800b820 <HAL_SPI_Init+0x200>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d00c      	beq.n	800b68e <HAL_SPI_Init+0x6e>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a6a      	ldr	r2, [pc, #424]	; (800b824 <HAL_SPI_Init+0x204>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d007      	beq.n	800b68e <HAL_SPI_Init+0x6e>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a69      	ldr	r2, [pc, #420]	; (800b828 <HAL_SPI_Init+0x208>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d002      	beq.n	800b68e <HAL_SPI_Init+0x6e>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2b08      	cmp	r3, #8
 800b68c:	d811      	bhi.n	800b6b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b692:	4a63      	ldr	r2, [pc, #396]	; (800b820 <HAL_SPI_Init+0x200>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d009      	beq.n	800b6ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a61      	ldr	r2, [pc, #388]	; (800b824 <HAL_SPI_Init+0x204>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d004      	beq.n	800b6ac <HAL_SPI_Init+0x8c>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a60      	ldr	r2, [pc, #384]	; (800b828 <HAL_SPI_Init+0x208>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d104      	bne.n	800b6b6 <HAL_SPI_Init+0x96>
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2b10      	cmp	r3, #16
 800b6b0:	d901      	bls.n	800b6b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e0af      	b.n	800b816 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d106      	bne.n	800b6d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f7f6 fd46 	bl	800215c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2202      	movs	r2, #2
 800b6d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f022 0201 	bic.w	r2, r2, #1
 800b6e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b6f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b6fc:	d119      	bne.n	800b732 <HAL_SPI_Init+0x112>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b706:	d103      	bne.n	800b710 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d008      	beq.n	800b722 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10c      	bne.n	800b732 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b71c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b720:	d107      	bne.n	800b732 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b730:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	69da      	ldr	r2, [r3, #28]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73a:	431a      	orrs	r2, r3
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	431a      	orrs	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b744:	ea42 0103 	orr.w	r1, r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	68da      	ldr	r2, [r3, #12]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	430a      	orrs	r2, r1
 800b752:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	431a      	orrs	r2, r3
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b762:	431a      	orrs	r2, r3
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	699b      	ldr	r3, [r3, #24]
 800b768:	431a      	orrs	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	431a      	orrs	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	695b      	ldr	r3, [r3, #20]
 800b774:	431a      	orrs	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a1b      	ldr	r3, [r3, #32]
 800b77a:	431a      	orrs	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	431a      	orrs	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b786:	431a      	orrs	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	431a      	orrs	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b792:	ea42 0103 	orr.w	r1, r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	430a      	orrs	r2, r1
 800b7a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d113      	bne.n	800b7d2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b7d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f022 0201 	bic.w	r2, r2, #1
 800b7e0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00a      	beq.n	800b804 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68db      	ldr	r3, [r3, #12]
 800b7f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	430a      	orrs	r2, r1
 800b802:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	40013000 	.word	0x40013000
 800b824:	40003800 	.word	0x40003800
 800b828:	40003c00 	.word	0x40003c00

0800b82c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b08a      	sub	sp, #40	; 0x28
 800b830:	af02      	add	r7, sp, #8
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	603b      	str	r3, [r7, #0]
 800b838:	4613      	mov	r3, r2
 800b83a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b83c:	2300      	movs	r3, #0
 800b83e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3330      	adds	r3, #48	; 0x30
 800b846:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b850:	d112      	bne.n	800b878 <HAL_SPI_Receive+0x4c>
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d10e      	bne.n	800b878 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2204      	movs	r2, #4
 800b85e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b862:	88fa      	ldrh	r2, [r7, #6]
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	4613      	mov	r3, r2
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	68b9      	ldr	r1, [r7, #8]
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f000 f978 	bl	800bb64 <HAL_SPI_TransmitReceive>
 800b874:	4603      	mov	r3, r0
 800b876:	e16f      	b.n	800bb58 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d101      	bne.n	800b886 <HAL_SPI_Receive+0x5a>
 800b882:	2302      	movs	r3, #2
 800b884:	e168      	b.n	800bb58 <HAL_SPI_Receive+0x32c>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2201      	movs	r2, #1
 800b88a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b88e:	f7f7 f82d 	bl	80028ec <HAL_GetTick>
 800b892:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d007      	beq.n	800b8b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b8ac:	7ffb      	ldrb	r3, [r7, #31]
 800b8ae:	e153      	b.n	800bb58 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <HAL_SPI_Receive+0x90>
 800b8b6:	88fb      	ldrh	r3, [r7, #6]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d107      	bne.n	800b8cc <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b8c8:	7ffb      	ldrb	r3, [r7, #31]
 800b8ca:	e145      	b.n	800bb58 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2204      	movs	r2, #4
 800b8d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	88fa      	ldrh	r2, [r7, #6]
 800b8e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	88fa      	ldrh	r2, [r7, #6]
 800b8ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2200      	movs	r2, #0
 800b904:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2200      	movs	r2, #0
 800b90c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b91c:	d107      	bne.n	800b92e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b92c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	685a      	ldr	r2, [r3, #4]
 800b934:	4b8a      	ldr	r3, [pc, #552]	; (800bb60 <HAL_SPI_Receive+0x334>)
 800b936:	4013      	ands	r3, r2
 800b938:	88f9      	ldrh	r1, [r7, #6]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	6812      	ldr	r2, [r2, #0]
 800b93e:	430b      	orrs	r3, r1
 800b940:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f042 0201 	orr.w	r2, r2, #1
 800b950:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b95a:	d107      	bne.n	800b96c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b96a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	2b0f      	cmp	r3, #15
 800b972:	d948      	bls.n	800ba06 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b974:	e040      	b.n	800b9f8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	695a      	ldr	r2, [r3, #20]
 800b97c:	f248 0308 	movw	r3, #32776	; 0x8008
 800b980:	4013      	ands	r3, r2
 800b982:	2b00      	cmp	r3, #0
 800b984:	d014      	beq.n	800b9b0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b98e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b990:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b996:	1d1a      	adds	r2, r3, #4
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b9ae:	e023      	b.n	800b9f8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9b0:	f7f6 ff9c 	bl	80028ec <HAL_GetTick>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	1ad3      	subs	r3, r2, r3
 800b9ba:	683a      	ldr	r2, [r7, #0]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d803      	bhi.n	800b9c8 <HAL_SPI_Receive+0x19c>
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9c6:	d102      	bne.n	800b9ce <HAL_SPI_Receive+0x1a2>
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d114      	bne.n	800b9f8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f000 faf0 	bl	800bfb4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	e0af      	b.n	800bb58 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1b8      	bne.n	800b976 <HAL_SPI_Receive+0x14a>
 800ba04:	e095      	b.n	800bb32 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	2b07      	cmp	r3, #7
 800ba0c:	f240 808b 	bls.w	800bb26 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ba10:	e03f      	b.n	800ba92 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	695b      	ldr	r3, [r3, #20]
 800ba18:	f003 0301 	and.w	r3, r3, #1
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d114      	bne.n	800ba4a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba24:	69ba      	ldr	r2, [r7, #24]
 800ba26:	8812      	ldrh	r2, [r2, #0]
 800ba28:	b292      	uxth	r2, r2
 800ba2a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba30:	1c9a      	adds	r2, r3, #2
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ba48:	e023      	b.n	800ba92 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba4a:	f7f6 ff4f 	bl	80028ec <HAL_GetTick>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d803      	bhi.n	800ba62 <HAL_SPI_Receive+0x236>
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba60:	d102      	bne.n	800ba68 <HAL_SPI_Receive+0x23c>
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d114      	bne.n	800ba92 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f000 faa3 	bl	800bfb4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ba8e:	2303      	movs	r3, #3
 800ba90:	e062      	b.n	800bb58 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1b9      	bne.n	800ba12 <HAL_SPI_Receive+0x1e6>
 800ba9e:	e048      	b.n	800bb32 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	695b      	ldr	r3, [r3, #20]
 800baa6:	f003 0301 	and.w	r3, r3, #1
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d117      	bne.n	800bade <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baba:	7812      	ldrb	r2, [r2, #0]
 800babc:	b2d2      	uxtb	r2, r2
 800babe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bac4:	1c5a      	adds	r2, r3, #1
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	3b01      	subs	r3, #1
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800badc:	e023      	b.n	800bb26 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bade:	f7f6 ff05 	bl	80028ec <HAL_GetTick>
 800bae2:	4602      	mov	r2, r0
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	429a      	cmp	r2, r3
 800baec:	d803      	bhi.n	800baf6 <HAL_SPI_Receive+0x2ca>
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800baf4:	d102      	bne.n	800bafc <HAL_SPI_Receive+0x2d0>
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d114      	bne.n	800bb26 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f000 fa59 	bl	800bfb4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2200      	movs	r2, #0
 800bb06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	e018      	b.n	800bb58 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1b6      	bne.n	800baa0 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f000 fa3e 	bl	800bfb4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d001      	beq.n	800bb56 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	e000      	b.n	800bb58 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800bb56:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3720      	adds	r7, #32
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	ffff0000 	.word	0xffff0000

0800bb64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b08e      	sub	sp, #56	; 0x38
 800bb68:	af02      	add	r7, sp, #8
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
 800bb70:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bb72:	2300      	movs	r3, #0
 800bb74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	3320      	adds	r3, #32
 800bb7e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	3330      	adds	r3, #48	; 0x30
 800bb86:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d101      	bne.n	800bb96 <HAL_SPI_TransmitReceive+0x32>
 800bb92:	2302      	movs	r3, #2
 800bb94:	e209      	b.n	800bfaa <HAL_SPI_TransmitReceive+0x446>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb9e:	f7f6 fea5 	bl	80028ec <HAL_GetTick>
 800bba2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bba4:	887b      	ldrh	r3, [r7, #2]
 800bba6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bba8:	887b      	ldrh	r3, [r7, #2]
 800bbaa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bbb2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bbba:	7efb      	ldrb	r3, [r7, #27]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d014      	beq.n	800bbea <HAL_SPI_TransmitReceive+0x86>
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbc6:	d106      	bne.n	800bbd6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d102      	bne.n	800bbd6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bbd0:	7efb      	ldrb	r3, [r7, #27]
 800bbd2:	2b04      	cmp	r3, #4
 800bbd4:	d009      	beq.n	800bbea <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bbd6:	2302      	movs	r3, #2
 800bbd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bbe4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbe8:	e1df      	b.n	800bfaa <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d005      	beq.n	800bbfc <HAL_SPI_TransmitReceive+0x98>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d002      	beq.n	800bbfc <HAL_SPI_TransmitReceive+0x98>
 800bbf6:	887b      	ldrh	r3, [r7, #2]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d109      	bne.n	800bc10 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc0e:	e1cc      	b.n	800bfaa <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	2b04      	cmp	r3, #4
 800bc1a:	d003      	beq.n	800bc24 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2205      	movs	r2, #5
 800bc20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	887a      	ldrh	r2, [r7, #2]
 800bc36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	887a      	ldrh	r2, [r7, #2]
 800bc3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	887a      	ldrh	r2, [r7, #2]
 800bc4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	887a      	ldrh	r2, [r7, #2]
 800bc54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2200      	movs	r2, #0
 800bc62:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	685a      	ldr	r2, [r3, #4]
 800bc6a:	4b82      	ldr	r3, [pc, #520]	; (800be74 <HAL_SPI_TransmitReceive+0x310>)
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	8879      	ldrh	r1, [r7, #2]
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	6812      	ldr	r2, [r2, #0]
 800bc74:	430b      	orrs	r3, r1
 800bc76:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f042 0201 	orr.w	r2, r2, #1
 800bc86:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc90:	d107      	bne.n	800bca2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bca0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	2b0f      	cmp	r3, #15
 800bca8:	d970      	bls.n	800bd8c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bcaa:	e068      	b.n	800bd7e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	695b      	ldr	r3, [r3, #20]
 800bcb2:	f003 0302 	and.w	r3, r3, #2
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d11a      	bne.n	800bcf0 <HAL_SPI_TransmitReceive+0x18c>
 800bcba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d017      	beq.n	800bcf0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	6812      	ldr	r2, [r2, #0]
 800bcca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcd0:	1d1a      	adds	r2, r3, #4
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	3b01      	subs	r3, #1
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bcee:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	695a      	ldr	r2, [r3, #20]
 800bcf6:	f248 0308 	movw	r3, #32776	; 0x8008
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d01a      	beq.n	800bd36 <HAL_SPI_TransmitReceive+0x1d2>
 800bd00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d017      	beq.n	800bd36 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd10:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd16:	1d1a      	adds	r2, r3, #4
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	3b01      	subs	r3, #1
 800bd26:	b29a      	uxth	r2, r3
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd34:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd36:	f7f6 fdd9 	bl	80028ec <HAL_GetTick>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d803      	bhi.n	800bd4e <HAL_SPI_TransmitReceive+0x1ea>
 800bd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd4c:	d102      	bne.n	800bd54 <HAL_SPI_TransmitReceive+0x1f0>
 800bd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d114      	bne.n	800bd7e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f000 f92d 	bl	800bfb4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2201      	movs	r2, #1
 800bd76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bd7a:	2303      	movs	r3, #3
 800bd7c:	e115      	b.n	800bfaa <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d193      	bne.n	800bcac <HAL_SPI_TransmitReceive+0x148>
 800bd84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d190      	bne.n	800bcac <HAL_SPI_TransmitReceive+0x148>
 800bd8a:	e0e7      	b.n	800bf5c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	2b07      	cmp	r3, #7
 800bd92:	f240 80dd 	bls.w	800bf50 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd96:	e066      	b.n	800be66 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	695b      	ldr	r3, [r3, #20]
 800bd9e:	f003 0302 	and.w	r3, r3, #2
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d119      	bne.n	800bdda <HAL_SPI_TransmitReceive+0x276>
 800bda6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d016      	beq.n	800bdda <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdb0:	881a      	ldrh	r2, [r3, #0]
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdba:	1c9a      	adds	r2, r3, #2
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bdd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	695b      	ldr	r3, [r3, #20]
 800bde0:	f003 0301 	and.w	r3, r3, #1
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d11a      	bne.n	800be1e <HAL_SPI_TransmitReceive+0x2ba>
 800bde8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d017      	beq.n	800be1e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdf2:	6a3a      	ldr	r2, [r7, #32]
 800bdf4:	8812      	ldrh	r2, [r2, #0]
 800bdf6:	b292      	uxth	r2, r2
 800bdf8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdfe:	1c9a      	adds	r2, r3, #2
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	3b01      	subs	r3, #1
 800be0e:	b29a      	uxth	r2, r3
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be1c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be1e:	f7f6 fd65 	bl	80028ec <HAL_GetTick>
 800be22:	4602      	mov	r2, r0
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d803      	bhi.n	800be36 <HAL_SPI_TransmitReceive+0x2d2>
 800be2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be34:	d102      	bne.n	800be3c <HAL_SPI_TransmitReceive+0x2d8>
 800be36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d114      	bne.n	800be66 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f000 f8b9 	bl	800bfb4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2200      	movs	r2, #0
 800be46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2201      	movs	r2, #1
 800be5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800be62:	2303      	movs	r3, #3
 800be64:	e0a1      	b.n	800bfaa <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800be66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d195      	bne.n	800bd98 <HAL_SPI_TransmitReceive+0x234>
 800be6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d192      	bne.n	800bd98 <HAL_SPI_TransmitReceive+0x234>
 800be72:	e073      	b.n	800bf5c <HAL_SPI_TransmitReceive+0x3f8>
 800be74:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	695b      	ldr	r3, [r3, #20]
 800be7e:	f003 0302 	and.w	r3, r3, #2
 800be82:	2b02      	cmp	r3, #2
 800be84:	d11b      	bne.n	800bebe <HAL_SPI_TransmitReceive+0x35a>
 800be86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d018      	beq.n	800bebe <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	3320      	adds	r3, #32
 800be96:	7812      	ldrb	r2, [r2, #0]
 800be98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be9e:	1c5a      	adds	r2, r3, #1
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800beaa:	b29b      	uxth	r3, r3
 800beac:	3b01      	subs	r3, #1
 800beae:	b29a      	uxth	r2, r3
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bebc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	695b      	ldr	r3, [r3, #20]
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d11d      	bne.n	800bf08 <HAL_SPI_TransmitReceive+0x3a4>
 800becc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d01a      	beq.n	800bf08 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bede:	7812      	ldrb	r2, [r2, #0]
 800bee0:	b2d2      	uxtb	r2, r2
 800bee2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bee8:	1c5a      	adds	r2, r3, #1
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	3b01      	subs	r3, #1
 800bef8:	b29a      	uxth	r2, r3
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf06:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf08:	f7f6 fcf0 	bl	80028ec <HAL_GetTick>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d803      	bhi.n	800bf20 <HAL_SPI_TransmitReceive+0x3bc>
 800bf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf1e:	d102      	bne.n	800bf26 <HAL_SPI_TransmitReceive+0x3c2>
 800bf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d114      	bne.n	800bf50 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f000 f844 	bl	800bfb4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2201      	movs	r2, #1
 800bf48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	e02c      	b.n	800bfaa <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d190      	bne.n	800be78 <HAL_SPI_TransmitReceive+0x314>
 800bf56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d18d      	bne.n	800be78 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800bf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5e:	9300      	str	r3, [sp, #0]
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	2200      	movs	r2, #0
 800bf64:	2108      	movs	r1, #8
 800bf66:	68f8      	ldr	r0, [r7, #12]
 800bf68:	f000 f8c4 	bl	800c0f4 <SPI_WaitOnFlagUntilTimeout>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d007      	beq.n	800bf82 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf78:	f043 0220 	orr.w	r2, r3, #32
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	f000 f816 	bl	800bfb4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d001      	beq.n	800bfa6 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e001      	b.n	800bfaa <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800bfa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3730      	adds	r7, #48	; 0x30
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop

0800bfb4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	695b      	ldr	r3, [r3, #20]
 800bfc2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	699a      	ldr	r2, [r3, #24]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f042 0208 	orr.w	r2, r2, #8
 800bfd2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	699a      	ldr	r2, [r3, #24]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f042 0210 	orr.w	r2, r2, #16
 800bfe2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f022 0201 	bic.w	r2, r2, #1
 800bff2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6919      	ldr	r1, [r3, #16]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	4b3c      	ldr	r3, [pc, #240]	; (800c0f0 <SPI_CloseTransfer+0x13c>)
 800c000:	400b      	ands	r3, r1
 800c002:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	689a      	ldr	r2, [r3, #8]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c012:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	2b04      	cmp	r3, #4
 800c01e:	d014      	beq.n	800c04a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f003 0320 	and.w	r3, r3, #32
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00f      	beq.n	800c04a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c030:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	699a      	ldr	r2, [r3, #24]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f042 0220 	orr.w	r2, r2, #32
 800c048:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b03      	cmp	r3, #3
 800c054:	d014      	beq.n	800c080 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00f      	beq.n	800c080 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c066:	f043 0204 	orr.w	r2, r3, #4
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	699a      	ldr	r2, [r3, #24]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c07e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00f      	beq.n	800c0aa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c090:	f043 0201 	orr.w	r2, r3, #1
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	699a      	ldr	r2, [r3, #24]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d00f      	beq.n	800c0d4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0ba:	f043 0208 	orr.w	r2, r3, #8
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	699a      	ldr	r2, [r3, #24]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c0e4:	bf00      	nop
 800c0e6:	3714      	adds	r7, #20
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr
 800c0f0:	fffffc90 	.word	0xfffffc90

0800c0f4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	603b      	str	r3, [r7, #0]
 800c100:	4613      	mov	r3, r2
 800c102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c104:	e010      	b.n	800c128 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c106:	f7f6 fbf1 	bl	80028ec <HAL_GetTick>
 800c10a:	4602      	mov	r2, r0
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	69ba      	ldr	r2, [r7, #24]
 800c112:	429a      	cmp	r2, r3
 800c114:	d803      	bhi.n	800c11e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c11c:	d102      	bne.n	800c124 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d101      	bne.n	800c128 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c124:	2303      	movs	r3, #3
 800c126:	e00f      	b.n	800c148 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	695a      	ldr	r2, [r3, #20]
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	4013      	ands	r3, r2
 800c132:	68ba      	ldr	r2, [r7, #8]
 800c134:	429a      	cmp	r2, r3
 800c136:	bf0c      	ite	eq
 800c138:	2301      	moveq	r3, #1
 800c13a:	2300      	movne	r3, #0
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	461a      	mov	r2, r3
 800c140:	79fb      	ldrb	r3, [r7, #7]
 800c142:	429a      	cmp	r2, r3
 800c144:	d0df      	beq.n	800c106 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c15c:	095b      	lsrs	r3, r3, #5
 800c15e:	3301      	adds	r3, #1
 800c160:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	3301      	adds	r3, #1
 800c168:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	3307      	adds	r3, #7
 800c16e:	08db      	lsrs	r3, r3, #3
 800c170:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	fb02 f303 	mul.w	r3, r2, r3
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3714      	adds	r7, #20
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
	...

0800c188 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d109      	bne.n	800c1b0 <HAL_TIM_OC_Start_IT+0x28>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	bf14      	ite	ne
 800c1a8:	2301      	movne	r3, #1
 800c1aa:	2300      	moveq	r3, #0
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	e03c      	b.n	800c22a <HAL_TIM_OC_Start_IT+0xa2>
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	2b04      	cmp	r3, #4
 800c1b4:	d109      	bne.n	800c1ca <HAL_TIM_OC_Start_IT+0x42>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	bf14      	ite	ne
 800c1c2:	2301      	movne	r3, #1
 800c1c4:	2300      	moveq	r3, #0
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	e02f      	b.n	800c22a <HAL_TIM_OC_Start_IT+0xa2>
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	2b08      	cmp	r3, #8
 800c1ce:	d109      	bne.n	800c1e4 <HAL_TIM_OC_Start_IT+0x5c>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	bf14      	ite	ne
 800c1dc:	2301      	movne	r3, #1
 800c1de:	2300      	moveq	r3, #0
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	e022      	b.n	800c22a <HAL_TIM_OC_Start_IT+0xa2>
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	2b0c      	cmp	r3, #12
 800c1e8:	d109      	bne.n	800c1fe <HAL_TIM_OC_Start_IT+0x76>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	bf14      	ite	ne
 800c1f6:	2301      	movne	r3, #1
 800c1f8:	2300      	moveq	r3, #0
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	e015      	b.n	800c22a <HAL_TIM_OC_Start_IT+0xa2>
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	2b10      	cmp	r3, #16
 800c202:	d109      	bne.n	800c218 <HAL_TIM_OC_Start_IT+0x90>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	bf14      	ite	ne
 800c210:	2301      	movne	r3, #1
 800c212:	2300      	moveq	r3, #0
 800c214:	b2db      	uxtb	r3, r3
 800c216:	e008      	b.n	800c22a <HAL_TIM_OC_Start_IT+0xa2>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b01      	cmp	r3, #1
 800c222:	bf14      	ite	ne
 800c224:	2301      	movne	r3, #1
 800c226:	2300      	moveq	r3, #0
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d001      	beq.n	800c232 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c22e:	2301      	movs	r3, #1
 800c230:	e0ec      	b.n	800c40c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d104      	bne.n	800c242 <HAL_TIM_OC_Start_IT+0xba>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2202      	movs	r2, #2
 800c23c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c240:	e023      	b.n	800c28a <HAL_TIM_OC_Start_IT+0x102>
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2b04      	cmp	r3, #4
 800c246:	d104      	bne.n	800c252 <HAL_TIM_OC_Start_IT+0xca>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2202      	movs	r2, #2
 800c24c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c250:	e01b      	b.n	800c28a <HAL_TIM_OC_Start_IT+0x102>
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	2b08      	cmp	r3, #8
 800c256:	d104      	bne.n	800c262 <HAL_TIM_OC_Start_IT+0xda>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2202      	movs	r2, #2
 800c25c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c260:	e013      	b.n	800c28a <HAL_TIM_OC_Start_IT+0x102>
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	2b0c      	cmp	r3, #12
 800c266:	d104      	bne.n	800c272 <HAL_TIM_OC_Start_IT+0xea>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2202      	movs	r2, #2
 800c26c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c270:	e00b      	b.n	800c28a <HAL_TIM_OC_Start_IT+0x102>
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	2b10      	cmp	r3, #16
 800c276:	d104      	bne.n	800c282 <HAL_TIM_OC_Start_IT+0xfa>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2202      	movs	r2, #2
 800c27c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c280:	e003      	b.n	800c28a <HAL_TIM_OC_Start_IT+0x102>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2202      	movs	r2, #2
 800c286:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	2b0c      	cmp	r3, #12
 800c28e:	d841      	bhi.n	800c314 <HAL_TIM_OC_Start_IT+0x18c>
 800c290:	a201      	add	r2, pc, #4	; (adr r2, 800c298 <HAL_TIM_OC_Start_IT+0x110>)
 800c292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c296:	bf00      	nop
 800c298:	0800c2cd 	.word	0x0800c2cd
 800c29c:	0800c315 	.word	0x0800c315
 800c2a0:	0800c315 	.word	0x0800c315
 800c2a4:	0800c315 	.word	0x0800c315
 800c2a8:	0800c2df 	.word	0x0800c2df
 800c2ac:	0800c315 	.word	0x0800c315
 800c2b0:	0800c315 	.word	0x0800c315
 800c2b4:	0800c315 	.word	0x0800c315
 800c2b8:	0800c2f1 	.word	0x0800c2f1
 800c2bc:	0800c315 	.word	0x0800c315
 800c2c0:	0800c315 	.word	0x0800c315
 800c2c4:	0800c315 	.word	0x0800c315
 800c2c8:	0800c303 	.word	0x0800c303
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68da      	ldr	r2, [r3, #12]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f042 0202 	orr.w	r2, r2, #2
 800c2da:	60da      	str	r2, [r3, #12]
      break;
 800c2dc:	e01d      	b.n	800c31a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	68da      	ldr	r2, [r3, #12]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f042 0204 	orr.w	r2, r2, #4
 800c2ec:	60da      	str	r2, [r3, #12]
      break;
 800c2ee:	e014      	b.n	800c31a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68da      	ldr	r2, [r3, #12]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f042 0208 	orr.w	r2, r2, #8
 800c2fe:	60da      	str	r2, [r3, #12]
      break;
 800c300:	e00b      	b.n	800c31a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	68da      	ldr	r2, [r3, #12]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f042 0210 	orr.w	r2, r2, #16
 800c310:	60da      	str	r2, [r3, #12]
      break;
 800c312:	e002      	b.n	800c31a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c314:	2301      	movs	r3, #1
 800c316:	73fb      	strb	r3, [r7, #15]
      break;
 800c318:	bf00      	nop
  }

  if (status == HAL_OK)
 800c31a:	7bfb      	ldrb	r3, [r7, #15]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d174      	bne.n	800c40a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2201      	movs	r2, #1
 800c326:	6839      	ldr	r1, [r7, #0]
 800c328:	4618      	mov	r0, r3
 800c32a:	f000 ff8d 	bl	800d248 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a38      	ldr	r2, [pc, #224]	; (800c414 <HAL_TIM_OC_Start_IT+0x28c>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d013      	beq.n	800c360 <HAL_TIM_OC_Start_IT+0x1d8>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a36      	ldr	r2, [pc, #216]	; (800c418 <HAL_TIM_OC_Start_IT+0x290>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d00e      	beq.n	800c360 <HAL_TIM_OC_Start_IT+0x1d8>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a35      	ldr	r2, [pc, #212]	; (800c41c <HAL_TIM_OC_Start_IT+0x294>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d009      	beq.n	800c360 <HAL_TIM_OC_Start_IT+0x1d8>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a33      	ldr	r2, [pc, #204]	; (800c420 <HAL_TIM_OC_Start_IT+0x298>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d004      	beq.n	800c360 <HAL_TIM_OC_Start_IT+0x1d8>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a32      	ldr	r2, [pc, #200]	; (800c424 <HAL_TIM_OC_Start_IT+0x29c>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d101      	bne.n	800c364 <HAL_TIM_OC_Start_IT+0x1dc>
 800c360:	2301      	movs	r3, #1
 800c362:	e000      	b.n	800c366 <HAL_TIM_OC_Start_IT+0x1de>
 800c364:	2300      	movs	r3, #0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d007      	beq.n	800c37a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c378:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a25      	ldr	r2, [pc, #148]	; (800c414 <HAL_TIM_OC_Start_IT+0x28c>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d022      	beq.n	800c3ca <HAL_TIM_OC_Start_IT+0x242>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c38c:	d01d      	beq.n	800c3ca <HAL_TIM_OC_Start_IT+0x242>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4a25      	ldr	r2, [pc, #148]	; (800c428 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d018      	beq.n	800c3ca <HAL_TIM_OC_Start_IT+0x242>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4a23      	ldr	r2, [pc, #140]	; (800c42c <HAL_TIM_OC_Start_IT+0x2a4>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d013      	beq.n	800c3ca <HAL_TIM_OC_Start_IT+0x242>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a22      	ldr	r2, [pc, #136]	; (800c430 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d00e      	beq.n	800c3ca <HAL_TIM_OC_Start_IT+0x242>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a19      	ldr	r2, [pc, #100]	; (800c418 <HAL_TIM_OC_Start_IT+0x290>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d009      	beq.n	800c3ca <HAL_TIM_OC_Start_IT+0x242>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a1e      	ldr	r2, [pc, #120]	; (800c434 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d004      	beq.n	800c3ca <HAL_TIM_OC_Start_IT+0x242>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a15      	ldr	r2, [pc, #84]	; (800c41c <HAL_TIM_OC_Start_IT+0x294>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d115      	bne.n	800c3f6 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	689a      	ldr	r2, [r3, #8]
 800c3d0:	4b19      	ldr	r3, [pc, #100]	; (800c438 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	2b06      	cmp	r3, #6
 800c3da:	d015      	beq.n	800c408 <HAL_TIM_OC_Start_IT+0x280>
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3e2:	d011      	beq.n	800c408 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3f4:	e008      	b.n	800c408 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f042 0201 	orr.w	r2, r2, #1
 800c404:	601a      	str	r2, [r3, #0]
 800c406:	e000      	b.n	800c40a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c408:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	40010000 	.word	0x40010000
 800c418:	40010400 	.word	0x40010400
 800c41c:	40014000 	.word	0x40014000
 800c420:	40014400 	.word	0x40014400
 800c424:	40014800 	.word	0x40014800
 800c428:	40000400 	.word	0x40000400
 800c42c:	40000800 	.word	0x40000800
 800c430:	40000c00 	.word	0x40000c00
 800c434:	40001800 	.word	0x40001800
 800c438:	00010007 	.word	0x00010007

0800c43c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c446:	2300      	movs	r3, #0
 800c448:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	2b0c      	cmp	r3, #12
 800c44e:	d841      	bhi.n	800c4d4 <HAL_TIM_OC_Stop_IT+0x98>
 800c450:	a201      	add	r2, pc, #4	; (adr r2, 800c458 <HAL_TIM_OC_Stop_IT+0x1c>)
 800c452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c456:	bf00      	nop
 800c458:	0800c48d 	.word	0x0800c48d
 800c45c:	0800c4d5 	.word	0x0800c4d5
 800c460:	0800c4d5 	.word	0x0800c4d5
 800c464:	0800c4d5 	.word	0x0800c4d5
 800c468:	0800c49f 	.word	0x0800c49f
 800c46c:	0800c4d5 	.word	0x0800c4d5
 800c470:	0800c4d5 	.word	0x0800c4d5
 800c474:	0800c4d5 	.word	0x0800c4d5
 800c478:	0800c4b1 	.word	0x0800c4b1
 800c47c:	0800c4d5 	.word	0x0800c4d5
 800c480:	0800c4d5 	.word	0x0800c4d5
 800c484:	0800c4d5 	.word	0x0800c4d5
 800c488:	0800c4c3 	.word	0x0800c4c3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68da      	ldr	r2, [r3, #12]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f022 0202 	bic.w	r2, r2, #2
 800c49a:	60da      	str	r2, [r3, #12]
      break;
 800c49c:	e01d      	b.n	800c4da <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	68da      	ldr	r2, [r3, #12]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f022 0204 	bic.w	r2, r2, #4
 800c4ac:	60da      	str	r2, [r3, #12]
      break;
 800c4ae:	e014      	b.n	800c4da <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68da      	ldr	r2, [r3, #12]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f022 0208 	bic.w	r2, r2, #8
 800c4be:	60da      	str	r2, [r3, #12]
      break;
 800c4c0:	e00b      	b.n	800c4da <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68da      	ldr	r2, [r3, #12]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f022 0210 	bic.w	r2, r2, #16
 800c4d0:	60da      	str	r2, [r3, #12]
      break;
 800c4d2:	e002      	b.n	800c4da <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	73fb      	strb	r3, [r7, #15]
      break;
 800c4d8:	bf00      	nop
  }

  if (status == HAL_OK)
 800c4da:	7bfb      	ldrb	r3, [r7, #15]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f040 8081 	bne.w	800c5e4 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 feac 	bl	800d248 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a3e      	ldr	r2, [pc, #248]	; (800c5f0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d013      	beq.n	800c522 <HAL_TIM_OC_Stop_IT+0xe6>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a3d      	ldr	r2, [pc, #244]	; (800c5f4 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d00e      	beq.n	800c522 <HAL_TIM_OC_Stop_IT+0xe6>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a3b      	ldr	r2, [pc, #236]	; (800c5f8 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d009      	beq.n	800c522 <HAL_TIM_OC_Stop_IT+0xe6>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a3a      	ldr	r2, [pc, #232]	; (800c5fc <HAL_TIM_OC_Stop_IT+0x1c0>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d004      	beq.n	800c522 <HAL_TIM_OC_Stop_IT+0xe6>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a38      	ldr	r2, [pc, #224]	; (800c600 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d101      	bne.n	800c526 <HAL_TIM_OC_Stop_IT+0xea>
 800c522:	2301      	movs	r3, #1
 800c524:	e000      	b.n	800c528 <HAL_TIM_OC_Stop_IT+0xec>
 800c526:	2300      	movs	r3, #0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d017      	beq.n	800c55c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	6a1a      	ldr	r2, [r3, #32]
 800c532:	f241 1311 	movw	r3, #4369	; 0x1111
 800c536:	4013      	ands	r3, r2
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10f      	bne.n	800c55c <HAL_TIM_OC_Stop_IT+0x120>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6a1a      	ldr	r2, [r3, #32]
 800c542:	f240 4344 	movw	r3, #1092	; 0x444
 800c546:	4013      	ands	r3, r2
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d107      	bne.n	800c55c <HAL_TIM_OC_Stop_IT+0x120>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c55a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	6a1a      	ldr	r2, [r3, #32]
 800c562:	f241 1311 	movw	r3, #4369	; 0x1111
 800c566:	4013      	ands	r3, r2
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10f      	bne.n	800c58c <HAL_TIM_OC_Stop_IT+0x150>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	6a1a      	ldr	r2, [r3, #32]
 800c572:	f240 4344 	movw	r3, #1092	; 0x444
 800c576:	4013      	ands	r3, r2
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d107      	bne.n	800c58c <HAL_TIM_OC_Stop_IT+0x150>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f022 0201 	bic.w	r2, r2, #1
 800c58a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d104      	bne.n	800c59c <HAL_TIM_OC_Stop_IT+0x160>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2201      	movs	r2, #1
 800c596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c59a:	e023      	b.n	800c5e4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	2b04      	cmp	r3, #4
 800c5a0:	d104      	bne.n	800c5ac <HAL_TIM_OC_Stop_IT+0x170>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5aa:	e01b      	b.n	800c5e4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2b08      	cmp	r3, #8
 800c5b0:	d104      	bne.n	800c5bc <HAL_TIM_OC_Stop_IT+0x180>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c5ba:	e013      	b.n	800c5e4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	2b0c      	cmp	r3, #12
 800c5c0:	d104      	bne.n	800c5cc <HAL_TIM_OC_Stop_IT+0x190>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c5ca:	e00b      	b.n	800c5e4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	2b10      	cmp	r3, #16
 800c5d0:	d104      	bne.n	800c5dc <HAL_TIM_OC_Stop_IT+0x1a0>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c5da:	e003      	b.n	800c5e4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800c5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	40010000 	.word	0x40010000
 800c5f4:	40010400 	.word	0x40010400
 800c5f8:	40014000 	.word	0x40014000
 800c5fc:	40014400 	.word	0x40014400
 800c600:	40014800 	.word	0x40014800

0800c604 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d101      	bne.n	800c616 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c612:	2301      	movs	r3, #1
 800c614:	e049      	b.n	800c6aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d106      	bne.n	800c630 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2200      	movs	r2, #0
 800c626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7f5 fe46 	bl	80022bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2202      	movs	r2, #2
 800c634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	3304      	adds	r3, #4
 800c640:	4619      	mov	r1, r3
 800c642:	4610      	mov	r0, r2
 800c644:	f000 fa90 	bl	800cb68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3708      	adds	r7, #8
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b082      	sub	sp, #8
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	f003 0302 	and.w	r3, r3, #2
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d122      	bne.n	800c70e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	f003 0302 	and.w	r3, r3, #2
 800c6d2:	2b02      	cmp	r3, #2
 800c6d4:	d11b      	bne.n	800c70e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f06f 0202 	mvn.w	r2, #2
 800c6de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	f003 0303 	and.w	r3, r3, #3
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d003      	beq.n	800c6fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 fa19 	bl	800cb2c <HAL_TIM_IC_CaptureCallback>
 800c6fa:	e005      	b.n	800c708 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f7f4 fabf 	bl	8000c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 fa1c 	bl	800cb40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	f003 0304 	and.w	r3, r3, #4
 800c718:	2b04      	cmp	r3, #4
 800c71a:	d122      	bne.n	800c762 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	f003 0304 	and.w	r3, r3, #4
 800c726:	2b04      	cmp	r3, #4
 800c728:	d11b      	bne.n	800c762 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f06f 0204 	mvn.w	r2, #4
 800c732:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2202      	movs	r2, #2
 800c738:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	699b      	ldr	r3, [r3, #24]
 800c740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c744:	2b00      	cmp	r3, #0
 800c746:	d003      	beq.n	800c750 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 f9ef 	bl	800cb2c <HAL_TIM_IC_CaptureCallback>
 800c74e:	e005      	b.n	800c75c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7f4 fa95 	bl	8000c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f9f2 	bl	800cb40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	691b      	ldr	r3, [r3, #16]
 800c768:	f003 0308 	and.w	r3, r3, #8
 800c76c:	2b08      	cmp	r3, #8
 800c76e:	d122      	bne.n	800c7b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	f003 0308 	and.w	r3, r3, #8
 800c77a:	2b08      	cmp	r3, #8
 800c77c:	d11b      	bne.n	800c7b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f06f 0208 	mvn.w	r2, #8
 800c786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2204      	movs	r2, #4
 800c78c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	69db      	ldr	r3, [r3, #28]
 800c794:	f003 0303 	and.w	r3, r3, #3
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d003      	beq.n	800c7a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 f9c5 	bl	800cb2c <HAL_TIM_IC_CaptureCallback>
 800c7a2:	e005      	b.n	800c7b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7f4 fa6b 	bl	8000c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f9c8 	bl	800cb40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	691b      	ldr	r3, [r3, #16]
 800c7bc:	f003 0310 	and.w	r3, r3, #16
 800c7c0:	2b10      	cmp	r3, #16
 800c7c2:	d122      	bne.n	800c80a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	f003 0310 	and.w	r3, r3, #16
 800c7ce:	2b10      	cmp	r3, #16
 800c7d0:	d11b      	bne.n	800c80a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f06f 0210 	mvn.w	r2, #16
 800c7da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2208      	movs	r2, #8
 800c7e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	69db      	ldr	r3, [r3, #28]
 800c7e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d003      	beq.n	800c7f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 f99b 	bl	800cb2c <HAL_TIM_IC_CaptureCallback>
 800c7f6:	e005      	b.n	800c804 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f7f4 fa41 	bl	8000c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f99e 	bl	800cb40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	691b      	ldr	r3, [r3, #16]
 800c810:	f003 0301 	and.w	r3, r3, #1
 800c814:	2b01      	cmp	r3, #1
 800c816:	d10e      	bne.n	800c836 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	f003 0301 	and.w	r3, r3, #1
 800c822:	2b01      	cmp	r3, #1
 800c824:	d107      	bne.n	800c836 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f06f 0201 	mvn.w	r2, #1
 800c82e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 f971 	bl	800cb18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c840:	2b80      	cmp	r3, #128	; 0x80
 800c842:	d10e      	bne.n	800c862 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c84e:	2b80      	cmp	r3, #128	; 0x80
 800c850:	d107      	bne.n	800c862 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c85a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fe2f 	bl	800d4c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	691b      	ldr	r3, [r3, #16]
 800c868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c86c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c870:	d10e      	bne.n	800c890 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c87c:	2b80      	cmp	r3, #128	; 0x80
 800c87e:	d107      	bne.n	800c890 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 fe22 	bl	800d4d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	691b      	ldr	r3, [r3, #16]
 800c896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c89a:	2b40      	cmp	r3, #64	; 0x40
 800c89c:	d10e      	bne.n	800c8bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8a8:	2b40      	cmp	r3, #64	; 0x40
 800c8aa:	d107      	bne.n	800c8bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c8b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 f94c 	bl	800cb54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	f003 0320 	and.w	r3, r3, #32
 800c8c6:	2b20      	cmp	r3, #32
 800c8c8:	d10e      	bne.n	800c8e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	f003 0320 	and.w	r3, r3, #32
 800c8d4:	2b20      	cmp	r3, #32
 800c8d6:	d107      	bne.n	800c8e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f06f 0220 	mvn.w	r2, #32
 800c8e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fde2 	bl	800d4ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8e8:	bf00      	nop
 800c8ea:	3708      	adds	r7, #8
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c906:	2b01      	cmp	r3, #1
 800c908:	d101      	bne.n	800c90e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c90a:	2302      	movs	r3, #2
 800c90c:	e0ff      	b.n	800cb0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2201      	movs	r2, #1
 800c912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b14      	cmp	r3, #20
 800c91a:	f200 80f0 	bhi.w	800cafe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c91e:	a201      	add	r2, pc, #4	; (adr r2, 800c924 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c924:	0800c979 	.word	0x0800c979
 800c928:	0800caff 	.word	0x0800caff
 800c92c:	0800caff 	.word	0x0800caff
 800c930:	0800caff 	.word	0x0800caff
 800c934:	0800c9b9 	.word	0x0800c9b9
 800c938:	0800caff 	.word	0x0800caff
 800c93c:	0800caff 	.word	0x0800caff
 800c940:	0800caff 	.word	0x0800caff
 800c944:	0800c9fb 	.word	0x0800c9fb
 800c948:	0800caff 	.word	0x0800caff
 800c94c:	0800caff 	.word	0x0800caff
 800c950:	0800caff 	.word	0x0800caff
 800c954:	0800ca3b 	.word	0x0800ca3b
 800c958:	0800caff 	.word	0x0800caff
 800c95c:	0800caff 	.word	0x0800caff
 800c960:	0800caff 	.word	0x0800caff
 800c964:	0800ca7d 	.word	0x0800ca7d
 800c968:	0800caff 	.word	0x0800caff
 800c96c:	0800caff 	.word	0x0800caff
 800c970:	0800caff 	.word	0x0800caff
 800c974:	0800cabd 	.word	0x0800cabd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68b9      	ldr	r1, [r7, #8]
 800c97e:	4618      	mov	r0, r3
 800c980:	f000 f98c 	bl	800cc9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	699a      	ldr	r2, [r3, #24]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f042 0208 	orr.w	r2, r2, #8
 800c992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	699a      	ldr	r2, [r3, #24]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f022 0204 	bic.w	r2, r2, #4
 800c9a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	6999      	ldr	r1, [r3, #24]
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	691a      	ldr	r2, [r3, #16]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	430a      	orrs	r2, r1
 800c9b4:	619a      	str	r2, [r3, #24]
      break;
 800c9b6:	e0a5      	b.n	800cb04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	68b9      	ldr	r1, [r7, #8]
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f000 f9fc 	bl	800cdbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	699a      	ldr	r2, [r3, #24]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	699a      	ldr	r2, [r3, #24]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	6999      	ldr	r1, [r3, #24]
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	021a      	lsls	r2, r3, #8
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	430a      	orrs	r2, r1
 800c9f6:	619a      	str	r2, [r3, #24]
      break;
 800c9f8:	e084      	b.n	800cb04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	68b9      	ldr	r1, [r7, #8]
 800ca00:	4618      	mov	r0, r3
 800ca02:	f000 fa65 	bl	800ced0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	69da      	ldr	r2, [r3, #28]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f042 0208 	orr.w	r2, r2, #8
 800ca14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	69da      	ldr	r2, [r3, #28]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f022 0204 	bic.w	r2, r2, #4
 800ca24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	69d9      	ldr	r1, [r3, #28]
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	691a      	ldr	r2, [r3, #16]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	430a      	orrs	r2, r1
 800ca36:	61da      	str	r2, [r3, #28]
      break;
 800ca38:	e064      	b.n	800cb04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	68b9      	ldr	r1, [r7, #8]
 800ca40:	4618      	mov	r0, r3
 800ca42:	f000 facd 	bl	800cfe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	69da      	ldr	r2, [r3, #28]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	69da      	ldr	r2, [r3, #28]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	69d9      	ldr	r1, [r3, #28]
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	021a      	lsls	r2, r3, #8
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	430a      	orrs	r2, r1
 800ca78:	61da      	str	r2, [r3, #28]
      break;
 800ca7a:	e043      	b.n	800cb04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	68b9      	ldr	r1, [r7, #8]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f000 fb16 	bl	800d0b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f042 0208 	orr.w	r2, r2, #8
 800ca96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f022 0204 	bic.w	r2, r2, #4
 800caa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	691a      	ldr	r2, [r3, #16]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	430a      	orrs	r2, r1
 800cab8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800caba:	e023      	b.n	800cb04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	68b9      	ldr	r1, [r7, #8]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 fb5a 	bl	800d17c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cad6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cae6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	691b      	ldr	r3, [r3, #16]
 800caf2:	021a      	lsls	r2, r3, #8
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	430a      	orrs	r2, r1
 800cafa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cafc:	e002      	b.n	800cb04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	75fb      	strb	r3, [r7, #23]
      break;
 800cb02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cb0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3718      	adds	r7, #24
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop

0800cb18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b083      	sub	sp, #12
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cb20:	bf00      	nop
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cb34:	bf00      	nop
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb5c:	bf00      	nop
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a40      	ldr	r2, [pc, #256]	; (800cc7c <TIM_Base_SetConfig+0x114>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d013      	beq.n	800cba8 <TIM_Base_SetConfig+0x40>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb86:	d00f      	beq.n	800cba8 <TIM_Base_SetConfig+0x40>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4a3d      	ldr	r2, [pc, #244]	; (800cc80 <TIM_Base_SetConfig+0x118>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d00b      	beq.n	800cba8 <TIM_Base_SetConfig+0x40>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4a3c      	ldr	r2, [pc, #240]	; (800cc84 <TIM_Base_SetConfig+0x11c>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d007      	beq.n	800cba8 <TIM_Base_SetConfig+0x40>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4a3b      	ldr	r2, [pc, #236]	; (800cc88 <TIM_Base_SetConfig+0x120>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d003      	beq.n	800cba8 <TIM_Base_SetConfig+0x40>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4a3a      	ldr	r2, [pc, #232]	; (800cc8c <TIM_Base_SetConfig+0x124>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d108      	bne.n	800cbba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a2f      	ldr	r2, [pc, #188]	; (800cc7c <TIM_Base_SetConfig+0x114>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d01f      	beq.n	800cc02 <TIM_Base_SetConfig+0x9a>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbc8:	d01b      	beq.n	800cc02 <TIM_Base_SetConfig+0x9a>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a2c      	ldr	r2, [pc, #176]	; (800cc80 <TIM_Base_SetConfig+0x118>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d017      	beq.n	800cc02 <TIM_Base_SetConfig+0x9a>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a2b      	ldr	r2, [pc, #172]	; (800cc84 <TIM_Base_SetConfig+0x11c>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d013      	beq.n	800cc02 <TIM_Base_SetConfig+0x9a>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4a2a      	ldr	r2, [pc, #168]	; (800cc88 <TIM_Base_SetConfig+0x120>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d00f      	beq.n	800cc02 <TIM_Base_SetConfig+0x9a>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a29      	ldr	r2, [pc, #164]	; (800cc8c <TIM_Base_SetConfig+0x124>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d00b      	beq.n	800cc02 <TIM_Base_SetConfig+0x9a>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a28      	ldr	r2, [pc, #160]	; (800cc90 <TIM_Base_SetConfig+0x128>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d007      	beq.n	800cc02 <TIM_Base_SetConfig+0x9a>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a27      	ldr	r2, [pc, #156]	; (800cc94 <TIM_Base_SetConfig+0x12c>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d003      	beq.n	800cc02 <TIM_Base_SetConfig+0x9a>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a26      	ldr	r2, [pc, #152]	; (800cc98 <TIM_Base_SetConfig+0x130>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d108      	bne.n	800cc14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	695b      	ldr	r3, [r3, #20]
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	689a      	ldr	r2, [r3, #8]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	4a10      	ldr	r2, [pc, #64]	; (800cc7c <TIM_Base_SetConfig+0x114>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d00f      	beq.n	800cc60 <TIM_Base_SetConfig+0xf8>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4a12      	ldr	r2, [pc, #72]	; (800cc8c <TIM_Base_SetConfig+0x124>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d00b      	beq.n	800cc60 <TIM_Base_SetConfig+0xf8>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4a11      	ldr	r2, [pc, #68]	; (800cc90 <TIM_Base_SetConfig+0x128>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d007      	beq.n	800cc60 <TIM_Base_SetConfig+0xf8>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4a10      	ldr	r2, [pc, #64]	; (800cc94 <TIM_Base_SetConfig+0x12c>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d003      	beq.n	800cc60 <TIM_Base_SetConfig+0xf8>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4a0f      	ldr	r2, [pc, #60]	; (800cc98 <TIM_Base_SetConfig+0x130>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d103      	bne.n	800cc68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	691a      	ldr	r2, [r3, #16]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	615a      	str	r2, [r3, #20]
}
 800cc6e:	bf00      	nop
 800cc70:	3714      	adds	r7, #20
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	40010000 	.word	0x40010000
 800cc80:	40000400 	.word	0x40000400
 800cc84:	40000800 	.word	0x40000800
 800cc88:	40000c00 	.word	0x40000c00
 800cc8c:	40010400 	.word	0x40010400
 800cc90:	40014000 	.word	0x40014000
 800cc94:	40014400 	.word	0x40014400
 800cc98:	40014800 	.word	0x40014800

0800cc9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b087      	sub	sp, #28
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	f023 0201 	bic.w	r2, r3, #1
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6a1b      	ldr	r3, [r3, #32]
 800ccb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	699b      	ldr	r3, [r3, #24]
 800ccc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	4b37      	ldr	r3, [pc, #220]	; (800cda4 <TIM_OC1_SetConfig+0x108>)
 800ccc8:	4013      	ands	r3, r2
 800ccca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f023 0303 	bic.w	r3, r3, #3
 800ccd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	f023 0302 	bic.w	r3, r3, #2
 800cce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	697a      	ldr	r2, [r7, #20]
 800ccec:	4313      	orrs	r3, r2
 800ccee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	4a2d      	ldr	r2, [pc, #180]	; (800cda8 <TIM_OC1_SetConfig+0x10c>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d00f      	beq.n	800cd18 <TIM_OC1_SetConfig+0x7c>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	4a2c      	ldr	r2, [pc, #176]	; (800cdac <TIM_OC1_SetConfig+0x110>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d00b      	beq.n	800cd18 <TIM_OC1_SetConfig+0x7c>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	4a2b      	ldr	r2, [pc, #172]	; (800cdb0 <TIM_OC1_SetConfig+0x114>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d007      	beq.n	800cd18 <TIM_OC1_SetConfig+0x7c>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4a2a      	ldr	r2, [pc, #168]	; (800cdb4 <TIM_OC1_SetConfig+0x118>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d003      	beq.n	800cd18 <TIM_OC1_SetConfig+0x7c>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	4a29      	ldr	r2, [pc, #164]	; (800cdb8 <TIM_OC1_SetConfig+0x11c>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d10c      	bne.n	800cd32 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	f023 0308 	bic.w	r3, r3, #8
 800cd1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	697a      	ldr	r2, [r7, #20]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	f023 0304 	bic.w	r3, r3, #4
 800cd30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4a1c      	ldr	r2, [pc, #112]	; (800cda8 <TIM_OC1_SetConfig+0x10c>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d00f      	beq.n	800cd5a <TIM_OC1_SetConfig+0xbe>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	4a1b      	ldr	r2, [pc, #108]	; (800cdac <TIM_OC1_SetConfig+0x110>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d00b      	beq.n	800cd5a <TIM_OC1_SetConfig+0xbe>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	4a1a      	ldr	r2, [pc, #104]	; (800cdb0 <TIM_OC1_SetConfig+0x114>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d007      	beq.n	800cd5a <TIM_OC1_SetConfig+0xbe>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4a19      	ldr	r2, [pc, #100]	; (800cdb4 <TIM_OC1_SetConfig+0x118>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d003      	beq.n	800cd5a <TIM_OC1_SetConfig+0xbe>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	4a18      	ldr	r2, [pc, #96]	; (800cdb8 <TIM_OC1_SetConfig+0x11c>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d111      	bne.n	800cd7e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	695b      	ldr	r3, [r3, #20]
 800cd6e:	693a      	ldr	r2, [r7, #16]
 800cd70:	4313      	orrs	r3, r2
 800cd72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	699b      	ldr	r3, [r3, #24]
 800cd78:	693a      	ldr	r2, [r7, #16]
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	693a      	ldr	r2, [r7, #16]
 800cd82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	685a      	ldr	r2, [r3, #4]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	697a      	ldr	r2, [r7, #20]
 800cd96:	621a      	str	r2, [r3, #32]
}
 800cd98:	bf00      	nop
 800cd9a:	371c      	adds	r7, #28
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	fffeff8f 	.word	0xfffeff8f
 800cda8:	40010000 	.word	0x40010000
 800cdac:	40010400 	.word	0x40010400
 800cdb0:	40014000 	.word	0x40014000
 800cdb4:	40014400 	.word	0x40014400
 800cdb8:	40014800 	.word	0x40014800

0800cdbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b087      	sub	sp, #28
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6a1b      	ldr	r3, [r3, #32]
 800cdca:	f023 0210 	bic.w	r2, r3, #16
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a1b      	ldr	r3, [r3, #32]
 800cdd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	699b      	ldr	r3, [r3, #24]
 800cde2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	4b34      	ldr	r3, [pc, #208]	; (800ceb8 <TIM_OC2_SetConfig+0xfc>)
 800cde8:	4013      	ands	r3, r2
 800cdea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	021b      	lsls	r3, r3, #8
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	f023 0320 	bic.w	r3, r3, #32
 800ce06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	011b      	lsls	r3, r3, #4
 800ce0e:	697a      	ldr	r2, [r7, #20]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	4a29      	ldr	r2, [pc, #164]	; (800cebc <TIM_OC2_SetConfig+0x100>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d003      	beq.n	800ce24 <TIM_OC2_SetConfig+0x68>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4a28      	ldr	r2, [pc, #160]	; (800cec0 <TIM_OC2_SetConfig+0x104>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d10d      	bne.n	800ce40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	011b      	lsls	r3, r3, #4
 800ce32:	697a      	ldr	r2, [r7, #20]
 800ce34:	4313      	orrs	r3, r2
 800ce36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4a1e      	ldr	r2, [pc, #120]	; (800cebc <TIM_OC2_SetConfig+0x100>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d00f      	beq.n	800ce68 <TIM_OC2_SetConfig+0xac>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4a1d      	ldr	r2, [pc, #116]	; (800cec0 <TIM_OC2_SetConfig+0x104>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d00b      	beq.n	800ce68 <TIM_OC2_SetConfig+0xac>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	4a1c      	ldr	r2, [pc, #112]	; (800cec4 <TIM_OC2_SetConfig+0x108>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d007      	beq.n	800ce68 <TIM_OC2_SetConfig+0xac>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4a1b      	ldr	r2, [pc, #108]	; (800cec8 <TIM_OC2_SetConfig+0x10c>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d003      	beq.n	800ce68 <TIM_OC2_SetConfig+0xac>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	4a1a      	ldr	r2, [pc, #104]	; (800cecc <TIM_OC2_SetConfig+0x110>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d113      	bne.n	800ce90 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	695b      	ldr	r3, [r3, #20]
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	693a      	ldr	r2, [r7, #16]
 800ce80:	4313      	orrs	r3, r2
 800ce82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	699b      	ldr	r3, [r3, #24]
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	693a      	ldr	r2, [r7, #16]
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	693a      	ldr	r2, [r7, #16]
 800ce94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	68fa      	ldr	r2, [r7, #12]
 800ce9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	685a      	ldr	r2, [r3, #4]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	697a      	ldr	r2, [r7, #20]
 800cea8:	621a      	str	r2, [r3, #32]
}
 800ceaa:	bf00      	nop
 800ceac:	371c      	adds	r7, #28
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr
 800ceb6:	bf00      	nop
 800ceb8:	feff8fff 	.word	0xfeff8fff
 800cebc:	40010000 	.word	0x40010000
 800cec0:	40010400 	.word	0x40010400
 800cec4:	40014000 	.word	0x40014000
 800cec8:	40014400 	.word	0x40014400
 800cecc:	40014800 	.word	0x40014800

0800ced0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b087      	sub	sp, #28
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6a1b      	ldr	r3, [r3, #32]
 800cede:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	69db      	ldr	r3, [r3, #28]
 800cef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	4b33      	ldr	r3, [pc, #204]	; (800cfc8 <TIM_OC3_SetConfig+0xf8>)
 800cefc:	4013      	ands	r3, r2
 800cefe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f023 0303 	bic.w	r3, r3, #3
 800cf06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	689b      	ldr	r3, [r3, #8]
 800cf1e:	021b      	lsls	r3, r3, #8
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	4a28      	ldr	r2, [pc, #160]	; (800cfcc <TIM_OC3_SetConfig+0xfc>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d003      	beq.n	800cf36 <TIM_OC3_SetConfig+0x66>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4a27      	ldr	r2, [pc, #156]	; (800cfd0 <TIM_OC3_SetConfig+0x100>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d10d      	bne.n	800cf52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	021b      	lsls	r3, r3, #8
 800cf44:	697a      	ldr	r2, [r7, #20]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4a1d      	ldr	r2, [pc, #116]	; (800cfcc <TIM_OC3_SetConfig+0xfc>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d00f      	beq.n	800cf7a <TIM_OC3_SetConfig+0xaa>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4a1c      	ldr	r2, [pc, #112]	; (800cfd0 <TIM_OC3_SetConfig+0x100>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d00b      	beq.n	800cf7a <TIM_OC3_SetConfig+0xaa>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a1b      	ldr	r2, [pc, #108]	; (800cfd4 <TIM_OC3_SetConfig+0x104>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d007      	beq.n	800cf7a <TIM_OC3_SetConfig+0xaa>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4a1a      	ldr	r2, [pc, #104]	; (800cfd8 <TIM_OC3_SetConfig+0x108>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d003      	beq.n	800cf7a <TIM_OC3_SetConfig+0xaa>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	4a19      	ldr	r2, [pc, #100]	; (800cfdc <TIM_OC3_SetConfig+0x10c>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d113      	bne.n	800cfa2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	695b      	ldr	r3, [r3, #20]
 800cf8e:	011b      	lsls	r3, r3, #4
 800cf90:	693a      	ldr	r2, [r7, #16]
 800cf92:	4313      	orrs	r3, r2
 800cf94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	699b      	ldr	r3, [r3, #24]
 800cf9a:	011b      	lsls	r3, r3, #4
 800cf9c:	693a      	ldr	r2, [r7, #16]
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	693a      	ldr	r2, [r7, #16]
 800cfa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	685a      	ldr	r2, [r3, #4]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	697a      	ldr	r2, [r7, #20]
 800cfba:	621a      	str	r2, [r3, #32]
}
 800cfbc:	bf00      	nop
 800cfbe:	371c      	adds	r7, #28
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr
 800cfc8:	fffeff8f 	.word	0xfffeff8f
 800cfcc:	40010000 	.word	0x40010000
 800cfd0:	40010400 	.word	0x40010400
 800cfd4:	40014000 	.word	0x40014000
 800cfd8:	40014400 	.word	0x40014400
 800cfdc:	40014800 	.word	0x40014800

0800cfe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b087      	sub	sp, #28
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a1b      	ldr	r3, [r3, #32]
 800cfee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6a1b      	ldr	r3, [r3, #32]
 800cffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	69db      	ldr	r3, [r3, #28]
 800d006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	4b24      	ldr	r3, [pc, #144]	; (800d09c <TIM_OC4_SetConfig+0xbc>)
 800d00c:	4013      	ands	r3, r2
 800d00e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	021b      	lsls	r3, r3, #8
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	4313      	orrs	r3, r2
 800d022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d02a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	689b      	ldr	r3, [r3, #8]
 800d030:	031b      	lsls	r3, r3, #12
 800d032:	693a      	ldr	r2, [r7, #16]
 800d034:	4313      	orrs	r3, r2
 800d036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4a19      	ldr	r2, [pc, #100]	; (800d0a0 <TIM_OC4_SetConfig+0xc0>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d00f      	beq.n	800d060 <TIM_OC4_SetConfig+0x80>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4a18      	ldr	r2, [pc, #96]	; (800d0a4 <TIM_OC4_SetConfig+0xc4>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d00b      	beq.n	800d060 <TIM_OC4_SetConfig+0x80>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4a17      	ldr	r2, [pc, #92]	; (800d0a8 <TIM_OC4_SetConfig+0xc8>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d007      	beq.n	800d060 <TIM_OC4_SetConfig+0x80>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4a16      	ldr	r2, [pc, #88]	; (800d0ac <TIM_OC4_SetConfig+0xcc>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d003      	beq.n	800d060 <TIM_OC4_SetConfig+0x80>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4a15      	ldr	r2, [pc, #84]	; (800d0b0 <TIM_OC4_SetConfig+0xd0>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d109      	bne.n	800d074 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	695b      	ldr	r3, [r3, #20]
 800d06c:	019b      	lsls	r3, r3, #6
 800d06e:	697a      	ldr	r2, [r7, #20]
 800d070:	4313      	orrs	r3, r2
 800d072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	697a      	ldr	r2, [r7, #20]
 800d078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	621a      	str	r2, [r3, #32]
}
 800d08e:	bf00      	nop
 800d090:	371c      	adds	r7, #28
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	feff8fff 	.word	0xfeff8fff
 800d0a0:	40010000 	.word	0x40010000
 800d0a4:	40010400 	.word	0x40010400
 800d0a8:	40014000 	.word	0x40014000
 800d0ac:	40014400 	.word	0x40014400
 800d0b0:	40014800 	.word	0x40014800

0800d0b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b087      	sub	sp, #28
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a1b      	ldr	r3, [r3, #32]
 800d0c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a1b      	ldr	r3, [r3, #32]
 800d0ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	4b21      	ldr	r3, [pc, #132]	; (800d164 <TIM_OC5_SetConfig+0xb0>)
 800d0e0:	4013      	ands	r3, r2
 800d0e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d0f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	041b      	lsls	r3, r3, #16
 800d0fc:	693a      	ldr	r2, [r7, #16]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a18      	ldr	r2, [pc, #96]	; (800d168 <TIM_OC5_SetConfig+0xb4>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d00f      	beq.n	800d12a <TIM_OC5_SetConfig+0x76>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a17      	ldr	r2, [pc, #92]	; (800d16c <TIM_OC5_SetConfig+0xb8>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d00b      	beq.n	800d12a <TIM_OC5_SetConfig+0x76>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4a16      	ldr	r2, [pc, #88]	; (800d170 <TIM_OC5_SetConfig+0xbc>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d007      	beq.n	800d12a <TIM_OC5_SetConfig+0x76>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4a15      	ldr	r2, [pc, #84]	; (800d174 <TIM_OC5_SetConfig+0xc0>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d003      	beq.n	800d12a <TIM_OC5_SetConfig+0x76>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4a14      	ldr	r2, [pc, #80]	; (800d178 <TIM_OC5_SetConfig+0xc4>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d109      	bne.n	800d13e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d130:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	695b      	ldr	r3, [r3, #20]
 800d136:	021b      	lsls	r3, r3, #8
 800d138:	697a      	ldr	r2, [r7, #20]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	697a      	ldr	r2, [r7, #20]
 800d142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	68fa      	ldr	r2, [r7, #12]
 800d148:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	693a      	ldr	r2, [r7, #16]
 800d156:	621a      	str	r2, [r3, #32]
}
 800d158:	bf00      	nop
 800d15a:	371c      	adds	r7, #28
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr
 800d164:	fffeff8f 	.word	0xfffeff8f
 800d168:	40010000 	.word	0x40010000
 800d16c:	40010400 	.word	0x40010400
 800d170:	40014000 	.word	0x40014000
 800d174:	40014400 	.word	0x40014400
 800d178:	40014800 	.word	0x40014800

0800d17c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b087      	sub	sp, #28
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6a1b      	ldr	r3, [r3, #32]
 800d18a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6a1b      	ldr	r3, [r3, #32]
 800d196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d1a4:	68fa      	ldr	r2, [r7, #12]
 800d1a6:	4b22      	ldr	r3, [pc, #136]	; (800d230 <TIM_OC6_SetConfig+0xb4>)
 800d1a8:	4013      	ands	r3, r2
 800d1aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	021b      	lsls	r3, r3, #8
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d1be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	051b      	lsls	r3, r3, #20
 800d1c6:	693a      	ldr	r2, [r7, #16]
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4a19      	ldr	r2, [pc, #100]	; (800d234 <TIM_OC6_SetConfig+0xb8>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d00f      	beq.n	800d1f4 <TIM_OC6_SetConfig+0x78>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	4a18      	ldr	r2, [pc, #96]	; (800d238 <TIM_OC6_SetConfig+0xbc>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d00b      	beq.n	800d1f4 <TIM_OC6_SetConfig+0x78>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	4a17      	ldr	r2, [pc, #92]	; (800d23c <TIM_OC6_SetConfig+0xc0>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d007      	beq.n	800d1f4 <TIM_OC6_SetConfig+0x78>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	4a16      	ldr	r2, [pc, #88]	; (800d240 <TIM_OC6_SetConfig+0xc4>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d003      	beq.n	800d1f4 <TIM_OC6_SetConfig+0x78>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	4a15      	ldr	r2, [pc, #84]	; (800d244 <TIM_OC6_SetConfig+0xc8>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d109      	bne.n	800d208 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	695b      	ldr	r3, [r3, #20]
 800d200:	029b      	lsls	r3, r3, #10
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	4313      	orrs	r3, r2
 800d206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	697a      	ldr	r2, [r7, #20]
 800d20c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	685a      	ldr	r2, [r3, #4]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	693a      	ldr	r2, [r7, #16]
 800d220:	621a      	str	r2, [r3, #32]
}
 800d222:	bf00      	nop
 800d224:	371c      	adds	r7, #28
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr
 800d22e:	bf00      	nop
 800d230:	feff8fff 	.word	0xfeff8fff
 800d234:	40010000 	.word	0x40010000
 800d238:	40010400 	.word	0x40010400
 800d23c:	40014000 	.word	0x40014000
 800d240:	40014400 	.word	0x40014400
 800d244:	40014800 	.word	0x40014800

0800d248 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d248:	b480      	push	{r7}
 800d24a:	b087      	sub	sp, #28
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	f003 031f 	and.w	r3, r3, #31
 800d25a:	2201      	movs	r2, #1
 800d25c:	fa02 f303 	lsl.w	r3, r2, r3
 800d260:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6a1a      	ldr	r2, [r3, #32]
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	43db      	mvns	r3, r3
 800d26a:	401a      	ands	r2, r3
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	6a1a      	ldr	r2, [r3, #32]
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	f003 031f 	and.w	r3, r3, #31
 800d27a:	6879      	ldr	r1, [r7, #4]
 800d27c:	fa01 f303 	lsl.w	r3, r1, r3
 800d280:	431a      	orrs	r2, r3
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	621a      	str	r2, [r3, #32]
}
 800d286:	bf00      	nop
 800d288:	371c      	adds	r7, #28
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr
	...

0800d294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d101      	bne.n	800d2ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d2a8:	2302      	movs	r3, #2
 800d2aa:	e06d      	b.n	800d388 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2202      	movs	r2, #2
 800d2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a30      	ldr	r2, [pc, #192]	; (800d394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d004      	beq.n	800d2e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a2f      	ldr	r2, [pc, #188]	; (800d398 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d108      	bne.n	800d2f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d2e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	4313      	orrs	r3, r2
 800d302:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a20      	ldr	r2, [pc, #128]	; (800d394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d022      	beq.n	800d35c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d31e:	d01d      	beq.n	800d35c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a1d      	ldr	r2, [pc, #116]	; (800d39c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d018      	beq.n	800d35c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4a1c      	ldr	r2, [pc, #112]	; (800d3a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d013      	beq.n	800d35c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a1a      	ldr	r2, [pc, #104]	; (800d3a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d00e      	beq.n	800d35c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a15      	ldr	r2, [pc, #84]	; (800d398 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d009      	beq.n	800d35c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a16      	ldr	r2, [pc, #88]	; (800d3a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d004      	beq.n	800d35c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4a15      	ldr	r2, [pc, #84]	; (800d3ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d10c      	bne.n	800d376 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d362:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	68ba      	ldr	r2, [r7, #8]
 800d36a:	4313      	orrs	r3, r2
 800d36c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	68ba      	ldr	r2, [r7, #8]
 800d374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2201      	movs	r2, #1
 800d37a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d386:	2300      	movs	r3, #0
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3714      	adds	r7, #20
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr
 800d394:	40010000 	.word	0x40010000
 800d398:	40010400 	.word	0x40010400
 800d39c:	40000400 	.word	0x40000400
 800d3a0:	40000800 	.word	0x40000800
 800d3a4:	40000c00 	.word	0x40000c00
 800d3a8:	40001800 	.word	0x40001800
 800d3ac:	40014000 	.word	0x40014000

0800d3b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d101      	bne.n	800d3cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d3c8:	2302      	movs	r3, #2
 800d3ca:	e065      	b.n	800d498 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	4313      	orrs	r3, r2
 800d3ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4313      	orrs	r3, r2
 800d40a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	691b      	ldr	r3, [r3, #16]
 800d416:	4313      	orrs	r3, r2
 800d418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	695b      	ldr	r3, [r3, #20]
 800d424:	4313      	orrs	r3, r2
 800d426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d432:	4313      	orrs	r3, r2
 800d434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	699b      	ldr	r3, [r3, #24]
 800d440:	041b      	lsls	r3, r3, #16
 800d442:	4313      	orrs	r3, r2
 800d444:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4a16      	ldr	r2, [pc, #88]	; (800d4a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d004      	beq.n	800d45a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a14      	ldr	r2, [pc, #80]	; (800d4a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d115      	bne.n	800d486 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d464:	051b      	lsls	r3, r3, #20
 800d466:	4313      	orrs	r3, r2
 800d468:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	69db      	ldr	r3, [r3, #28]
 800d474:	4313      	orrs	r3, r2
 800d476:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	6a1b      	ldr	r3, [r3, #32]
 800d482:	4313      	orrs	r3, r2
 800d484:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	68fa      	ldr	r2, [r7, #12]
 800d48c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2200      	movs	r2, #0
 800d492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3714      	adds	r7, #20
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr
 800d4a4:	40010000 	.word	0x40010000
 800d4a8:	40010400 	.word	0x40010400

0800d4ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4b4:	bf00      	nop
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d4c8:	bf00      	nop
 800d4ca:	370c      	adds	r7, #12
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d4dc:	bf00      	nop
 800d4de:	370c      	adds	r7, #12
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d101      	bne.n	800d4fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e042      	b.n	800d580 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d500:	2b00      	cmp	r3, #0
 800d502:	d106      	bne.n	800d512 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7f4 ff97 	bl	8002440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2224      	movs	r2, #36	; 0x24
 800d516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f022 0201 	bic.w	r2, r2, #1
 800d528:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 fcd6 	bl	800dedc <UART_SetConfig>
 800d530:	4603      	mov	r3, r0
 800d532:	2b01      	cmp	r3, #1
 800d534:	d101      	bne.n	800d53a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d536:	2301      	movs	r3, #1
 800d538:	e022      	b.n	800d580 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d002      	beq.n	800d548 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f001 fa32 	bl	800e9ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	685a      	ldr	r2, [r3, #4]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	689a      	ldr	r2, [r3, #8]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f042 0201 	orr.w	r2, r2, #1
 800d576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f001 fab9 	bl	800eaf0 <UART_CheckIdleState>
 800d57e:	4603      	mov	r3, r0
}
 800d580:	4618      	mov	r0, r3
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b08a      	sub	sp, #40	; 0x28
 800d58c:	af02      	add	r7, sp, #8
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	603b      	str	r3, [r7, #0]
 800d594:	4613      	mov	r3, r2
 800d596:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d59e:	2b20      	cmp	r3, #32
 800d5a0:	f040 8083 	bne.w	800d6aa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d002      	beq.n	800d5b0 <HAL_UART_Transmit+0x28>
 800d5aa:	88fb      	ldrh	r3, [r7, #6]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d101      	bne.n	800d5b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	e07b      	b.n	800d6ac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d101      	bne.n	800d5c2 <HAL_UART_Transmit+0x3a>
 800d5be:	2302      	movs	r3, #2
 800d5c0:	e074      	b.n	800d6ac <HAL_UART_Transmit+0x124>
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2221      	movs	r2, #33	; 0x21
 800d5d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d5da:	f7f5 f987 	bl	80028ec <HAL_GetTick>
 800d5de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	88fa      	ldrh	r2, [r7, #6]
 800d5e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	88fa      	ldrh	r2, [r7, #6]
 800d5ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5f8:	d108      	bne.n	800d60c <HAL_UART_Transmit+0x84>
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	691b      	ldr	r3, [r3, #16]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d104      	bne.n	800d60c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d602:	2300      	movs	r3, #0
 800d604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	61bb      	str	r3, [r7, #24]
 800d60a:	e003      	b.n	800d614 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d610:	2300      	movs	r3, #0
 800d612:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2200      	movs	r2, #0
 800d618:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d61c:	e02c      	b.n	800d678 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	9300      	str	r3, [sp, #0]
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	2200      	movs	r2, #0
 800d626:	2180      	movs	r1, #128	; 0x80
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f001 faac 	bl	800eb86 <UART_WaitOnFlagUntilTimeout>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d001      	beq.n	800d638 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d634:	2303      	movs	r3, #3
 800d636:	e039      	b.n	800d6ac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d10b      	bne.n	800d656 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	881b      	ldrh	r3, [r3, #0]
 800d642:	461a      	mov	r2, r3
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d64c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	3302      	adds	r3, #2
 800d652:	61bb      	str	r3, [r7, #24]
 800d654:	e007      	b.n	800d666 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	781a      	ldrb	r2, [r3, #0]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	3301      	adds	r3, #1
 800d664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	3b01      	subs	r3, #1
 800d670:	b29a      	uxth	r2, r3
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d67e:	b29b      	uxth	r3, r3
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1cc      	bne.n	800d61e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	9300      	str	r3, [sp, #0]
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	2200      	movs	r2, #0
 800d68c:	2140      	movs	r1, #64	; 0x40
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	f001 fa79 	bl	800eb86 <UART_WaitOnFlagUntilTimeout>
 800d694:	4603      	mov	r3, r0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d001      	beq.n	800d69e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d69a:	2303      	movs	r3, #3
 800d69c:	e006      	b.n	800d6ac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2220      	movs	r2, #32
 800d6a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	e000      	b.n	800d6ac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d6aa:	2302      	movs	r3, #2
  }
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3720      	adds	r7, #32
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b08a      	sub	sp, #40	; 0x28
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6c8:	2b20      	cmp	r3, #32
 800d6ca:	d142      	bne.n	800d752 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d002      	beq.n	800d6d8 <HAL_UART_Receive_IT+0x24>
 800d6d2:	88fb      	ldrh	r3, [r7, #6]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d101      	bne.n	800d6dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e03b      	b.n	800d754 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d101      	bne.n	800d6ea <HAL_UART_Receive_IT+0x36>
 800d6e6:	2302      	movs	r3, #2
 800d6e8:	e034      	b.n	800d754 <HAL_UART_Receive_IT+0xa0>
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a17      	ldr	r2, [pc, #92]	; (800d75c <HAL_UART_Receive_IT+0xa8>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d01f      	beq.n	800d742 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d018      	beq.n	800d742 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	e853 3f00 	ldrex	r3, [r3]
 800d71c:	613b      	str	r3, [r7, #16]
   return(result);
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d724:	627b      	str	r3, [r7, #36]	; 0x24
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	461a      	mov	r2, r3
 800d72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72e:	623b      	str	r3, [r7, #32]
 800d730:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d732:	69f9      	ldr	r1, [r7, #28]
 800d734:	6a3a      	ldr	r2, [r7, #32]
 800d736:	e841 2300 	strex	r3, r2, [r1]
 800d73a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d1e6      	bne.n	800d710 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d742:	88fb      	ldrh	r3, [r7, #6]
 800d744:	461a      	mov	r2, r3
 800d746:	68b9      	ldr	r1, [r7, #8]
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f001 fae5 	bl	800ed18 <UART_Start_Receive_IT>
 800d74e:	4603      	mov	r3, r0
 800d750:	e000      	b.n	800d754 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d752:	2302      	movs	r3, #2
  }
}
 800d754:	4618      	mov	r0, r3
 800d756:	3728      	adds	r7, #40	; 0x28
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	58000c00 	.word	0x58000c00

0800d760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b0ba      	sub	sp, #232	; 0xe8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	69db      	ldr	r3, [r3, #28]
 800d76e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d78a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d78e:	4013      	ands	r3, r2
 800d790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d11b      	bne.n	800d7d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d79c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7a0:	f003 0320 	and.w	r3, r3, #32
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d015      	beq.n	800d7d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d7a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7ac:	f003 0320 	and.w	r3, r3, #32
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d105      	bne.n	800d7c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d7b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d009      	beq.n	800d7d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	f000 835a 	beq.w	800de7e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	4798      	blx	r3
      }
      return;
 800d7d2:	e354      	b.n	800de7e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d7d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f000 811f 	beq.w	800da1c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d7de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d7e2:	4b8b      	ldr	r3, [pc, #556]	; (800da10 <HAL_UART_IRQHandler+0x2b0>)
 800d7e4:	4013      	ands	r3, r2
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d106      	bne.n	800d7f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d7ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d7ee:	4b89      	ldr	r3, [pc, #548]	; (800da14 <HAL_UART_IRQHandler+0x2b4>)
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f000 8112 	beq.w	800da1c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d7f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7fc:	f003 0301 	and.w	r3, r3, #1
 800d800:	2b00      	cmp	r3, #0
 800d802:	d011      	beq.n	800d828 <HAL_UART_IRQHandler+0xc8>
 800d804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00b      	beq.n	800d828 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2201      	movs	r2, #1
 800d816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d81e:	f043 0201 	orr.w	r2, r3, #1
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d82c:	f003 0302 	and.w	r3, r3, #2
 800d830:	2b00      	cmp	r3, #0
 800d832:	d011      	beq.n	800d858 <HAL_UART_IRQHandler+0xf8>
 800d834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d838:	f003 0301 	and.w	r3, r3, #1
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00b      	beq.n	800d858 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	2202      	movs	r2, #2
 800d846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d84e:	f043 0204 	orr.w	r2, r3, #4
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d85c:	f003 0304 	and.w	r3, r3, #4
 800d860:	2b00      	cmp	r3, #0
 800d862:	d011      	beq.n	800d888 <HAL_UART_IRQHandler+0x128>
 800d864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d868:	f003 0301 	and.w	r3, r3, #1
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d00b      	beq.n	800d888 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2204      	movs	r2, #4
 800d876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d87e:	f043 0202 	orr.w	r2, r3, #2
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d88c:	f003 0308 	and.w	r3, r3, #8
 800d890:	2b00      	cmp	r3, #0
 800d892:	d017      	beq.n	800d8c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d898:	f003 0320 	and.w	r3, r3, #32
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d105      	bne.n	800d8ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d8a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d8a4:	4b5a      	ldr	r3, [pc, #360]	; (800da10 <HAL_UART_IRQHandler+0x2b0>)
 800d8a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00b      	beq.n	800d8c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	2208      	movs	r2, #8
 800d8b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8ba:	f043 0208 	orr.w	r2, r3, #8
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d8c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d012      	beq.n	800d8f6 <HAL_UART_IRQHandler+0x196>
 800d8d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d00c      	beq.n	800d8f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8ec:	f043 0220 	orr.w	r2, r3, #32
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f000 82c0 	beq.w	800de82 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d906:	f003 0320 	and.w	r3, r3, #32
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d013      	beq.n	800d936 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d90e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d912:	f003 0320 	and.w	r3, r3, #32
 800d916:	2b00      	cmp	r3, #0
 800d918:	d105      	bne.n	800d926 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d91a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d91e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d922:	2b00      	cmp	r3, #0
 800d924:	d007      	beq.n	800d936 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d003      	beq.n	800d936 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d93c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d94a:	2b40      	cmp	r3, #64	; 0x40
 800d94c:	d005      	beq.n	800d95a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d94e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d952:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d956:	2b00      	cmp	r3, #0
 800d958:	d04f      	beq.n	800d9fa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f001 fb06 	bl	800ef6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d96a:	2b40      	cmp	r3, #64	; 0x40
 800d96c:	d141      	bne.n	800d9f2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	3308      	adds	r3, #8
 800d974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d97c:	e853 3f00 	ldrex	r3, [r3]
 800d980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d98c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	3308      	adds	r3, #8
 800d996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d99a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d99e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d9a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d9aa:	e841 2300 	strex	r3, r2, [r1]
 800d9ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d9b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d1d9      	bne.n	800d96e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d013      	beq.n	800d9ea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9c6:	4a14      	ldr	r2, [pc, #80]	; (800da18 <HAL_UART_IRQHandler+0x2b8>)
 800d9c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7f7 ffa6 	bl	8005920 <HAL_DMA_Abort_IT>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d017      	beq.n	800da0a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d9e4:	4610      	mov	r0, r2
 800d9e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9e8:	e00f      	b.n	800da0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 fa60 	bl	800deb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9f0:	e00b      	b.n	800da0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 fa5c 	bl	800deb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9f8:	e007      	b.n	800da0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 fa58 	bl	800deb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800da08:	e23b      	b.n	800de82 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da0a:	bf00      	nop
    return;
 800da0c:	e239      	b.n	800de82 <HAL_UART_IRQHandler+0x722>
 800da0e:	bf00      	nop
 800da10:	10000001 	.word	0x10000001
 800da14:	04000120 	.word	0x04000120
 800da18:	0800f039 	.word	0x0800f039

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da20:	2b01      	cmp	r3, #1
 800da22:	f040 81ce 	bne.w	800ddc2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800da26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da2a:	f003 0310 	and.w	r3, r3, #16
 800da2e:	2b00      	cmp	r3, #0
 800da30:	f000 81c7 	beq.w	800ddc2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800da34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da38:	f003 0310 	and.w	r3, r3, #16
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f000 81c0 	beq.w	800ddc2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2210      	movs	r2, #16
 800da48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da54:	2b40      	cmp	r3, #64	; 0x40
 800da56:	f040 813b 	bne.w	800dcd0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a8b      	ldr	r2, [pc, #556]	; (800dc90 <HAL_UART_IRQHandler+0x530>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d059      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a89      	ldr	r2, [pc, #548]	; (800dc94 <HAL_UART_IRQHandler+0x534>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d053      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a87      	ldr	r2, [pc, #540]	; (800dc98 <HAL_UART_IRQHandler+0x538>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d04d      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a85      	ldr	r2, [pc, #532]	; (800dc9c <HAL_UART_IRQHandler+0x53c>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d047      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a83      	ldr	r2, [pc, #524]	; (800dca0 <HAL_UART_IRQHandler+0x540>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d041      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a81      	ldr	r2, [pc, #516]	; (800dca4 <HAL_UART_IRQHandler+0x544>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d03b      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a7f      	ldr	r2, [pc, #508]	; (800dca8 <HAL_UART_IRQHandler+0x548>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d035      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a7d      	ldr	r2, [pc, #500]	; (800dcac <HAL_UART_IRQHandler+0x54c>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d02f      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a7b      	ldr	r2, [pc, #492]	; (800dcb0 <HAL_UART_IRQHandler+0x550>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d029      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a79      	ldr	r2, [pc, #484]	; (800dcb4 <HAL_UART_IRQHandler+0x554>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d023      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4a77      	ldr	r2, [pc, #476]	; (800dcb8 <HAL_UART_IRQHandler+0x558>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d01d      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a75      	ldr	r2, [pc, #468]	; (800dcbc <HAL_UART_IRQHandler+0x55c>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d017      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a73      	ldr	r2, [pc, #460]	; (800dcc0 <HAL_UART_IRQHandler+0x560>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d011      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a71      	ldr	r2, [pc, #452]	; (800dcc4 <HAL_UART_IRQHandler+0x564>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d00b      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a6f      	ldr	r2, [pc, #444]	; (800dcc8 <HAL_UART_IRQHandler+0x568>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d005      	beq.n	800db1a <HAL_UART_IRQHandler+0x3ba>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a6d      	ldr	r2, [pc, #436]	; (800dccc <HAL_UART_IRQHandler+0x56c>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d105      	bne.n	800db26 <HAL_UART_IRQHandler+0x3c6>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	b29b      	uxth	r3, r3
 800db24:	e004      	b.n	800db30 <HAL_UART_IRQHandler+0x3d0>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	b29b      	uxth	r3, r3
 800db30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800db34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f000 81a4 	beq.w	800de86 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db48:	429a      	cmp	r2, r3
 800db4a:	f080 819c 	bcs.w	800de86 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db5c:	69db      	ldr	r3, [r3, #28]
 800db5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db62:	f000 8086 	beq.w	800dc72 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db72:	e853 3f00 	ldrex	r3, [r3]
 800db76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800db7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	461a      	mov	r2, r3
 800db8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800db90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800db94:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db98:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800db9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dba0:	e841 2300 	strex	r3, r2, [r1]
 800dba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d1da      	bne.n	800db66 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	3308      	adds	r3, #8
 800dbb6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbba:	e853 3f00 	ldrex	r3, [r3]
 800dbbe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dbc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbc2:	f023 0301 	bic.w	r3, r3, #1
 800dbc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	3308      	adds	r3, #8
 800dbd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dbd4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dbd8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbda:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dbdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dbe0:	e841 2300 	strex	r3, r2, [r1]
 800dbe4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dbe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1e1      	bne.n	800dbb0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	3308      	adds	r3, #8
 800dbf2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbf6:	e853 3f00 	ldrex	r3, [r3]
 800dbfa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dbfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	3308      	adds	r3, #8
 800dc0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dc10:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dc12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dc16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dc18:	e841 2300 	strex	r3, r2, [r1]
 800dc1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dc1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1e3      	bne.n	800dbec <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2220      	movs	r2, #32
 800dc28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc3a:	e853 3f00 	ldrex	r3, [r3]
 800dc3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dc40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc42:	f023 0310 	bic.w	r3, r3, #16
 800dc46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	461a      	mov	r2, r3
 800dc50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc54:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc5c:	e841 2300 	strex	r3, r2, [r1]
 800dc60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dc62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d1e4      	bne.n	800dc32 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7f7 fb39 	bl	80052e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	1ad3      	subs	r3, r2, r3
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	4619      	mov	r1, r3
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 f91c 	bl	800dec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc8c:	e0fb      	b.n	800de86 <HAL_UART_IRQHandler+0x726>
 800dc8e:	bf00      	nop
 800dc90:	40020010 	.word	0x40020010
 800dc94:	40020028 	.word	0x40020028
 800dc98:	40020040 	.word	0x40020040
 800dc9c:	40020058 	.word	0x40020058
 800dca0:	40020070 	.word	0x40020070
 800dca4:	40020088 	.word	0x40020088
 800dca8:	400200a0 	.word	0x400200a0
 800dcac:	400200b8 	.word	0x400200b8
 800dcb0:	40020410 	.word	0x40020410
 800dcb4:	40020428 	.word	0x40020428
 800dcb8:	40020440 	.word	0x40020440
 800dcbc:	40020458 	.word	0x40020458
 800dcc0:	40020470 	.word	0x40020470
 800dcc4:	40020488 	.word	0x40020488
 800dcc8:	400204a0 	.word	0x400204a0
 800dccc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcdc:	b29b      	uxth	r3, r3
 800dcde:	1ad3      	subs	r3, r2, r3
 800dce0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	f000 80cc 	beq.w	800de8a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800dcf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	f000 80c7 	beq.w	800de8a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd04:	e853 3f00 	ldrex	r3, [r3]
 800dd08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	461a      	mov	r2, r3
 800dd1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dd1e:	647b      	str	r3, [r7, #68]	; 0x44
 800dd20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd26:	e841 2300 	strex	r3, r2, [r1]
 800dd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1e4      	bne.n	800dcfc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	3308      	adds	r3, #8
 800dd38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3c:	e853 3f00 	ldrex	r3, [r3]
 800dd40:	623b      	str	r3, [r7, #32]
   return(result);
 800dd42:	6a3a      	ldr	r2, [r7, #32]
 800dd44:	4b54      	ldr	r3, [pc, #336]	; (800de98 <HAL_UART_IRQHandler+0x738>)
 800dd46:	4013      	ands	r3, r2
 800dd48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	3308      	adds	r3, #8
 800dd52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dd56:	633a      	str	r2, [r7, #48]	; 0x30
 800dd58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd5e:	e841 2300 	strex	r3, r2, [r1]
 800dd62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d1e3      	bne.n	800dd32 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2220      	movs	r2, #32
 800dd6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2200      	movs	r2, #0
 800dd76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	e853 3f00 	ldrex	r3, [r3]
 800dd8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f023 0310 	bic.w	r3, r3, #16
 800dd92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dda0:	61fb      	str	r3, [r7, #28]
 800dda2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda4:	69b9      	ldr	r1, [r7, #24]
 800dda6:	69fa      	ldr	r2, [r7, #28]
 800dda8:	e841 2300 	strex	r3, r2, [r1]
 800ddac:	617b      	str	r3, [r7, #20]
   return(result);
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d1e4      	bne.n	800dd7e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ddb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ddb8:	4619      	mov	r1, r3
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 f882 	bl	800dec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ddc0:	e063      	b.n	800de8a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ddc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00e      	beq.n	800ddec <HAL_UART_IRQHandler+0x68c>
 800ddce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d008      	beq.n	800ddec <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dde2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f001 fdc5 	bl	800f974 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ddea:	e051      	b.n	800de90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ddec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d014      	beq.n	800de22 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ddf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de00:	2b00      	cmp	r3, #0
 800de02:	d105      	bne.n	800de10 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800de04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d008      	beq.n	800de22 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de14:	2b00      	cmp	r3, #0
 800de16:	d03a      	beq.n	800de8e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	4798      	blx	r3
    }
    return;
 800de20:	e035      	b.n	800de8e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800de22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d009      	beq.n	800de42 <HAL_UART_IRQHandler+0x6e2>
 800de2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de36:	2b00      	cmp	r3, #0
 800de38:	d003      	beq.n	800de42 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f001 f912 	bl	800f064 <UART_EndTransmit_IT>
    return;
 800de40:	e026      	b.n	800de90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800de42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d009      	beq.n	800de62 <HAL_UART_IRQHandler+0x702>
 800de4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de56:	2b00      	cmp	r3, #0
 800de58:	d003      	beq.n	800de62 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f001 fd9e 	bl	800f99c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de60:	e016      	b.n	800de90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800de62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d010      	beq.n	800de90 <HAL_UART_IRQHandler+0x730>
 800de6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de72:	2b00      	cmp	r3, #0
 800de74:	da0c      	bge.n	800de90 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f001 fd86 	bl	800f988 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de7c:	e008      	b.n	800de90 <HAL_UART_IRQHandler+0x730>
      return;
 800de7e:	bf00      	nop
 800de80:	e006      	b.n	800de90 <HAL_UART_IRQHandler+0x730>
    return;
 800de82:	bf00      	nop
 800de84:	e004      	b.n	800de90 <HAL_UART_IRQHandler+0x730>
      return;
 800de86:	bf00      	nop
 800de88:	e002      	b.n	800de90 <HAL_UART_IRQHandler+0x730>
      return;
 800de8a:	bf00      	nop
 800de8c:	e000      	b.n	800de90 <HAL_UART_IRQHandler+0x730>
    return;
 800de8e:	bf00      	nop
  }
}
 800de90:	37e8      	adds	r7, #232	; 0xe8
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	effffffe 	.word	0xeffffffe

0800de9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dea4:	bf00      	nop
 800dea6:	370c      	adds	r7, #12
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr

0800deb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b083      	sub	sp, #12
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800deb8:	bf00      	nop
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	460b      	mov	r3, r1
 800dece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ded0:	bf00      	nop
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dedc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dee0:	b092      	sub	sp, #72	; 0x48
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dee6:	2300      	movs	r3, #0
 800dee8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	689a      	ldr	r2, [r3, #8]
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	691b      	ldr	r3, [r3, #16]
 800def4:	431a      	orrs	r2, r3
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	695b      	ldr	r3, [r3, #20]
 800defa:	431a      	orrs	r2, r3
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	69db      	ldr	r3, [r3, #28]
 800df00:	4313      	orrs	r3, r2
 800df02:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	4bbe      	ldr	r3, [pc, #760]	; (800e204 <UART_SetConfig+0x328>)
 800df0c:	4013      	ands	r3, r2
 800df0e:	697a      	ldr	r2, [r7, #20]
 800df10:	6812      	ldr	r2, [r2, #0]
 800df12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df14:	430b      	orrs	r3, r1
 800df16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	68da      	ldr	r2, [r3, #12]
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	430a      	orrs	r2, r1
 800df2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	699b      	ldr	r3, [r3, #24]
 800df32:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4ab3      	ldr	r2, [pc, #716]	; (800e208 <UART_SetConfig+0x32c>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d004      	beq.n	800df48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	6a1b      	ldr	r3, [r3, #32]
 800df42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df44:	4313      	orrs	r3, r2
 800df46:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	689a      	ldr	r2, [r3, #8]
 800df4e:	4baf      	ldr	r3, [pc, #700]	; (800e20c <UART_SetConfig+0x330>)
 800df50:	4013      	ands	r3, r2
 800df52:	697a      	ldr	r2, [r7, #20]
 800df54:	6812      	ldr	r2, [r2, #0]
 800df56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df58:	430b      	orrs	r3, r1
 800df5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df62:	f023 010f 	bic.w	r1, r3, #15
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	430a      	orrs	r2, r1
 800df70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4aa6      	ldr	r2, [pc, #664]	; (800e210 <UART_SetConfig+0x334>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d177      	bne.n	800e06c <UART_SetConfig+0x190>
 800df7c:	4ba5      	ldr	r3, [pc, #660]	; (800e214 <UART_SetConfig+0x338>)
 800df7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df84:	2b28      	cmp	r3, #40	; 0x28
 800df86:	d86d      	bhi.n	800e064 <UART_SetConfig+0x188>
 800df88:	a201      	add	r2, pc, #4	; (adr r2, 800df90 <UART_SetConfig+0xb4>)
 800df8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df8e:	bf00      	nop
 800df90:	0800e035 	.word	0x0800e035
 800df94:	0800e065 	.word	0x0800e065
 800df98:	0800e065 	.word	0x0800e065
 800df9c:	0800e065 	.word	0x0800e065
 800dfa0:	0800e065 	.word	0x0800e065
 800dfa4:	0800e065 	.word	0x0800e065
 800dfa8:	0800e065 	.word	0x0800e065
 800dfac:	0800e065 	.word	0x0800e065
 800dfb0:	0800e03d 	.word	0x0800e03d
 800dfb4:	0800e065 	.word	0x0800e065
 800dfb8:	0800e065 	.word	0x0800e065
 800dfbc:	0800e065 	.word	0x0800e065
 800dfc0:	0800e065 	.word	0x0800e065
 800dfc4:	0800e065 	.word	0x0800e065
 800dfc8:	0800e065 	.word	0x0800e065
 800dfcc:	0800e065 	.word	0x0800e065
 800dfd0:	0800e045 	.word	0x0800e045
 800dfd4:	0800e065 	.word	0x0800e065
 800dfd8:	0800e065 	.word	0x0800e065
 800dfdc:	0800e065 	.word	0x0800e065
 800dfe0:	0800e065 	.word	0x0800e065
 800dfe4:	0800e065 	.word	0x0800e065
 800dfe8:	0800e065 	.word	0x0800e065
 800dfec:	0800e065 	.word	0x0800e065
 800dff0:	0800e04d 	.word	0x0800e04d
 800dff4:	0800e065 	.word	0x0800e065
 800dff8:	0800e065 	.word	0x0800e065
 800dffc:	0800e065 	.word	0x0800e065
 800e000:	0800e065 	.word	0x0800e065
 800e004:	0800e065 	.word	0x0800e065
 800e008:	0800e065 	.word	0x0800e065
 800e00c:	0800e065 	.word	0x0800e065
 800e010:	0800e055 	.word	0x0800e055
 800e014:	0800e065 	.word	0x0800e065
 800e018:	0800e065 	.word	0x0800e065
 800e01c:	0800e065 	.word	0x0800e065
 800e020:	0800e065 	.word	0x0800e065
 800e024:	0800e065 	.word	0x0800e065
 800e028:	0800e065 	.word	0x0800e065
 800e02c:	0800e065 	.word	0x0800e065
 800e030:	0800e05d 	.word	0x0800e05d
 800e034:	2301      	movs	r3, #1
 800e036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e03a:	e222      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e03c:	2304      	movs	r3, #4
 800e03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e042:	e21e      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e044:	2308      	movs	r3, #8
 800e046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e04a:	e21a      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e04c:	2310      	movs	r3, #16
 800e04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e052:	e216      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e054:	2320      	movs	r3, #32
 800e056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e05a:	e212      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e05c:	2340      	movs	r3, #64	; 0x40
 800e05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e062:	e20e      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e064:	2380      	movs	r3, #128	; 0x80
 800e066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06a:	e20a      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a69      	ldr	r2, [pc, #420]	; (800e218 <UART_SetConfig+0x33c>)
 800e072:	4293      	cmp	r3, r2
 800e074:	d130      	bne.n	800e0d8 <UART_SetConfig+0x1fc>
 800e076:	4b67      	ldr	r3, [pc, #412]	; (800e214 <UART_SetConfig+0x338>)
 800e078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e07a:	f003 0307 	and.w	r3, r3, #7
 800e07e:	2b05      	cmp	r3, #5
 800e080:	d826      	bhi.n	800e0d0 <UART_SetConfig+0x1f4>
 800e082:	a201      	add	r2, pc, #4	; (adr r2, 800e088 <UART_SetConfig+0x1ac>)
 800e084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e088:	0800e0a1 	.word	0x0800e0a1
 800e08c:	0800e0a9 	.word	0x0800e0a9
 800e090:	0800e0b1 	.word	0x0800e0b1
 800e094:	0800e0b9 	.word	0x0800e0b9
 800e098:	0800e0c1 	.word	0x0800e0c1
 800e09c:	0800e0c9 	.word	0x0800e0c9
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0a6:	e1ec      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e0a8:	2304      	movs	r3, #4
 800e0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ae:	e1e8      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e0b0:	2308      	movs	r3, #8
 800e0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0b6:	e1e4      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e0b8:	2310      	movs	r3, #16
 800e0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0be:	e1e0      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e0c0:	2320      	movs	r3, #32
 800e0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0c6:	e1dc      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e0c8:	2340      	movs	r3, #64	; 0x40
 800e0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ce:	e1d8      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e0d0:	2380      	movs	r3, #128	; 0x80
 800e0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0d6:	e1d4      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4a4f      	ldr	r2, [pc, #316]	; (800e21c <UART_SetConfig+0x340>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d130      	bne.n	800e144 <UART_SetConfig+0x268>
 800e0e2:	4b4c      	ldr	r3, [pc, #304]	; (800e214 <UART_SetConfig+0x338>)
 800e0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0e6:	f003 0307 	and.w	r3, r3, #7
 800e0ea:	2b05      	cmp	r3, #5
 800e0ec:	d826      	bhi.n	800e13c <UART_SetConfig+0x260>
 800e0ee:	a201      	add	r2, pc, #4	; (adr r2, 800e0f4 <UART_SetConfig+0x218>)
 800e0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f4:	0800e10d 	.word	0x0800e10d
 800e0f8:	0800e115 	.word	0x0800e115
 800e0fc:	0800e11d 	.word	0x0800e11d
 800e100:	0800e125 	.word	0x0800e125
 800e104:	0800e12d 	.word	0x0800e12d
 800e108:	0800e135 	.word	0x0800e135
 800e10c:	2300      	movs	r3, #0
 800e10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e112:	e1b6      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e114:	2304      	movs	r3, #4
 800e116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11a:	e1b2      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e11c:	2308      	movs	r3, #8
 800e11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e122:	e1ae      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e124:	2310      	movs	r3, #16
 800e126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12a:	e1aa      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e12c:	2320      	movs	r3, #32
 800e12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e132:	e1a6      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e134:	2340      	movs	r3, #64	; 0x40
 800e136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e13a:	e1a2      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e13c:	2380      	movs	r3, #128	; 0x80
 800e13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e142:	e19e      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4a35      	ldr	r2, [pc, #212]	; (800e220 <UART_SetConfig+0x344>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d130      	bne.n	800e1b0 <UART_SetConfig+0x2d4>
 800e14e:	4b31      	ldr	r3, [pc, #196]	; (800e214 <UART_SetConfig+0x338>)
 800e150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e152:	f003 0307 	and.w	r3, r3, #7
 800e156:	2b05      	cmp	r3, #5
 800e158:	d826      	bhi.n	800e1a8 <UART_SetConfig+0x2cc>
 800e15a:	a201      	add	r2, pc, #4	; (adr r2, 800e160 <UART_SetConfig+0x284>)
 800e15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e160:	0800e179 	.word	0x0800e179
 800e164:	0800e181 	.word	0x0800e181
 800e168:	0800e189 	.word	0x0800e189
 800e16c:	0800e191 	.word	0x0800e191
 800e170:	0800e199 	.word	0x0800e199
 800e174:	0800e1a1 	.word	0x0800e1a1
 800e178:	2300      	movs	r3, #0
 800e17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17e:	e180      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e180:	2304      	movs	r3, #4
 800e182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e186:	e17c      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e188:	2308      	movs	r3, #8
 800e18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18e:	e178      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e190:	2310      	movs	r3, #16
 800e192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e196:	e174      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e198:	2320      	movs	r3, #32
 800e19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19e:	e170      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e1a0:	2340      	movs	r3, #64	; 0x40
 800e1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a6:	e16c      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e1a8:	2380      	movs	r3, #128	; 0x80
 800e1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ae:	e168      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4a1b      	ldr	r2, [pc, #108]	; (800e224 <UART_SetConfig+0x348>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d142      	bne.n	800e240 <UART_SetConfig+0x364>
 800e1ba:	4b16      	ldr	r3, [pc, #88]	; (800e214 <UART_SetConfig+0x338>)
 800e1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1be:	f003 0307 	and.w	r3, r3, #7
 800e1c2:	2b05      	cmp	r3, #5
 800e1c4:	d838      	bhi.n	800e238 <UART_SetConfig+0x35c>
 800e1c6:	a201      	add	r2, pc, #4	; (adr r2, 800e1cc <UART_SetConfig+0x2f0>)
 800e1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1cc:	0800e1e5 	.word	0x0800e1e5
 800e1d0:	0800e1ed 	.word	0x0800e1ed
 800e1d4:	0800e1f5 	.word	0x0800e1f5
 800e1d8:	0800e1fd 	.word	0x0800e1fd
 800e1dc:	0800e229 	.word	0x0800e229
 800e1e0:	0800e231 	.word	0x0800e231
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ea:	e14a      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e1ec:	2304      	movs	r3, #4
 800e1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f2:	e146      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e1f4:	2308      	movs	r3, #8
 800e1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fa:	e142      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e1fc:	2310      	movs	r3, #16
 800e1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e202:	e13e      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e204:	cfff69f3 	.word	0xcfff69f3
 800e208:	58000c00 	.word	0x58000c00
 800e20c:	11fff4ff 	.word	0x11fff4ff
 800e210:	40011000 	.word	0x40011000
 800e214:	58024400 	.word	0x58024400
 800e218:	40004400 	.word	0x40004400
 800e21c:	40004800 	.word	0x40004800
 800e220:	40004c00 	.word	0x40004c00
 800e224:	40005000 	.word	0x40005000
 800e228:	2320      	movs	r3, #32
 800e22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e22e:	e128      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e230:	2340      	movs	r3, #64	; 0x40
 800e232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e236:	e124      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e238:	2380      	movs	r3, #128	; 0x80
 800e23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23e:	e120      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4acb      	ldr	r2, [pc, #812]	; (800e574 <UART_SetConfig+0x698>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d176      	bne.n	800e338 <UART_SetConfig+0x45c>
 800e24a:	4bcb      	ldr	r3, [pc, #812]	; (800e578 <UART_SetConfig+0x69c>)
 800e24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e24e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e252:	2b28      	cmp	r3, #40	; 0x28
 800e254:	d86c      	bhi.n	800e330 <UART_SetConfig+0x454>
 800e256:	a201      	add	r2, pc, #4	; (adr r2, 800e25c <UART_SetConfig+0x380>)
 800e258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25c:	0800e301 	.word	0x0800e301
 800e260:	0800e331 	.word	0x0800e331
 800e264:	0800e331 	.word	0x0800e331
 800e268:	0800e331 	.word	0x0800e331
 800e26c:	0800e331 	.word	0x0800e331
 800e270:	0800e331 	.word	0x0800e331
 800e274:	0800e331 	.word	0x0800e331
 800e278:	0800e331 	.word	0x0800e331
 800e27c:	0800e309 	.word	0x0800e309
 800e280:	0800e331 	.word	0x0800e331
 800e284:	0800e331 	.word	0x0800e331
 800e288:	0800e331 	.word	0x0800e331
 800e28c:	0800e331 	.word	0x0800e331
 800e290:	0800e331 	.word	0x0800e331
 800e294:	0800e331 	.word	0x0800e331
 800e298:	0800e331 	.word	0x0800e331
 800e29c:	0800e311 	.word	0x0800e311
 800e2a0:	0800e331 	.word	0x0800e331
 800e2a4:	0800e331 	.word	0x0800e331
 800e2a8:	0800e331 	.word	0x0800e331
 800e2ac:	0800e331 	.word	0x0800e331
 800e2b0:	0800e331 	.word	0x0800e331
 800e2b4:	0800e331 	.word	0x0800e331
 800e2b8:	0800e331 	.word	0x0800e331
 800e2bc:	0800e319 	.word	0x0800e319
 800e2c0:	0800e331 	.word	0x0800e331
 800e2c4:	0800e331 	.word	0x0800e331
 800e2c8:	0800e331 	.word	0x0800e331
 800e2cc:	0800e331 	.word	0x0800e331
 800e2d0:	0800e331 	.word	0x0800e331
 800e2d4:	0800e331 	.word	0x0800e331
 800e2d8:	0800e331 	.word	0x0800e331
 800e2dc:	0800e321 	.word	0x0800e321
 800e2e0:	0800e331 	.word	0x0800e331
 800e2e4:	0800e331 	.word	0x0800e331
 800e2e8:	0800e331 	.word	0x0800e331
 800e2ec:	0800e331 	.word	0x0800e331
 800e2f0:	0800e331 	.word	0x0800e331
 800e2f4:	0800e331 	.word	0x0800e331
 800e2f8:	0800e331 	.word	0x0800e331
 800e2fc:	0800e329 	.word	0x0800e329
 800e300:	2301      	movs	r3, #1
 800e302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e306:	e0bc      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e308:	2304      	movs	r3, #4
 800e30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e30e:	e0b8      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e310:	2308      	movs	r3, #8
 800e312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e316:	e0b4      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e318:	2310      	movs	r3, #16
 800e31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e31e:	e0b0      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e320:	2320      	movs	r3, #32
 800e322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e326:	e0ac      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e328:	2340      	movs	r3, #64	; 0x40
 800e32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e32e:	e0a8      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e330:	2380      	movs	r3, #128	; 0x80
 800e332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e336:	e0a4      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a8f      	ldr	r2, [pc, #572]	; (800e57c <UART_SetConfig+0x6a0>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d130      	bne.n	800e3a4 <UART_SetConfig+0x4c8>
 800e342:	4b8d      	ldr	r3, [pc, #564]	; (800e578 <UART_SetConfig+0x69c>)
 800e344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e346:	f003 0307 	and.w	r3, r3, #7
 800e34a:	2b05      	cmp	r3, #5
 800e34c:	d826      	bhi.n	800e39c <UART_SetConfig+0x4c0>
 800e34e:	a201      	add	r2, pc, #4	; (adr r2, 800e354 <UART_SetConfig+0x478>)
 800e350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e354:	0800e36d 	.word	0x0800e36d
 800e358:	0800e375 	.word	0x0800e375
 800e35c:	0800e37d 	.word	0x0800e37d
 800e360:	0800e385 	.word	0x0800e385
 800e364:	0800e38d 	.word	0x0800e38d
 800e368:	0800e395 	.word	0x0800e395
 800e36c:	2300      	movs	r3, #0
 800e36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e372:	e086      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e374:	2304      	movs	r3, #4
 800e376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e37a:	e082      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e37c:	2308      	movs	r3, #8
 800e37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e382:	e07e      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e384:	2310      	movs	r3, #16
 800e386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e38a:	e07a      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e38c:	2320      	movs	r3, #32
 800e38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e392:	e076      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e394:	2340      	movs	r3, #64	; 0x40
 800e396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39a:	e072      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e39c:	2380      	movs	r3, #128	; 0x80
 800e39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a2:	e06e      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a75      	ldr	r2, [pc, #468]	; (800e580 <UART_SetConfig+0x6a4>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d130      	bne.n	800e410 <UART_SetConfig+0x534>
 800e3ae:	4b72      	ldr	r3, [pc, #456]	; (800e578 <UART_SetConfig+0x69c>)
 800e3b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3b2:	f003 0307 	and.w	r3, r3, #7
 800e3b6:	2b05      	cmp	r3, #5
 800e3b8:	d826      	bhi.n	800e408 <UART_SetConfig+0x52c>
 800e3ba:	a201      	add	r2, pc, #4	; (adr r2, 800e3c0 <UART_SetConfig+0x4e4>)
 800e3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c0:	0800e3d9 	.word	0x0800e3d9
 800e3c4:	0800e3e1 	.word	0x0800e3e1
 800e3c8:	0800e3e9 	.word	0x0800e3e9
 800e3cc:	0800e3f1 	.word	0x0800e3f1
 800e3d0:	0800e3f9 	.word	0x0800e3f9
 800e3d4:	0800e401 	.word	0x0800e401
 800e3d8:	2300      	movs	r3, #0
 800e3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3de:	e050      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e3e0:	2304      	movs	r3, #4
 800e3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e6:	e04c      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e3e8:	2308      	movs	r3, #8
 800e3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ee:	e048      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e3f0:	2310      	movs	r3, #16
 800e3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f6:	e044      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e3f8:	2320      	movs	r3, #32
 800e3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fe:	e040      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e400:	2340      	movs	r3, #64	; 0x40
 800e402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e406:	e03c      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e408:	2380      	movs	r3, #128	; 0x80
 800e40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e40e:	e038      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4a5b      	ldr	r2, [pc, #364]	; (800e584 <UART_SetConfig+0x6a8>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d130      	bne.n	800e47c <UART_SetConfig+0x5a0>
 800e41a:	4b57      	ldr	r3, [pc, #348]	; (800e578 <UART_SetConfig+0x69c>)
 800e41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e41e:	f003 0307 	and.w	r3, r3, #7
 800e422:	2b05      	cmp	r3, #5
 800e424:	d826      	bhi.n	800e474 <UART_SetConfig+0x598>
 800e426:	a201      	add	r2, pc, #4	; (adr r2, 800e42c <UART_SetConfig+0x550>)
 800e428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e42c:	0800e445 	.word	0x0800e445
 800e430:	0800e44d 	.word	0x0800e44d
 800e434:	0800e455 	.word	0x0800e455
 800e438:	0800e45d 	.word	0x0800e45d
 800e43c:	0800e465 	.word	0x0800e465
 800e440:	0800e46d 	.word	0x0800e46d
 800e444:	2302      	movs	r3, #2
 800e446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44a:	e01a      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e44c:	2304      	movs	r3, #4
 800e44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e452:	e016      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e454:	2308      	movs	r3, #8
 800e456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e45a:	e012      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e45c:	2310      	movs	r3, #16
 800e45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e462:	e00e      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e464:	2320      	movs	r3, #32
 800e466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e46a:	e00a      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e46c:	2340      	movs	r3, #64	; 0x40
 800e46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e472:	e006      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e474:	2380      	movs	r3, #128	; 0x80
 800e476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e47a:	e002      	b.n	800e482 <UART_SetConfig+0x5a6>
 800e47c:	2380      	movs	r3, #128	; 0x80
 800e47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	4a3f      	ldr	r2, [pc, #252]	; (800e584 <UART_SetConfig+0x6a8>)
 800e488:	4293      	cmp	r3, r2
 800e48a:	f040 80f8 	bne.w	800e67e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e48e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e492:	2b20      	cmp	r3, #32
 800e494:	dc46      	bgt.n	800e524 <UART_SetConfig+0x648>
 800e496:	2b02      	cmp	r3, #2
 800e498:	f2c0 8082 	blt.w	800e5a0 <UART_SetConfig+0x6c4>
 800e49c:	3b02      	subs	r3, #2
 800e49e:	2b1e      	cmp	r3, #30
 800e4a0:	d87e      	bhi.n	800e5a0 <UART_SetConfig+0x6c4>
 800e4a2:	a201      	add	r2, pc, #4	; (adr r2, 800e4a8 <UART_SetConfig+0x5cc>)
 800e4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a8:	0800e52b 	.word	0x0800e52b
 800e4ac:	0800e5a1 	.word	0x0800e5a1
 800e4b0:	0800e533 	.word	0x0800e533
 800e4b4:	0800e5a1 	.word	0x0800e5a1
 800e4b8:	0800e5a1 	.word	0x0800e5a1
 800e4bc:	0800e5a1 	.word	0x0800e5a1
 800e4c0:	0800e543 	.word	0x0800e543
 800e4c4:	0800e5a1 	.word	0x0800e5a1
 800e4c8:	0800e5a1 	.word	0x0800e5a1
 800e4cc:	0800e5a1 	.word	0x0800e5a1
 800e4d0:	0800e5a1 	.word	0x0800e5a1
 800e4d4:	0800e5a1 	.word	0x0800e5a1
 800e4d8:	0800e5a1 	.word	0x0800e5a1
 800e4dc:	0800e5a1 	.word	0x0800e5a1
 800e4e0:	0800e553 	.word	0x0800e553
 800e4e4:	0800e5a1 	.word	0x0800e5a1
 800e4e8:	0800e5a1 	.word	0x0800e5a1
 800e4ec:	0800e5a1 	.word	0x0800e5a1
 800e4f0:	0800e5a1 	.word	0x0800e5a1
 800e4f4:	0800e5a1 	.word	0x0800e5a1
 800e4f8:	0800e5a1 	.word	0x0800e5a1
 800e4fc:	0800e5a1 	.word	0x0800e5a1
 800e500:	0800e5a1 	.word	0x0800e5a1
 800e504:	0800e5a1 	.word	0x0800e5a1
 800e508:	0800e5a1 	.word	0x0800e5a1
 800e50c:	0800e5a1 	.word	0x0800e5a1
 800e510:	0800e5a1 	.word	0x0800e5a1
 800e514:	0800e5a1 	.word	0x0800e5a1
 800e518:	0800e5a1 	.word	0x0800e5a1
 800e51c:	0800e5a1 	.word	0x0800e5a1
 800e520:	0800e593 	.word	0x0800e593
 800e524:	2b40      	cmp	r3, #64	; 0x40
 800e526:	d037      	beq.n	800e598 <UART_SetConfig+0x6bc>
 800e528:	e03a      	b.n	800e5a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e52a:	f7fc fb05 	bl	800ab38 <HAL_RCCEx_GetD3PCLK1Freq>
 800e52e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e530:	e03c      	b.n	800e5ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e536:	4618      	mov	r0, r3
 800e538:	f7fc fb14 	bl	800ab64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e540:	e034      	b.n	800e5ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e542:	f107 0318 	add.w	r3, r7, #24
 800e546:	4618      	mov	r0, r3
 800e548:	f7fc fc60 	bl	800ae0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e550:	e02c      	b.n	800e5ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e552:	4b09      	ldr	r3, [pc, #36]	; (800e578 <UART_SetConfig+0x69c>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f003 0320 	and.w	r3, r3, #32
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d016      	beq.n	800e58c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e55e:	4b06      	ldr	r3, [pc, #24]	; (800e578 <UART_SetConfig+0x69c>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	08db      	lsrs	r3, r3, #3
 800e564:	f003 0303 	and.w	r3, r3, #3
 800e568:	4a07      	ldr	r2, [pc, #28]	; (800e588 <UART_SetConfig+0x6ac>)
 800e56a:	fa22 f303 	lsr.w	r3, r2, r3
 800e56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e570:	e01c      	b.n	800e5ac <UART_SetConfig+0x6d0>
 800e572:	bf00      	nop
 800e574:	40011400 	.word	0x40011400
 800e578:	58024400 	.word	0x58024400
 800e57c:	40007800 	.word	0x40007800
 800e580:	40007c00 	.word	0x40007c00
 800e584:	58000c00 	.word	0x58000c00
 800e588:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e58c:	4b9d      	ldr	r3, [pc, #628]	; (800e804 <UART_SetConfig+0x928>)
 800e58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e590:	e00c      	b.n	800e5ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e592:	4b9d      	ldr	r3, [pc, #628]	; (800e808 <UART_SetConfig+0x92c>)
 800e594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e596:	e009      	b.n	800e5ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e59c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e59e:	e005      	b.n	800e5ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	f000 81de 	beq.w	800e970 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b8:	4a94      	ldr	r2, [pc, #592]	; (800e80c <UART_SetConfig+0x930>)
 800e5ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5be:	461a      	mov	r2, r3
 800e5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5c6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	685a      	ldr	r2, [r3, #4]
 800e5cc:	4613      	mov	r3, r2
 800e5ce:	005b      	lsls	r3, r3, #1
 800e5d0:	4413      	add	r3, r2
 800e5d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d305      	bcc.n	800e5e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e5de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d903      	bls.n	800e5ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e5ea:	e1c1      	b.n	800e970 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	60bb      	str	r3, [r7, #8]
 800e5f2:	60fa      	str	r2, [r7, #12]
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5f8:	4a84      	ldr	r2, [pc, #528]	; (800e80c <UART_SetConfig+0x930>)
 800e5fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	2200      	movs	r2, #0
 800e602:	603b      	str	r3, [r7, #0]
 800e604:	607a      	str	r2, [r7, #4]
 800e606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e60a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e60e:	f7f1 fe63 	bl	80002d8 <__aeabi_uldivmod>
 800e612:	4602      	mov	r2, r0
 800e614:	460b      	mov	r3, r1
 800e616:	4610      	mov	r0, r2
 800e618:	4619      	mov	r1, r3
 800e61a:	f04f 0200 	mov.w	r2, #0
 800e61e:	f04f 0300 	mov.w	r3, #0
 800e622:	020b      	lsls	r3, r1, #8
 800e624:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e628:	0202      	lsls	r2, r0, #8
 800e62a:	6979      	ldr	r1, [r7, #20]
 800e62c:	6849      	ldr	r1, [r1, #4]
 800e62e:	0849      	lsrs	r1, r1, #1
 800e630:	2000      	movs	r0, #0
 800e632:	460c      	mov	r4, r1
 800e634:	4605      	mov	r5, r0
 800e636:	eb12 0804 	adds.w	r8, r2, r4
 800e63a:	eb43 0905 	adc.w	r9, r3, r5
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	2200      	movs	r2, #0
 800e644:	469a      	mov	sl, r3
 800e646:	4693      	mov	fp, r2
 800e648:	4652      	mov	r2, sl
 800e64a:	465b      	mov	r3, fp
 800e64c:	4640      	mov	r0, r8
 800e64e:	4649      	mov	r1, r9
 800e650:	f7f1 fe42 	bl	80002d8 <__aeabi_uldivmod>
 800e654:	4602      	mov	r2, r0
 800e656:	460b      	mov	r3, r1
 800e658:	4613      	mov	r3, r2
 800e65a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e662:	d308      	bcc.n	800e676 <UART_SetConfig+0x79a>
 800e664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e66a:	d204      	bcs.n	800e676 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e672:	60da      	str	r2, [r3, #12]
 800e674:	e17c      	b.n	800e970 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e676:	2301      	movs	r3, #1
 800e678:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e67c:	e178      	b.n	800e970 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	69db      	ldr	r3, [r3, #28]
 800e682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e686:	f040 80c5 	bne.w	800e814 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e68a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e68e:	2b20      	cmp	r3, #32
 800e690:	dc48      	bgt.n	800e724 <UART_SetConfig+0x848>
 800e692:	2b00      	cmp	r3, #0
 800e694:	db7b      	blt.n	800e78e <UART_SetConfig+0x8b2>
 800e696:	2b20      	cmp	r3, #32
 800e698:	d879      	bhi.n	800e78e <UART_SetConfig+0x8b2>
 800e69a:	a201      	add	r2, pc, #4	; (adr r2, 800e6a0 <UART_SetConfig+0x7c4>)
 800e69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6a0:	0800e72b 	.word	0x0800e72b
 800e6a4:	0800e733 	.word	0x0800e733
 800e6a8:	0800e78f 	.word	0x0800e78f
 800e6ac:	0800e78f 	.word	0x0800e78f
 800e6b0:	0800e73b 	.word	0x0800e73b
 800e6b4:	0800e78f 	.word	0x0800e78f
 800e6b8:	0800e78f 	.word	0x0800e78f
 800e6bc:	0800e78f 	.word	0x0800e78f
 800e6c0:	0800e74b 	.word	0x0800e74b
 800e6c4:	0800e78f 	.word	0x0800e78f
 800e6c8:	0800e78f 	.word	0x0800e78f
 800e6cc:	0800e78f 	.word	0x0800e78f
 800e6d0:	0800e78f 	.word	0x0800e78f
 800e6d4:	0800e78f 	.word	0x0800e78f
 800e6d8:	0800e78f 	.word	0x0800e78f
 800e6dc:	0800e78f 	.word	0x0800e78f
 800e6e0:	0800e75b 	.word	0x0800e75b
 800e6e4:	0800e78f 	.word	0x0800e78f
 800e6e8:	0800e78f 	.word	0x0800e78f
 800e6ec:	0800e78f 	.word	0x0800e78f
 800e6f0:	0800e78f 	.word	0x0800e78f
 800e6f4:	0800e78f 	.word	0x0800e78f
 800e6f8:	0800e78f 	.word	0x0800e78f
 800e6fc:	0800e78f 	.word	0x0800e78f
 800e700:	0800e78f 	.word	0x0800e78f
 800e704:	0800e78f 	.word	0x0800e78f
 800e708:	0800e78f 	.word	0x0800e78f
 800e70c:	0800e78f 	.word	0x0800e78f
 800e710:	0800e78f 	.word	0x0800e78f
 800e714:	0800e78f 	.word	0x0800e78f
 800e718:	0800e78f 	.word	0x0800e78f
 800e71c:	0800e78f 	.word	0x0800e78f
 800e720:	0800e781 	.word	0x0800e781
 800e724:	2b40      	cmp	r3, #64	; 0x40
 800e726:	d02e      	beq.n	800e786 <UART_SetConfig+0x8aa>
 800e728:	e031      	b.n	800e78e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e72a:	f7fa fdc1 	bl	80092b0 <HAL_RCC_GetPCLK1Freq>
 800e72e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e730:	e033      	b.n	800e79a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e732:	f7fa fdd3 	bl	80092dc <HAL_RCC_GetPCLK2Freq>
 800e736:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e738:	e02f      	b.n	800e79a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e73a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e73e:	4618      	mov	r0, r3
 800e740:	f7fc fa10 	bl	800ab64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e748:	e027      	b.n	800e79a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e74a:	f107 0318 	add.w	r3, r7, #24
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fc fb5c 	bl	800ae0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e758:	e01f      	b.n	800e79a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e75a:	4b2d      	ldr	r3, [pc, #180]	; (800e810 <UART_SetConfig+0x934>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f003 0320 	and.w	r3, r3, #32
 800e762:	2b00      	cmp	r3, #0
 800e764:	d009      	beq.n	800e77a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e766:	4b2a      	ldr	r3, [pc, #168]	; (800e810 <UART_SetConfig+0x934>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	08db      	lsrs	r3, r3, #3
 800e76c:	f003 0303 	and.w	r3, r3, #3
 800e770:	4a24      	ldr	r2, [pc, #144]	; (800e804 <UART_SetConfig+0x928>)
 800e772:	fa22 f303 	lsr.w	r3, r2, r3
 800e776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e778:	e00f      	b.n	800e79a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e77a:	4b22      	ldr	r3, [pc, #136]	; (800e804 <UART_SetConfig+0x928>)
 800e77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e77e:	e00c      	b.n	800e79a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e780:	4b21      	ldr	r3, [pc, #132]	; (800e808 <UART_SetConfig+0x92c>)
 800e782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e784:	e009      	b.n	800e79a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e78c:	e005      	b.n	800e79a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e78e:	2300      	movs	r3, #0
 800e790:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e792:	2301      	movs	r3, #1
 800e794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f000 80e7 	beq.w	800e970 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a6:	4a19      	ldr	r2, [pc, #100]	; (800e80c <UART_SetConfig+0x930>)
 800e7a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7b4:	005a      	lsls	r2, r3, #1
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	085b      	lsrs	r3, r3, #1
 800e7bc:	441a      	add	r2, r3
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ca:	2b0f      	cmp	r3, #15
 800e7cc:	d916      	bls.n	800e7fc <UART_SetConfig+0x920>
 800e7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7d4:	d212      	bcs.n	800e7fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	f023 030f 	bic.w	r3, r3, #15
 800e7de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e2:	085b      	lsrs	r3, r3, #1
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	f003 0307 	and.w	r3, r3, #7
 800e7ea:	b29a      	uxth	r2, r3
 800e7ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e7f8:	60da      	str	r2, [r3, #12]
 800e7fa:	e0b9      	b.n	800e970 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e802:	e0b5      	b.n	800e970 <UART_SetConfig+0xa94>
 800e804:	03d09000 	.word	0x03d09000
 800e808:	003d0900 	.word	0x003d0900
 800e80c:	0800fe9c 	.word	0x0800fe9c
 800e810:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e814:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e818:	2b20      	cmp	r3, #32
 800e81a:	dc49      	bgt.n	800e8b0 <UART_SetConfig+0x9d4>
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	db7c      	blt.n	800e91a <UART_SetConfig+0xa3e>
 800e820:	2b20      	cmp	r3, #32
 800e822:	d87a      	bhi.n	800e91a <UART_SetConfig+0xa3e>
 800e824:	a201      	add	r2, pc, #4	; (adr r2, 800e82c <UART_SetConfig+0x950>)
 800e826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e82a:	bf00      	nop
 800e82c:	0800e8b7 	.word	0x0800e8b7
 800e830:	0800e8bf 	.word	0x0800e8bf
 800e834:	0800e91b 	.word	0x0800e91b
 800e838:	0800e91b 	.word	0x0800e91b
 800e83c:	0800e8c7 	.word	0x0800e8c7
 800e840:	0800e91b 	.word	0x0800e91b
 800e844:	0800e91b 	.word	0x0800e91b
 800e848:	0800e91b 	.word	0x0800e91b
 800e84c:	0800e8d7 	.word	0x0800e8d7
 800e850:	0800e91b 	.word	0x0800e91b
 800e854:	0800e91b 	.word	0x0800e91b
 800e858:	0800e91b 	.word	0x0800e91b
 800e85c:	0800e91b 	.word	0x0800e91b
 800e860:	0800e91b 	.word	0x0800e91b
 800e864:	0800e91b 	.word	0x0800e91b
 800e868:	0800e91b 	.word	0x0800e91b
 800e86c:	0800e8e7 	.word	0x0800e8e7
 800e870:	0800e91b 	.word	0x0800e91b
 800e874:	0800e91b 	.word	0x0800e91b
 800e878:	0800e91b 	.word	0x0800e91b
 800e87c:	0800e91b 	.word	0x0800e91b
 800e880:	0800e91b 	.word	0x0800e91b
 800e884:	0800e91b 	.word	0x0800e91b
 800e888:	0800e91b 	.word	0x0800e91b
 800e88c:	0800e91b 	.word	0x0800e91b
 800e890:	0800e91b 	.word	0x0800e91b
 800e894:	0800e91b 	.word	0x0800e91b
 800e898:	0800e91b 	.word	0x0800e91b
 800e89c:	0800e91b 	.word	0x0800e91b
 800e8a0:	0800e91b 	.word	0x0800e91b
 800e8a4:	0800e91b 	.word	0x0800e91b
 800e8a8:	0800e91b 	.word	0x0800e91b
 800e8ac:	0800e90d 	.word	0x0800e90d
 800e8b0:	2b40      	cmp	r3, #64	; 0x40
 800e8b2:	d02e      	beq.n	800e912 <UART_SetConfig+0xa36>
 800e8b4:	e031      	b.n	800e91a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8b6:	f7fa fcfb 	bl	80092b0 <HAL_RCC_GetPCLK1Freq>
 800e8ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8bc:	e033      	b.n	800e926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8be:	f7fa fd0d 	bl	80092dc <HAL_RCC_GetPCLK2Freq>
 800e8c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8c4:	e02f      	b.n	800e926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7fc f94a 	bl	800ab64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8d4:	e027      	b.n	800e926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8d6:	f107 0318 	add.w	r3, r7, #24
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7fc fa96 	bl	800ae0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8e4:	e01f      	b.n	800e926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e8e6:	4b2d      	ldr	r3, [pc, #180]	; (800e99c <UART_SetConfig+0xac0>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f003 0320 	and.w	r3, r3, #32
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d009      	beq.n	800e906 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e8f2:	4b2a      	ldr	r3, [pc, #168]	; (800e99c <UART_SetConfig+0xac0>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	08db      	lsrs	r3, r3, #3
 800e8f8:	f003 0303 	and.w	r3, r3, #3
 800e8fc:	4a28      	ldr	r2, [pc, #160]	; (800e9a0 <UART_SetConfig+0xac4>)
 800e8fe:	fa22 f303 	lsr.w	r3, r2, r3
 800e902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e904:	e00f      	b.n	800e926 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e906:	4b26      	ldr	r3, [pc, #152]	; (800e9a0 <UART_SetConfig+0xac4>)
 800e908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e90a:	e00c      	b.n	800e926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e90c:	4b25      	ldr	r3, [pc, #148]	; (800e9a4 <UART_SetConfig+0xac8>)
 800e90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e910:	e009      	b.n	800e926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e918:	e005      	b.n	800e926 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e91a:	2300      	movs	r3, #0
 800e91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e91e:	2301      	movs	r3, #1
 800e920:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e924:	bf00      	nop
    }

    if (pclk != 0U)
 800e926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d021      	beq.n	800e970 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e930:	4a1d      	ldr	r2, [pc, #116]	; (800e9a8 <UART_SetConfig+0xacc>)
 800e932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e936:	461a      	mov	r2, r3
 800e938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e93a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	085b      	lsrs	r3, r3, #1
 800e944:	441a      	add	r2, r3
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e94e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e952:	2b0f      	cmp	r3, #15
 800e954:	d909      	bls.n	800e96a <UART_SetConfig+0xa8e>
 800e956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e95c:	d205      	bcs.n	800e96a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e960:	b29a      	uxth	r2, r3
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	60da      	str	r2, [r3, #12]
 800e968:	e002      	b.n	800e970 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e96a:	2301      	movs	r3, #1
 800e96c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	2201      	movs	r2, #1
 800e974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	2201      	movs	r2, #1
 800e97c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	2200      	movs	r2, #0
 800e984:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	2200      	movs	r2, #0
 800e98a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e98c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e990:	4618      	mov	r0, r3
 800e992:	3748      	adds	r7, #72	; 0x48
 800e994:	46bd      	mov	sp, r7
 800e996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e99a:	bf00      	nop
 800e99c:	58024400 	.word	0x58024400
 800e9a0:	03d09000 	.word	0x03d09000
 800e9a4:	003d0900 	.word	0x003d0900
 800e9a8:	0800fe9c 	.word	0x0800fe9c

0800e9ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9b8:	f003 0301 	and.w	r3, r3, #1
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00a      	beq.n	800e9d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	430a      	orrs	r2, r1
 800e9d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9da:	f003 0302 	and.w	r3, r3, #2
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d00a      	beq.n	800e9f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	430a      	orrs	r2, r1
 800e9f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9fc:	f003 0304 	and.w	r3, r3, #4
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d00a      	beq.n	800ea1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	430a      	orrs	r2, r1
 800ea18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea1e:	f003 0308 	and.w	r3, r3, #8
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d00a      	beq.n	800ea3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	430a      	orrs	r2, r1
 800ea3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea40:	f003 0310 	and.w	r3, r3, #16
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d00a      	beq.n	800ea5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	430a      	orrs	r2, r1
 800ea5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea62:	f003 0320 	and.w	r3, r3, #32
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00a      	beq.n	800ea80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	689b      	ldr	r3, [r3, #8]
 800ea70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	430a      	orrs	r2, r1
 800ea7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d01a      	beq.n	800eac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	430a      	orrs	r2, r1
 800eaa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eaaa:	d10a      	bne.n	800eac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	430a      	orrs	r2, r1
 800eac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d00a      	beq.n	800eae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	430a      	orrs	r2, r1
 800eae2:	605a      	str	r2, [r3, #4]
  }
}
 800eae4:	bf00      	nop
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af02      	add	r7, sp, #8
 800eaf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2200      	movs	r2, #0
 800eafc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eb00:	f7f3 fef4 	bl	80028ec <HAL_GetTick>
 800eb04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f003 0308 	and.w	r3, r3, #8
 800eb10:	2b08      	cmp	r3, #8
 800eb12:	d10e      	bne.n	800eb32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f000 f82f 	bl	800eb86 <UART_WaitOnFlagUntilTimeout>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d001      	beq.n	800eb32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb2e:	2303      	movs	r3, #3
 800eb30:	e025      	b.n	800eb7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f003 0304 	and.w	r3, r3, #4
 800eb3c:	2b04      	cmp	r3, #4
 800eb3e:	d10e      	bne.n	800eb5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb44:	9300      	str	r3, [sp, #0]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f000 f819 	bl	800eb86 <UART_WaitOnFlagUntilTimeout>
 800eb54:	4603      	mov	r3, r0
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d001      	beq.n	800eb5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb5a:	2303      	movs	r3, #3
 800eb5c:	e00f      	b.n	800eb7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2220      	movs	r2, #32
 800eb62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2220      	movs	r2, #32
 800eb6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2200      	movs	r2, #0
 800eb72:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2200      	movs	r2, #0
 800eb78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b09c      	sub	sp, #112	; 0x70
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	60f8      	str	r0, [r7, #12]
 800eb8e:	60b9      	str	r1, [r7, #8]
 800eb90:	603b      	str	r3, [r7, #0]
 800eb92:	4613      	mov	r3, r2
 800eb94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb96:	e0a9      	b.n	800ecec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb9e:	f000 80a5 	beq.w	800ecec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eba2:	f7f3 fea3 	bl	80028ec <HAL_GetTick>
 800eba6:	4602      	mov	r2, r0
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	1ad3      	subs	r3, r2, r3
 800ebac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d302      	bcc.n	800ebb8 <UART_WaitOnFlagUntilTimeout+0x32>
 800ebb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d140      	bne.n	800ec3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebc0:	e853 3f00 	ldrex	r3, [r3]
 800ebc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ebc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ebcc:	667b      	str	r3, [r7, #100]	; 0x64
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ebd8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ebdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ebde:	e841 2300 	strex	r3, r2, [r1]
 800ebe2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ebe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d1e6      	bne.n	800ebb8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	3308      	adds	r3, #8
 800ebf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf4:	e853 3f00 	ldrex	r3, [r3]
 800ebf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ebfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfc:	f023 0301 	bic.w	r3, r3, #1
 800ec00:	663b      	str	r3, [r7, #96]	; 0x60
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	3308      	adds	r3, #8
 800ec08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec0a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ec0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec12:	e841 2300 	strex	r3, r2, [r1]
 800ec16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ec18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d1e5      	bne.n	800ebea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2220      	movs	r2, #32
 800ec22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2220      	movs	r2, #32
 800ec2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2200      	movs	r2, #0
 800ec32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ec36:	2303      	movs	r3, #3
 800ec38:	e069      	b.n	800ed0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f003 0304 	and.w	r3, r3, #4
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d051      	beq.n	800ecec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	69db      	ldr	r3, [r3, #28]
 800ec4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec56:	d149      	bne.n	800ecec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6a:	e853 3f00 	ldrex	r3, [r3]
 800ec6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ec76:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	461a      	mov	r2, r3
 800ec7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec80:	637b      	str	r3, [r7, #52]	; 0x34
 800ec82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec88:	e841 2300 	strex	r3, r2, [r1]
 800ec8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ec8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d1e6      	bne.n	800ec62 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	3308      	adds	r3, #8
 800ec9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	e853 3f00 	ldrex	r3, [r3]
 800eca2:	613b      	str	r3, [r7, #16]
   return(result);
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	f023 0301 	bic.w	r3, r3, #1
 800ecaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	3308      	adds	r3, #8
 800ecb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ecb4:	623a      	str	r2, [r7, #32]
 800ecb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb8:	69f9      	ldr	r1, [r7, #28]
 800ecba:	6a3a      	ldr	r2, [r7, #32]
 800ecbc:	e841 2300 	strex	r3, r2, [r1]
 800ecc0:	61bb      	str	r3, [r7, #24]
   return(result);
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1e5      	bne.n	800ec94 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2220      	movs	r2, #32
 800eccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2220      	movs	r2, #32
 800ecd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2220      	movs	r2, #32
 800ecdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ece8:	2303      	movs	r3, #3
 800ecea:	e010      	b.n	800ed0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	69da      	ldr	r2, [r3, #28]
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	4013      	ands	r3, r2
 800ecf6:	68ba      	ldr	r2, [r7, #8]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	bf0c      	ite	eq
 800ecfc:	2301      	moveq	r3, #1
 800ecfe:	2300      	movne	r3, #0
 800ed00:	b2db      	uxtb	r3, r3
 800ed02:	461a      	mov	r2, r3
 800ed04:	79fb      	ldrb	r3, [r7, #7]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	f43f af46 	beq.w	800eb98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed0c:	2300      	movs	r3, #0
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3770      	adds	r7, #112	; 0x70
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
	...

0800ed18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b0a3      	sub	sp, #140	; 0x8c
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	4613      	mov	r3, r2
 800ed24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	68ba      	ldr	r2, [r7, #8]
 800ed2a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	88fa      	ldrh	r2, [r7, #6]
 800ed30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	88fa      	ldrh	r2, [r7, #6]
 800ed38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	689b      	ldr	r3, [r3, #8]
 800ed46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed4a:	d10e      	bne.n	800ed6a <UART_Start_Receive_IT+0x52>
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	691b      	ldr	r3, [r3, #16]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d105      	bne.n	800ed60 <UART_Start_Receive_IT+0x48>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ed5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed5e:	e02d      	b.n	800edbc <UART_Start_Receive_IT+0xa4>
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	22ff      	movs	r2, #255	; 0xff
 800ed64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed68:	e028      	b.n	800edbc <UART_Start_Receive_IT+0xa4>
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	689b      	ldr	r3, [r3, #8]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d10d      	bne.n	800ed8e <UART_Start_Receive_IT+0x76>
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	691b      	ldr	r3, [r3, #16]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d104      	bne.n	800ed84 <UART_Start_Receive_IT+0x6c>
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	22ff      	movs	r2, #255	; 0xff
 800ed7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed82:	e01b      	b.n	800edbc <UART_Start_Receive_IT+0xa4>
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	227f      	movs	r2, #127	; 0x7f
 800ed88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed8c:	e016      	b.n	800edbc <UART_Start_Receive_IT+0xa4>
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	689b      	ldr	r3, [r3, #8]
 800ed92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ed96:	d10d      	bne.n	800edb4 <UART_Start_Receive_IT+0x9c>
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	691b      	ldr	r3, [r3, #16]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d104      	bne.n	800edaa <UART_Start_Receive_IT+0x92>
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	227f      	movs	r2, #127	; 0x7f
 800eda4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eda8:	e008      	b.n	800edbc <UART_Start_Receive_IT+0xa4>
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	223f      	movs	r2, #63	; 0x3f
 800edae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800edb2:	e003      	b.n	800edbc <UART_Start_Receive_IT+0xa4>
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2200      	movs	r2, #0
 800edc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2222      	movs	r2, #34	; 0x22
 800edc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	3308      	adds	r3, #8
 800edd2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edd6:	e853 3f00 	ldrex	r3, [r3]
 800edda:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800eddc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edde:	f043 0301 	orr.w	r3, r3, #1
 800ede2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	3308      	adds	r3, #8
 800edec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800edf0:	673a      	str	r2, [r7, #112]	; 0x70
 800edf2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edf4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800edf6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800edf8:	e841 2300 	strex	r3, r2, [r1]
 800edfc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800edfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d1e3      	bne.n	800edcc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee0c:	d153      	bne.n	800eeb6 <UART_Start_Receive_IT+0x19e>
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ee14:	88fa      	ldrh	r2, [r7, #6]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d34d      	bcc.n	800eeb6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	689b      	ldr	r3, [r3, #8]
 800ee1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee22:	d107      	bne.n	800ee34 <UART_Start_Receive_IT+0x11c>
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	691b      	ldr	r3, [r3, #16]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d103      	bne.n	800ee34 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	4a4b      	ldr	r2, [pc, #300]	; (800ef5c <UART_Start_Receive_IT+0x244>)
 800ee30:	671a      	str	r2, [r3, #112]	; 0x70
 800ee32:	e002      	b.n	800ee3a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	4a4a      	ldr	r2, [pc, #296]	; (800ef60 <UART_Start_Receive_IT+0x248>)
 800ee38:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	691b      	ldr	r3, [r3, #16]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d01a      	beq.n	800ee80 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee52:	e853 3f00 	ldrex	r3, [r3]
 800ee56:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ee58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	461a      	mov	r2, r3
 800ee68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee6e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee74:	e841 2300 	strex	r3, r2, [r1]
 800ee78:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ee7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d1e4      	bne.n	800ee4a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	3308      	adds	r3, #8
 800ee86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee8a:	e853 3f00 	ldrex	r3, [r3]
 800ee8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee96:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	3308      	adds	r3, #8
 800ee9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800eea0:	64ba      	str	r2, [r7, #72]	; 0x48
 800eea2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eea8:	e841 2300 	strex	r3, r2, [r1]
 800eeac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eeae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d1e5      	bne.n	800ee80 <UART_Start_Receive_IT+0x168>
 800eeb4:	e04a      	b.n	800ef4c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	689b      	ldr	r3, [r3, #8]
 800eeba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eebe:	d107      	bne.n	800eed0 <UART_Start_Receive_IT+0x1b8>
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	691b      	ldr	r3, [r3, #16]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d103      	bne.n	800eed0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	4a26      	ldr	r2, [pc, #152]	; (800ef64 <UART_Start_Receive_IT+0x24c>)
 800eecc:	671a      	str	r2, [r3, #112]	; 0x70
 800eece:	e002      	b.n	800eed6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	4a25      	ldr	r2, [pc, #148]	; (800ef68 <UART_Start_Receive_IT+0x250>)
 800eed4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2200      	movs	r2, #0
 800eeda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	691b      	ldr	r3, [r3, #16]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d019      	beq.n	800ef1a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeee:	e853 3f00 	ldrex	r3, [r3]
 800eef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800eefa:	677b      	str	r3, [r7, #116]	; 0x74
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	461a      	mov	r2, r3
 800ef02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef04:	637b      	str	r3, [r7, #52]	; 0x34
 800ef06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef0c:	e841 2300 	strex	r3, r2, [r1]
 800ef10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ef12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d1e6      	bne.n	800eee6 <UART_Start_Receive_IT+0x1ce>
 800ef18:	e018      	b.n	800ef4c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	e853 3f00 	ldrex	r3, [r3]
 800ef26:	613b      	str	r3, [r7, #16]
   return(result);
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	f043 0320 	orr.w	r3, r3, #32
 800ef2e:	67bb      	str	r3, [r7, #120]	; 0x78
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	461a      	mov	r2, r3
 800ef36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef38:	623b      	str	r3, [r7, #32]
 800ef3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef3c:	69f9      	ldr	r1, [r7, #28]
 800ef3e:	6a3a      	ldr	r2, [r7, #32]
 800ef40:	e841 2300 	strex	r3, r2, [r1]
 800ef44:	61bb      	str	r3, [r7, #24]
   return(result);
 800ef46:	69bb      	ldr	r3, [r7, #24]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d1e6      	bne.n	800ef1a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800ef4c:	2300      	movs	r3, #0
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	378c      	adds	r7, #140	; 0x8c
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	0800f675 	.word	0x0800f675
 800ef60:	0800f37d 	.word	0x0800f37d
 800ef64:	0800f21b 	.word	0x0800f21b
 800ef68:	0800f0bb 	.word	0x0800f0bb

0800ef6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b095      	sub	sp, #84	; 0x54
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef7c:	e853 3f00 	ldrex	r3, [r3]
 800ef80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ef82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	461a      	mov	r2, r3
 800ef90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef92:	643b      	str	r3, [r7, #64]	; 0x40
 800ef94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef9a:	e841 2300 	strex	r3, r2, [r1]
 800ef9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800efa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d1e6      	bne.n	800ef74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	3308      	adds	r3, #8
 800efac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efae:	6a3b      	ldr	r3, [r7, #32]
 800efb0:	e853 3f00 	ldrex	r3, [r3]
 800efb4:	61fb      	str	r3, [r7, #28]
   return(result);
 800efb6:	69fa      	ldr	r2, [r7, #28]
 800efb8:	4b1e      	ldr	r3, [pc, #120]	; (800f034 <UART_EndRxTransfer+0xc8>)
 800efba:	4013      	ands	r3, r2
 800efbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	3308      	adds	r3, #8
 800efc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800efc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800efcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efce:	e841 2300 	strex	r3, r2, [r1]
 800efd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d1e5      	bne.n	800efa6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d118      	bne.n	800f014 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	e853 3f00 	ldrex	r3, [r3]
 800efee:	60bb      	str	r3, [r7, #8]
   return(result);
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	f023 0310 	bic.w	r3, r3, #16
 800eff6:	647b      	str	r3, [r7, #68]	; 0x44
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	461a      	mov	r2, r3
 800effe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f000:	61bb      	str	r3, [r7, #24]
 800f002:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f004:	6979      	ldr	r1, [r7, #20]
 800f006:	69ba      	ldr	r2, [r7, #24]
 800f008:	e841 2300 	strex	r3, r2, [r1]
 800f00c:	613b      	str	r3, [r7, #16]
   return(result);
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d1e6      	bne.n	800efe2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2220      	movs	r2, #32
 800f018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2200      	movs	r2, #0
 800f020:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2200      	movs	r2, #0
 800f026:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f028:	bf00      	nop
 800f02a:	3754      	adds	r7, #84	; 0x54
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr
 800f034:	effffffe 	.word	0xeffffffe

0800f038 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f044:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2200      	movs	r2, #0
 800f04a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2200      	movs	r2, #0
 800f052:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f7fe ff2a 	bl	800deb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f05c:	bf00      	nop
 800f05e:	3710      	adds	r7, #16
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b088      	sub	sp, #32
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	e853 3f00 	ldrex	r3, [r3]
 800f078:	60bb      	str	r3, [r7, #8]
   return(result);
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f080:	61fb      	str	r3, [r7, #28]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	461a      	mov	r2, r3
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	61bb      	str	r3, [r7, #24]
 800f08c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f08e:	6979      	ldr	r1, [r7, #20]
 800f090:	69ba      	ldr	r2, [r7, #24]
 800f092:	e841 2300 	strex	r3, r2, [r1]
 800f096:	613b      	str	r3, [r7, #16]
   return(result);
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d1e6      	bne.n	800f06c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2220      	movs	r2, #32
 800f0a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f7fe fef5 	bl	800de9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0b2:	bf00      	nop
 800f0b4:	3720      	adds	r7, #32
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b096      	sub	sp, #88	; 0x58
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0d2:	2b22      	cmp	r3, #34	; 0x22
 800f0d4:	f040 8095 	bne.w	800f202 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f0e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f0e6:	b2d9      	uxtb	r1, r3
 800f0e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f0ec:	b2da      	uxtb	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0f2:	400a      	ands	r2, r1
 800f0f4:	b2d2      	uxtb	r2, r2
 800f0f6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0fc:	1c5a      	adds	r2, r3, #1
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f108:	b29b      	uxth	r3, r3
 800f10a:	3b01      	subs	r3, #1
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d178      	bne.n	800f212 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f128:	e853 3f00 	ldrex	r3, [r3]
 800f12c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f134:	653b      	str	r3, [r7, #80]	; 0x50
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	461a      	mov	r2, r3
 800f13c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f13e:	647b      	str	r3, [r7, #68]	; 0x44
 800f140:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f142:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f144:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f146:	e841 2300 	strex	r3, r2, [r1]
 800f14a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d1e6      	bne.n	800f120 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	3308      	adds	r3, #8
 800f158:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15c:	e853 3f00 	ldrex	r3, [r3]
 800f160:	623b      	str	r3, [r7, #32]
   return(result);
 800f162:	6a3b      	ldr	r3, [r7, #32]
 800f164:	f023 0301 	bic.w	r3, r3, #1
 800f168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	3308      	adds	r3, #8
 800f170:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f172:	633a      	str	r2, [r7, #48]	; 0x30
 800f174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f17a:	e841 2300 	strex	r3, r2, [r1]
 800f17e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f182:	2b00      	cmp	r3, #0
 800f184:	d1e5      	bne.n	800f152 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2220      	movs	r2, #32
 800f18a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2200      	movs	r2, #0
 800f192:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d12e      	bne.n	800f1fa <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	e853 3f00 	ldrex	r3, [r3]
 800f1ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f023 0310 	bic.w	r3, r3, #16
 800f1b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	461a      	mov	r2, r3
 800f1be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1c0:	61fb      	str	r3, [r7, #28]
 800f1c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1c4:	69b9      	ldr	r1, [r7, #24]
 800f1c6:	69fa      	ldr	r2, [r7, #28]
 800f1c8:	e841 2300 	strex	r3, r2, [r1]
 800f1cc:	617b      	str	r3, [r7, #20]
   return(result);
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d1e6      	bne.n	800f1a2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	69db      	ldr	r3, [r3, #28]
 800f1da:	f003 0310 	and.w	r3, r3, #16
 800f1de:	2b10      	cmp	r3, #16
 800f1e0:	d103      	bne.n	800f1ea <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	2210      	movs	r2, #16
 800f1e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f7fe fe66 	bl	800dec4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f1f8:	e00b      	b.n	800f212 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f7f1 fdd0 	bl	8000da0 <HAL_UART_RxCpltCallback>
}
 800f200:	e007      	b.n	800f212 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	699a      	ldr	r2, [r3, #24]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f042 0208 	orr.w	r2, r2, #8
 800f210:	619a      	str	r2, [r3, #24]
}
 800f212:	bf00      	nop
 800f214:	3758      	adds	r7, #88	; 0x58
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}

0800f21a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b096      	sub	sp, #88	; 0x58
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f228:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f232:	2b22      	cmp	r3, #34	; 0x22
 800f234:	f040 8095 	bne.w	800f362 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f23e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f246:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f248:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f24c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f250:	4013      	ands	r3, r2
 800f252:	b29a      	uxth	r2, r3
 800f254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f256:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f25c:	1c9a      	adds	r2, r3, #2
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f268:	b29b      	uxth	r3, r3
 800f26a:	3b01      	subs	r3, #1
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d178      	bne.n	800f372 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f288:	e853 3f00 	ldrex	r3, [r3]
 800f28c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f294:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	461a      	mov	r2, r3
 800f29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f29e:	643b      	str	r3, [r7, #64]	; 0x40
 800f2a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f2a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f2a6:	e841 2300 	strex	r3, r2, [r1]
 800f2aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1e6      	bne.n	800f280 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	3308      	adds	r3, #8
 800f2b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ba:	6a3b      	ldr	r3, [r7, #32]
 800f2bc:	e853 3f00 	ldrex	r3, [r3]
 800f2c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	f023 0301 	bic.w	r3, r3, #1
 800f2c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	3308      	adds	r3, #8
 800f2d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f2d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2da:	e841 2300 	strex	r3, r2, [r1]
 800f2de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d1e5      	bne.n	800f2b2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2220      	movs	r2, #32
 800f2ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d12e      	bne.n	800f35a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	e853 3f00 	ldrex	r3, [r3]
 800f30e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	f023 0310 	bic.w	r3, r3, #16
 800f316:	647b      	str	r3, [r7, #68]	; 0x44
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	461a      	mov	r2, r3
 800f31e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f320:	61bb      	str	r3, [r7, #24]
 800f322:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f324:	6979      	ldr	r1, [r7, #20]
 800f326:	69ba      	ldr	r2, [r7, #24]
 800f328:	e841 2300 	strex	r3, r2, [r1]
 800f32c:	613b      	str	r3, [r7, #16]
   return(result);
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d1e6      	bne.n	800f302 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	69db      	ldr	r3, [r3, #28]
 800f33a:	f003 0310 	and.w	r3, r3, #16
 800f33e:	2b10      	cmp	r3, #16
 800f340:	d103      	bne.n	800f34a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	2210      	movs	r2, #16
 800f348:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f350:	4619      	mov	r1, r3
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f7fe fdb6 	bl	800dec4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f358:	e00b      	b.n	800f372 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f7f1 fd20 	bl	8000da0 <HAL_UART_RxCpltCallback>
}
 800f360:	e007      	b.n	800f372 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	699a      	ldr	r2, [r3, #24]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f042 0208 	orr.w	r2, r2, #8
 800f370:	619a      	str	r2, [r3, #24]
}
 800f372:	bf00      	nop
 800f374:	3758      	adds	r7, #88	; 0x58
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
	...

0800f37c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b0a6      	sub	sp, #152	; 0x98
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f38a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	69db      	ldr	r3, [r3, #28]
 800f394:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	689b      	ldr	r3, [r3, #8]
 800f3a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3b2:	2b22      	cmp	r3, #34	; 0x22
 800f3b4:	f040 814d 	bne.w	800f652 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f3be:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f3c2:	e0f4      	b.n	800f5ae <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ca:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f3ce:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f3d2:	b2d9      	uxtb	r1, r3
 800f3d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f3d8:	b2da      	uxtb	r2, r3
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3de:	400a      	ands	r2, r1
 800f3e0:	b2d2      	uxtb	r2, r2
 800f3e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3e8:	1c5a      	adds	r2, r3, #1
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	3b01      	subs	r3, #1
 800f3f8:	b29a      	uxth	r2, r3
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	69db      	ldr	r3, [r3, #28]
 800f406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f40a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f40e:	f003 0307 	and.w	r3, r3, #7
 800f412:	2b00      	cmp	r3, #0
 800f414:	d053      	beq.n	800f4be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f416:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f41a:	f003 0301 	and.w	r3, r3, #1
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d011      	beq.n	800f446 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d00b      	beq.n	800f446 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	2201      	movs	r2, #1
 800f434:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f43c:	f043 0201 	orr.w	r2, r3, #1
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f446:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f44a:	f003 0302 	and.w	r3, r3, #2
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d011      	beq.n	800f476 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f452:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f456:	f003 0301 	and.w	r3, r3, #1
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d00b      	beq.n	800f476 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	2202      	movs	r2, #2
 800f464:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f46c:	f043 0204 	orr.w	r2, r3, #4
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f476:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f47a:	f003 0304 	and.w	r3, r3, #4
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d011      	beq.n	800f4a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f486:	f003 0301 	and.w	r3, r3, #1
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00b      	beq.n	800f4a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2204      	movs	r2, #4
 800f494:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f49c:	f043 0202 	orr.w	r2, r3, #2
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d006      	beq.n	800f4be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f7fe fcfd 	bl	800deb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4c4:	b29b      	uxth	r3, r3
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d171      	bne.n	800f5ae <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4d2:	e853 3f00 	ldrex	r3, [r3]
 800f4d6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f4d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f4da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4ee:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f4f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f4f4:	e841 2300 	strex	r3, r2, [r1]
 800f4f8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f4fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d1e4      	bne.n	800f4ca <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	3308      	adds	r3, #8
 800f506:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f50a:	e853 3f00 	ldrex	r3, [r3]
 800f50e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f510:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f512:	4b56      	ldr	r3, [pc, #344]	; (800f66c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800f514:	4013      	ands	r3, r2
 800f516:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	3308      	adds	r3, #8
 800f51e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f520:	657a      	str	r2, [r7, #84]	; 0x54
 800f522:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f524:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f526:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f528:	e841 2300 	strex	r3, r2, [r1]
 800f52c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f52e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f530:	2b00      	cmp	r3, #0
 800f532:	d1e5      	bne.n	800f500 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2220      	movs	r2, #32
 800f538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2200      	movs	r2, #0
 800f540:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f546:	2b01      	cmp	r3, #1
 800f548:	d12e      	bne.n	800f5a8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2200      	movs	r2, #0
 800f54e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f558:	e853 3f00 	ldrex	r3, [r3]
 800f55c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f560:	f023 0310 	bic.w	r3, r3, #16
 800f564:	67bb      	str	r3, [r7, #120]	; 0x78
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	461a      	mov	r2, r3
 800f56c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f56e:	643b      	str	r3, [r7, #64]	; 0x40
 800f570:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f572:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f574:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f576:	e841 2300 	strex	r3, r2, [r1]
 800f57a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d1e6      	bne.n	800f550 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	69db      	ldr	r3, [r3, #28]
 800f588:	f003 0310 	and.w	r3, r3, #16
 800f58c:	2b10      	cmp	r3, #16
 800f58e:	d103      	bne.n	800f598 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	2210      	movs	r2, #16
 800f596:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f59e:	4619      	mov	r1, r3
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f7fe fc8f 	bl	800dec4 <HAL_UARTEx_RxEventCallback>
 800f5a6:	e002      	b.n	800f5ae <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f7f1 fbf9 	bl	8000da0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f5ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d006      	beq.n	800f5c4 <UART_RxISR_8BIT_FIFOEN+0x248>
 800f5b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5ba:	f003 0320 	and.w	r3, r3, #32
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	f47f af00 	bne.w	800f3c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f5ce:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d045      	beq.n	800f662 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f5dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d23e      	bcs.n	800f662 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	3308      	adds	r3, #8
 800f5ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ec:	6a3b      	ldr	r3, [r7, #32]
 800f5ee:	e853 3f00 	ldrex	r3, [r3]
 800f5f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f5fa:	673b      	str	r3, [r7, #112]	; 0x70
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	3308      	adds	r3, #8
 800f602:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f604:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f60a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f60c:	e841 2300 	strex	r3, r2, [r1]
 800f610:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f614:	2b00      	cmp	r3, #0
 800f616:	d1e5      	bne.n	800f5e4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4a15      	ldr	r2, [pc, #84]	; (800f670 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f61c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	e853 3f00 	ldrex	r3, [r3]
 800f62a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	f043 0320 	orr.w	r3, r3, #32
 800f632:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	461a      	mov	r2, r3
 800f63a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f63c:	61bb      	str	r3, [r7, #24]
 800f63e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f640:	6979      	ldr	r1, [r7, #20]
 800f642:	69ba      	ldr	r2, [r7, #24]
 800f644:	e841 2300 	strex	r3, r2, [r1]
 800f648:	613b      	str	r3, [r7, #16]
   return(result);
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d1e6      	bne.n	800f61e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f650:	e007      	b.n	800f662 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	699a      	ldr	r2, [r3, #24]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f042 0208 	orr.w	r2, r2, #8
 800f660:	619a      	str	r2, [r3, #24]
}
 800f662:	bf00      	nop
 800f664:	3798      	adds	r7, #152	; 0x98
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	bf00      	nop
 800f66c:	effffffe 	.word	0xeffffffe
 800f670:	0800f0bb 	.word	0x0800f0bb

0800f674 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b0a8      	sub	sp, #160	; 0xa0
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f682:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	69db      	ldr	r3, [r3, #28]
 800f68c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	689b      	ldr	r3, [r3, #8]
 800f6a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6aa:	2b22      	cmp	r3, #34	; 0x22
 800f6ac:	f040 8151 	bne.w	800f952 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f6b6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f6ba:	e0f8      	b.n	800f8ae <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800f6ce:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800f6d2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f6d6:	4013      	ands	r3, r2
 800f6d8:	b29a      	uxth	r2, r3
 800f6da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f6de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6e4:	1c9a      	adds	r2, r3, #2
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6f0:	b29b      	uxth	r3, r3
 800f6f2:	3b01      	subs	r3, #1
 800f6f4:	b29a      	uxth	r2, r3
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	69db      	ldr	r3, [r3, #28]
 800f702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f706:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f70a:	f003 0307 	and.w	r3, r3, #7
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d053      	beq.n	800f7ba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f712:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f716:	f003 0301 	and.w	r3, r3, #1
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d011      	beq.n	800f742 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f71e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00b      	beq.n	800f742 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	2201      	movs	r2, #1
 800f730:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f738:	f043 0201 	orr.w	r2, r3, #1
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f742:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f746:	f003 0302 	and.w	r3, r3, #2
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d011      	beq.n	800f772 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f74e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f752:	f003 0301 	and.w	r3, r3, #1
 800f756:	2b00      	cmp	r3, #0
 800f758:	d00b      	beq.n	800f772 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2202      	movs	r2, #2
 800f760:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f768:	f043 0204 	orr.w	r2, r3, #4
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f772:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f776:	f003 0304 	and.w	r3, r3, #4
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d011      	beq.n	800f7a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f77e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f782:	f003 0301 	and.w	r3, r3, #1
 800f786:	2b00      	cmp	r3, #0
 800f788:	d00b      	beq.n	800f7a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	2204      	movs	r2, #4
 800f790:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f798:	f043 0202 	orr.w	r2, r3, #2
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d006      	beq.n	800f7ba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f7fe fb7f 	bl	800deb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d173      	bne.n	800f8ae <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7ce:	e853 3f00 	ldrex	r3, [r3]
 800f7d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f7d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f7e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f7ea:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f7ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f7f0:	e841 2300 	strex	r3, r2, [r1]
 800f7f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f7f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d1e4      	bne.n	800f7c6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	3308      	adds	r3, #8
 800f802:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f806:	e853 3f00 	ldrex	r3, [r3]
 800f80a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f80c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f80e:	4b57      	ldr	r3, [pc, #348]	; (800f96c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800f810:	4013      	ands	r3, r2
 800f812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	3308      	adds	r3, #8
 800f81c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f820:	65ba      	str	r2, [r7, #88]	; 0x58
 800f822:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f824:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f826:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f828:	e841 2300 	strex	r3, r2, [r1]
 800f82c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f82e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f830:	2b00      	cmp	r3, #0
 800f832:	d1e3      	bne.n	800f7fc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2220      	movs	r2, #32
 800f838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2200      	movs	r2, #0
 800f840:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f846:	2b01      	cmp	r3, #1
 800f848:	d12e      	bne.n	800f8a8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2200      	movs	r2, #0
 800f84e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f858:	e853 3f00 	ldrex	r3, [r3]
 800f85c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f860:	f023 0310 	bic.w	r3, r3, #16
 800f864:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	461a      	mov	r2, r3
 800f86c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f86e:	647b      	str	r3, [r7, #68]	; 0x44
 800f870:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f872:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f876:	e841 2300 	strex	r3, r2, [r1]
 800f87a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f87c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d1e6      	bne.n	800f850 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	69db      	ldr	r3, [r3, #28]
 800f888:	f003 0310 	and.w	r3, r3, #16
 800f88c:	2b10      	cmp	r3, #16
 800f88e:	d103      	bne.n	800f898 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2210      	movs	r2, #16
 800f896:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f89e:	4619      	mov	r1, r3
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f7fe fb0f 	bl	800dec4 <HAL_UARTEx_RxEventCallback>
 800f8a6:	e002      	b.n	800f8ae <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7f1 fa79 	bl	8000da0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f8ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d006      	beq.n	800f8c4 <UART_RxISR_16BIT_FIFOEN+0x250>
 800f8b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f8ba:	f003 0320 	and.w	r3, r3, #32
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f47f aefc 	bne.w	800f6bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f8ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d045      	beq.n	800f962 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f8dc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d23e      	bcs.n	800f962 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	3308      	adds	r3, #8
 800f8ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ee:	e853 3f00 	ldrex	r3, [r3]
 800f8f2:	623b      	str	r3, [r7, #32]
   return(result);
 800f8f4:	6a3b      	ldr	r3, [r7, #32]
 800f8f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f8fa:	677b      	str	r3, [r7, #116]	; 0x74
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	3308      	adds	r3, #8
 800f902:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f904:	633a      	str	r2, [r7, #48]	; 0x30
 800f906:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f90a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f90c:	e841 2300 	strex	r3, r2, [r1]
 800f910:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f914:	2b00      	cmp	r3, #0
 800f916:	d1e5      	bne.n	800f8e4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4a15      	ldr	r2, [pc, #84]	; (800f970 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800f91c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	e853 3f00 	ldrex	r3, [r3]
 800f92a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	f043 0320 	orr.w	r3, r3, #32
 800f932:	673b      	str	r3, [r7, #112]	; 0x70
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	461a      	mov	r2, r3
 800f93a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f93c:	61fb      	str	r3, [r7, #28]
 800f93e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f940:	69b9      	ldr	r1, [r7, #24]
 800f942:	69fa      	ldr	r2, [r7, #28]
 800f944:	e841 2300 	strex	r3, r2, [r1]
 800f948:	617b      	str	r3, [r7, #20]
   return(result);
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d1e6      	bne.n	800f91e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f950:	e007      	b.n	800f962 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	699a      	ldr	r2, [r3, #24]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f042 0208 	orr.w	r2, r2, #8
 800f960:	619a      	str	r2, [r3, #24]
}
 800f962:	bf00      	nop
 800f964:	37a0      	adds	r7, #160	; 0xa0
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	effffffe 	.word	0xeffffffe
 800f970:	0800f21b 	.word	0x0800f21b

0800f974 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f97c:	bf00      	nop
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr

0800f988 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f988:	b480      	push	{r7}
 800f98a:	b083      	sub	sp, #12
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f990:	bf00      	nop
 800f992:	370c      	adds	r7, #12
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr

0800f99c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b083      	sub	sp, #12
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f9a4:	bf00      	nop
 800f9a6:	370c      	adds	r7, #12
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr

0800f9b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b085      	sub	sp, #20
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d101      	bne.n	800f9c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800f9c2:	2302      	movs	r3, #2
 800f9c4:	e027      	b.n	800fa16 <HAL_UARTEx_DisableFifoMode+0x66>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2224      	movs	r2, #36	; 0x24
 800f9d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	681a      	ldr	r2, [r3, #0]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f022 0201 	bic.w	r2, r2, #1
 800f9ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f9f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	68fa      	ldr	r2, [r7, #12]
 800fa02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2220      	movs	r2, #32
 800fa08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fa14:	2300      	movs	r3, #0
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3714      	adds	r7, #20
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa20:	4770      	bx	lr

0800fa22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b084      	sub	sp, #16
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]
 800fa2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d101      	bne.n	800fa3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fa36:	2302      	movs	r3, #2
 800fa38:	e02d      	b.n	800fa96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2224      	movs	r2, #36	; 0x24
 800fa46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	f022 0201 	bic.w	r2, r2, #1
 800fa60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	689b      	ldr	r3, [r3, #8]
 800fa68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	683a      	ldr	r2, [r7, #0]
 800fa72:	430a      	orrs	r2, r1
 800fa74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f000 f850 	bl	800fb1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2220      	movs	r2, #32
 800fa88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fa94:	2300      	movs	r3, #0
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	3710      	adds	r7, #16
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}

0800fa9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa9e:	b580      	push	{r7, lr}
 800faa0:	b084      	sub	sp, #16
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
 800faa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800faae:	2b01      	cmp	r3, #1
 800fab0:	d101      	bne.n	800fab6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fab2:	2302      	movs	r3, #2
 800fab4:	e02d      	b.n	800fb12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2201      	movs	r2, #1
 800faba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2224      	movs	r2, #36	; 0x24
 800fac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	681a      	ldr	r2, [r3, #0]
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	f022 0201 	bic.w	r2, r2, #1
 800fadc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	689b      	ldr	r3, [r3, #8]
 800fae4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	683a      	ldr	r2, [r7, #0]
 800faee:	430a      	orrs	r2, r1
 800faf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 f812 	bl	800fb1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2220      	movs	r2, #32
 800fb04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fb10:	2300      	movs	r3, #0
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3710      	adds	r7, #16
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
	...

0800fb1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b085      	sub	sp, #20
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d108      	bne.n	800fb3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2201      	movs	r2, #1
 800fb30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2201      	movs	r2, #1
 800fb38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fb3c:	e031      	b.n	800fba2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fb3e:	2310      	movs	r3, #16
 800fb40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fb42:	2310      	movs	r3, #16
 800fb44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	689b      	ldr	r3, [r3, #8]
 800fb4c:	0e5b      	lsrs	r3, r3, #25
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	f003 0307 	and.w	r3, r3, #7
 800fb54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	689b      	ldr	r3, [r3, #8]
 800fb5c:	0f5b      	lsrs	r3, r3, #29
 800fb5e:	b2db      	uxtb	r3, r3
 800fb60:	f003 0307 	and.w	r3, r3, #7
 800fb64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb66:	7bbb      	ldrb	r3, [r7, #14]
 800fb68:	7b3a      	ldrb	r2, [r7, #12]
 800fb6a:	4911      	ldr	r1, [pc, #68]	; (800fbb0 <UARTEx_SetNbDataToProcess+0x94>)
 800fb6c:	5c8a      	ldrb	r2, [r1, r2]
 800fb6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fb72:	7b3a      	ldrb	r2, [r7, #12]
 800fb74:	490f      	ldr	r1, [pc, #60]	; (800fbb4 <UARTEx_SetNbDataToProcess+0x98>)
 800fb76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb78:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb7c:	b29a      	uxth	r2, r3
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb84:	7bfb      	ldrb	r3, [r7, #15]
 800fb86:	7b7a      	ldrb	r2, [r7, #13]
 800fb88:	4909      	ldr	r1, [pc, #36]	; (800fbb0 <UARTEx_SetNbDataToProcess+0x94>)
 800fb8a:	5c8a      	ldrb	r2, [r1, r2]
 800fb8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fb90:	7b7a      	ldrb	r2, [r7, #13]
 800fb92:	4908      	ldr	r1, [pc, #32]	; (800fbb4 <UARTEx_SetNbDataToProcess+0x98>)
 800fb94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb96:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb9a:	b29a      	uxth	r2, r3
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fba2:	bf00      	nop
 800fba4:	3714      	adds	r7, #20
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr
 800fbae:	bf00      	nop
 800fbb0:	0800feb4 	.word	0x0800feb4
 800fbb4:	0800febc 	.word	0x0800febc

0800fbb8 <__errno>:
 800fbb8:	4b01      	ldr	r3, [pc, #4]	; (800fbc0 <__errno+0x8>)
 800fbba:	6818      	ldr	r0, [r3, #0]
 800fbbc:	4770      	bx	lr
 800fbbe:	bf00      	nop
 800fbc0:	2400003c 	.word	0x2400003c

0800fbc4 <__libc_init_array>:
 800fbc4:	b570      	push	{r4, r5, r6, lr}
 800fbc6:	4d0d      	ldr	r5, [pc, #52]	; (800fbfc <__libc_init_array+0x38>)
 800fbc8:	4c0d      	ldr	r4, [pc, #52]	; (800fc00 <__libc_init_array+0x3c>)
 800fbca:	1b64      	subs	r4, r4, r5
 800fbcc:	10a4      	asrs	r4, r4, #2
 800fbce:	2600      	movs	r6, #0
 800fbd0:	42a6      	cmp	r6, r4
 800fbd2:	d109      	bne.n	800fbe8 <__libc_init_array+0x24>
 800fbd4:	4d0b      	ldr	r5, [pc, #44]	; (800fc04 <__libc_init_array+0x40>)
 800fbd6:	4c0c      	ldr	r4, [pc, #48]	; (800fc08 <__libc_init_array+0x44>)
 800fbd8:	f000 f93c 	bl	800fe54 <_init>
 800fbdc:	1b64      	subs	r4, r4, r5
 800fbde:	10a4      	asrs	r4, r4, #2
 800fbe0:	2600      	movs	r6, #0
 800fbe2:	42a6      	cmp	r6, r4
 800fbe4:	d105      	bne.n	800fbf2 <__libc_init_array+0x2e>
 800fbe6:	bd70      	pop	{r4, r5, r6, pc}
 800fbe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbec:	4798      	blx	r3
 800fbee:	3601      	adds	r6, #1
 800fbf0:	e7ee      	b.n	800fbd0 <__libc_init_array+0xc>
 800fbf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbf6:	4798      	blx	r3
 800fbf8:	3601      	adds	r6, #1
 800fbfa:	e7f2      	b.n	800fbe2 <__libc_init_array+0x1e>
 800fbfc:	0800fecc 	.word	0x0800fecc
 800fc00:	0800fecc 	.word	0x0800fecc
 800fc04:	0800fecc 	.word	0x0800fecc
 800fc08:	0800fed0 	.word	0x0800fed0

0800fc0c <malloc>:
 800fc0c:	4b02      	ldr	r3, [pc, #8]	; (800fc18 <malloc+0xc>)
 800fc0e:	4601      	mov	r1, r0
 800fc10:	6818      	ldr	r0, [r3, #0]
 800fc12:	f000 b88d 	b.w	800fd30 <_malloc_r>
 800fc16:	bf00      	nop
 800fc18:	2400003c 	.word	0x2400003c

0800fc1c <free>:
 800fc1c:	4b02      	ldr	r3, [pc, #8]	; (800fc28 <free+0xc>)
 800fc1e:	4601      	mov	r1, r0
 800fc20:	6818      	ldr	r0, [r3, #0]
 800fc22:	f000 b819 	b.w	800fc58 <_free_r>
 800fc26:	bf00      	nop
 800fc28:	2400003c 	.word	0x2400003c

0800fc2c <memcpy>:
 800fc2c:	440a      	add	r2, r1
 800fc2e:	4291      	cmp	r1, r2
 800fc30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fc34:	d100      	bne.n	800fc38 <memcpy+0xc>
 800fc36:	4770      	bx	lr
 800fc38:	b510      	push	{r4, lr}
 800fc3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc42:	4291      	cmp	r1, r2
 800fc44:	d1f9      	bne.n	800fc3a <memcpy+0xe>
 800fc46:	bd10      	pop	{r4, pc}

0800fc48 <memset>:
 800fc48:	4402      	add	r2, r0
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d100      	bne.n	800fc52 <memset+0xa>
 800fc50:	4770      	bx	lr
 800fc52:	f803 1b01 	strb.w	r1, [r3], #1
 800fc56:	e7f9      	b.n	800fc4c <memset+0x4>

0800fc58 <_free_r>:
 800fc58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc5a:	2900      	cmp	r1, #0
 800fc5c:	d044      	beq.n	800fce8 <_free_r+0x90>
 800fc5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc62:	9001      	str	r0, [sp, #4]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f1a1 0404 	sub.w	r4, r1, #4
 800fc6a:	bfb8      	it	lt
 800fc6c:	18e4      	addlt	r4, r4, r3
 800fc6e:	f000 f8e3 	bl	800fe38 <__malloc_lock>
 800fc72:	4a1e      	ldr	r2, [pc, #120]	; (800fcec <_free_r+0x94>)
 800fc74:	9801      	ldr	r0, [sp, #4]
 800fc76:	6813      	ldr	r3, [r2, #0]
 800fc78:	b933      	cbnz	r3, 800fc88 <_free_r+0x30>
 800fc7a:	6063      	str	r3, [r4, #4]
 800fc7c:	6014      	str	r4, [r2, #0]
 800fc7e:	b003      	add	sp, #12
 800fc80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc84:	f000 b8de 	b.w	800fe44 <__malloc_unlock>
 800fc88:	42a3      	cmp	r3, r4
 800fc8a:	d908      	bls.n	800fc9e <_free_r+0x46>
 800fc8c:	6825      	ldr	r5, [r4, #0]
 800fc8e:	1961      	adds	r1, r4, r5
 800fc90:	428b      	cmp	r3, r1
 800fc92:	bf01      	itttt	eq
 800fc94:	6819      	ldreq	r1, [r3, #0]
 800fc96:	685b      	ldreq	r3, [r3, #4]
 800fc98:	1949      	addeq	r1, r1, r5
 800fc9a:	6021      	streq	r1, [r4, #0]
 800fc9c:	e7ed      	b.n	800fc7a <_free_r+0x22>
 800fc9e:	461a      	mov	r2, r3
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	b10b      	cbz	r3, 800fca8 <_free_r+0x50>
 800fca4:	42a3      	cmp	r3, r4
 800fca6:	d9fa      	bls.n	800fc9e <_free_r+0x46>
 800fca8:	6811      	ldr	r1, [r2, #0]
 800fcaa:	1855      	adds	r5, r2, r1
 800fcac:	42a5      	cmp	r5, r4
 800fcae:	d10b      	bne.n	800fcc8 <_free_r+0x70>
 800fcb0:	6824      	ldr	r4, [r4, #0]
 800fcb2:	4421      	add	r1, r4
 800fcb4:	1854      	adds	r4, r2, r1
 800fcb6:	42a3      	cmp	r3, r4
 800fcb8:	6011      	str	r1, [r2, #0]
 800fcba:	d1e0      	bne.n	800fc7e <_free_r+0x26>
 800fcbc:	681c      	ldr	r4, [r3, #0]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	6053      	str	r3, [r2, #4]
 800fcc2:	4421      	add	r1, r4
 800fcc4:	6011      	str	r1, [r2, #0]
 800fcc6:	e7da      	b.n	800fc7e <_free_r+0x26>
 800fcc8:	d902      	bls.n	800fcd0 <_free_r+0x78>
 800fcca:	230c      	movs	r3, #12
 800fccc:	6003      	str	r3, [r0, #0]
 800fcce:	e7d6      	b.n	800fc7e <_free_r+0x26>
 800fcd0:	6825      	ldr	r5, [r4, #0]
 800fcd2:	1961      	adds	r1, r4, r5
 800fcd4:	428b      	cmp	r3, r1
 800fcd6:	bf04      	itt	eq
 800fcd8:	6819      	ldreq	r1, [r3, #0]
 800fcda:	685b      	ldreq	r3, [r3, #4]
 800fcdc:	6063      	str	r3, [r4, #4]
 800fcde:	bf04      	itt	eq
 800fce0:	1949      	addeq	r1, r1, r5
 800fce2:	6021      	streq	r1, [r4, #0]
 800fce4:	6054      	str	r4, [r2, #4]
 800fce6:	e7ca      	b.n	800fc7e <_free_r+0x26>
 800fce8:	b003      	add	sp, #12
 800fcea:	bd30      	pop	{r4, r5, pc}
 800fcec:	240005c4 	.word	0x240005c4

0800fcf0 <sbrk_aligned>:
 800fcf0:	b570      	push	{r4, r5, r6, lr}
 800fcf2:	4e0e      	ldr	r6, [pc, #56]	; (800fd2c <sbrk_aligned+0x3c>)
 800fcf4:	460c      	mov	r4, r1
 800fcf6:	6831      	ldr	r1, [r6, #0]
 800fcf8:	4605      	mov	r5, r0
 800fcfa:	b911      	cbnz	r1, 800fd02 <sbrk_aligned+0x12>
 800fcfc:	f000 f88c 	bl	800fe18 <_sbrk_r>
 800fd00:	6030      	str	r0, [r6, #0]
 800fd02:	4621      	mov	r1, r4
 800fd04:	4628      	mov	r0, r5
 800fd06:	f000 f887 	bl	800fe18 <_sbrk_r>
 800fd0a:	1c43      	adds	r3, r0, #1
 800fd0c:	d00a      	beq.n	800fd24 <sbrk_aligned+0x34>
 800fd0e:	1cc4      	adds	r4, r0, #3
 800fd10:	f024 0403 	bic.w	r4, r4, #3
 800fd14:	42a0      	cmp	r0, r4
 800fd16:	d007      	beq.n	800fd28 <sbrk_aligned+0x38>
 800fd18:	1a21      	subs	r1, r4, r0
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	f000 f87c 	bl	800fe18 <_sbrk_r>
 800fd20:	3001      	adds	r0, #1
 800fd22:	d101      	bne.n	800fd28 <sbrk_aligned+0x38>
 800fd24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fd28:	4620      	mov	r0, r4
 800fd2a:	bd70      	pop	{r4, r5, r6, pc}
 800fd2c:	240005c8 	.word	0x240005c8

0800fd30 <_malloc_r>:
 800fd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd34:	1ccd      	adds	r5, r1, #3
 800fd36:	f025 0503 	bic.w	r5, r5, #3
 800fd3a:	3508      	adds	r5, #8
 800fd3c:	2d0c      	cmp	r5, #12
 800fd3e:	bf38      	it	cc
 800fd40:	250c      	movcc	r5, #12
 800fd42:	2d00      	cmp	r5, #0
 800fd44:	4607      	mov	r7, r0
 800fd46:	db01      	blt.n	800fd4c <_malloc_r+0x1c>
 800fd48:	42a9      	cmp	r1, r5
 800fd4a:	d905      	bls.n	800fd58 <_malloc_r+0x28>
 800fd4c:	230c      	movs	r3, #12
 800fd4e:	603b      	str	r3, [r7, #0]
 800fd50:	2600      	movs	r6, #0
 800fd52:	4630      	mov	r0, r6
 800fd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd58:	4e2e      	ldr	r6, [pc, #184]	; (800fe14 <_malloc_r+0xe4>)
 800fd5a:	f000 f86d 	bl	800fe38 <__malloc_lock>
 800fd5e:	6833      	ldr	r3, [r6, #0]
 800fd60:	461c      	mov	r4, r3
 800fd62:	bb34      	cbnz	r4, 800fdb2 <_malloc_r+0x82>
 800fd64:	4629      	mov	r1, r5
 800fd66:	4638      	mov	r0, r7
 800fd68:	f7ff ffc2 	bl	800fcf0 <sbrk_aligned>
 800fd6c:	1c43      	adds	r3, r0, #1
 800fd6e:	4604      	mov	r4, r0
 800fd70:	d14d      	bne.n	800fe0e <_malloc_r+0xde>
 800fd72:	6834      	ldr	r4, [r6, #0]
 800fd74:	4626      	mov	r6, r4
 800fd76:	2e00      	cmp	r6, #0
 800fd78:	d140      	bne.n	800fdfc <_malloc_r+0xcc>
 800fd7a:	6823      	ldr	r3, [r4, #0]
 800fd7c:	4631      	mov	r1, r6
 800fd7e:	4638      	mov	r0, r7
 800fd80:	eb04 0803 	add.w	r8, r4, r3
 800fd84:	f000 f848 	bl	800fe18 <_sbrk_r>
 800fd88:	4580      	cmp	r8, r0
 800fd8a:	d13a      	bne.n	800fe02 <_malloc_r+0xd2>
 800fd8c:	6821      	ldr	r1, [r4, #0]
 800fd8e:	3503      	adds	r5, #3
 800fd90:	1a6d      	subs	r5, r5, r1
 800fd92:	f025 0503 	bic.w	r5, r5, #3
 800fd96:	3508      	adds	r5, #8
 800fd98:	2d0c      	cmp	r5, #12
 800fd9a:	bf38      	it	cc
 800fd9c:	250c      	movcc	r5, #12
 800fd9e:	4629      	mov	r1, r5
 800fda0:	4638      	mov	r0, r7
 800fda2:	f7ff ffa5 	bl	800fcf0 <sbrk_aligned>
 800fda6:	3001      	adds	r0, #1
 800fda8:	d02b      	beq.n	800fe02 <_malloc_r+0xd2>
 800fdaa:	6823      	ldr	r3, [r4, #0]
 800fdac:	442b      	add	r3, r5
 800fdae:	6023      	str	r3, [r4, #0]
 800fdb0:	e00e      	b.n	800fdd0 <_malloc_r+0xa0>
 800fdb2:	6822      	ldr	r2, [r4, #0]
 800fdb4:	1b52      	subs	r2, r2, r5
 800fdb6:	d41e      	bmi.n	800fdf6 <_malloc_r+0xc6>
 800fdb8:	2a0b      	cmp	r2, #11
 800fdba:	d916      	bls.n	800fdea <_malloc_r+0xba>
 800fdbc:	1961      	adds	r1, r4, r5
 800fdbe:	42a3      	cmp	r3, r4
 800fdc0:	6025      	str	r5, [r4, #0]
 800fdc2:	bf18      	it	ne
 800fdc4:	6059      	strne	r1, [r3, #4]
 800fdc6:	6863      	ldr	r3, [r4, #4]
 800fdc8:	bf08      	it	eq
 800fdca:	6031      	streq	r1, [r6, #0]
 800fdcc:	5162      	str	r2, [r4, r5]
 800fdce:	604b      	str	r3, [r1, #4]
 800fdd0:	4638      	mov	r0, r7
 800fdd2:	f104 060b 	add.w	r6, r4, #11
 800fdd6:	f000 f835 	bl	800fe44 <__malloc_unlock>
 800fdda:	f026 0607 	bic.w	r6, r6, #7
 800fdde:	1d23      	adds	r3, r4, #4
 800fde0:	1af2      	subs	r2, r6, r3
 800fde2:	d0b6      	beq.n	800fd52 <_malloc_r+0x22>
 800fde4:	1b9b      	subs	r3, r3, r6
 800fde6:	50a3      	str	r3, [r4, r2]
 800fde8:	e7b3      	b.n	800fd52 <_malloc_r+0x22>
 800fdea:	6862      	ldr	r2, [r4, #4]
 800fdec:	42a3      	cmp	r3, r4
 800fdee:	bf0c      	ite	eq
 800fdf0:	6032      	streq	r2, [r6, #0]
 800fdf2:	605a      	strne	r2, [r3, #4]
 800fdf4:	e7ec      	b.n	800fdd0 <_malloc_r+0xa0>
 800fdf6:	4623      	mov	r3, r4
 800fdf8:	6864      	ldr	r4, [r4, #4]
 800fdfa:	e7b2      	b.n	800fd62 <_malloc_r+0x32>
 800fdfc:	4634      	mov	r4, r6
 800fdfe:	6876      	ldr	r6, [r6, #4]
 800fe00:	e7b9      	b.n	800fd76 <_malloc_r+0x46>
 800fe02:	230c      	movs	r3, #12
 800fe04:	603b      	str	r3, [r7, #0]
 800fe06:	4638      	mov	r0, r7
 800fe08:	f000 f81c 	bl	800fe44 <__malloc_unlock>
 800fe0c:	e7a1      	b.n	800fd52 <_malloc_r+0x22>
 800fe0e:	6025      	str	r5, [r4, #0]
 800fe10:	e7de      	b.n	800fdd0 <_malloc_r+0xa0>
 800fe12:	bf00      	nop
 800fe14:	240005c4 	.word	0x240005c4

0800fe18 <_sbrk_r>:
 800fe18:	b538      	push	{r3, r4, r5, lr}
 800fe1a:	4d06      	ldr	r5, [pc, #24]	; (800fe34 <_sbrk_r+0x1c>)
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	4604      	mov	r4, r0
 800fe20:	4608      	mov	r0, r1
 800fe22:	602b      	str	r3, [r5, #0]
 800fe24:	f7f2 fbf4 	bl	8002610 <_sbrk>
 800fe28:	1c43      	adds	r3, r0, #1
 800fe2a:	d102      	bne.n	800fe32 <_sbrk_r+0x1a>
 800fe2c:	682b      	ldr	r3, [r5, #0]
 800fe2e:	b103      	cbz	r3, 800fe32 <_sbrk_r+0x1a>
 800fe30:	6023      	str	r3, [r4, #0]
 800fe32:	bd38      	pop	{r3, r4, r5, pc}
 800fe34:	240005cc 	.word	0x240005cc

0800fe38 <__malloc_lock>:
 800fe38:	4801      	ldr	r0, [pc, #4]	; (800fe40 <__malloc_lock+0x8>)
 800fe3a:	f000 b809 	b.w	800fe50 <__retarget_lock_acquire_recursive>
 800fe3e:	bf00      	nop
 800fe40:	240005d0 	.word	0x240005d0

0800fe44 <__malloc_unlock>:
 800fe44:	4801      	ldr	r0, [pc, #4]	; (800fe4c <__malloc_unlock+0x8>)
 800fe46:	f000 b804 	b.w	800fe52 <__retarget_lock_release_recursive>
 800fe4a:	bf00      	nop
 800fe4c:	240005d0 	.word	0x240005d0

0800fe50 <__retarget_lock_acquire_recursive>:
 800fe50:	4770      	bx	lr

0800fe52 <__retarget_lock_release_recursive>:
 800fe52:	4770      	bx	lr

0800fe54 <_init>:
 800fe54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe56:	bf00      	nop
 800fe58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe5a:	bc08      	pop	{r3}
 800fe5c:	469e      	mov	lr, r3
 800fe5e:	4770      	bx	lr

0800fe60 <_fini>:
 800fe60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe62:	bf00      	nop
 800fe64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe66:	bc08      	pop	{r3}
 800fe68:	469e      	mov	lr, r3
 800fe6a:	4770      	bx	lr
